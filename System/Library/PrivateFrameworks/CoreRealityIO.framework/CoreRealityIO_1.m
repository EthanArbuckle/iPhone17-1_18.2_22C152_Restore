void sub_23F56A260(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3346E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3346E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<realityio::UnionInputDescriptor>::construct[abi:ne180100]<realityio::UnionInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, int *a5, void **a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  realityio::UnionInputDescriptor::UnionInputDescriptor(a2, (uint64_t)&__p, a4, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F56A39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::UnionInputDescriptor::UnionInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, int a4, void **a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F334738;
  a1[7] = 0;
  a1[8] = 0;
  a1[6] = 0;
  std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*>(a1 + 6, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  return a1;
}

void sub_23F56A480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  realityio::InputDescriptor::~InputDescriptor(v14);
  _Unwind_Resume(a1);
}

void realityio::UnionInputDescriptor::~UnionInputDescriptor(realityio::UnionInputDescriptor *this)
{
  *(void *)this = &unk_26F334738;
  v2 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  void **v2;

  *(void *)this = &unk_26F334738;
  v2 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  realityio::InputDescriptor::~InputDescriptor(this);
  MEMORY[0x2455D2BD0]();
}

uint64_t realityio::UnionInputDescriptor::resolvedPrimPaths@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = *(void *)(result + 48);
  for (uint64_t i = *(void *)(result + 56); v3 != i; v3 += 16)
  {
    (*(void (**)(void *__return_ptr))(**(void **)v3 + 16))(v6);
    for (j = v7; j; j = *(unsigned int **)j)
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a2, j + 4, j + 4);
    result = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v6);
  }
  return result;
}

void sub_23F56A64C(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26F334788;
  return result;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F334788;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::SkeletonPoseDefinitionBuilder::kOutputName((realityio::SkeletonPoseDefinitionBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v18) = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 224), (int *)&v18, &v20);
  v6 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v20);
  v7 = (realityio::SkeletonPoseDefinitionBuilder *)v21;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v8 = realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v16) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v8, (std::string::size_type *)(v9 + 200), (int *)&v16, &v18);
  v10 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v18);
  v11 = (realityio::SkeletonPoseDefinitionBuilder *)v19;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v12 = realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v11);
  unint64_t v13 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v15 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v12, (std::string::size_type *)(v13 + 208), &v15, &v16);
  v14 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F56A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a2 + 2));
    realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(a2);
    JUMPOUT(0x2455D2BD0);
  }
}

void *realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void realityio::Inputs::_getValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v54[2] = *MEMORY[0x263EF8340];
  uint64_t v48 = 0;
  v49 = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 24);
  if (v8)
  {
    v49 = std::__shared_weak_count::lock(v8);
    if (v49) {
      uint64_t v48 = *(void *)(a2 + 16);
    }
  }
  MEMORY[0x2455CF830](&v50, a3);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a2 + 8), &v48);
  if (v9 == v10)
  {
    std::operator+<char>();
    v22 = std::string::append(&v45, ") at prim path (");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    int v25 = *(char *)(String + 23);
    if (v25 >= 0) {
      v26 = (const std::string::value_type *)String;
    }
    else {
      v26 = *(const std::string::value_type **)String;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(String + 8);
    }
    v28 = std::string::append(&v46, v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v47, ")");
LABEL_22:
    long long v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v53, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
    uint64_t v31 = *(void *)&v53[16];
    v54[0] = *(void *)&v53[24];
    *(void *)((char *)v54 + 7) = *(void *)&v53[31];
    char v32 = v53[39];
    memset(&v53[16], 0, 24);
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 39) = *(void *)((char *)v54 + 7);
    uint64_t v33 = v54[0];
    *(void *)(a1 + 24) = v31;
    *(void *)(a1 + 32) = v33;
    *(unsigned char *)(a1 + 47) = v32;
    if (v52.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = (std::mutex *)v45.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v34);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  uint64_t v11 = 1;
  uint64_t v12 = v9;
  do
  {
    uint64_t v12 = (void *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    unint64_t v13 = std::string::append(&v45, ") at prim path (");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    int v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      v17 = (const std::string::value_type *)v15;
    }
    else {
      v17 = *(const std::string::value_type **)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(v15 + 8);
    }
    v19 = std::string::append(&v46, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v47, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  uint64_t v35 = v9[5];
  v37 = *(std::mutex **)(v35 + 16);
  v36 = *(std::__shared_weak_count **)(v35 + 24);
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyuint64_t String = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  }
  realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(v37, EmptyString, (uint64_t)v53);
  int v40 = v53[0];
  if (v53[0])
  {
    *(void *)&long long v39 = *(void *)&v53[8];
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v53[8];
    if ((v53[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)&v53[24], *(std::string::size_type *)&v53[32]);
      if (v53[0]) {
        BOOL v42 = 0;
      }
      else {
        BOOL v42 = v53[47] < 0;
      }
      int v41 = v42;
    }
    else
    {
      int v41 = 0;
      std::string v52 = *(std::string *)&v53[24];
    }
    long long v39 = *(_OWORD *)__p;
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
    v37 = (std::mutex *)v52.__r_.__value_.__r.__words[0];
    LODWORD(v47.__r_.__value_.__l.__data_) = v52.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v47.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v52.__r_.__value_.__r.__words[2] + 3);
    char v4 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    if (v41)
    {
      long long v43 = *(_OWORD *)__p;
      operator delete(*(void **)&v53[24]);
      long long v39 = v43;
    }
  }
  if (v36)
  {
    long long v44 = v39;
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    long long v39 = v44;
  }
  if (v40)
  {
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 8) = v39;
  }
  else
  {
    *(_OWORD *)v53 = v39;
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v53[16], (const std::string::value_type *)v37, size);
      *(unsigned char *)a1 = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)&v53[16];
      *(void *)(a1 + 40) = *(void *)&v53[32];
      v34 = v37;
      goto LABEL_30;
    }
    *(void *)&v53[16] = v37;
    *(void *)&v53[24] = size;
    *(_DWORD *)&v53[32] = v47.__r_.__value_.__l.__data_;
    *(_DWORD *)&v53[35] = *(_DWORD *)((char *)v47.__r_.__value_.__r.__words + 3);
    v53[39] = v4;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&v53[16];
    *(void *)(a1 + 40) = *(void *)&v53[32];
  }
LABEL_54:
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
}

void sub_23F56AEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33)
{
  operator delete(v33);
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

void realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = 0;
  std::string v47 = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
  {
    std::string v47 = std::__shared_weak_count::lock(v8);
    if (v47) {
      uint64_t v46 = *(void *)(a1 + 16);
    }
  }
  MEMORY[0x2455CF830](&v48, a2);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a1 + 8), &v46);
  if (v9 == v10)
  {
    std::operator+<char>();
    v22 = std::string::append(&v43, ") at prim path (");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v25 = *(char *)(String + 23);
    if (v25 >= 0) {
      v26 = (const std::string::value_type *)String;
    }
    else {
      v26 = *(const std::string::value_type **)String;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(String + 8);
    }
    v28 = std::string::append(&v44, v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v45, ")");
LABEL_22:
    long long v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v51, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
    uint64_t v31 = *(void *)&v51[24];
    *(void *)(a3 + 24) = *(void *)&v51[16];
    *(void *)(a3 + 32) = v31;
    *(void *)(a3 + 39) = *(void *)&v51[31];
    LOBYTE(v31) = v51[39];
    memset(&v51[16], 0, 24);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v31;
    if (v50.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      char v32 = (std::mutex *)v43.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v32);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  uint64_t v11 = 1;
  uint64_t v12 = v9;
  do
  {
    uint64_t v12 = (void *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    unint64_t v13 = std::string::append(&v43, ") at prim path (");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      v17 = (const std::string::value_type *)v15;
    }
    else {
      v17 = *(const std::string::value_type **)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(v15 + 8);
    }
    v19 = std::string::append(&v44, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v45, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  uint64_t v33 = v9[5];
  uint64_t v35 = *(std::mutex **)(v33 + 16);
  v34 = *(std::__shared_weak_count **)(v33 + 24);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyuint64_t String = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  }
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v35, EmptyString, (uint64_t)v51);
  int v38 = v51[0];
  if (v51[0])
  {
    *(void *)&long long v37 = *(void *)&v51[8];
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v51[8];
    if ((v51[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)&v51[24], *(std::string::size_type *)&v51[32]);
      if (v51[0]) {
        BOOL v40 = 0;
      }
      else {
        BOOL v40 = v51[47] < 0;
      }
      int v39 = v40;
    }
    else
    {
      int v39 = 0;
      std::string v50 = *(std::string *)&v51[24];
    }
    long long v37 = *(_OWORD *)__p;
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
    uint64_t v35 = (std::mutex *)v50.__r_.__value_.__r.__words[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = v50.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v45.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v50.__r_.__value_.__r.__words[2] + 3);
    char v4 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if (v39)
    {
      long long v41 = *(_OWORD *)__p;
      operator delete(*(void **)&v51[24]);
      long long v37 = v41;
    }
  }
  if (v34)
  {
    long long v42 = v37;
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    long long v37 = v42;
  }
  if (v38)
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v37;
  }
  else
  {
    *(_OWORD *)v51 = v37;
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v51[16], (const std::string::value_type *)v35, size);
      *(unsigned char *)a3 = 0;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)&v51[16];
      *(void *)(a3 + 40) = *(void *)&v51[32];
      char v32 = v35;
      goto LABEL_30;
    }
    *(void *)&v51[16] = v35;
    *(void *)&v51[24] = size;
    *(_DWORD *)&v51[32] = v45.__r_.__value_.__l.__data_;
    *(_DWORD *)&v51[35] = *(_DWORD *)((char *)v45.__r_.__value_.__r.__words + 3);
    v51[39] = v4;
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v51[16];
    *(void *)(a3 + 40) = *(void *)&v51[32];
  }
LABEL_54:
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
}

void sub_23F56B370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33)
{
  operator delete(v33);
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = a2;
  *a3 = 0;
  a3[1] = 0;
  (**(void (***)(uint64_t))a1)(a1);
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v8 = MEMORY[0x2455CDC30](ServiceLocator);
  v6 = operator new(0x20uLL);
  void *v6 = &unk_26F334888;
  v6[1] = a3;
  void v6[2] = &v8;
  v6[3] = &v9;
  v10[3] = v6;
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v10);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v10);
}

void sub_23F56B5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v4 + 1);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v4);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x20uLL);
  *(void *)v2 = &unk_26F334888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F334888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  return realityio::WrappedRERef<REAsset *>::operator=(*(void **)(a1 + 8), &AssetHandle);
}

uint64_t std::__function::__func<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::target_type()
{
}

realityio::PhysicsSceneGroundPlaneComponentBuilder *realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(realityio::PhysicsSceneGroundPlaneComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__src, "PhysicsSceneGroundPlaneComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsSceneGroundPlaneComponentBuilderIdentifier);
  realityio::generatePhysicsSceneGroundPlaneDirtyStageSubscription(&v5);
  v10[0] = &unk_26F334980;
  v10[3] = v10;
  v9[0] = &unk_26F334A00;
  v9[3] = v9;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)__src, (uint64_t)__p, &v5, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((v12[7] & 0x80000000) != 0) {
    operator delete(__src[0]);
  }
  *(void *)this = &unk_26F334908;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  __src[0] = (void *)REGroundPlaneComponentGetComponentType();
  __src[1] = (void *)REPhysicsOriginComponentGetComponentType();
  std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>((char *)this + 280, (char *)__src, (uint64_t)v12, 2uLL);
  return this;
}

void sub_23F56B8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a18);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a22);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::PhysicsSceneGroundPlaneComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  char v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v19, v5, v4);
  isSceneGroundPlane = (realityio *)realityio::isSceneGroundPlane((realityio *)&v19, v6);
  if (isSceneGroundPlane)
  {
    char v8 = *(NSObject **)(realityio::logObjects(isSceneGroundPlane) + 24);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_INFO, "Updating entity's scene ground plane.", buf, 2u);
    }
    uint64_t v10 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)buf);
    if (buf[0])
    {
      uint64_t v11 = v18;
      int v16 = v18;
      if (v18)
      {
        RERetain();
        uint64_t v12 = *((void *)a2 + 6);
        uint64_t v13 = operator new(0x20uLL);
        *uint64_t v13 = &unk_26F334A80;
        v13[1] = a2;
        v13[2] = &v16;
        v13[3] = this;
        v24 = v13;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 16))(v12, v23);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v23);
LABEL_10:
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v16);
        realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)buf);
        goto LABEL_11;
      }
    }
    else
    {
      int v16 = 0;
    }
    long long v14 = *(NSObject **)(realityio::logObjects(v11) + 24);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v23 = 0;
      _os_log_impl(&dword_23F4EA000, v14, OS_LOG_TYPE_DEFAULT, "Stopping operation to set the component because entity no longer exists", v23, 2u);
    }
    goto LABEL_10;
  }
LABEL_11:
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  uint64_t result = v20;
  if (v20) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
  return result;
}

void sub_23F56BB1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v2 - 80));
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  _Unwind_Resume(a1);
}

void *realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v4 = a2;
  v5[0] = &unk_26F334C00;
  v5[1] = &v4;
  v5[2] = a1;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F56BC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::PhysicsSceneGroundPlaneComponentBuilder::~PhysicsSceneGroundPlaneComponentBuilder(realityio::PhysicsSceneGroundPlaneComponentBuilder *this)
{
  realityio::PhysicsSceneGroundPlaneComponentBuilder::~PhysicsSceneGroundPlaneComponentBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26F334908;
  uint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F334980;
  return result;
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F334980;
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v12, &v14);
  uint64_t v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  v7 = (realityio::PhysicsColliderAssetBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::PhysicsColliderAssetBuilder::kOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 136), &v11, &v12);
  uint64_t v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F56BF40(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F334A00;
  return result;
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F334A00;
}

char *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F334A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F334A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 24);
  REGroundPlaneComponentGetComponentType();
  v6[0] = &unk_26F334AF0;
  v6[1] = v1;
  v6[3] = v6;
  uint64_t v2 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v6, v2);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v6);
  REPhysicsOriginComponentGetComponentType();
  v5[0] = &unk_26F334B70;
  v5[3] = v5;
  uint64_t v3 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v5, v3);
  RENetworkMarkComponentDirty();
  return std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v5);
}

void sub_23F56C2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F334AF0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F334AF0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);

  return MEMORY[0x270F1E140](v2, 1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26F334B70;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26F334B70;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F334C00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F334C00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v8);
  if (v8[0])
  {
    uint64_t v7 = v9;
    if (v9)
    {
      RERetain();
      uint64_t v4 = *(void *)(v1 + 280);
      uint64_t v5 = *(void *)(v1 + 288);
      while (v4 != v5)
      {
        REEntityRemoveComponentByClass();
        v4 += 8;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_23F56C654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void *RdBase::getGroupAction@<X0>(void *a1@<X8>)
{
  __n128 result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F334C90;
  result[3] = &unk_26F334CE0;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void *RdBase::getArrayAction@<X0>(void *a1@<X8>)
{
  __n128 result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F334E98;
  result[3] = &unk_26F334EE8;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void TgBase::emitTargets(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath ***a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    uint64_t v7 = v5 + 4;
    TgBase::_emitTarget(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v5, v5 + 1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4));
    uint64_t v5 = v7 + 1;
  }

  std::mutex::unlock(v4);
}

void sub_23F56C810(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TgBase::_emitTarget(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  void (***v7)(uint64_t *__return_ptr, void, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *);
  uint64_t v8;
  uint64_t String;
  uint64_t v10;
  std::mutex *v11;
  std::__shared_weak_count *v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  Exec::ensureTarget(*(void *)(a1 + 8), a2, a3);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void (****)(uint64_t *__return_ptr, void, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(a1 + 16);
  uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a4);
  MEMORY[0x2455CF830](&v14, String);
  (**v7)(&v15, v7, v8, a2, &v14);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a4);
  MEMORY[0x2455CF830](&v14, v10);
  int v11 = *(std::mutex **)(a1 + 8);
  uint64_t v12 = v16;
  v13[0] = v15;
  v13[1] = (uint64_t)v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Exec::setComputeAction(v11, a2, v13, &v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_23F56C958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void TgBase::emitTarget(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  TgBase::_emitTarget(a1, a2, a3, a4);

  std::mutex::unlock(v8);
}

void sub_23F56CA2C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TgBase::emitGroup(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)Name, *(void *)(Name + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)Name;
    v11.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v8, a2);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v11.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 7);
  if (v13 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (size)
  {
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v11;
    }
    else {
      uint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    memmove(v6, v7, size);
  }
  strcpy((char *)v6 + size, "__group");
  MEMORY[0x2455CF830](&v9, __p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  __p[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy();
}

void sub_23F56CDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void Exec::setComputeAction(std::mutex *a1, void *a2, uint64_t *a3, void *a4)
{
  std::mutex::lock(a1);
  uint64_t v8 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&a1[1], a2);
  opaque = a1[1].__m_.__opaque;
  uint64_t v10 = (uint64_t *)(v8 + 96);
  if (a1[1].__m_.__opaque == v8) {
    uint64_t v10 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  }
  if (*v10 != realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
  {
    std::string v11 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&a1[1], a2);
    if (opaque == v11)
    {
      realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data();
      uint64_t v12 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data(void)::null_data;
    }
    else
    {
      uint64_t v12 = v11 + 48;
    }
    uint64_t v14 = *a3;
    uint64_t v13 = a3[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 3);
    *((void *)v12 + 2) = v14;
    *((void *)v12 + 3) = v13;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    int v16 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&a1[1], a2);
    if (opaque == v16)
    {
      realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data();
      v17 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data(void)::null_data;
    }
    else
    {
      v17 = v16 + 48;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(v17 + 1, a4);
  }

  std::mutex::unlock(a1);
}

void sub_23F56CFD4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TgBase::emitArray(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)Name, *(void *)(Name + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)Name;
    v11.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v8, a2);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v11.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 12);
  if (v13 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (size)
  {
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v11;
    }
    else {
      uint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    memmove(v6, v7, size);
  }
  strcpy((char *)v6 + size, "__arrayOrder");
  MEMORY[0x2455CF830](&v9, __p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  __p[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy();
}

void sub_23F56D344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void TgBase::emitConstant(Exec **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v6 = (std::mutex *)(this + 3);
  std::mutex::lock((std::mutex *)(this + 3));
  Exec::getValue(this[1], a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  Exec::setValue(this[1], a2, a3);
  if ((pxrInternal__aapl__pxrReserved__::VtValue::operator==((uint64_t)v7, (uint64_t)a3) & 1) == 0) {
    Exec::setDirty((std::mutex *)this[1], a2, 1);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  std::mutex::unlock(v6);
}

void sub_23F56D514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *Exec::getValue@<X0>(Exec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  __n128 result = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find((void *)this + 25, (unsigned int *)a2);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)result + 8));
  }
  else
  {
    *((void *)a3 + 1) = 0;
  }
  return result;
}

void Exec::setDirty(std::mutex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  std::mutex::lock(this);
  uint64_t v6 = (Exec *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&this[1], a2);
  if (this[1].__m_.__opaque == (char *)v6) {
    uint64_t v7 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  }
  else {
    uint64_t v7 = (uint64_t *)((char *)v6 + 96);
  }
  if (*v7 != realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v10 + 1, (_DWORD *)a2 + 1);
      realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)&this[1], &v10, 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t v8 = &v10;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v9 + 1, (_DWORD *)a2 + 1);
      realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)&this[1], &v9, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t v8 = &v9;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
  }
  std::mutex::unlock(this);
}

void sub_23F56D69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data()
{
  {
    if (v0)
    {
      Exec::TargetVertex::TargetVertex(v0);
    }
  }
}

uint64_t Exec::TargetVertex::TargetVertex(Exec::TargetVertex *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  qword_268C403E0 = 0;
  qword_268C403E8 = 0;
  qword_268C403F0 = 0;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find(void *a1, unsigned int *a2)
{
  if (!a1[3]) {
    return 0;
  }
  for (uint64_t result = *(void **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        uint64_t result = (void *)result[3])
  {
    if (*result == *(void *)a2) {
      break;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v2 + ((unint64_t)(v3 + v2 + (v3 + v2) * (v3 + v2)) >> 1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 == 0) == (v3 == 0);
  }
  if (v2 == v3) {
    return (*(uint64_t (**)(void))((v2 & 0xFFFFFFFFFFFFFFF8) + 64))();
  }
  return MEMORY[0x270FA4FA0]();
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(uint64_t a1, void *a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2);
  if ((void *)(a1 + 8) == v5) {
    return 0;
  }
  uint64_t v9 = &unk_26F335180;
  char v10 = a3;
  std::string v11 = &v9;
  if (a3) {
    uint64_t v6 = (void *)(a1 + 72);
  }
  else {
    uint64_t v6 = (void *)(a1 + 48);
  }
  uint64_t v7 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_traverse(a1, (uint64_t)&v9, v5[12], v6, 1);
  std::__function::__value_func<BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__value_func[abi:ne180100](&v9);
  return v7;
}

void sub_23F56D924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_traverse(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  v30[1] = *MEMORY[0x263EF8340];
  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::resize((uint64_t)__p, *(void *)(a1 + 96), 0);
  v30[0] = a3;
  std::deque<unsigned long>::deque((uint64_t)&v25, v30, 1);
  uint64_t v10 = v28;
  if (v28)
  {
    uint64_t v11 = 0;
    while (1)
    {
      if (a5)
      {
        uint64_t v12 = v10 - 1;
        unint64_t v13 = (*(void **)((char *)v26 + (((v27 + v12) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v27 + v12) & 0x1FF];
        uint64_t v28 = v12;
        std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](&v25, 1);
      }
      else
      {
        unint64_t v13 = (*(void **)((char *)v26 + ((v27 >> 6) & 0x3FFFFFFFFFFFFF8)))[v27 & 0x1FF];
        ++v27;
        uint64_t v28 = v10 - 1;
        if (v27 >= 0x400)
        {
          operator delete(*v26++);
          v27 -= 512;
        }
      }
      uint64_t v14 = *((void *)__p[0] + (v13 >> 6));
      if (((1 << v13) & v14) == 0)
      {
        *((void *)__p[0] + (v13 >> 6)) = v14 | (1 << v13);
        uint64_t v15 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node(a1, v13);
        uint64_t v16 = *(void *)(a2 + 24);
        if (!v16) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        ++v11;
        if (!(*(unsigned int (**)(uint64_t, void *))(*(void *)v16 + 48))(v16, v15)) {
          goto LABEL_22;
        }
        v17 = (void *)(*a4 + 24 * v13);
        uint64_t v20 = (void *)*v17;
        std::string::size_type v18 = v17 + 1;
        uint64_t v19 = v20;
        if (v20 != v18)
        {
          do
          {
            if (((*(void *)((char *)__p[0] + ((v19[4] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19[4]) & 1) == 0) {
              std::deque<unsigned long>::push_back(&v25, v19 + 4);
            }
            uint64_t v21 = (void *)v19[1];
            if (v21)
            {
              do
              {
                uint64_t v22 = v21;
                uint64_t v21 = (void *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                uint64_t v22 = (void *)v19[2];
                BOOL v23 = *v22 == (void)v19;
                uint64_t v19 = v22;
              }
              while (!v23);
            }
            uint64_t v19 = v22;
          }
          while (v22 != v18);
        }
      }
      uint64_t v10 = v28;
      if (!v28) {
        goto LABEL_22;
      }
    }
  }
  uint64_t v11 = 0;
LABEL_22:
  std::deque<unsigned long>::~deque[abi:ne180100](&v25);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_23F56DB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      uint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      unint64_t v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      BOOL v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      uint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      uint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_23F56DD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2) {
    return realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
  }
  uint64_t v3 = (void *)(a1 + 32);
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      unint64_t v6 = v2;
    }
    else {
      unint64_t v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = (void *)*v6;
  }
  while (*v6);
  if (v3 != (void *)(a1 + 32) && v3[4] <= a2) {
    return (void *)v3[5];
  }
  else {
    return realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_23F56DE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (v4)
  {
    unint64_t v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v6 = v5 - 1;
  }
  unint64_t v7 = v6 >> 6;
  if (v5 >= 0x41) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  *(void *)(*a1 + 8 * v8) = 0;
LABEL_9:
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)a3;
  int v11 = *(_DWORD *)(a3 + 8);
  uint64_t v12 = *a1 + 8 * (v4 >> 6);
  uint64_t v18 = *(void *)a2;
  int v19 = v9;
  uint64_t v16 = v10;
  int v17 = v11;
  uint64_t v14 = v12;
  int v15 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v18, &v16, &v14, (uint64_t)&v13);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (int i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  int v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *unint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t std::deque<unsigned long>::deque(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::deque<unsigned long>::__append_with_size[abi:ne180100]<unsigned long const*>((void *)a1, a2, (8 * a3) >> 3);
  return a1;
}

void sub_23F56E374(_Unwind_Exception *a1)
{
  std::__split_buffer<unsigned long *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void *std::deque<unsigned long>::__append_with_size[abi:ne180100]<unsigned long const*>(void *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<unsigned long>::__add_back_capacity(a1, a3 - v10);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  uint64_t v11 = (void *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v11 + 8 * (v9 & 0x1FF);
  }
  v19[0] = v6 + 8 * (v9 >> 9);
  v19[1] = v12;
  uint64_t result = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100]((uint64_t)v19, a3);
  while (v12 != v14)
  {
    uint64_t v15 = (void *)(v11 == result ? v14 : *v11 + 4096);
    if ((void *)v12 == v15)
    {
      uint64_t v15 = (void *)v12;
    }
    else
    {
      uint64_t v16 = (void *)v12;
      do
      {
        uint64_t v17 = *a2++;
        *v16++ = v17;
      }
      while (v16 != v15);
    }
    a1[5] += ((uint64_t)v15 - v12) >> 3;
    if (v11 == result) {
      break;
    }
    uint64_t v18 = v11[1];
    ++v11;
    uint64_t v12 = v18;
  }
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(void *a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          char v32 = (uint64_t *)a1[1];
          unint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          long long v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unint64_t v3 = (char *)a1[1];
          }
          unint64_t v27 = &v3[-8 * (v24 >> 1)];
          unint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        int v39 = (void *)a1[1];
        BOOL v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              BOOL v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                BOOL v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                BOOL v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              std::string v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                BOOL v40 = (char *)__p[1];
              }
              std::string v47 = &v40[-8 * (v44 >> 1)];
              BOOL v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)BOOL v40 = *v39;
          BOOL v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          int v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<unsigned long *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_23F56E9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

uint64_t std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage()
{
  {
    realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::NodeStorage((uint64_t)&realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage(void)const::null_storage);
  }
  return &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage(void)const::null_storage;
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::NodeStorage(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__func()
{
}

unsigned char *std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26F335180;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F335180;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 48) = *(unsigned char *)(a1 + 8);
  return 1;
}

uint64_t std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<anonymous namespace'::GroupAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::GroupAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334C90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void anonymous namespace'::GroupAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, std::type_info ****a3@<X3>, uint64_t a4@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a5@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a5, a1);
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)Name, *(void *)(Name + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)Name;
    v36.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v9;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v42, a2);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v36.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 7);
  if (v34 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (size)
  {
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v12 = &v36;
    }
    else {
      unint64_t v12 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v12, size);
  }
  strcpy((char *)p_p + size, "__group");
  MEMORY[0x2455CF830](&v40, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v35, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  unint64_t v13 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)a4;
  uint64_t v14 = *(void *)(a4 + 8) - *(void *)a4;
  if (v14)
  {
    unint64_t v15 = v14 >> 4;
    uint64_t v16 = *a3;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    while (1)
    {
      uint64_t v17 = (uint64_t)*v16++;
      if (v17 == v35) {
        break;
      }
      unint64_t v13 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
      if (!--v15) {
        goto LABEL_24;
      }
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, v13);
    uint64_t v18 = v43;
    if (v43)
    {
      if (!strcmp((const char *)(*(void *)(*(void *)(v43 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7TfTokenENS1_7SdfPathENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))goto LABEL_33; {
      if ((v18 & 4) != 0
      }
      {
        uint64_t v18 = v43;
LABEL_33:
        if ((v18 & 4) != 0) {
          uint64_t v19 = (void *)(*(uint64_t (**)(void **))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v42);
        }
        else {
          uint64_t v19 = v42;
        }
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        std::string __p = &v33;
        BOOL v22 = (void *)*v19;
        uint64_t v20 = v19 + 1;
        uint64_t v21 = v22;
        if (v22 != v20)
        {
          do
          {
            std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]((uint64_t)&v40, v21 + 4);
            if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41))
            {
              int v39 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
                  + 1;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, &v41);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v38 + 1, (_DWORD *)&v41 + 1);
              long long v37 = &v40;
              uint64_t v23 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t **)&__p, &v40, (uint64_t)&std::piecewise_construct, &v37);
            }
            else
            {
              uint64_t v24 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)a4;
              uint64_t v25 = *(void *)(a4 + 8) - *(void *)a4;
              if (v25)
              {
                unint64_t v26 = v25 >> 4;
                unint64_t v27 = *a3;
                if (v26 <= 1) {
                  unint64_t v26 = 1;
                }
                while (1)
                {
                  unint64_t v28 = *v27++;
                  if (v28 == v41) {
                    break;
                  }
                  uint64_t v24 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v24 + 16);
                  if (!--v26) {
                    goto LABEL_43;
                  }
                }
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v38, v24);
              }
              else
              {
LABEL_43:
                int v39 = 0;
              }
              long long v37 = &v40;
              uint64_t v23 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t **)&__p, &v40, (uint64_t)&std::piecewise_construct, &v37);
            }
            pxrInternal__aapl__pxrReserved__::VtValue::operator=(v23 + 5, &v38);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v38);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
            if ((v40 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            long long v29 = (void *)v21[1];
            if (v29)
            {
              do
              {
                uint64_t v30 = v29;
                long long v29 = (void *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                uint64_t v30 = (void *)v21[2];
                BOOL v31 = *v30 == (void)v21;
                uint64_t v21 = v30;
              }
              while (!v31);
            }
            uint64_t v21 = v30;
          }
          while (v30 != v20);
        }
        int64_t v41 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>::_PlaceCopy();
      }
    }
  }
  else
  {
LABEL_24:
    uint64_t v43 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_23F56F1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::VtValue *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v28 - 104));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  if (a23 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a10);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::GroupAction::supportsPartialInputs(_anonymous_namespace_::GroupAction *this)
{
  return 1;
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(void *a1)
{
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), (_DWORD *)a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), (_DWORD *)a2 + 3);
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_CopyInit(_DWORD *a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, a1);

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2 + 1, a1 + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Destroy(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Move(_DWORD *a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2 + 1, a1 + 1);

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Destroy((uint64_t)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1] + (unint64_t)*a1 + (a1[1] + (unint64_t)*a1) * (a1[1] + (unint64_t)*a1)) >> 1)));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_EqualPtr(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7SdfPathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetProxiedAsVtValue@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
                      + 1;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a2, a1)+ 1;

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3, a1 + 1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 5));
    uint64_t v3 = a2[4];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_Hash(void **a1)
{
  uint64_t v2 = (uint64_t)(*a1 + 1);
  uint64_t v1 = (void *)**a1;
  if (v1 == (void *)v2)
  {
    unint64_t v11 = 0;
  }
  else
  {
    int v3 = 0;
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = (void *)v1[1];
      unint64_t v6 = v1;
      if (v5)
      {
        do
        {
          int v7 = v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          unint64_t v6 = v7;
        }
        while (!v8);
      }
      unint64_t v9 = v1[4] & 0xFFFFFFFFFFFFFFF8;
      if (v3) {
        v9 += (v9 + v4 + (v9 + v4) * (v9 + v4)) >> 1;
      }
      else {
        int v3 = 1;
      }
      uint64_t Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash((pxrInternal__aapl__pxrReserved__::VtValue *)(v1 + 5));
      unint64_t v4 = Hash + ((Hash + v9 + (Hash + v9) * (Hash + v9)) >> 1);
      uint64_t v1 = v7;
    }
    while (v7 != (void *)v2);
    unint64_t v11 = 0x9E3779B97F4A7C55 * v4;
  }
  return bswap64(v11);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_Equal(uint64_t *a1, void ***a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void>::Equal(*a1, **a2, (uint64_t)(*a2)[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void>::Equal(*a1, *(void **)a2, *(void *)(a2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 24));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F56F7F4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7TfTokenENS1_7VtValueENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v2, *(void **)(v2 + 8));
    MEMORY[0x2455D2BD0](v2, 0x1020C401C4E69EBLL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::VtValue const&>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this);
  if (*(unsigned char *)(a1 + 8)) {
    result += (unint64_t)(*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void>::Equal(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) == a3)
  {
    int v3 = (void *)(a1 + 8);
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1 == a1 + 8) {
      return 1;
    }
    while ((v4[4] & 0xFFFFFFFFFFFFFFF8) == (a2[4] & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::operator==((uint64_t)(v4 + 5), (uint64_t)(a2 + 5));
      if (!result) {
        return result;
      }
      int v7 = (void *)v4[1];
      BOOL v8 = v4;
      if (v7)
      {
        do
        {
          unint64_t v4 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v4 = (void *)v8[2];
          BOOL v9 = *v4 == (void)v8;
          BOOL v8 = v4;
        }
        while (!v9);
      }
      uint64_t v10 = (void *)a2[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (void *)a2[2];
          BOOL v9 = *v11 == (void)a2;
          a2 = v11;
        }
        while (!v9);
      }
      a2 = v11;
      if (v4 == v3) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F56FAC4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(v5, v6, v4 + 4, v4 + 4);
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (uint64_t *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_23F56FC54(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 1));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>::_PlaceCopy()
{
}

void sub_23F56FD4C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::ArrayAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334E98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::ArrayAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334E98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void anonymous namespace'::ArrayAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a5, a1);
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)Name, *(void *)(Name + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)Name;
    v31.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v34, a2);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v31.__r_.__value_.__l.__size_;
  }
  unint64_t v11 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 12);
  if (SBYTE7(v28) < 0) {
    unint64_t v11 = (void **)__p[0];
  }
  if (size)
  {
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v12 = &v31;
    }
    else {
      unint64_t v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, size);
  }
  strcpy((char *)v11 + size, "__arrayOrder");
  MEMORY[0x2455CF830](&v32, __p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v30, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v32);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SBYTE7(v28) < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
  unint64_t v13 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)a4;
  uint64_t v14 = *(void *)(a4 + 8) - *(void *)a4;
  if (v14)
  {
    unint64_t v15 = v14 >> 4;
    uint64_t v16 = *a3;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    while (1)
    {
      uint64_t v17 = *v16++;
      if (v17 == v30) {
        break;
      }
      unint64_t v13 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
      if (!--v15) {
        goto LABEL_23;
      }
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34, v13);
  }
  else
  {
LABEL_23:
    uint64_t v35 = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v34))
  {
    if ((v35 & 4) != 0) {
      uint64_t v18 = (*(uint64_t (**)(uint64_t *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(&v34);
    }
    else {
      uint64_t v18 = v34;
    }
    uint64_t v29 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v28 = 0u;
    uint64_t v19 = *(_DWORD **)v18;
    uint64_t v20 = *(_DWORD **)(v18 + 8);
    if (*(_DWORD **)v18 != v20)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, v19);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v26 + 1, v19 + 1);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26))
        {
          uint64_t v33 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
              + 1;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, &v26);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v32 + 1, (_DWORD *)&v26 + 1);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::emplace_back<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t)__p, &v32);
        }
        else
        {
          uint64_t v21 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)a4;
          uint64_t v22 = *(void *)(a4 + 8) - *(void *)a4;
          if (v22)
          {
            unint64_t v23 = v22 >> 4;
            uint64_t v24 = *a3;
            if (v23 <= 1) {
              unint64_t v23 = 1;
            }
            while (1)
            {
              uint64_t v25 = *v24++;
              if (v25 == v26) {
                break;
              }
              uint64_t v21 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v21 + 16);
              if (!--v23) {
                goto LABEL_36;
              }
            }
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, v21);
          }
          else
          {
LABEL_36:
            uint64_t v33 = 0;
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::emplace_back<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t)__p, &v32);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v32);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
        v19 += 2;
      }
      while (v19 != v20);
    }
    uint64_t v33 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_23F570154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v27 - 88));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a19);
  if (a25 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v26);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::ArrayAction::supportsPartialInputs(_anonymous_namespace_::ArrayAction *this)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7SdfPathENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::emplace_back<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        int v7 = (uint64_t *)a1;
      }
      else {
        int v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)(v5 + 16 * v4), a2);
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_AllocateNew(a1, v11);
    std::uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::VtValue *,pxrInternal__aapl__pxrReserved__::VtValue *>(v9, v9 + 16 * v4, (uint64_t)New);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(&New[2 * v4], a2);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef((void *)a1);
    *(void *)(a1 + 32) = New;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)a1[4];
      if (*a1)
      {
        uint64_t v6 = 16 * *a1;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v5);
          uint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 16);
          v6 -= 16;
        }
        while (v6);
        uint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)a1[4];
      }
      operator delete((char *)v5 - 16);
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F570564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::VtValue *,pxrInternal__aapl__pxrReserved__::VtValue *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + v6), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + v6));
      v6 += 16;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_23F5705DC(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 16)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v1);
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v1 + 16);
  }
  __cxa_rethrow();
}

void sub_23F570600(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_Hash(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*a1)[4];
    unint64_t v3 = v1;
    do
    {
      --v3;
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v2 + 16);
      uint64_t Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v2);
      unint64_t v1 = Hash + ((Hash + v1 + (Hash + v1) * (Hash + v1)) >> 1);
      uint64_t v2 = v4;
    }
    while (v3);
    unint64_t v6 = 0x9E3779B97F4A7C55 * v1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return bswap64(v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 40));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7VtValueEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef((void *)v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = 16 * v5 - 16;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 16;
    v7 += 16;
    uint64_t v9 = v8;
    v8 -= 16;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_Streamer>(void *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Hash(void **a1)
{
  uint64_t v1 = (uint64_t)(*a1 + 1);
  uint64_t v2 = (void *)**a1;
  if (v2 == (void *)v1)
  {
    unint64_t v12 = 0;
  }
  else
  {
    int v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (void *)v2[1];
      uint64_t v6 = v2;
      if (v5)
      {
        do
        {
          uint64_t v7 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          uint64_t v6 = v7;
        }
        while (!v8);
      }
      unint64_t v9 = v2[4] & 0xFFFFFFFFFFFFFFF8;
      if (v3) {
        v9 += (v9 + v4 + (v9 + v4) * (v9 + v4)) >> 1;
      }
      else {
        int v3 = 1;
      }
      uint64_t v10 = *((unsigned int *)v2 + 10);
      unint64_t v11 = v9 + v10 + (v9 + v10) * (v9 + v10);
      unint64_t v4 = *((unsigned int *)v2 + 11)
         + ((*((unsigned int *)v2 + 11)
           + v10
           + (v11 >> 1)
           + (*((unsigned int *)v2 + 11) + v10 + (v11 >> 1)) * (*((unsigned int *)v2 + 11) + v10 + (v11 >> 1))) >> 1);
      uint64_t v2 = v7;
    }
    while (v7 != (void *)v1);
    unint64_t v12 = 0x9E3779B97F4A7C55 * v4;
  }
  return bswap64(v12);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Equal(void **a1, void ***a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void>::Equal(*a1, **a2, (uint64_t)(*a2)[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void>::Equal(*a1, *(void **)a2, *(void *)(a2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 24));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F570B60(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7TfTokenENS1_7SdfPathENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v2, *(void **)(v2 + 8));
    MEMORY[0x2455D2BD0](v2, 0x1020C401C4E69EBLL);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>(a2 + 4);
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>(void *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 1));
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void>::Equal(void *a1, void *a2, uint64_t a3)
{
  if (a1[2] != a3) {
    return 0;
  }
  uint64_t v5 = (void *)*a1;
  int v3 = a1 + 1;
  unint64_t v4 = v5;
  if (v5 == v3) {
    return 1;
  }
  do
  {
    BOOL v6 = (v4[4] & 0xFFFFFFFFFFFFFFF8) == (a2[4] & 0xFFFFFFFFFFFFFFF8) && v4[5] == a2[5];
    uint64_t v7 = v6;
    if (!v6) {
      break;
    }
    BOOL v8 = (void *)v4[1];
    unint64_t v9 = v4;
    if (v8)
    {
      do
      {
        unint64_t v4 = v8;
        BOOL v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        unint64_t v4 = (void *)v9[2];
        BOOL v6 = *v4 == (void)v9;
        unint64_t v9 = v4;
      }
      while (!v6);
    }
    uint64_t v10 = (void *)a2[1];
    if (v10)
    {
      do
      {
        unint64_t v11 = v10;
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        unint64_t v11 = (void *)a2[2];
        BOOL v6 = *v11 == (void)a2;
        a2 = v11;
      }
      while (!v6);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return v7;
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F570E60(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath> const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, &v13, &v12, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]((uint64_t)(v7 + 4), a4);
    char v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v13, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>(v2 + 4);
    }
    operator delete(v2);
  }
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy()
{
}

void sub_23F571074(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

void *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](a1, a2);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end((uint64_t)a1, a2);
  }
  return a1;
}

void sub_23F5710F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Hash(char ***a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Equal(uint64_t **a1, uint64_t ***a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  unint64_t v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = *(void *)(v5 - 8) == v6;
    BOOL v8 = *(void *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  unint64_t v4 = *(uint64_t **)a2;
  if (v2 - v3 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = *(void *)(v5 - 8) == v6;
    BOOL v8 = *(void *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7SdfPathENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    unint64_t v4 = (void **)v2;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C4055CCDE27);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = v3 >> 3;
    char v6 = 1;
    do
    {
      uint64_t v7 = *(unsigned int *)v2;
      if ((v6 & 1) == 0) {
        v7 += (v4 + v7 + (v4 + v7) * (v4 + v7)) >> 1;
      }
      char v6 = 0;
      unint64_t v4 = *((unsigned int *)v2 + 1)
         + ((v7
           + *((unsigned int *)v2 + 1)
           + (v7 + *((unsigned int *)v2 + 1)) * (v7 + (unint64_t)*((unsigned int *)v2 + 1))) >> 1);
      v2 += 8;
      --v5;
    }
    while (v5);
    unint64_t v8 = 0x9E3779B97F4A7C55 * v4;
  }
  else
  {
    unint64_t v8 = 0;
  }
  return bswap64(v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 24));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F57146C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy()
{
}

void sub_23F571504(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

void realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType::~ShaderGraphUtilityTokens_StaticTokenType(realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *this)
{
  uint64_t v12 = (void **)((char *)this + 88);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v2 = *((void *)this + 10);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 9);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 7);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 5);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 2);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 1);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType::ShaderGraphUtilityTokens_StaticTokenType(realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v19 = (uint64_t *)(MEMORY[0x2455CF820](this, "NodeGraph", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 16, "Material", 0);
  MEMORY[0x2455CF820]((char *)this + 24, "Point", 0);
  MEMORY[0x2455CF820]((char *)this + 32, "Normal", 0);
  MEMORY[0x2455CF820]((char *)this + 40, "Vector", 0);
  MEMORY[0x2455CF820]((char *)this + 48, "Color", 0);
  MEMORY[0x2455CF820]((char *)this + 56, "Frame", 0);
  MEMORY[0x2455CF820]((char *)this + 64, "TextureCoordinate", 0);
  MEMORY[0x2455CF820]((char *)this + 72, "inputs", 0);
  MEMORY[0x2455CF820]((char *)this + 80, "outputs", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v20 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v19;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v22 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v23 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v24 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v25 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v26 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v27 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v28 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v29 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v30 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  uint64_t v13 = (char *)operator new(0x58uLL);
  uint64_t v14 = 0;
  *((void *)this + 11) = v13;
  *((void *)this + 12) = v13;
  *((void *)this + 13) = v13 + 88;
  do
  {
    uint64_t v15 = *(uint64_t *)((char *)&v20 + v14);
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 8;
  }
  while (v14 != 88);
  *((void *)this + 12) = v13 + 88;
  for (uint64_t i = 80; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v20 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F571A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void **a11, uint64_t a12, char a13)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a11);
  uint64_t v23 = 80;
  while (1)
  {
    uint64_t v24 = *(void *)(&a13 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F571BF4()
{
}

void sub_23F571BFC()
{
}

uint64_t RIOPxrSdfNamespaceEditGetTypeID()
{
  if (RIOPxrSdfNamespaceEditGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfNamespaceEditGetTypeID::onceToken, &__block_literal_global_1);
  }
  return RIOPxrSdfNamespaceEditGetTypeID::typeID;
}

void __RIOPxrSdfNamespaceEditGetTypeID_block_invoke()
{
  if (!RIOPxrSdfNamespaceEditGetTypeID::typeID) {
    RIOPxrSdfNamespaceEditGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdfBatchNamespaceEditGetTypeID()
{
  if (qword_268C40410 != -1) {
    dispatch_once(&qword_268C40410, &__block_literal_global_2);
  }
  return _MergedGlobals_7;
}

void __RIOPxrSdfBatchNamespaceEditGetTypeID_block_invoke()
{
  if (!_MergedGlobals_7) {
    _MergedGlobals_7 = _CFRuntimeRegisterClass();
  }
}

_DWORD *RIOPxrSdfNamespaceEditCreateEmpty()
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  int v7 = -1;
  if (RIOPxrSdfNamespaceEditGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfNamespaceEditGetTypeID::onceToken, &__block_literal_global_1);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v1 = (_DWORD *)Instance;
  if (Instance)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), &v3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v1 + 5, &v4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v1 + 6, &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v1 + 7, &v6);
    v1[8] = v7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_23F571E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

_DWORD *RIOPxrSdfNamespaceEditCreateFromPaths(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = 0;
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), a3);
    int v3 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  }
  return v3;
}

void sub_23F571F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

_DWORD *RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(_DWORD *a1)
{
  if (RIOPxrSdfNamespaceEditGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfNamespaceEditGetTypeID::onceToken, &__block_literal_global_1);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  int v3 = (_DWORD *)Instance;
  if (Instance)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), a1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 5, a1 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 6, a1 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 7, a1 + 3);
    v3[8] = a1[4];
  }
  return v3;
}

_DWORD *RIOPxrSdfNamespaceEditCreateRemove(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a1 + 16);
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(a1);
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v5, v1, v2, -1);
  int v3 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  return v3;
}

void sub_23F572068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

_DWORD *RIOPxrSdfNamespaceEditCreateRename(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    int v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(&v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v5, v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, -2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
    uint64_t v2 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  }
  return v2;
}

void sub_23F572128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
}

_DWORD *RIOPxrSdfNamespaceEditCreateReorder(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  uint64_t v2 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return v2;
}

void sub_23F5721C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

_DWORD *RIOPxrSdfNamespaceEditCreateReparent(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = 0;
  if (a1 && a2)
  {
    int v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
    int v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, v6);
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v8, v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
    int v3 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  }
  return v3;
}

void sub_23F5722BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

_DWORD *RIOPxrSdfNamespaceEditCreateReparentAndRename(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = 0;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
    int v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(&v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v10, v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    int v4 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  }
  return v4;
}

void sub_23F5723F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
}

uint64_t RIOPxrSdfNamespaceEditGetCurrentPath(uint64_t result)
{
  if (result) {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrSdfNamespaceEditCopyCurrentPath(uint64_t result)
{
  if (result) {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrSdfNamespaceEditGetNewPath(uint64_t result)
{
  if (result) {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 24));
  }
  return result;
}

uint64_t RIOPxrSdfNamespaceEditCopyNewPath(uint64_t result)
{
  if (result) {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 24));
  }
  return result;
}

uint64_t RIOPxrSdfNamespaceEditGetIndex(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 32);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t _RIOPxrSdfNamespaceEditCFFinalize(const void *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 16);
}

BOOL _RIOPxrSdfNamespaceEditCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrSdfNamespaceEditCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrSdfNamespaceEditCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfNamespaceEdit %p>", a1);
}

CFStringRef _RIOPxrSdfNamespaceEditCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfNamespaceEdit %p>", a1);
}

void _RIOPxrSdfBatchNamespaceEditCFFinalize(char *a1)
{
}

BOOL _RIOPxrSdfBatchNamespaceEditCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrSdfBatchNamespaceEditCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrSdfBatchNamespaceEditCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfBatchNamespaceEdit %p>", a1);
}

CFStringRef _RIOPxrSdfBatchNamespaceEditCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfBatchNamespaceEdit %p>", a1);
}

pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  int v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(this, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, (_DWORD *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 3, (_DWORD *)a3 + 1);
  *((_DWORD *)this + 4) = a4;
  return this;
}

void RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Collection>(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  int v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(a1 + 240);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  RIO_MTLX::Element::getQualifiedName(a1, a2, &__p);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Collection>(v8, (unsigned __int8 *)&__p, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    int v9 = v12;
    *a3 = v11;
    a3[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Collection>(v8, (unsigned __int8 *)a2, a3);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_23F57272C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Collection>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  int v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  int v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Collection>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F5727F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

realityio::IBLComponentBuilder *realityio::IBLComponentBuilder::IBLComponentBuilder(realityio::IBLComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[14] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "IBLComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kIBLComponentBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40438, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40438))
  {
    operator new();
  }
  uint64_t v5 = qword_268C40428;
  uint64_t v6 = (std::__shared_weak_count *)unk_268C40430;
  if (unk_268C40430) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C40430 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F335388;
  v12[3] = v12;
  v11[0] = &unk_26F335408;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F335310;
  return this;
}

void sub_23F572CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  MEMORY[0x2455D2BD0](v44, 0x10A1C40F82F910ELL);
  *(void *)(v47 - 176) = &a40;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 176));
  MEMORY[0x2455D2BD0](v45, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v46, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40438);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::IBLComponentBuilder::run(realityio::IBLComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  int v3 = (realityio::Inputs *)((char *)a2 + 32);
  int v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v20, v4, v3);
  float v19 = 0.0;
  unint64_t v5 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 56), (uint64_t)&v25);
  if ((_BYTE)v25)
  {
    float v6 = v26;
  }
  else
  {
    float v6 = 1.0;
    if (v28 < 0) {
      operator delete(__p);
    }
  }
  float v19 = v6;
  float v18 = 0.0;
  unint64_t v7 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 64), (uint64_t)&v25);
  if ((_BYTE)v25)
  {
    float v8 = v26;
  }
  else
  {
    float v8 = 0.0;
    if (v28 < 0) {
      operator delete(__p);
    }
  }
  float v18 = v8;
  uint64_t v9 = *((void *)v24 + 6);
  char v10 = operator new(0x30uLL);
  void *v10 = &unk_26F335488;
  v10[1] = &v24;
  void v10[2] = &v20;
  v10[3] = this;
  void v10[4] = &v19;
  void v10[5] = &v18;
  std::string __p = v10;
  (*(void (**)(uint64_t, long long **))(*(void *)v9 + 16))(v9, &v25);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v25);
  uint64_t v12 = *((void *)this + 2);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40420, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40420))
  {
    operator new();
  }
  uint64_t v13 = (long long *)_MergedGlobals_8;
  std::mutex::lock((std::mutex *)(v12 + 64));
  uint64_t v14 = operator new(0x28uLL);
  v14[1] = 0;
  v14[2] = 0;
  void *v14 = &unk_26F335508;
  v14[3] = &unk_26F335558;
  v14[4] = 0;
  uint64_t v25 = v13;
  uint64_t v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v12 + 40), (const void **)v13, (uint64_t)&std::piecewise_construct, &v25);
  uint64_t v16 = (std::__shared_weak_count *)v15[8];
  v15[7] = (uint64_t)(v14 + 3);
  v15[8] = (uint64_t)v14;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v12, (unsigned __int8 *)v13, (uint64_t)v13);
  std::mutex::unlock((std::mutex *)(v12 + 64));
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  uint64_t result = v21;
  if (v21) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
  }
  return result;
}

void sub_23F573310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2455D2BD0](v3, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C40420);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void sub_23F5733C0()
{
}

void *realityio::IBLComponentBuilder::clear(uint64_t a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v4 = a2;
  v5[0] = &unk_26F335588;
  v5[1] = &v4;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F573478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::IBLComponentBuilder::~IBLComponentBuilder(realityio::IBLComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F573560(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40D3CE914ALL);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F335388;
  return result;
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F335388;
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v12, &v14);
  float v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  unint64_t v7 = (realityio::IBLCubeMapAssetBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::IBLCubeMapAssetBuilder::kOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 80), &v11, &v12);
  char v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F573778(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F335408;
  return result;
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F335408;
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v6 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>("none", (std::string::size_type *)(v4 + 88), &v6, &v7);
  unint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F57399C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

std::string *std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>@<X0>(char *a1@<X1>, std::string::size_type *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (std::string *)operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_23F573A80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(std::string *a1, char *__s, std::string::size_type *a3, int *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F32FB70;
  std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>((int)&v6, a1 + 1, __s, a3, a4);
  return a1;
}

void sub_23F573AF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>(int a1, std::string *a2, char *__s, std::string::size_type *a4, int *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  realityio::OutputDescriptor::OutputDescriptor(a2, (long long *)__p, a4, *a5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F573B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<float>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(unsigned char *)a3)
      {
        std::string::size_type v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            char v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              char v9 = *(const char **)v9;
            }
          }
          else
          {
            char v9 = "";
          }
          uint64_t v14 = *(void *)(a3 + 24);
          uint64_t v13 = a3 + 24;
          uint64_t v12 = v14;
          if (*(char *)(v13 + 23) >= 0) {
            uint64_t v12 = v13;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v12;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v15);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      uint64_t v11 = v21;
      *(void *)(a3 + 24) = *(void *)&buf[16];
      *(void *)(a3 + 32) = v11;
      *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
      LOBYTE(v11) = HIBYTE(v21);
      long long v21 = 0uLL;
      *(void *)&buf[16] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v11;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    uint64_t v10 = v21;
    *(void *)(a3 + 24) = *(void *)&buf[16];
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
    LOBYTE(v10) = HIBYTE(v21);
    long long v21 = 0uLL;
    *(void *)&buf[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v10;
    if ((v18[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F573DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (!*(unsigned char *)v5 && *(char *)(v5 + 47) < 0) {
    operator delete(*(void **)(v5 + 24));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F335488;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F335488;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, (uint64_t)v20);
  if (v20[0])
  {
    uint64_t v5 = v21;
    uint64_t v19 = v21;
    if (v21)
    {
      char v6 = (realityio::IBLCubeMapAssetBuilder *)RERetain();
      uint64_t v7 = **(void **)(a1 + 8);
      uint64_t v8 = realityio::IBLCubeMapAssetBuilder::kOutputName(v6);
      realityio::Inputs::_getValue<REAsset *>(v7, v8, (uint64_t)buf);
      if (buf[0]) {
        uint64_t v9 = *(void *)&v24[4];
      }
      else {
        uint64_t v9 = 0;
      }
      if (REEntityGetSceneNullable())
      {
        uint64_t v10 = MEMORY[0x2455CDC20]();
        if (v10)
        {
          *(void *)uint64_t v22 = REComponentGetClass();
          std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(v2 + 40), (unint64_t *)v22, (uint64_t *)v22);
          float v11 = **(float **)(a1 + 32);
          float v12 = exp2f(**(float **)(a1 + 40));
          log2f(v11 * v12);
          REImageBasedLightComponentSetIntensityExponent();
          if (v9)
          {
            if (v9 != REImageBasedLightComponentGetIBL()) {
              MEMORY[0x2455CD510](v10, v9);
            }
          }
        }
      }
      else
      {
        char v16 = *(id *)(realityio::logObjects(0) + 24);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v18);
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
          *(_DWORD *)uint64_t v22 = 136315138;
          *(void *)&v22[4] = Text;
          _os_log_impl(&dword_23F4EA000, v16, OS_LOG_TYPE_DEFAULT, "Set IBL operation unable to find scene for entity from prim \"%s\"", v22, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
        }
      }
      if (!buf[0] && v26 < 0) {
        operator delete(__p);
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v13 = *(id *)(realityio::logObjects(v5) + 24);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), v22);
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v22);
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v24 = v14;
    _os_log_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_DEFAULT, "Stopping operation to set IBL component because entity no longer exists for prim \"%s\"", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
  }

LABEL_15:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v19);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v20);
}

void sub_23F574148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<decltype(nullptr)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F335508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<decltype(nullptr)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F335508;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<decltype(nullptr)>::getRawValue()
{
  return 0;
}

void std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F335588;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F335588;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1 = **((void **)a1 + 1);
  uint64_t v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v6);
  if (v6[0])
  {
    uint64_t v5 = v7;
    if (v7)
    {
      RERetain();
      if (REEntityGetSceneNullable())
      {
        uint64_t v3 = MEMORY[0x2455CDC20]();
        if (v3) {
          MEMORY[0x2455CD510](v3, 0);
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v5);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v6);
}

void sub_23F5743F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t RIOBuilderDirtyPrimDescriptorGetTypeID()
{
  if (RIOBuilderDirtyPrimDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyPrimDescriptorGetTypeID::onceToken, &__block_literal_global_2);
  }
  return RIOBuilderDirtyPrimDescriptorGetTypeID::typeID;
}

void __RIOBuilderDirtyPrimDescriptorGetTypeID_block_invoke()
{
  if (!RIOBuilderDirtyPrimDescriptorGetTypeID::typeID) {
    RIOBuilderDirtyPrimDescriptorGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors(const __CFArray *a1, const __CFArray *a2)
{
  memset(v18, 0, sizeof(v18));
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)ValueAtIndex + 3);
      *(void *)&long long v16 = *((void *)ValueAtIndex + 2);
      *((void *)&v16 + 1) = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::push_back[abi:ne180100](v18, &v16);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  CFIndex v8 = CFArrayGetCount(a2);
  if (v8 >= 1)
  {
    for (CFIndex j = 0; j != v8; ++j)
    {
      uint64_t v10 = CFArrayGetValueAtIndex(a2, j);
      uint64_t v11 = v10[3];
      *(void *)&long long v15 = v10[2];
      *((void *)&v15 + 1) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((uint64_t *)&v16, &v15);
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
    }
  }
  float v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *float v12 = &unk_26F335688;
  *(void *)&long long v15 = realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)(v12 + 3), (void **)&v16, (void **)v18);
  *((void *)&v15 + 1) = v12;
  uint64_t v13 = RIOBuilderDirtyPrimDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> &>(&v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  *(void *)&long long v15 = &v16;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  *(void *)&long long v16 = v18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  return v13;
}

void sub_23F574664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, std::__shared_weak_count *a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a9 = &a11;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = (void **)&a14;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v26 = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result, v13);
    long long v16 = &v14[16 * v10];
    long long v17 = *a2;
    *(_OWORD *)long long v16 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v16 + 16;
    uint64_t v19 = *a1;
    int v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
        *(void *)int v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = v9;
    int64x2_t v24 = v21;
    uint64_t v22 = a1[2];
    a1[2] = &v14[16 * v15];
    uint64_t v25 = v22;
    uint64_t v23 = v21.i64[0];
    uint64_t result = std::__split_buffer<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    *(void *)uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void **std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F574918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyPrimDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> &>(void *a1)
{
  if (RIOBuilderDirtyPrimDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyPrimDescriptorGetTypeID::onceToken, &__block_literal_global_2);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = a1[1];
    *(void *)(result + 16) = *a1;
    *(void *)(result + 24) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

__CFArray *anonymous namespace'::dirtyPropertyDescriptorsFromPrimDescriptor(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>(&v12, *(void **)(v3 + 32), *(void **)(v3 + 40), (uint64_t)(*(void *)(v3 + 40) - *(void *)(v3 + 32)) >> 4);
      uint64_t v5 = v12;
      for (uint64_t i = v13; v5 != i; v5 += 16)
      {
        uint64_t v10 = *(void ***)v5;
        uint64_t v7 = *(std::__shared_weak_count **)(v5 + 8);
        unint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (const void *)RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(&v10);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      uint64_t v10 = (void **)&v12;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F574AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *anonymous namespace'::dirtyMetadataDescriptorsFromPrimDescriptor(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>(&v12, *(void **)(v3 + 8), *(void **)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 4);
      uint64_t v5 = v12;
      for (uint64_t i = v13; v5 != i; v5 += 16)
      {
        uint64_t v10 = *(void ***)v5;
        uint64_t v7 = *(std::__shared_weak_count **)(v5 + 8);
        unint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (const void *)RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(&v10);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      uint64_t v10 = (void **)&v12;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F574C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors(const __CFArray *a1, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  v37[0] = &unk_26F3356D8;
  uint64_t v38 = v37;
  if (a1)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    CFIndex Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
LABEL_21:
      memset(v33, 0, 24);
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(v33, (uint64_t *)v34, v35, ((char *)v35 - v34) >> 3);
      char v30 = 1;
      long long v31 = v33[0];
      uint64_t v32 = *(void *)&v33[1];
      memset(v33, 0, 24);
      *(void *)&long long v28 = v33;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    }
    else
    {
      CFIndex v7 = 0;
      while (1)
      {
        *(void *)&long long v28 = CFArrayGetValueAtIndex(a1, v7);
        if (!v38) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(_OWORD *__return_ptr))(*v38 + 48))(v33);
        if (!LOBYTE(v33[0])) {
          break;
        }
        *(void *)&long long v28 = *((void *)&v33[0] + 1);
        if ((BYTE8(v33[0]) & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v33[0] + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)&long long v28 = v28 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v8 = v35;
        if ((unint64_t)v35 >= v36)
        {
          uint64_t v10 = (uint64_t *)std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v34, (uint64_t *)&v28);
        }
        else
        {
          uint64_t v9 = v28;
          *uint64_t v35 = v28;
          if ((v9 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v8 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v10 = v8 + 1;
        }
        uint64_t v35 = v10;
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (LOBYTE(v33[0]) && (BYTE8(v33[0]) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v33[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (Count == ++v7) {
          goto LABEL_21;
        }
      }
      char v30 = 0;
      long long v31 = *(_OWORD *)((char *)v33 + 8);
    }
    *(void *)&v33[0] = &v34;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
  }
  else
  {
    char v30 = 0;
    *(void *)&long long v31 = 0;
    *((void *)&v31 + 1) = std::system_category();
  }
  std::__function::__value_func<realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::~__value_func[abi:ne180100](v37);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  if (v30) {
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(&v34, (uint64_t *)v31, *((uint64_t **)&v31 + 1), (uint64_t)(*((void *)&v31 + 1) - v31) >> 3);
  }
  memset(v33, 0, 24);
  CFIndex v11 = CFArrayGetCount(a2);
  if (v11 >= 1)
  {
    for (CFIndex i = 0; i != v11; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)ValueAtIndex + 3);
      *(void *)&long long v28 = *((void *)ValueAtIndex + 2);
      *((void *)&v28 + 1) = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::push_back[abi:ne180100]((char **)v33, &v28);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
  }
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  CFIndex v15 = CFArrayGetCount(a3);
  if (v15 >= 1)
  {
    for (CFIndex j = 0; j != v15; ++j)
    {
      long long v17 = CFArrayGetValueAtIndex(a3, j);
      uint64_t v18 = v17[3];
      *(void *)&long long v26 = v17[2];
      *((void *)&v26 + 1) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((uint64_t *)&v28, &v26);
      if (*((void *)&v26 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
      }
    }
  }
  uint64_t v19 = v34;
  long long v20 = v35;
  *((void *)&v26 + 1) = 0;
  uint64_t v27 = 0;
  *(void *)&long long v26 = (char *)&v26 + 8;
  while (v19 != (char *)v20)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t **)&v26, (void *)&v26 + 1, v19, (uint64_t *)v19);
    v19 += 8;
  }
  int64x2_t v21 = (std::__shared_weak_count *)operator new(0x70uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F335768;
  int64x2_t v24 = realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(&v21[1], (uint64_t)&v26, (void **)&v28, (void **)v33);
  uint64_t v25 = v21;
  uint64_t v22 = RIOBuilderDirtyPrimDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> &>(&v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&v26, *((void **)&v26 + 1));
  *(void *)&long long v26 = &v28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  *(void *)&long long v28 = v33;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  *(void *)&v33[0] = &v34;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
  if (v30)
  {
    uint64_t v34 = (char *)&v31;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  }
  return v22;
}

void sub_23F575080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  a21 = (void **)&a25;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a21);
  std::__function::__value_func<realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::~__value_func[abi:ne180100]((void *)(v25 - 104));
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderTypeNameDirtyPrimDescriptorCopyTypeNames(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = *(const void **)(a1 + 16);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3
  {
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v6 = (void *)v5[8];
    CFIndex v7 = v5 + 9;
    if (v6 != v5 + 9)
    {
      do
      {
        uint64_t v8 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v6 + 4);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v6[2];
            BOOL v11 = *v10 == (void)v6;
            unint64_t v6 = v10;
          }
          while (!v11);
        }
        unint64_t v6 = v10;
      }
      while (v10 != v7);
    }
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
LABEL_17:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else if (v4)
  {
    goto LABEL_17;
  }
  return Mutable;
}

void sub_23F575304(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderDirtyPrimDescriptorCopyType(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
  {
    if (v2) {
      goto LABEL_6;
    }
    return 0;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!v2)
  {
    uint64_t v4 = 0;
LABEL_11:
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    return v4;
  }
LABEL_6:
  {
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v4 = 1;
  }
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    goto LABEL_11;
  }
  return v4;
}

void _RIOBuilderDirtyPrimDescriptorCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderDirtyPrimDescriptorCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyPrimDescriptorCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyPrimDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyPrimDescriptor %p>", a1);
}

CFStringRef _RIOBuilderDirtyPrimDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyPrimDescriptor %p>", a1);
}

uint64_t RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(void *a1)
{
  if (RIOBuilderDirtyPropertyDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyPropertyDescriptorGetTypeID::onceToken, &__block_literal_global_21);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = a1[1];
    *(void *)(result + 16) = *a1;
    *(void *)(result + 24) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F5755AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(void *a1)
{
  if (RIOBuilderDirtyMetadataDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyMetadataDescriptorGetTypeID::onceToken, &__block_literal_global_27);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = a1[1];
    *(void *)(result + 16) = *a1;
    *(void *)(result + 24) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void *std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::shared_ptr<realityio::DirtyMetadataDescriptor const> const*,std::shared_ptr<realityio::DirtyMetadataDescriptor const> const*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F5756BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vallocate[abi:ne180100](result, a4);
    return (void *)std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_at_end<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>(v6, a2, a3);
  }
  return result;
}

void sub_23F575740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::reverse_iterator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>,std::reverse_iterator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>,std::reverse_iterator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::reverse_iterator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>,std::reverse_iterator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>,std::reverse_iterator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::reverse_iterator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::reverse_iterator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<realityio::PrimitiveDirtyPrimDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F335688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PrimitiveDirtyPrimDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F335688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::PrimitiveDirtyPrimDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

char *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(char **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int64x2_t v24 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = &v10[8 * v4];
  uint64_t v12 = &v10[8 * v9];
  uint64_t v23 = v12;
  uint64_t v13 = *a2;
  *(void *)BOOL v11 = *a2;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v14 = v11 + 8;
  v22.i64[1] = (uint64_t)(v11 + 8);
  uint64_t v16 = *a1;
  long long v15 = a1[1];
  if (v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64((unint64_t)v15);
  }
  else
  {
    do
    {
      uint64_t v17 = *((void *)v15 - 1);
      v15 -= 8;
      *((void *)v11 - 1) = v17;
      v11 -= 8;
      *(void *)long long v15 = 0;
    }
    while (v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
    long long v14 = (char *)v22.i64[1];
    uint64_t v12 = v23;
  }
  *a1 = v11;
  a1[1] = v14;
  int64x2_t v22 = v18;
  uint64_t v19 = a1[2];
  a1[2] = v12;
  uint64_t v23 = v19;
  uint64_t v21 = v18.i64[0];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)&v21);
  return v14;
}

void std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::~__func()
{
}

void *std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3356D8;
  return result;
}

void std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3356D8;
}

void std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(void *)a1)
  {
    uint64_t v3 = *(void *)(*(void *)a1 + 16);
    if ((v3 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v3 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)(v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = v3;
      atomic_fetch_add_explicit(v4, 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = v3;
    }
  }
  else
  {
    unint64_t v5 = std::system_category();
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v5;
  }
}

uint64_t std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::target_type()
{
}

void *std::__function::__value_func<realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<realityio::TypeNameDirtyPrimDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F335768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TypeNameDirtyPrimDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F335768;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::TypeNameDirtyPrimDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void realityio::GetFromUsdAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t a2@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X1>, void *a4@<X8>)
{
  v47[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v47, a1);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((uint64_t *)&buf, a3);
    std::string::basic_string[abi:ne180100]<0>(&__p, "/__stage.layerData");
    MEMORY[0x2455CF7A0](&v40, &__p);
    uint64_t v7 = buf;
    unint64_t v8 = v40;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    if ((v36[7] & 0x80000000) != 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
    if (v7 == v8)
    {
      TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a3);
      unint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(TargetPath);
      long long __p = (void *)v10;
      if ((v10 & 7) != 0)
      {
        BOOL v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v11, 2u, memory_order_relaxed) & 1) == 0) {
          long long __p = v11;
        }
      }
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 24));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)v47);
      if ((__p & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_68:
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, v47);
      goto LABEL_69;
    }
    int64x2_t v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 24));
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((uint64_t *)&v40, a3);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath((uint64_t *)&buf, v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&buf, (uint64_t)&__p);
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
    if (*((void *)&buf + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p))
    {
LABEL_64:
      if ((v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v36);
      if (v35) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
      }
      goto LABEL_68;
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a3);
    unint64_t v20 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v19);
    unint64_t v40 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      unint64_t v40 = v20 & 0xFFFFFFFFFFFFFFF8;
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v21 = (realityio *)MEMORY[0x2455CF810](&buf, "__timeSamples");
    int64x2_t v22 = (atomic_uint *)(buf & 0xFFFFFFFFFFFFFFF8);
    if ((buf & 7) != 0) {
      atomic_fetch_add_explicit(v22, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)(v20 & 0xFFFFFFFFFFFFFFF8) == v22)
    {
      char v30 = *(id *)(realityio::logObjects(v21) + 24);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_61;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v38);
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = Text;
      uint64_t v32 = "Unexpected __timeSamples request on \"%s\"";
    }
    else
    {
      uint64_t v23 = (realityio *)MEMORY[0x2455CF810](&buf, "__timeValues");
      unint64_t v24 = v40 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v25 = (atomic_uint *)(buf & 0xFFFFFFFFFFFFFFF8);
      if ((buf & 7) != 0) {
        atomic_fetch_add_explicit(v25, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v24 != v25)
      {
        MEMORY[0x2455CF810](&buf, "__typeName");
        unint64_t v26 = v40 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v27 = (atomic_uint *)(buf & 0xFFFFFFFFFFFFFFF8);
        if ((buf & 7) != 0) {
          atomic_fetch_add_explicit(v27, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)v26 == v27)
        {
          *a4 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
          a4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>(void)::ti
                + 1;
          goto LABEL_71;
        }
        if (pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (pxrInternal__aapl__pxrReserved__::VtValue *)v47))
        {
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, v47);
LABEL_71:
          if ((v40 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v37 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v36);
          if (v35) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
          }
          goto LABEL_69;
        }
        goto LABEL_62;
      }
      char v30 = *(id *)(realityio::logObjects(v23) + 24);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
LABEL_61:

LABEL_62:
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_64;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v38);
      uint64_t v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v33;
      uint64_t v32 = "Unexpected __timeValues request on \"%s\"";
    }
    _os_log_error_impl(&dword_23F4EA000, v30, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    goto LABEL_61;
  }
  uint64_t v13 = (uint64_t *)(a2 + 24);
  long long v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 24));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath((uint64_t *)&buf, v14, a3);
  pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&buf, (uint64_t)&__p);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  if (*((void *)&buf + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
  }
  int IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
  char v16 = IsValid;
  if (IsValid)
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v17);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, v47);
  }
  else
  {
    long long v28 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath((uint64_t *)&v40, v28, a3);
    if (v40 == 4)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&buf, 4, &v41, &v42, &v43);
    }
    else
    {
      LODWORD(buf) = 4;
      *((void *)&buf + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v46 = 0;
    }
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
    if (v41) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&buf))
    {
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      uint64_t v29 = (_DWORD *)v40;
      if (v41 - v40 != 8)
      {
        uint64_t v39 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy();
      }
      uint64_t v39 = (std::type_info **)((char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
                              + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, (_DWORD *)v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v38 + 1, v29 + 1);
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(v47, &v38);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v38);
      uint64_t v38 = (void **)&v40;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v38);
    }
    else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
    {
      uint64_t v41 = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
          + 1;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v40, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v40 + 1, (_DWORD *)a3 + 1);
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(v47, &v40);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
    }
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
    if (*((void *)&buf + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
    }
  }
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v36);
  if (v35) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
  }
  if ((v16 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_69:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v47);
}

void sub_23F576488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v22 - 72));
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_Hash(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetHash(a1));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3EF8](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__16SdfValueTypeNameE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetProxiedTypeid()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>(void)::ti
        + 1;
  return result;
}

void *realityio::SkeletalPoseComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t *a2@<X3>, void *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  uint64_t v18 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    RESkeletalPoseComponentGetComponentType();
    uint64_t v9 = REComponentCreateByClass();
    uint64_t v19 = v9;
    if (v9) {
      RERetain();
    }
    uint64_t v10 = v18;
    if (v18 != v9)
    {
      uint64_t v18 = v9;
      uint64_t v19 = v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v19);
    unint64_t v20 = (unint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
  }
  unint64_t v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
  realityio::WrappedRERef<REAsset *>::operator=(&v18, v8);
  uint64_t v11 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v12));
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + v13));
      unint64_t v16 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v16) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v16 + 376) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v19)
        && (v20 & 4) != 0)
      {
        (*(void (**)(uint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      ++v14;
      uint64_t v11 = *a2;
      v13 += 8;
      v12 += 16;
    }
    while (v14 < (a2[1] - *a2) >> 3);
  }
  RESkeletalPoseComponentSetSkeletalPoseDefinition();
  RENetworkMarkComponentDirty();
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v18);
}

void sub_23F576950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP7REAssetEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t RIOPxrSdfPrimSpecGetTypeID()
{
  if (RIOPxrSdfPrimSpecGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfPrimSpecGetTypeID::onceToken, &__block_literal_global_3);
  }
  return RIOPxrSdfPrimSpecGetTypeID::typeID;
}

void __RIOPxrSdfPrimSpecGetTypeID_block_invoke()
{
  if (!RIOPxrSdfPrimSpecGetTypeID::typeID) {
    RIOPxrSdfPrimSpecGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdfPrimSpecCopyLayer(uint64_t a1)
{
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(&v5, v1);
  uint64_t v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(&v5);
  uint64_t v3 = v6;
  if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v2;
}

void sub_23F576B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(uint64_t *a1)
{
  if (RIOPxrSdfLayerGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v3 = a1[1];
    if (v3)
    {
      if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 1)
                    + 14))
        uint64_t v3 = *a1;
      else {
        uint64_t v3 = 0;
      }
    }
    *(void *)(Instance + 16) = v3;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(Instance + 16));
  }
  return Instance;
}

pxrInternal__aapl__pxrReserved__::SdfSpec *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t v1 = a1;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operat"
            "or->() const [T = pxrInternal__aapl__pxrReserved__::SdfPrimSpec]";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfPrimSpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
    if (v6 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", (const char *)v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v1;
}

void sub_23F576CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfPrimSpecCopyPath(uint64_t a1)
{
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(&v4, v1);
  uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return v2;
}

void sub_23F576D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPrimSpecGetSpecifier(uint64_t a1)
{
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(v1) - 1;
  if (v2 < 3) {
    return v2 + 1;
  }
  else {
    return 0;
  }
}

uint64_t RIOPxrSdfPrimSpecCopyAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributeAtPath((uint64_t *)&v8, v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8))
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (RIOPxrSdfAttributeSpecGetTypeID::onceToken != -1) {
      dispatch_once(&RIOPxrSdfAttributeSpecGetTypeID::onceToken, &__block_literal_global_29);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v4 = Instance;
    if (Instance)
    {
      char v6 = v8;
      *(void *)(Instance + 16) = v8;
      if (v6) {
        atomic_fetch_add(v6, 1u);
      }
    }
  }
  MEMORY[0x2455CF7B0](&v8);
  return v4;
}

void _RIOPxrSdfPrimSpecCFFinalize(const void *a1)
{
}

uint64_t _RIOPxrSdfPrimSpecCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::operator==();
}

unint64_t _RIOPxrSdfPrimSpecCFHash(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * a1[2]);
}

CFStringRef _RIOPxrSdfPrimSpecCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfPrimSpec %p>", a1);
}

CFStringRef _RIOPxrSdfPrimSpecCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfPrimSpec %p>", a1);
}

realityio::StageMetersPerUnitBuilder *realityio::StageMetersPerUnitBuilder::StageMetersPerUnitBuilder(realityio::StageMetersPerUnitBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "StageMetersPerUnitBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kStageMetersPerUnitBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40450, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40450))
  {
    operator new();
  }
  uint64_t v4 = *(std::__shared_weak_count **)algn_268C40448;
  v6[0] = _MergedGlobals_9;
  v6[1] = *(void *)algn_268C40448;
  if (*(void *)algn_268C40448) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C40448 + 8), 1uLL, memory_order_relaxed);
  }
  realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, v6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F335970;
  return this;
}

void sub_23F577210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 72);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  *(void *)(v37 - 104) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 104));
  a25 = &a32;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  unint64_t v40 = *(std::__shared_weak_count **)(v37 - 88);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if ((a28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455D2BD0](v36, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40450);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::StageMetersPerUnitBuilder::run(realityio::StageMetersPerUnitBuilder *this, realityio::Inputs *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  *(void *)long long buf = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v13, (uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
  uint64_t v4 = v3;
  uint64_t v5 = v14;
  if (v14 && atomic_fetch_add_explicit(v14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  char v6 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)buf);
  uint64_t v15 = v4;
  uint64_t v7 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v6);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v7, (uint64_t)&v13);
  if ((_BYTE)v13)
  {
    char v8 = (realityio *)v14;
    uint64_t v12 = v14;
    if (v14)
    {
      RERetain();
      uint64_t v9 = *((void *)a2 + 6);
      *(void *)long long buf = &unk_26F3359E8;
      uint64_t v17 = &v12;
      uint64_t v18 = &v15;
      uint64_t v19 = buf;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 16))(v9, buf);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  char v10 = *(NSObject **)(realityio::logObjects(v8) + 24);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_DEFAULT, "Stopping operation to set meters per unit transform because entity no longer exists", buf, 2u);
  }
LABEL_10:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v12);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v13);
}

void sub_23F577578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t realityio::StageMetersPerUnitBuilder::clear(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

void realityio::StageMetersPerUnitBuilder::~StageMetersPerUnitBuilder(realityio::StageMetersPerUnitBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F3359E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3359E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  void v9[4] = *MEMORY[0x263EF8340];
  RETransformComponentGetComponentType();
  uint64_t v2 = *(void *)(a1 + 16);
  v9[0] = &unk_26F335A58;
  v9[1] = v2;
  v9[3] = v9;
  uint64_t v3 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v9, v3);
  RENetworkMarkComponentDirty();
  uint64_t v4 = (realityio *)std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v9);
  uint64_t v5 = *(NSObject **)(realityio::logObjects(v4) + 24);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = **(void **)(a1 + 16);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_log_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_INFO, "Updating root entity scale based on metersPerUnit: %f", (uint8_t *)&v7, 0xCu);
  }
}

void sub_23F577808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F335A58;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F335A58;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, void *a2)
{
  double v2 = **(double **)(a1 + 8);
  *(float *)&double v2 = v2;
  return MEMORY[0x270F20FC8](*a2, (__n128)vdupq_lane_s32(*(int32x2_t *)&v2, 0));
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio25StageMetersPerUnitBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio25StageMetersPerUnitBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

uint64_t RIOPxrUsdVariantSetGetTypeID()
{
  if (RIOPxrUsdVariantSetGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdVariantSetGetTypeID::onceToken, &__block_literal_global_4);
  }
  return RIOPxrUsdVariantSetGetTypeID::typeID;
}

void __RIOPxrUsdVariantSetGetTypeID_block_invoke()
{
  if (!RIOPxrUsdVariantSetGetTypeID::typeID) {
    RIOPxrUsdVariantSetGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrUsdVariantHasAuthoredVariant(uint64_t a1, char *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v7, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  uint64_t HasAuthoredVariant = pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariant();
  if (v6 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return HasAuthoredVariant;
}

void sub_23F577A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdVariantSet *pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this, const pxrInternal__aapl__pxrReserved__::UsdVariantSet *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)this + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  char v6 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_23F577B84(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  uint64_t v5 = *(void *)(v1 + 8);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  unint64_t v2 = (unint64_t)this[3];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 2));
  uint64_t v3 = (uint64_t)this[1];
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

uint64_t RIOPxrUsdVariantSetAddVariant(uint64_t a1, char *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v7, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  uint64_t v3 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v7);
  std::recursive_mutex::lock(v3);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant();
  if (v6 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v3);
  if (v12 < 0) {
    operator delete(v11);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  uint64_t result = v8;
  if (v8) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return result;
}

void sub_23F577CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v15);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

uint64_t realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(realityio::UsdLayerMutexTracker *a1)
{
  unint64_t v2 = realityio::UsdLayerMutexTracker::instance(a1);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v14, a1);
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v14);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
    uint64_t v5 = EditTarget[1];
    uint64_t v12 = *EditTarget;
    uint64_t v13 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v6 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  double v7 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v12);
  uint64_t v9 = v8;
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v10 + 8))(v10, v7);
  }
  return v9;
}

void sub_23F577E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrUsdVariantSetCopyVariantNames(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v8, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames(v7, (pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v8);
  uint64_t v2 = v7[0];
  uint64_t v3 = v7[1];
  while (v2 != v3)
  {
    uint64_t v4 = (const char *)v2;
    if (*(char *)(v2 + 23) < 0) {
      uint64_t v4 = *(const char **)v2;
    }
    CFStringRef v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
    v2 += 24;
  }
  uint64_t v14 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (v13 < 0) {
    operator delete(__p);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  return Mutable;
}

void sub_23F577FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)va);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrUsdVariantSetCopyVariantSelection(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v6, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantSelection((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v6);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  return v2;
}

void sub_23F578094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelection(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v3, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  uint64_t HasAuthoredVariantSelection = pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariantSelection();
  if (v8 < 0) {
    operator delete(__p);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  return HasAuthoredVariantSelection;
}

void sub_23F578150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelectionOnLayer(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v40, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  uint64_t v39 = *(atomic_uint **)(a2 + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v38 = __p;
  }
  MEMORY[0x2455D1C90](&v36, v40);
  uint64_t v3 = v36;
  uint64_t v4 = v37;
  if (v36 == v37)
  {
LABEL_64:
    uint64_t v25 = 0;
    goto LABEL_72;
  }
  while (1)
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(&v34, v5);
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(&v32, v6);
    if (pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string,std::string>,pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string,std::string>>>::_Validate(&v32))
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
      char v8 = *(void **)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
      uint64_t v9 = &v32;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v7 = 0;
      char v8 = 0;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string,std::string>,pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string,std::string>>>::_Validate(&v32))
    {
      uint64_t v10 = v32;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 48))(v32);
        uint64_t v10 = v32;
        if (v32) {
          uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
        }
      }
      char v11 = (void *)(v10 + 8);
      uint64_t v12 = &v32;
    }
    else
    {
      uint64_t v12 = 0;
      char v11 = 0;
    }
    if (v12 != v9 || v11 != v8) {
      break;
    }
LABEL_16:
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    uint64_t v13 = v35;
    if (v35 && atomic_fetch_add_explicit((atomic_uint *volatile)(v35 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)v3 + 8);
    if (v3 == v4) {
      goto LABEL_64;
    }
  }
  while (1)
  {
    if (!v9) {
      goto LABEL_30;
    }
    uint64_t v14 = *v9;
    if (*v9) {
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
    }
    if ((void *)(v14 + 8) == v8)
    {
LABEL_30:
      if (!v12) {
        goto LABEL_16;
      }
      uint64_t v15 = *v12;
      if (*v12) {
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
      }
      if (v11 == (void *)(v15 + 8)) {
        goto LABEL_16;
      }
      if (!v9)
      {
        v45[0] = (void **)"sdf/mapEditProxy.h";
        v45[1] = (void **)"Dereference";
        v45[2] = (void **)215;
        v45[3] = (void **)"static _PairProxy pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std:"
                          ":string>>::Traits::Dereference(This *, const Type *, inner_iterator) [T = std::map<std::string"
                          ", std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValueP"
                          "olicy<std::map<std::string, std::string>>]";
        char v46 = 0;
        int v47 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v45, "Dereferenced an invalid map proxy iterator");
      }
    }
    if (*((char *)v8 + 55) < 0) {
      std::string::__init_copy_ctor_external(&__s1, (const std::string::value_type *)v8[4], v8[5]);
    }
    else {
      std::string __s1 = *(std::string *)(v8 + 4);
    }
    uint64_t v29 = v9;
    uint64_t v30 = v7;
    long long v31 = v8;
    if (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v34, &v39))goto LABEL_52; {
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    }
      std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else {
      std::string::size_type size = __s1.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v17 = v38.__r_.__value_.__l.__size_;
    }
    if (size != v17) {
      goto LABEL_52;
    }
    uint64_t v18 = (v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v38
        : (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
      break;
    }
    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
      goto LABEL_66;
    }
    p_s1 = &__s1;
    uint64_t v20 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == v18->__r_.__value_.__s.__data_[0])
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      uint64_t v18 = (std::string *)((char *)v18 + 1);
      if (!--v20) {
        goto LABEL_66;
      }
    }
LABEL_52:
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v21 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_55:
      operator delete(v21);
    }
    uint64_t v22 = (void *)v8[1];
    if (v22)
    {
      do
      {
        uint64_t v23 = v22;
        uint64_t v22 = (void *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        uint64_t v23 = (void *)v8[2];
        BOOL v24 = *v23 == (void)v8;
        char v8 = v23;
      }
      while (!v24);
    }
    char v8 = v23;
    if (v12 == v9)
    {
      char v8 = v23;
      if (v11 == v23) {
        goto LABEL_16;
      }
    }
  }
  uint64_t v21 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, v18, __s1.__r_.__value_.__l.__size_)) {
    goto LABEL_55;
  }
  operator delete(v21);
LABEL_66:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v26 = v35;
  if (v35 && atomic_fetch_add_explicit((atomic_uint *volatile)(v35 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 8))(v26, v18);
  }
  uint64_t v25 = 1;
LABEL_72:
  v45[0] = (void **)&v36;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100](v45);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  if (v41) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
  }
  return v25;
}

void sub_23F578648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,atomic_uint *a29,void *a30)
{
}

void sub_23F578708(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x23F578684);
}

uint64_t RIOPxrUsdVariantSetClearVariantSelection(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v4, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  uint64_t v1 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v4);
  std::recursive_mutex::lock(v1);
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v4);
  std::recursive_mutex::unlock(v1);
  if (v9 < 0) {
    operator delete(__p);
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return v2;
}

void sub_23F5787C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::recursive_mutex::unlock(v10);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetSetVariantSelection(uint64_t a1, char *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v8, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  uint64_t v3 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v8);
  std::recursive_mutex::lock(v3);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection();
  if (v7 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v3);
  if (v13 < 0) {
    operator delete(v12);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  return v4;
}

void sub_23F5788B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v15);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetCopyPrim(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v3, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  int v9 = 1;
  uint64_t v1 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v3, &v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  return v1;
}

void sub_23F578988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

CFStringRef RIOPxrUsdVariantSetCopyName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v4, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  if (v9 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v9 < 0) {
    operator delete(__p);
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return v2;
}

void sub_23F578A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetIsValid(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v3, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  uint64_t IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v3);
  if (v8 < 0) {
    operator delete(__p);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  return IsValid;
}

void sub_23F578AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetCopyEditTarget(uint64_t a1)
{
  v12[7] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v4, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditTarget();
  uint64_t v1 = RIOPxrUsdEditTargetCreate<pxrInternal__aapl__pxrReserved__::UsdEditTarget>((uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v12);
  uint64_t v2 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v9 < 0) {
    operator delete(__p);
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return v1;
}

void sub_23F578C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdEditTargetCreate<pxrInternal__aapl__pxrReserved__::UsdEditTarget>(uint64_t a1)
{
  if (RIOPxrUsdEditTargetGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdEditTargetGetTypeID::onceToken, &__block_literal_global_26);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = *(_OWORD *)a1;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data((_DWORD *)(Instance + 32), a1 + 16);
    *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 56);
  }
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdEditTarget::~UsdEditTarget(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)this + 16));
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2)
  {
    if (atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
    }
  }
}

void *_RIOPxrUsdVariantSetCFFinalize(void **a1)
{
  if (*((char *)a1 + 71) < 0) {
    operator delete(a1[6]);
  }
  unint64_t v2 = (unint64_t)a1[5];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
  uint64_t result = a1[3];
  if (result)
  {
    return (void *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)result);
  }
  return result;
}

BOOL _RIOPxrUsdVariantSetCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdVariantSetCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdVariantSetCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdVariantSet %p>", a1);
}

CFStringRef _RIOPxrUsdVariantSetCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdVariantSet %p>", a1);
}

atomic_uint **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(atomic_uint **a1)
{
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data(pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 > 2)
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    *((_DWORD *)this + 8) = v2 - 1;
    if (v2)
    {
      uint64_t v3 = this;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
        uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)((char *)v3 + 16);
        int v4 = *((_DWORD *)this + 8);
        *((_DWORD *)this + 8) = v4 - 1;
      }
      while (v4);
    }
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = MEMORY[0x2455CF7B0](v4 - 8);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string,std::string>,pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string,std::string>>>::_Validate(void *a1)
{
  uint64_t v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>(uint64_t *a1, void *a2)
{
  if (pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)a1))
  {
    if (!a1[1]) {
      return 0;
    }
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 1);
    uint64_t v5 = *a1;
    if (!*(unsigned char *)(v4 + 14) || v5 == 0) {
      return 0;
    }
    return v5 == *a2;
  }
  else
  {
    return *a2 == 0;
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)a2;
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(a2 + 32);
  a1[8] = v4;
  *((unsigned char *)a1 + 36) = *(unsigned char *)(a2 + 36);
  if (v4 > 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    uint64_t v5 = *(int *)(a2 + 32);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        uint64_t v7 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100](a1, v2);
        v2 += 4;
        a1 = v7 + 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  return v3;
}

{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  uint64_t v2 = (_DWORD *)a2;
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(a2 + 32);
  a1[8] = v4;
  *((unsigned char *)a1 + 36) = *(unsigned char *)(a2 + 36);
  if (v4 > 2)
  {
    char v8 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = *(int *)(a2 + 32);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        uint64_t v7 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100](a1, v2);
        v2 += 4;
        a1 = v7 + 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  return v3;
}

_DWORD *std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100](_DWORD *a1, _DWORD *a2)
{
  int v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 2, a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 3, a2 + 3);
  return a1;
}

{
  _DWORD *v4;

  int v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 2, a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 3, a2 + 3);
  return a1;
}

void *realityio::TransformComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  v59 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    RETransformComponentGetComponentType();
    uint64_t v64 = REComponentCreateByClass();
    if (v64)
    {
      RERetain();
      uint64_t v9 = v64;
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v59;
    if (v59 != (uint64_t *)v9)
    {
      v59 = (uint64_t *)v9;
      uint64_t v64 = (uint64_t)v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v64);
    unint64_t v65 = (unint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
  }
  char v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
  realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)&v59, v8);
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v58, 1.0);
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v57, 1.0);
  uint64_t v56 = 0;
  memset(v55, 0, sizeof(v55));
  v54[0] = 0;
  v54[1] = 0;
  uint64_t v53 = (uint64_t *)v54;
  uint64_t v11 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    char v15 = 0;
    while (1)
    {
      unint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + v12);
      NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + v12));
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::VtValue *)MEMORY[0x2455CF810](&v64, "xformOpOrder");
      uint64_t v19 = *NameToken;
      uint64_t v20 = (atomic_uint *)(v64 & 0xFFFFFFFFFFFFFFF8);
      if ((v64 & 7) != 0) {
        atomic_fetch_add_explicit(v20, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v19 & 0xFFFFFFFFFFFFFFF8) == v20)
      {
        long long v31 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v18, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v13));
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(v31))
        {
          uint64_t v32 = (long long *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator=((uint64_t)v55, v32);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        goto LABEL_39;
      }
      uint64_t v21 = (realityio::TargetPaths *)realityio::TargetPaths::upAxisPath(v18);
      if (*(void *)v16 == *(void *)v21)
      {
        uint64_t v22 = (unint64_t *)MEMORY[0x263F90538];
        unint64_t v23 = atomic_load(MEMORY[0x263F90538]);
        if (!v23) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
        }
        uint64_t v24 = *(void *)(v23 + 1344);
        *(void *)&long long v48 = v24;
        if ((v24 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)&long long v48 = v48 & 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v60, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v13));
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v60))
        {
          if ((BYTE8(v60) & 4) != 0) {
            uint64_t v25 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v60 + 1) & 0xFFFFFFFFFFFFFFF8)
          }
                                                                    + 168))(&v60);
          else {
            uint64_t v25 = &v60;
          }
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v48, v25);
        }
        unint64_t v26 = atomic_load(v22);
        if (!v26) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
        }
        if ((v48 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v26 + 1352) & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v65 = 0;
          uint64_t v66 = 0;
          uint64_t v64 = 0x3FF0000000000000;
          unint64_t v67 = 0xC056800000000000;
          uint64_t v27 = (long long *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v58, (const pxrInternal__aapl__pxrReserved__::GfRotation *)&v64);
          long long v28 = *v27;
          long long v29 = v27[1];
          long long v30 = v27[3];
          v58[2] = v27[2];
          v58[3] = v30;
          v58[0] = v28;
          v58[1] = v29;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v60);
        if ((v48 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (*(void *)v16 != *(void *)realityio::TargetPaths::metersPerUnitPath(v21))
        {
          uint64_t v41 = *a3;
          uint64_t v64 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v16);
          uint64_t v42 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(&v53, (uint64_t *)v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v64);
          pxrInternal__aapl__pxrReserved__::VtValue::operator=(v42 + 5, (void *)(v41 + v13));
          goto LABEL_39;
        }
        uint64_t v33 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v13));
        int v34 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(v33);
        float v35 = 0.01;
        if (v34)
        {
          if ((v65 & 4) != 0) {
            uint64_t v36 = (double *)(*(uint64_t (**)(uint64_t *, float))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(&v64, 0.01);
          }
          else {
            uint64_t v36 = (double *)&v64;
          }
          float v35 = *v36;
        }
        *(float *)&long long v60 = v35;
        *((float *)&v60 + 1) = v35;
        *((float *)&v60 + 2) = v35;
        uint64_t v37 = (long long *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale();
        long long v38 = *v37;
        long long v39 = v37[1];
        long long v40 = v37[3];
        v57[2] = v37[2];
        v57[3] = v40;
        v57[0] = v38;
        v57[1] = v39;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
      }
      char v15 = 1;
LABEL_39:
      ++v14;
      uint64_t v11 = *a2;
      v13 += 16;
      v12 += 8;
      if (v14 >= (a2[1] - *a2) >> 3) {
        goto LABEL_46;
      }
    }
  }
  char v15 = 0;
LABEL_46:
  char v52 = 0;
  if (getLocalTransformation((uint64_t)&v64, &v52, v55, (uint64_t)&v53))
  {
    MEMORY[0x2455CE5D0](&v60, &v64);
    if (v15)
    {
      long long v44 = v60;
      long long v45 = v61;
      long long v46 = v62;
      long long v47 = v63;
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
      long long v48 = v44;
      long long v49 = v45;
      long long v50 = v46;
      long long v51 = v47;
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
      long long v60 = v48;
      long long v61 = v49;
      long long v62 = v50;
      long long v63 = v51;
    }
    DWORD2(v48) = 0;
    *(void *)&long long v48 = 0;
    REDecomposeMatrix();
    RETransformComponentSetLocalSRT();
    RENetworkMarkComponentDirty();
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v53, v54[0]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v55);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v59);
}

void sub_23F579724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::VtValue *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,__int16 a59,char a60,char a61)
{
}

void *realityio::AnchoringComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  long long v48 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    REAnchoringComponentGetComponentType();
    std::string __p = (void *)REComponentCreateByClass();
    if (__p)
    {
      RERetain();
      uint64_t v9 = __p;
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v48;
    if (v48 != v9)
    {
      long long v48 = v9;
      std::string __p = v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&__p);
    RERelease();
    long long v50 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
  }
  char v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
  realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)&v48, v8);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  long long v50 = 0;
  uint64_t v51 = 0;
  memset(&v45, 0, sizeof(v45));
  uint64_t v11 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    while (1)
    {
      char v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + v12);
      uint64_t v16 = *a3;
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + v12));
      unint64_t v18 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v18) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      uint64_t v19 = (const std::string **)(v16 + v13);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v18 + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13))) {
          break;
        }
      }
      uint64_t v22 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
      unint64_t v23 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v23) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v23 + 56) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
      {
        uint64_t v24 = *(void *)(v16 + v13 + 8);
        if ((v24 & 4) != 0)
        {
          uint64_t v25 = (const std::string *)(*(uint64_t (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
          p_p = &v45;
        }
        else
        {
          p_p = &v45;
LABEL_21:
          uint64_t v25 = *v19;
        }
        goto LABEL_22;
      }
      unint64_t v26 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
      unint64_t v27 = atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v27) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*v26 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v27 + 64) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
      {
        uint64_t v28 = *(void *)(v16 + v13 + 8);
        if ((v28 & 4) != 0) {
          uint64_t v19 = (const std::string **)(*(uint64_t (**)(uint64_t))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
        }
        long long v29 = &v47;
      }
      else
      {
        long long v30 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
        unint64_t v31 = atomic_load(&realityio::tokens::TransformBuilderTokens);
        if (!v31) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        if ((*v30 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v31 + 72) & 0xFFFFFFFFFFFFFFF8)
          || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
        {
          uint64_t v33 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
          unint64_t v34 = atomic_load(&realityio::tokens::EcsTokens);
          if (!v34) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*v33 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v34 + 40) & 0xFFFFFFFFFFFFFFF8))
          {
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
            {
              uint64_t v35 = *(void *)(v16 + v13 + 8);
              if ((v35 & 4) != 0) {
                (*(void (**)(uint64_t))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
              }
            }
          }
          goto LABEL_41;
        }
        uint64_t v32 = *(void *)(v16 + v13 + 8);
        if ((v32 & 4) != 0) {
          uint64_t v19 = (const std::string **)(*(uint64_t (**)(uint64_t))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
        }
        long long v29 = &v46;
      }
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(v29, v19);
LABEL_41:
      ++v14;
      uint64_t v11 = *a2;
      v13 += 16;
      v12 += 8;
      if (v14 >= (a2[1] - *a2) >> 3) {
        goto LABEL_50;
      }
    }
    uint64_t v20 = *(void *)(v16 + v13 + 8);
    if ((v20 & 4) == 0)
    {
      p_p = (std::string *)&__p;
      goto LABEL_21;
    }
    uint64_t v25 = (const std::string *)(*(uint64_t (**)(uint64_t))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
    p_p = (std::string *)&__p;
LABEL_22:
    std::string::operator=(p_p, v25);
    goto LABEL_41;
  }
LABEL_50:
  unint64_t v36 = atomic_load(&realityio::tokens::TransformBuilderTokens);
  if (!v36) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v36 + 24) & 0xFFFFFFFFFFFFFFF8))
  {
    REAnchoringComponentSetDescriptorType();
    if (v46)
    {
      unint64_t v42 = atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v42) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((v46 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8)
        && !atomic_load(&realityio::tokens::TransformBuilderTokens))
      {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      REAnchoringComponentSetDescriptorAlignment();
    }
  }
  else
  {
    unint64_t v37 = atomic_load(&realityio::tokens::TransformBuilderTokens);
    if (!v37) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v37 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorResourceGroup();
      REAnchoringComponentSetDescriptorResourceName();
    }
    else
    {
      long long v38 = (realityio *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v38) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((v47 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v38 & 0xFFFFFFFFFFFFFFF8))
      {
        long long v39 = *(NSObject **)(realityio::logObjects(v38) + 24);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v40 = v47 & 0xFFFFFFFFFFFFFFF8;
          if ((v47 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v41 = (const char *)(v40 + 16);
            if (*(char *)(v40 + 39) < 0) {
              uint64_t v41 = *(const char **)v41;
            }
          }
          else
          {
            uint64_t v41 = "";
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v53 = v41;
          _os_log_impl(&dword_23F4EA000, v39, OS_LOG_TYPE_DEFAULT, "Unknown anchor type %s", buf, 0xCu);
        }
      }
      REAnchoringComponentSetDescriptorType();
    }
  }
  REAnchoringComponentSetScaleFactor();
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p);
  }
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v48);
}

void sub_23F579E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pxrInternal__aapl__pxrReserved__::VtValue *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F579F98(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4074BD09C3);
  _Unwind_Resume(a1);
}

void *RIO_MTLX::MaterialAssign::MATERIAL_ATTRIBUTE(RIO_MTLX::MaterialAssign *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::MaterialAssign::MATERIAL_ATTRIBUTE(void)::v, "material");
  }
  return RIO_MTLX::MaterialAssign::MATERIAL_ATTRIBUTE(void)::v;
}

void sub_23F57A024(_Unwind_Exception *a1)
{
}

void **std::vector<std::shared_ptr<RIO_MTLX::MaterialAssign>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::MaterialAssign>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F57A144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(a1 + 240);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  RIO_MTLX::Element::getQualifiedName(a1, a2, &__p);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(v8, (unsigned __int8 *)&__p, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    uint64_t v9 = v12;
    *a3 = v11;
    a3[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(v8, (unsigned __int8 *)a2, a3);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_23F57A240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 136);
  int v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Look>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      unint64_t v13 = (const void **)(v8 + 24);
      unint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        unint64_t v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::Look>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F57A3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::Look>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::Look>>::__swap_out_circular_buffer(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F57A4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Look>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Look>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Look>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Look>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Look>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Look>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Look>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Look>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Look>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Look>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Look>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Look>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Look>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 136);
  int v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::MaterialAssign>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      char v13 = (const void **)(v8 + 24);
      long long v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        char v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::MaterialAssign>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F57A774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::MaterialAssign>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::MaterialAssign>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::MaterialAssign>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::MaterialAssign>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::MaterialAssign>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::MaterialAssign>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::MaterialAssign>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::MaterialAssign>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::MaterialAssign>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::MaterialAssign>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::MaterialAssign>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::MaterialAssign>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::MaterialAssign>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  int v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Node>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F57A974(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  int v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F57AA10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

id realityio::conversions::asScalar<float>()
{
  v0 = objc_msgSend(NSNumber, "numberWithFloat:");

  return v0;
}

id realityio::conversions::asScalar<double>()
{
  v0 = objc_msgSend(NSNumber, "numberWithDouble:");

  return v0;
}

id realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(unsigned __int16 a1)
{
  uint64_t v1 = [NSNumber numberWithUnsignedShort:a1];

  return v1;
}

id realityio::conversions::asScalar<int>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithInt:a1];

  return v1;
}

id realityio::conversions::asScalar<long>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithLong:a1];

  return v1;
}

id realityio::conversions::asScalar<long long>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithLongLong:a1];

  return v1;
}

id realityio::conversions::asScalar<short>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithShort:a1];

  return v1;
}

id realityio::conversions::asScalar<unsigned char>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithUnsignedChar:a1];

  return v1;
}

id realityio::conversions::asScalar<unsigned int>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithUnsignedInt:a1];

  return v1;
}

id realityio::conversions::asScalar<unsigned long>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithUnsignedLong:a1];

  return v1;
}

id realityio::conversions::asScalar<unsigned long long>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithUnsignedLongLong:a1];

  return v1;
}

id realityio::conversions::asScalar<unsigned short>(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithUnsignedShort:a1];

  return v1;
}

id realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = a1;
  pxrInternal__aapl__pxrReserved__::VtValue::GetType(a1);
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], v2);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    int v4 = [NSNumber numberWithBool:*(unsigned __int8 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>(v1)];
    goto LABEL_39;
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C238], v3);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    uint64_t v6 = *((void *)v1 + 1);
    if (v6)
    {
      if (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16) == 1)
      {
LABEL_9:
        if ((v6 & 4) == 0)
        {
LABEL_10:
          int v4 = [NSNumber numberWithChar:*(char *)v1];
          goto LABEL_39;
        }
        uint64_t v27 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v1);
LABEL_35:
        uint64_t v1 = (pxrInternal__aapl__pxrReserved__::VtValue *)v27;
        goto LABEL_10;
      }
      if ((v6 & 4) != 0
        && pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(v1, MEMORY[0x263F8C238]))
      {
        uint64_t v6 = *((void *)v1 + 1);
        goto LABEL_9;
      }
    }
    uint64_t v27 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    goto LABEL_35;
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], v5);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    pxrInternal__aapl__pxrReserved__::VtValue::Get<double>(v1);
    int v4 = realityio::conversions::asScalar<double>();
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], v7);
    if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
    {
      pxrInternal__aapl__pxrReserved__::VtValue::Get<float>(v1);
      int v4 = realityio::conversions::asScalar<float>();
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        uint64_t v10 = (unsigned __int16 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>(v1);
        int v4 = realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*v10);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], v9);
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          uint64_t v12 = (unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v1);
          int v4 = realityio::conversions::asScalar<int>(*v12);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C268], v11);
          if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
          {
            long long v14 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long>(v1);
            int v4 = realityio::conversions::asScalar<long>(*v14);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C290], v13);
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
            {
              uint64_t v16 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>(v1);
              int v4 = realityio::conversions::asScalar<long long>(*v16);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C278], v15);
              if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
              {
                unint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<short>(v1);
                int v4 = realityio::conversions::asScalar<short>(*(__int16 *)v18);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C280], v17);
                if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                {
                  uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned short>(v1);
                  int v4 = realityio::conversions::asScalar<unsigned short>(*(unsigned __int16 *)v20);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C250], v19);
                  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                  {
                    uint64_t v22 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>(v1);
                    int v4 = realityio::conversions::asScalar<unsigned char>(*v22);
                  }
                  else
                  {
                    pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], v21);
                    if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                    {
                      uint64_t v24 = (unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>(v1);
                      int v4 = realityio::conversions::asScalar<unsigned int>(*v24);
                    }
                    else
                    {
                      pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C270], v23);
                      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                      {
                        unint64_t v26 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long>(v1);
                        int v4 = realityio::conversions::asScalar<unsigned long>(*v26);
                      }
                      else
                      {
                        pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C298], v25);
                        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                        {
                          uint64_t v28 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>(v1);
                          int v4 = realityio::conversions::asScalar<unsigned long long>(*v28);
                        }
                        else
                        {
                          int v4 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_39:

  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::Get<short>(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    if (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16) == 3) {
      goto LABEL_6;
    }
    if ((v2 & 4) != 0
      && pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(this, MEMORY[0x263F8C278]))
    {
      uint64_t v2 = *((void *)this + 1);
LABEL_6:
      if ((v2 & 4) == 0) {
        return this;
      }
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return (pxrInternal__aapl__pxrReserved__::VtValue *)v4(this);
    }
  }

  return (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned short>(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    if (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16) == 4) {
      goto LABEL_6;
    }
    if ((v2 & 4) != 0
      && pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(this, MEMORY[0x263F8C280]))
    {
      uint64_t v2 = *((void *)this + 1);
LABEL_6:
      if ((v2 & 4) == 0) {
        return this;
      }
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return (pxrInternal__aapl__pxrReserved__::VtValue *)v4(this);
    }
  }

  return (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

id realityio::conversions::asString<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::GetType(a1);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(a1);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = (const char *)v4;
    }
    else {
      uint64_t v5 = *(const char **)v4;
    }
LABEL_9:
    uint64_t v11 = [NSString stringWithUTF8String:v5];
    goto LABEL_10;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1);
    uint64_t v10 = *(const char **)(v7 + 24);
    uint64_t v8 = v7 + 24;
    long long v9 = v10;
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v5 = (const char *)v8;
    }
    else {
      uint64_t v5 = v9;
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    unint64_t v13 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(a1) & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      uint64_t v5 = (const char *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0) {
        uint64_t v5 = *(const char **)v5;
      }
    }
    else
    {
      uint64_t v5 = "";
    }
    goto LABEL_9;
  }
  uint64_t v11 = 0;
LABEL_10:

  return v11;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t realityio::conversions::usdToSGDataType(uint64_t a1, const std::type_info *a2)
{
  uint64_t v52 = a1;
  unint64_t v2 = atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData();
  }
  if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8))
  {
    if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
      return 32;
    }
    if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
      return 33;
    }
  }
  else
  {
    unint64_t v3 = atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
    if (!v3) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData();
    }
    if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFF8))
    {
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
        return 35;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
        return 36;
      }
    }
    else
    {
      unint64_t v4 = atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
      if (!v4) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData();
      }
      if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v4 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
          return 38;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
          return 39;
        }
      }
      else
      {
        unint64_t v5 = atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
        if (!v5) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData();
        }
        if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v5 + 48) & 0xFFFFFFFFFFFFFFF8))
        {
          if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
            return 41;
          }
          if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
            return 42;
          }
          if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
            return 44;
          }
          if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
            return 45;
          }
        }
        else
        {
          unint64_t v6 = atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
          if (!v6) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData();
          }
          if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v6 + 64) & 0xFFFFFFFFFFFFFFF8))
          {
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
              return 49;
            }
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
              return 47;
            }
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
              return 52;
            }
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
              return 50;
            }
          }
        }
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], a2);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C250], v17);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 2;
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], v18);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 3;
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], v19);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 6;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 7;
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], v21);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 9;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 10;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 11;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 12;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 13;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 18;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 20;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 21;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 22;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 24;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 25;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 26;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 28;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 29;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 30;
  }
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
    return 31;
  }
  IsA = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if (IsA)
  {
    unint64_t v40 = *(NSObject **)(realityio::logObjects(IsA) + 48);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_23F4EA000, v40, OS_LOG_TYPE_ERROR, "We shouldn't see any double-precision matrices -- they are filtered up front.", buf, 2u);
    }
    return 14;
  }
  uint64_t v41 = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if (v41)
  {
    uint64_t v43 = *(NSObject **)(realityio::logObjects(v41) + 48);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v50 = 0;
      _os_log_error_impl(&dword_23F4EA000, v43, OS_LOG_TYPE_ERROR, "We shouldn't see any double-precision matrices -- they are filtered up front.", v50, 2u);
    }
    return 15;
  }
  long long v44 = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if (v44)
  {
    uint64_t v46 = *(NSObject **)(realityio::logObjects(v44) + 48);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v49 = 0;
      _os_log_error_impl(&dword_23F4EA000, v46, OS_LOG_TYPE_ERROR, "We shouldn't see any double-precision matrices -- they are filtered up front.", v49, 2u);
    }
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
      return 14;
    }
    if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
      return 15;
    }
    pxrInternal__aapl__pxrReserved__::TfType::IsA();
  }
  return 17;
}

uint64_t realityio::conversions::castToSupportedType(realityio::conversions *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(this))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(this);
    pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f();
    pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix2f>((uint64_t)this);
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(this))
  {
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(this);
    MEMORY[0x2455CE490](v6, v3);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((uint64_t)this);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(this);
  if (result)
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(this);
    MEMORY[0x2455CE5D0](v6, v5);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((uint64_t)this);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v2, a1);
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(void)::ti
                      + 2;
  operator new();
}

void sub_23F57C0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v2, a1);
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(void)::ti
                      + 2;
  operator new();
}

void sub_23F57C1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v2, a1);
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(void)::ti
                      + 2;
  operator new();
}

void sub_23F57C2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<char>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<char>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 11) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::pxr_half::half>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C268] + 8) & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  unint64_t v4 = (const std::type_info *)MEMORY[0x263F8C268];

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, v4);
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<long>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<long>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 7) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C290]);
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<long long>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<long long>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<short>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<short>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned short>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned short>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 2) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C250]);
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned char>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned char>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C270] + 8) & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  unint64_t v4 = (const std::type_info *)MEMORY[0x263F8C270];

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, v4);
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned long>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned long>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 8) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C298]);
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned long long>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned long long>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueHolder::Create<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
}

void pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::New<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
}

void sub_23F57CA44(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 47) < 0) {
      operator delete(*(void **)(result + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::TfToken>::Invoke()
{
}

void *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::TfToken>(void *result)
{
  if (result)
  {
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>::New()
{
}

void sub_23F57CBF8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4074BD09C3);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_Hash(float **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  unint64_t v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_Equal(void *a1, void *a2)
{
  return MEMORY[0x270FA40B8](*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_EqualPtr(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA40B8](*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3EA8](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix2fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(void)::ti
                      + 2;
  operator new();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5 = *a2;
  if (*a2 == 0.0) {
    float v5 = 0.0;
  }
  unint64_t v6 = LODWORD(v5);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v6 = ((*(void *)a1 + LODWORD(v5) + (*(void *)a1 + LODWORD(v5)) * (*(void *)a1 + (unint64_t)LODWORD(v5))) >> 1)
  }
       + LODWORD(v5);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&>(a1, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 16));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 36), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 36), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_Hash(float **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix3f const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_Equal(void *a1, void *a2)
{
  return MEMORY[0x270FA40C8](*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_EqualPtr(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA40C8](*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3EB8](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix3fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(void)::ti
                      + 2;
  operator new();
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix3f const&>(uint64_t a1, float *a2)
{
  char v4 = 0;
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10)
{
  float v10 = *a2;
  if (*a2 == 0.0) {
    float v10 = 0.0;
  }
  unint64_t v11 = LODWORD(v10);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v11 = ((*(void *)a1
  }
          + LODWORD(v10)
          + (*(void *)a1 + LODWORD(v10)) * (*(void *)a1 + (unint64_t)LODWORD(v10))) >> 1)
        + LODWORD(v10);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v11;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9)
{
  float v9 = *a2;
  if (*a2 == 0.0) {
    float v9 = 0.0;
  }
  unint64_t v10 = LODWORD(v9);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v10 = ((*(void *)a1 + LODWORD(v9) + (*(void *)a1 + LODWORD(v9))
  }
                                        * (*(void *)a1 + (unint64_t)LODWORD(v9))) >> 1)
        + LODWORD(v9);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v10;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8 = *a2;
  if (*a2 == 0.0) {
    float v8 = 0.0;
  }
  unint64_t v9 = LODWORD(v8);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v9 = ((*(void *)a1 + LODWORD(v8) + (*(void *)a1 + LODWORD(v8)) * (*(void *)a1 + (unint64_t)LODWORD(v8))) >> 1)
  }
       + LODWORD(v8);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v9;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7 = *a2;
  if (*a2 == 0.0) {
    float v7 = 0.0;
  }
  unint64_t v8 = LODWORD(v7);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v8 = ((*(void *)a1 + LODWORD(v7) + (*(void *)a1 + LODWORD(v7)) * (*(void *)a1 + (unint64_t)LODWORD(v7))) >> 1)
  }
       + LODWORD(v7);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6 = *a2;
  if (*a2 == 0.0) {
    float v6 = 0.0;
  }
  unint64_t v7 = LODWORD(v6);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v7 = ((*(void *)a1 + LODWORD(v6) + (*(void *)a1 + LODWORD(v6)) * (*(void *)a1 + (unint64_t)LODWORD(v6))) >> 1)
  }
       + LODWORD(v6);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v7;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 36));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 64), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 64), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_Hash(float **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix4f const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_Equal(void *a1, void *a2)
{
  return MEMORY[0x270FA40E8](*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_EqualPtr(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA40E8](*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3EC8](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(void)::ti
                      + 2;
  operator new();
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix4f const&>(uint64_t a1, float *a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16, float *a17)
{
  float v17 = *a2;
  if (*a2 == 0.0) {
    float v17 = 0.0;
  }
  unint64_t v18 = LODWORD(v17);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v18 = ((*(void *)a1
  }
          + LODWORD(v17)
          + (*(void *)a1 + LODWORD(v17)) * (*(void *)a1 + (unint64_t)LODWORD(v17))) >> 1)
        + LODWORD(v17);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v18;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16)
{
  float v16 = *a2;
  if (*a2 == 0.0) {
    float v16 = 0.0;
  }
  unint64_t v17 = LODWORD(v16);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v17 = ((*(void *)a1
  }
          + LODWORD(v16)
          + (*(void *)a1 + LODWORD(v16)) * (*(void *)a1 + (unint64_t)LODWORD(v16))) >> 1)
        + LODWORD(v16);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v17;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15)
{
  float v15 = *a2;
  if (*a2 == 0.0) {
    float v15 = 0.0;
  }
  unint64_t v16 = LODWORD(v15);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v16 = ((*(void *)a1
  }
          + LODWORD(v15)
          + (*(void *)a1 + LODWORD(v15)) * (*(void *)a1 + (unint64_t)LODWORD(v15))) >> 1)
        + LODWORD(v15);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v16;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14)
{
  float v14 = *a2;
  if (*a2 == 0.0) {
    float v14 = 0.0;
  }
  unint64_t v15 = LODWORD(v14);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v15 = ((*(void *)a1
  }
          + LODWORD(v14)
          + (*(void *)a1 + LODWORD(v14)) * (*(void *)a1 + (unint64_t)LODWORD(v14))) >> 1)
        + LODWORD(v14);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v15;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13)
{
  float v13 = *a2;
  if (*a2 == 0.0) {
    float v13 = 0.0;
  }
  unint64_t v14 = LODWORD(v13);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v14 = ((*(void *)a1
  }
          + LODWORD(v13)
          + (*(void *)a1 + LODWORD(v13)) * (*(void *)a1 + (unint64_t)LODWORD(v13))) >> 1)
        + LODWORD(v13);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v14;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12)
{
  float v12 = *a2;
  if (*a2 == 0.0) {
    float v12 = 0.0;
  }
  unint64_t v13 = LODWORD(v12);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v13 = ((*(void *)a1
  }
          + LODWORD(v12)
          + (*(void *)a1 + LODWORD(v12)) * (*(void *)a1 + (unint64_t)LODWORD(v12))) >> 1)
        + LODWORD(v12);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v13;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11)
{
  float v11 = *a2;
  if (*a2 == 0.0) {
    float v11 = 0.0;
  }
  unint64_t v12 = LODWORD(v11);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v12 = ((*(void *)a1
  }
          + LODWORD(v11)
          + (*(void *)a1 + LODWORD(v11)) * (*(void *)a1 + (unint64_t)LODWORD(v11))) >> 1)
        + LODWORD(v11);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v12;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 64));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::_Tf_RegistryFunctionBar0()
{
  std::string::basic_string[abi:ne180100]<0>(&v1, "RIO_USDMTLX_READER");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName();
  if (v2 < 0) {
    operator delete(v1);
  }
  pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes();
  return pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl();
}

void sub_23F57DAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes()
{
  {
    operator new();
  }
  return pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes(void)::nodes;
}

void sub_23F57DB64(_Unwind_Exception *a1)
{
}

void *realityio::AnimationComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  v9[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, a1);
  uint64_t v8 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v3))
  {
    REAnimationComponentGetComponentType();
    uint64_t v5 = REComponentCreateByClass();
    v9[0] = v5;
    if (v5) {
      RERetain();
    }
    uint64_t v6 = v8;
    if (v8 != v5)
    {
      uint64_t v8 = v5;
      v9[0] = v6;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(v9);
    v9[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
  }
  char v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a2);
  realityio::WrappedRERef<REAsset *>::operator=(&v8, v4);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v8);
}

void sub_23F57DC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

void *realityio::UsdStageDelta::UsdStageDelta(void *a1, void *a2, uint64_t a3)
{
  *a1 = &unk_26F335EC8;
  uint64_t v5 = a1 + 2;
  a1[1] = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100](v5, a3);
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  a1[5] = &unk_26F341FE8;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(a1 + 6), (uint64_t)v7);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v7);
  return a1;
}

void sub_23F57DD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a9);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v11, *(void **)(v10 + 24));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v9);
  _Unwind_Resume(a1);
}

void realityio::UsdStageDelta::setPrimDeltaForPrimPath(realityio::UsdStageDelta *this, const realityio::UsdPrimDelta *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6 = (uint64_t **)((char *)this + 16);
  unint64_t v7 = (realityio::UsdStageDelta *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 16, a3);
  if ((realityio::UsdStageDelta *)((char *)this + 24) == v7)
  {
    uint64_t v10 = a3;
    unint64_t v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(v6, a3, (uint64_t)&std::piecewise_construct, &v10);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v9 + 6), (_DWORD *)a2 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v9 + 52, (_DWORD *)a2 + 3);
    *((unsigned char *)v9 + 56) = *((unsigned char *)a2 + 16);
    if (v9 + 5 != (uint64_t *)a2)
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>((uint64_t **)v9 + 8, *((void **)a2 + 3), (void *)a2 + 4);
      *((_DWORD *)v9 + 32) = *((_DWORD *)a2 + 22);
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(v9 + 12, *((void **)a2 + 9), 0);
    }
  }
  else
  {
    int v8 = (uint64_t **)((char *)v7 + 40);
    realityio::UsdPrimDelta::updateWithPrimDelta(v8, a2);
  }
}

void realityio::UsdStageDelta::updateWithStageDelta(realityio::UsdStageDelta *this, const realityio::UsdStageDelta *a2)
{
  if (*((void *)this + 1) == *((void *)a2 + 1))
  {
    for (CFIndex i = (void *)*((void *)a2 + 8); i; CFIndex i = (void *)*i)
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)this + 48, i + 2, i + 2);
    uint64_t v5 = (char *)*((void *)a2 + 2);
    uint64_t v6 = (char *)a2 + 24;
    if (v5 != v6)
    {
      do
      {
        realityio::UsdStageDelta::setPrimDeltaForPrimPath(this, (const realityio::UsdPrimDelta *)(v5 + 40), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32));
        unint64_t v7 = (char *)*((void *)v5 + 1);
        if (v7)
        {
          do
          {
            int v8 = v7;
            unint64_t v7 = *(char **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            int v8 = (char *)*((void *)v5 + 2);
            BOOL v9 = *(void *)v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v6);
    }
  }
}

const void **realityio::UsdStageDelta::description@<X0>(realityio::UsdStageDelta *this@<X0>, CFStringRef *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  v19[0] = &unk_26F335F08;
  uint64_t v20 = v19;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v6 = (realityio::UsdStageDelta *)*((void *)this + 2);
  if (v6 != (realityio::UsdStageDelta *)((char *)this + 24))
  {
    unint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    do
    {
      int v8 = CFArrayCreateMutable(0, 0, v7);
      if (!v20) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void **__return_ptr))(*v20 + 48))(&value);
      CFArrayAppendValue(v8, value);
      (*(void (**)(void **__return_ptr))(*((void *)v6 + 5) + 16))(&v17);
      CFArrayAppendValue(v8, v17);
      CFStringRef v10 = realityio::joinAsCFStringRef(v8, (const __CFArray *)": ", v9);
      CFRelease(v8);
      CFArrayAppendValue(Mutable, v10);
      CFRelease(v10);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v17);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
      uint64_t v11 = (realityio::UsdStageDelta *)*((void *)v6 + 1);
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          uint64_t v11 = *(realityio::UsdStageDelta **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (realityio::UsdStageDelta *)*((void *)v6 + 2);
          BOOL v13 = *(void *)v12 == (void)v6;
          uint64_t v6 = v12;
        }
        while (!v13);
      }
      uint64_t v6 = v12;
    }
    while (v12 != (realityio::UsdStageDelta *)((char *)this + 24));
  }
  CFStringRef v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  CFTypeRef cf = v14;
  std::__function::__value_func<realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v19);
  *a2 = 0;
  realityio::UsdMetadataDelta::description((realityio::UsdStageDelta *)((char *)this + 40), (CFStringRef *)&value);
  *a2 = CFStringCreateWithFormat(0, 0, @"<UsdStageDelta: %p { stage: %p, metadata: %@, prim deltas: (%lu) [ %@ ] }>", this, (char *)this + 8, value, *((void *)this + 4), cf);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F57E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  BOOL v9 = va_arg(va1, const void *);
  uint64_t v11 = va_arg(va1, void);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v7);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x88uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v8 = *a2;
  uint64_t result = _ZNSt3__14pairIKN32pxrInternal__aapl__pxrReserved__7SdfPathEN9realityio12UsdPrimDeltaEEC1B8ne180100IJRS3_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNSA_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSJ_IJXspT2_EEEE(v6 + 8, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_23F57E350(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_DWORD *_ZNSt3__14pairIKN32pxrInternal__aapl__pxrReserved__7SdfPathEN9realityio12UsdPrimDeltaEEC1B8ne180100IJRS3_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNSA_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSJ_IJXspT2_EEEE(_DWORD *a1, _DWORD **a2)
{
  uint64_t v3 = (uint64_t)*a2;
  char v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, *a2);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(v3 + 4));
  uint64_t v6 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v5);
  v9[0] = 0;
  v9[1] = 0;
  int v8 = v9;
  realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)(a1 + 2), v6, 0, (uint64_t)&v8);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v8, v9[0]);
  return a1;
}

void sub_23F57E3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&a10, a11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v11);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F335F08;
  return result;
}

void std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F335F08;
}

void std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, CFStringRef *a2@<X8>)
{
  uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(this);

  realityio::asWrappedCFStringRef(String, a2);
}

uint64_t std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::__function::__value_func<realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t realityio::AnimationLibraryAssetAction::annotateSubTimelines(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t a5)
{
  REAssetCopyDependencyArray();
  uint64_t Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    uint64_t v9 = Size;
    uint64_t v10 = 0;
    uint64_t v18 = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v19 = *MEMORY[0x263F8C2C8];
    do
    {
      uint64_t Asset = REAssetDynamicArrayGetAsset();
      CFStringRef Type = (const __CFString *)REAssetGetType();
      if (CFEqual(Type, @"Timeline"))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
        int v13 = *(char *)(a2 + 23);
        if (v13 >= 0) {
          uint64_t v14 = a2;
        }
        else {
          uint64_t v14 = *(void *)a2;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v15 = *(void *)(a2 + 8);
        }
        unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"_subTimeline_", 13);
        std::ostream::operator<<();
        uint64_t v24 = Asset;
        if (Asset) {
          RERetain();
        }
        std::stringbuf::str();
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v21, a4);
        realityio::ECSAction::addAsset(a1, &v24, (uint64_t)__p, &v21);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v24);
        std::stringbuf::str();
        realityio::AnimationLibraryAssetAction::annotateSubTimelines(a1, __p, Asset, a4, a5);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        v25[0] = v19;
        *(void *)((char *)v25 + *(void *)(v19 - 24)) = v18;
        v25[1] = MEMORY[0x263F8C318] + 16;
        if (v26 < 0) {
          operator delete((void *)v25[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2455D2B30](&v27);
      }
      ++v10;
    }
    while (v9 != v10);
  }
  return RERelease();
}

void sub_23F57E838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
}

void realityio::ECSAction::addAsset(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 && *(void *)(v4 + 200))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
    MEMORY[0x2455CF7A0](&v15, __p);
    uint64_t v9 = *(void *)a4;
    uint64_t v10 = v15;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v12 = *(uint64_t **)(v11 + 216);
    if (v9 == v10)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/model");
      MEMORY[0x2455CF7A0](&v15, __p);
      realityio::LiveSceneManager::addAsset(v12, a2, a3, &v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      realityio::LiveSceneManager::addAsset(*(uint64_t **)(v11 + 216), a2, a3, a4);
    }
  }
}

void sub_23F57E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void realityio::AnimationLibraryAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t a2@<X0>, realityio *a3@<X1>, uint64_t *a4@<X3>, void *a5@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a6@<X8>)
{
  uint64_t v207 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, a1);
  uint64_t v175 = a2;
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v8 = MEMORY[0x2455CDC30](ServiceLocator);
  v200 = 0;
  v201 = 0;
  v202 = 0;
  uint64_t v197 = 0;
  v198 = 0;
  unint64_t v199 = 0;
  v187.__r_.__value_.__r.__words[0] = 0;
  v195.i64[0] = 0;
  v193.i64[0] = 0;
  v191.i64[0] = 0;
  realityio::getAnimInputControlsFromInputs(a4, a5, (double *)&v187, &v195, &v193, (double *)v191.i64);
  double v9 = *(double *)v195.i64;
  double v10 = *(double *)v191.i64;
  double v11 = *(double *)v193.i64;
  int64x2_t v195 = 0uLL;
  unint64_t v196 = 0;
  int64x2_t v193 = 0uLL;
  unint64_t v194 = 0;
  int64x2_t v191 = 0uLL;
  unint64_t v192 = 0;
  realityio::entityPath(a3, (uint64_t *)&v204);
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)Name, *(void *)(Name + 8));
  }
  else
  {
    long long v13 = *(_OWORD *)Name;
    v190.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
    *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v13;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v179 = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
  uint64_t v14 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v15 = 0;
    std::string::size_type v181 = 0;
    std::string::size_type v178 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v204, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v15));
      std::string::size_type size = v204.__r_.__value_.__l.__size_;
      if (v204.__r_.__value_.__l.__size_)
      {
        if (strcmp((const char *)(*(void *)(*(void *)(v204.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIN9realityio12WrappedRERefIP7REAssetEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
        {
          if ((size & 4) == 0
          {
            goto LABEL_66;
          }
          std::string::size_type size = v204.__r_.__value_.__l.__size_;
        }
        if ((size & 4) != 0) {
          unint64_t v17 = (void *)(*(uint64_t (**)(std::string *))((size & 0xFFFFFFFFFFFFFFF8) + 168))(&v204);
        }
        else {
          unint64_t v17 = (void *)v204.__r_.__value_.__r.__words[0];
        }
        if (*v17)
        {
          uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v14 + 8 * v15);
          uint64_t v19 = (std::string::size_type *)v17[4];
          uint64_t v20 = &v19[*v17];
          v180 = (_DWORD *)((char *)v18 + 4);
          do
          {
            RETimelineDefinitionCreateFromTimeline();
            TimelineCFStringRef Type = RETimelineDefinitionGetTimelineType();
            RERelease();
            std::string::size_type v22 = *v19;
            char v23 = v201;
            if (v201 >= v202)
            {
              uint64_t v25 = (v201 - v200) >> 3;
              if ((unint64_t)(v25 + 1) >> 61) {
                std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v26 = (v202 - v200) >> 2;
              if (v26 <= v25 + 1) {
                unint64_t v26 = v25 + 1;
              }
              if ((unint64_t)(v202 - v200) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              if (v27) {
                uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v202, v27);
              }
              else {
                uint64_t v28 = 0;
              }
              long long v29 = (std::string::size_type *)&v28[8 * v25];
              *long long v29 = v22;
              uint64_t v24 = (char *)(v29 + 1);
              unint64_t v31 = v200;
              long long v30 = v201;
              if (v201 != v200)
              {
                do
                {
                  std::string::size_type v32 = *((void *)v30 - 1);
                  v30 -= 8;
                  *--long long v29 = v32;
                }
                while (v30 != v31);
                long long v30 = v200;
              }
              v200 = (char *)v29;
              v201 = v24;
              v202 = &v28[8 * v27];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(void *)v201 = v22;
              uint64_t v24 = v23 + 8;
            }
            v201 = v24;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v187, v18);
            uint64_t v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v187);
            unint64_t v34 = v198;
            if ((unint64_t)v198 >= v199)
            {
              unint64_t v36 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v197, (long long *)v33);
            }
            else
            {
              if (*(char *)(v33 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v198, *(const std::string::value_type **)v33, *(void *)(v33 + 8));
              }
              else
              {
                long long v35 = *(_OWORD *)v33;
                v198->__r_.__value_.__r.__words[2] = *(void *)(v33 + 16);
                *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
              }
              unint64_t v36 = v34 + 1;
            }
            v198 = v36;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
            NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v18);
            unint64_t v38 = atomic_load(&realityio::tokens::EcsTokens);
            if (!v38) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
            }
            if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v38 + 424) & 0xFFFFFFFFFFFFFFF8))
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v187, a3);
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, v18);
              std::string::size_type v42 = v187.__r_.__value_.__r.__words[0];
              uint64_t v43 = __p[0];
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
              std::string::size_type v44 = *v19;
              std::string::size_type v45 = v181;
              if ((void *)v42 == v43) {
                std::string::size_type v45 = *v19;
              }
              std::string::size_type v181 = v45;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v187, v18);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v187.__r_.__value_.__r.__words + 1, v180);
              v187.__r_.__value_.__l.__size_ = v44;
              uint64_t v46 = v193.i64[1];
              if (v193.i64[1] >= v194)
              {
                uint64_t v47 = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>(&v193, (uint64_t)&v187);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v193.i64[1], &v187);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v46 + 4), (_DWORD *)v187.__r_.__value_.__r.__words + 1);
                *(void *)(v46 + 8) = v187.__r_.__value_.__l.__size_;
                uint64_t v47 = (char *)(v46 + 16);
              }
              v193.i64[1] = (uint64_t)v47;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            }
            else
            {
              long long v39 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v18);
              unint64_t v40 = atomic_load(&realityio::tokens::EcsTokens);
              if (!v40) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
              }
              if ((*v39 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v40 + 360) & 0xFFFFFFFFFFFFFFF8))
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v18);
                if (!atomic_load(&realityio::tokens::EcsTokens)) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
                }
                goto LABEL_61;
              }
              if (TimelineType == 32)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v187, a3);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, v18);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
                std::string::size_type v48 = *v19;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v187, v18);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v187.__r_.__value_.__r.__words + 1, v180);
                v187.__r_.__value_.__l.__size_ = v48;
                uint64_t v49 = v191.i64[1];
                if (v191.i64[1] >= v192)
                {
                  long long v50 = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>(&v191, (uint64_t)&v187);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v191.i64[1], &v187);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v49 + 4), (_DWORD *)v187.__r_.__value_.__r.__words + 1);
                  *(void *)(v49 + 8) = v187.__r_.__value_.__l.__size_;
                  long long v50 = (char *)(v49 + 16);
                }
                v191.i64[1] = (uint64_t)v50;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v187, a3);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, v18);
                std::string::size_type v51 = v187.__r_.__value_.__r.__words[0];
                uint64_t v52 = __p[0];
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
                std::string::size_type v53 = *v19;
                std::string::size_type v54 = v178;
                if ((void *)v51 == v52) {
                  std::string::size_type v54 = *v19;
                }
                std::string::size_type v178 = v54;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v187, v18);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v187.__r_.__value_.__r.__words + 1, v180);
                v187.__r_.__value_.__l.__size_ = v53;
                uint64_t v55 = v195.i64[1];
                if (v195.i64[1] >= v196)
                {
                  uint64_t v56 = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>(&v195, (uint64_t)&v187);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v195.i64[1], &v187);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v55 + 4), (_DWORD *)v187.__r_.__value_.__r.__words + 1);
                  *(void *)(v55 + 8) = v187.__r_.__value_.__l.__size_;
                  uint64_t v56 = (char *)(v55 + 16);
                }
                v195.i64[1] = (uint64_t)v56;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
LABEL_61:
            ++v19;
          }
          while (v19 != v20);
        }
      }
LABEL_66:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v204);
      ++v15;
      uint64_t v14 = *a4;
      if (v15 >= (a4[1] - *a4) >> 3) {
        goto LABEL_70;
      }
    }
  }
  std::string::size_type v181 = 0;
  std::string::size_type v178 = 0;
LABEL_70:
  realityio::entityPath(a3, (uint64_t *)&v187);
  uint64_t String = (long long *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v187);
  uint64_t v58 = v8;
  realityio::TimelineGroupFactory::TimelineGroupFactory(&v204, String);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
  realityio::entityPath(a3, (uint64_t *)__p);
  v59 = (long long *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
  realityio::TimelineGroupFactory::TimelineGroupFactory(&v187, v59);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  double v60 = v9 / v10;
  double v61 = v11 / v10;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  uint64_t v63 = v193.i64[1];
  long long v62 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v193.i64[0];
  if (v193.i64[1] == v193.i64[0])
  {
    uint64_t v78 = v195.i64[1];
    v77 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v195.i64[0];
    if (v195.i64[1] == v195.i64[0])
    {
      if (v191.i64[1] == v191.i64[0]) {
        goto LABEL_102;
      }
      goto LABEL_92;
    }
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v203, v62);
      uint64_t v64 = __p[0];
      std::string::size_type v65 = v203.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      std::string::size_type v66 = *((void *)v62 + 1);
      if (v64 == (void *)v65)
      {
        realityio::entityPath(a3, (uint64_t *)&v203);
        uint64_t v58 = v179;
        uint64_t Text = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
        std::string::basic_string[abi:ne180100]<0>(__p, Text);
        float v68 = v60;
        float v69 = v61;
        realityio::TimelineGroupFactory::addTimeline((char *)&v204, v66, (long long *)__p, "entitySceneClip", v68, v69);
        if (SHIBYTE(v186) < 0) {
          operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
        std::string::size_type v70 = *((void *)v62 + 1);
        realityio::entityPath(a3, (uint64_t *)&v203);
        uint64_t v71 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
        std::string::basic_string[abi:ne180100]<0>(__p, v71);
        float v72 = v60;
        float v73 = v61;
        realityio::TimelineGroupFactory::addTimeline((char *)&v187, v70, (long long *)__p, "defaultSceneClip", v72, v73);
        if (SHIBYTE(v186) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        realityio::entityPath(v62, (uint64_t *)&v203);
        uint64_t v58 = v179;
        uint64_t v74 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
        std::string::basic_string[abi:ne180100]<0>(__p, v74);
        float v75 = v60;
        float v76 = v61;
        realityio::TimelineGroupFactory::addTimeline((char *)&v187, v66, (long long *)__p, "childSceneClip", v75, v76);
        if (SHIBYTE(v186) < 0) {
          operator delete(__p[0]);
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
      long long v62 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v62 + 16);
    }
    while (v62 != (pxrInternal__aapl__pxrReserved__::SdfPath *)v63);
    uint64_t v78 = v195.i64[1];
    v77 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v195.i64[0];
  }
  for (;
        v77 != (pxrInternal__aapl__pxrReserved__::SdfPath *)v78;
        v77 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v77 + 16))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a3);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v203, v77);
    v79 = __p[0];
    std::string::size_type v80 = v203.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    std::string::size_type v81 = *((void *)v77 + 1);
    if (v79 == (void *)v80)
    {
      realityio::entityPath(a3, (uint64_t *)&v203);
      uint64_t v58 = v179;
      v82 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
      std::string::basic_string[abi:ne180100]<0>(__p, v82);
      float v83 = v60;
      float v84 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v204, v81, (long long *)__p, "entitySceneClip", v83, v84);
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
      std::string::size_type v85 = *((void *)v77 + 1);
      realityio::entityPath(a3, (uint64_t *)&v203);
      uint64_t v86 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
      std::string::basic_string[abi:ne180100]<0>(__p, v86);
      float v87 = v60;
      float v88 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v187, v85, (long long *)__p, "defaultSceneClip", v87, v88);
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      realityio::entityPath(v77, (uint64_t *)&v203);
      uint64_t v58 = v179;
      v89 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
      std::string::basic_string[abi:ne180100]<0>(__p, v89);
      float v90 = v60;
      float v91 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v187, v81, (long long *)__p, "childSceneClip", v90, v91);
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
  }
LABEL_92:
  uint64_t v93 = v191.i64[1];
  for (CFIndex i = (pxrInternal__aapl__pxrReserved__::SdfPath *)v191.i64[0];
        i != (pxrInternal__aapl__pxrReserved__::SdfPath *)v93;
        CFIndex i = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 16))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a3);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v203, i);
    v94 = __p[0];
    std::string::size_type v95 = v203.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    std::string::size_type v96 = *((void *)i + 1);
    if (v94 == (void *)v95)
    {
      realityio::entityPath(a3, (uint64_t *)&v203);
      uint64_t v58 = v179;
      v97 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
      std::string::basic_string[abi:ne180100]<0>(__p, v97);
      float v98 = v60;
      float v99 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v204, v96, (long long *)__p, "entitySceneClip", v98, v99);
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
      std::string::size_type v100 = *((void *)i + 1);
      realityio::entityPath(a3, (uint64_t *)&v203);
      v101 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
      std::string::basic_string[abi:ne180100]<0>(__p, v101);
      float v102 = v60;
      float v103 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v187, v100, (long long *)__p, "defaultSceneClip", v102, v103);
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      realityio::entityPath(i, (uint64_t *)&v203);
      uint64_t v58 = v179;
      v104 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v203);
      std::string::basic_string[abi:ne180100]<0>(__p, v104);
      float v105 = v60;
      float v106 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v187, v96, (long long *)__p, "childSceneClip", v105, v106);
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
  }
LABEL_102:
  if (v178 | v181 || v206 != v205 || v189 != v188)
  {
    REAnimationLibraryDefinitionCreate();
    if (v178 | v181 || v206 != v205)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      REAnimationSceneEntityDefinitionCreate();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      if (v178)
      {
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset();
      }
      if (v181)
      {
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationSceneEntityDefinitionSetHasTransformAnimations();
      }
      if (v191.i64[1] != v191.i64[0])
      {
        for (unint64_t j = 0; j < (v191.i64[1] - v191.i64[0]) >> 4; ++j)
        {
          REAnimationLibraryDefinitionAddEntryAsset();
          v108 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v191.i64[0] + 16 * j));
          REAnimationLibraryDefinitionAddKeyedEntryIndex();
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v109 = HIBYTE(v186);
          char v110 = HIBYTE(v186);
          if (v186 >= 0) {
            v111 = (void *)HIBYTE(v186);
          }
          else {
            v111 = __p[1];
          }
          v112 = (void *)*((unsigned __int8 *)v108 + 23);
          int v113 = (char)v112;
          if ((char)v112 < 0) {
            v112 = (void *)v108[1];
          }
          if (v111 == v112)
          {
            if (v113 < 0) {
              v108 = (void *)*v108;
            }
            if (SHIBYTE(v186) < 0)
            {
              v116 = __p[0];
              if (memcmp(__p[0], v108, (size_t)__p[1])) {
                goto LABEL_131;
              }
LABEL_128:
              REAnimationLibraryDefinitionSetDefaultEntryKey();
              char v110 = HIBYTE(v186);
              goto LABEL_129;
            }
            if (!HIBYTE(v186)) {
              goto LABEL_128;
            }
            v114 = __p;
            v115 = (unsigned __int8 *)v108;
            while (*(unsigned __int8 *)v114 == *v115)
            {
              v114 = (void **)((char *)v114 + 1);
              ++v115;
              if (!--v109) {
                goto LABEL_128;
              }
            }
          }
LABEL_129:
          if (v110 < 0)
          {
            v116 = __p[0];
LABEL_131:
            operator delete(v116);
          }
        }
      }
      Timelineuint64_t Asset = realityio::TimelineGroupFactory::createTimelineAsset((float *)&v204, v58, "default scene animation");
      uint64_t v118 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
      REAnimationLibraryDefinitionAddEntryAsset();
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v119 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v119 = v190.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v184, v119 + 1);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v120 = &v184;
      }
      else {
        v120 = (std::string *)v184.__r_.__value_.__r.__words[0];
      }
      if (v119)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v121 = &v190;
        }
        else {
          v121 = (std::string *)v190.__r_.__value_.__r.__words[0];
        }
        memmove(v120, v121, v119);
      }
      *(_WORD *)((char *)&v120->__r_.__value_.__l.__data_ + v119) = 46;
      v122 = std::string::append(&v184, "timelineGroup.");
      long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      v203.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      v124 = std::string::append(&v203, "default scene animation");
      long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      int64_t v186 = v124->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v125;
      v124->__r_.__value_.__l.__size_ = 0;
      v124->__r_.__value_.__r.__words[2] = 0;
      v124->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v203.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v126 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v126 = v190.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v183, v126 + 1);
      if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v127 = &v183;
      }
      else {
        v127 = (std::string *)v183.__r_.__value_.__r.__words[0];
      }
      if (v126)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v128 = &v190;
        }
        else {
          v128 = (std::string *)v190.__r_.__value_.__r.__words[0];
        }
        memmove(v127, v128, v126);
      }
      *(_WORD *)((char *)&v127->__r_.__value_.__l.__data_ + v126) = 46;
      v129 = std::string::append(&v183, "entityAnimationScene.");
      long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
      v184.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v130;
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      v131 = std::string::append(&v184, "default scene animation");
      long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
      v203.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v183.__r_.__value_.__l.__data_);
      }
      v184.__r_.__value_.__r.__words[0] = TimelineAsset;
      if (TimelineAsset) {
        RERetain();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v183, a3);
      realityio::ECSAction::addAsset(v175, (uint64_t *)&v184, (uint64_t)__p, &v183);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v183);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v184);
      v184.__r_.__value_.__r.__words[0] = v118;
      if (v118) {
        RERetain();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v183, a3);
      realityio::ECSAction::addAsset(v175, (uint64_t *)&v184, (uint64_t)&v203, &v183);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v183);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v184);
      RERelease();
      RERelease();
      RERelease();
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v203.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
    }
    if (v189 != v188)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      REAnimationSceneEntityDefinitionCreate();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      if (v178) {
        REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset();
      }
      if (v181) {
        REAnimationSceneEntityDefinitionSetHasTransformAnimations();
      }
      uint64_t v133 = realityio::TimelineGroupFactory::createTimelineAsset((float *)&v187, v58, "default subtree animation");
      std::string::size_type v134 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
      std::string::basic_string[abi:ne180100]<0>(__p, "default subtree animation");
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v203, a3);
      realityio::AnimationLibraryAssetAction::annotateSubTimelines(v175, (uint64_t)__p, v134, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v203, v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
      REAnimationLibraryDefinitionAddEntryAsset();
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v135 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v135 = v190.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v184, v135 + 1);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v136 = &v184;
      }
      else {
        v136 = (std::string *)v184.__r_.__value_.__r.__words[0];
      }
      if (v135)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v137 = &v190;
        }
        else {
          v137 = (std::string *)v190.__r_.__value_.__r.__words[0];
        }
        memmove(v136, v137, v135);
      }
      *(_WORD *)((char *)&v136->__r_.__value_.__l.__data_ + v135) = 46;
      v138 = std::string::append(&v184, "timelineGroup.");
      long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
      v203.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v139;
      v138->__r_.__value_.__l.__size_ = 0;
      v138->__r_.__value_.__r.__words[2] = 0;
      v138->__r_.__value_.__r.__words[0] = 0;
      v140 = std::string::append(&v203, "default subtree animation");
      long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
      int64_t v186 = v140->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v141;
      v140->__r_.__value_.__l.__size_ = 0;
      v140->__r_.__value_.__r.__words[2] = 0;
      v140->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v203.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v142 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v142 = v190.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v183, v142 + 1);
      if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v143 = &v183;
      }
      else {
        v143 = (std::string *)v183.__r_.__value_.__r.__words[0];
      }
      if (v142)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v144 = &v190;
        }
        else {
          v144 = (std::string *)v190.__r_.__value_.__r.__words[0];
        }
        memmove(v143, v144, v142);
      }
      *(_WORD *)((char *)&v143->__r_.__value_.__l.__data_ + v142) = 46;
      v145 = std::string::append(&v183, "subtreeAnimationScene.");
      long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
      v184.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v146;
      v145->__r_.__value_.__l.__size_ = 0;
      v145->__r_.__value_.__r.__words[2] = 0;
      v145->__r_.__value_.__r.__words[0] = 0;
      v147 = std::string::append(&v184, "default subtree animation");
      long long v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
      v203.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v148;
      v147->__r_.__value_.__l.__size_ = 0;
      v147->__r_.__value_.__r.__words[2] = 0;
      v147->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v183.__r_.__value_.__l.__data_);
      }
      v184.__r_.__value_.__r.__words[0] = v133;
      if (v133) {
        RERetain();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v183, a3);
      realityio::ECSAction::addAsset(v175, (uint64_t *)&v184, (uint64_t)__p, &v183);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v183);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v184);
      v184.__r_.__value_.__r.__words[0] = v134;
      if (v134) {
        RERetain();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v183, a3);
      realityio::ECSAction::addAsset(v175, (uint64_t *)&v184, (uint64_t)&v203, &v183);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v183);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v184);
      RERelease();
      RERelease();
      RERelease();
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v203.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v203, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
    MEMORY[0x2455CF7A0](&v184, __p);
    std::string::size_type v149 = v203.__r_.__value_.__r.__words[0];
    std::string::size_type v150 = v184.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v184);
    if (SHIBYTE(v186) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
    if (v149 == v150 && v189 != v188)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      REAnimationSceneEntityDefinitionCreate();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      uint64_t v151 = realityio::TimelineGroupFactory::createTimelineAsset((float *)&v187, v58, "global scene animation");
      std::string::size_type v152 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
      std::string::basic_string[abi:ne180100]<0>(__p, "global scene animation");
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v203, a3);
      realityio::AnimationLibraryAssetAction::annotateSubTimelines(v175, (uint64_t)__p, v152, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v203, v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
      REAnimationLibraryDefinitionInsertEntryAsset();
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v153 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v153 = v190.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v184, v153 + 1);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v154 = &v184;
      }
      else {
        v154 = (std::string *)v184.__r_.__value_.__r.__words[0];
      }
      if (v153)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v155 = &v190;
        }
        else {
          v155 = (std::string *)v190.__r_.__value_.__r.__words[0];
        }
        memmove(v154, v155, v153);
      }
      *(_WORD *)((char *)&v154->__r_.__value_.__l.__data_ + v153) = 46;
      v156 = std::string::append(&v184, "timelineGroup.");
      long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
      v203.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v157;
      v156->__r_.__value_.__l.__size_ = 0;
      v156->__r_.__value_.__r.__words[2] = 0;
      v156->__r_.__value_.__r.__words[0] = 0;
      v158 = std::string::append(&v203, "global scene animation");
      long long v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
      int64_t v186 = v158->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v159;
      v158->__r_.__value_.__l.__size_ = 0;
      v158->__r_.__value_.__r.__words[2] = 0;
      v158->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v203.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v160 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v160 = v190.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v183, v160 + 1);
      if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v161 = &v183;
      }
      else {
        v161 = (std::string *)v183.__r_.__value_.__r.__words[0];
      }
      if (v160)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v162 = &v190;
        }
        else {
          v162 = (std::string *)v190.__r_.__value_.__r.__words[0];
        }
        memmove(v161, v162, v160);
      }
      *(_WORD *)((char *)&v161->__r_.__value_.__l.__data_ + v160) = 46;
      v163 = std::string::append(&v183, "globalAnimationScene.");
      long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
      v184.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v164;
      v163->__r_.__value_.__l.__size_ = 0;
      v163->__r_.__value_.__r.__words[2] = 0;
      v163->__r_.__value_.__r.__words[0] = 0;
      v165 = std::string::append(&v184, "global scene animation");
      long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
      v203.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v166;
      v165->__r_.__value_.__l.__size_ = 0;
      v165->__r_.__value_.__r.__words[2] = 0;
      v165->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v183.__r_.__value_.__l.__data_);
      }
      v184.__r_.__value_.__r.__words[0] = v151;
      if (v151) {
        RERetain();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v183, a3);
      realityio::ECSAction::addAsset(v175, (uint64_t *)&v184, (uint64_t)__p, &v183);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v183);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v184);
      v184.__r_.__value_.__r.__words[0] = v152;
      if (v152) {
        RERetain();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v183, a3);
      realityio::ECSAction::addAsset(v175, (uint64_t *)&v184, (uint64_t)&v203, &v183);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v183);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v184);
      RERelease();
      RERelease();
      RERelease();
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v203.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v186) < 0) {
        operator delete(__p[0]);
      }
    }
    AnimationLibraryuint64_t Asset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
    RERelease();
    v184.__r_.__value_.__r.__words[0] = AnimationLibraryAsset;
    if (AnimationLibraryAsset) {
      RERetain();
    }
    realityio::ECSAction::queueForDeferredAssetLoad(v175, (uint64_t *)&v184);
    realityio::entityPath(a3, (uint64_t *)&v183);
    uint64_t v168 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v183);
    v169 = (char *)v168;
    if (*(char *)(v168 + 23) >= 0) {
      size_t v170 = *(unsigned __int8 *)(v168 + 23);
    }
    else {
      size_t v170 = *(void *)(v168 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v203, v170 + 1);
    if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v171 = &v203;
    }
    else {
      v171 = (std::string *)v203.__r_.__value_.__r.__words[0];
    }
    if (v170)
    {
      if (v169[23] >= 0) {
        v172 = v169;
      }
      else {
        v172 = *(char **)v169;
      }
      memmove(v171, v172, v170);
    }
    *(_WORD *)((char *)&v171->__r_.__value_.__l.__data_ + v170) = 46;
    v173 = std::string::append(&v203, "animationLibrary");
    long long v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
    int64_t v186 = v173->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v174;
    v173->__r_.__value_.__l.__size_ = 0;
    v173->__r_.__value_.__r.__words[2] = 0;
    v173->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v203.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v183);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v203, a3);
    realityio::ECSAction::addAsset(v175, (uint64_t *)&v184, (uint64_t)__p, &v203);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
    RERelease();
    v203.__r_.__value_.__l.__size_ = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy();
  }
  __p[0] = &v188;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
  v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
  v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
  v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
}

void sub_23F580470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::VtValue *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v59 - 200));
  if (a48 < 0) {
    operator delete(__p);
  }
  *(void *)(v59 - 200) = &a50;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 200));
  *(void *)(v59 - 200) = &a53;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 200));
  *(void *)(v59 - 200) = &a56;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 200));
  *(void *)(v59 - 200) = &a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 200));
  double v61 = *(void **)(v59 - 256);
  if (v61)
  {
    *(void *)(v59 - 248) = v61;
    operator delete(v61);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t realityio::ECSAction::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 152);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v4();
  }
  else
  {
    uint64_t v6 = *a2;
    return MEMORY[0x270F1C450](v6);
  }
}

std::string *realityio::TimelineGroupFactory::TimelineGroupFactory(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0xFF7FFFFF7F7FFFFFLL;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = -8388609;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  return this;
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

char *std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1->i64[1] - a1->i64[0]) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v21 = a1 + 1;
  if (v7)
  {
    if (v7 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(16 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  double v9 = &v8[16 * v2];
  double v10 = &v8[16 * v7];
  uint64_t v20 = v10;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9 + 1, (_DWORD *)(a2 + 4));
  *((void *)v9 + 1) = *(void *)(a2 + 8);
  double v11 = v9 + 16;
  v19.i64[1] = (uint64_t)(v9 + 16);
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9[v14 - 16], (_DWORD *)(v12 + v14 - 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9[v14 - 12], (_DWORD *)(v12 + v14 - 12));
      *(void *)&v9[v14 - 8] = *(void *)(v12 + v14 - 8);
      v14 -= 16;
    }
    while (v12 + v14 != v13);
    int64x2_t v15 = *a1;
    v9 += v14;
    double v11 = (char *)v19.i64[1];
    double v10 = v20;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v19 = v15;
  unint64_t v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  uint64_t v20 = v16;
  uint64_t v18 = v15.i64[0];
  std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::~__split_buffer((uint64_t)&v18);
  return v11;
}

uint64_t std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::destroy[abi:ne180100](i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_Equal(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_EqualPtr(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_StreamOut(void **a1, uint64_t a2)
{
  return MEMORY[0x270F98788](a2, **a1 != 0);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP7REAssetEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)v2);
    MEMORY[0x2455D2BD0](v3, 0x1020C403A5D3213);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 8));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F580F34(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy()
{
}

void sub_23F580FC4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void realityio::SyncUpdateEngineQueueManager::yieldEngineQueueExecution(realityio::SyncUpdateEngineQueueManager *this)
{
  dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 1));
  void *v2 = this;
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_DWORD *)this + 34))
  {
    int v11 = realityio::internal::assertHandler(1u, "mState == kIsWaitingForEngineQueueYield", "yieldEngineQueueExecution", 28, 1, v3, v4, v5, (uint64_t)"called yieldEngineQueueExecution twice", v14);
    if (v11 == 1)
    {
      raise(5);
    }
    else if (v11 == 2)
    {
      abort();
    }
  }
  *((_DWORD *)this + 34) = 1;
  std::mutex::unlock((std::mutex *)((char *)this + 24));
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL);
  do
  {
    realityio::SyncUpdateEngineQueueManager::popEngineQueueTask(this, (uint64_t)&v15);
    uint64_t v6 = v15;
    if (v15)
    {
      uint64_t v7 = *(void *)(v15 + 24);
      if (!v7) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v15 + 32));
      dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  while (v6);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_DWORD *)this + 34) != 3)
  {
    int v12 = realityio::internal::assertHandler(1u, "mState == kFinished", "yieldEngineQueueExecution", 47, 0, v8, v9, v10, v13, v14);
    if (v12 == 1)
    {
      raise(5);
    }
    else if (v12 == 2)
    {
      abort();
    }
  }
  std::mutex::unlock((std::mutex *)((char *)this + 24));
  void *v2 = 0;
}

void sub_23F58118C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void realityio::SyncUpdateEngineQueueManager::popEngineQueueTask(realityio::SyncUpdateEngineQueueManager *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((void *)this + 16))
  {
    uint64_t v5 = *(void *)(*((void *)this + 12) + ((*((void *)this + 15) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * *((void *)this + 15);
    *(_OWORD *)a2 = *(_OWORD *)v5;
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::pop_front((void *)this + 11);
  }
  else
  {
    if (*((_DWORD *)this + 34) == 2) {
      *((_DWORD *)this + 34) = 3;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }

  std::mutex::unlock(v4);
}

void sub_23F581264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (*((void *)&a9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&a9 + 1));
  }
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

intptr_t realityio::SyncUpdateEngineQueueManager::stopYieldEngineQueueExecution(realityio::SyncUpdateEngineQueueManager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_DWORD *)this + 34) != 1)
  {
    int v8 = realityio::internal::assertHandler(1u, "mState == kOwnsEngineQueue", "stopYieldEngineQueueExecution", 57, 1, v3, v4, v5, (uint64_t)"called stopYieldEngineQueueExecution() twice", v9);
    if (v8 == 1)
    {
      raise(5);
    }
    else if (v8 == 2)
    {
      abort();
    }
  }
  *((_DWORD *)this + 34) = 2;
  std::mutex::unlock(v2);
  uint64_t v6 = *((void *)this + 2);

  return dispatch_semaphore_signal(v6);
}

void sub_23F58133C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::SyncUpdateEngineQueueManager::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_DWORD *)(a1 + 136) >= 2u)
  {
    int v125 = realityio::internal::assertHandler(1u, "mState == kOwnsEngineQueue || mState == kIsWaitingForEngineQueueYield", "performBlockSyncOnEngineQueue", 69, 1, v5, v6, v7, (uint64_t)"tried to submit blocks to the SyncUpdateEngineQueueManager after stopYieldEngineQueueExecution() was called.", v127);
    if (v125 == 1)
    {
      raise(5);
    }
    else if (v125 == 2)
    {
      goto LABEL_107;
    }
  }
  if (v11)
  {
    if (v11 == a1) {
      goto LABEL_4;
    }
    int v126 = realityio::internal::assertHandler(1u, "engineQueueManagerOwningThisThread == this", "performBlockSyncOnEngineQueue", 74, 1, v8, v9, v10, (uint64_t)"cannot use multiple EngineQueueManagers simultaneously", v127);
    if (v126 == 1)
    {
      raise(5);
      goto LABEL_4;
    }
    if (v126 != 2)
    {
LABEL_4:
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
      std::mutex::unlock(v4);
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v13 = *(void (**)(void))(*(void *)v12 + 48);
      v13();
      return;
    }
LABEL_107:
    abort();
  }
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  uint64_t v14 = (char *)operator new(0x40uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_26F336148;
  uint64_t v15 = v14 + 24;
  *((void *)v14 + 6) = 0;
  *((void *)v14 + 7) = 0;
  std::function<void ()(void)>::operator=((void *)v14 + 3, a2);
  dispatch_semaphore_t v16 = dispatch_semaphore_create(0);
  unint64_t v17 = (void *)*((void *)v14 + 7);
  *((void *)v14 + 7) = v16;

  uint64_t v18 = *(char **)(a1 + 104);
  int64x2_t v19 = *(char **)(a1 + 96);
  uint64_t v20 = v18 - v19;
  if (v18 == v19) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = 32 * (v18 - v19) - 1;
  }
  unint64_t v23 = *(void *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 128);
  unint64_t v24 = v22 + v23;
  if (v21 == v22 + v23)
  {
    if (v23 < 0x100)
    {
      uint64_t v39 = v20 >> 3;
      unint64_t v40 = *(char **)(a1 + 112);
      uint64_t v41 = *(char **)(a1 + 88);
      if (v20 >> 3 >= (unint64_t)((v40 - v41) >> 3))
      {
        if (v40 == v41) {
          unint64_t v44 = 1;
        }
        else {
          unint64_t v44 = (v40 - v41) >> 2;
        }
        std::string::size_type v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v44);
        uint64_t v47 = v46;
        std::string::size_type v48 = operator new(0x1000uLL);
        uint64_t v49 = &v45[8 * v39];
        uint64_t v50 = v47;
        std::string::size_type v51 = &v45[8 * v47];
        if (v39 == v50)
        {
          uint64_t v52 = 8 * v39;
          if (v20 < 1)
          {
            float v68 = v48;
            uint64_t v69 = v52 >> 2;
            if (v18 == v19) {
              unint64_t v70 = 1;
            }
            else {
              unint64_t v70 = v69;
            }
            uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v70);
            uint64_t v49 = &v71[8 * (v70 >> 2)];
            std::string::size_type v51 = &v71[8 * v72];
            if (v45) {
              operator delete(v45);
            }
            std::string::size_type v45 = v71;
            std::string::size_type v48 = v68;
          }
          else
          {
            uint64_t v53 = v52 >> 3;
            if (v53 >= -1) {
              unint64_t v54 = v53 + 1;
            }
            else {
              unint64_t v54 = v53 + 2;
            }
            v49 -= 8 * (v54 >> 1);
          }
        }
        *(void *)uint64_t v49 = v48;
        float v73 = v49 + 8;
        for (uint64_t i = *(void *)(a1 + 104); i != *(void *)(a1 + 96); i -= 8)
        {
          if (v49 == v45)
          {
            if (v73 >= v51)
            {
              if (v51 == v45) {
                unint64_t v79 = 1;
              }
              else {
                unint64_t v79 = (v51 - v45) >> 2;
              }
              std::string::size_type v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v79);
              v82 = v80;
              uint64_t v49 = &v80[(2 * v79 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v83 = v73 - v45;
              BOOL v55 = v73 == v45;
              float v73 = v49;
              if (!v55)
              {
                float v73 = &v49[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                std::string::size_type v85 = v49;
                uint64_t v86 = (uint64_t *)v45;
                do
                {
                  uint64_t v87 = *v86++;
                  *(void *)std::string::size_type v85 = v87;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              std::string::size_type v51 = &v80[8 * v81];
              if (v45) {
                operator delete(v45);
              }
              std::string::size_type v45 = v82;
            }
            else
            {
              uint64_t v75 = (v51 - v73) >> 3;
              if (v75 >= -1) {
                uint64_t v76 = v75 + 1;
              }
              else {
                uint64_t v76 = v75 + 2;
              }
              uint64_t v77 = v76 >> 1;
              uint64_t v49 = &v45[8 * (v76 >> 1)];
              uint64_t v78 = v45;
              if (v73 != v45)
              {
                memmove(v49, v45, v73 - v45);
                uint64_t v78 = v73;
              }
              float v73 = &v78[8 * v77];
            }
          }
          uint64_t v88 = *(void *)(i - 8);
          *((void *)v49 - 1) = v88;
          v49 -= 8;
        }
        v89 = *(void **)(a1 + 88);
        *(void *)(a1 + 88) = v45;
        *(void *)(a1 + 96) = v49;
        *(void *)(a1 + 104) = v73;
        *(void *)(a1 + 112) = v51;
        uint64_t v15 = v14 + 24;
        if (v89) {
          operator delete(v89);
        }
        goto LABEL_73;
      }
      std::string::size_type v42 = operator new(0x1000uLL);
      uint64_t v43 = v42;
      if (v40 != v18)
      {
        *(void *)uint64_t v18 = v42;
        *(void *)(a1 + 104) += 8;
        uint64_t v15 = v14 + 24;
LABEL_73:
        int64x2_t v19 = *(char **)(a1 + 96);
        uint64_t v22 = *(void *)(a1 + 128);
        unint64_t v24 = v22 + *(void *)(a1 + 120);
        goto LABEL_74;
      }
      if (v19 == v41)
      {
        if (v18 == v19) {
          unint64_t v91 = 1;
        }
        else {
          unint64_t v91 = (v40 - v19) >> 2;
        }
        v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v91);
        int64x2_t v19 = &v92[(2 * v91 + 6) & 0xFFFFFFFFFFFFFFF8];
        v94 = *(uint64_t **)(a1 + 96);
        std::string::size_type v95 = v19;
        uint64_t v96 = *(void *)(a1 + 104) - (void)v94;
        uint64_t v15 = v14 + 24;
        if (v96)
        {
          std::string::size_type v95 = &v19[v96 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v97 = 8 * (v96 >> 3);
          float v98 = &v92[(2 * v91 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            uint64_t v99 = *v94++;
            *(void *)float v98 = v99;
            v98 += 8;
            v97 -= 8;
          }
          while (v97);
        }
        std::string::size_type v100 = *(void **)(a1 + 88);
        *(void *)(a1 + 88) = v92;
        *(void *)(a1 + 96) = v19;
        *(void *)(a1 + 104) = v95;
        *(void *)(a1 + 112) = &v92[8 * v93];
        if (v100)
        {
          operator delete(v100);
          int64x2_t v19 = *(char **)(a1 + 96);
        }
      }
      else
      {
        uint64_t v15 = v14 + 24;
      }
      *((void *)v19 - 1) = v43;
      v101 = *(char **)(a1 + 96);
      float v102 = *(char **)(a1 + 104);
      *(void *)(a1 + 96) = v101 - 8;
      uint64_t v103 = *((void *)v101 - 1);
      *(void *)(a1 + 96) = v101;
      if (v102 == *(char **)(a1 + 112))
      {
        unint64_t v104 = *(void *)(a1 + 88);
        uint64_t v105 = (uint64_t)&v101[-v104];
        if ((unint64_t)v101 <= v104)
        {
          uint64_t v113 = (uint64_t)&v102[-v104];
          BOOL v55 = v113 == 0;
          uint64_t v114 = v113 >> 2;
          if (v55) {
            unint64_t v115 = 1;
          }
          else {
            unint64_t v115 = v114;
          }
          v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v115);
          uint64_t v118 = &v116[8 * (v115 >> 2)];
          size_t v119 = *(uint64_t **)(a1 + 96);
          float v102 = v118;
          uint64_t v120 = *(void *)(a1 + 104) - (void)v119;
          uint64_t v15 = v14 + 24;
          if (v120)
          {
            float v102 = &v118[v120 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v121 = 8 * (v120 >> 3);
            v122 = &v116[8 * (v115 >> 2)];
            do
            {
              uint64_t v123 = *v119++;
              *(void *)v122 = v123;
              v122 += 8;
              v121 -= 8;
            }
            while (v121);
          }
          v124 = *(void **)(a1 + 88);
          *(void *)(a1 + 88) = v116;
          *(void *)(a1 + 96) = v118;
          *(void *)(a1 + 104) = v102;
          *(void *)(a1 + 112) = &v116[8 * v117];
          if (v124)
          {
            operator delete(v124);
            float v102 = *(char **)(a1 + 104);
          }
        }
        else
        {
          uint64_t v106 = v105 >> 3;
          BOOL v31 = v105 >> 3 < -1;
          uint64_t v107 = (v105 >> 3) + 2;
          if (v31) {
            uint64_t v108 = v107;
          }
          else {
            uint64_t v108 = v106 + 1;
          }
          uint64_t v109 = -(v108 >> 1);
          uint64_t v110 = v108 >> 1;
          v111 = &v101[-8 * v110];
          int64_t v112 = v102 - v101;
          if (v102 != v101)
          {
            memmove(&v101[-8 * v110], v101, v102 - v101);
            v101 = *(char **)(a1 + 96);
          }
          float v102 = &v111[v112];
          *(void *)(a1 + 96) = &v101[8 * v109];
          *(void *)(a1 + 104) = &v111[v112];
        }
      }
      *(void *)float v102 = v103;
    }
    else
    {
      *(void *)(a1 + 120) = v23 - 256;
      uint64_t v27 = *(void *)v19;
      uint64_t v25 = v19 + 8;
      uint64_t v26 = v27;
      *(void *)(a1 + 96) = v25;
      if (v18 == *(char **)(a1 + 112))
      {
        unint64_t v28 = *(void *)(a1 + 88);
        uint64_t v29 = (uint64_t)&v25[-v28];
        if ((unint64_t)v25 <= v28)
        {
          uint64_t v56 = (uint64_t)&v18[-v28];
          BOOL v55 = v56 == 0;
          uint64_t v57 = v56 >> 2;
          if (v55) {
            unint64_t v58 = 1;
          }
          else {
            unint64_t v58 = v57;
          }
          uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v58);
          double v61 = &v59[8 * (v58 >> 2)];
          long long v62 = *(uint64_t **)(a1 + 96);
          uint64_t v18 = v61;
          uint64_t v63 = *(void *)(a1 + 104) - (void)v62;
          if (v63)
          {
            uint64_t v18 = &v61[v63 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v64 = 8 * (v63 >> 3);
            std::string::size_type v65 = &v59[8 * (v58 >> 2)];
            do
            {
              uint64_t v66 = *v62++;
              *(void *)std::string::size_type v65 = v66;
              v65 += 8;
              v64 -= 8;
            }
            while (v64);
          }
          unint64_t v67 = *(void **)(a1 + 88);
          *(void *)(a1 + 88) = v59;
          *(void *)(a1 + 96) = v61;
          *(void *)(a1 + 104) = v18;
          *(void *)(a1 + 112) = &v59[8 * v60];
          if (v67)
          {
            operator delete(v67);
            uint64_t v18 = *(char **)(a1 + 104);
          }
        }
        else
        {
          uint64_t v30 = v29 >> 3;
          BOOL v31 = v29 >> 3 < -1;
          uint64_t v32 = (v29 >> 3) + 2;
          if (v31) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = v30 + 1;
          }
          uint64_t v34 = -(v33 >> 1);
          uint64_t v35 = v33 >> 1;
          unint64_t v36 = &v25[-8 * v35];
          int64_t v37 = v18 - v25;
          if (v18 != v25)
          {
            memmove(&v25[-8 * v35], v25, v18 - v25);
            uint64_t v18 = *(char **)(a1 + 96);
          }
          unint64_t v38 = &v18[8 * v34];
          uint64_t v18 = &v36[v37];
          *(void *)(a1 + 96) = v38;
          *(void *)(a1 + 104) = &v36[v37];
        }
      }
      *(void *)uint64_t v18 = v26;
    }
    *(void *)(a1 + 104) += 8;
    goto LABEL_73;
  }
LABEL_74:
  float v90 = (void *)(*(void *)&v19[(v24 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v24);
  *float v90 = v15;
  v90[1] = v14;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  *(void *)(a1 + 128) = v22 + 1;
  std::mutex::unlock(v4);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 16));
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)v14 + 7), 0xFFFFFFFFFFFFFFFFLL);

  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
}

void sub_23F581A24(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v3) {
    operator delete(v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void realityio::AsyncUpdateEngineQueueManager::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  if (v7)
  {
    if (v7 != a1)
    {
      int v11 = realityio::internal::assertHandler(1u, "engineQueueManagerOwningThisThread == this", "performBlockSyncOnEngineQueue", 101, 1, v4, v5, v6, (uint64_t)"cannot use multiple EngineQueueManagers simultaneously", v12);
      if (v11 == 1)
      {
        raise(5);
      }
      else if (v11 == 2)
      {
        abort();
      }
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v9 = *(void (**)(void))(*(void *)v8 + 48);
    v9();
  }
  else
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
    uint64_t v10 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3321888768;
    block[2] = ___ZN9realityio29AsyncUpdateEngineQueueManager29performBlockSyncOnEngineQueueERKNSt3__18functionIFvvEEE_block_invoke;
    block[3] = &__block_descriptor_48_ea8_32c110_ZTSKZN9realityio29AsyncUpdateEngineQueueManager29performBlockSyncOnEngineQueueERKNSt3__18functionIFvvEEEE3__0_e5_v8__0l;
    block[4] = a1;
    block[5] = a2;
    dispatch_sync(v10, block);
  }
}

uint64_t ___ZN9realityio29AsyncUpdateEngineQueueManager29performBlockSyncOnEngineQueueERKNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*v6)
  {
    int v9 = realityio::internal::assertHandler(1u, "engineQueueManagerOwningThisThread == nullptr", "operator()", 110, 1, v3, v4, v5, (uint64_t)"cannot use multiple EngineQueueManagers simultaneously", v10);
    if (v9 == 1)
    {
      raise(5);
    }
    else if (v9 == 2)
    {
      abort();
    }
  }
  void *v6 = v2;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
  void *v6 = 0;
  return result;
}

__n128 __copy_helper_block_ea8_32c110_ZTSKZN9realityio29AsyncUpdateEngineQueueManager29performBlockSyncOnEngineQueueERKNSt3__18functionIFvvEEEE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

void realityio::AsyncUpdateEngineQueueManager::~AsyncUpdateEngineQueueManager(id *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x2455D2BD0);
}

void realityio::SyncUpdateEngineQueueManager::~SyncUpdateEngineQueueManager(realityio::SyncUpdateEngineQueueManager *this)
{
}

{
  uint64_t vars8;

  std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((void *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v2
                                    + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;

  return std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      unint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *int v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 256;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::__shared_ptr_emplace<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F336148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F336148;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 24);

  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v1);
}

void *std::function<void ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  int v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23F5823FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void realityio::SampleAnimationFromUsdAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t a2@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3)) {
    return;
  }
  uint64_t v7 = (uint64_t *)(a2 + 24);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((uint64_t *)buf, a3);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath((uint64_t *)&v78, v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&v78, (uint64_t)v62);
  if ((v81 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
  if (v79) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v79);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v62))
  {
    int v13 = 0;
    goto LABEL_64;
  }
  TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a3);
  unint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(TargetPath);
  unint64_t v61 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v61 = v10 & 0xFFFFFFFFFFFFFFF8;
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  MEMORY[0x2455CF810](&v78, "__timeSamples");
  uint64_t v11 = (atomic_uint *)(v78 & 0xFFFFFFFFFFFFFFF8);
  if ((v78 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8) == v11)
  {
    uint64_t v60 = (atomic_uint ***)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v60);
    uint64_t v73 = 0;
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v60);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v14);
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        unint64_t v67 = v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v67);
        uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v67);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v15);
        double v17 = v16;
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v67);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v18);
        double v20 = v19;
        std::string __p = 0;
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        double v21 = 1.0 / v17;
        if (v69 == __p)
        {
          double v22 = 0.0;
          double v23 = 0.0;
        }
        else
        {
          double v22 = *(double *)__p / v20;
          double v23 = *(v69 - 1) / v20;
        }
        unint64_t v42 = (unint64_t)((v23 - v22) / v21 + 1.0 + 0.5);
        uint64_t v82 = 0;
        unint64_t v78 = *(void *)&v22;
        uint64_t v79 = *(void *)&v23;
        double v80 = v21;
        uint64_t v77 = 0;
        memset(buf, 0, sizeof(buf));
        LODWORD(v66) = 0;
        uint64_t v74 = &v66;
        pxrInternal__aapl__pxrReserved__::VtArray<float>::resize<pxrInternal__aapl__pxrReserved__::VtArray<float>::resize(unsigned long,float const&)::{lambda(float *,float *)#1}>((unint64_t *)buf, v42, (_DWORD **)&v74);
        if (v42)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
        }
        uint64_t v75 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        uint64_t v66 = (atomic_uint *)v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v66);
        unint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v66);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v24);
        double v26 = v25;
        uint64_t v27 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v66);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v27);
        double v29 = v28;
        std::string __p = 0;
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        double v30 = 1.0 / v26;
        if (v69 == __p)
        {
          double v31 = 0.0;
          double v32 = 0.0;
        }
        else
        {
          double v31 = *(double *)__p / v29;
          double v32 = *(v69 - 1) / v29;
        }
        unint64_t v52 = (unint64_t)((v32 - v31) / v30 + 1.0 + 0.5);
        uint64_t v82 = 0;
        unint64_t v78 = *(void *)&v31;
        uint64_t v79 = *(void *)&v32;
        double v80 = v30;
        uint64_t v77 = 0;
        memset(buf, 0, sizeof(buf));
        unint64_t v67 = 0;
        uint64_t v74 = (atomic_uint **)&v67;
        pxrInternal__aapl__pxrReserved__::VtArray<double>::resize<pxrInternal__aapl__pxrReserved__::VtArray<double>::resize(unsigned long,double const&)::{lambda(double *,double *)#1}>((unint64_t *)buf, v52, (uint64_t **)&v74);
        if (v52)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
        }
        uint64_t v75 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        uint64_t v66 = (atomic_uint *)v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v66);
        uint64_t v33 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v66);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v33);
        double v35 = v34;
        unint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v66);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v36);
        double v38 = v37;
        std::string __p = 0;
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        double v39 = 1.0 / v35;
        if (v69 == __p)
        {
          double v40 = 0.0;
          double v41 = 0.0;
        }
        else
        {
          double v40 = *(double *)__p / v38;
          double v41 = *(v69 - 1) / v38;
        }
        unint64_t v53 = (unint64_t)((v41 - v40) / v39 + 1.0 + 0.5);
        uint64_t v82 = 0;
        unint64_t v78 = *(void *)&v40;
        uint64_t v79 = *(void *)&v41;
        double v80 = v39;
        uint64_t v77 = 0;
        memset(buf, 0, sizeof(buf));
        unint64_t v67 = &v74;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfQuatf const&)::_Filler>((unint64_t *)buf, v53, (_OWORD **)&v67);
        if (v53)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>();
        }
        uint64_t v75 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        unint64_t v67 = v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v67);
        uint64_t v43 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v67);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v43);
        double v45 = v44;
        uint64_t v46 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v67);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v46);
        double v48 = v47;
        std::string __p = 0;
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        double v49 = 1.0 / v45;
        if (v69 == __p)
        {
          double v50 = 0.0;
          double v51 = 0.0;
        }
        else
        {
          double v50 = *(double *)__p / v48;
          double v51 = *(v69 - 1) / v48;
        }
        unint64_t v54 = (unint64_t)((v51 - v50) / v49 + 1.0 + 0.5);
        uint64_t v82 = 0;
        unint64_t v78 = *(void *)&v50;
        uint64_t v79 = *(void *)&v51;
        double v80 = v49;
        uint64_t v77 = 0;
        memset(buf, 0, sizeof(buf));
        WORD2(v66) = 0;
        LODWORD(v66) = 0;
        uint64_t v74 = &v66;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3h const&)::_Filler>((unint64_t *)buf, v54, (int **)&v74);
        if (v54)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3h>();
        }
        uint64_t v75 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        unint64_t v78 = (unint64_t)v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v78);
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        unint64_t v78 = (unint64_t)v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v78);
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        unint64_t v78 = (unint64_t)v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v78);
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        unint64_t v78 = (unint64_t)v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v78);
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        unint64_t v78 = (unint64_t)v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v78);
      }
      BOOL v55 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)v72);
      if (v55)
      {
        unint64_t v78 = (unint64_t)v60;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v78);
      }
      uint64_t v56 = *(id *)(realityio::logObjects(v55) + 24);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        unint64_t v58 = &v78;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)&v78, (pxrInternal__aapl__pxrReserved__::VtValue *)v72);
        if (v80 < 0.0) {
          unint64_t v58 = (unint64_t *)v78;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v62, &__p);
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v58;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = Text;
        _os_log_error_impl(&dword_23F4EA000, v56, OS_LOG_TYPE_ERROR, "Unsupported VtValue re-sample type \"%s\" for \"%s\"", buf, 0x16u);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        if (SHIBYTE(v80) < 0) {
          operator delete((void *)v78);
        }
      }
    }
    v71[1] = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v72);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, v71);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v71);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&v60);
  }
  else if (pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v61, a4))
  {
    char v12 = 0;
    int v13 = 1;
    goto LABEL_61;
  }
  int v13 = 0;
  char v12 = 1;
LABEL_61:
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v12 & 1) == 0)
  {
    int v57 = 0;
    goto LABEL_66;
  }
LABEL_64:
  int v57 = 1;
LABEL_66:
  if ((v65 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
  if (v63) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v63);
  }
  if (((v13 | v57) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a4);
  }
}

void sub_23F582E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a26);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a10);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a12);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v30);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 88) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 65) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, uint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v3);
  double v5 = v4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v6);
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  double v7 = 1.0 / v5;
  uint64_t v19 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  double v18 = v7;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  LODWORD(v15) = 0;
  int v13 = &v14;
  uint64_t v14 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3f const&)::_Filler>((unint64_t *)v8, (unint64_t)((0.0 - 0.0) / v7 + 1.0 + 0.5), &v13);
  if ((unint64_t)((0.0 - 0.0) / v7 + 1.0 + 0.5))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>();
  }
  uint64_t v15 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F58328C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 71) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v3);
  double v5 = v4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v6);
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  double v7 = 1.0 / v5;
  v13[5] = 0;
  uint64_t v14 = 0;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = *(long long **)&v7;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  v13[0] = (long long *)&v14;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfVec3d*,pxrInternal__aapl__pxrReserved__::GfVec3d*)#1}>((unint64_t *)v8, (unint64_t)((0.0 - 0.0) / v7 + 1.0 + 0.5), v13);
  if ((unint64_t)((0.0 - 0.0) / v7 + 1.0 + 0.5))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>();
  }
  uint64_t v15 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F5834F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v3);
  double v5 = v4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v6);
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  double v7 = 1.0 / v5;
  v13[5] = 0;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = *(long long **)&v7;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v14, 0, sizeof(v14));
  v13[0] = v14;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfMatrix4d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfMatrix4d*,pxrInternal__aapl__pxrReserved__::GfMatrix4d*)#1}>((unint64_t *)v8, (unint64_t)((0.0 - 0.0) / v7 + 1.0 + 0.5), v13);
  if ((unint64_t)((0.0 - 0.0) / v7 + 1.0 + 0.5))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
  }
  *((void *)&v14[0] + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F583738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 18) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v3);
  double v5 = v4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v6);
  std::string __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  double v7 = 1.0 / v5;
  double v8 = (0.0 - 0.0) / v7 + 1.0 + 0.5;
  unint64_t v9 = (unint64_t)v8;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  double v26 = v7;
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  if ((unint64_t)v8) {
    BOOL v10 = v9 > 0x666666666666666;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateNew((unint64_t)v8);
    uint64_t v12 = New;
    do
    {
      long long v13 = v29;
      *(_OWORD *)uint64_t v12 = v28;
      *((_OWORD *)v12 + 1) = v13;
      uint64_t v14 = v30;
      v12[4] = v30;
      if (v14)
      {
        uint64_t v15 = (atomic_ullong *)(v14 - 16);
        if (v12[3]) {
          uint64_t v15 = (atomic_ullong *)v12[3];
        }
        atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
      }
      v12 += 5;
    }
    while (v12 != &New[5 * v9]);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(&v18);
    uint64_t v20 = New;
    *(void *)&long long v18 = v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v28);
  if (v9)
  {
    if (v20)
    {
      if (*((void *)&v19 + 1) || (unint64_t v16 = atomic_load(v20 - 2), v16 != 1))
      {
        pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>]");
        Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateCopy((uint64_t)v20, v18, v18);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(&v18);
        uint64_t v20 = Copy;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>();
  }
  *((void *)&v28 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F583A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 21) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v3);
  double v5 = v4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v6);
  std::string __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  double v7 = 1.0 / v5;
  double v8 = (0.0 - 0.0) / v7 + 1.0 + 0.5;
  unint64_t v9 = (unint64_t)v8;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  double v26 = v7;
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  if ((unint64_t)v8) {
    BOOL v10 = v9 > 0x666666666666666;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateNew((unint64_t)v8);
    uint64_t v12 = New;
    do
    {
      long long v13 = v29;
      *(_OWORD *)uint64_t v12 = v28;
      *((_OWORD *)v12 + 1) = v13;
      uint64_t v14 = v30;
      v12[4] = v30;
      if (v14)
      {
        uint64_t v15 = (atomic_ullong *)(v14 - 16);
        if (v12[3]) {
          uint64_t v15 = (atomic_ullong *)v12[3];
        }
        atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
      }
      v12 += 5;
    }
    while (v12 != &New[5 * v9]);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(&v18);
    uint64_t v20 = New;
    *(void *)&long long v18 = v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v28);
  if (v9)
  {
    if (v20)
    {
      if (*((void *)&v19 + 1) || (unint64_t v16 = atomic_load(v20 - 2), v16 != 1))
      {
        pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>]");
        Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateCopy((uint64_t)v20, v18, v18);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(&v18);
        uint64_t v20 = Copy;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  *((void *)&v28 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F583DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 41) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v3);
  double v5 = v4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v6);
  std::string __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  double v7 = 1.0 / v5;
  double v8 = (0.0 - 0.0) / v7 + 1.0 + 0.5;
  unint64_t v9 = (unint64_t)v8;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  double v26 = v7;
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  if ((unint64_t)v8) {
    BOOL v10 = v9 > 0x666666666666666;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateNew((unint64_t)v8);
    uint64_t v12 = New;
    do
    {
      long long v13 = v29;
      *(_OWORD *)uint64_t v12 = v28;
      *((_OWORD *)v12 + 1) = v13;
      uint64_t v14 = v30;
      v12[4] = v30;
      if (v14)
      {
        uint64_t v15 = (atomic_ullong *)(v14 - 16);
        if (v12[3]) {
          uint64_t v15 = (atomic_ullong *)v12[3];
        }
        atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
      }
      v12 += 5;
    }
    while (v12 != &New[5 * v9]);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(&v18);
    uint64_t v20 = New;
    *(void *)&long long v18 = v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v28);
  if (v9)
  {
    if (v20)
    {
      if (*((void *)&v19 + 1) || (unint64_t v16 = atomic_load(v20 - 2), v16 != 1))
      {
        pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>]");
        Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateCopy((uint64_t)v20, v18, v18);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(&v18);
        uint64_t v20 = Copy;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>();
  }
  *((void *)&v28 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F584104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<float>::resize<pxrInternal__aapl__pxrReserved__::VtArray<float>::resize(unsigned long,float const&)::{lambda(float *,float *)#1}>(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    double v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
              double v7 = New;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)New + vstd::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((void *)this + 11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        double v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          double v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)uint64_t v22 = v23;
          uint64_t v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      unint64_t v16 = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v14 = v16;
      uint64_t v17 = 0;
      long long v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_Hash(unint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(*a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<float>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<float>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C248];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIfEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x10A0C407A159F4ELL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = (float *)a1[4];
    unint64_t v3 = *a1;
    do
    {
      float v4 = *v2++;
      float v5 = v4;
      if (v4 == 0.0) {
        float v5 = 0.0;
      }
      unint64_t v1 = LODWORD(v5) + ((v1 + LODWORD(v5) + (v1 + LODWORD(v5)) * (v1 + LODWORD(v5))) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<float>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  float v5 = (float *)a1[4];
  uint64_t v6 = *(float **)(a2 + 32);
  uint64_t v7 = 4 * *a1 - 4;
  do
  {
    float v8 = *v5++;
    float v9 = v8;
    float v10 = *v6++;
    BOOL result = v9 == v10;
    BOOL v11 = v9 != v10 || v7 == 0;
    v7 -= 4;
  }
  while (!v11);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<float>::_Streamer>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 += 4;
  return MEMORY[0x270FA31F0](v1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy()
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_Equal(double **a1, double **a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<TimeSampledDataT,void>::Equal(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_EqualPtr(double **a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<TimeSampledDataT,void>::Equal(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 40));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F584850(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1060C40DBA2FAD2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"16TimeSampledDataT" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 24));
    MEMORY[0x2455D2BD0](v2, 0x1060C40DBA2FAD2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<TimeSampledDataT,void>::Equal(double *a1, double *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2]) {
    return pxrInternal__aapl__pxrReserved__::VtValue::operator==((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy()
{
}

void sub_23F584A68(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1060C40DBA2FAD2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<double>::resize<pxrInternal__aapl__pxrReserved__::VtArray<double>::resize(unsigned long,double const&)::{lambda(double *,double *)#1}>(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)a1, a2);
              uint64_t v7 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = *(void *)(v9 + i * 8);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      unint64_t v16 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      long long v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  float v4 = operator new(v3);
  *float v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F584CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique() [T = double]");
      float v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        unint64_t v9 = New;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_Hash(unint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(*a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<double>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<double>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C240];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIdEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x10A0C407A159F4ELL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = (double *)a1[4];
    unint64_t v3 = *a1;
    do
    {
      double v4 = *v2++;
      double v5 = v4;
      if (v4 == 0.0) {
        double v5 = 0.0;
      }
      unint64_t v1 = *(void *)&v5 + ((v1 + *(void *)&v5 + (v1 + *(void *)&v5) * (v1 + *(void *)&v5)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<double>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  double v5 = (double *)a1[4];
  uint64_t v6 = *(double **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    double v8 = *v5++;
    double v9 = v8;
    double v10 = *v6++;
    BOOL result = v9 == v10;
    BOOL v11 = v9 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<double>::_Streamer>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA31E8](v1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 16;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatf const&>((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatf const&>(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a2 + 12);
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float,pxrInternal__aapl__pxrReserved__::GfVec3f const&>((uint64_t)&v6, (float *)&v5, (float *)a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float,pxrInternal__aapl__pxrReserved__::GfVec3f const&>(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  if (*a2 == 0.0) {
    float v3 = 0.0;
  }
  unint64_t v4 = LODWORD(v3);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v4 = ((*(void *)a1 + LODWORD(v3) + (*(void *)a1 + LODWORD(v3)) * (*(void *)a1 + (unint64_t)LODWORD(v3))) >> 1)
  }
       + LODWORD(v3);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3f const&>(a1, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  int v5 = (float *)(a1[4] + 8);
  uint64_t v6 = 16 * *a1;
  for (uint64_t i = (float *)(*(void *)(a2 + 32) + 8);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 16;
    if (!v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_Streamer>(void *a1, uint64_t a2)
{
  *a1 += 16;
  return MEMORY[0x270FA3F10](a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3hEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    float v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 3;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3h const&>((uint64_t)&v7, v3);
      float v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3h const&>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  *(void *)uint64_t result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (unsigned __int16 *)a1[4];
  uint64_t v7 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v8 = 6 * v5 - 6;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 3;
    v7 += 3;
    uint64_t v9 = v8;
    v8 -= 6;
  }
  while (v9);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2)
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[1]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[1])
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[2]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_Streamer>(void *a1, uint64_t a2)
{
  *a1 += 6;
  return MEMORY[0x270FA3F50](a2);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfVec3d*,pxrInternal__aapl__pxrReserved__::GfVec3d*)#1}>(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)a1, a2);
              uint64_t v7 = New;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &New[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8);
                  v12[2] = *(void *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)uint64_t v12 = v13;
                  v11 += 3;
                }
                while (3 * v3 != v11);
              }
            }
            uint64_t v14 = *a3;
            uint64_t v15 = 3 * v3;
            do
            {
              unint64_t v16 = &v7[v15];
              long long v17 = *v14;
              v16[2] = *((void *)v14 + 2);
              *(_OWORD *)unint64_t v16 = v17;
              v15 += 3;
            }
            while (3 * a2 != v15);
          }
          long long v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)a1, a2);
      long long v18 = v25;
      if (v24)
      {
        uint64_t v26 = 24 * v24;
        uint64_t v27 = v25;
        do
        {
          long long v28 = *(_OWORD *)v7;
          v27[2] = v7[2];
          *(_OWORD *)uint64_t v27 = v28;
          v27 += 3;
          v7 += 3;
          v26 -= 24;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        long long v29 = *a3;
        uint64_t v30 = 3 * v3;
        do
        {
          uint64_t v31 = &v25[v30];
          long long v32 = *v29;
          v31[2] = *((void *)v29 + 2);
          *(_OWORD *)uint64_t v31 = v32;
          v30 += 3;
        }
        while (3 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0xAAAAAAAAAAAAAABLL)
    {
      unint64_t v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)a1, a2);
      long long v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        uint64_t v22 = &v19[v20];
        long long v23 = *v21;
        v22[2] = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        v20 += 3;
      }
      while (3 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 24 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F585DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3d]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 24 * v5;
        unint64_t v9 = New;
        do
        {
          long long v10 = *v4;
          v9[2] = *((void *)v4 + 2);
          *(_OWORD *)unint64_t v9 = v10;
          v9 += 3;
          uint64_t v4 = (long long *)((char *)v4 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 3;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3d const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3d const&>(uint64_t a1, double *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4 = *a2;
  if (*a2 == 0.0) {
    double v4 = 0.0;
  }
  double v5 = v4;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v5 = *(void *)&v4
  }
                   + ((*(void *)a1
                     + *(void *)&v4
                     + (*(void *)a1 + *(void *)&v4) * (*(void *)a1 + *(void *)&v4)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v5;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&>(a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&>(uint64_t result, double *a2, double *a3)
{
  double v3 = *a2;
  if (*a2 == 0.0) {
    double v3 = 0.0;
  }
  double v4 = v3;
  if (*(unsigned char *)(result + 8)) {
    *(void *)&double v4 = *(void *)&v3
  }
                   + ((*(void *)result
                     + *(void *)&v3
                     + (*(void *)result + *(void *)&v3) * (*(void *)result + *(void *)&v3)) >> 1);
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(double *)uint64_t result = v4;
  double v5 = *a3;
  if (*a3 == 0.0) {
    double v5 = 0.0;
  }
  *(void *)uint64_t result = *(void *)&v5
                    + ((*(void *)&v4
                      + *(void *)&v5
                      + (*(void *)&v4 + *(void *)&v5) * (*(void *)&v4 + *(void *)&v5)) >> 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  double v5 = (double *)a1[4];
  char v6 = &v5[3 * *a1];
  for (uint64_t i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_Streamer>(void *a1, uint64_t a2)
{
  *a1 += 24;
  return MEMORY[0x270FA3F40](a2);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfMatrix4d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfMatrix4d*,pxrInternal__aapl__pxrReserved__::GfMatrix4d*)#1}>(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)a1, a2);
              uint64_t v7 = New;
              if (v3)
              {
                unint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &New[v11 / 8];
                  long long v13 = *(_OWORD *)(v9 + v11);
                  long long v14 = *(_OWORD *)(v9 + v11 + 16);
                  long long v15 = *(_OWORD *)(v9 + v11 + 48);
                  *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                  *((_OWORD *)v12 + 3) = v15;
                  *(_OWORD *)uint64_t v12 = v13;
                  *((_OWORD *)v12 + 1) = v14;
                  long long v16 = *(_OWORD *)(v9 + v11 + 64);
                  long long v17 = *(_OWORD *)(v9 + v11 + 80);
                  long long v18 = *(_OWORD *)(v9 + v11 + 112);
                  *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + v11 + 96);
                  *((_OWORD *)v12 + 7) = v18;
                  *((_OWORD *)v12 + 4) = v16;
                  *((_OWORD *)v12 + 5) = v17;
                  v11 += 128;
                }
                while (v3 << 7 != v11);
              }
            }
            unint64_t v19 = *a3;
            unint64_t v20 = v3 << 7;
            do
            {
              uint64_t v21 = (_OWORD *)((char *)v7 + v20);
              long long v22 = *v19;
              long long v23 = v19[1];
              long long v24 = v19[3];
              v21[2] = v19[2];
              v21[3] = v24;
              _OWORD *v21 = v22;
              v21[1] = v23;
              long long v25 = v19[4];
              long long v26 = v19[5];
              long long v27 = v19[7];
              v21[6] = v19[6];
              v21[7] = v27;
              v21[4] = v25;
              v21[5] = v26;
              v20 += 128;
            }
            while (a2 << 7 != v20);
          }
          long long v28 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v40 = a2;
      }
      else {
        unint64_t v40 = *a1;
      }
      double v41 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)a1, a2);
      long long v28 = v41;
      if (v40)
      {
        unint64_t v42 = v40 << 7;
        uint64_t v43 = v41;
        do
        {
          long long v44 = *(_OWORD *)v7;
          long long v45 = *((_OWORD *)v7 + 1);
          long long v46 = *((_OWORD *)v7 + 3);
          *((_OWORD *)v43 + 2) = *((_OWORD *)v7 + 2);
          *((_OWORD *)v43 + 3) = v46;
          *(_OWORD *)uint64_t v43 = v44;
          *((_OWORD *)v43 + 1) = v45;
          long long v47 = *((_OWORD *)v7 + 4);
          long long v48 = *((_OWORD *)v7 + 5);
          long long v49 = *((_OWORD *)v7 + 7);
          *((_OWORD *)v43 + 6) = *((_OWORD *)v7 + 6);
          *((_OWORD *)v43 + 7) = v49;
          *((_OWORD *)v43 + 4) = v47;
          *((_OWORD *)v43 + 5) = v48;
          v7 += 16;
          v43 += 16;
          v42 -= 128;
        }
        while (v42);
      }
      if (v3 < a2)
      {
        double v50 = *a3;
        unint64_t v51 = v3 << 7;
        do
        {
          unint64_t v52 = (_OWORD *)((char *)v41 + v51);
          long long v53 = *v50;
          long long v54 = v50[1];
          long long v55 = v50[3];
          v52[2] = v50[2];
          v52[3] = v55;
          *unint64_t v52 = v53;
          v52[1] = v54;
          long long v56 = v50[4];
          long long v57 = v50[5];
          long long v58 = v50[7];
          v52[6] = v50[6];
          v52[7] = v58;
          v52[4] = v56;
          v52[5] = v57;
          v51 += 128;
        }
        while (a2 << 7 != v51);
      }
      goto LABEL_31;
    }
    unint64_t v29 = a2 << 7;
    if ((a2 << 7) / a2 == 128)
    {
      uint64_t v30 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)a1, a2);
      long long v28 = v30;
      unint64_t v31 = 0;
      long long v32 = *a3;
      do
      {
        uint64_t v33 = &v30[v31 / 8];
        long long v34 = *v32;
        long long v35 = v32[1];
        long long v36 = v32[3];
        *((_OWORD *)v33 + 2) = v32[2];
        *((_OWORD *)v33 + 3) = v36;
        *(_OWORD *)uint64_t v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        long long v37 = v32[4];
        long long v38 = v32[5];
        long long v39 = v32[7];
        *((_OWORD *)v33 + 6) = v32[6];
        *((_OWORD *)v33 + 7) = v39;
        *((_OWORD *)v33 + 4) = v37;
        *((_OWORD *)v33 + 5) = v38;
        v31 += 128;
      }
      while (v29 != v31);
LABEL_31:
      if (v28 != (unint64_t *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
        a1[4] = (unint64_t)v28;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >> 57) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (a2 << 7) | 0x10;
  }
  double v4 = operator new(v3);
  *double v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5866C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]");
      double v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = v5 << 7;
        unint64_t v9 = New;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          long long v12 = v4[3];
          v9[2] = v4[2];
          void v9[3] = v12;
          *unint64_t v9 = v10;
          v9[1] = v11;
          long long v13 = v4[4];
          long long v14 = v4[5];
          long long v15 = v4[7];
          v9[6] = v4[6];
          v9[7] = v15;
          void v9[4] = v13;
          void v9[5] = v14;
          v4 += 8;
          v9 += 8;
          v8 -= 128;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d> const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      double v4 = v3 + 16;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfMatrix4d const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfMatrix4d const&>(uint64_t a1, double *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16, double *a17)
{
  double v17 = *a2;
  if (*a2 == 0.0) {
    double v17 = 0.0;
  }
  double v18 = v17;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v18 = *(void *)&v17
  }
                    + ((*(void *)a1
                      + *(void *)&v17
                      + (*(void *)a1 + *(void *)&v17) * (*(void *)a1 + *(void *)&v17)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v18;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16)
{
  double v16 = *a2;
  if (*a2 == 0.0) {
    double v16 = 0.0;
  }
  double v17 = v16;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v17 = *(void *)&v16
  }
                    + ((*(void *)a1
                      + *(void *)&v16
                      + (*(void *)a1 + *(void *)&v16) * (*(void *)a1 + *(void *)&v16)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v17;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15)
{
  double v15 = *a2;
  if (*a2 == 0.0) {
    double v15 = 0.0;
  }
  double v16 = v15;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v16 = *(void *)&v15
  }
                    + ((*(void *)a1
                      + *(void *)&v15
                      + (*(void *)a1 + *(void *)&v15) * (*(void *)a1 + *(void *)&v15)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v16;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14)
{
  double v14 = *a2;
  if (*a2 == 0.0) {
    double v14 = 0.0;
  }
  double v15 = v14;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v15 = *(void *)&v14
  }
                    + ((*(void *)a1
                      + *(void *)&v14
                      + (*(void *)a1 + *(void *)&v14) * (*(void *)a1 + *(void *)&v14)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v15;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13)
{
  double v13 = *a2;
  if (*a2 == 0.0) {
    double v13 = 0.0;
  }
  double v14 = v13;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v14 = *(void *)&v13
  }
                    + ((*(void *)a1
                      + *(void *)&v13
                      + (*(void *)a1 + *(void *)&v13) * (*(void *)a1 + *(void *)&v13)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v14;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12)
{
  double v12 = *a2;
  if (*a2 == 0.0) {
    double v12 = 0.0;
  }
  double v13 = v12;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v13 = *(void *)&v12
  }
                    + ((*(void *)a1
                      + *(void *)&v12
                      + (*(void *)a1 + *(void *)&v12) * (*(void *)a1 + *(void *)&v12)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v13;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11)
{
  double v11 = *a2;
  if (*a2 == 0.0) {
    double v11 = 0.0;
  }
  double v12 = v11;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v12 = *(void *)&v11
  }
                    + ((*(void *)a1
                      + *(void *)&v11
                      + (*(void *)a1 + *(void *)&v11) * (*(void *)a1 + *(void *)&v11)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v12;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  double v10 = *a2;
  if (*a2 == 0.0) {
    double v10 = 0.0;
  }
  double v11 = v10;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v11 = *(void *)&v10
  }
                    + ((*(void *)a1
                      + *(void *)&v10
                      + (*(void *)a1 + *(void *)&v10) * (*(void *)a1 + *(void *)&v10)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v11;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  double v9 = *a2;
  if (*a2 == 0.0) {
    double v9 = 0.0;
  }
  double v10 = v9;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v10 = *(void *)&v9
  }
                    + ((*(void *)a1
                      + *(void *)&v9
                      + (*(void *)a1 + *(void *)&v9) * (*(void *)a1 + *(void *)&v9)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v10;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8)
{
  double v8 = *a2;
  if (*a2 == 0.0) {
    double v8 = 0.0;
  }
  double v9 = v8;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v9 = *(void *)&v8
  }
                   + ((*(void *)a1
                     + *(void *)&v8
                     + (*(void *)a1 + *(void *)&v8) * (*(void *)a1 + *(void *)&v8)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v9;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v7 = *a2;
  if (*a2 == 0.0) {
    double v7 = 0.0;
  }
  double v8 = v7;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v8 = *(void *)&v7
  }
                   + ((*(void *)a1
                     + *(void *)&v7
                     + (*(void *)a1 + *(void *)&v7) * (*(void *)a1 + *(void *)&v7)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v8;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v6 = *a2;
  if (*a2 == 0.0) {
    double v6 = 0.0;
  }
  double v7 = v6;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v7 = *(void *)&v6
  }
                   + ((*(void *)a1
                     + *(void *)&v6
                     + (*(void *)a1 + *(void *)&v6) * (*(void *)a1 + *(void *)&v6)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v7;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5 = *a2;
  if (*a2 == 0.0) {
    double v5 = 0.0;
  }
  double v6 = v5;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v6 = *(void *)&v5
  }
                   + ((*(void *)a1
                     + *(void *)&v5
                     + (*(void *)a1 + *(void *)&v5) * (*(void *)a1 + *(void *)&v5)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v6;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&>(a1, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = (v5 << 7) - 128;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
    if (!result) {
      break;
    }
    v6 += 128;
    v7 += 128;
    uint64_t v9 = v8;
    v8 -= 128;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_Streamer>(void *a1, uint64_t a2)
{
  *a1 += 128;
  return MEMORY[0x270FA3EC0](a2);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateNew(unint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[256]>((uint64_t)&v6);
  if (a1 > 0x666666666666665) {
    size_t v2 = -1;
  }
  else {
    size_t v2 = 40 * a1 + 16;
  }
  unint64_t v3 = operator new(v2);
  *unint64_t v3 = 1;
  v3[1] = a1;
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v3 + 2;
}

void sub_23F587204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateCopy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateNew(a2);
  if (a3)
  {
    uint64_t v6 = a1 + 40 * a3;
    int v7 = result;
    do
    {
      long long v8 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)int v7 = *(_OWORD *)a1;
      *((_OWORD *)v7 + 1) = v8;
      uint64_t v9 = *(void *)(a1 + 32);
      void v7[4] = v9;
      if (v9)
      {
        double v10 = (atomic_ullong *)(v9 - 16);
        if (v7[3]) {
          double v10 = (atomic_ullong *)v7[3];
        }
        atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
      }
      a1 += 40;
      v7 += 5;
    }
    while (a1 != v6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    unint64_t v4 = a1 + 3;
    unint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        int v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 40 * *a1;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v5);
          v5 += 40;
          v6 -= 40;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *unint64_t v4 = 0;
    v4[1] = 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[256]>(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load(MEMORY[0x263F90520]);
  if (v2)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    *(void *)a1 = v4;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      int v3 = 2;
    }
    else
    {
      int v3 = 0;
    }
  }
  else
  {
    int v3 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_Hash(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (void *)(*a1)[4];
  unsigned __int8 v13 = 1;
  uint64_t v12 = v1;
  if (v1)
  {
    int v3 = 1;
    for (uint64_t i = v2; ; v2 = i)
    {
      uint64_t v6 = *i;
      i += 5;
      uint64_t v5 = v6;
      if (v3)
      {
        uint64_t v7 = v5 + ((unint64_t)(v12 + v5 + (v12 + v5) * (v12 + v5)) >> 1);
      }
      else
      {
        unsigned __int8 v13 = 1;
        uint64_t v7 = v5;
      }
      uint64_t v12 = v7;
      if (v5)
      {
        long long v8 = (unsigned __int16 *)v2[4];
        do
        {
          --v5;
          uint64_t v9 = v8 + 3;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3h const&>((uint64_t)&v12, v8);
          long long v8 = v9;
        }
        while (v5);
      }
      if (!--v1) {
        break;
      }
      int v3 = v13;
    }
    unint64_t v10 = 0x9E3779B97F4A7C55 * v12;
  }
  else
  {
    unint64_t v10 = 0;
  }
  return bswap64(v10);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 40));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS0_INS_7GfVec3hEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef((void *)v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (uint64_t *)a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = 40 * v5 - 40;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 5;
    v7 += 40;
    uint64_t v9 = v8;
    v8 -= 40;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_Streamer>(void *a1)
{
  *a1 += 40;
  return pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateNew(unint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[256]>((uint64_t)&v6);
  if (a1 > 0x666666666666665) {
    size_t v2 = -1;
  }
  else {
    size_t v2 = 40 * a1 + 16;
  }
  int v3 = operator new(v2);
  *int v3 = 1;
  v3[1] = a1;
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v3 + 2;
}

void sub_23F58789C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateCopy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateNew(a2);
  if (a3)
  {
    uint64_t v6 = a1 + 40 * a3;
    int v7 = result;
    do
    {
      long long v8 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)int v7 = *(_OWORD *)a1;
      *((_OWORD *)v7 + 1) = v8;
      uint64_t v9 = *(void *)(a1 + 32);
      void v7[4] = v9;
      if (v9)
      {
        unint64_t v10 = (atomic_ullong *)(v9 - 16);
        if (v7[3]) {
          unint64_t v10 = (atomic_ullong *)v7[3];
        }
        atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
      }
      a1 += 40;
      v7 += 5;
    }
    while (a1 != v6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    int v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        int v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 40 * *a1;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v5);
          v5 += 40;
          v6 -= 40;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_Hash(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (void *)(*a1)[4];
  unsigned __int8 v13 = 1;
  uint64_t v12 = v1;
  if (v1)
  {
    int v3 = 1;
    for (uint64_t i = v2; ; v2 = i)
    {
      uint64_t v6 = *i;
      i += 5;
      uint64_t v5 = v6;
      if (v3)
      {
        uint64_t v7 = v5 + ((unint64_t)(v12 + v5 + (v12 + v5) * (v12 + v5)) >> 1);
      }
      else
      {
        unsigned __int8 v13 = 1;
        uint64_t v7 = v5;
      }
      uint64_t v12 = v7;
      if (v5)
      {
        long long v8 = (float *)v2[4];
        do
        {
          --v5;
          uint64_t v9 = v8 + 3;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3f const&>((uint64_t)&v12, v8);
          long long v8 = v9;
        }
        while (v5);
      }
      if (!--v1) {
        break;
      }
      int v3 = v13;
    }
    unint64_t v10 = 0x9E3779B97F4A7C55 * v12;
  }
  else
  {
    unint64_t v10 = 0;
  }
  return bswap64(v10);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 40));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS0_INS_7GfVec3fEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef((void *)v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = 40 * v5 - 40;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 5;
    v7 += 40;
    uint64_t v9 = v8;
    v8 -= 40;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Streamer>(void *a1)
{
  *a1 += 40;
  return pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateNew(unint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[256]>((uint64_t)&v6);
  if (a1 > 0x666666666666665) {
    size_t v2 = -1;
  }
  else {
    size_t v2 = 40 * a1 + 16;
  }
  int v3 = operator new(v2);
  *int v3 = 1;
  v3[1] = a1;
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v3 + 2;
}

void sub_23F587EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateCopy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateNew(a2);
  if (a3)
  {
    uint64_t v6 = a1 + 40 * a3;
    int v7 = result;
    do
    {
      long long v8 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)int v7 = *(_OWORD *)a1;
      *((_OWORD *)v7 + 1) = v8;
      uint64_t v9 = *(void *)(a1 + 32);
      void v7[4] = v9;
      if (v9)
      {
        unint64_t v10 = (atomic_ullong *)(v9 - 16);
        if (v7[3]) {
          unint64_t v10 = (atomic_ullong *)v7[3];
        }
        atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
      }
      a1 += 40;
      v7 += 5;
    }
    while (a1 != v6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    int v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        int v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 40 * *a1;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v5);
          v5 += 40;
          v6 -= 40;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_Hash(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (void *)(*a1)[4];
  unsigned __int8 v13 = 1;
  uint64_t v12 = v1;
  if (v1)
  {
    int v3 = 1;
    for (uint64_t i = v2; ; v2 = i)
    {
      uint64_t v6 = *i;
      i += 5;
      uint64_t v5 = v6;
      if (v3)
      {
        uint64_t v7 = v5 + ((unint64_t)(v12 + v5 + (v12 + v5) * (v12 + v5)) >> 1);
      }
      else
      {
        unsigned __int8 v13 = 1;
        uint64_t v7 = v5;
      }
      uint64_t v12 = v7;
      if (v5)
      {
        uint64_t v8 = v2[4];
        do
        {
          --v5;
          uint64_t v9 = v8 + 16;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatf const&>((uint64_t)&v12, v8);
          uint64_t v8 = v9;
        }
        while (v5);
      }
      if (!--v1) {
        break;
      }
      int v3 = v13;
    }
    unint64_t v10 = 0x9E3779B97F4A7C55 * v12;
  }
  else
  {
    unint64_t v10 = 0;
  }
  return bswap64(v10);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 40));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS0_INS_7GfQuatfEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef((void *)v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = 40 * v5 - 40;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 5;
    v7 += 40;
    uint64_t v9 = v8;
    v8 -= 40;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Streamer>(void *a1)
{
  *a1 += 40;
  return pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIGetTypeID()
{
  if (qword_268C40460 != -1) {
    dispatch_once(&qword_268C40460, &__block_literal_global_5);
  }
  return _MergedGlobals_10;
}

void __RIOPxrUsdShadeMaterialBindingAPIGetTypeID_block_invoke()
{
  if (!_MergedGlobals_10) {
    _MergedGlobals_10 = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICollectionBindingGetTypeID()
{
  if (qword_268C40470 != -1) {
    dispatch_once(&qword_268C40470, &__block_literal_global_2_0);
  }
  return qword_268C40468;
}

void __RIOPxrUsdShadeMaterialBindingAPICollectionBindingGetTypeID_block_invoke()
{
  if (!qword_268C40468) {
    qword_268C40468 = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef()
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v5 = 0;
  v4[0] = MEMORY[0x263F907A0] + 16;
  if (qword_268C40460 != -1) {
    dispatch_once(&qword_268C40460, &__block_literal_global_5);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    unsigned int v1 = (void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)(Instance + 16) = MEMORY[0x263F90710] + 16;
    uint64_t v2 = v5;
    *(void *)(Instance + 40) = v5;
    if ((v2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(Instance + 40) &= 0xFFFFFFFFFFFFFFF8;
    }
    *unsigned int v1 = MEMORY[0x263F907A0] + 16;
  }
  MEMORY[0x2455CF4B0](v4);
  return Instance;
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyDirectBinding(uint64_t a1)
{
  unsigned int v1 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(v4, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), v1);
  uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v4);
  return v2;
}

void sub_23F588764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::~DirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::~DirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *this)
{
  uint64_t v2 = *((void *)this + 5);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 4);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24);
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIBind(uint64_t a1, uint64_t a2)
{
  double v17 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*MEMORY[0x263EF8340];
  if (a2) {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a2 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v12, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  v16[0] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v12;
  v16[1] = v3;
  realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>((uint64_t)v11, v16, &v17);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v11);
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F90668], v4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, v5);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v10[0] = (void **)(MEMORY[0x263F90740] + 16);
  unint64_t v6 = atomic_load(MEMORY[0x263F90550]);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 40), v7);
  MEMORY[0x2455CEF40](v10);
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v11);
  v10[0] = (void **)v11;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v10);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  }
  return v8;
}

uint64_t realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject **a2, pxrInternal__aapl__pxrReserved__::UsdObject **a3)
{
  uint64_t v4 = a1;
  *(_OWORD *)std::string __p = 0u;
  long long v88 = 0u;
  float v89 = 1.0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    while (1)
    {
      uint64_t v7 = *v6;
      if (*v6 && (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(*v6) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v90, v7);
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v90);
        EditTarget = (void *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v8);
        uint64_t v10 = EditTarget[1];
        *(void *)&long long v94 = *EditTarget;
        *((void *)&v94 + 1) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
        }
        uint64_t v11 = v91;
        if ((void)v91
          && atomic_fetch_add_explicit((atomic_uint *volatile)(v91 + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      else
      {
        long long v94 = 0uLL;
      }
      unint64_t v12 = bswap64(0x9E3779B97F4A7C55* pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v94));
      unint64_t v13 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v14.i16[0] = vaddlv_u8(v14);
        unint64_t v15 = v14.u32[0];
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v3 = v12;
          if ((void *)v12 >= __p[1]) {
            unint64_t v3 = v12 % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v3 = ((unint64_t)__p[1] - 1) & v12;
        }
        double v16 = (void *)*((void *)__p[0] + v3);
        if (v16)
        {
          double v17 = (void *)*v16;
          if (*v16)
          {
            do
            {
              unint64_t v18 = v17[1];
              if (v18 == v12)
              {
                uint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)(v17 + 2));
                if (UniqueIdentifier == pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v94)) {
                  goto LABEL_83;
                }
              }
              else
              {
                if (v15 > 1)
                {
                  if ((void *)v18 >= __p[1]) {
                    v18 %= (unint64_t)__p[1];
                  }
                }
                else
                {
                  v18 &= (unint64_t)__p[1] - 1;
                }
                if (v18 != v3) {
                  break;
                }
              }
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
      }
      unint64_t v20 = operator new(0x20uLL);
      *unint64_t v20 = 0;
      v20[1] = v12;
      *((_OWORD *)v20 + 1) = v94;
      long long v94 = 0uLL;
      float v21 = (float)(unint64_t)(*((void *)&v88 + 1) + 1);
      if (!v13 || (float)(v89 * (float)v13) < v21) {
        break;
      }
LABEL_73:
      long long v37 = __p[0];
      long long v38 = (void *)*((void *)__p[0] + v3);
      if (v38)
      {
        *unint64_t v20 = *v38;
      }
      else
      {
        *unint64_t v20 = v88;
        *(void *)&long long v88 = v20;
        v37[v3] = &v88;
        if (!*v20) {
          goto LABEL_82;
        }
        unint64_t v39 = *(void *)(*v20 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v39 >= v13) {
            v39 %= v13;
          }
        }
        else
        {
          v39 &= v13 - 1;
        }
        long long v38 = (char *)__p[0] + 8 * v39;
      }
      *long long v38 = v20;
LABEL_82:
      ++*((void *)&v88 + 1);
LABEL_83:
      uint64_t v40 = *((void *)&v94 + 1);
      if (*((void *)&v94 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v94 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
      }
      if (++v6 == a3)
      {
        unint64_t v42 = *((void *)&v88 + 1);
        uint64_t v4 = a1;
        goto LABEL_98;
      }
    }
    BOOL v22 = (v13 & (v13 - 1)) != 0;
    if (v13 < 3) {
      BOOL v22 = 1;
    }
    unint64_t v23 = v22 | (2 * v13);
    unint64_t v24 = vcvtps_u32_f32(v21 / v89);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v13 = (unint64_t)__p[1];
    if ((void *)*(void *)&prime > __p[1]) {
      goto LABEL_39;
    }
    if ((void *)*(void *)&prime < __p[1])
    {
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)&v88 + 1) / v89);
      if (__p[1] < (void *)3
        || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if ((void *)*(void *)&prime >= __p[1])
      {
        unint64_t v13 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v26 = operator new(8 * *(void *)&prime);
          long long v27 = __p[0];
          __p[0] = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v28++) = 0;
          while (*(void *)&prime != v28);
          unint64_t v29 = (void **)v88;
          if ((void)v88)
          {
            unint64_t v30 = *(void *)(v88 + 8);
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *((void *)__p[0] + v30) = &v88;
            for (uint64_t i = *v29; i; v30 = v36)
            {
              unint64_t v36 = i[1];
              if (v31.u32[0] > 1uLL)
              {
                if (v36 >= *(void *)&prime) {
                  v36 %= *(void *)&prime;
                }
              }
              else
              {
                v36 &= *(void *)&prime - 1;
              }
              if (v36 != v30)
              {
                if (!*((void *)__p[0] + v36))
                {
                  *((void *)__p[0] + v36) = v29;
                  goto LABEL_64;
                }
                *unint64_t v29 = (void *)*i;
                *uint64_t i = **((void **)__p[0] + v36);
                **((void **)__p[0] + v36) = i;
                uint64_t i = v29;
              }
              unint64_t v36 = v30;
LABEL_64:
              unint64_t v29 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v13 = (unint64_t)prime;
          goto LABEL_68;
        }
        double v41 = __p[0];
        __p[0] = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v13 = 0;
        __p[1] = 0;
      }
    }
LABEL_68:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        unint64_t v3 = v12 % v13;
      }
      else {
        unint64_t v3 = v12;
      }
    }
    else
    {
      unint64_t v3 = (v13 - 1) & v12;
    }
    goto LABEL_73;
  }
  unint64_t v42 = 0;
LABEL_98:
  memset(v86, 0, 24);
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::reserve((uint64_t *)v86, v42);
  uint64_t v43 = (atomic_uint **)v88;
  if ((void)v88)
  {
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    unint64_t v46 = *((void *)&v86[0] + 1);
    long long v47 = (void *)v88;
    do
    {
      long long v47 = (void *)*v47;
      --v45;
      v44 -= 16;
    }
    while (v47);
    uint64_t v48 = *(void *)&v86[0];
    uint64_t v49 = (uint64_t)(*((void *)&v86[0] + 1) - *(void *)&v86[0]) >> 4;
    double v50 = (void *)(*(void *)&v86[0] + ((*((void *)&v86[0] + 1) - *(void *)&v86[0]) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v51 = ~v45;
    if (~v45 >= (uint64_t)(*(void *)&v86[1] - *((void *)&v86[0] + 1)) >> 4)
    {
      unint64_t v58 = v49 - v45;
      if (v58 >> 60) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(*(void *)&v86[1] - *(void *)&v86[0]) >> 3 > v58) {
        unint64_t v58 = (uint64_t)(*(void *)&v86[1] - *(void *)&v86[0]) >> 3;
      }
      if (*(void *)&v86[1] - *(void *)&v86[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
        unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v58;
      }
      uint64_t v93 = &v86[1];
      if (v59) {
        uint64_t v60 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v86[1], v59);
      }
      else {
        uint64_t v60 = 0;
      }
      uint64_t v65 = (uint64_t)&v60[2 * v49];
      float v90 = v60;
      *(void *)&long long v91 = v65;
      v92 = &v60[2 * v59];
      uint64_t v66 = (void *)v65;
      do
      {
        void *v66 = v43[2];
        unint64_t v67 = v43[3];
        v66[1] = v67;
        if (v67) {
          atomic_fetch_add_explicit(v67 + 2, 1u, memory_order_relaxed);
        }
        uint64_t v43 = (atomic_uint **)*v43;
        v66 += 2;
      }
      while ((void *)(v65 - v44) != v66);
      *((void *)&v91 + 1) = v65 - v44;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>((uint64_t)&v86[1], (uint64_t)v50, v50, *(uint64_t *)&v86[0], *(void **)&v86[0], v65, v65);
      *(void *)&long long v91 = v68;
      uint64_t v69 = (void *)*((void *)&v86[0] + 1);
      uint64_t v70 = (_OWORD *)*((void *)&v91 + 1);
      uint64_t v97 = *((void *)&v91 + 1);
      v98[0] = *((void *)&v91 + 1);
      *(void *)&long long v94 = &v86[1];
      *((void *)&v94 + 1) = &v97;
      std::string::size_type v95 = v98;
      if (*((void **)&v86[0] + 1) != v50)
      {
        do
        {
          *v70++ = *(_OWORD *)v50;
          *double v50 = 0;
          v50[1] = 0;
          v50 += 2;
        }
        while (v50 != v69);
        v98[0] = v70;
      }
      char v96 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v94);
      long long v71 = v86[0];
      *(void *)&v86[0] = v91;
      *((void *)&v86[0] + 1) = v70;
      long long v91 = v71;
      uint64_t v72 = *(void ***)&v86[1];
      *(void *)&v86[1] = v92;
      v92 = v72;
      float v90 = (void **)v71;
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)&v90);
    }
    else
    {
      uint64_t v52 = v4;
      unint64_t v53 = 1 - v45;
      long long v54 = (atomic_uint **)v88;
      do
      {
        long long v54 = (atomic_uint **)*v54;
        --v53;
      }
      while (v53 > 1);
      uint64_t v55 = *((void *)&v86[0] + 1) - (void)v50;
      uint64_t v56 = (uint64_t)(*((void *)&v86[0] + 1) - (void)v50) >> 4;
      if (v56 > v51)
      {
        long long v57 = (_OWORD *)*((void *)&v86[0] + 1);
        uint64_t v4 = v52;
LABEL_134:
        uint64_t v74 = (uint64_t)&v57[v44 / 0x10] - v48 + -16 * v49;
        uint64_t v75 = (char *)v50 + v74;
        uint64_t v76 = v57;
        if ((unint64_t)v50 + v74 < v46)
        {
          uint64_t v76 = v57;
          do
          {
            *v76++ = *(_OWORD *)v75;
            *(void *)uint64_t v75 = 0;
            *((void *)v75 + 1) = 0;
            v75 += 16;
          }
          while ((unint64_t)v75 < v46);
        }
        *((void *)&v86[0] + 1) = v76;
        if (&v50[v44 / 0xFFFFFFFFFFFFFFF8] != (void *)v57)
        {
          uint64_t v77 = (uint64_t)(v57 - 1);
          uint64_t v78 = 16 * (v74 >> 4);
          uint64_t v79 = v48 + 16 * v49 - 16;
          do
          {
            pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(v77, v79 + v78);
            v77 -= 16;
            v78 -= 16;
          }
          while (v78);
        }
        for (; v43 != v54; double v50 = v80 + 1)
        {
          *double v50 = v43[2];
          double v80 = (atomic_uint **)(v50 + 1);
          pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator=(v80, v43 + 3);
          uint64_t v43 = (atomic_uint **)*v43;
        }
        goto LABEL_142;
      }
      long long v54 = (atomic_uint **)v88;
      if (v55 >= 1)
      {
        unint64_t v61 = v56 + 1;
        long long v54 = (atomic_uint **)v88;
        do
        {
          long long v54 = (atomic_uint **)*v54;
          --v61;
        }
        while (v61 > 1);
      }
      *(void *)&long long v94 = *((void *)&v86[0] + 1);
      v98[0] = *((void *)&v86[0] + 1);
      float v90 = (void **)&v86[1];
      *(void *)&long long v91 = v98;
      *((void *)&v91 + 1) = &v94;
      if (v54)
      {
        long long v57 = (_OWORD *)*((void *)&v86[0] + 1);
        long long v62 = (void *)*((void *)&v86[0] + 1);
        uint64_t v63 = v54;
        do
        {
          *long long v62 = v63[2];
          uint64_t v64 = v63[3];
          v62[1] = v64;
          if (v64) {
            atomic_fetch_add_explicit(v64 + 2, 1u, memory_order_relaxed);
          }
          uint64_t v63 = (atomic_uint **)*v63;
          v62 += 2;
          *(void *)&long long v94 = v62;
          ++v57;
        }
        while (v63);
      }
      else
      {
        long long v57 = (_OWORD *)*((void *)&v86[0] + 1);
      }
      LOBYTE(v92) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v90);
      *((void *)&v86[0] + 1) = v57;
      BOOL v73 = v55 < 1;
      uint64_t v4 = v52;
      if (!v73) {
        goto LABEL_134;
      }
    }
  }
LABEL_142:
  long long v81 = v86[0];
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)v86 + 8);
  unint64_t v82 = 126 - 2 * __clz((uint64_t)(*((void *)&v81 + 1) - v81) >> 4);
  *(void *)uint64_t v4 = v81;
  memset(v86, 0, 24);
  if (*((void *)&v81 + 1) == (void)v81) {
    uint64_t v83 = 0;
  }
  else {
    uint64_t v83 = v82;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,false>(v81, *((unint64_t *)&v81 + 1), (uint64_t)v98, v83, 1);
  float v90 = (void **)v86;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v90);
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::~__hash_table((uint64_t)__p);
}

void sub_23F5892B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a11;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&a25);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIUnbind(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v6, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)&v6);
  std::recursive_mutex::lock(v2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  unint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindDirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), v3);
  std::recursive_mutex::unlock(v2);
  return v4;
}

void sub_23F589440(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIBindCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*MEMORY[0x263EF8340];
  if (a2) {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a2 + 24);
  }
  else {
    uint64_t v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(&v20, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v16, &v21, v22);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v12, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  v23[0] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v12;
  v23[1] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v16;
  v23[2] = v4;
  realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>((uint64_t)v11, v23, &v24);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v11);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v9 = 0;
  v10[0] = (void **)(MEMORY[0x263F90740] + 16);
  unint64_t v5 = atomic_load(MEMORY[0x263F90550]);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v20, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 40), v6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CEF40](v10);
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v11);
  v10[0] = (void **)v11;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v10);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  }
  MEMORY[0x2455CEEA0](&v20);
  return v7;
}

void sub_23F589668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIUnbindCollection(uint64_t a1, uint64_t a2)
{
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(&v16, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v12, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v8, &v17, &v18);
  v21[0] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v12;
  v21[1] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v8;
  realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>((uint64_t)v7, v21, &v22);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v7);
  unint64_t v20 = v19;
  if ((v19 & 7) != 0)
  {
    unint64_t v3 = (void **)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v20 = (unint64_t)v3;
    }
  }
  uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindCollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, v4);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v7);
  unint64_t v20 = (unint64_t)v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  }
  MEMORY[0x2455CEEA0](&v16);
  return v5;
}

void sub_23F5898C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v4 = *(void *)(v2 - 48);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)va);
  *(void *)(v2 - 48) = va;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 48));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  MEMORY[0x2455CEEA0](v2 - 80);
  _Unwind_Resume(a1);
}

void sub_23F589954()
{
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyMaterialBindingStrengthForDirectBinding(uint64_t a1)
{
  unsigned int v1 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(v5, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), v1);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength();
  uint64_t v2 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v4);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v5);
  return v2;
}

void sub_23F589A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::~DirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(void *a1)
{
  if (RIOPxrTfTokenGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrTfTokenGetTypeID::onceToken, &__block_literal_global_25);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    *(void *)(result + 16) = *a1;
    *a1 = 0;
  }
  return result;
}

uint64_t RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v6, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)&v6);
  std::recursive_mutex::lock(v2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  unint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), v3);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength();
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  std::recursive_mutex::unlock(v2);
  return v4;
}

void sub_23F589C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindings(uint64_t a1)
{
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16);
  unint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRels(&v27, v2, v3);
  uint64_t v4 = v28;
  if (v27 != v28)
  {
    uint64_t v5 = v27 + 16;
    do
    {
      uint64_t v6 = v5 - 16;
      int v22 = *(_DWORD *)(v5 - 16);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v23 = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, (_DWORD *)v5);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, (_DWORD *)(v5 + 4));
      uint64_t v8 = *(void *)(v5 + 8);
      uint64_t v26 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v26 &= 0xFFFFFFFFFFFFFFF8;
      }
      MEMORY[0x2455CF450](&v15, &v22);
      if (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel()
        && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        if (qword_268C40470 != -1) {
          dispatch_once(&qword_268C40470, &__block_literal_global_2_0);
        }
        uint64_t Instance = _CFRuntimeCreateInstance();
        uint64_t v10 = Instance;
        if (Instance)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), &v15);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v10 + 20), (_DWORD *)&v15 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v10 + 24), &v16);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v10 + 28), v17);
          *(_DWORD *)(v10 + 32) = v17[1];
          uint64_t v11 = v18;
          *(void *)(v10 + 40) = v18;
          if (v11) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v10 + 48), &v19);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v10 + 52), &v20);
          uint64_t v12 = v21;
          *(void *)(v10 + 56) = v21;
          if ((v12 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)(v10 + 56) &= 0xFFFFFFFFFFFFFFF8;
          }
        }
        CFArrayAppendValue(theArray, (const void *)v10);
        CFRelease((CFTypeRef)v10);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v15);
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
      if (v23) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
      }
      v5 += 32;
    }
    while (v6 + 32 != v4);
  }
  uint64_t v15 = (void **)&v27;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](&v15);
  return theArray;
}

void sub_23F589F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void **);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)va);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va1);
  uint64_t v9 = (void **)(v7 - 112);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICollectionBindingMaterialPath(uint64_t a1)
{
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 24));
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingMaterialPath(uint64_t a1)
{
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 24));
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICollectionBindingCollectionPath(uint64_t a1)
{
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingCollectionPath(uint64_t a1)
{
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingPrimCollectionName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(v4, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a1 + 16));
  unint64_t v6 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v1 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v6 = v1;
    }
  }
  uint64_t v2 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CEEA0](v4);
  return v2;
}

void sub_23F58A034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CEEA0](va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(&v8, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a2 + 16));
  unint64_t v12 = v11;
  if ((v11 & 7) != 0)
  {
    unint64_t v3 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v12 = v3;
    }
  }
  MEMORY[0x2455CEEA0](&v8);
  uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(&v8, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, v4);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength();
  uint64_t v5 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v7);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v5;
}

void sub_23F58A180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v11 = *(void *)(v10 - 24);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(&v21, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v17, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v13, &v22, &v23);
  v25[0] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v17;
  v25[1] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v13;
  realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>((uint64_t)v12, v25, &v26);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v12);
  unint64_t v11 = v24;
  if ((v24 & 7) != 0)
  {
    unint64_t v3 = v24 & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v11 = v3;
    }
  }
  uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel((uint64_t *)&v7, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, v4);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength();
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v12);
  uint64_t v7 = (void **)v12;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  if (v18) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  }
  MEMORY[0x2455CEEA0](&v21);
  return v5;
}

void sub_23F58A3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)va1);
  va_copy((va_list)v4, va1);
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va3);
  MEMORY[0x2455CEEA0](v2 - 88);
  _Unwind_Resume(a1);
}

void sub_23F58A47C()
{
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyComputedBoundMaterial(uint64_t a1)
{
  unint64_t v1 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), v1, 0);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v4, &v5);
  uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  MEMORY[0x2455CEF40](v4);
  return v2;
}

void sub_23F58A524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _RIOPxrUsdShadeMaterialBindingAPICFFinalize(uint64_t (***a1)(void))
{
  return (*a1[2])();
}

BOOL _RIOPxrUsdShadeMaterialBindingAPICFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdShadeMaterialBindingAPICFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdShadeMaterialBindingAPICFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdShadeMaterialBindingAPI %p>", a1);
}

CFStringRef _RIOPxrUsdShadeMaterialBindingAPICFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdShadeMaterialBindingAPI %p>", a1);
}

void _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFFinalize(char *a1)
{
}

BOOL _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdShadeMaterialBindingAPICollectionBinding %p>", a1);
}

CFStringRef _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdShadeMaterialBindingAPICollectionBinding %p>", a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__base_destruct_at_end[abi:ne180100]((atomic_uint *)v2, (uint64_t)*v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

atomic_uint *std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__base_destruct_at_end[abi:ne180100](atomic_uint *result, uint64_t a2)
{
  unint64_t v3 = result;
  for (uint64_t i = *((void *)result + 1); i != a2; i -= 16)
  {
    uint64_t result = *(atomic_uint **)(i - 8);
    if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  *((void *)v3 + 1) = a2;
  return result;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    uint64_t v7[3] = v7[0] + 16 * v6;
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_23F58A7C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (atomic_uint *)__p[3];
    if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  for (uint64_t i = *(void *)(*(void *)(result + 8) + 8); v1 != i; v1 += 16)
  {
    uint64_t result = *(void *)(v1 + 8);
    if (result)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 16;
      uint64_t result = *(void *)(v2 - 8);
      if (result)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(uint64_t **)(result + 8);
  uint64_t v1 = *(uint64_t **)(result + 16);
  uint64_t v3 = *v1;
  for (uint64_t i = *v2; v3 != i; v3 -= 16)
  {
    uint64_t result = *(void *)(v3 - 8);
    if (result)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(atomic_uint **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  *(void *)a2 = 0;
  return a1;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator=(atomic_uint **a1, atomic_uint **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  if (*a2) {
    atomic_fetch_add_explicit(*a2 + 2, 1u, memory_order_relaxed);
  }
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,false>(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  long long v9 = (atomic_uint *)a2;
  uint64_t v10 = (atomic_uint *)result;
  unint64_t v27 = a2;
  uint64_t v28 = (atomic_uint *)result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = ((char *)v9 - (char *)v10) >> 4;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v27 = (unint64_t)(v9 - 4);
          unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)(v9 - 4));
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)v10);
          if (UniqueIdentifier < result) {
            uint64_t result = (unint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>((uint64_t *)&v28, (uint64_t *)&v27);
          }
          break;
        case 3uLL:
          unint64_t v27 = (unint64_t)(v9 - 4);
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v10, (uint64_t)(v10 + 4), (uint64_t)(v9 - 4));
          break;
        case 4uLL:
          unint64_t v27 = (unint64_t)(v9 - 4);
          uint64_t result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v10, (uint64_t)(v10 + 4), (uint64_t)(v10 + 8), (uint64_t)(v9 - 4));
          break;
        case 5uLL:
          unint64_t v27 = (unint64_t)(v9 - 4);
          uint64_t result = (unint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v10, (uint64_t)(v10 + 4), (uint64_t)(v10 + 8), (uint64_t)(v10 + 12), (uint64_t)(v9 - 4));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 383)
    {
      if (a5) {
        return (unint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v10, v9);
      }
      else {
        return (unint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v10, v9);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (uint64_t)(v9 - 4);
    if ((unint64_t)v12 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v10, (uint64_t)&v10[4 * (v13 >> 1)], v15);
      unint64_t v16 = v27;
      uint64_t v17 = 16 * v14 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)(v28 + 4), (uint64_t)v28 + v17, v27 - 32);
      uint64_t v18 = 16 * v14 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)(v28 + 8), (uint64_t)v28 + v18, v16 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v28 + v17, (uint64_t)&v28[4 * v14], (uint64_t)v28 + v18);
      uint64_t v26 = &v28[4 * v14];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>((uint64_t *)&v28, (uint64_t *)&v26);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)&v10[4 * (v13 >> 1)], (uint64_t)v10, v15);
      if (a5)
      {
LABEL_13:
        long long v9 = (atomic_uint *)v27;
        goto LABEL_14;
      }
    }
    uint64_t v19 = (uint64_t)v28;
    unint64_t v20 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)(v28 - 4));
    unint64_t v21 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v19);
    long long v9 = (atomic_uint *)v27;
    if (v20 >= v21)
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,std::__less<void,void> &>((uint64_t)v28, v27);
      uint64_t v10 = (atomic_uint *)result;
LABEL_22:
      a5 = 0;
      uint64_t v28 = v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,std::__less<void,void> &>((uint64_t)v28, (unint64_t)v9);
    if ((v23 & 1) == 0) {
      goto LABEL_21;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v28, v22);
    uint64_t v10 = (atomic_uint *)(v22 + 16);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v22 + 16, (uint64_t)v9);
    if (result)
    {
      if (v24) {
        return result;
      }
      unint64_t v27 = v22;
      uint64_t v10 = v28;
      long long v9 = (atomic_uint *)v22;
    }
    else
    {
      if (!v24)
      {
LABEL_21:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,false>(v28, v22, a3, -i, a5 & 1);
        uint64_t v10 = (atomic_uint *)(v22 + 16);
        goto LABEL_22;
      }
      uint64_t v28 = (atomic_uint *)(v22 + 16);
    }
  }
  if (v10 != v9) {
    return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v10, v9, (uint64_t)v9, a3);
  }
  return result;
}

atomic_uint *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v6 = *(_OWORD *)v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(v2, v3);
  uint64_t result = *(atomic_uint **)(v3 + 8);
  *(_OWORD *)uint64_t v3 = v6;
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    char v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v5();
  }
  return result;
}

atomic_uint *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(atomic_uint *result, atomic_uint *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (uint64_t)(result + 4);
    if (result + 4 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (uint64_t)result;
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = v4;
        unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v4);
        uint64_t result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v7);
        if (UniqueIdentifier < (unint64_t)result)
        {
          long long v13 = *(_OWORD *)v6;
          *(void *)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          uint64_t v9 = v5;
          while (1)
          {
            pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=((uint64_t)v3 + v9 + 16, (uint64_t)v3 + v9);
            if (!v9) {
              break;
            }
            unint64_t v10 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v13);
            unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)v3 + v9 - 16);
            v9 -= 16;
            if (v10 >= v11)
            {
              uint64_t v12 = (uint64_t)v3 + v9 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v12 = (uint64_t)v3;
LABEL_10:
          uint64_t result = *(atomic_uint **)(v12 + 8);
          *(_OWORD *)uint64_t v12 = v13;
          *((void *)&v13 + 1) = 0;
          if (result)
          {
            if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)result + 8))(result);
            }
            uint64_t result = (atomic_uint *)*((void *)&v13 + 1);
            *(void *)&long long v13 = 0;
            if (*((void *)&v13 + 1))
            {
              if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result); {
            }
              }
          }
        }
        uint64_t v4 = v6 + 16;
        v5 += 16;
      }
      while ((atomic_uint *)(v6 + 16) != a2);
    }
  }
  return result;
}

void sub_23F58B1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(atomic_uint *result, atomic_uint *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (uint64_t)result;
    for (uint64_t i = (uint64_t)(result + 4); (atomic_uint *)(v3 + 16) != a2; uint64_t i = v3 + 16)
    {
      uint64_t v5 = v3;
      uint64_t v3 = i;
      unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(i);
      uint64_t result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v5);
      if (UniqueIdentifier < (unint64_t)result)
      {
        long long v11 = *(_OWORD *)v3;
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        uint64_t v7 = v3;
        do
        {
          uint64_t v8 = v7 - 16;
          pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(v7, v7 - 16);
          unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v11);
          unint64_t v10 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v7 - 32);
          v7 -= 16;
        }
        while (v9 < v10);
        uint64_t result = *(atomic_uint **)(v8 + 8);
        *(_OWORD *)uint64_t v8 = v11;
        *((void *)&v11 + 1) = 0;
        if (result)
        {
          if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)result + 8))(result);
          }
          uint64_t result = (atomic_uint *)*((void *)&v11 + 1);
          *(void *)&long long v11 = 0;
          if (*((void *)&v11 + 1))
          {
            if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result); {
          }
            }
        }
      }
    }
  }
  return result;
}

void sub_23F58B354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t v17 = a3;
  unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a2);
  unint64_t v7 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a1);
  unint64_t v8 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a3);
  unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a2);
  if (UniqueIdentifier < v7)
  {
    if (v8 < v9)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v19, &v17);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v19, &v18);
    uint64_t v14 = v18;
    unint64_t v15 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v17);
    if (v15 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v14)) {
      return 1;
    }
    uint64_t v12 = &v18;
    long long v13 = &v17;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(v12, v13);
    return 2;
  }
  if (v8 < v9)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v18, &v17);
    uint64_t v10 = v19;
    unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v18);
    if (v11 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v10)) {
      return 1;
    }
    uint64_t v12 = &v19;
    long long v13 = &v18;
    goto LABEL_9;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  unint64_t v21 = a2;
  unint64_t v22 = a1;
  long long v20 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v20);
  if (UniqueIdentifier >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a2 - 16))
  {
    unint64_t v7 = a1 + 16;
    do
    {
      unint64_t v5 = v7;
      unint64_t v22 = v7;
      if (v7 >= v21) {
        break;
      }
      unint64_t v8 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v20);
      unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v5);
      unint64_t v7 = v5 + 16;
    }
    while (v8 >= v9);
  }
  else
  {
    unint64_t v5 = a1;
    do
    {
      v5 += 16;
      unint64_t v22 = v5;
      unint64_t v6 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v20);
    }
    while (v6 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v5));
  }
  unint64_t v10 = v21;
  if (v5 < v21)
  {
    do
    {
      v10 -= 16;
      unint64_t v21 = v10;
      unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v20);
    }
    while (v11 < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v10));
    unint64_t v5 = v22;
  }
  if (v5 < v10)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>((uint64_t *)&v22, (uint64_t *)&v21);
      do
      {
        v22 += 16;
        uint64_t v12 = v22;
        unint64_t v13 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v20);
      }
      while (v13 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v12));
      do
      {
        v21 -= 16;
        uint64_t v14 = v21;
        unint64_t v15 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v20);
      }
      while (v15 < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v14));
      unint64_t v5 = v22;
    }
    while (v22 < v21);
  }
  if (v5 - 16 != a1) {
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(a1, v5 - 16);
  }
  unint64_t v16 = *(atomic_uint **)(v5 - 8);
  *(_OWORD *)(v5 - 16) = v20;
  *((void *)&v20 + 1) = 0;
  if (!v16) {
    return v22;
  }
  if (atomic_fetch_add_explicit(v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)&v20 + 1);
  *(void *)&long long v20 = 0;
  unint64_t v18 = v22;
  if (*((void *)&v20 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return v18;
}

void sub_23F58B6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = 0;
  unint64_t v17 = a2;
  long long v16 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  do
  {
    unint64_t v18 = a1 + v3 + 16;
    unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v18);
    v3 += 16;
  }
  while (UniqueIdentifier < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v16));
  unint64_t v5 = v17;
  if (v3 == 16)
  {
    unint64_t v8 = a1 + 16;
    do
    {
      if (v8 >= v5) {
        break;
      }
      v5 -= 16;
      unint64_t v17 = v5;
      unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v5);
    }
    while (v9 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v16));
  }
  else
  {
    uint64_t v6 = v17 - 16;
    do
    {
      unint64_t v17 = v6;
      unint64_t v7 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v6);
      v6 -= 16;
    }
    while (v7 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v16));
    unint64_t v8 = v18;
  }
  unint64_t v10 = v8;
  if (v8 < v17)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>((uint64_t *)&v18, (uint64_t *)&v17);
      do
      {
        v18 += 16;
        unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v18);
      }
      while (v11 < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v16));
      do
      {
        v17 -= 16;
        unint64_t v12 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v17);
      }
      while (v12 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v16));
      unint64_t v10 = v18;
    }
    while (v18 < v17);
  }
  if (v10 - 16 != a1) {
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(a1, v10 - 16);
  }
  unint64_t v13 = *(atomic_uint **)(v10 - 8);
  *(_OWORD *)(v10 - 16) = v16;
  *((void *)&v16 + 1) = 0;
  if (v13)
  {
    if (atomic_fetch_add_explicit(v13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = *((void *)&v16 + 1);
    *(void *)&long long v16 = 0;
    if (*((void *)&v16 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  return v10 - 16;
}

void sub_23F58B930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a2;
  uint64_t v18 = a1;
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v17 = a2 - 16;
      unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a2 - 16);
      if (UniqueIdentifier < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v18, &v17);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, a1 + 16, a1 + 32);
      uint64_t v8 = a1 + 48;
      if (v8 == a2) {
        return 1;
      }
      int v9 = 0;
      break;
  }
  do
  {
    unint64_t v10 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v8);
    if (v10 < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v7))
    {
      long long v16 = *(_OWORD *)v8;
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      do
      {
        uint64_t v11 = v7;
        pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(v7 + 16, v7);
        if (v7 == v18) {
          break;
        }
        unint64_t v12 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v16);
        v7 -= 16;
      }
      while (v12 < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v11 - 16));
      unint64_t v13 = *(atomic_uint **)(v11 + 8);
      *(_OWORD *)uint64_t v11 = v16;
      *((void *)&v16 + 1) = 0;
      if (v13)
      {
        if (atomic_fetch_add_explicit(v13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 8))(v13);
        }
        uint64_t v14 = *((void *)&v16 + 1);
        uint64_t v15 = v17;
        *(void *)&long long v16 = 0;
        ++v9;
        if (*((void *)&v16 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        if (v9 == 8) {
          return v8 + 16 == v15;
        }
      }
      else if (++v9 == 8)
      {
        uint64_t v15 = v17;
        return v8 + 16 == v15;
      }
    }
    uint64_t v7 = v8;
    v8 += 16;
  }
  while (v8 != v17);
  return 1;
}

void sub_23F58BBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a2;
  uint64_t v15 = a1;
  uint64_t v12 = a4;
  uint64_t v13 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, a2, a3);
  unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a4);
  BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a3);
  if (UniqueIdentifier < (unint64_t)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v13, &v12);
    unint64_t v10 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v13);
    BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a2);
    if (v10 < (unint64_t)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v14, &v13);
      unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v14);
      BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a1);
      if (v11 < (unint64_t)result) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v15, &v14);
      }
    }
  }
  return result;
}

atomic_uint *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t v16 = a4;
  uint64_t v17 = a3;
  uint64_t v15 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, a2, a3, a4);
  unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a5);
  BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a4);
  if (UniqueIdentifier < (unint64_t)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v16, &v15);
    unint64_t v12 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v16);
    BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a3);
    if (v12 < (unint64_t)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v17, &v16);
      unint64_t v13 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v17);
      BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a2);
      if (v13 < (unint64_t)result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v18, &v17);
        unint64_t v14 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v18);
        BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a1);
        if (v14 < (unint64_t)result) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v19, &v18);
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(atomic_uint *a1, atomic_uint *a2, uint64_t a3, uint64_t a4)
{
  long long v20 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v7, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    uint64_t v19 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      uint64_t v13 = v6;
      do
      {
        unint64_t v14 = v20;
        unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v13);
        if (UniqueIdentifier < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)v14))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *&>(&v19, (uint64_t *)&v20);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v20, a4, v9, (uint64_t)v20);
        }
        uint64_t v13 = v19 + 16;
        uint64_t v19 = v13;
      }
      while (v13 != a3);
      uint64_t v7 = v20;
      uint64_t v8 = v6 - (void)v20;
    }
    if (v8 >= 17)
    {
      unint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v7, v6, a4, v16);
        v6 -= 16;
      }
      while (v16-- > 2);
      return v19;
    }
  }
  return a3;
}

atomic_uint *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(atomic_uint *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - (uint64_t)result) >> 4)
    {
      uint64_t v9 = (a4 - (uint64_t)result) >> 3;
      uint64_t v10 = v9 + 1;
      uint64_t v11 = (uint64_t)&result[4 * v9 + 4];
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3)
      {
        unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&result[4 * v9 + 4]);
        if (UniqueIdentifier < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v11 + 16))
        {
          v11 += 16;
          uint64_t v10 = v12;
        }
      }
      unint64_t v14 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v11);
      BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v5);
      if (v14 >= (unint64_t)result)
      {
        long long v19 = *(_OWORD *)v5;
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        do
        {
          uint64_t v15 = v11;
          pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(v5, v11);
          if (v7 < v10) {
            break;
          }
          uint64_t v16 = (2 * v10) | 1;
          uint64_t v11 = (uint64_t)&v6[4 * v16];
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v16;
          }
          else
          {
            unint64_t v17 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v6[4 * v16]);
            if (v17 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v11 + 16)) {
              uint64_t v10 = v16;
            }
            else {
              v11 += 16;
            }
          }
          unint64_t v18 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v11);
          uint64_t v5 = v15;
        }
        while (v18 >= pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v19));
        BOOL result = *(atomic_uint **)(v15 + 8);
        *(_OWORD *)uint64_t v15 = v19;
        *((void *)&v19 + 1) = 0;
        if (result)
        {
          if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)result + 8))(result);
          }
          BOOL result = (atomic_uint *)*((void *)&v19 + 1);
          *(void *)&long long v19 = 0;
          if (*((void *)&v19 + 1))
          {
            if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result); {
          }
            }
        }
      }
    }
  }
  return result;
}

void sub_23F58C128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(atomic_uint *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    uint64_t v8 = *(void *)result;
    uint64_t v7 = *((void *)result + 1);
    *(void *)BOOL result = 0;
    *((void *)result + 1) = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)result, a3, a4);
    uint64_t v10 = (void *)v9;
    if (v9 == a2 - 16)
    {
      BOOL result = *(atomic_uint **)(v9 + 8);
      void *v10 = v8;
      v10[1] = v7;
      if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 8);
        return (atomic_uint *)v13();
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(v9, a2 - 16);
      uint64_t v11 = (uint64_t)(v10 + 2);
      uint64_t v12 = *(atomic_uint **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v12 && atomic_fetch_add_explicit(v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
      }
      return std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v6, v11, a3, (v11 - (uint64_t)v6) >> 4);
    }
  }
  return result;
}

void sub_23F58C2C4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 8))(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 16 * v5 + 16;
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a1 + 16 * v5 + 16);
      if (UniqueIdentifier < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v8 + 16))
      {
        v8 += 16;
        uint64_t v9 = v10;
      }
    }
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(a1, v8);
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

atomic_uint *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(atomic_uint *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t)&result[4 * (v4 >> 1)];
    uint64_t v8 = a2 - 16;
    unint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v7);
    BOOL result = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v8);
    if (UniqueIdentifier < (unint64_t)result)
    {
      long long v12 = *(_OWORD *)v8;
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      do
      {
        uint64_t v10 = v7;
        pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator=(v8, v7);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (uint64_t)&v5[4 * v6];
        unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v7);
        uint64_t v8 = v10;
      }
      while (v11 < pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)&v12));
      BOOL result = *(atomic_uint **)(v10 + 8);
      *(_OWORD *)uint64_t v10 = v12;
      *((void *)&v12 + 1) = 0;
      if (result)
      {
        if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)result + 8))(result);
        }
        BOOL result = (atomic_uint *)*((void *)&v12 + 1);
        *(void *)&long long v12 = 0;
        if (*((void *)&v12 + 1))
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result); {
        }
          }
      }
    }
  }
  return result;
}

void sub_23F58C508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (atomic_uint *)v3[3];
    if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
    operator delete(v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void realityio::MultipleLayerMutex::lock(realityio::MultipleLayerMutex *this)
{
  uint64_t v2 = realityio::UsdLayerMutexTracker::instance(this);
  uint64_t v3 = *(void **)this;
  unint64_t v4 = (void *)*((void *)this + 1);
  if (v3 != v4)
  {
    uint64_t v5 = (uint64_t)v2;
    do
    {
      realityio::UsdLayerMutexTracker::writeMutexForLayer(v5, v3);
      std::recursive_mutex::lock(v6);
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void realityio::MultipleLayerMutex::unlock(realityio::MultipleLayerMutex *this)
{
  uint64_t v2 = realityio::UsdLayerMutexTracker::instance(this);
  uint64_t v3 = *(void **)this;
  unint64_t v4 = (void *)*((void *)this + 1);
  if (v3 != v4)
  {
    uint64_t v5 = (uint64_t)v2;
    do
    {
      realityio::UsdLayerMutexTracker::writeMutexForLayer(v5, v3);
      std::recursive_mutex::unlock(v6);
      v3 += 2;
    }
    while (v3 != v4);
  }
}

const void **realityio::createCGColor@<X0>(float32x4_t *a1@<X0>, void *a2@<X1>, CGColorRef *a3@<X8>)
{
  CFStringRef v15 = 0;
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    unint64_t v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      unint64_t v6 = *(const char **)v6;
    }
  }
  else
  {
    unint64_t v6 = "";
  }
  CFStringRef v15 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v6, 0x8000100u);
  unint64_t v14 = 0;
  CFStringRef v7 = (const __CFString *)MEMORY[0x2455CDE90](v15);
  CFTypeRef cf = v7;
  if (v7) {
    uint64_t v8 = CGColorSpaceCreateWithName(v7);
  }
  else {
    uint64_t v8 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002C8]);
  }
  uint64_t v9 = v8;
  unint64_t v14 = v8;
  float64x2_t v10 = vcvt_hight_f64_f32(*a1);
  v12[0] = vcvtq_f64_f32(*(float32x2_t *)a1->f32);
  v12[1] = v10;
  *a3 = 0;
  *a3 = CGColorCreate(v8, (const CGFloat *)v12);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
  unint64_t v14 = 0;
  if (v9) {
    CGColorSpaceRelease(v9);
  }
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v15);
}

void sub_23F58C7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, const void *);
  realityio::WrappedCFRef<CGColor *>::~WrappedCFRef(v6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  std::unique_ptr<CGColorSpace,realityio::ColorDeleter>::reset[abi:ne180100]((CGColorSpace **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v7 - 40));
  _Unwind_Resume(a1);
}

void std::unique_ptr<CGColorSpace,realityio::ColorDeleter>::reset[abi:ne180100](CGColorSpace **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    CGColorSpaceRelease(v2);
  }
}

const void **realityio::WrappedCFRef<CGColor *>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t RIOImportSessionGetInstanceCount()
{
}

uint64_t RIOImportSessionGetPrimPathComponentType()
{
  return v0;
}

uint64_t RIOImportSessionGetTypeID()
{
  if (qword_268C40480 != -1) {
    dispatch_once(&qword_268C40480, &__block_literal_global_6);
  }
  return _MergedGlobals_11;
}

void __RIOImportSessionGetTypeID_block_invoke()
{
  if (!_MergedGlobals_11) {
    _MergedGlobals_11 = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOImportSessionCreateWithEngine(uint64_t a1)
{
  if (a1) {
    RIOPxrUsdStageCreateInMemory();
  }
  return 0;
}

void sub_23F58CA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::recursive_mutex::unlock(v14);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>(uint64_t *a1, uint64_t *a2, uint64_t a3, int *a4, unsigned int *a5)
{
  if (qword_268C40480 != -1) {
    dispatch_once(&qword_268C40480, &__block_literal_global_6);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v12 = *a1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(&v12);
    realityio::ImportSession::ImportSession(Instance + 16, (uint64_t)&v12, *a2, a3, *a4, *a5, 0, 1);
  }
  return 0;
}

void sub_23F58CBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreateWithURL(void *a1, uint64_t a2, int a3, int a4)
{
  return RIOImportSessionCreateWithURLWithErrorReporting(a1, a2, a3, a4);
}

uint64_t RIOImportSessionCreateWithURLWithErrorReporting(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v22 = a2;
  if (!a2) {
    return 0;
  }
  unint64_t v6 = (void *)RIOPxrUsdStageCreateWithFileURLWithErrorReporting(a1);
  CFTypeRef cf = v6;
  if (v6)
  {
    long long v20 = (atomic_uint *)v6[2];
    uint64_t v7 = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v20);
    uint64_t v8 = realityio::UsdLayerMutexTracker::instance(v7);
    if (v20)
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v20);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
      uint64_t v11 = EditTarget[1];
      uint64_t v23 = *EditTarget;
      uint64_t v24 = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
    }
    double v13 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v8, &v23);
    CFStringRef v15 = v14;
    uint64_t v16 = v24;
    if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v16 + 8))(v16, v13);
    }
    std::recursive_mutex::lock(v15);
    if (v20)
    {
      int v17 = 2 * (a3 == 2);
      if (a3 == 1) {
        int v17 = 1;
      }
      LODWORD(v23) = v17;
      BOOL v19 = a4 != 0;
      uint64_t v12 = RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>((uint64_t *)&v20, &v22, (uint64_t)&cf, (int *)&v23, (unsigned int *)&v19);
    }
    else
    {
      uint64_t v12 = 0;
    }
    std::recursive_mutex::unlock(v15);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v20);
  }
  else
  {
    uint64_t v12 = 0;
  }
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&cf);
  return v12;
}

void sub_23F58CD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::recursive_mutex::unlock(v14);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a10);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreateSingleUseImporterWithURL(void *a1, uint64_t a2, int a3, int a4)
{
  return RIOImportSessionCreateSingleUseImporterWithURLWithErrorReporting(a1, a2, a3, a4);
}

uint64_t RIOImportSessionCreateSingleUseImporterWithURLWithErrorReporting(void *a1, uint64_t a2, int a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = (void *)RIOPxrUsdStageCreateWithFileURLWithErrorReporting(a1);
  CFTypeRef cf = v7;
  if (v7)
  {
    unint64_t v21 = (atomic_uint *)v7[2];
    uint64_t v8 = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v21);
    uint64_t v9 = realityio::UsdLayerMutexTracker::instance(v8);
    if (v21)
    {
      float64x2_t v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v21);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v10);
      uint64_t v12 = EditTarget[1];
      uint64_t v23 = (atomic_uint *)*EditTarget;
      uint64_t v24 = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
    }
    double v14 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v9, &v23);
    uint64_t v16 = v15;
    uint64_t v17 = v24;
    if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v17 + 8))(v17, v14);
    }
    std::recursive_mutex::lock(v16);
    if (v21)
    {
      if (a3 == 1) {
        int v18 = 1;
      }
      else {
        int v18 = 2 * (a3 == 2);
      }
      BOOL v19 = a4 != 0;
      if (qword_268C40480 != -1) {
        dispatch_once(&qword_268C40480, &__block_literal_global_6);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        uint64_t v23 = v21;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v23);
        realityio::ImportSession::ImportSession(Instance + 16, (uint64_t)&v23, a2, (uint64_t)&cf, v18, v19, 1, 1);
      }
    }
    else
    {
      uint64_t Instance = 0;
    }
    std::recursive_mutex::unlock(v16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v21);
  }
  else
  {
    uint64_t Instance = 0;
  }
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&cf);
  return Instance;
}

void sub_23F58D004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9, const void *a10, atomic_uint *a11)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a11);
  std::recursive_mutex::unlock(v11);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a9);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreateWithStage(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0;
  uint64_t v21 = a2;
  if (a1 && a2)
  {
    long long v20 = a1;
    uint64_t v8 = (realityio::UsdLayerMutexTracker *)CFRetain(a1);
    uint64_t v9 = realityio::UsdLayerMutexTracker::instance(v8);
    if (a1[2])
    {
      float64x2_t v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1 + 2);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v10);
      uint64_t v12 = EditTarget[1];
      uint64_t v22 = *EditTarget;
      uint64_t v23 = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
    }
    double v13 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v9, &v22);
    CFStringRef v15 = v14;
    uint64_t v16 = v23;
    if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v16 + 8))(v16, v13);
    }
    std::recursive_mutex::lock(v15);
    if (a1[2])
    {
      int v17 = 2 * (a3 == 2);
      if (a3 == 1) {
        int v17 = 1;
      }
      LODWORD(v22) = v17;
      BOOL v19 = a4 != 0;
      uint64_t v4 = RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>(a1 + 2, &v21, (uint64_t)&v20, (int *)&v22, (unsigned int *)&v19);
    }
    else
    {
      uint64_t v4 = 0;
    }
    std::recursive_mutex::unlock(v15);
    realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)&v20);
  }
  return v4;
}

void sub_23F58D1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::recursive_mutex::unlock(v14);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreateSingleUseImporterWithStage(uint64_t *a1, uint64_t a2, int a3, int a4, char a5)
{
  uint64_t Instance = 0;
  if (a1 && a2)
  {
    int v25 = a1;
    uint64_t v11 = (realityio::UsdLayerMutexTracker *)CFRetain(a1);
    uint64_t v12 = realityio::UsdLayerMutexTracker::instance(v11);
    uint64_t v14 = a1[2];
    double v13 = a1 + 2;
    if (v14)
    {
      CFStringRef v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v13);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v15);
      uint64_t v17 = EditTarget[1];
      uint64_t v26 = *EditTarget;
      uint64_t v27 = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    double v18 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v12, &v26);
    long long v20 = v19;
    uint64_t v21 = v27;
    if (v27 && atomic_fetch_add_explicit((atomic_uint *volatile)(v27 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v21 + 8))(v21, v18);
    }
    std::recursive_mutex::lock(v20);
    if (*v13)
    {
      if (a3 == 1) {
        int v22 = 1;
      }
      else {
        int v22 = 2 * (a3 == 2);
      }
      BOOL v23 = a4 != 0;
      if (qword_268C40480 != -1) {
        dispatch_once(&qword_268C40480, &__block_literal_global_6);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        uint64_t v26 = *v13;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(&v26);
        realityio::ImportSession::ImportSession(Instance + 16, (uint64_t)&v26, a2, (uint64_t)&v25, v22, v23, 1, a5);
      }
    }
    else
    {
      uint64_t Instance = 0;
    }
    std::recursive_mutex::unlock(v20);
    realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)&v25);
  }
  return Instance;
}

void sub_23F58D41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, const void *);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va1);
  std::recursive_mutex::unlock(v2);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionGetRootEntity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))();
}

uint64_t RIOImportSessionGetStage(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 32) + 8);
}

void *RIOImportSessionQueueAssetForLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (a2) {
    RERetain();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 40);
  if (v3) {
    realityio::LiveSceneManager::queueForDeferredAssetLoad(v3, &v5);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
}

void sub_23F58D520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26F336DD0;
  v4[1] = MEMORY[0x2455D3180](a2);
  uint64_t v4[3] = v4;
  realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(a1 + 16, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_23F58D5C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  realityio::ImportSessionImpl::performBlockPostAssetLoadOnEngineQueue(v2, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_23F58D64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  v6[0] = &unk_26F336E50;
  v6[1] = MEMORY[0x2455D3180](a2);
  v6[3] = v6;
  uint64_t v3 = *(void *)(a1 + 32);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)v6);
  uint64_t v4 = *(void *)(v3 + 40);
  if (v4)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v7);
    std::function<void ()(void)>::operator=((void *)(*(void *)(v4 + 464) + 72), (uint64_t)v9);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
}

void sub_23F58D76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionGetSwiftObject(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t RIOImportSessionSetSwiftObject(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = result;
  uint64_t v10 = *(void *)(result + 24);
  if (v10 != a2 && v10 != 0)
  {
    BOOL result = realityio::internal::assertHandler(1u, "(mSwiftObject == object || mSwiftObject == nullptr)", "setSwiftObject", 662, 1, a6, a7, a8, (uint64_t)"The swift object associated with a CoreRealityIO Import Session can only be assigned once, and then it is fixed.", v12);
    if (result == 1)
    {
      BOOL result = raise(5);
    }
    else if (result == 2)
    {
      abort();
    }
  }
  *(void *)(v9 + 24) = a2;
  return result;
}

uint64_t RIOImportSessionUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), 0);
}

uint64_t RIOImportSessionUpdateSynchronouslyOnEngineQueue(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), 1);
}

void *RIOImportSessionSetSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = v5;
    v5[0] = &unk_26F336ED0;
    v5[1] = MEMORY[0x2455D3180](a2);
    v5[3] = v5;
    realityio::ImportSession::setSceneUpdatePassCompletion(*(void *)(a1 + 32), (uint64_t)v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v3 = v6;
    realityio::ImportSession::setSceneUpdatePassCompletion(*(void *)(a1 + 32), (uint64_t)v6);
  }
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
}

void sub_23F58D93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *realityio::ImportSession::setSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 32))(a1, v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_23F58D9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionUpdateRequestCancel(uint64_t result)
{
  return result;
}

void *RIOImportSessionSetRegistrationForScenes(uint64_t a1, uint64_t a2, void *a3)
{
  v24[3] = *MEMORY[0x263EF8340];
  id v5 = a3;
  v19[0] = &unk_26F336F50;
  v19[1] = MEMORY[0x2455D3180](a2);
  void v19[3] = v19;
  uint64_t v6 = MEMORY[0x2455D3180](v5);

  v18[0] = &unk_26F336FE0;
  v18[1] = v6;
  v18[3] = v18;
  uint64_t v7 = *(void **)(a1 + 32);
  std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v19);
  std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v18);
  uint64_t v8 = std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v21);
  uint64_t v9 = v7 + 9;
  if (v22 != v7 + 9)
  {
    uint64_t v10 = v23;
    uint64_t v11 = (void *)v7[12];
    if (v23 == v22)
    {
      if (v11 == v9)
      {
        (*(void (**)(uint64_t, void *))(v22[0] + 24))(v8, v24);
        (*(void (**)(void *))(*v23 + 32))(v23);
        BOOL v23 = 0;
        (*(void (**)(void, void *))(*(void *)v7[12] + 24))(v7[12], v22);
        (*(void (**)(void))(*(void *)v7[12] + 32))(v7[12]);
        v7[12] = 0;
        BOOL v23 = v22;
        (*(void (**)(void *, void *))(v24[0] + 24))(v24, v7 + 9);
        (*(void (**)(void *))(v24[0] + 32))(v24);
      }
      else
      {
        (*(void (**)(uint64_t, void *))(v22[0] + 24))(v8, v7 + 9);
        (*(void (**)(void *))(*v23 + 32))(v23);
        BOOL v23 = (void *)v7[12];
      }
      v7[12] = v9;
    }
    else if (v11 == v9)
    {
      (*(void (**)(void *, void *))(*v9 + 24))(v7 + 9, v22);
      (*(void (**)(void))(*(void *)v7[12] + 32))(v7[12]);
      v7[12] = v23;
      BOOL v23 = v22;
    }
    else
    {
      BOOL v23 = (void *)v7[12];
      v7[12] = v10;
    }
  }
  uint64_t v12 = std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::~__value_func[abi:ne180100](v22);
  uint64_t v13 = std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v20);
  uint64_t v14 = v7 + 13;
  if (v22 != v7 + 13)
  {
    CFStringRef v15 = v23;
    uint64_t v16 = (void *)v7[16];
    if (v23 == v22)
    {
      if (v16 == v14)
      {
        (*(void (**)(uint64_t, void *))(v22[0] + 24))(v13, v24);
        (*(void (**)(void *))(*v23 + 32))(v23);
        BOOL v23 = 0;
        (*(void (**)(void, void *))(*(void *)v7[16] + 24))(v7[16], v22);
        (*(void (**)(void))(*(void *)v7[16] + 32))(v7[16]);
        unsigned char v7[16] = 0;
        BOOL v23 = v22;
        (*(void (**)(void *, void *))(v24[0] + 24))(v24, v7 + 13);
        (*(void (**)(void *))(v24[0] + 32))(v24);
      }
      else
      {
        (*(void (**)(uint64_t, void *))(v22[0] + 24))(v13, v7 + 13);
        (*(void (**)(void *))(*v23 + 32))(v23);
        BOOL v23 = (void *)v7[16];
      }
      unsigned char v7[16] = v14;
    }
    else if (v16 == v14)
    {
      (*(void (**)(void *, void *))(*v14 + 24))(v7 + 13, v22);
      (*(void (**)(void))(*(void *)v7[16] + 32))(v7[16]);
      unsigned char v7[16] = v23;
      BOOL v23 = v22;
    }
    else
    {
      BOOL v23 = (void *)v7[16];
      unsigned char v7[16] = v15;
    }
  }
  std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__value_func[abi:ne180100](v22);
  std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__value_func[abi:ne180100](v18);
  return std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::~__value_func[abi:ne180100](v19);
}

void sub_23F58DF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOEntityUsingMaterialCreateFromMtlxURLWithErrorReporting(uint64_t a1, realityio::MaterialXStandalone *a2, const __CFURL *a3, uint64_t a4)
{
  return RIOEntityUsingMaterialCreateFromMtlxURLWithFiles(a1, a2, a3, a4, 0);
}

uint64_t RIOEntityUsingMaterialCreateFromMtlxURLWithFiles(uint64_t a1, realityio::MaterialXStandalone *a2, const __CFURL *a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  realityio::MaterialXStandalone::makeSource(a2, a3, (uint64_t)v14);
  if (v14[0])
  {
    uint64_t v9 = (std::__shared_weak_count *)v16;
    v12[0] = v15;
    v12[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    sourceToEntity(&v13, a1, v12, v8);
    uint64_t v10 = v13;
    uint64_t v13 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v13);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v14);

  return v10;
}

void sub_23F58E080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)va);

  _Unwind_Resume(a1);
}

void sourceToEntity(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = *a3;
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  v11[0] = v9;
  v11[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = 0;
  if (v7)
  {
    v13[0] = &unk_26F336C58;
    v13[1] = MEMORY[0x2455D3180](v7);
    uint64_t v14 = v13;
  }
  realityio::MaterialXStandalone::generateSyncOnEngineQueue(a2, v11, (uint64_t)v13, &v12);
  std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](v13);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v12) {
    assetToEntity(a1);
  }
  else {
    *a1 = 0;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v12);
}

void sub_23F58E1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferWithErrorReporting(uint64_t a1, uint64_t a2, char *a3, realityio::MaterialXStandalone *a4, uint64_t a5)
{
  return RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferWithFiles(a1, a2, a3, a4, a5, 0);
}

uint64_t RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferWithFiles(uint64_t a1, uint64_t a2, char *a3, realityio::MaterialXStandalone *a4, uint64_t a5, void *a6)
{
  id v9 = a6;
  realityio::MaterialXStandalone::makeSource(a4, a3, (uint64_t)v15);
  if (v15[0])
  {
    uint64_t v10 = (std::__shared_weak_count *)v17;
    v13[0] = v16;
    v13[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    sourceToEntity(&v14, a1, v13, v9);
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v14);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v15);

  return v11;
}

void sub_23F58E2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)va);

  _Unwind_Resume(a1);
}

void RIOEntityUsingMaterialCreateFromMtlxURLAsync(uint64_t a1, const void *a2, char *a3, void *a4)
{
}

void RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles(uint64_t a1, const void *a2, char *a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a5;
  uint64_t v26 = a2;
  if (a2) {
    CFRetain(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, a3);
  uint64_t v24 = a1;
  if (a1)
  {
    RERetain();
    uint64_t v11 = v24;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = dispatch_get_global_queue(21, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = __RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles_block_invoke;
  block[3] = &__block_descriptor_88_ea8_32c66_ZTSKZ53RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFilesE3__0_e5_v8__0l;
  uint64_t v13 = v11;
  if (v11) {
    RERetain();
  }
  CFTypeRef cf = v26;
  if (v26) {
    CFRetain(v26);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v25;
  }
  id v16 = (id)MEMORY[0x2455D3180](v9);
  id v17 = (id)MEMORY[0x2455D3180](v10);
  uint64_t v19 = v13;
  if (v13) {
    RERetain();
  }
  CFTypeRef v20 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v21 = __p;
  }
  id v22 = (id)MEMORY[0x2455D3180](v16);
  id v23 = (id)MEMORY[0x2455D3180](v17);
  dispatch_async(v12, block);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(&cf);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v13);

  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(&v20);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v19);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v24);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(&v26);
}

void sub_23F58E568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  id v8 = v6;
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(v8);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v5);
  RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles::$_0::~$_0((RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles::$_0 *)va);

  realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)(v7 - 104));
  if (*(char *)(v7 - 73) < 0) {
    operator delete(*(void **)(v7 - 96));
  }
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)(v7 - 72));

  _Unwind_Resume(a1);
}

uint64_t __RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(realityio::MaterialXStandalone **)(a1 + 40);
  CFURLRef v3 = (const __CFURL *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    CFURLRef v3 = *(const __CFURL **)v3;
  }
  realityio::MaterialXStandalone::makeSource(v2, v3, (uint64_t)v7);
  uint64_t v4 = *(void *)(a1 + 32);
  realityio::Result<std::shared_ptr<realityio::mtlx::NeoDataSource>,realityio::DetailedError>::Result(v6, v7);
  sourceAsync(v4, (uint64_t)v6, *(void **)(a1 + 72), *(void **)(a1 + 80));
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v6);
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v7);
}

void sub_23F58E680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t __copy_helper_block_ea8_32c66_ZTSKZ53RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFilesE3__0(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__l.__size_ = v4;
  if (v4) {
    RERetain();
  }
  id v5 = *(const void **)(a2 + 40);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1[3].__r_.__value_.__r.__words[0] = MEMORY[0x2455D3180](*(void *)(a2 + 72));
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a2 + 80));
  a1[3].__r_.__value_.__l.__size_ = result;
  return result;
}

void sub_23F58E734(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(v2);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c66_ZTSKZ53RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFilesE3__0(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)(a1 + 40));

  return realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)(a1 + 32));
}

void RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles::$_0::~$_0(RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles::$_0 *this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)this + 1);

  realityio::WrappedRERef<REEngine *>::~WrappedRERef(this);
}

void RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsync(uint64_t a1, const void *a2, char *a3, char *a4, void *a5)
{
}

void RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles(uint64_t a1, const void *a2, char *a3, char *a4, void *a5, void *a6)
{
  id v11 = a5;
  id v12 = a6;
  unint64_t v32 = a2;
  if (a2) {
    CFRetain(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, a3);
  std::string::basic_string[abi:ne180100]<0>(&v30, a4);
  uint64_t v29 = a1;
  if (a1)
  {
    RERetain();
    uint64_t v13 = v29;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = dispatch_get_global_queue(21, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = __RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles_block_invoke;
  block[3] = &__block_descriptor_112_ea8_32c81_ZTSKZ68RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFilesE3__0_e5_v8__0l;
  uint64_t v15 = v13;
  if (v13) {
    RERetain();
  }
  id v16 = v32;
  if (v32) {
    CFRetain(v32);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v31;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v30;
  }
  id v19 = (id)MEMORY[0x2455D3180](v11);
  id v20 = (id)MEMORY[0x2455D3180](v12);
  RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0::$_0((uint64_t)&v22, &v15);
  dispatch_async(v14, block);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v16);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v15);

  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete((void *)v23[1]);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v23);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v22);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v32);
}

void sub_23F58EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v19);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&a9);

  realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)(v20 - 128));
  if (*(char *)(v20 - 97) < 0) {
    operator delete(*(void **)(v20 - 120));
  }
  if (*(char *)(v20 - 73) < 0) {
    operator delete(*(void **)(v20 - 96));
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(v20 - 72));

  _Unwind_Resume(a1);
}

uint64_t __RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(realityio::MaterialXStandalone **)(a1 + 40);
  CFURLRef v3 = (char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    CFURLRef v3 = *(char **)v3;
  }
  realityio::MaterialXStandalone::makeSource(v2, v3, (uint64_t)v7);
  uint64_t v4 = *(void *)(a1 + 32);
  realityio::Result<std::shared_ptr<realityio::mtlx::NeoDataSource>,realityio::DetailedError>::Result(v6, v7);
  sourceAsync(v4, (uint64_t)v6, *(void **)(a1 + 96), *(void **)(a1 + 104));
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v6);
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v7);
}

void sub_23F58EBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t __copy_helper_block_ea8_32c81_ZTSKZ68RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFilesE3__0(uint64_t a1, uint64_t a2)
{
  return RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0::$_0(a1 + 32, (uint64_t *)(a2 + 32));
}

uint64_t RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0::$_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if (v4) {
    RERetain();
  }
  id v5 = (const void *)a2[1];
  *(void *)(a1 + 8) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v6;
  }
  long long v7 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)a2[5], a2[6]);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 5);
    *(void *)(a1 + 56) = a2[7];
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(void *)(a1 + 64) = MEMORY[0x2455D3180](a2[8]);
  *(void *)(a1 + 72) = MEMORY[0x2455D3180](a2[9]);
  return a1;
}

void sub_23F58ECB0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v3);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v2);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_32c81_ZTSKZ68RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFilesE3__0(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(a1 + 40));

  return realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)(a1 + 32));
}

void RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0::~$_0(RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0 *this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)this + 1);

  realityio::WrappedRERef<REEngine *>::~WrappedRERef(this);
}

uint64_t MaterialToEntity::setup(uint64_t *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  long long v8 = (atomic_uint *)*a1;
  *a1 = a4[2];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(a4 + 2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)a1, v8);
  CFRelease(a4);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  id v9 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v36;
  unint64_t v36 = 0;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)(a1 + 1), v9);
  id v10 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v36);
  std::string::basic_string[abi:ne180100]<0>(v10, "/root");
  MEMORY[0x2455CF7A0](v40, &v36);
  if ((v38[7] & 0x80000000) != 0) {
    operator delete(v36);
  }
  id v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/root/cube");
  MEMORY[0x2455CF7A0](&v28, &__p);
  MEMORY[0x2455CF810](v23, "Cube");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)&v36, v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)v23);
  if (((uint64_t)v23[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  if ((v34[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  id v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&v28, a3);
  MEMORY[0x2455CF7A0](&v26, &v28);
  NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)v40, NameToken);
  v22[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)&__p, v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)v22);
  if ((v22[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  if ((v30[7] & 0x80000000) != 0) {
    operator delete(v28);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)&v28, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(&v26, v14);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v26);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
  std::string::basic_string[abi:ne180100]<0>(v23, a3);
  MEMORY[0x2455CF7A0](v25, v23);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v22, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  uint64_t v16 = v27;
  if (v27 && atomic_fetch_add_explicit((atomic_uint *volatile)(v27 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  MEMORY[0x2455CF810](v23, "material:binding");
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)v23);
  if (((uint64_t)v23[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, v23);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
  std::string v17 = (uint64_t *)RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(a1 + 1);
  double v18 = (const void *)a1[2];
  if (v18) {
    CFRelease(v18);
  }
  a1[2] = (uint64_t)v17;
  uint64_t v19 = RIOImportSessionCreateWithStage(v17, a2, 0, 0);
  uint64_t v20 = (const void *)a1[3];
  if (v20) {
    CFRelease(v20);
  }
  a1[3] = v19;
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v34);
  if (v33) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
  }
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v38);
  if (v37) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v40);
}

void sub_23F58F240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a31);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v36 - 88));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v36 - 56));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdReferences::~UsdReferences(pxrInternal__aapl__pxrReserved__::UsdReferences *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

uint64_t RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(void *a1)
{
  if (RIOPxrUsdStageGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = *a1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(Instance + 16));
    *(void *)(v3 + 24) = 0;
    *(void *)(v3 + 32) = 0;
  }
  return v3;
}

void MaterialToEntity::setup(int a1, int a2, const char *a3, int a4, CFDataRef theData)
{
}

uint64_t MaterialToEntity::getModelEntity(MaterialToEntity *this, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if (result && (uint64_t result = REEntityGetChildCount()) != 0)
  {
    uint64_t result = REEntityGetChild();
    *(void *)this = result;
    if (result)
    {
      return RERetain();
    }
  }
  else
  {
    *(void *)this = 0;
  }
  return result;
}

uint64_t RIOEntityUsingMaterialCreateFromURLWithErrorReporting(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = (realityio *)[v2 isFileURL];
  if (v3)
  {
    uint64_t v8 = 0;
    *(_OWORD *)long long buf = 0u;
    long long v7 = 0u;
    RIOPxrUsdStageCreateWithFilePathWithErrorReporting([v2 fileSystemRepresentation]);
  }
  uint64_t v4 = *(NSObject **)(realityio::logObjects(v3) + 32);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", buf, 2u);
  }

  return 0;
}

void sub_23F58F764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MaterialToEntity::~MaterialToEntity((MaterialToEntity *)va);

  _Unwind_Resume(a1);
}

void RIOEntityUsingMaterialCreateFromURLAsync(uint64_t a1, void *a2, char *a3, void *a4)
{
  id v7 = a4;
  id v8 = a2;
  id v9 = (realityio *)[v8 isFileURL];
  if (v9)
  {
    uint64_t v23 = a1;
    if (a1) {
      RERetain();
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, (char *)[v8 fileSystemRepresentation]);
    std::string::basic_string[abi:ne180100]<0>(&v21, a3);
    id v10 = (char *)operator new(0x40uLL);
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 1) = 0;
    *(void *)id v10 = &unk_26F337070;
    *(_OWORD *)(v10 + 40) = 0u;
    *((void *)v10 + 7) = 0;
    *(_OWORD *)(v10 + 24) = 0u;
    id v11 = dispatch_get_global_queue(21, 0);
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3321888768;
    v14[2] = __RIOEntityUsingMaterialCreateFromURLAsync_block_invoke_2;
    v14[3] = &unk_26F336BE0;
    uint64_t v16 = v10 + 24;
    std::string v17 = (std::__shared_weak_count *)v10;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    uint64_t v18 = v23;
    if (v23) {
      RERetain();
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v19, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else {
      std::string v19 = buf;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v21;
    }
    id v15 = v7;
    dispatch_async(v11, v14);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v18);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v23);
  }
  else
  {
    id v12 = *(NSObject **)(realityio::logObjects(v9) + 32);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", (uint8_t *)&buf, 2u);
    }
    REEngineConfigurationCreateFromEngine();
    uint64_t v13 = REEngineConfigurationGetEngineQueue();
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __RIOEntityUsingMaterialCreateFromURLAsync_block_invoke;
    block[3] = &unk_265071B88;
    id v25 = v7;
    dispatch_async(v13, block);
  }
}

void sub_23F58FA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v42);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)(v43 - 112));

  _Unwind_Resume(a1);
}

void __RIOEntityUsingMaterialCreateFromURLAsync_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "CoreRealityIO only supports loading content from file URLs");
  CFErrorRef Error = realityio::createError((uint64_t)__p);
  (*(void (**)(uint64_t, void, CFErrorRef))(v1 + 16))(v1, 0, Error);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F58FB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __RIOEntityUsingMaterialCreateFromURLAsync_block_invoke_2(uint64_t a1)
{
  id v2 = (void *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    id v2 = (void *)*v2;
  }
  RIOPxrUsdStageCreateWithFilePathWithErrorReporting((uint64_t)v2);
}

void sub_23F58FD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *MaterialToEntity::evaluateAsync(void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*a1 + 24);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3321888768;
  _OWORD v7[2] = ___ZN16MaterialToEntity13evaluateAsyncENSt3__110shared_ptrIS_EENS0_8functionIFvP8REEntityP9__CFErrorEEE_block_invoke;
  void v7[3] = &__block_descriptor_80_ea8_32c47_ZTSNSt3__18functionIFvP8REEntityP9__CFErrorEEE64c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE_e5_v8__0l;
  std::__function::__value_func<void ()(REEntity *,__CFError *)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  char v4 = (std::__shared_weak_count *)a1[1];
  v8[4] = *a1;
  id v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIOImportSessionSetSceneUpdatePassCompletion(v3, (uint64_t)v7);
  uint64_t v5 = *(void *)(*(void *)(*a1 + 24) + 32);
  (*(void (**)(uint64_t, void))(*(void *)v5 + 24))(v5, 0);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return std::__function::__value_func<void ()(REEntity *,__CFError *)>::~__value_func[abi:ne180100](v8);
}

void sub_23F58FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__function::__value_func<void ()(REEntity *,__CFError *)>::~__value_func[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void sub_23F58FF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedCFRef<__CFError *>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void __copy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE56c42_ZTSN9realityio12WrappedRERefIP8REEngineEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  if (v5) {
    RERetain();
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  id v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_23F590068(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE56c42_ZTSN9realityio12WrappedRERefIP8REEngineEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 56);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void RIOEntityUsingMaterialCreateFromInMemoryDataBufferWithErrorReporting(int a1, const char *a2, int a3, CFDataRef theData)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  MaterialToEntity::setup((int)v4, a1, a2, a3, theData);
}

void sub_23F5901FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MaterialToEntity::~MaterialToEntity((MaterialToEntity *)va);
  _Unwind_Resume(a1);
}

void RIOEntityUsingMaterialCreateFromInMemoryDataBufferAsync(uint64_t a1, char *a2, char *a3, const void *a4, void *a5)
{
  id v9 = a5;
  uint64_t v24 = a1;
  if (a1) {
    RERetain();
  }
  uint64_t v23 = a4;
  if (a4) {
    CFRetain(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, a2);
  std::string::basic_string[abi:ne180100]<0>(&v21, a3);
  uint64_t v10 = (char *)operator new(0x40uLL);
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 1) = 0;
  *(void *)uint64_t v10 = &unk_26F337070;
  *(_OWORD *)(v10 + 40) = 0u;
  *((void *)v10 + 7) = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  id v11 = dispatch_get_global_queue(21, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = __RIOEntityUsingMaterialCreateFromInMemoryDataBufferAsync_block_invoke;
  block[3] = &unk_26F336C18;
  id v15 = v10 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v10;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  uint64_t v17 = v24;
  if (v24) {
    RERetain();
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = v22;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v21;
  }
  uint64_t v20 = v23;
  if (v23) {
    CFRetain(v23);
  }
  id v12 = v9;
  id v14 = v12;
  dispatch_async(v11, block);

  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v17);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v23);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v24);
}

void sub_23F59046C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v39);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v40 - 81) < 0) {
    operator delete(*(void **)(v40 - 104));
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(v40 - 80));
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)(v40 - 72));

  _Unwind_Resume(a1);
}

void __RIOEntityUsingMaterialCreateFromInMemoryDataBufferAsync_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  uint64_t v4 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  MaterialToEntity::setup(v2, *(void *)(a1 + 56), v3, (int)v4, *(CFDataRef *)(a1 + 112));
}

void sub_23F5906E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23F59078C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedCFRef<__CFError *>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE56c42_ZTSN9realityio12WrappedRERefIP8REEngineEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c43_ZTSN9realityio12WrappedCFRefIPK8__CFDataEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  if (v5) {
    RERetain();
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 112);
  *(void *)(a1 + 112) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_23F590870(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE56c42_ZTSN9realityio12WrappedRERefIP8REEngineEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c43_ZTSN9realityio12WrappedCFRefIPK8__CFDataEE(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 56);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

unint64_t RIOImportSessionGetSceneCount(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  getImportedScenes(a1, &v3);
  unint64_t v1 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 4);
  long long v6 = (void **)&v3;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v6);
  return v1;
}

void sub_23F5909AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

atomic_uint **getImportedScenes(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      v5 -= 80;
      std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v5);
    }
    while (v5 != v4);
  }
  a2[1] = v4;
  long long v6 = *(void **)(a1 + 32);
  uint64_t v8 = v6[5];
  long long v7 = (std::__shared_weak_count *)v6[6];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    id v9 = *(realityio::BuilderDependencyDAG **)(v8 + 248);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    long long v6 = *(void **)(a1 + 32);
  }
  else
  {
    id v9 = *(realityio::BuilderDependencyDAG **)(v8 + 248);
  }
  v85[0] = *(atomic_uint **)(v6[1] + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v85);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v85);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v80, v10);
  uint64_t IsValid = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v80);
  if (IsValid)
  {
    uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsValid);
    unint64_t v14 = *(void *)UsdPrimDefaultPredicate;
    uint64_t v13 = *(void *)(UsdPrimDefaultPredicate + 8);
    uint64_t v15 = *(void *)(UsdPrimDefaultPredicate + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v14 & 0x2000) != 0 || (v13 & 0x2000) == 0))
    {
      v14 |= 0x2000uLL;
      v13 &= ~0x2000uLL;
    }
    unint64_t v53 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v14;
    *(void *)&v54[0] = v13;
    *((void *)&v54[0] + 1) = v15;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v80, (uint64_t *)&v53, (uint64_t)&v70);
    int v65 = v80;
    uint64_t v66 = v81;
    if (v81) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = a2;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, &v82);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, &v83);
    uint64_t v69 = v84;
    if ((v84 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v69 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v53 = v70;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v54, &v71);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v54 + 1, &v72);
    *(_OWORD *)((char *)v54 + 8) = v73;
    *((void *)&v54[1] + 1) = v74;
    unint64_t v61 = (unint64_t)v75;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v62, &v76);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v62 + 1, &v77);
    long long v63 = v78;
    uint64_t v64 = v79;
    while (v53 != (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v61
         || *(void *)&v54[0] != v62
         || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)v54 + 8, (uint64_t)&v63) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v53, (uint64_t)&v56);
      if (realityio::isSceneLibrary((realityio *)&v56, v16))
      {
        int v65 = v56;
        uint64_t v17 = v57;
        if (v57) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 48), 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = v66;
        uint64_t v66 = v17;
        if (v18) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v67, &v58);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v68, &v59);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v69, &v60);
        if ((v60 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
        if (v57) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
        }
        break;
      }
      if ((v60 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
      if (v57) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v53);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v54);
    IsPseudoRoot = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65);
    if (IsPseudoRoot)
    {
      uint64_t v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsPseudoRoot);
      MEMORY[0x2455CF810](&v61, realityio::kStageSceneLibraryAssetBuilderIdentifier);
      realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v9, v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v61, &v53);
      std::string v21 = v53;
      std::string v22 = *(std::__shared_weak_count **)&v54[0];
      if (*(void *)&v54[0])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v54[0] + 16), 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if ((v61 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!v22) {
        goto LABEL_81;
      }
      uint64_t v23 = std::__shared_weak_count::lock(v22);
      if (!v23)
      {
LABEL_80:
        std::__shared_weak_count::__release_weak(v22);
LABEL_81:
        if ((v69 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
        if (v66) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
        goto LABEL_86;
      }
      uint64_t v24 = v23;
      if (v21)
      {
        if (v25)
        {
          uint64_t v26 = v25;
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          realityio::StageSceneLibraryAssetBuilder::getImportedScene(v26, (std::string *)&v53);
          uint64_t v27 = BYTE7(v54[2]);
          if (SBYTE7(v54[2]) < 0) {
            uint64_t v27 = *((void *)&v54[1] + 1);
          }
          if (v27)
          {
            uint64_t v28 = HIBYTE(v54[3]);
            if (v54[3] < 0) {
              uint64_t v28 = *(void *)&v54[3];
            }
            if (v28)
            {
              unint64_t v29 = a2[1];
              if (v29 >= a2[2])
              {
                uint64_t v32 = std::vector<realityio::ImportedScene>::__push_back_slow_path<realityio::ImportedScene>(a2, (uint64_t)&v53);
              }
              else
              {
                *(unsigned char *)unint64_t v29 = (_BYTE)v53;
                *(_OWORD *)(v29 + 8) = v54[0];
                v54[0] = 0u;
                uint64_t v30 = *(void *)&v54[2];
                *(_OWORD *)(v29 + 24) = v54[1];
                *(void *)(v29 + 40) = v30;
                memset(&v54[1], 0, 24);
                uint64_t v31 = *((void *)&v54[3] + 1);
                *(_OWORD *)(v29 + 48) = *(_OWORD *)((char *)&v54[2] + 8);
                *(void *)(v29 + 64) = v31;
                memset((char *)&v54[2] + 8, 0, 24);
                *(unsigned char *)(v29 + 72) = v55;
                uint64_t v32 = v29 + 80;
              }
              a2[1] = v32;
            }
          }
          if (SHIBYTE(v54[3]) < 0) {
            operator delete(*((void **)&v54[2] + 1));
          }
          if (SBYTE7(v54[2]) < 0) {
            operator delete(*(void **)&v54[1]);
          }
          realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)v54 + 1);
          realityio::WrappedRERef<void *>::~WrappedRERef(v54);
        }
      }
    }
    else
    {
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65);
      MEMORY[0x2455CF810](&v61, realityio::kSceneAssetBuilderIdentifier);
      realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v61, &v53);
      uint64_t v34 = v53;
      std::string v22 = *(std::__shared_weak_count **)&v54[0];
      if (*(void *)&v54[0])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v54[0] + 16), 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if ((v61 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!v22) {
        goto LABEL_81;
      }
      uint64_t v35 = std::__shared_weak_count::lock(v22);
      if (!v35) {
        goto LABEL_80;
      }
      uint64_t v24 = v35;
      if (!v34) {
        goto LABEL_79;
      }
      if (!v36) {
        goto LABEL_79;
      }
      uint64_t v37 = v36;
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      std::mutex::lock((std::mutex *)(v37 + 304));
      std::mutex::unlock((std::mutex *)(v37 + 304));
      if (v37 + 280 == (char *)a2) {
        goto LABEL_79;
      }
      uint64_t v39 = *((void *)v37 + 35);
      uint64_t v38 = *((void *)v37 + 36);
      unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((v38 - v39) >> 4);
      uint64_t v41 = *a2;
      if (0xCCCCCCCCCCCCCCCDLL * ((a2[2] - *a2) >> 4) >= v40)
      {
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - v41) >> 4) >= v40)
        {
          uint64_t v50 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<realityio::ImportedScene *,realityio::ImportedScene *,realityio::ImportedScene *>(v39, v38, v41);
          for (uint64_t i = a2[1]; i != v50; std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)(a2 + 2), i))i -= 80;
          a2[1] = v50;
          goto LABEL_79;
        }
        uint64_t v48 = v39 + 16 * ((a2[1] - v41) >> 4);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<realityio::ImportedScene *,realityio::ImportedScene *,realityio::ImportedScene *>(v39, v39 + 16 * ((v52[1] - v41) >> 4), v41);
        uint64_t v45 = v52;
        long long v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*,realityio::ImportedScene*,realityio::ImportedScene*>((uint64_t)(v52 + 2), v48, v38, (std::string *)v52[1]);
      }
      else
      {
        std::vector<realityio::ImportedScene>::__vdeallocate((void **)a2);
        if (v40 > 0x333333333333333) {
          goto LABEL_95;
        }
        unint64_t v42 = 0x999999999999999ALL * ((a2[2] - *a2) >> 4);
        if (v42 <= v40) {
          unint64_t v42 = 0xCCCCCCCCCCCCCCCDLL * ((v38 - v39) >> 4);
        }
        unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - *a2) >> 4) >= 0x199999999999999 ? 0x333333333333333 : v42;
        if (v43 > 0x333333333333333) {
LABEL_95:
        }
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        unint64_t v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ImportedScene>>((uint64_t)(a2 + 2), v43);
        uint64_t v45 = a2;
        *a2 = (uint64_t)v44;
        a2[1] = (uint64_t)v44;
        a2[2] = (uint64_t)v44 + 80 * v46;
        long long v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*,realityio::ImportedScene*,realityio::ImportedScene*>((uint64_t)(a2 + 2), v39, v38, v44);
      }
      v45[1] = (uint64_t)v47;
    }
LABEL_79:
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    goto LABEL_80;
  }
LABEL_86:
  if ((v84 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
  if (v81) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81);
  }
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v85);
}

void sub_23F591218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  *(void *)(v37 + 8) = v38;
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  std::__shared_weak_count::__release_weak(v39);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a37);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::~UsdPrimSubtreeRange((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange *)(v41 - 208));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v41 - 128));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)(v41 - 96));
  _Unwind_Resume(a1);
}

__CFString *RIOImportSessionCopySceneAssetName(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  getImportedScenes(a1, &v10);
  if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 4) <= a2)
  {
    CFStringRef v8 = &stru_26F34B2D0;
  }
  else
  {
    uint64_t v3 = v10 + 80 * a2;
    long long v6 = *(const char **)(v3 + 48);
    uint64_t v4 = v3 + 48;
    uint64_t v5 = v6;
    if (*(char *)(v4 + 23) >= 0) {
      long long v7 = (const char *)v4;
    }
    else {
      long long v7 = v5;
    }
    CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
  }
  uint64_t v13 = (void **)&v10;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v13);
  return (__CFString *)v8;
}

void sub_23F5913DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

__CFString *RIOImportSessionCopySceneName(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  getImportedScenes(a1, &v10);
  if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 4) <= a2)
  {
    CFStringRef v8 = &stru_26F34B2D0;
  }
  else
  {
    uint64_t v3 = v10 + 80 * a2;
    long long v6 = *(const char **)(v3 + 24);
    uint64_t v4 = v3 + 24;
    uint64_t v5 = v6;
    if (*(char *)(v4 + 23) >= 0) {
      long long v7 = (const char *)v4;
    }
    else {
      long long v7 = v5;
    }
    CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
  }
  uint64_t v13 = (void **)&v10;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v13);
  return (__CFString *)v8;
}

void sub_23F5914B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL RIOImportSessionIsSceneActive(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  getImportedScenes(a1, &v5);
  BOOL v3 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 4) > a2 && *(unsigned __int8 *)(v5 + 80 * a2 + 72) != 0;
  CFStringRef v8 = (void **)&v5;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v3;
}

void sub_23F591560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionRegisterBuilderGenerator(uint64_t a1, void *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  if (a1)
  {
    if (v3)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(v6 + 56);
      if (v5)
      {
        if (*(void *)(v6 + 40))
        {
          v8[0] = &unk_26F337150;
          v8[1] = a1;
          _OWORD v8[2] = MEMORY[0x2455D3180](v3);
          v8[3] = v8;
          uint64_t v5 = realityio::BuilderRegistry::registerBuilder((uint64_t *)v5, (uint64_t)v8);
          std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v8);
        }
        else
        {
          uint64_t v5 = 1;
        }
      }
    }
  }

  return v5;
}

void sub_23F591650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t *RIOImportSessionUnregisterBuilderWithIdentifier(uint64_t a1, __CFString *this)
{
  uint64_t v2 = 0;
  if (a1 && this)
  {
    realityio::CFStringCopyUTF8String(this, (uint64_t)v8);
    if (v8[0])
    {
      int v4 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v7, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
      }
      else {
        std::string v7 = v9;
      }
      uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 32) + 56);
      if (v2)
      {
        if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v7;
        }
        uint64_t v2 = (uint64_t *)realityio::BuilderRegistry::unregisterBuilder(v2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v7.__r_.__value_.__l.__data_);
        if ((v4 & 0x80000000) == 0) {
          return v2;
        }
      }
      else if ((v4 & 0x80000000) == 0)
      {
        return v2;
      }
      operator delete(v9.__r_.__value_.__l.__data_);
      return v2;
    }
    return 0;
  }
  return v2;
}

void sub_23F591778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *RIOImportSessionCopyAllRegisteredBuilderIdentifiers(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  id v3 = Mutable;
  if (a1)
  {
    int v4 = *(uint64_t **)(*(void *)(a1 + 32) + 56);
    if (v4)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      if (*v4 != v6)
      {
        do
        {
          std::string v7 = *(void **)v5;
          CFStringRef v8 = *(std::__shared_weak_count **)(v5 + 8);
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v9 = *v7 & 0xFFFFFFFFFFFFFFF8;
          if (v9) {
            Emptyuint64_t String = v9 + 16;
          }
          else {
            Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Mutable);
          }
          if (*(char *)(EmptyString + 23) >= 0) {
            uint64_t v11 = (const char *)EmptyString;
          }
          else {
            uint64_t v11 = *(const char **)EmptyString;
          }
          CFStringRef v12 = CFStringCreateWithCString(0, v11, 0x8000100u);
          CFArrayAppendValue(v3, v12);
          CFRelease(v12);
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          v5 += 16;
        }
        while (v5 != v6);
      }
    }
  }
  return v3;
}

void sub_23F5918A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

CFMutableArrayRef RIOImportSessionGetBuildersAtPrimPath()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
}

CFMutableArrayRef RIOImportSessionCopyBuildersAtPrimPath()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
}

uint64_t RIOImportSessionCopyBuilderAtPrimPathWithIdentifier(uint64_t a1, uint64_t a2, __CFString *this)
{
  uint64_t v3 = 0;
  if (a2 && a1 && this)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v5 + 40);
    std::string v7 = *(std::__shared_weak_count **)(v5 + 48);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v6
      && (CFStringRef v8 = *(realityio::BuilderDependencyDAG **)(v6 + 248),
          realityio::CFStringCopyUTF8String(this, (uint64_t)v14),
          v14[0]))
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = __p;
      }
      MEMORY[0x2455CF830](&v11, &v13);
      realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, &v12);
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (RIOBuilderGetTypeID::onceToken != -1) {
        dispatch_once(&RIOBuilderGetTypeID::onceToken, &__block_literal_global_35);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v3 = Instance;
      if (Instance)
      {
        *(_OWORD *)(Instance + 16) = v12;
      }
      else if (*((void *)&v12 + 1))
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v14[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  return v3;
}

void sub_23F591A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v27 < 0) {
    operator delete(__p);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(realityio::BuilderDependencyDAG *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, void *a4@<X8>)
{
  realityio::BuilderDependencyDAG::getWeakBuilderAtPrimPathWithBuilderIdentifier(this, a2, a3, &v6);
  *a4 = 0;
  a4[1] = 0;
  if (v7)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v7);
    a4[1] = v5;
    if (v5) {
      *a4 = v6;
    }
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t RIOImportSessionGetEntityAtPrimPath(uint64_t a1, uint64_t a2)
{
  uint64_t EntityAtPrimPath = 0;
  if (a1 && a2)
  {
    uint64_t v4 = a1 + 16;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, (_DWORD *)(a2 + 20));
    uint64_t EntityAtPrimPath = realityio::ImportSession::getEntityAtPrimPath(v4, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  }
  return EntityAtPrimPath;
}

void sub_23F591BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCopyPrimPathForEntity()
{
  if (!REComponentClassFromName() || !REEntityGetCustomComponent()) {
    return 0;
  }
  Object = (char **)RECustomComponentGetObject();
  std::string::basic_string[abi:ne180100]<0>(__p, *Object);
  MEMORY[0x2455CF7A0](&v5, __p);
  uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return v1;
}

void sub_23F591CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionOverridePrimPathToEntityForSceneAssetEntities(uint64_t a1, uint64_t a2)
{
  return realityio::ImportSessionImpl::generateOverridePrimPathToEntityForActiveSceneAssets(*(void **)(a1 + 32), a2);
}

__CFArray *RIOImportSessionCopyExtraAssetTags(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    realityio::ImportSession::extraAssets((realityio::ImportSession *)(a1 + 16), (uint64_t *)&v12);
    uint64_t v3 = v12;
    if (v12 != v13)
    {
      do
      {
        if (*((char *)v3 + 55) < 0) {
          std::string::__init_copy_ctor_external(&__p, v3[4], (std::string::size_type)v3[5]);
        }
        else {
          std::string __p = *(std::string *)(v3 + 4);
        }
        uint64_t v11 = v3[7];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        CFStringRef v5 = CFStringCreateWithCString(0, (const char *)p_p, 0x8000100u);
        CFArrayAppendValue(Mutable, v5);
        CFRelease(v5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v6 = v3[1];
        if (v6)
        {
          do
          {
            int v7 = (char **)v6;
            int v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            int v7 = (char **)v3[2];
            BOOL v8 = *v7 == (char *)v3;
            uint64_t v3 = v7;
          }
          while (!v8);
        }
        uint64_t v3 = v7;
      }
      while (v7 != v13);
    }
    std::__tree<std::string>::destroy((uint64_t)&v12, v13[0]);
  }
  return Mutable;
}

void sub_23F591E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, char *a18)
{
}

uint64_t *realityio::ImportSession::extraAssets@<X0>(realityio::ImportSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  std::mutex::lock((std::mutex *)(v3 + 184));
  std::mutex::unlock((std::mutex *)(v3 + 184));

  return std::map<std::string,REAsset *>::map[abi:ne180100](a2, (const void ***)(v3 + 160));
}

char *RIOImportSessionGetExtraAssetWithTag(uint64_t a1, char *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    realityio::ImportSession::extraAssets((realityio::ImportSession *)(a1 + 16), &v14);
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    char v4 = v15;
    if (!v15) {
      goto LABEL_13;
    }
    CFStringRef v5 = &v15;
    do
    {
      int v6 = v5;
      int v7 = (const void **)(v4 + 32);
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v16, (const void **)v4 + 4, (const void **)__p);
      unint64_t v9 = v4 + 8;
      if (!v8)
      {
        unint64_t v9 = v4;
        CFStringRef v5 = (char **)v4;
      }
      char v4 = *(char **)v9;
    }
    while (*(void *)v9);
    if (v5 == &v15
      || (!v8 ? (uint64_t v10 = v7) : (uint64_t v10 = (const void **)(v6 + 4)),
          std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v16, (const void **)__p, v10)))
    {
LABEL_13:
      CFStringRef v5 = &v15;
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (&v15 == v5) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = v5[7];
    }
    std::__tree<std::string>::destroy((uint64_t)&v14, v15);
  }
  return v2;
}

void sub_23F591FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

BOOL RIOImportSessionSetExtraAssetWithTag(uint64_t a1, char *a2, uint64_t a3)
{
  BOOL v3 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, a2);
        BOOL v3 = realityio::ImportSessionImpl::addExtraAsset(*(void *)(a1 + 32), (const void **)__p, a3);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v3;
}

void sub_23F592034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOImportSessionRemoveExtraAssetWithTag(uint64_t a1, char *a2)
{
  if (a1 && a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    realityio::ImportSessionImpl::removeExtraAsset(*(void *)(a1 + 32), (const void **)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5920A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOImportSessionRegisterAudioAsset(realityio *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 && a2 && a3 && a4)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, a3);
    realityio::ImportSession::registerAudioAsset((uint64_t)a1 + 16, (long long *)buf, &__p, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    int v7 = *(NSObject **)(realityio::logObjects(a1) + 32);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "RIOImportSessionRegisterAudioAsset has been called with nullptrs and that is not supported.", buf, 2u);
    }
  }
}

void sub_23F592198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIOImportSessionReloadAsset(uint64_t a1, void *a2, CFErrorRef *a3)
{
  id v5 = a2;
  int v6 = (realityio *)[v5 isFileURL];
  if ((v6 & 1) == 0)
  {
    char v8 = *(NSObject **)(realityio::logObjects(v6) + 32);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", (uint8_t *)__p, 2u);
    }
    goto LABEL_7;
  }
  if (!a1)
  {
LABEL_7:
    BOOL v7 = 0;
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v5 fileSystemRepresentation]);
  BOOL v7 = realityio::ImportSession::reloadAsset(a1 + 16, (uint64_t)__p, a3);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
LABEL_8:

  return v7;
}

void sub_23F5922A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionGetEngineRef(uint64_t result)
{
  if (result) {
    return *(void *)(*(void *)(result + 32) + 16);
  }
  return result;
}

void *RIOImportSessionSetMissingMaterial(void *result, uint64_t a2)
{
  if (result)
  {
    BOOL v3 = result;
    uint64_t v5 = a2;
    if (a2)
    {
      RERetain();
      uint64_t v4 = v3[4];
      uint64_t v6 = a2;
      RERetain();
    }
    else
    {
      uint64_t v4 = result[4];
      uint64_t v6 = 0;
    }
    realityio::ImportSessionImpl::setMissingMaterial(v4, &v6);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
    return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  }
  return result;
}

void sub_23F59235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RIOImportSessionGatherUsedTextureInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    char v8 = 0;
    if (v5)
    {
      v7[0] = &unk_26F3371E0;
      v7[1] = MEMORY[0x2455D3180](v5);
      char v8 = v7;
    }
    realityio::ImportSession::gatherTextureInfo(a1 + 16, a2, 1, (uint64_t)v7);
    std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100](v7);
  }
}

void sub_23F592448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void RIOImportSessionGatherTextureInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    char v8 = 0;
    if (v5)
    {
      v7[0] = &unk_26F3371E0;
      v7[1] = MEMORY[0x2455D3180](v5);
      char v8 = v7;
    }
    realityio::ImportSession::gatherTextureInfo(a1 + 16, a2, 0, (uint64_t)v7);
    std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100](v7);
  }
}

void sub_23F592530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void RIOImportSessionGatherTextureInfoWithOptionallyUnusedTextures(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v7 = a4;
  char v8 = v7;
  if (a1)
  {
    uint64_t v10 = 0;
    if (v7)
    {
      v9[0] = &unk_26F3371E0;
      v9[1] = MEMORY[0x2455D3180](v7);
      uint64_t v10 = v9;
    }
    realityio::ImportSession::gatherTextureInfo(a1 + 16, a2, a3, (uint64_t)v9);
    std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100](v9);
  }
}

void sub_23F592624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void RIOImportSessionGatherMeshEstimates(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v12 = *(atomic_uint **)(*(void *)(*(void *)(a1 + 32) + 8) + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v12);
    realityio::internal::PrimToEntityMap::makePrimToEntityMap((uint64_t *)&v12, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v12);
    if (v15 != v14)
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      if ((unint64_t)((v15 - v14) / 104) <= 1) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = (v15 - v14) / 104;
      }
      do
      {
        if (0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 3) <= v5) {
          uint64_t v7 = 0;
        }
        else {
          uint64_t v7 = v14 + v4;
        }
        uint64_t v9 = *(atomic_uint **)(*(void *)(*(void *)(a1 + 32) + 8) + 16);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v9);
        realityio::internal::PrimToEntityMap::EntityData::estimateMeshes(v7, (uint64_t *)&v9, (uint64_t)v10);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v9);
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 24));
        (*((void (**)(id, uint64_t, void, void **, void **, void))v3 + 2))(v3, Text, LODWORD(v10[0]), v10[1], v10[2], v11);
        ++v5;
        v4 += 104;
      }
      while (v6 != v5);
    }
    std::__tree<std::string>::destroy((uint64_t)v17, v17[1]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)v16, v16[1]);
    v10[0] = (void **)&v14;
    std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](v10);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_23F5927C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);

  _Unwind_Resume(a1);
}

void realityio::internal::PrimToEntityMap::~PrimToEntityMap(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 9), this[10]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)(this + 6), this[7]);
  id v3 = (void **)(this + 3);
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

uint64_t RIOImportSessionSetIsLoadModelUseCase(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(*(void *)(result + 32) + 272) = a2;
  }
  return result;
}

BOOL RIOImportSessionGetIsLoadModelUseCase(BOOL result)
{
  if (result) {
    return *(unsigned char *)(*(void *)(result + 32) + 272) != 0;
  }
  return result;
}

realityio *RIOImportSessionSetOriginalUrl(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = a2;
  uint64_t v4 = (realityio *)[v3 isFileURL];
  unint64_t v5 = v4;
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v3 fileSystemRepresentation]);
    std::string::operator=((std::string *)(*(void *)(a1 + 32) + 280), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(realityio::logObjects(v4) + 32);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", (uint8_t *)&__p, 2u);
    }
  }

  return v5;
}

void sub_23F592968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

CFURLRef RIOImportSessionGetOriginalUrl(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 303) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 280), *(void *)(v2 + 288));
  }
  else {
    std::string __p = *(std::string *)(v2 + 280);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  CFStringRef v5 = CFStringCreateWithCString(v1, (const char *)p_p, 0x8000100u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  CFURLRef v3 = CFURLCreateWithString(v1, v5, 0);
  CFRelease(v5);
  return v3;
}

void sub_23F592A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOImportSessionSetBundleInfo(uint64_t a1, char *a2, char *a3, char *a4)
{
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, a2);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    std::string::basic_string[abi:ne180100]<0>(&v8, a4);
    uint64_t v7 = *(void *)(a1 + 32);
    std::string::operator=((std::string *)(v7 + 304), &__str);
    std::string::operator=((std::string *)(v7 + 328), &v9);
    std::string::operator=((std::string *)(v7 + 352), &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23F592B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

__CFString *RIOImportSessionCopyBundleId(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v4, (long long *)(*(void *)(a1 + 32) + 304), (long long *)(*(void *)(a1 + 32) + 352));
  if ((v4.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFAllocatorRef v1 = &v4;
  }
  else {
    CFAllocatorRef v1 = (std::string *)v4.__r_.__value_.__r.__words[0];
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v6 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  return (__CFString *)v2;
}

void sub_23F592C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

__CFString *RIOImportSessionCopyBundleNameInBundle(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v4, (long long *)(*(void *)(a1 + 32) + 304), (long long *)(*(void *)(a1 + 32) + 352));
  if (v6 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v6 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  return (__CFString *)v2;
}

void sub_23F592CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

CFStringRef RIOImportSessionCopyAssetURLFromBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v3 = 0;
  if (a1 && a2 && a3)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v7 = 0;
    if (realityio::ImportSessionImpl::getAssetURLFromBundle(*(void *)(a1 + 32), a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 16), (uint64_t)__p))
    {
      if (v7 >= 0) {
        std::string v4 = __p;
      }
      else {
        std::string v4 = (void **)__p[0];
      }
      CFStringRef v3 = CFStringCreateWithCString(0, (const char *)v4, 0x8000100u);
    }
    else
    {
      CFStringRef v3 = 0;
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }
  return v3;
}

void sub_23F592D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOImportSessionGatherFaultRecords(uint64_t a1, uint64_t a2, void *a3)
{
  void v19[4] = *MEMORY[0x263EF8340];
  uint64_t v17 = a3;
  if (a1)
  {
    v18[0] = &unk_26F337270;
    v18[1] = &v17;
    v18[3] = v18;
    uint64_t v5 = *(void *)(a1 + 32);
    std::__function::__value_func<void ()(char const*,ExecFault::Type,char const*)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v18);
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 40))(v5, v19);
    std::__function::__value_func<void ()(char const*,ExecFault::Type,char const*)>::~__value_func[abi:ne180100](v19);
    std::__function::__value_func<void ()(char const*,ExecFault::Type,char const*)>::~__value_func[abi:ne180100](v18);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(uint64_t **)(v6 + 40);
    std::string v8 = *(std::__shared_weak_count **)(v6 + 48);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    DeploymentErrors = realityio::LiveSceneManager::getDeploymentErrors(v7, a2);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v10 = DeploymentErrors->i64[1];
    if (DeploymentErrors->i64[0] != v10)
    {
      uint64_t v11 = DeploymentErrors->i64[0] + 8;
      do
      {
        uint64_t v12 = v11 - 8;
        char v13 = v17;
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 8));
        if (*(unsigned char *)(v11 + 24)) {
          uint64_t v15 = 4;
        }
        else {
          uint64_t v15 = 3;
        }
        uint64_t v16 = v11;
        if (*(char *)(v11 + 23) < 0) {
          uint64_t v16 = *(void *)v11;
        }
        v13[2](v13, Text, v15, v16);
        v11 += 40;
      }
      while (v12 + 40 != v10);
    }
  }
}

void sub_23F592F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }

  _Unwind_Resume(a1);
}

__CFDictionary *RIOImportSessionCopyStatistics(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 0;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 96))(*(void *)(a1 + 32), &v3);
  CFAllocatorRef v1 = ConvertNestedDictionaryOfStatistics((const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v3);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v3, 0);
  return v1;
}

void sub_23F592FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *ConvertNestedDictionaryOfStatistics(const pxrInternal__aapl__pxrReserved__::VtDictionary *a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
  uint64_t v5 = v4;
  uint64_t v32 = v3;
  uint64_t v33 = v4;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  if (v7) {
    BOOL v10 = v3 == v6;
  }
  else {
    BOOL v10 = 1;
  }
  char v11 = v10;
  if (v5 != v7 || (v11 & 1) == 0)
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&__p, (long long *)(v3 + 32));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      CFStringRef v15 = CFStringCreateWithCString(v13, (const char *)p_p, 0x8000100u);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        if ((v36 & 4) != 0) {
          uint64_t v16 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        }
        else {
          uint64_t v16 = v35;
        }
        CFNumberRef v17 = (CFNumberRef)ConvertNestedDictionaryOfStatistics(v16);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        uint64_t v18 = &v35;
        if ((v36 & 4) != 0) {
          uint64_t v18 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        }
        valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)*v18;
        CFNumberRef v17 = CFNumberCreate(v13, kCFNumberDoubleType, &valuePtr);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        std::string v19 = &v35;
        if ((v36 & 4) != 0) {
          std::string v19 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        }
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = *(_DWORD *)v19;
        CFNumberRef v17 = CFNumberCreate(v13, kCFNumberIntType, &valuePtr);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        uint64_t v20 = &v35;
        if ((v36 & 4) != 0) {
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        }
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = *(unsigned __int8 *)v20;
        CFNumberRef v17 = CFNumberCreate(v13, kCFNumberIntType, &valuePtr);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        std::string v21 = &v35;
        if ((v36 & 4) != 0) {
          std::string v21 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        }
        valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)*v21;
        CFNumberRef v17 = CFNumberCreate(v13, kCFNumberSInt64Type, &valuePtr);
      }
      else
      {
        if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
        {
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
          {
            if ((v36 & 4) != 0) {
              id v25 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
            }
            else {
              id v25 = v35;
            }
            if (*((char *)v25 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&valuePtr, *(const std::string::value_type **)v25, *((void *)v25 + 1));
            }
            else
            {
              long long v26 = *(_OWORD *)v25;
              valuePtr.__r_.__value_.__r.__words[2] = *((void *)v25 + 2);
              *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v26;
            }
            if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string valuePtr = &valuePtr;
            }
            else {
              p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)&v30, (pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
            char v27 = std::string::insert(&v30, 0, "UnknownDataType_");
            long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            valuePtr.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
            *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v30.__r_.__value_.__l.__data_);
            }
            if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string valuePtr = &valuePtr;
            }
            else {
              p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
            }
          }
          CFStringRef v23 = CFStringCreateWithCString(v13, (const char *)p_valuePtr, 0x8000100u);
          if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(valuePtr.__r_.__value_.__l.__data_);
          }
          goto LABEL_39;
        }
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        std::string v22 = &v35;
        if ((v36 & 4) != 0) {
          std::string v22 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        }
        valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)*v22;
        CFNumberRef v17 = CFNumberCreate(v13, kCFNumberLongLongType, &valuePtr);
      }
      CFStringRef v23 = (CFStringRef)v17;
LABEL_39:
      CFDictionaryAddValue(Mutable, v15, v23);
      CFRelease(v15);
      CFRelease(v23);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> const*,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v32);
      uint64_t v3 = v32;
      BOOL v24 = v32 == v8 || v9 == 0;
    }
    while (v33 != v9 || !v24);
  }
  return Mutable;
}

void sub_23F593410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

const char *RIOImportSessionPrimPathMetadataKey()
{
  return "cdm:primpath";
}

const char *RIOImportSessionResolvedPathMetadataKey()
{
  return "cdm:resolvedpath";
}

const char *RIOImportSessionAssetInfoMetadataKey()
{
  return "realitykit:assetinfo";
}

uint64_t RIOImportSessionSetLoadSubdsAsSubds(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 289) = a2;
  }
  return result;
}

BOOL RIOImportSessionGetLoadSubdsAsSubds(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 289) != 0;
  }
  return result;
}

uint64_t _RIOImportSessionCFFinalize(uint64_t (***a1)(void))
{
  return (*a1[2])();
}

BOOL _RIOImportSessionCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOImportSessionCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOImportSessionCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOImportSession %p>", a1);
}

CFStringRef _RIOImportSessionCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOImportSession %p>", a1);
}

void *realityio::ImportSessionImpl::performBlockPostAssetLoadOnEngineQueue(uint64_t a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
    std::vector<std::function<void ()(void)>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(v2 + 464) + 48), (uint64_t)v6);
    return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);
    return (void *)v5();
  }
}

void sub_23F59363C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t assetToEntity(uint64_t *a1)
{
  *a1 = 0;
  *a1 = REEntityCreate();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30]();
  MEMORY[0x2455CDC60](ServiceLocator);
  RETransformComponentGetComponentType();
  REEntityAddComponentByClass();
  REAssetManagerMeshMemoryAssetCreateBox();
  REMeshComponentGetComponentType();
  REEntityAddComponentByClass();
  REMeshComponentSetMesh();
  return REMeshComponentAddMaterial();
}

void sub_23F593858(_Unwind_Exception *a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F336C58;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x270F9A758]();
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::target_type()
{
}

void *std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sourceAsync(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v7 = a3;
  id v8 = a4;
  if (*(unsigned char *)a2)
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 8);
    CFStringRef v15 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CFStringRef v23 = 0;
    if (v7)
    {
      v22[0] = &unk_26F336C58;
      v22[1] = MEMORY[0x2455D3180](v7);
      CFStringRef v23 = v22;
    }
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    uint64_t v11[2] = ___ZL11sourceAsyncP8REEngineN9realityio6ResultINSt3__110shared_ptrINS1_4mtlx13NeoDataSourceEEENS1_13DetailedErrorEEEU13block_pointerFPK8__CFDataPKcEU13block_pointerFvP8REEntityP9__CFErrorE_block_invoke_26;
    v11[3] = &unk_265071BB0;
    uint64_t v13 = a1;
    uint64_t v12 = v8;
    std::string v21 = 0;
    v20[0] = &unk_26F336D20;
    v20[1] = MEMORY[0x2455D3180](v11);
    std::string v21 = v20;
    realityio::MaterialXStandalone::generateAsync(a1, &v14, (uint64_t)v22, (uint64_t)v20);
    std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](v20);
    std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](v22);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    BOOL v10 = v12;
  }
  else
  {
    REEngineConfigurationCreateFromEngine();
    BOOL v10 = REEngineConfigurationGetEngineQueue();
    RERelease();
    std::string v19 = 0;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3321888768;
    block[2] = ___ZL11sourceAsyncP8REEngineN9realityio6ResultINSt3__110shared_ptrINS1_4mtlx13NeoDataSourceEEENS1_13DetailedErrorEEEU13block_pointerFPK8__CFDataPKcEU13block_pointerFvP8REEntityP9__CFErrorE_block_invoke;
    block[3] = &unk_26F336CE0;
    id v17 = v8;
    uint64_t v18 = 0;
    dispatch_async(v10, block);
    realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(&v18);

    realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(&v19);
  }
}

void sub_23F593C74(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL11sourceAsyncP8REEngineN9realityio6ResultINSt3__110shared_ptrINS1_4mtlx13NeoDataSourceEEENS1_13DetailedErrorEEEU13block_pointerFPK8__CFDataPKcEU13block_pointerFvP8REEntityP9__CFErrorE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, *(void *)(a1 + 40));
}

CFTypeRef __copy_helper_block_ea8_40c43_ZTSN9realityio12WrappedCFRefIP9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

const void **__destroy_helper_block_ea8_40c43_ZTSN9realityio12WrappedCFRefIP9__CFErrorEE(uint64_t a1)
{
  return realityio::WrappedCFRef<__CFError *>::~WrappedCFRef((const void **)(a1 + 40));
}

void *___ZL11sourceAsyncP8REEngineN9realityio6ResultINSt3__110shared_ptrINS1_4mtlx13NeoDataSourceEEENS1_13DetailedErrorEEEU13block_pointerFPK8__CFDataPKcEU13block_pointerFvP8REEntityP9__CFErrorE_block_invoke_26(uint64_t a1, void *a2)
{
  if (*a2)
  {
    assetToEntity(&v5);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    return realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v5);
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return (void *)v4();
  }
}

void sub_23F593D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F336D20;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x270F9A758]();
}

void *std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v4);
}

void sub_23F593ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::target_type()
{
}

void *std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::string *realityio::Result<std::shared_ptr<realityio::mtlx::NeoDataSource>,realityio::DetailedError>::Result(std::string *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  a1->__r_.__value_.__s.__data_[0] = v3;
  if (v3)
  {
    std::string::size_type v4 = *((void *)a2 + 2);
    a1->__r_.__value_.__l.__size_ = *((void *)a2 + 1);
    a1->__r_.__value_.__r.__words[2] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__r.__words[1] = *(_OWORD *)(a2 + 8);
    uint64_t v5 = a1 + 1;
    if ((char)a2[47] < 0)
    {
      std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 24);
      a1[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
  }
  return a1;
}

void MaterialToEntity::~MaterialToEntity(MaterialToEntity *this)
{
  uint64_t v2 = (CFTypeRef *)*((void *)this + 4);
  if (v2) {
    CFRelease(*v2);
  }
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)this + 3);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)this + 2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this + 1);

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this);
}

const void **realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void *___ZN16MaterialToEntity13evaluateAsyncENSt3__110shared_ptrIS_EENS0_8functionIFvP8REEntityP9__CFErrorEEE_block_invoke(uint64_t a1)
{
  MaterialToEntity::getModelEntity((MaterialToEntity *)&v8, *(void *)(*(void *)(*(void *)(a1 + 64) + 24) + 32));
  uint64_t v2 = v8;
  int v3 = *(const void ***)(*(void *)(a1 + 64) + 32);
  if (v3)
  {
    std::string::size_type v4 = *v3;
    id v7 = v4;
    if (v4) {
      CFRetain(v4);
    }
  }
  else
  {
    std::string::size_type v4 = 0;
    id v7 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v9 = v4;
  uint64_t v10 = v2;
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *, const void **))(*(void *)v5 + 48))(v5, &v10, &v9);
  realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(&v7);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v8);
  return RIOImportSessionSetSceneUpdatePassCompletion(*(void *)(*(void *)(a1 + 64) + 24), 0);
}

void sub_23F5941B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c47_ZTSNSt3__18functionIFvP8REEntityP9__CFErrorEEE64c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(REEntity *,__CFError *)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *__destroy_helper_block_ea8_32c47_ZTSNSt3__18functionIFvP8REEntityP9__CFErrorEEE64c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return std::__function::__value_func<void ()(REEntity *,__CFError *)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t std::__function::__value_func<void ()(REEntity *,__CFError *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t realityio::isSceneLibrary(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (result)
  {
    unint64_t v4 = atomic_load(MEMORY[0x263F90528]);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
    }
    uint64_t v5 = 0;
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v4 + 208));
    if (result)
    {
      MEMORY[0x2455CF810](&v5, "sceneLibrary");
      uint64_t result = (v5 & 0xFFFFFFFFFFFFFFF8) == 0;
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  return result;
}

void sub_23F5943CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void realityio::ImportedScene::~ImportedScene(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 2);
  realityio::WrappedRERef<void *>::~WrappedRERef(this + 1);
}

void *std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(a2 + 16));

  return realityio::WrappedRERef<void *>::~WrappedRERef((void *)(a2 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataTypedValue<pxrInternal__aapl__pxrReserved__::TfToken>::StoreValue(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(*(void **)(a1 + 8), v2);
    return 1;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;

  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a2))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<pxrInternal__aapl__pxrReserved__::TfToken>(a2, &v6);
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    if (&v6 == v4)
    {
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *uint64_t v4 = v6;
    }
    return 1;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfValueBlockE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<pxrInternal__aapl__pxrReserved__::TfToken>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::_GetMutable<pxrInternal__aapl__pxrReserved__::TfToken>(a1);
  uint64_t v5 = *result;
  uint64_t *result = 0;
  *a2 = v5;
  uint64_t v6 = a1[1];
  if (v6) {
    BOOL v7 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_GetMutable<pxrInternal__aapl__pxrReserved__::TfToken>(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return a1;
}

uint64_t std::vector<realityio::ImportedScene>::__push_back_slow_path<realityio::ImportedScene>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ImportedScene>>(v7, v9);
  char v11 = &v10[80 * v4];
  v17[0] = v10;
  v17[1] = v11;
  _DWORD v17[3] = &v10[80 * v12];
  char *v11 = *(unsigned char *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v13 = *(void *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = v13;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  long long v14 = *(_OWORD *)(a2 + 48);
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *((_OWORD *)v11 + 3) = v14;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  v11[72] = *(unsigned char *)(a2 + 72);
  v17[2] = v11 + 80;
  std::vector<realityio::ImportedScene>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<realityio::ImportedScene>::~__split_buffer(v17);
  return v15;
}

void sub_23F594964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::ImportedScene>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *realityio::WrappedRERef<void *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t std::vector<realityio::ImportedScene>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>,std::reverse_iterator<realityio::ImportedScene*>,std::reverse_iterator<realityio::ImportedScene*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ImportedScene>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>,std::reverse_iterator<realityio::ImportedScene*>,std::reverse_iterator<realityio::ImportedScene*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 80;
      realityio::ImportedScene::ImportedScene((std::string *)(v7 - 80), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 80;
      *((void *)&v15 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_23F594B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *realityio::ImportedScene::ImportedScene(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = *(unsigned char *)a2;
  std::string::size_type v4 = *(void *)(a2 + 8);
  a1->__r_.__value_.__l.__size_ = v4;
  if (v4) {
    RERetain();
  }
  std::string::size_type v5 = *(void *)(a2 + 16);
  a1->__r_.__value_.__r.__words[2] = v5;
  if (v5) {
    RERetain();
  }
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 1, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&a1[1].__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[3].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 72);
  return a1;
}

void sub_23F594BF8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v4);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3);
  realityio::WrappedRERef<void *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<realityio::ImportedScene>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<realityio::ImportedScene>::clear[abi:ne180100](void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = v3[4];
      v3[2] = v1 - 80;
      uint64_t result = std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](v4, v1 - 80);
      uint64_t v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void std::vector<realityio::ImportedScene>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*,realityio::ImportedScene*,realityio::ImportedScene*>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v7 = a4;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      realityio::ImportedScene::ImportedScene(a4, v5);
      v5 += 80;
      a4 = (std::string *)((char *)v7 + 80);
      uint64_t v7 = (std::string *)((char *)v7 + 80);
    }
    while (v5 != a3);
  }
  return a4;
}

void sub_23F594E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 80;
        std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<realityio::ImportedScene *,realityio::ImportedScene *,realityio::ImportedScene *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (std::string *)(a3 + v6);
      long long v8 = (const std::string *)(a1 + v6);
      *(unsigned char *)(a3 + v6) = *(unsigned char *)(a1 + v6);
      uint64_t v9 = *(void *)(a3 + v6 + 8);
      std::string::size_type size = *(void *)(a1 + v6 + 8);
      if (v9 != size)
      {
        if (v9)
        {
          RERelease();
          std::string::size_type size = v8->__r_.__value_.__l.__size_;
        }
        v7->__r_.__value_.__l.__size_ = size;
        if (size) {
          RERetain();
        }
      }
      realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)&v7->__r_.__value_.__r.__words[2], (uint64_t *)&v8->__r_.__value_.__r.__words[2]);
      std::string::operator=(v7 + 1, v8 + 1);
      std::string::operator=(v7 + 2, v8 + 2);
      v7[3].__r_.__value_.__s.__data_[0] = v8[3].__r_.__value_.__s.__data_[0];
      v6 += 80;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t realityio::BuilderDependencyDAG::getWeakBuilderAtPrimPathWithBuilderIdentifier@<X0>(realityio::BuilderDependencyDAG *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, void *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, (_DWORD *)a2 + 1);
  uint64_t v8 = *(void *)a3;
  uint64_t v16 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v16 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::find<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>((void *)this + 10, &v14);
  uint64_t v10 = v9;
  if (v9 && (v11 = (std::__shared_weak_count *)v9[5]) != 0 && (uint64_t v12 = std::__shared_weak_count::lock(v11)) != 0)
  {
    *a4 = v10[4];
    a4[1] = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
}

void sub_23F59505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::~BuilderAtPrimPathQuery(realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery *this)
{
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void *std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::find<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v4 = *((void *)a2 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (bswap64(0x9E3779B97F4A7C55 * v4) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *(void *)a2 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v4) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  void *v8;
  void *result;
  unint64_t v10;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v4 = *((void *)a2 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (bswap64(0x9E3779B97F4A7C55 * v4) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *(void *)a2 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v4) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::map<std::string,REAsset *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,REAsset *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,REAsset *>,std::__tree_node<std::__value_type<std::string,REAsset *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_23F595218(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,REAsset *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,REAsset *>,std::__tree_node<std::__value_type<std::string,REAsset *>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint8x8_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,REAsset *> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          unint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,REAsset *> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint8x8_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__construct_node<std::pair<std::string const,REAsset *> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__construct_node<std::pair<std::string const,REAsset *> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint8x8_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_23F5953CC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned long>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned long>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2 + 80, *(void **)(a2 + 88));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2 + 56, *(void **)(a2 + 64));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2 + 32, *(void **)(a2 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint8x8_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_23F595618(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(char const*,ExecFault::Type,char const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> const*,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(void *result)
{
  uint64_t v1 = result[1];
  if (v1)
  {
    int8x8_t v2 = (void *)*result;
    uint64_t v3 = *(void **)(*result + 8);
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        int8x8_t v2 = v4;
      }
      while (!v5);
    }
    uint64_t *result = v4;
    if (v4 == (void *)(v1 + 8)) {
      result[1] = 0;
    }
  }
  else
  {
    v6[0] = "vt/dictionary.h";
    v6[1] = "increment";
    std::string v6[2] = 159;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<const std::map<std::string, pxrInternal__aapl_"
            "_pxrReserved__::VtValue, std::less<void>> *, std::__map_const_iterator<std::__tree_const_iterator<std::__val"
            "ue_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::str"
            "ing, pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>>::increment() [UnderlyingMapPtr = const s"
            "td::map<std::string, pxrInternal__aapl__pxrReserved__::VtValue, std::less<void>> *, UnderlyingIterator = std"
            "::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string, pxrInternal__aapl__pxrReser"
            "ved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>,"
            " void *> *, long>>]";
    char v7 = 0;
    int v8 = 4;
    return (void *)pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, "Attempted invalid increment operation on a VtDictionary iterator");
  }
  return result;
}

void *realityio::WrappedRERef<REEngine *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(char const*,ExecFault::Type,char const*)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

const void **realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(const void **a1)
{
  int8x8_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  int8x8_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F336DD0;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F336DD0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  int8x8_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F336E50;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F336E50;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  int8x8_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F336ED0;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F336ED0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::__clone(uint64_t a1)
{
  int8x8_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F336F50;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F336F50;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::target_type()
{
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  int8x8_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F336FE0;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F336FE0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::target_type()
{
}

const void **realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(const void **a1)
{
  int8x8_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(REEntity *,__CFError *)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<MaterialToEntity>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F337070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MaterialToEntity>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F337070;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<MaterialToEntity>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3370C0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x270F9A758]();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::target_type()
{
}

void std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  int8x8_t v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *v2 = &unk_26F337150;
  v2[1] = v4;
  v2[2] = MEMORY[0x2455D3180](v3);
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *a2 = &unk_26F337150;
  a2[1] = v4;
  uint64_t result = MEMORY[0x2455D3180](v3);
  a2[2] = result;
  return result;
}

void std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v8 = *(void *)(v6 + 40);
  char v7 = *(std::__shared_weak_count **)(v6 + 48);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(void *)(v8 + 40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 40);
  }
  int v21 = 1;
  uint64_t v22 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v25 = 0;
  if (v9)
  {
    unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(v9 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v17, v10, a2);
    int v21 = v17;
    uint64_t v11 = v18;
    uint64_t v18 = 0;
    uint64_t v12 = v22;
    uint64_t v22 = v11;
    if (v12) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v23, &v19);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v24);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v25 = v20;
    uint64_t v20 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
    if (v18) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
    }
  }
  LODWORD(v17) = 1;
  char v13 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v21, (int *)&v17);
  unsigned int v14 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  CFRelease(v13);
  if (v14)
  {
    uint64_t v15 = v14[3];
    *a3 = v14[2];
    a3[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    CFRelease(v14);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
  uint64_t result = v22;
  if (v22) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  }
  return result;
}

void sub_23F596878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v16);
  if (a14) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3371E0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x270F9A758]();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::target_type()
{
}

void *std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::~__func()
{
}

void *std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F337270;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F337270;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::operator()(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a4;
  uint64_t v6 = **(void **)(a1 + 8);
  if ((*a3 - 1) >= 5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v4, v7, v5);
}

uint64_t std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::target_type()
{
}

void realityio::SkeletalPoseAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X3>, void *a4@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a5@<X8>)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a5, a1);
  uint64_t v64 = 0;
  memset(v63, 0, sizeof(v63));
  uint64_t v62 = 0;
  memset(v61, 0, sizeof(v61));
  uint64_t v60 = 0;
  memset(v59, 0, sizeof(v59));
  uint64_t v8 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v66, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + v10));
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + v9);
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
      MEMORY[0x2455CF810](&v67, "joints");
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v67 & 0xFFFFFFFFFFFFFFF8))
      {
        int v14 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
        if ((v67 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v14)
        {
          if ((BYTE8(v66[0]) & 4) != 0) {
            uint64_t v15 = (long long *)(*(uint64_t (**)(_OWORD *))((*((void *)&v66[0] + 1) & 0xFFFFFFFFFFFFFFF8)
          }
                                                                  + 168))(v66);
          else {
            uint64_t v15 = *(long long **)&v66[0];
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator=((uint64_t)v59, v15);
          goto LABEL_35;
        }
      }
      else if ((v67 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v16 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
      MEMORY[0x2455CF810](&v67, "restTransforms");
      if ((*v16 & 0xFFFFFFFFFFFFFFF8) == (v67 & 0xFFFFFFFFFFFFFFF8))
      {
        int v17 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
        if ((v67 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v17)
        {
          if ((BYTE8(v66[0]) & 4) == 0)
          {
            uint64_t v18 = v63;
            goto LABEL_28;
          }
          uint64_t v21 = (*(uint64_t (**)(_OWORD *))((*((void *)&v66[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(v66);
          uint64_t v18 = v63;
LABEL_29:
          if (v18 != (void *)v21)
          {
            long long v22 = *(_OWORD *)(v21 + 16);
            long long v67 = *(_OWORD *)v21;
            long long v68 = v22;
            uint64_t v23 = *(void *)(v21 + 32);
            *(void *)&long long v69 = v23;
            if (v23)
            {
              int v24 = (atomic_ullong *)(v23 - 16);
              if (*((void *)&v68 + 1)) {
                int v24 = (atomic_ullong *)*((void *)&v68 + 1);
              }
              atomic_fetch_add_explicit(v24, 1uLL, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v18);
            long long v25 = v68;
            *(_OWORD *)uint64_t v18 = v67;
            *((_OWORD *)v18 + 1) = v25;
            long long v67 = 0u;
            long long v68 = 0u;
            void v18[4] = v69;
            *(void *)&long long v69 = 0;
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v67);
          }
          goto LABEL_35;
        }
      }
      else if ((v67 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      int v19 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
      MEMORY[0x2455CF810](&v67, "bindTransforms");
      if ((*v19 & 0xFFFFFFFFFFFFFFF8) == (v67 & 0xFFFFFFFFFFFFFFF8))
      {
        int v20 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
        if ((v67 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v20) {
          goto LABEL_35;
        }
        if ((BYTE8(v66[0]) & 4) != 0)
        {
          uint64_t v21 = (*(uint64_t (**)(_OWORD *))((*((void *)&v66[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(v66);
          uint64_t v18 = v61;
        }
        else
        {
          uint64_t v18 = v61;
LABEL_28:
          uint64_t v21 = *(void *)&v66[0];
        }
        goto LABEL_29;
      }
      if ((v67 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_35:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
      ++v11;
      uint64_t v8 = *a3;
      v10 += 16;
      v9 += 8;
      if (v11 >= (a3[1] - *a3) >> 3)
      {
        unint64_t v26 = *(void *)&v59[0];
        goto LABEL_41;
      }
    }
  }
  unint64_t v26 = 0;
LABEL_41:
  memset(v58, 0, sizeof(v58));
  char v55 = 0;
  int v56 = 0;
  uint64_t v57 = 0;
  memset(__p, 0, sizeof(__p));
  std::vector<char const*>::resize((uint64_t)v58, v26);
  if (!*(void *)&v59[0])
  {
LABEL_52:
    std::vector<RESRT>::resize((uint64_t)&v55, v26);
    uint64_t v34 = v55;
    if (0xAAAAAAAAAAAAAAABLL * ((v56 - (unsigned char *)v55) >> 4) == v63[0] && v56 != v55)
    {
      uint64_t v35 = v64;
      uint64_t v36 = 0x5555555555555580 * ((v56 - (unsigned char *)v55) >> 4);
      __asm { FMOV            V0.4S, #1.0 }
      long long v53 = _Q0;
      do
      {
        MEMORY[0x2455CE5D0](&v67, v35);
        long long v67 = v53;
        v66[0] = xmmword_23F7BDF00;
        long long v65 = 0uLL;
        REDecomposeMatrix();
        uint64_t v42 = v67;
        long long v44 = v65;
        long long v43 = v66[0];
        v34[2] = DWORD2(v67);
        *(void *)uint64_t v34 = v42;
        *((_OWORD *)v34 + 1) = v43;
        v34[10] = DWORD2(v44);
        *((void *)v34 + 4) = v44;
        v35 += 128;
        v34 += 12;
        v36 -= 128;
      }
      while (v36);
    }
    if (v61[0] == v26)
    {
      std::vector<simd_float4x4>::resize((uint64_t)__p, v26);
      if (v61[0])
      {
        uint64_t v45 = v62;
        uint64_t v46 = __p[0];
        uint64_t v47 = v61[0] << 7;
        do
        {
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((uint64_t *)&v67, v45, 0, 0.0);
          MEMORY[0x2455CE5D0](v66, &v67);
          long long v48 = v66[1];
          long long v49 = v66[2];
          long long v50 = v66[3];
          *uint64_t v46 = v66[0];
          v46[1] = v48;
          v46[2] = v49;
          v46[3] = v50;
          uint64_t v45 = (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)v45 + 128);
          v46 += 4;
          v47 -= 128;
        }
        while (v47);
      }
    }
    uint64_t v51 = RESkeletonDefinitionCreate();
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v67, a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
    RESkeletonDefinitionSetName();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
    RESkeletonDefinitionSetJointNames();
    RESkeletonDefinitionSetLocalRestPoses();
    RESkeletonDefinitionSetInverseBindPoses();
    uint64_t v52 = MEMORY[0x2455CDCD0](v51, 0);
    RERelease();
    *(void *)&v66[0] = v52;
    if (v52)
    {
      RERetain();
      RERelease();
    }
    *((void *)&v67 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>::_PlaceCopy();
  }
  char v27 = v60;
  long long v28 = (const char **)v58[0];
  uint64_t v29 = 8 * *(void *)&v59[0];
  while (1)
  {
    unint64_t v30 = *v27 & 0xFFFFFFFFFFFFFFF8;
    if (v30)
    {
      int v31 = *(char *)(v30 + 39);
      if (v31 < 0)
      {
        unint64_t v33 = v30 + 16;
        uint64_t v32 = *(const char **)(v30 + 16);
        if (*(void *)(v33 + 8) > 1uLL)
        {
LABEL_49:
          if (*v32 == 47) {
            ++v32;
          }
        }
      }
      else
      {
        uint64_t v32 = (const char *)(v30 + 16);
        if (v31 >= 2u) {
          goto LABEL_49;
        }
      }
    }
    else
    {
      uint64_t v32 = "";
    }
    *v28++ = v32;
    ++v27;
    v29 -= 8;
    if (!v29) {
      goto LABEL_52;
    }
  }
}

void sub_23F5972C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::VtValue *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(&a43);
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a23);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a29);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a35);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v43);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_Equal(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_EqualPtr(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 8));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F597518(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_StreamOut(void **a1, uint64_t a2)
{
  return MEMORY[0x270F98788](a2, **a1 != 0);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP14REGeomSkeletonEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef((void *)v2);
    MEMORY[0x2455D2BD0](v3, 0x1020C403A5D3213);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>::_PlaceCopy()
{
}

void sub_23F5976E0(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueGetTypeID()
{
  if (RIOPxrVtValueGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrVtValueGetTypeID::onceToken, &__block_literal_global_7);
  }
  return RIOPxrVtValueGetTypeID::typeID;
}

void __RIOPxrVtValueGetTypeID_block_invoke()
{
  if (!RIOPxrVtValueGetTypeID::typeID) {
    RIOPxrVtValueGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrVtValueCreateWithToken(uint64_t a1)
{
  uint64_t v5[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 16);
  v5[0] = v1;
  v5[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
        + 1;
  if ((v1 & 7) != 0)
  {
    uint64_t v2 = (atomic_uint *)(v1 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v2, 2u, memory_order_relaxed) & 1) == 0) {
      v5[0] = v2;
    }
  }
  uint64_t v3 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v5);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  return v3;
}

void sub_23F597818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(void *a1)
{
  if (RIOPxrVtValueGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrVtValueGetTypeID::onceToken, &__block_literal_global_7);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance) {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)(Instance + 16), a1);
  }
  return v3;
}

uint64_t RIOPxrVtValueCreateWithPath(uint64_t a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  v4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
        + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v4 + 1, (_DWORD *)(a1 + 20));
  uint64_t v2 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  return v2;
}

void sub_23F597948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithAssetPath()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy();
}

void sub_23F5979DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithCString(char *__s)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  __p[4] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy();
}

void sub_23F597A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t RIOPxrVtValueCreateWithBool(char a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[1] = &unk_26F333523;
  LOBYTE(v3[0]) = a1;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithInt32(int a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[1] = &unk_26F33764B;
  LODWORD(v3[0]) = a1;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithInt64(uint64_t a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[0] = a1;
  v3[1] = &unk_26F337703;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithUInt8(char a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[1] = &unk_26F3377BB;
  LOBYTE(v3[0]) = a1;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithUInt32(int a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[1] = &unk_26F337873;
  LODWORD(v3[0]) = a1;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithUInt64(uint64_t a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[0] = a1;
  v3[1] = &unk_26F33792B;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithFloat(float a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[1] = &unk_26F333A9B;
  *(float *)uint64_t v3 = a1;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithDouble(double a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[1] = &unk_26F33366B;
  *(double *)uint64_t v3 = a1;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithFloat2(double a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
        + 3;
  *(double *)uint64_t v3 = a1;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F597FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithFloat3()
{
}

void sub_23F59808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithFloat4()
{
}

void sub_23F598150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithDouble2()
{
}

void sub_23F598214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithDouble3()
{
}

void sub_23F5982EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithDouble4()
{
}

void sub_23F5983B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithQuath(__n128 a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  __n128 v3 = a1;
  v4[0] = to_GfQuat<simd_quatf,pxrInternal__aapl__pxrReserved__::GfQuath>((uint64_t)&v3);
  v4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(void)::ti
        + 1;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  return v1;
}

void sub_23F59844C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

unint64_t to_GfQuat<simd_quatf,pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1)
{
  float v2 = *(float *)(a1 + 12);
  if (v2 == 0.0)
  {
    uint64_t v3 = HIWORD(LODWORD(v2));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v2) >> 23)))
  {
    uint64_t v3 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v2) >> 23))
       + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
  }
  LODWORD(v4) = HIDWORD(*(void *)a1);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(_OWORD *)a1;
  if (COERCE_FLOAT(*(_OWORD *)a1) == 0.0)
  {
    unsigned int v6 = v5 >> 16;
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (v5 >> 23)))
  {
    unsigned int v6 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (v5 >> 23))
       + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
    float v4 = *(float *)(a1 + 4);
  }
  if (v4 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v4));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v4) >> 23)))
  {
    unsigned int v7 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v4) >> 23))
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  float v8 = *(float *)(a1 + 8);
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v8) >> 23)))
  {
    unsigned int v9 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v8) >> 23))
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  return (v3 << 48) | ((unint64_t)(unsigned __int16)v9 << 32) | ((unint64_t)(unsigned __int16)v7 << 16) | (unsigned __int16)v6;
}

void RIOPxrVtValueCreateWithQuatf()
{
}

void sub_23F598680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithQuatd()
{
}

void sub_23F598744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithInt2(double a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  *(double *)uint64_t v3 = a1;
  v3[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(void)::ti
        + 3;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F5987DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithInt3()
{
}

void sub_23F5988B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithInt4()
{
}

void sub_23F598990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithHalf(float a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if (a1 == 0.0)
  {
    unsigned int v1 = HIWORD(LODWORD(a1));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(a1) >> 23)))
  {
    unsigned int v1 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(a1) >> 23))
       + (((LODWORD(a1) & 0x7FFFFF) + ((LODWORD(a1) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v1) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(a1));
  }
  v4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(void)::ti
        + 3;
  LOWORD(v4[0]) = v1;
  uint64_t v2 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  return v2;
}

void sub_23F598A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithHalf2(double a1)
{
  std::string v6[2] = *MEMORY[0x263EF8340];
  float v1 = *((float *)&a1 + 1);
  if (*(float *)&a1 == 0.0)
  {
    unsigned int v2 = HIWORD(LODWORD(a1));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(a1) >> 23)))
  {
    unsigned int v2 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(a1) >> 23))
       + (((LODWORD(a1) & 0x7FFFFF) + ((LODWORD(a1) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v2) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(a1));
  }
  if (v1 == 0.0)
  {
    unsigned int v3 = HIWORD(LODWORD(v1));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v1) >> 23)))
  {
    unsigned int v3 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v1) >> 23))
       + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v3) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
  }
  v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(void)::ti
        + 3;
  LODWORD(v6[0]) = (unsigned __int16)v2 | ((unsigned __int16)v3 << 16);
  uint64_t v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  return v4;
}

void sub_23F598B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithHalf3(__n128 a1)
{
  uint64_t v11[2] = *MEMORY[0x263EF8340];
  float v1 = a1.n128_f32[1];
  if (a1.n128_f32[0] == 0.0)
  {
    unsigned __int32 v2 = HIWORD(a1.n128_u32[0]);
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (a1.n128_u32[0] >> 23)))
  {
    unsigned __int32 v2 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (a1.n128_u32[0] >> 23))
       + (((a1.n128_u32[0] & 0x7FFFFF) + ((a1.n128_u32[0] >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    unsigned __int32 v9 = a1.n128_u32[2];
    __int16 v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)a1.n128_u32[0]);
    a1.n128_u32[2] = v9;
    LOWORD(v2) = v3;
  }
  if (v1 == 0.0)
  {
    unsigned int v4 = HIWORD(LODWORD(v1));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v1) >> 23)))
  {
    unsigned int v4 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v1) >> 23))
       + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    unsigned __int32 v10 = a1.n128_u32[2];
    __int16 v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
    a1.n128_u32[2] = v10;
    LOWORD(v4) = v5;
  }
  if (a1.n128_f32[2] == 0.0)
  {
    unsigned __int32 v6 = HIWORD(a1.n128_u32[2]);
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (a1.n128_u32[2] >> 23)))
  {
    unsigned __int32 v6 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (a1.n128_u32[2] >> 23))
       + (((a1.n128_u32[2] & 0x7FFFFF) + ((a1.n128_u32[2] >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)a1.n128_u32[2]);
  }
  v11[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(void)::ti
         + 3;
  LODWORD(v11[0]) = (unsigned __int16)v2 | ((unsigned __int16)v4 << 16);
  WORD2(v11[0]) = v6;
  uint64_t v7 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v11);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  return v7;
}

void sub_23F598D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithHalf4(__n128 a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  __n128 v3 = a1;
  v4[0] = _Z7to_vec4IDv4_fN32pxrInternal__aapl__pxrReserved__7GfVec4hEET0_RKT_((uint64_t)&v3);
  v4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(void)::ti
        + 3;
  uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  return v1;
}

void sub_23F598DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

unint64_t _Z7to_vec4IDv4_fN32pxrInternal__aapl__pxrReserved__7GfVec4hEET0_RKT_(uint64_t a1)
{
  LODWORD(v2) = HIDWORD(*(void *)a1);
  BOOL v3 = COERCE_FLOAT(*(_OWORD *)a1) == 0.0;
  unsigned int v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(_OWORD *)a1;
  if (v3)
  {
    unsigned int v5 = v4 >> 16;
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (v4 >> 23)))
  {
    unsigned int v5 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (v4 >> 23))
       + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
    float v2 = *(float *)(a1 + 4);
  }
  if (v2 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v2));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v2) >> 23)))
  {
    unsigned int v6 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v2) >> 23))
       + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
  }
  float v7 = *(float *)(a1 + 8);
  if (v7 == 0.0)
  {
    unsigned int v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23)))
  {
    unsigned int v8 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  float v9 = *(float *)(a1 + 12);
  if (v9 == 0.0)
  {
    uint64_t v10 = HIWORD(LODWORD(v9));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v9) >> 23)))
  {
    uint64_t v10 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v9) >> 23))
        + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  return ((unint64_t)(unsigned __int16)v8 << 32) | (v10 << 48) | ((unint64_t)(unsigned __int16)v6 << 16) | (unsigned __int16)v5;
}

void RIOPxrVtValueCreateWithMatrix2f()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(void)::ti
     + 2;
  operator new();
}

void sub_23F598FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithMatrix3f()
{
}

void sub_23F599114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithMatrix4f()
{
}

void sub_23F599214(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v1 - 40));
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithMatrix2d()
{
}

void sub_23F5992D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithMatrix3d()
{
}

void sub_23F5993E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithMatrix4d()
{
}

void sub_23F5994FC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v1 - 40));
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithBoolArray(const __CFArray *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v19);
  unint64_t v3 = v19;
  if (Count == (void)v19)
  {
LABEL_28:
    if ((uint64_t)Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        v22[0] = 0;
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        RIOPxrVtValueGetBool((uint64_t)ValueAtIndex, v22);
        char v18 = v22[0];
        pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v19);
        v21[i] = v18;
      }
    }
LABEL_31:
    uint64_t v23 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
  }
  if (!Count)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v19);
    goto LABEL_31;
  }
  unsigned int v4 = v21;
  if (v21)
  {
    if (!*((void *)&v20 + 1))
    {
      unint64_t v5 = atomic_load((unint64_t *)v21 - 2);
      if (v5 == 1)
      {
        if (Count > (unint64_t)v19)
        {
          unsigned int v6 = v21;
          if (*((void *)v21 - 1) < Count)
          {
            New = (char *)pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)&v19, Count);
            unsigned int v4 = New;
            if (v3)
            {
              for (uint64_t j = 0; j != v3; ++j)
                New[j] = v6[j];
            }
          }
          bzero(&v4[v3], Count - v3);
        }
        float v9 = v4;
        goto LABEL_25;
      }
      unsigned int v4 = v21;
    }
    uint64_t v12 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)&v19, Count);
    float v9 = v12;
    if (v3 >= Count) {
      unint64_t v13 = Count;
    }
    else {
      unint64_t v13 = v3;
    }
    if (v13)
    {
      int v14 = v12;
      do
      {
        char v15 = *v4++;
        *v14++ = v15;
        --v13;
      }
      while (v13);
    }
    size_t v11 = Count - v3;
    if (Count <= v3) {
      goto LABEL_25;
    }
    uint64_t v10 = &v12[v3];
  }
  else
  {
    uint64_t v10 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)&v19, Count);
    float v9 = v10;
    size_t v11 = Count;
  }
  bzero(v10, v11);
LABEL_25:
  if (v9 != v21)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v19);
    uint64_t v21 = v9;
  }
  *(void *)&long long v19 = Count;
  goto LABEL_28;
}

void sub_23F599718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetBool(uint64_t a1, unsigned char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  unsigned int v4 = (unsigned char *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      unsigned int v4 = (unsigned char *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C230], v8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  float v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(unsigned char *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F599874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithInt32Array(const __CFArray *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray((uint64_t)v6, Count);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      int v7 = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      RIOPxrVtValueGetInt32((uint64_t)ValueAtIndex, &v7);
      int v5 = v7;
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
      *(_DWORD *)(v6[4] + 4 * i) = v5;
    }
  }
  unsigned int v8 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
}

void sub_23F59997C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((void *)a1);
  BOOL v6 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<int>::resize<pxrInternal__aapl__pxrReserved__::VtArray<int>::assign(unsigned long,int const&)::_Filler>((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_23F599A20(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueGetInt32(uint64_t a1, _DWORD *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  unsigned int v4 = (_DWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      unsigned int v4 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C258], v8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F599B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithInt64Array(const __CFArray *a1)
{
  v23[2] = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  unint64_t v3 = v20;
  if (Count == (void)v20) {
    goto LABEL_29;
  }
  if (Count)
  {
    unsigned int v4 = v22;
    if (v22)
    {
      if (!*((void *)&v21 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v22 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v20)
          {
            BOOL v6 = v22;
            if (*(v22 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)&v20, Count);
              unsigned int v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 8 * (Count - v3));
          }
          uint64_t v9 = v4;
          goto LABEL_26;
        }
        unsigned int v4 = v22;
      }
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        char v15 = v12;
        do
        {
          uint64_t v16 = *v4++;
          *v15++ = v16;
          v14 -= 8;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 8 * (Count - v3);
      uint64_t v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v22)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
        long long v22 = v9;
      }
      *(void *)&long long v20 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          v23[0] = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          RIOPxrVtValueGetInt64((uint64_t)ValueAtIndex, v23);
          uint64_t v19 = v23[0];
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
          v22[j] = v19;
        }
      }
      v23[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
    }
    if (8 * Count / Count == 8)
    {
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v10;
      size_t v11 = 8 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  goto LABEL_29;
}

void sub_23F599D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetInt64(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  unsigned int v4 = (void *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      unsigned int v4 = (void *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C290], v8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F599EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithUInt32Array(const __CFArray *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  unint64_t v3 = v20;
  if (Count == (void)v20) {
    goto LABEL_29;
  }
  if (Count)
  {
    unsigned int v4 = v22;
    if (v22)
    {
      if (!*((void *)&v21 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v22 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v20)
          {
            BOOL v6 = v22;
            if (*((void *)v22 - 1) < Count)
            {
              New = (int *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v20, Count);
              unsigned int v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 4 * (Count - v3));
          }
          uint64_t v9 = v4;
          goto LABEL_26;
        }
        unsigned int v4 = v22;
      }
      uint64_t v12 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 4 * v13;
        char v15 = v12;
        do
        {
          int v16 = *v4++;
          *v15++ = v16;
          v14 -= 4;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 4 * (Count - v3);
      uint64_t v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v22)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
        long long v22 = v9;
      }
      *(void *)&long long v20 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          int v23 = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          RIOPxrVtValueGetUInt32((uint64_t)ValueAtIndex, &v23);
          int v19 = v23;
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
          v22[j] = v19;
        }
      }
      uint64_t v24 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
    }
    if (4 * Count / Count == 4)
    {
      uint64_t v10 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v10;
      size_t v11 = 4 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  goto LABEL_29;
}

void sub_23F59A11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetUInt32(uint64_t a1, _DWORD *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  unsigned int v4 = (_DWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      unsigned int v4 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C260], v8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F59A278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithUInt8Array(const __CFArray *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v19);
  unint64_t v3 = v19;
  if (Count == (void)v19)
  {
LABEL_28:
    if ((uint64_t)Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        v22[0] = 0;
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        RIOPxrVtValueGetUInt8((uint64_t)ValueAtIndex, v22);
        char v18 = v22[0];
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v19);
        v21[i] = v18;
      }
    }
LABEL_31:
    int v23 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
  }
  if (!Count)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v19);
    goto LABEL_31;
  }
  unsigned int v4 = v21;
  if (v21)
  {
    if (!*((void *)&v20 + 1))
    {
      unint64_t v5 = atomic_load((unint64_t *)v21 - 2);
      if (v5 == 1)
      {
        if (Count > (unint64_t)v19)
        {
          BOOL v6 = v21;
          if (*((void *)v21 - 1) < Count)
          {
            New = (char *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v19, Count);
            unsigned int v4 = New;
            if (v3)
            {
              for (uint64_t j = 0; j != v3; ++j)
                New[j] = v6[j];
            }
          }
          bzero(&v4[v3], Count - v3);
        }
        uint64_t v9 = v4;
        goto LABEL_25;
      }
      unsigned int v4 = v21;
    }
    uint64_t v12 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v19, Count);
    uint64_t v9 = v12;
    if (v3 >= Count) {
      unint64_t v13 = Count;
    }
    else {
      unint64_t v13 = v3;
    }
    if (v13)
    {
      uint64_t v14 = v12;
      do
      {
        char v15 = *v4++;
        *v14++ = v15;
        --v13;
      }
      while (v13);
    }
    size_t v11 = Count - v3;
    if (Count <= v3) {
      goto LABEL_25;
    }
    uint64_t v10 = &v12[v3];
  }
  else
  {
    uint64_t v10 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v19, Count);
    uint64_t v9 = v10;
    size_t v11 = Count;
  }
  bzero(v10, v11);
LABEL_25:
  if (v9 != v21)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v19);
    long long v21 = v9;
  }
  *(void *)&long long v19 = Count;
  goto LABEL_28;
}

void sub_23F59A49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetUInt8(uint64_t a1, unsigned char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  unsigned int v4 = (unsigned char *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      unsigned int v4 = (unsigned char *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C250], v8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(unsigned char *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F59A5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithUInt64Array(const __CFArray *a1)
{
  v23[2] = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  unint64_t v3 = v20;
  if (Count == (void)v20) {
    goto LABEL_29;
  }
  if (Count)
  {
    unsigned int v4 = v22;
    if (v22)
    {
      if (!*((void *)&v21 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v22 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v20)
          {
            BOOL v6 = v22;
            if (*(v22 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)&v20, Count);
              unsigned int v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 8 * (Count - v3));
          }
          uint64_t v9 = v4;
          goto LABEL_26;
        }
        unsigned int v4 = v22;
      }
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        char v15 = v12;
        do
        {
          uint64_t v16 = *v4++;
          *v15++ = v16;
          v14 -= 8;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 8 * (Count - v3);
      uint64_t v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v22)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
        long long v22 = v9;
      }
      *(void *)&long long v20 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          v23[0] = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          RIOPxrVtValueGetUInt64((uint64_t)ValueAtIndex, v23);
          uint64_t v19 = v23[0];
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
          v22[j] = v19;
        }
      }
      v23[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
    }
    if (8 * Count / Count == 8)
    {
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v10;
      size_t v11 = 8 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  goto LABEL_29;
}

void sub_23F59A838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetUInt64(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  unsigned int v4 = (void *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      unsigned int v4 = (void *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C298], v8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F59A994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithFloatArray(const __CFArray *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  unint64_t v3 = v20;
  if (Count == (void)v20) {
    goto LABEL_29;
  }
  if (Count)
  {
    unsigned int v4 = v22;
    if (v22)
    {
      if (!*((void *)&v21 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v22 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v20)
          {
            BOOL v6 = v22;
            if (*((void *)v22 - 1) < Count)
            {
              New = (int *)pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)&v20, Count);
              unsigned int v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 4 * (Count - v3));
          }
          uint64_t v9 = v4;
          goto LABEL_26;
        }
        unsigned int v4 = v22;
      }
      uint64_t v12 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 4 * v13;
        char v15 = v12;
        do
        {
          int v16 = *v4++;
          *v15++ = v16;
          v14 -= 4;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 4 * (Count - v3);
      uint64_t v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v22)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
        long long v22 = v9;
      }
      *(void *)&long long v20 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          int v23 = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          RIOPxrVtValueGetFloat((uint64_t)ValueAtIndex, &v23);
          int v19 = v23;
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
          v22[j] = v19;
        }
      }
      uint64_t v24 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
    }
    if (4 * Count / Count == 4)
    {
      uint64_t v10 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v10;
      size_t v11 = 4 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  goto LABEL_29;
}

void sub_23F59ABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetFloat(uint64_t a1, _DWORD *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  unsigned int v4 = (_DWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      unsigned int v4 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C248], v8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F59AD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithDoubleArray(const __CFArray *a1)
{
  v23[2] = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  unint64_t v3 = v20;
  if (Count == (void)v20) {
    goto LABEL_29;
  }
  if (Count)
  {
    unsigned int v4 = v22;
    if (v22)
    {
      if (!*((void *)&v21 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v22 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v20)
          {
            BOOL v6 = v22;
            if (*(v22 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v20, Count);
              unsigned int v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 8 * (Count - v3));
          }
          uint64_t v9 = v4;
          goto LABEL_26;
        }
        unsigned int v4 = v22;
      }
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        char v15 = v12;
        do
        {
          uint64_t v16 = *v4++;
          *v15++ = v16;
          v14 -= 8;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 8 * (Count - v3);
      uint64_t v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v22)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
        long long v22 = v9;
      }
      *(void *)&long long v20 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          v23[0] = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          RIOPxrVtValueGetDouble((uint64_t)ValueAtIndex, v23);
          uint64_t v19 = v23[0];
          pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
          v22[j] = v19;
        }
      }
      v23[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
    }
    if (8 * Count / Count == 8)
    {
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v20, Count);
      uint64_t v9 = v10;
      size_t v11 = 8 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  goto LABEL_29;
}

void sub_23F59AF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetDouble(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  unsigned int v4 = (void *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      unsigned int v4 = (void *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C240], v8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F59B0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithHalfArray(const __CFArray *a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  unint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
  unint64_t v3 = v24;
  if (Count == (void)v24) {
    goto LABEL_29;
  }
  if (Count)
  {
    unsigned int v4 = v26;
    if (v26)
    {
      if (!*((void *)&v25 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v26 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v24)
          {
            BOOL v6 = v26;
            if (*((void *)v26 - 1) < Count)
            {
              New = (__int16 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)&v24, Count);
              unsigned int v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 2 * (Count - v3));
          }
          uint64_t v9 = v4;
          goto LABEL_26;
        }
        unsigned int v4 = v26;
      }
      uint64_t v12 = (__int16 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)&v24, Count);
      uint64_t v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 2 * v13;
        char v15 = v12;
        do
        {
          __int16 v16 = *v4++;
          *v15++ = v16;
          v14 -= 2;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 2 * (Count - v3);
      uint64_t v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v26)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
        unint64_t v26 = v9;
      }
      *(void *)&long long v24 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        CFIndex v17 = 0;
        uint64_t v18 = MEMORY[0x263F90640];
        uint64_t v19 = MEMORY[0x263F90638];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, v17);
          float v21 = 0.0;
          if (RIOPxrVtValueGetGfHalf((uint64_t)ValueAtIndex, &v27)) {
            float v21 = *(float *)(v18 + 4 * v27);
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24);
          long long v22 = v26;
          if (v21 == 0.0)
          {
            unsigned int v23 = HIWORD(LODWORD(v21));
          }
          else if (*(_WORD *)(v19 + 2 * (LODWORD(v21) >> 23)))
          {
            unsigned int v23 = *(unsigned __int16 *)(v19 + 2 * (LODWORD(v21) >> 23))
                + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
          }
          else
          {
            LOWORD(v23) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
          }
          v22[v17++] = v23;
        }
        while (Count != v17);
      }
      long long v28 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
    if (2 * Count / Count == 2)
    {
      uint64_t v10 = (__int16 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)&v24, Count);
      uint64_t v9 = v10;
      size_t v11 = 2 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
  goto LABEL_29;
}

void sub_23F59B378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

float RIOPxrVtValueGetHalf(uint64_t a1, float *a2)
{
  if (RIOPxrVtValueGetGfHalf(a1, &v4))
  {
    float result = *(float *)(MEMORY[0x263F90640] + 4 * v4);
    *a2 = result;
  }
  return result;
}

void RIOPxrVtValueCreateWithInt2Array(const __CFArray *a1)
{
  v25[2] = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  unint64_t v3 = v22;
  if (Count == (void)v22) {
    goto LABEL_29;
  }
  if (Count)
  {
    unsigned __int16 v4 = v24;
    if (v24)
    {
      if (!*((void *)&v23 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v24 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v22)
          {
            BOOL v6 = v24;
            if (*(v24 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)&v22, Count);
              unsigned __int16 v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 8 * (Count - v3));
          }
          uint64_t v9 = v4;
          goto LABEL_26;
        }
        unsigned __int16 v4 = v24;
      }
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)&v22, Count);
      uint64_t v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        char v15 = v12;
        do
        {
          uint64_t v16 = *v4++;
          *v15++ = v16;
          v14 -= 8;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 8 * (Count - v3);
      uint64_t v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v24)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
        long long v24 = v9;
      }
      *(void *)&long long v22 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          v25[0] = 0;
          GfVec2uint64_t i = RIOPxrVtValueGetGfVec2i((uint64_t)ValueAtIndex, v25);
          int8x8_t v20 = (int8x8_t)v25[0];
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
          if (GfVec2i) {
            unsigned int v21 = -1;
          }
          else {
            unsigned int v21 = 0;
          }
          v24[j] = (uint64_t)vand_s8(v20, (int8x8_t)vdup_n_s32(v21));
        }
      }
      v25[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
    if (8 * Count / Count == 8)
    {
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)&v22, Count);
      uint64_t v9 = v10;
      size_t v11 = 8 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  goto LABEL_29;
}

void sub_23F59B660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetInt2(uint64_t a1, double *a2)
{
  double v4 = 0.0;
  if (RIOPxrVtValueGetGfVec2i(a1, &v4))
  {
    double result = v4;
    *a2 = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithInt3Array(const __CFArray *a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  unint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  v34.i32[2] = 0;
  v34.i64[0] = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v31);
  unint64_t v3 = v31;
  if ((void)v31 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    double v4 = v33;
    if (v33)
    {
      if (!*((void *)&v32 + 1))
      {
        unint64_t v5 = atomic_load(v33 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v31 < Count)
          {
            BOOL v6 = v33;
            if (*(v33 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)&v31, Count);
              double v4 = New;
              if (v3)
              {
                uint64_t v8 = 0;
                do
                {
                  uint64_t v9 = (char *)New + v8;
                  uint64_t v10 = *(void *)((char *)v6 + v8);
                  *((_DWORD *)v9 + 2) = *(_DWORD *)((char *)v6 + v8 + 8);
                  *(void *)uint64_t v9 = v10;
                  v8 += 12;
                }
                while (12 * v3 != v8);
              }
            }
            uint64_t v11 = 12 * v3;
            do
            {
              uint64_t v12 = (char *)v4 + v11;
              *(void *)uint64_t v12 = v34.i64[0];
              *((_DWORD *)v12 + 2) = v34.i32[2];
              v11 += 12;
            }
            while (12 * Count != v11);
          }
          unint64_t v13 = v4;
          goto LABEL_27;
        }
        double v4 = v33;
      }
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)&v31, Count);
      unint64_t v13 = v14;
      if (v3 >= Count) {
        unint64_t v15 = Count;
      }
      else {
        unint64_t v15 = v3;
      }
      if (v15)
      {
        uint64_t v16 = 12 * v15;
        CFIndex v17 = v14;
        do
        {
          uint64_t v18 = *v4;
          *((_DWORD *)v17 + 2) = *((_DWORD *)v4 + 2);
          void *v17 = v18;
          CFIndex v17 = (void *)((char *)v17 + 12);
          double v4 = (void *)((char *)v4 + 12);
          v16 -= 12;
        }
        while (v16);
      }
      if (v3 < Count)
      {
        uint64_t v19 = 12 * v3;
        do
        {
          int8x8_t v20 = (char *)v14 + v19;
          *(void *)int8x8_t v20 = v34.i64[0];
          *((_DWORD *)v20 + 2) = v34.i32[2];
          v19 += 12;
        }
        while (12 * Count != v19);
      }
      goto LABEL_27;
    }
    if (Count < 0x1555555555555556)
    {
      unint64_t v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)&v31, Count);
      bzero(v13, 12 * ((12 * Count - 12) / 0xC) + 12);
LABEL_27:
      if (v13 != v33)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v31);
        unint64_t v33 = v13;
      }
      *(void *)&long long v31 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        uint64_t v21 = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          v34.i32[2] = 0;
          v34.i64[0] = 0;
          GfVec3CFIndex i = RIOPxrVtValueGetGfVec3i((uint64_t)ValueAtIndex, (uint64_t)&v34);
          int8x16_t v30 = v34;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v31);
          v25.i64[0] = 0;
          v25.i32[2] = 0;
          v25.i32[3] = v29;
          if (GfVec3i) {
            unsigned int v26 = -1;
          }
          else {
            unsigned int v26 = 0;
          }
          int8x16_t v27 = vbslq_s8((int8x16_t)vdupq_n_s32(v26), v30, v25);
          long long v28 = (char *)v33 + v21;
          *(void *)long long v28 = v27.i64[0];
          __int32 v29 = v27.i32[3];
          *((_DWORD *)v28 + 2) = v27.i32[2];
          v21 += 12;
        }
      }
      v34.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v31);
  goto LABEL_30;
}

void sub_23F59BA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetInt3(uint64_t a1, _OWORD *a2)
{
  DWORD2(v4) = 0;
  *(void *)&long long v4 = 0;
  if (RIOPxrVtValueGetGfVec3i(a1, (uint64_t)&v4))
  {
    double result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithInt4Array(const __CFArray *a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  int8x16_t v29 = 0uLL;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v26);
  unint64_t v3 = v26;
  if ((void)v26 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    long long v4 = v28;
    if (v28)
    {
      if (!*((void *)&v27 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v28 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v26 < Count)
          {
            BOOL v6 = v28;
            if (*((void *)v28 - 1) < Count)
            {
              New = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)&v26, Count);
              long long v4 = New;
              if (v3)
              {
                for (unint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            uint64_t v9 = v3;
            do
              v4[v9++] = (__int128)v29;
            while (Count != v9);
          }
          uint64_t v10 = v4;
          goto LABEL_27;
        }
        long long v4 = v28;
      }
      uint64_t v11 = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)&v26, Count);
      uint64_t v10 = v11;
      if (v3 >= Count) {
        unint64_t v12 = Count;
      }
      else {
        unint64_t v12 = v3;
      }
      if (v12)
      {
        uint64_t v13 = 16 * v12;
        uint64_t v14 = v11;
        do
        {
          long long v15 = *v4++;
          *v14++ = v15;
          v13 -= 16;
        }
        while (v13);
      }
      if (v3 < Count)
      {
        uint64_t v16 = v3;
        do
          v11[v16++] = (__int128)v29;
        while (Count != v16);
      }
      goto LABEL_27;
    }
    if (16 * Count / Count == 16)
    {
      uint64_t v10 = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)&v26, Count);
      bzero(v10, 16 * Count);
LABEL_27:
      if (v10 != v28)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v26);
        long long v28 = v10;
      }
      *(void *)&long long v26 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          int8x16_t v29 = 0uLL;
          GfVec4unint64_t i = RIOPxrVtValueGetGfVec4i((uint64_t)ValueAtIndex, &v29);
          int8x16_t v25 = v29;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v26);
          if (GfVec4i) {
            unsigned int v20 = -1;
          }
          else {
            unsigned int v20 = 0;
          }
          int8x16_t v21 = vandq_s8(v25, (int8x16_t)vdupq_n_s32(v20));
          int32x2_t v22 = (int32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
          int8x16_t v23 = (int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)v21.i8, v22), 0x20uLL);
          *(int32x2_t *)v21.i8 = vzip1_s32(*(int32x2_t *)v21.i8, v22);
          v24.i64[0] = v21.u32[0];
          v24.i64[1] = v21.u32[1];
          v28[j] = (__int128)vorrq_s8(v23, v24);
        }
      }
      v29.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v26);
  goto LABEL_30;
}

void sub_23F59BD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetInt4(uint64_t a1, _OWORD *a2)
{
  long long v4 = 0uLL;
  if (RIOPxrVtValueGetGfVec4i(a1, &v4))
  {
    double result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithHalf2Array(const __CFArray *a1)
{
  v26[2] = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  int8x16_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v23);
  unint64_t v3 = v23;
  if (Count == (void)v23) {
    goto LABEL_29;
  }
  if (Count)
  {
    long long v4 = v25;
    if (v25)
    {
      if (!*((void *)&v24 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v25 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v23)
          {
            BOOL v6 = v25;
            if (*((void *)v25 - 1) < Count)
            {
              New = (int *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v23, Count);
              long long v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 4 * (Count - v3));
          }
          uint64_t v9 = v4;
          goto LABEL_26;
        }
        long long v4 = v25;
      }
      unint64_t v12 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v23, Count);
      uint64_t v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 4 * v13;
        long long v15 = v12;
        do
        {
          int v16 = *v4++;
          *v15++ = v16;
          v14 -= 4;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 4 * (Count - v3);
      uint64_t v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v25)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v23);
        int8x16_t v25 = v9;
      }
      *(void *)&long long v23 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        CFIndex v17 = 0;
        uint64_t v18 = MEMORY[0x263F90638];
        do
        {
          v26[0] = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(a1, v17);
          RIOPxrVtValueGetHalf2((uint64_t)ValueAtIndex, v26);
          float v22 = *((float *)v26 + 1);
          if (*(float *)v26 == 0.0)
          {
            unsigned int v20 = HIWORD(LODWORD(v26[0]));
          }
          else if (*(_WORD *)(v18 + 2 * (LODWORD(v26[0]) >> 23)))
          {
            unsigned int v20 = *(unsigned __int16 *)(v18 + 2 * (LODWORD(v26[0]) >> 23))
                + (((v26[0] & 0x7FFFFF) + ((LODWORD(v26[0]) >> 13) & 1) + 4095) >> 13);
          }
          else
          {
            LOWORD(v20) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v26[0]));
          }
          if (v22 == 0.0)
          {
            unsigned int v21 = HIWORD(LODWORD(v22));
          }
          else if (*(_WORD *)(v18 + 2 * (LODWORD(v22) >> 23)))
          {
            unsigned int v21 = *(unsigned __int16 *)(v18 + 2 * (LODWORD(v22) >> 23))
                + (((LODWORD(v22) & 0x7FFFFF) + ((LODWORD(v22) >> 13) & 1) + 4095) >> 13);
          }
          else
          {
            LOWORD(v21) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v22));
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v23);
          v25[v17++] = (unsigned __int16)v20 | ((unsigned __int16)v21 << 16);
        }
        while (Count != v17);
      }
      v26[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
    if (4 * Count / Count == 4)
    {
      uint64_t v10 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v23, Count);
      uint64_t v9 = v10;
      size_t v11 = 4 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v23);
  goto LABEL_29;
}

void sub_23F59C074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetHalf2(uint64_t result, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 24))
    {
      long long v4 = (unsigned int *)(result + 16);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 16)))
      {
        uint64_t v5 = *(void *)(v2 + 24);
        if ((v5 & 4) != 0) {
          long long v4 = (unsigned int *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 16);
        }
        unsigned int v6 = *v4;
        goto LABEL_10;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      if (!result) {
        return result;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
      if (v9->__type_name)
      {
        unsigned int v6 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
LABEL_10:
        LODWORD(v10) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * (unsigned __int16)v6);
        HIDWORD(v10) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * HIWORD(v6));
        *a2 = v10;
        return 1;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    }
    return 0;
  }
  return result;
}

void sub_23F59C1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithHalf3Array(const __CFArray *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::VtArray((uint64_t)v14, Count);
  if (Count >= 1)
  {
    uint64_t v3 = 0;
    CFIndex v4 = 0;
    uint64_t v5 = MEMORY[0x263F90640];
    uint64_t v6 = MEMORY[0x263F90638];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
      unsigned __int16 v17 = 0;
      int v16 = 0;
      if (RIOPxrVtValueGetGfVec3h((uint64_t)ValueAtIndex, (uint64_t)&v16))
      {
        LODWORD(v8) = *(_DWORD *)(v5 + 4 * (unsigned __int16)v16);
        DWORD1(v8) = *(_DWORD *)(v5 + 4 * HIWORD(v16));
        DWORD2(v8) = *(_DWORD *)(v5 + 4 * v17);
      }
      else
      {
        *(void *)&long long v8 = 0;
        DWORD2(v8) = 0;
        HIDWORD(v8) = HIDWORD(v13);
      }
      long long v13 = v8;
      if (*(float *)&v8 == 0.0)
      {
        unsigned int v9 = WORD1(v8);
      }
      else if (*(_WORD *)(v6 + 2 * (v8 >> 23)))
      {
        unsigned int v9 = *(unsigned __int16 *)(v6 + 2 * (v8 >> 23))
           + ((unsigned __int128)((v8 & 0x7FFFFF) + ((v8 >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)v8);
      }
      if (*((float *)&v13 + 1) == 0.0)
      {
        unsigned int v10 = HIWORD(DWORD1(v13));
      }
      else if (*(_WORD *)(v6 + 2 * (DWORD1(v13) >> 23)))
      {
        unsigned int v10 = *(unsigned __int16 *)(v6 + 2 * (DWORD1(v13) >> 23))
            + (((DWORD1(v13) & 0x7FFFFF) + ((DWORD1(v13) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)DWORD1(v13));
      }
      if (*((float *)&v13 + 2) == 0.0)
      {
        unsigned int v11 = HIWORD(DWORD2(v13));
      }
      else if (*(_WORD *)(v6 + 2 * (DWORD2(v13) >> 23)))
      {
        unsigned int v11 = *(unsigned __int16 *)(v6 + 2 * (DWORD2(v13) >> 23))
            + (((DWORD2(v13) & 0x7FFFFF) + ((DWORD2(v13) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(vstd::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((void *)this + 11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)DWORD2(v13));
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
      uint64_t v12 = v15 + v3;
      *(_DWORD *)uint64_t v12 = (unsigned __int16)v9 | ((unsigned __int16)v10 << 16);
      *(_WORD *)(v12 + 4) = v11;
      ++v4;
      v3 += 6;
    }
    while (Count != v4);
  }
  uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F59C434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetHalf3(uint64_t a1, _OWORD *a2)
{
  unsigned __int16 v6 = 0;
  int v5 = 0;
  if (RIOPxrVtValueGetGfVec3h(a1, (uint64_t)&v5))
  {
    LODWORD(v3) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * (unsigned __int16)v5);
    DWORD1(v3) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * HIWORD(v5));
    DWORD2(v3) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * v6);
    *a2 = v3;
  }
  result.n128_u64[0] = v3;
  result.n128_u32[2] = DWORD2(v3);
  return result;
}

void RIOPxrVtValueCreateWithHalf4Array(const __CFArray *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  float v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  unint64_t v3 = v20;
  if (Count == (void)v20) {
    goto LABEL_29;
  }
  if (Count)
  {
    CFIndex v4 = v22;
    if (v22)
    {
      if (!*((void *)&v21 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v22 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v20)
          {
            unsigned __int16 v6 = v22;
            if (*(v22 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v20, Count);
              CFIndex v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 8 * (Count - v3));
          }
          unsigned int v9 = v4;
          goto LABEL_26;
        }
        CFIndex v4 = v22;
      }
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v20, Count);
      unsigned int v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        uint64_t v15 = v12;
        do
        {
          uint64_t v16 = *v4++;
          *v15++ = v16;
          v14 -= 8;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 8 * (Count - v3);
      unsigned int v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v22)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
        float v22 = v9;
      }
      *(void *)&long long v20 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          long long v23 = 0uLL;
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          RIOPxrVtValueGetHalf4((uint64_t)ValueAtIndex, &v23);
          unint64_t v19 = _Z7to_vec4IDv4_fN32pxrInternal__aapl__pxrReserved__7GfVec4hEET0_RKT_((uint64_t)&v23);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
          v22[j] = v19;
        }
      }
      *((void *)&v23 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
    if (8 * Count / Count == 8)
    {
      unsigned int v10 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v20, Count);
      unsigned int v9 = v10;
      size_t v11 = 8 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  goto LABEL_29;
}

void sub_23F59C714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetHalf4(uint64_t result, _OWORD *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 24))
    {
      CFIndex v4 = (unint64_t *)(result + 16);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 16)))
      {
        uint64_t v5 = *(void *)(v2 + 24);
        if ((v5 & 4) != 0) {
          CFIndex v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 16);
        }
        unint64_t v6 = *v4;
        goto LABEL_10;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      if (!result) {
        return result;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      unsigned int v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
      if (v9->__type_name)
      {
        unint64_t v6 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
LABEL_10:
        LODWORD(v10) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * (unsigned __int16)v6);
        DWORD1(v10) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * WORD1(v6));
        DWORD2(v10) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * WORD2(v6));
        HIDWORD(v10) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * HIWORD(v6));
        *a2 = v10;
        return 1;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    }
    return 0;
  }
  return result;
}

void sub_23F59C8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void RIOPxrVtValueCreateWithFloat2Array(const __CFArray *a1)
{
  v25[2] = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  unint64_t v3 = v22;
  if (Count == (void)v22) {
    goto LABEL_29;
  }
  if (Count)
  {
    CFIndex v4 = v24;
    if (v24)
    {
      if (!*((void *)&v23 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v24 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v22)
          {
            unint64_t v6 = v24;
            if (*(v24 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v22, Count);
              CFIndex v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], 8 * (Count - v3));
          }
          unsigned int v9 = v4;
          goto LABEL_26;
        }
        CFIndex v4 = v24;
      }
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v22, Count);
      unsigned int v9 = v12;
      if (v3 >= Count) {
        unint64_t v13 = Count;
      }
      else {
        unint64_t v13 = v3;
      }
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        uint64_t v15 = v12;
        do
        {
          uint64_t v16 = *v4++;
          *v15++ = v16;
          v14 -= 8;
        }
        while (v14);
      }
      if (Count <= v3) {
        goto LABEL_26;
      }
      size_t v11 = 8 * (Count - v3);
      long long v10 = &v12[v3];
LABEL_25:
      bzero(v10, v11);
LABEL_26:
      if (v9 != v24)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
        uint64_t v24 = v9;
      }
      *(void *)&long long v22 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          v25[0] = 0;
          int GfVec2f = RIOPxrVtValueGetGfVec2f((uint64_t)ValueAtIndex, v25);
          int8x8_t v20 = (int8x8_t)v25[0];
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
          if (GfVec2f) {
            unsigned int v21 = -1;
          }
          else {
            unsigned int v21 = 0;
          }
          v24[j] = (uint64_t)vand_s8(v20, (int8x8_t)vdup_n_s32(v21));
        }
      }
      v25[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
    if (8 * Count / Count == 8)
    {
      long long v10 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v22, Count);
      unsigned int v9 = v10;
      size_t v11 = 8 * Count;
      goto LABEL_25;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  goto LABEL_29;
}

void sub_23F59CAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetFloat2(uint64_t a1, double *a2)
{
  double v4 = 0.0;
  if (RIOPxrVtValueGetGfVec2f(a1, &v4))
  {
    double result = v4;
    *a2 = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithFloat3Array(const __CFArray *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray((uint64_t)v13, Count);
  if (Count >= 1)
  {
    uint64_t v3 = 0;
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v15.i32[2] = 0;
      v15.i64[0] = 0;
      int GfVec3f = RIOPxrVtValueGetGfVec3f((uint64_t)ValueAtIndex, (uint64_t)&v15);
      int8x16_t v12 = v15;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13);
      v7.i64[0] = 0;
      v7.i32[2] = 0;
      v7.i32[3] = v11;
      if (GfVec3f) {
        unsigned int v8 = -1;
      }
      else {
        unsigned int v8 = 0;
      }
      int8x16_t v9 = vbslq_s8((int8x16_t)vdupq_n_s32(v8), v12, v7);
      uint64_t v10 = v14 + v3;
      *(void *)uint64_t v10 = v9.i64[0];
      __int32 v11 = v9.i32[3];
      *(_DWORD *)(v10 + 8) = v9.i32[2];
      v3 += 12;
    }
  }
  v15.i64[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F59CCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetFloat3(uint64_t a1, _OWORD *a2)
{
  DWORD2(v4) = 0;
  *(void *)&long long v4 = 0;
  if (RIOPxrVtValueGetGfVec3f(a1, (uint64_t)&v4))
  {
    double result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithFloat4Array(const __CFArray *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  int8x16_t v25 = 0uLL;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  unint64_t v3 = v22;
  if ((void)v22 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    long long v4 = v24;
    if (v24)
    {
      if (!*((void *)&v23 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v24 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v22 < Count)
          {
            unint64_t v6 = v24;
            if (*((void *)v24 - 1) < Count)
            {
              New = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v22, Count);
              long long v4 = New;
              if (v3)
              {
                for (unint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            uint64_t v9 = v3;
            do
              v4[v9++] = (__int128)v25;
            while (Count != v9);
          }
          uint64_t v10 = v4;
          goto LABEL_27;
        }
        long long v4 = v24;
      }
      __int32 v11 = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v22, Count);
      uint64_t v10 = v11;
      if (v3 >= Count) {
        unint64_t v12 = Count;
      }
      else {
        unint64_t v12 = v3;
      }
      if (v12)
      {
        uint64_t v13 = 16 * v12;
        uint64_t v14 = v11;
        do
        {
          long long v15 = *v4++;
          *v14++ = v15;
          v13 -= 16;
        }
        while (v13);
      }
      if (v3 < Count)
      {
        uint64_t v16 = v3;
        do
          v11[v16++] = (__int128)v25;
        while (Count != v16);
      }
      goto LABEL_27;
    }
    if (16 * Count / Count == 16)
    {
      uint64_t v10 = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v22, Count);
      bzero(v10, 16 * Count);
LABEL_27:
      if (v10 != v24)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
        uint64_t v24 = v10;
      }
      *(void *)&long long v22 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          int8x16_t v25 = 0uLL;
          int GfVec4f = RIOPxrVtValueGetGfVec4f((uint64_t)ValueAtIndex, &v25);
          int8x16_t v21 = v25;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
          if (GfVec4f) {
            unsigned int v20 = -1;
          }
          else {
            unsigned int v20 = 0;
          }
          v24[j] = (__int128)vandq_s8(v21, (int8x16_t)vdupq_n_s32(v20));
        }
      }
      v25.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  goto LABEL_30;
}

void sub_23F59CFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetFloat4(uint64_t a1, _OWORD *a2)
{
  long long v4 = 0uLL;
  if (RIOPxrVtValueGetGfVec4f(a1, &v4))
  {
    double result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithDouble2Array(const __CFArray *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  int8x16_t v25 = 0uLL;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  unint64_t v3 = v22;
  if ((void)v22 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    long long v4 = v24;
    if (v24)
    {
      if (!*((void *)&v23 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v24 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v22 < Count)
          {
            unint64_t v6 = v24;
            if (*((void *)v24 - 1) < Count)
            {
              New = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v22, Count);
              long long v4 = New;
              if (v3)
              {
                for (unint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            uint64_t v9 = v3;
            do
              v4[v9++] = (__int128)v25;
            while (Count != v9);
          }
          uint64_t v10 = v4;
          goto LABEL_27;
        }
        long long v4 = v24;
      }
      __int32 v11 = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v22, Count);
      uint64_t v10 = v11;
      if (v3 >= Count) {
        unint64_t v12 = Count;
      }
      else {
        unint64_t v12 = v3;
      }
      if (v12)
      {
        uint64_t v13 = 16 * v12;
        uint64_t v14 = v11;
        do
        {
          long long v15 = *v4++;
          *v14++ = v15;
          v13 -= 16;
        }
        while (v13);
      }
      if (v3 < Count)
      {
        uint64_t v16 = v3;
        do
          v11[v16++] = (__int128)v25;
        while (Count != v16);
      }
      goto LABEL_27;
    }
    if (16 * Count / Count == 16)
    {
      uint64_t v10 = (long long *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v22, Count);
      bzero(v10, 16 * Count);
LABEL_27:
      if (v10 != v24)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
        uint64_t v24 = v10;
      }
      *(void *)&long long v22 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
          int8x16_t v25 = 0uLL;
          int GfVec2d = RIOPxrVtValueGetGfVec2d((uint64_t)ValueAtIndex, &v25);
          int8x16_t v21 = v25;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
          if (GfVec2d) {
            unint64_t v20 = -1;
          }
          else {
            unint64_t v20 = 0;
          }
          v24[j] = (__int128)vandq_s8(v21, (int8x16_t)vdupq_n_s64(v20));
        }
      }
      v25.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  goto LABEL_30;
}

void sub_23F59D2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetDouble2(uint64_t a1, _OWORD *a2)
{
  long long v4 = 0uLL;
  if (RIOPxrVtValueGetGfVec2d(a1, &v4))
  {
    double result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithDouble3Array(const __CFArray *a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v29);
  unint64_t v3 = v29;
  if ((void)v29 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    long long v4 = v31;
    if (v31)
    {
      if (!*((void *)&v30 + 1))
      {
        unint64_t v5 = atomic_load(v31 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v29 < Count)
          {
            unint64_t v6 = v31;
            if (*(v31 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v29, Count);
              long long v4 = New;
              if (v3)
              {
                uint64_t v8 = 0;
                do
                {
                  uint64_t v9 = &New[v8];
                  long long v10 = *(_OWORD *)&v6[v8];
                  v9[2] = v6[v8 + 2];
                  *(_OWORD *)uint64_t v9 = v10;
                  v8 += 3;
                }
                while (3 * v3 != v8);
              }
            }
            uint64_t v11 = 3 * v3;
            do
            {
              unint64_t v12 = &v4[v11];
              *(_OWORD *)unint64_t v12 = v32;
              uint64_t v12[2] = v33;
              v11 += 3;
            }
            while (3 * Count != v11);
          }
          uint64_t v13 = v4;
          goto LABEL_27;
        }
        long long v4 = v31;
      }
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v29, Count);
      uint64_t v13 = v14;
      if (v3 >= Count) {
        unint64_t v15 = Count;
      }
      else {
        unint64_t v15 = v3;
      }
      if (v15)
      {
        uint64_t v16 = 24 * v15;
        unsigned __int16 v17 = v14;
        do
        {
          long long v18 = *(_OWORD *)v4;
          v17[2] = v4[2];
          *(_OWORD *)unsigned __int16 v17 = v18;
          v17 += 3;
          v4 += 3;
          v16 -= 24;
        }
        while (v16);
      }
      if (v3 < Count)
      {
        uint64_t v19 = 3 * v3;
        do
        {
          unint64_t v20 = &v14[v19];
          *(_OWORD *)unint64_t v20 = v32;
          v20[2] = v33;
          v19 += 3;
        }
        while (3 * Count != v19);
      }
      goto LABEL_27;
    }
    if (Count < 0xAAAAAAAAAAAAAABLL)
    {
      uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v29, Count);
      bzero(v13, 24 * ((24 * Count - 24) / 0x18) + 24);
LABEL_27:
      if (v13 != v31)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v29);
        long long v31 = v13;
      }
      *(void *)&long long v29 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        uint64_t v21 = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          long long v32 = 0uLL;
          uint64_t v33 = 0;
          if (RIOPxrVtValueGetGfVec3d((uint64_t)ValueAtIndex, (uint64_t)&v32))
          {
            *(void *)&long long v24 = v33;
            long long v27 = v32;
            long long v28 = v24;
          }
          else
          {
            *(void *)&long long v25 = 0;
            long long v27 = 0u;
            *((void *)&v25 + 1) = *((void *)&v28 + 1);
            long long v28 = v25;
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29);
          uint64_t v26 = &v31[v21];
          *(_OWORD *)uint64_t v26 = v27;
          v26[2] = v28;
          v21 += 3;
        }
      }
      *((void *)&v32 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v29);
  goto LABEL_30;
}

void sub_23F59D660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetDouble3(uint64_t a1, __n128 *a2)
{
  __n128 v5 = 0uLL;
  unint64_t v6 = 0;
  if (RIOPxrVtValueGetGfVec3d(a1, (uint64_t)&v5))
  {
    __n128 result = v5;
    v4.n128_u64[0] = v6;
    *a2 = v5;
    a2[1] = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithDouble4Array(const __CFArray *a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v28);
  unint64_t v3 = v28;
  if ((void)v28 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    __n128 v4 = v30;
    if (v30)
    {
      if (!*((void *)&v29 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v30 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v28 < Count)
          {
            unint64_t v6 = v30;
            if (*((void *)v30 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v28, Count);
              __n128 v4 = New;
              if (v3)
              {
                unint64_t v8 = 0;
                do
                {
                  uint64_t v9 = &New[v8 / 8];
                  long long v10 = v6[v8 / 0x10 + 1];
                  *uint64_t v9 = v6[v8 / 0x10];
                  v9[1] = v10;
                  v8 += 32;
                }
                while (32 * v3 != v8);
              }
            }
            uint64_t v11 = 2 * v3;
            do
            {
              unint64_t v12 = &v4[v11];
              *unint64_t v12 = v31;
              v12[1] = v32;
              v11 += 2;
            }
            while (2 * Count != v11);
          }
          uint64_t v13 = v4;
          goto LABEL_27;
        }
        __n128 v4 = v30;
      }
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v28, Count);
      uint64_t v13 = v14;
      if (v3 >= Count) {
        unint64_t v15 = Count;
      }
      else {
        unint64_t v15 = v3;
      }
      if (v15)
      {
        uint64_t v16 = 32 * v15;
        unsigned __int16 v17 = v14;
        do
        {
          long long v18 = *v4;
          long long v19 = v4[1];
          v4 += 2;
          _OWORD *v17 = v18;
          v17[1] = v19;
          v17 += 2;
          v16 -= 32;
        }
        while (v16);
      }
      if (v3 < Count)
      {
        uint64_t v20 = 4 * v3;
        do
        {
          uint64_t v21 = &v14[v20];
          _OWORD *v21 = v31;
          v21[1] = v32;
          v20 += 4;
        }
        while (4 * Count != v20);
      }
      goto LABEL_27;
    }
    if (32 * Count / Count == 32)
    {
      uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v28, Count);
      bzero(v13, 32 * Count);
LABEL_27:
      if (v13 != (void *)v30)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v28);
        long long v30 = v13;
      }
      *(void *)&long long v28 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        uint64_t v22 = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          long long v31 = 0u;
          long long v32 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          if (RIOPxrVtValueGetGfVec4d((uint64_t)ValueAtIndex, &v31))
          {
            long long v27 = v31;
            long long v26 = v32;
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v28);
          long long v25 = &v30[v22];
          *long long v25 = v27;
          v25[1] = v26;
          v22 += 2;
        }
      }
      *((void *)&v31 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v28);
  goto LABEL_30;
}

void sub_23F59D9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetDouble4(uint64_t a1, __n128 *a2)
{
  __n128 v5 = 0u;
  __n128 v6 = 0u;
  if (RIOPxrVtValueGetGfVec4d(a1, &v5))
  {
    __n128 result = v5;
    __n128 v4 = v6;
    *a2 = v5;
    a2[1] = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithQuathArray(const __CFArray *a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v18);
  unint64_t v3 = v18;
  if ((void)v18 == Count) {
    goto LABEL_26;
  }
  if (Count)
  {
    __n128 v4 = v20;
    if (v20)
    {
      if (!*((void *)&v19 + 1))
      {
        unint64_t v5 = atomic_load(v20 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v18 < Count)
          {
            __n128 v6 = v20;
            if (*(v20 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)&v18, Count);
              __n128 v4 = New;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
          }
          goto LABEL_23;
        }
        __n128 v4 = v20;
      }
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)&v18, Count);
      if (v3 >= Count) {
        unint64_t v10 = Count;
      }
      else {
        unint64_t v10 = v3;
      }
      if (v10)
      {
        unint64_t v11 = 0;
        uint64_t v12 = 8 * v10;
        do
        {
          v9[v11 / 8] = v4[v11 / 8];
          v11 += 8;
        }
        while (v12 != v11);
      }
LABEL_22:
      __n128 v4 = v9;
LABEL_23:
      if (v4 != v20)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v18);
        uint64_t v20 = v4;
      }
      *(void *)&long long v18 = Count;
LABEL_26:
      if ((uint64_t)Count >= 1)
      {
        CFIndex v13 = 0;
        uint64_t v14 = MEMORY[0x263F90640];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, v13);
          if (RIOPxrVtValueGetGfQuath((uint64_t)ValueAtIndex, &v21))
          {
            LODWORD(v16) = *(_DWORD *)(v14 + 4 * (unsigned __int16)v21);
            DWORD1(v16) = *(_DWORD *)(v14 + 4 * WORD1(v21));
            DWORD2(v16) = *(_DWORD *)(v14 + 4 * WORD2(v21));
            HIDWORD(v16) = *(_DWORD *)(v14 + 4 * HIWORD(v21));
            long long v22 = v16;
          }
          unint64_t v17 = to_GfQuat<simd_quatf,pxrInternal__aapl__pxrReserved__::GfQuath>((uint64_t)&v22);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18);
          v20[v13++] = v17;
        }
        while (Count != v13);
      }
      *((void *)&v22 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
    if (8 * Count / Count == 8)
    {
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)&v18, Count);
      goto LABEL_22;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v18);
  goto LABEL_26;
}

void sub_23F59DC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetQuath(uint64_t a1, __n128 *a2)
{
  if (RIOPxrVtValueGetGfQuath(a1, &v4))
  {
    result.n128_u32[0] = *(_DWORD *)(MEMORY[0x263F90640] + 4 * (unsigned __int16)v4);
    result.n128_u32[1] = *(_DWORD *)(MEMORY[0x263F90640] + 4 * WORD1(v4));
    result.n128_u32[2] = *(_DWORD *)(MEMORY[0x263F90640] + 4 * WORD2(v4));
    result.n128_u32[3] = *(_DWORD *)(MEMORY[0x263F90640] + 4 * HIWORD(v4));
    *a2 = result;
  }
  return result;
}

void RIOPxrVtValueCreateWithQuatfArray(const __CFArray *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::VtArray((uint64_t)v9, Count);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      int GfQuatf = RIOPxrVtValueGetGfQuatf((uint64_t)ValueAtIndex, &v11);
      int8x16_t v8 = v11;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v9);
      if (GfQuatf) {
        unsigned int v6 = -1;
      }
      else {
        unsigned int v6 = 0;
      }
      int8x16_t v7 = vbslq_s8((int8x16_t)vdupq_n_s32(v6), v8, v7);
      *(int8x16_t *)(v10 + 16 * i) = v7;
    }
  }
  v11.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F59DE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetQuatf(uint64_t a1, _OWORD *a2)
{
  if (RIOPxrVtValueGetGfQuatf(a1, &v4))
  {
    double result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithQuatdArray(const __CFArray *a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v28);
  unint64_t v3 = v28;
  if ((void)v28 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    long long v4 = v30;
    if (v30)
    {
      if (!*((void *)&v29 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v30 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v28 < Count)
          {
            unsigned int v6 = v30;
            if (*((void *)v30 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)&v28, Count);
              long long v4 = New;
              if (v3)
              {
                unint64_t v8 = 0;
                do
                {
                  uint64_t v9 = &New[v8 / 8];
                  long long v10 = v6[v8 / 0x10 + 1];
                  *uint64_t v9 = v6[v8 / 0x10];
                  v9[1] = v10;
                  v8 += 32;
                }
                while (32 * v3 != v8);
              }
            }
            uint64_t v11 = 2 * v3;
            do
            {
              uint64_t v12 = &v4[v11];
              *uint64_t v12 = v31;
              v12[1] = v32;
              v11 += 2;
            }
            while (2 * Count != v11);
          }
          CFIndex v13 = v4;
          goto LABEL_27;
        }
        long long v4 = v30;
      }
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)&v28, Count);
      CFIndex v13 = v14;
      if (v3 >= Count) {
        unint64_t v15 = Count;
      }
      else {
        unint64_t v15 = v3;
      }
      if (v15)
      {
        uint64_t v16 = 32 * v15;
        unint64_t v17 = v14;
        do
        {
          long long v18 = *v4;
          long long v19 = v4[1];
          v4 += 2;
          _OWORD *v17 = v18;
          v17[1] = v19;
          v17 += 2;
          v16 -= 32;
        }
        while (v16);
      }
      if (v3 < Count)
      {
        uint64_t v20 = 4 * v3;
        do
        {
          uint64_t v21 = &v14[v20];
          _OWORD *v21 = v31;
          v21[1] = v32;
          v20 += 4;
        }
        while (4 * Count != v20);
      }
      goto LABEL_27;
    }
    if (32 * Count / Count == 32)
    {
      CFIndex v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)&v28, Count);
LABEL_27:
      if (v13 != (void *)v30)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v28);
        long long v30 = v13;
      }
      *(void *)&long long v28 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        uint64_t v22 = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          if (RIOPxrVtValueGetGfQuatd((uint64_t)ValueAtIndex, &v31))
          {
            long long v26 = v32;
            long long v27 = v31;
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v28);
          long long v25 = &v30[v22];
          *long long v25 = v27;
          v25[1] = v26;
          v22 += 2;
        }
      }
      *((void *)&v31 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v28);
  goto LABEL_30;
}

void sub_23F59E170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetQuatd(uint64_t a1, _OWORD *a2)
{
  if (RIOPxrVtValueGetGfQuatd(a1, v5))
  {
    __n128 result = (__n128)v5[0];
    long long v4 = v5[1];
    *a2 = v5[0];
    a2[1] = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithMatrix2dArray(const __CFArray *a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  int8x16_t v36 = 0u;
  int8x16_t v37 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v33);
  unint64_t v3 = v33;
  if ((void)v33 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    long long v4 = v35;
    if (v35)
    {
      if (!*((void *)&v34 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v35 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v33 < Count)
          {
            unsigned int v6 = v35;
            if (*((void *)v35 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)&v33, Count);
              long long v4 = New;
              if (v3)
              {
                unint64_t v8 = 0;
                do
                {
                  uint64_t v9 = &New[v8 / 8];
                  long long v10 = v6[v8 / 0x10 + 1];
                  *uint64_t v9 = v6[v8 / 0x10];
                  v9[1] = v10;
                  v8 += 32;
                }
                while (32 * v3 != v8);
              }
            }
            uint64_t v11 = 2 * v3;
            do
            {
              uint64_t v12 = (int8x16_t *)&v4[v11];
              *uint64_t v12 = v36;
              v12[1] = v37;
              v11 += 2;
            }
            while (2 * Count != v11);
          }
          CFIndex v13 = v4;
          goto LABEL_27;
        }
        long long v4 = v35;
      }
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)&v33, Count);
      CFIndex v13 = v14;
      if (v3 >= Count) {
        unint64_t v15 = Count;
      }
      else {
        unint64_t v15 = v3;
      }
      if (v15)
      {
        uint64_t v16 = 32 * v15;
        unint64_t v17 = v14;
        do
        {
          long long v18 = *v4;
          long long v19 = v4[1];
          v4 += 2;
          _OWORD *v17 = v18;
          v17[1] = v19;
          v17 += 2;
          v16 -= 32;
        }
        while (v16);
      }
      if (v3 < Count)
      {
        uint64_t v20 = 4 * v3;
        do
        {
          uint64_t v21 = (int8x16_t *)&v14[v20];
          int8x16_t *v21 = v36;
          v21[1] = v37;
          v20 += 4;
        }
        while (4 * Count != v20);
      }
      goto LABEL_27;
    }
    if (32 * Count / Count == 32)
    {
      CFIndex v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)&v33, Count);
      bzero(v13, 32 * Count);
LABEL_27:
      if (v13 != (void *)v35)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v33);
        uint64_t v35 = v13;
      }
      *(void *)&long long v33 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        uint64_t v22 = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          int8x16_t v36 = 0u;
          int8x16_t v37 = 0u;
          int GfMatrix2d = RIOPxrVtValueGetGfMatrix2d((uint64_t)ValueAtIndex, &v36);
          int8x16_t v31 = v37;
          int8x16_t v32 = v36;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v33);
          if (GfMatrix2d) {
            unint64_t v26 = -1;
          }
          else {
            unint64_t v26 = 0;
          }
          int8x16_t v27 = (int8x16_t)vdupq_n_s64(v26);
          long long v28 = (int8x16_t *)&v35[v22];
          int8x16_t v29 = vbslq_s8(v27, v31, v29);
          int8x16_t v30 = vbslq_s8(v27, v32, v30);
          int8x16_t *v28 = v30;
          v28[1] = v29;
          v22 += 2;
        }
      }
      v36.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v33);
  goto LABEL_30;
}

void sub_23F59E4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetMatrix2d(uint64_t a1, _OWORD *a2)
{
  long long v5 = 0u;
  long long v6 = 0u;
  if (RIOPxrVtValueGetGfMatrix2d(a1, &v5))
  {
    double result = *(double *)&v5;
    long long v4 = v6;
    *a2 = v5;
    a2[1] = v4;
  }
  return result;
}

void RIOPxrVtValueCreateWithMatrix3dArray(const __CFArray *a1)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  int8x16_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v41 = 0;
  long long v40 = 0u;
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v35);
  unint64_t v3 = v35;
  if ((void)v35 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    long long v4 = v37;
    if (v37)
    {
      if (!*((void *)&v36 + 1))
      {
        unint64_t v5 = atomic_load(v37 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v35 < Count)
          {
            long long v6 = v37;
            if (*(v37 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)&v35, Count);
              long long v4 = New;
              if (v3)
              {
                uint64_t v8 = 0;
                do
                {
                  uint64_t v9 = &New[v8];
                  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v6[v8];
                  long long v10 = *(_OWORD *)&v6[v8 + 2];
                  long long v11 = *(_OWORD *)&v6[v8 + 4];
                  long long v12 = *(_OWORD *)&v6[v8 + 6];
                  v9[8] = v6[v8 + 8];
                  *((_OWORD *)v9 + 2) = v11;
                  *((_OWORD *)v9 + 3) = v12;
                  *((_OWORD *)v9 + 1) = v10;
                  v8 += 9;
                }
                while (9 * v3 != v8);
              }
            }
            uint64_t v13 = 9 * v3;
            do
            {
              uint64_t v14 = &v4[v13];
              *((_OWORD *)v14 + 1) = v39[0];
              *((_OWORD *)v14 + 2) = v39[1];
              *((_OWORD *)v14 + 3) = v40;
              unsigned char v14[8] = v41;
              *(_OWORD *)uint64_t v14 = v38;
              v13 += 9;
            }
            while (9 * Count != v13);
          }
          unint64_t v15 = v4;
          goto LABEL_27;
        }
        long long v4 = v37;
      }
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)&v35, Count);
      unint64_t v15 = v16;
      if (v3 >= Count) {
        unint64_t v17 = Count;
      }
      else {
        unint64_t v17 = v3;
      }
      if (v17)
      {
        uint64_t v18 = 72 * v17;
        long long v19 = v16;
        do
        {
          *(_OWORD *)long long v19 = *(_OWORD *)v4;
          long long v20 = *((_OWORD *)v4 + 1);
          long long v21 = *((_OWORD *)v4 + 2);
          long long v22 = *((_OWORD *)v4 + 3);
          v19[8] = v4[8];
          *((_OWORD *)v19 + 2) = v21;
          *((_OWORD *)v19 + 3) = v22;
          *((_OWORD *)v19 + 1) = v20;
          v4 += 9;
          v19 += 9;
          v18 -= 72;
        }
        while (v18);
      }
      if (v3 < Count)
      {
        uint64_t v23 = 9 * v3;
        do
        {
          long long v24 = &v16[v23];
          *((_OWORD *)v24 + 1) = v39[0];
          *((_OWORD *)v24 + 2) = v39[1];
          *((_OWORD *)v24 + 3) = v40;
          v24[8] = v41;
          *(_OWORD *)long long v24 = v38;
          v23 += 9;
        }
        while (9 * Count != v23);
      }
      goto LABEL_27;
    }
    if (Count < 0x38E38E38E38E38FLL)
    {
      unint64_t v15 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)&v35, Count);
      bzero(v15, 72 * ((72 * Count - 72) / 0x48) + 72);
LABEL_27:
      if (v15 != v37)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
        int8x16_t v37 = v15;
      }
      *(void *)&long long v35 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        uint64_t v25 = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          uint64_t v41 = 0;
          long long v40 = 0u;
          long long v38 = 0u;
          memset(v39, 0, sizeof(v39));
          if (RIOPxrVtValueGetGfMatrix3d((uint64_t)ValueAtIndex, (uint64_t)&v38))
          {
            uint64_t v33 = *(void *)&v39[0];
            long long v34 = v38;
            uint64_t v31 = *((void *)&v39[1] + 1);
            long long v32 = *(_OWORD *)((char *)v39 + 8);
            uint64_t v29 = v41;
            long long v30 = v40;
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
          long long v28 = &v37[v25];
          *(_OWORD *)long long v28 = v34;
          v28[2] = v33;
          *(_OWORD *)(v28 + 3) = v32;
          v28[5] = v31;
          *((_OWORD *)v28 + 3) = v30;
          v28[8] = v29;
          v25 += 9;
        }
      }
      *((void *)&v38 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v35);
  goto LABEL_30;
}

void sub_23F59E900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetMatrix3d(uint64_t a1, _OWORD *a2)
{
  uint64_t v11 = 0;
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  if (RIOPxrVtValueGetGfMatrix3d(a1, (uint64_t)v9))
  {
    __n128 result = (__n128)v9[0];
    long long v7 = *(_OWORD *)((char *)&v9[1] + 8);
    *(void *)&long long v4 = *(void *)&v9[1];
    *(void *)&long long v5 = *((void *)&v9[2] + 1);
    long long v8 = v10;
    *(void *)&long long v6 = v11;
    *a2 = v9[0];
    a2[1] = v4;
    a2[2] = v7;
    a2[3] = v5;
    a2[4] = v8;
    a2[5] = v6;
  }
  return result;
}

void RIOPxrVtValueCreateWithMatrix4dArray(const __CFArray *a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v43);
  unint64_t v3 = v43;
  if ((void)v43 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    long long v4 = v45;
    if (v45)
    {
      if (!*((void *)&v44 + 1))
      {
        unint64_t v5 = atomic_load((unint64_t *)v45 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v43 < Count)
          {
            long long v6 = v45;
            if (*((void *)v45 - 1) < Count)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)&v43, Count);
              long long v4 = New;
              if (v3)
              {
                unint64_t v8 = 0;
                do
                {
                  uint64_t v9 = &New[v8 / 8];
                  long long v10 = v6[v8 / 0x10];
                  long long v11 = v6[v8 / 0x10 + 1];
                  long long v12 = v6[v8 / 0x10 + 3];
                  v9[2] = v6[v8 / 0x10 + 2];
                  _OWORD v9[3] = v12;
                  *uint64_t v9 = v10;
                  v9[1] = v11;
                  long long v13 = v6[v8 / 0x10 + 4];
                  long long v14 = v6[v8 / 0x10 + 5];
                  long long v15 = v6[v8 / 0x10 + 7];
                  v9[6] = v6[v8 / 0x10 + 6];
                  v9[7] = v15;
                  void v9[4] = v13;
                  void v9[5] = v14;
                  v8 += 128;
                }
                while (v3 << 7 != v8);
              }
            }
            unint64_t v16 = v3 << 7;
            do
            {
              unint64_t v17 = (_OWORD *)((char *)v4 + v16);
              v17[4] = v50;
              v17[5] = v51;
              v17[6] = v52;
              v17[7] = v53;
              _OWORD *v17 = v46;
              v17[1] = v47;
              v17[2] = v48;
              _DWORD v17[3] = v49;
              v16 += 128;
            }
            while (Count << 7 != v16);
          }
          uint64_t v18 = v4;
          goto LABEL_27;
        }
        long long v4 = v45;
      }
      long long v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)&v43, Count);
      uint64_t v18 = v19;
      if (v3 >= Count) {
        unint64_t v20 = Count;
      }
      else {
        unint64_t v20 = v3;
      }
      if (v20)
      {
        unint64_t v21 = v20 << 7;
        long long v22 = v19;
        do
        {
          long long v23 = *v4;
          long long v24 = v4[1];
          long long v25 = v4[3];
          void v22[2] = v4[2];
          void v22[3] = v25;
          _OWORD *v22 = v23;
          v22[1] = v24;
          long long v26 = v4[4];
          long long v27 = v4[5];
          long long v28 = v4[7];
          v22[6] = v4[6];
          v22[7] = v28;
          _DWORD v22[4] = v26;
          v22[5] = v27;
          v4 += 8;
          v22 += 8;
          v21 -= 128;
        }
        while (v21);
      }
      if (v3 < Count)
      {
        unint64_t v29 = v3 << 7;
        do
        {
          long long v30 = (_OWORD *)((char *)v19 + v29);
          v30[4] = v50;
          v30[5] = v51;
          v30[6] = v52;
          v30[7] = v53;
          *long long v30 = v46;
          v30[1] = v47;
          uint64_t v30[2] = v48;
          v30[3] = v49;
          v29 += 128;
        }
        while (Count << 7 != v29);
      }
      goto LABEL_27;
    }
    if ((Count << 7) / Count == 128)
    {
      uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)&v43, Count);
      bzero(v18, Count << 7);
LABEL_27:
      if (v18 != (void *)v45)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v43);
        uint64_t v45 = v18;
      }
      *(void *)&long long v43 = Count;
LABEL_30:
      if ((uint64_t)Count >= 1)
      {
        uint64_t v31 = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          RIOPxrVtValueGetMatrix4d((uint64_t)ValueAtIndex, &v46);
          long long v41 = v49;
          long long v42 = v47;
          long long v37 = v48;
          long long v38 = v46;
          long long v39 = v53;
          long long v40 = v51;
          long long v35 = v52;
          long long v36 = v50;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
          long long v34 = &v45[v31];
          _OWORD *v34 = v38;
          v34[1] = v42;
          v34[2] = v37;
          v34[3] = v41;
          v34[4] = v36;
          v34[5] = v40;
          v34[6] = v35;
          v34[7] = v39;
          v31 += 8;
        }
      }
      *((void *)&v46 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v43);
  goto LABEL_30;
}

void sub_23F59ED3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetMatrix4d(uint64_t result, _OWORD *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v2 = result;
    if (!*(void *)(result + 24)) {
      return 0;
    }
    long long v4 = (uint64_t *)(result + 16);
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 16)))
    {
      uint64_t v5 = *(void *)(v2 + 24);
      if ((v5 & 4) != 0) {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 16);
      }
      else {
        uint64_t v6 = *v4;
      }
      *(void *)&long long v7 = *(void *)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      long long v9 = *(_OWORD *)(v6 + 16);
      *(void *)&long long v10 = *(void *)(v6 + 32);
      uint64_t v11 = *(void *)(v6 + 40);
      long long v12 = *(_OWORD *)(v6 + 48);
      *(void *)&long long v13 = *(void *)(v6 + 64);
      uint64_t v14 = *(void *)(v6 + 72);
      long long v15 = *(_OWORD *)(v6 + 80);
      *(void *)&long long v16 = *(void *)(v6 + 96);
      uint64_t v17 = *(void *)(v6 + 104);
      long long v18 = *(_OWORD *)(v6 + 112);
      goto LABEL_10;
    }
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
    if (result)
    {
      unint64_t v21 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      long long v22 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v21);
      if (v22->__type_name)
      {
        uint64_t v23 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
        uint64_t v35 = *(void *)v23;
        uint64_t v34 = *(void *)(v23 + 8);
        long long v33 = *(_OWORD *)(v23 + 16);
        uint64_t v32 = *(void *)(v23 + 32);
        uint64_t v31 = *(void *)(v23 + 40);
        uint64_t v29 = *(void *)(v23 + 64);
        long long v30 = *(_OWORD *)(v23 + 48);
        uint64_t v28 = *(void *)(v23 + 72);
        uint64_t v26 = *(void *)(v23 + 96);
        long long v27 = *(_OWORD *)(v23 + 80);
        uint64_t v25 = *(void *)(v23 + 104);
        long long v24 = *(_OWORD *)(v23 + 112);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        long long v18 = v24;
        uint64_t v17 = v25;
        long long v15 = v27;
        uint64_t v14 = v28;
        long long v12 = v30;
        uint64_t v11 = v31;
        long long v9 = v33;
        uint64_t v8 = v34;
        *(void *)&long long v16 = v26;
        *(void *)&long long v13 = v29;
        *(void *)&long long v10 = v32;
        *(void *)&long long v7 = v35;
LABEL_10:
        *((void *)&v7 + 1) = v8;
        *((void *)&v10 + 1) = v11;
        *((void *)&v13 + 1) = v14;
        *((void *)&v16 + 1) = v17;
        *a2 = v7;
        a2[1] = v9;
        a2[2] = v10;
        a2[3] = v12;
        a2[4] = v13;
        a2[5] = v15;
        a2[6] = v16;
        a2[7] = v18;
        return 1;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
      return 0;
    }
  }
  return result;
}

void sub_23F59EF3C(_Unwind_Exception *exception_object)
{
}

void RIOPxrVtValueCreateWithTokenArray(const __CFArray *a1)
{
  v6[7] = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::VtArray((uint64_t)v6, Count);
  if (Count >= 1)
  {
    uint64_t v3 = 0;
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
      pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(v6[4] + v3), ValueAtIndex + 2);
      v3 += 8;
    }
  }
  v6[6] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

void sub_23F59F050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::VtArray(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear((void *)a1);
  uint64_t v6 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::TfToken const&)::_Filler>((uint64_t *)a1, a2, &v6);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_23F59F10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v9);
  _Unwind_Resume(a1);
}

void RIOPxrVtValueCreateWithStringArray(const __CFArray *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_DWORD *)((char *)v20 + 3) = 0;
  v20[0] = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(&v17);
  unint64_t v3 = v17;
  if ((void)v17 == Count) {
    goto LABEL_29;
  }
  if (Count)
  {
    New = v19;
    if (v19)
    {
      if (!*((void *)&v18 + 1))
      {
        unint64_t v5 = atomic_load(v19 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v17 >= Count)
          {
            uint64_t v10 = 24 * Count;
            uint64_t v11 = 24 * v17;
            do
            {
              if (SHIBYTE(New[(unint64_t)v10 / 8 + 2]) < 0) {
                operator delete((void *)New[(unint64_t)v10 / 8]);
              }
              v10 += 24;
            }
            while (v11 != v10);
            uint64_t v8 = New;
            goto LABEL_26;
          }
          uint64_t v6 = (uint64_t)v19;
          if (*(v19 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)&v17, Count);
            std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v6, v6 + 24 * v3, (uint64_t)New);
          }
          long long v7 = &New[3 * v3];
          uint64_t v8 = New;
          goto LABEL_19;
        }
        New = v19;
      }
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)&v17, Count);
      if (v3 >= Count) {
        unint64_t v9 = Count;
      }
      else {
        unint64_t v9 = v3;
      }
      std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>((uint64_t)New, (uint64_t)&New[3 * v9], (uint64_t)v8);
      if (v3 >= Count) {
        goto LABEL_26;
      }
      long long v7 = &v8[3 * v3];
LABEL_19:
      while (v7 != &v8[3 * Count])
      {
        void *v7 = 0;
        v7[1] = 0;
        *((_DWORD *)v7 + 4) = v20[0];
        *(_DWORD *)((char *)v7 + 19) = *(_DWORD *)((char *)v20 + 3);
        *((unsigned char *)v7 + 23) = 0;
        v7 += 3;
      }
LABEL_26:
      if (v8 != v19)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v17);
        long long v19 = v8;
      }
      *(void *)&long long v17 = Count;
LABEL_29:
      if ((uint64_t)Count >= 1)
      {
        uint64_t v12 = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
          CFIndex v15 = CFStringGetLength(ValueAtIndex) + 1;
          long long v16 = (char *)malloc_type_malloc(v15, 0x548D303FuLL);
          CFStringGetCString(ValueAtIndex, v16, v15, 0x8000100u);
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
          MEMORY[0x2455D2770](&v19[v12], v16);
          free(v16);
          v12 += 3;
        }
      }
      unint64_t v21 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
    if (Count <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)&v17, Count);
      long long v7 = v8;
      goto LABEL_19;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(&v17);
  goto LABEL_29;
}

void sub_23F59F3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RIOPxrVtValueCreateWithPathListOp(const __CFArray *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    for (CFIndex i = 0; i != v3; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      uint64_t v6 = ValueAtIndex + 4;
      long long v7 = v10;
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v8 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v9, v6);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v10, v6);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v7 + 1, ValueAtIndex + 5);
        uint64_t v8 = v7 + 2;
      }
      uint64_t v10 = v8;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::CreateExplicit();
}

void sub_23F59F5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 - 72));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::~SdfListOp(&a9);
  a9 = (void *)(v9 - 104);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::~SdfListOp(void **a1)
{
  CFIndex v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFIndex v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFIndex v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFIndex v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFIndex v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFIndex v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void RIOPxrVtValueCreateWithAssetPathArray(const __CFArray *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t Count = CFArrayGetCount(a1);
  long long v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v20);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::clear(&v17);
  unint64_t v3 = v17;
  if ((void)v17 == Count) {
    goto LABEL_30;
  }
  if (Count)
  {
    New = v19;
    if (v19)
    {
      if (!*((void *)&v18 + 1))
      {
        unint64_t v5 = atomic_load(v19 - 2);
        if (v5 == 1)
        {
          if ((unint64_t)v17 >= Count)
          {
            uint64_t v10 = 48 * Count;
            uint64_t v11 = 48 * v17;
            do
            {
              uint64_t v12 = (void **)&New[(unint64_t)v10 / 8];
              if (SHIBYTE(New[(unint64_t)v10 / 8 + 5]) < 0) {
                operator delete(v12[3]);
              }
              if (*((char *)v12 + 23) < 0) {
                operator delete(*v12);
              }
              v10 += 48;
            }
            while (v11 != v10);
            uint64_t v8 = New;
            goto LABEL_27;
          }
          uint64_t v6 = (uint64_t)v19;
          if (*(v19 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)&v17, Count);
            std::__uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,std::__always_false>(v6, v6 + 48 * v3, (uint64_t)New);
          }
          long long v7 = &New[6 * v3];
          uint64_t v8 = New;
          goto LABEL_19;
        }
        New = v19;
      }
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)&v17, Count);
      if (v3 >= Count) {
        unint64_t v9 = Count;
      }
      else {
        unint64_t v9 = v3;
      }
      std::__uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,std::__always_false>((uint64_t)New, (uint64_t)&New[6 * v9], (uint64_t)v8);
      if (v3 >= Count) {
        goto LABEL_27;
      }
      long long v7 = &v8[6 * v3];
LABEL_19:
      std::__uninitialized_fill[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)v7, (uint64_t)&v8[6 * Count], (long long *)v20);
LABEL_27:
      if (v8 != v19)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v17);
        long long v19 = v8;
      }
      *(void *)&long long v17 = Count;
LABEL_30:
      if (v23 < 0) {
        operator delete(__p);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      if ((uint64_t)Count >= 1)
      {
        CFIndex v13 = 0;
        uint64_t v14 = 3;
        do
        {
          CFStringRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(a1, v13);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
          long long v16 = (std::string *)&v19[v14];
          std::string::operator=((std::string *)&v19[v14 - 3], (const std::string *)(ValueAtIndex + 16));
          std::string::operator=(v16, (const std::string *)(ValueAtIndex + 40));
          ++v13;
          v14 += 6;
        }
        while (Count != v13);
      }
      v20[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
    }
    if (Count <= 0x555555555555555)
    {
      long long v7 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)&v17, Count);
      uint64_t v8 = v7;
      goto LABEL_19;
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::clear(&v17);
  goto LABEL_30;
}

void sub_23F59F93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

CFStringRef RIOPxrVtValueCopyCPPTypeName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_23F59FA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrVtValueCopyTypeName(uint64_t a1)
{
  uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
  if (*(char *)(TypeName + 23) >= 0) {
    CFStringRef v2 = (const char *)TypeName;
  }
  else {
    CFStringRef v2 = *(const char **)TypeName;
  }
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C290], v1, v2);
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned char>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C250], v1, v2);
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C298], v1, v2);
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t RIOPxrVtValueGetGfHalf(uint64_t a1, _WORD *a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  long long v4 = (_WORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      long long v4 = (_WORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)&v13))
  {
    uint64_t v10 = &v13;
  }
  else
  {
    uint64_t v10 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v13, v14);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  }
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v10->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(_WORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  return v6;
}

void sub_23F59FD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueGetGfVec2i(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  long long v4 = (void *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      long long v4 = (void *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  unint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F59FE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueGetGfVec3i(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  long long v4 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v6 = *v4;
    }
    uint64_t v7 = *(void *)v6;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + 8);
    *(void *)a2 = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v11->__type_name;
  BOOL v8 = type_name != 0;
  if (type_name)
  {
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    uint64_t v14 = *(void *)v13;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v13 + 8);
    *(void *)a2 = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_23F59FFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueGetGfVec4i(uint64_t a1, _OWORD *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  long long v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v6 = *v4;
    }
    *a2 = *v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v10->__type_name;
  BOOL v7 = type_name != 0;
  if (type_name) {
    *a2 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_23F5A00DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 66) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      long long v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t RIOPxrVtValueGetGfVec3h(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = a1 + 16;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    int v6 = *(_DWORD *)v4;
    *(_WORD *)(a2 + 4) = *(_WORD *)(v4 + 4);
    *(_DWORD *)a2 = v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v15, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v10->__type_name;
  BOOL v7 = type_name != 0;
  if (type_name)
  {
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    int v13 = *(_DWORD *)v12;
    *(_WORD *)(a2 + 4) = *(_WORD *)(v12 + 4);
    *(_DWORD *)a2 = v13;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  return v7;
}

void sub_23F5A0368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 64) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t RIOPxrVtValueGetGfVec2f(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (void *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  unint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v9->__type_name;
  BOOL v6 = type_name != 0;
  if (type_name) {
    *a2 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_23F5A0704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueGetGfVec3f(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v6 = *v4;
    }
    uint64_t v7 = *(void *)v6;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + 8);
    *(void *)a2 = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v11->__type_name;
  BOOL v8 = type_name != 0;
  if (type_name)
  {
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    uint64_t v14 = *(void *)v13;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v13 + 8);
    *(void *)a2 = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_23F5A0838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueGetGfVec4f(uint64_t a1, _OWORD *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v6 = *v4;
    }
    *a2 = *v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v10->__type_name;
  BOOL v7 = type_name != 0;
  if (type_name) {
    *a2 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_23F5A095C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueGetGfVec2d(uint64_t a1, _OWORD *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v6 = *v4;
    }
    *a2 = *v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v10->__type_name;
  BOOL v7 = type_name != 0;
  if (type_name) {
    *a2 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_23F5A0A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 72) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t RIOPxrVtValueGetGfVec3d(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v6 = *v4;
    }
    long long v7 = *(_OWORD *)v6;
    *(void *)(a2 + 16) = *(void *)(v6 + 16);
    *(_OWORD *)a2 = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v11->__type_name;
  BOOL v8 = type_name != 0;
  if (type_name)
  {
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    long long v14 = *(_OWORD *)v13;
    *(void *)(a2 + 16) = *(void *)(v13 + 16);
    *(_OWORD *)a2 = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_23F5A0D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t RIOPxrVtValueGetGfVec4d(uint64_t a1, _OWORD *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v6 = *v4;
    }
    long long v7 = v6[1];
    *a2 = *v6;
    a2[1] = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v11->__type_name;
  BOOL v8 = type_name != 0;
  if (type_name)
  {
    uint64_t v13 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    long long v14 = v13[1];
    *a2 = *v13;
    a2[1] = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_23F5A0F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 70) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t RIOPxrVtValueGetGfQuath(uint64_t a1, std::type_info_vtbl **a2)
{
  v16[2] = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (std::type_info_vtbl **)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v15, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
      {
        uint64_t v10 = &v15;
      }
      else
      {
        uint64_t v10 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v15, v16);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      }
      std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v10->__type_name;
      BOOL v6 = type_name != 0;
      if (!type_name) {
        goto LABEL_17;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>((pxrInternal__aapl__pxrReserved__::VtValue *)v10))
      {
        std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v13 = v10->__type_name;
        if ((v13 & 4) == 0)
        {
LABEL_16:
          *a2 = v10->__vftable;
LABEL_17:
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v15);
          return v6;
        }
        uint64_t v14 = (*(uint64_t (**)(std::type_info *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v10);
      }
      else
      {
        uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
      }
      uint64_t v10 = (std::type_info *)v14;
      goto LABEL_16;
    }
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if ((v5 & 4) != 0) {
    uint64_t v4 = (std::type_info_vtbl **)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  *a2 = *v4;
  return 1;
}

void sub_23F5A1250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 87) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t RIOPxrVtValueGetGfQuatf(uint64_t a1, _OWORD *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      BOOL v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      BOOL v6 = *v4;
    }
    *a2 = *v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v10->__type_name;
  BOOL v7 = type_name != 0;
  if (type_name) {
    *a2 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_23F5A13AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t RIOPxrVtValueGetGfQuatd(uint64_t a1, _OWORD *a2)
{
  v18[2] = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      BOOL v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      BOOL v6 = *v4;
    }
    long long v7 = v6[1];
    *a2 = *v6;
    a2[1] = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v17, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    uint64_t v12 = &v17;
  }
  else
  {
    uint64_t v12 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v17, v18);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
  }
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v12->__type_name;
  BOOL v8 = type_name != 0;
  if (type_name)
  {
    std::type_info v15 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
    long long v16 = v15[1];
    *a2 = *v15;
    a2[1] = v16;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v17);
  return v8;
}

void sub_23F5A162C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 89) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatd>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t RIOPxrVtValueGetGfMatrix2d(uint64_t a1, _OWORD *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      BOOL v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      BOOL v6 = *v4;
    }
    long long v7 = v6[1];
    *a2 = *v6;
    a2[1] = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v11->__type_name;
  BOOL v8 = type_name != 0;
  if (type_name)
  {
    std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v13 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    long long v14 = v13[1];
    *a2 = *v13;
    a2[1] = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_23F5A181C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueGetGfMatrix3d(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v6 = *v4;
    }
    *(_OWORD *)a2 = *(_OWORD *)v6;
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v8 = *(_OWORD *)(v6 + 32);
    long long v9 = *(_OWORD *)(v6 + 48);
    *(void *)(a2 + 64) = *(void *)(v6 + 64);
    *(_OWORD *)(a2 + 32) = v8;
    *(_OWORD *)(a2 + 48) = v9;
    *(_OWORD *)(a2 + 16) = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v20, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v13 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v13->__type_name;
  BOOL v10 = type_name != 0;
  if (type_name)
  {
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
    *(_OWORD *)a2 = *(_OWORD *)v15;
    long long v16 = *(_OWORD *)(v15 + 16);
    long long v17 = *(_OWORD *)(v15 + 32);
    long long v18 = *(_OWORD *)(v15 + 48);
    *(void *)(a2 + 64) = *(void *)(v15 + 64);
    *(_OWORD *)(a2 + 32) = v17;
    *(_OWORD *)(a2 + 48) = v18;
    *(_OWORD *)(a2 + 16) = v16;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  return v10;
}

void sub_23F5A1970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueCopyToken(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 24)
      && (uint64_t v2 = (uint64_t *)(result + 16),
          pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 16))))
    {
      uint64_t v3 = *(void *)(v1 + 24);
      if ((v3 & 4) != 0) {
        uint64_t v2 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v1 + 16);
      }
      uint64_t v4 = *v2;
      uint64_t v6 = v4;
      if ((v4 & 7) != 0)
      {
        uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
          uint64_t v6 = (uint64_t)v5;
        }
      }
      __n128 result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v6);
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RIOPxrVtValueCopyPath(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (_DWORD *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v2 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, v2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, v2 + 1);
  uint64_t v4 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  return v4;
}

void sub_23F5A1B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCopyAssetPath(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (*(void *)(a1 + 24)
      && (uint64_t v2 = (uint64_t *)(a1 + 16),
          pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))))
    {
      uint64_t v3 = *(void *)(v1 + 24);
      if ((v3 & 4) != 0) {
        uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v1 + 16);
      }
      else {
        uint64_t v4 = *v2;
      }
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
      }
      else
      {
        long long v5 = *(_OWORD *)v4;
        v12.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
        *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
      }
      if (*(char *)(v4 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 24), *(void *)(v4 + 32));
      }
      else
      {
        long long v6 = *(_OWORD *)(v4 + 24);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v4 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      if (RIOPxrSdfAssetPathGetTypeID::onceToken != -1) {
        dispatch_once(&RIOPxrSdfAssetPathGetTypeID::onceToken, &__block_literal_global_32);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v1 = Instance;
      if (Instance)
      {
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(Instance + 16), v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
        }
        else
        {
          std::string::size_type v8 = v12.__r_.__value_.__r.__words[2];
          *(_OWORD *)(Instance + 16) = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
          *(void *)(Instance + 32) = v8;
        }
        long long v9 = (std::string *)(v1 + 40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          std::string::size_type v10 = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v1 + 56) = v10;
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_23F5A1CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 39) < 0) {
    operator delete(*v15);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&__p);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrVtValueCopyString(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if ((v3 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    }
    else {
      uint64_t v4 = *v2;
    }
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
    }
    else
    {
      long long v5 = *(_OWORD *)v4;
      v13.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v9 = &v13;
    }
    else {
      long long v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    CFStringRef v6 = CFStringCreateWithCString(0, (const char *)v9, 0x8000100u);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::operator<<();
    std::stringbuf::str();
    if (v12 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    CFStringRef v6 = CFStringCreateWithCString(0, p_p, 0x8000100u);
    if (v12 < 0) {
      operator delete(__p);
    }
    v13.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
    std::string::size_type v8 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words
                              + *(void *)(v13.__r_.__value_.__r.__words[0] - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2B8]
                                                                                                + 64);
    v13.__r_.__value_.__r.__words[2] = v8;
    uint64_t v14 = MEMORY[0x263F8C318] + 16;
    if (v16 < 0) {
      operator delete(v15);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2455D2B30](&v17);
  }
  return v6;
}

void sub_23F5A1F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrVtValueCopyBoolArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(char **)(v4 + 32);
  uint64_t v15 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithBool(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A20B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 47) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyInt32Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(int **)(v4 + 32);
  uint64_t v15 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 4);
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithInt32(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A2224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 52) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyInt64Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(uint64_t **)(v4 + 32);
  uint64_t v15 = v6;
  if (v6)
  {
    int v7 = v6 - 2;
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithInt64(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A2398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 54) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyUInt8Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(char **)(v4 + 32);
  uint64_t v15 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithUInt8(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A250C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 49) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyUInt32Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(int **)(v4 + 32);
  uint64_t v15 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 4);
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithUInt32(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A2680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 53) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyUInt64Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(uint64_t **)(v4 + 32);
  uint64_t v15 = v6;
  if (v6)
  {
    int v7 = v6 - 2;
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithUInt64(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A27F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 55) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyHalfArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v14 = *(_OWORD *)v4;
  long long v15 = v5;
  CFStringRef v6 = *(unsigned __int16 **)(v4 + 32);
  char v16 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 8);
    if (*((void *)&v15 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  long long v9 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  std::string::size_type v10 = &v16[v14];
  if (v9 != v10)
  {
    uint64_t v11 = MEMORY[0x263F90640];
    do
    {
      char v12 = (const void *)RIOPxrVtValueCreateWithHalf(*(float *)(v11 + 4 * *v9));
      CFArrayAppendValue(Mutable, v12);
      CFRelease(v12);
      ++v9;
    }
    while (v9 != v10);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_23F5A2980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 58) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyFloatArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(float **)(v4 + 32);
  long long v15 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 4);
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithFloat(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A2AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 57) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyDoubleArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(double **)(v4 + 32);
  long long v15 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 2);
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithDouble(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A2C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 56) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyInt2Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  CFStringRef v6 = *(double **)(v4 + 32);
  long long v15 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 2);
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  long long v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  std::string::size_type v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithInt2(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A2DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 16) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyInt3Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 12 * (void)v11) {
    RIOPxrVtValueCreateWithInt3();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A2F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 15) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyInt4Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 16 * (void)v11) {
    RIOPxrVtValueCreateWithInt4();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A30D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 14) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyHalf2Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v15 = *(_OWORD *)v4;
  long long v16 = v5;
  uint64_t v6 = *(unsigned __int16 **)(v4 + 32);
  uint64_t v17 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 8);
    if (*((void *)&v16 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  uint64_t v9 = v17;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  std::string::size_type v10 = &v17[2 * v15];
  if (v9 != v10)
  {
    uint64_t v11 = MEMORY[0x263F90640];
    do
    {
      LODWORD(v12) = *(_DWORD *)(v11 + 4 * *v9);
      HIDWORD(v12) = *(_DWORD *)(v11 + 4 * v9[1]);
      uint64_t v13 = (const void *)RIOPxrVtValueCreateWithHalf2(v12);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      v9 += 2;
    }
    while (v9 != v10);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v15);
  return Mutable;
}

void sub_23F5A3268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 19) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyHalf3Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v15 = *(_OWORD *)v4;
  long long v16 = v5;
  uint64_t v6 = *(unsigned __int16 **)(v4 + 32);
  uint64_t v17 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 8);
    if (*((void *)&v16 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  uint64_t v9 = v17;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  uint64_t v11 = &v17[3 * v15];
  if (v9 != v11)
  {
    uint64_t v12 = MEMORY[0x263F90640];
    do
    {
      v10.n128_u32[0] = *(_DWORD *)(v12 + 4 * *v9);
      v10.n128_u32[1] = *(_DWORD *)(v12 + 4 * v9[1]);
      v10.n128_u32[2] = *(_DWORD *)(v12 + 4 * v9[2]);
      uint64_t v13 = (const void *)RIOPxrVtValueCreateWithHalf3(v10);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      v9 += 3;
    }
    while (v9 != v11);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v15);
  return Mutable;
}

void sub_23F5A3410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__CFArray *RIOPxrVtValueCopyHalf4Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v15 = *(_OWORD *)v4;
  long long v16 = v5;
  uint64_t v6 = *(unsigned __int16 **)(v4 + 32);
  uint64_t v17 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 8);
    if (*((void *)&v16 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  uint64_t v9 = v17;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  __n128 v10 = &v17[4 * v15];
  if (v9 != v10)
  {
    uint64_t v11 = MEMORY[0x263F90640];
    do
    {
      v12.n128_u32[0] = *(_DWORD *)(v11 + 4 * *v9);
      v12.n128_u32[1] = *(_DWORD *)(v11 + 4 * v9[1]);
      v12.n128_u32[2] = *(_DWORD *)(v11 + 4 * v9[2]);
      v12.n128_u32[3] = *(_DWORD *)(v11 + 4 * v9[3]);
      uint64_t v13 = (const void *)RIOPxrVtValueCreateWithHalf4(v12);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      v9 += 4;
    }
    while (v9 != v10);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v15);
  return Mutable;
}

void sub_23F5A3588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 17) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyFloat2Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)v4;
  long long v14 = v5;
  uint64_t v6 = *(double **)(v4 + 32);
  long long v15 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 2);
    if (*((void *)&v14 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  uint64_t v9 = v15;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13);
  __n128 v10 = &v15[v13];
  while (v9 != v10)
  {
    uint64_t v11 = (const void *)RIOPxrVtValueCreateWithFloat2(*v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v13);
  return Mutable;
}

void sub_23F5A36FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 22) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyFloat3Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 12 * (void)v11) {
    RIOPxrVtValueCreateWithFloat3();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A387C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFMutableArrayRef RIOPxrVtValueCopyFloat4Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 16 * (void)v11) {
    RIOPxrVtValueCreateWithFloat4();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A39B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 20) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyDouble2Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 16 * (void)v11) {
    RIOPxrVtValueCreateWithDouble2();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A3B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 25) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyDouble3Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 24 * (void)v11) {
    RIOPxrVtValueCreateWithDouble3();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A3CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 24) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyDouble4Array(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 32 * (void)v11) {
    RIOPxrVtValueCreateWithDouble4();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A3E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 23) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyQuathArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v15 = *(_OWORD *)v4;
  long long v16 = v5;
  uint64_t v6 = *(unsigned __int16 **)(v4 + 32);
  uint64_t v17 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 8);
    if (*((void *)&v16 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  uint64_t v9 = v17;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  __n128 v10 = &v17[4 * v15];
  if (v9 != v10)
  {
    uint64_t v11 = MEMORY[0x263F90640];
    do
    {
      v12.n128_u32[0] = *(_DWORD *)(v11 + 4 * *v9);
      v12.n128_u32[1] = *(_DWORD *)(v11 + 4 * v9[1]);
      v12.n128_u32[2] = *(_DWORD *)(v11 + 4 * v9[2]);
      v12.n128_u32[3] = *(_DWORD *)(v11 + 4 * v9[3]);
      uint64_t v13 = (const void *)RIOPxrVtValueCreateWithQuath(v12);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      v9 += 4;
    }
    while (v9 != v10);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v15);
  return Mutable;
}

void sub_23F5A3FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 40) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyQuatfArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 16 * (void)v11) {
    RIOPxrVtValueCreateWithQuatf();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A4164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFMutableArrayRef RIOPxrVtValueCopyQuatdArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 32 * (void)v11) {
    RIOPxrVtValueCreateWithQuatd();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A42B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 42) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyMatrix2dArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 32 * (void)v11) {
    RIOPxrVtValueCreateWithMatrix2d();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A4428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 31) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyMatrix3dArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + 72 * (void)v11) {
    RIOPxrVtValueCreateWithMatrix3d();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A45D4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 30) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

CFMutableArrayRef RIOPxrVtValueCopyMatrix4dArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v11 = *(_OWORD *)v4;
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v13 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  uint64_t v9 = v13;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v11);
  if (v9 != v13 + ((void)v11 << 7)) {
    RIOPxrVtValueCreateWithMatrix4d();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v11);
  return Mutable;
}

void sub_23F5A4798(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1 - 80);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrVtValueCopyTokenArray(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      if ((v12 & 4) != 0) {
        uint64_t v13 = (*(uint64_t (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
      }
      else {
        uint64_t v13 = *v2;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v18, v13);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      long long v14 = (uint64_t *)*((void *)&v18 + 1);
      long long v15 = (uint64_t *)v19;
      while (v14 != v15)
      {
        long long v16 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v14);
        CFArrayAppendValue(Mutable, v16);
        CFRelease(v16);
        ++v14;
      }
      uint64_t v25 = (void **)&v24;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v25);
      uint64_t v25 = (void **)&v23;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v25);
      uint64_t v25 = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v25);
      uint64_t v25 = (void **)&v21;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v25);
      uint64_t v25 = (void **)&v20;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v25);
      uint64_t v25 = (void **)&v18 + 1;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v25);
      return Mutable;
    }
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v18 = *(_OWORD *)v4;
  long long v19 = v5;
  uint64_t v6 = *(uint64_t **)(v4 + 32);
  unint64_t v20 = v6;
  if (v6)
  {
    int v7 = v6 - 2;
    if (*((void *)&v19 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v19 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18);
  uint64_t v9 = v20;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18);
  __n128 v10 = &v20[v18];
  while (v9 != v10)
  {
    long long v11 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v9);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    ++v9;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v18);
  return Mutable;
}

void sub_23F5A49C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::~SdfListOp(void **a1)
{
  uint64_t v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

__CFArray *RIOPxrVtValueCopyStringArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v14 = *(_OWORD *)v4;
  long long v15 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v16 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v15 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  uint64_t v9 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  uint64_t v10 = v16 + 24 * v14;
  while (v9 != v10)
  {
    long long v11 = (const char *)v9;
    if (*(char *)(v9 + 23) < 0) {
      long long v11 = *(const char **)v9;
    }
    CFStringRef v12 = CFStringCreateWithCString(0, v11, 0x8000100u);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    v9 += 24;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v14);
  return Mutable;
}

void sub_23F5A4C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 59) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyPathListOp(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v10, v4);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v6 = (_DWORD *)v11[0];
  int v7 = (_DWORD *)v11[1];
  while (v6 != v7)
  {
    std::string::size_type v8 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
    v6 += 2;
  }
  uint64_t v17 = (void **)&v16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v17 = (void **)&v15;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v17 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v17 = (void **)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v17 = (void **)&v12;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v17 = (void **)v11;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  return Mutable;
}

void sub_23F5A4DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

__CFArray *RIOPxrVtValueCopyAssetPathArray(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  }
  else {
    uint64_t v4 = *v2;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v17 = *(_OWORD *)v4;
  long long v18 = v5;
  uint64_t v6 = *(long long **)(v4 + 32);
  long long v19 = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 1);
    if (*((void *)&v18 + 1)) {
      int v7 = (atomic_ullong *)*((void *)&v18 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
  uint64_t v9 = v19;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
  for (CFIndex i = &v19[3 * v17]; v9 != i; v9 += 3)
  {
    if (RIOPxrSdfAssetPathGetTypeID::onceToken != -1) {
      dispatch_once(&RIOPxrSdfAssetPathGetTypeID::onceToken, &__block_literal_global_32);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v12 = (void *)Instance;
    if (Instance)
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(Instance + 16), *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v13 = *v9;
        *(void *)(Instance + 32) = *((void *)v9 + 2);
        *(_OWORD *)(Instance + 16) = v13;
      }
      uint64_t v14 = (std::string *)(v12 + 5);
      if (*((char *)v9 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)v9 + 3), *((void *)v9 + 4));
      }
      else
      {
        long long v15 = *(long long *)((char *)v9 + 24);
        v12[7] = *((void *)v9 + 5);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
    }
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v17);
  return Mutable;
}

void sub_23F5A5064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_12SdfAssetPathEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t RIOPxrVtValueCreateEmptyValue()
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[1] = 0;
  uint64_t v0 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v2);
  return v0;
}

void sub_23F5A5190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

BOOL RIOPxrVtValueIsEmpty(uint64_t a1)
{
  return !a1 || *(void *)(a1 + 24) == 0;
}

void RIOPxrVtValueCreateWithDictionary(const __CFDictionary *a1)
{
  v1[3] = *MEMORY[0x263EF8340];
  v1[0] = 0;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)RIOPxrVtValueCreateWithDictionary::$_0::__invoke, v1);
  v1[2] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy();
}

void sub_23F5A5268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>(const pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (RIOPxrVtValueGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrVtValueGetTypeID::onceToken, &__block_literal_global_7);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance) {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(Instance + 16), a1);
  }
  return v3;
}

void _RIOPxrVtValueCFFinalize(char *a1)
{
}

uint64_t _RIOPxrVtValueCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::operator==((uint64_t)a1 + 16, (uint64_t)a2 + 16);
}

uint64_t _RIOPxrVtValueCFHash(char *a1)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::GetHash((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
}

CFStringRef _RIOPxrVtValueCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrVtValue %p>", a1);
}

CFStringRef _RIOPxrVtValueCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrVtValue %p>", a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)(a1 + 8), *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)(a1 + 32), *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)(a1 + 56), *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)(a1 + 104), *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)(a1 + 128), *(uint64_t **)(a2 + 128), *(uint64_t **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  return a1;
}

void sub_23F5A54C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)(a1 + 32), *(_DWORD **)(a2 + 32), *(_DWORD **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)(a1 + 56), *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)(a1 + 80), *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)(a1 + 104), *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)(a1 + 128), *(_DWORD **)(a2 + 128), *(_DWORD **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  return a1;
}

void sub_23F5A5638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *RIOPxrVtValueCreateWithDictionary::$_0::__invoke(RIOPxrVtValueCreateWithDictionary::$_0 *this, void *a2, const void *a3, void *a4)
{
  if ((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  long long v5 = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();

  return pxrInternal__aapl__pxrReserved__::VtValue::operator=(v5, a2 + 2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_Hash(const char **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t)(*a1 + 24);
  uint64_t v4 = 0;
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1, v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_Equal(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_EqualPtr(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3EE0](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x2455D2BD0](v2, 0x1012C402F9EB439);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, const char *a2, uint64_t a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2);
  if (*(char *)(a3 + 23) >= 0) {
    char v5 = (const char *)a3;
  }
  else {
    char v5 = *(const char **)a3;
  }

  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    std::string::size_type v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v6[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  long long v13 = (const void **)(a1 + 24);
  uint64_t v16 = (unsigned __int8 *)*((void *)v6 + 3);
  long long v15 = v6 + 24;
  uint64_t v14 = v16;
  if (v12 >= 0) {
    long long v17 = v15;
  }
  else {
    long long v17 = v14;
  }
  if ((v9 & 0x80) != 0) {
    return memcmp(*v13, v17, *((void *)a1 + 4)) == 0;
  }
  if (!a1[47]) {
    return 1;
  }
  uint64_t v18 = v9 - 1;
  do
  {
    int v20 = *(unsigned __int8 *)v13;
    long long v13 = (const void **)((char *)v13 + 1);
    int v19 = v20;
    int v22 = *v17++;
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    uint64_t result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 48));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F5A5B10(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C402F9EB439);
  _Unwind_Resume(a1);
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_Counted(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  int v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  atomic_store(0, (unsigned int *)&this[2]);
  return this;
}

void sub_23F5A5BB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy()
{
}

void sub_23F5A5C34(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C402F9EB439);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_Hash(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = 0;
  char v5 = 0;
  if (*(char *)(v1 + 23) >= 0) {
    uint64_t v2 = (const char *)v1;
  }
  else {
    uint64_t v2 = *(const char **)v1;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_Equal(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return std::operator==[abi:ne180100]<std::allocator<char>>(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_EqualPtr(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return std::operator==[abi:ne180100]<std::allocator<char>>(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetPyObj()
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_StreamOut(uint64_t **a1, void *a2)
{
  int v3 = *((char *)*a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (uint64_t)*a1;
  }
  else {
    uint64_t v4 = **a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v5 = (*a1)[1];
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v4, v5);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000023F7BE52BLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x2455D2BD0](v2, 0x1012C405C87E9CELL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 24));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F5A5F14(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy()
{
}

void sub_23F5A5FBC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_Hash(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_StreamOut()
{
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetTypeid()
{
  return MEMORY[0x263F8C258];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C258];
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26F33764B;
  *(_DWORD *)a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_Hash(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_Equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_EqualPtr(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270F987D8](a2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetTypeid()
{
  return MEMORY[0x263F8C290];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C290] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C290], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C290];
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_26F337703;
  return result;
}

unsigned char *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_CopyInit(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_Move(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_Hash(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_Equal(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_EqualPtr(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_StreamOut()
{
  return MEMORY[0x270FA31F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetTypeid()
{
  return MEMORY[0x263F8C250];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C250] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C250], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C250];
}

unsigned char *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetProxiedAsVtValue@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26F3377BB;
  *(unsigned char *)a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_StreamOut()
{
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetTypeid()
{
  return MEMORY[0x263F8C260];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C260] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C260];
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26F337873;
  *(_DWORD *)a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_Hash(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_Equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_EqualPtr(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270F987E0](a2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetTypeid()
{
  return MEMORY[0x263F8C298];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C298] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C298], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C298];
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_26F33792B;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_Hash(int8x8_t *a1)
{
  int8x8_t v1 = vbic_s8(*a1, (int8x8_t)vceqz_f32((float32x2_t)*a1));
  v2.i64[0] = v1.u32[0];
  v2.i64[1] = v1.u32[1];
  uint64_t v3 = vaddvq_s64(v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.u32[1]
                                                                      + ((unint64_t)(v3 + v3 * v3) >> 1))));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_Equal(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_EqualPtr(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F28](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetProxiedTypeid()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
        + 3;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Hash(float **a1)
{
  int8x8_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v5 = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&>((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Equal(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_EqualPtr(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F48](a2);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                      + 2;
  operator new();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 12));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_Hash(float **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_Equal(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_EqualPtr(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3F68](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
                      + 2;
  operator new();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_Hash(int8x16_t **a1)
{
  int64x2_t v1 = (int64x2_t)vbicq_s8(**a1, (int8x16_t)vceqzq_f64(*(float64x2_t *)*a1));
  uint64_t v2 = vaddvq_s64(v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.i64[1]
                                                                      + ((unint64_t)(v2 + v2 * v2) >> 1))));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_Equal(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(void *)a1 + 8) == *(double *)(*(void *)a2 + 8) && **(double **)a1 == **(double **)a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_EqualPtr(uint64_t a1, double *a2)
{
  return *(double *)(*(void *)a1 + 8) == a2[1] && **(double **)a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3F20](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(void)::ti
                      + 2;
  operator new();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 16));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_Hash(double **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v5 = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&>((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_Equal(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_EqualPtr(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F40](a2);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(void)::ti
                      + 2;
  operator new();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 24));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 32), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_Hash(double **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_Equal(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_EqualPtr(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3F60](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(void)::ti
                      + 2;
  operator new();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 32));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_Hash(unsigned __int16 *a1)
{
  unsigned __int16 v2 = a1[3];
  uint64_t v3 = 0;
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::GfVec3h const&>((uint64_t)&v3, &v2, a1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_Equal(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * a1[3]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[3])
      && pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_EqualPtr(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * a1[3]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[3])
      && pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F18](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetProxiedTypeid()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(void)::ti
        + 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::GfVec3h const&>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3h const&>(a1, a3);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Hash(float **a1)
{
  unsigned int v1 = *a1;
  int v3 = *((_DWORD *)*a1 + 3);
  uint64_t v4 = 0;
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float,pxrInternal__aapl__pxrReserved__::GfVec3f const&>((uint64_t)&v4, (float *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Equal(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  int v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_EqualPtr(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F10](a2);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(void)::ti;
  operator new();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 32), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_Hash(double **a1)
{
  unsigned int v1 = *a1;
  uint64_t v3 = *((void *)*a1 + 3);
  uint64_t v4 = 0;
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double,pxrInternal__aapl__pxrReserved__::GfVec3d const&>((uint64_t)&v4, (double *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_Equal(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_EqualPtr(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3F08](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatdE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(void)::ti;
  operator new();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double,pxrInternal__aapl__pxrReserved__::GfVec3d const&>(uint64_t a1, double *a2, double *a3)
{
  double v3 = *a2;
  if (*a2 == 0.0) {
    double v3 = 0.0;
  }
  double v4 = v3;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v4 = *(void *)&v3
  }
                   + ((*(void *)a1
                     + *(void *)&v3
                     + (*(void *)a1 + *(void *)&v3) * (*(void *)a1 + *(void *)&v3)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v4;
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3d const&>(a1, a3);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_Hash(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1] + ((unint64_t)(a1[1] + (uint64_t)*a1 + (a1[1] + (uint64_t)*a1) * (a1[1] + (uint64_t)*a1)) >> 1))));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F38](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2iE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetProxiedTypeid()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(void)::ti
        + 3;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&>(uint64_t result, int *a2, int *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  *(void *)uint64_t result = *a3 + ((unint64_t)(v3 + *a3 + (v3 + *a3) * (v3 + *a3)) >> 1);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_Hash(int **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v5 = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&>((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_Equal(void *a1, void *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  uint64_t v3 = (_DWORD *)*a2;
  return *(_DWORD *)*a1 == *(_DWORD *)*a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_EqualPtr(void *a1, _DWORD *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3F58](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3iE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(void)::ti
                      + 2;
  operator new();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&>(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&>(a1, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_Hash(int **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&,int const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_Equal(void *a1, void *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  uint64_t v3 = (_DWORD *)*a2;
  return *(_DWORD *)*a1 == *(_DWORD *)*a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_EqualPtr(void *a1, _DWORD *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3F78](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4iE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(void)::ti
                      + 2;
  operator new();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&,int const&>(uint64_t a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&>(a1, a3, a4, a5);
}

_WORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_CopyInit(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_Move(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_Hash(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_Equal(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_EqualPtr(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_StreamOut(unsigned __int16 *a1, uint64_t a2)
{
  return MEMORY[0x270FA3E88](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__8pxr_half4halfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetProxiedTypeid()
{
}

_WORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetProxiedAsVtValue@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(void)::ti
                      + 3;
  *(_WORD *)a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_Hash(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1]+ (unint64_t)*a1+ (a1[1] + *a1) * (unint64_t)(a1[1] + *a1)) >> 1))));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_Equal(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2)
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[1]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[1]);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_EqualPtr(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2)
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[1]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[1]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F30](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_CopyInit(int *result, uint64_t a2)
{
  int v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_Move(int *result, uint64_t a2)
{
  int v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_Hash(unsigned __int16 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>((uint64_t)&v2, a1, a1 + 1, a1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F50](a2);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetProxiedAsVtValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(_WORD *)(a2 + 4) = *(_WORD *)(result + 4);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_Hash(unsigned __int16 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>((uint64_t)&v2, a1, a1 + 1, a1 + 2, a1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F70](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetProxiedTypeid()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(void)::ti
        + 3;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(a1, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2)
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[1]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[1])
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[2]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[2])
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[3]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[3]);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 32), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_Hash(double **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  char v3 = *a1 + 2;
  uint64_t v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3EA0](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix2dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(void)::ti
                      + 2;
  operator new();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 72), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 72), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_Hash(double **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix3d const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3EB0](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix3dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
                      + 2;
  operator new();
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix3d const&>(uint64_t a1, double *a2)
{
  char v4 = 0;
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 72));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 128), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 128), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_Hash(double **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix4d const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3EC0](a2);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
                      + 2;
  operator new();
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix4d const&>(uint64_t a1, double *a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 128));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void *pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >= 0xFFFFFFFFFFFFFFF0) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = a2 + 16;
  }
  char v4 = operator new(v3);
  *char v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5A9418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique() [T = BOOL]");
      char v4 = (char *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        int v8 = New;
        do
        {
          char v9 = *v4++;
          *v8++ = v9;
          --v5;
        }
        while (v5);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_Hash(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C230];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIbEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), *(void *)a1) == 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_Streamer>(void *a1)
{
  uint64_t v1 = (*a1)++;
  return MEMORY[0x270FA31E0](v1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<int>::resize<pxrInternal__aapl__pxrReserved__::VtArray<int>::assign(unsigned long,int const&)::_Filler>(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
              uint64_t v7 = New;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)New + vstd::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((void *)this + 11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            int v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      int v20 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        int v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)int v22 = v23;
          int v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        BOOL v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v14 = v16;
      uint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        unint64_t v9 = New;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5A9B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique() [T = long long]");
      uint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        unint64_t v9 = New;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_Hash(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C290];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIxEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 8 * *(void *)a1) == 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<long long>::_Streamer>(void **a1, uint64_t a2)
{
  uint64_t v3 = *(*a1)++;
  return MEMORY[0x270F987D8](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5A9FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique() [T = unsigned int]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        unint64_t v9 = New;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_Hash(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C260];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIjEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_Streamer>(void *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >= 0xFFFFFFFFFFFFFFF0) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AA3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique() [T = unsigned char]");
      uint64_t v4 = (char *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        int v8 = New;
        do
        {
          char v9 = *v4++;
          *v8++ = v9;
          --v5;
        }
        while (v5);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_Hash(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C250];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIhEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_Streamer>(void *a1)
{
  uint64_t v1 = (*a1)++;
  return MEMORY[0x270FA31F8](v1);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AA7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique() [T = unsigned long long]");
      uint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        char v9 = New;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_Hash(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C298];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIyEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_Streamer>(void **a1, uint64_t a2)
{
  uint64_t v3 = *(*a1)++;
  return MEMORY[0x270F987E0](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 2 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AAC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]");
      uint64_t v4 = (__int16 *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 2 * v5;
        char v9 = New;
        do
        {
          __int16 v10 = *v4++;
          *v9++ = v10;
          v8 -= 2;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_Hash(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    uint64_t v2 = (unsigned __int16 *)(*a1)[4];
    unint64_t v3 = **a1;
    do
    {
      unsigned int v4 = *v2++;
      unint64_t v1 = v4 + ((v1 + v4 + (v1 + v4) * (v1 + v4)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_8pxr_half4halfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (unsigned __int16 *)a1[4];
  uint64_t v6 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v7 = 2 * *a1 - 2;
  do
  {
    unsigned int v8 = *v5++;
    float v9 = *(float *)(MEMORY[0x263F90640] + 4 * v8);
    unsigned int v10 = *v6++;
    float v11 = *(float *)(MEMORY[0x263F90640] + 4 * v10);
    BOOL result = v9 == v11;
    BOOL v12 = v9 != v11 || v7 == 0;
    v7 -= 2;
  }
  while (!v12);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_Streamer>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int16 *)*a1;
  *a1 += 2;
  return MEMORY[0x270FA3E88](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unsigned int v4 = operator new(v3);
  *unsigned int v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AB0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2i]");
      unsigned int v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        float v9 = New;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_Hash(unint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2iEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i> const&>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    unint64_t v3 = (int *)a2[4];
    unint64_t v4 = *a2;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      v3 += 2;
      unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (v6 + ((unint64_t)(v6 + v5 + (v6 + v5) * (v6 + v5)) >> 1)));
      unint64_t v2 = v7 + ((v7 + v2 + (v7 + v2) * (v7 + v2)) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (int *)a1[4];
  uint64_t v6 = &v5[2 * *a1];
  unint64_t v7 = *(int **)(a2 + 32);
  do
  {
    int v8 = *v5;
    int v9 = v5[1];
    v5 += 2;
    int v10 = *v7;
    int v11 = v7[1];
    v7 += 2;
    BOOL result = v8 == v10 && v9 == v11;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F38](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1555555555555553) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 12 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AB5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3i]");
      unint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 12 * v5;
        int v9 = New;
        do
        {
          uint64_t v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *int v9 = v10;
          int v9 = (void *)((char *)v9 + 12);
          unint64_t v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3iEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (int *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 3;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3i const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3i const&>(uint64_t a1, int *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (_DWORD *)a1[4];
  char v6 = &v5[3 * *a1];
  for (CFIndex i = *(_DWORD **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 12;
  return MEMORY[0x270FA3F58](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5ABBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4i]");
      unint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        int v9 = New;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4iEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (int *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4i const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4i const&>(uint64_t a1, int *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&,int const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (_DWORD *)a1[4];
  char v6 = &v5[4 * *a1];
  for (CFIndex i = *(_DWORD **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 16;
  return MEMORY[0x270FA3F78](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AC168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2h]");
      unint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        int v9 = New;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_Hash(unint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2hEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h> const&>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    unint64_t v3 = (unsigned __int16 *)a2[4];
    unint64_t v4 = *a2;
    do
    {
      unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (v3[1]+ ((v3[1]+ (unint64_t)*v3+ (v3[1] + *v3) * (unint64_t)(v3[1] + *v3)) >> 1)));
      unint64_t v2 = v5 + ((v5 + v2 + (v5 + v2) * (v5 + v2)) >> 1);
      v3 += 2;
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (unsigned __int16 *)a1[4];
  char v6 = &v5[2 * *a1];
  for (CFIndex i = *(unsigned __int16 **)(a2 + 32);
        *(float *)(MEMORY[0x263F90640] + 4 * *v5) == *(float *)(MEMORY[0x263F90640] + 4 * *i)
     && *(float *)(MEMORY[0x263F90640] + 4 * v5[1]) == *(float *)(MEMORY[0x263F90640] + 4 * i[1]);
        i += 2)
  {
    v5 += 2;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 4;
  return MEMORY[0x270FA3F30](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AC688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4h]");
      unint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        int v9 = New;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4hEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4h const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4h const&>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (unsigned __int16 *)a1[4];
  uint64_t v7 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v8 = 8 * v5 - 8;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 4;
    v7 += 4;
    uint64_t v9 = v8;
    v8 -= 8;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F70](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5ACC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
      unint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        uint64_t v9 = New;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 2;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec2f const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec2f const&>(uint64_t result, float *a2)
{
  float v2 = *a2;
  if (*a2 == 0.0) {
    float v2 = 0.0;
  }
  uint64_t v3 = LODWORD(v2);
  if (a2[1] == 0.0) {
    float v4 = 0.0;
  }
  else {
    float v4 = a2[1];
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (LODWORD(v4) + ((LODWORD(v4) + v3 + (LODWORD(v4) + v3) * ((unint64_t)LODWORD(v4) + v3)) >> 1)));
  if (*(unsigned char *)(result + 8)) {
    v5 += (*(void *)result + v5 + (*(void *)result + v5) * (*(void *)result + v5)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)BOOL result = v5;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (float *)a1[4];
  char v6 = &v5[2 * *a1];
  uint64_t v7 = *(float **)(a2 + 32);
  do
  {
    float v8 = *v5;
    float v9 = v5[1];
    v5 += 2;
    float v10 = *v7;
    float v11 = v7[1];
    v7 += 2;
    BOOL result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F28](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  float v4 = operator new(v3);
  *float v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AD1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4f]");
      float v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        float v9 = New;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      float v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4f const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4f const&>(uint64_t a1, float *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (float *)a1[4];
  char v6 = &v5[4 * *a1];
  for (CFIndex i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 16;
  return MEMORY[0x270FA3F68](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AD76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2d]");
      unint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        float v9 = New;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 2;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec2d const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec2d const&>(uint64_t result, double *a2)
{
  double v2 = *a2;
  if (*a2 == 0.0) {
    double v2 = 0.0;
  }
  double v3 = v2;
  if (a2[1] == 0.0) {
    double v4 = 0.0;
  }
  else {
    double v4 = a2[1];
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (*(void *)&v4+ ((*(void *)&v4 + *(void *)&v3 + (*(void *)&v4 + *(void *)&v3) * (*(void *)&v4 + *(void *)&v3)) >> 1)));
  if (*(unsigned char *)(result + 8)) {
    v5 += (*(void *)result + v5 + (*(void *)result + v5) * (*(void *)result + v5)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)BOOL result = v5;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (double *)a1[4];
  char v6 = &v5[2 * *a1];
  uint64_t v7 = *(double **)(a2 + 32);
  do
  {
    double v8 = *v5;
    double v9 = v5[1];
    v5 += 2;
    double v10 = *v7;
    double v11 = v7[1];
    v7 += 2;
    BOOL result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 16;
  return MEMORY[0x270FA3F20](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  double v4 = operator new(v3);
  *double v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5ADCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4d]");
      double v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 32 * v5;
        double v9 = New;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          v4 += 2;
          *double v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      double v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4d const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4d const&>(uint64_t a1, double *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (double *)a1[4];
  char v6 = &v5[4 * *a1];
  for (CFIndex i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 32;
  return MEMORY[0x270FA3F60](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AE2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuath]");
      unint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        double v9 = New;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuath const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuath const&>(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 v5 = a2[3];
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::GfVec3h const&>((uint64_t)&v6, &v5, a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (unsigned __int16 *)a1[4];
  char v7 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v8 = 8 * v5;
  uint64_t v9 = MEMORY[0x263F90640];
  while (*(float *)(v9 + 4 * v6[3]) == *(float *)(v9 + 4 * v7[3]))
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(v6, v7);
    if (!result) {
      return result;
    }
    v6 += 4;
    v7 += 4;
    v8 -= 8;
    if (!v8) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F18](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AE870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatd]");
      unint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 32 * v5;
        uint64_t v9 = New;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          v4 += 2;
          *uint64_t v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatdEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 32;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatd const&>((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatd const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double,pxrInternal__aapl__pxrReserved__::GfVec3d const&>((uint64_t)&v6, (double *)&v5, (double *)a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (double *)(a1[4] + 16);
  uint64_t v6 = 32 * *a1;
  for (CFIndex i = (double *)(*(void *)(a2 + 32) + 16);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 32;
    if (!v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 32;
  return MEMORY[0x270FA3F08](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AEE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]");
      unint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 32 * v5;
        uint64_t v9 = New;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          v4 += 2;
          *uint64_t v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d> const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix2dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = 32 * v5 - 32;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==();
    if (!result) {
      break;
    }
    v6 += 32;
    v7 += 32;
    uint64_t v9 = v8;
    v8 -= 32;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 32;
  return MEMORY[0x270FA3EA0](a2, v3);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x38E38E38E38E38DLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 72 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5AF2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]");
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 72 * v5;
        uint64_t v9 = New;
        do
        {
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v4;
          long long v10 = *(_OWORD *)(v4 + 16);
          long long v11 = *(_OWORD *)(v4 + 32);
          long long v12 = *(_OWORD *)(v4 + 48);
          v9[8] = *(void *)(v4 + 64);
          *((_OWORD *)v9 + 2) = v11;
          *((_OWORD *)v9 + 3) = v12;
          *((_OWORD *)v9 + 1) = v10;
          v4 += 72;
          v9 += 9;
          v8 -= 72;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d> const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix3dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 9;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfMatrix3d const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfMatrix3d const&>(uint64_t a1, double *a2)
{
  char v6 = 0;
  uint64_t v5 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = 72 * v5 - 72;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==();
    if (!result) {
      break;
    }
    v6 += 72;
    v7 += 72;
    uint64_t v9 = v8;
    v8 -= 72;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 72;
  return MEMORY[0x270FA3EB0](a2, v3);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::TfToken const&)::_Filler>(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    Copy = (uint64_t *)a1[4];
    if (Copy)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)Copy - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v23 = a2;
            do
            {
              uint64_t v24 = Copy[v23];
              if ((v24 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              ++v23;
            }
            while (v3 != v23);
          }
          else
          {
            uint64_t v9 = (uint64_t *)a1[4];
            if (*(v9 - 1) < a2) {
              Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)a1, v9, a2, *a1);
            }
            long long v10 = *a3;
            uint64_t v11 = v3;
            do
            {
              uint64_t v12 = *v10;
              Copy[v11] = *v10;
              if ((v12 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                Copy[v11] &= 0xFFFFFFFFFFFFFFF8;
              }
              ++v11;
            }
            while (a2 != v11);
          }
LABEL_40:
          if (Copy != (uint64_t *)a1[4])
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1);
            a1[4] = (uint64_t)Copy;
          }
          *a1 = a2;
          return;
        }
        Copy = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = *a1;
      }
      unint64_t v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)a1, Copy, a2, v18);
      Copy = v19;
      if (v3 < a2)
      {
        int v20 = *a3;
        uint64_t v21 = v3;
        do
        {
          uint64_t v22 = *v20;
          v19[v21] = *v20;
          if ((v22 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v19[v21] &= 0xFFFFFFFFFFFFFFF8;
          }
          ++v21;
        }
        while (a2 != v21);
      }
      goto LABEL_40;
    }
    uint64_t v13 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew((uint64_t)a1, a2);
      Copy = New;
      unint64_t v15 = 0;
      uint64_t v16 = *a3;
      do
      {
        uint64_t v17 = *v16;
        New[v15 / 8] = *v16;
        if ((v17 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          New[v15 / 8] &= 0xFFFFFFFFFFFFFFF8;
        }
        v15 += 8;
      }
      while (v13 != v15);
      goto LABEL_40;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_Hash(uint64_t **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (uint64_t *)v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<std::string>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<std::string>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef((void *)v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_HashState *pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = this;
    do
    {
      --v3;
      char v5 = a2 + 3;
      if (*((char *)a2 + 23) < 0) {
        a2 = (uint64_t *)*a2;
      }
      this = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(v4, (const char *)a2);
      a2 = v5;
    }
    while (v3);
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<std::string>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (unsigned __int8 *)a1[4];
  uint64_t v7 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v8 = 24 * v5 - 24;
  do
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v10, v6, v7);
    if (!result) {
      break;
    }
    v6 += 24;
    v7 += 24;
    uint64_t v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void *pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_Streamer>(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 24;
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v5, v6);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Hash(unsigned __int8 **a1)
{
  return pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(*a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    int v4 = (void **)(v2 + 128);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
    int v4 = (void **)(v2 + 104);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
    int v4 = (void **)(v2 + 80);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
    int v4 = (void **)(v2 + 56);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
    int v4 = (void **)(v2 + 32);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
    int v4 = (void **)(v2 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C40D6643E80);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,BOOL const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>((uint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,BOOL const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(unsigned int **)a2;
  uint64_t v15 = *(void *)(a2 + 8) - (void)v14;
  if (v15)
  {
    uint64_t v16 = v15 >> 3;
    do
    {
      --v16;
      uint64_t v17 = v14 + 2;
      pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(a1, v14);
      uint64_t v14 = v17;
    }
    while (v16);
  }

  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4, a5, a6, a7);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(unsigned int **)a2;
  uint64_t v13 = *(void *)(a2 + 8) - (void)v12;
  if (v13)
  {
    uint64_t v14 = v13 >> 3;
    do
    {
      --v14;
      uint64_t v15 = v12 + 2;
      pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(a1, v12);
      uint64_t v12 = v15;
    }
    while (v14);
  }

  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4, a5, a6);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10 = *(unsigned int **)a2;
  uint64_t v11 = *(void *)(a2 + 8) - (void)v10;
  if (v11)
  {
    uint64_t v12 = v11 >> 3;
    do
    {
      --v12;
      uint64_t v13 = v10 + 2;
      pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(a1, v10);
      char v10 = v13;
    }
    while (v12);
  }

  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int **)a2;
  uint64_t v9 = *(void *)(a2 + 8) - (void)v8;
  if (v9)
  {
    uint64_t v10 = v9 >> 3;
    do
    {
      --v10;
      uint64_t v11 = v8 + 2;
      pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }

  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned int **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - (void)v6;
  if (v7)
  {
    uint64_t v8 = v7 >> 3;
    do
    {
      --v8;
      uint64_t v9 = v6 + 2;
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(v5, v6);
      uint64_t v6 = v9;
    }
    while (v8);
  }
  uint64_t v10 = *(unsigned int **)a3;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    uint64_t v12 = v11 >> 3;
    do
    {
      --v12;
      uint64_t v13 = v10 + 2;
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(v5, v10);
      uint64_t v10 = v13;
    }
    while (v12);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 152));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F5B0490(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy()
{
}

void sub_23F5B0518(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::clear(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = 48 * *a1;
      uint64_t v5 = (char *)(a1[4] + 23);
      do
      {
        if (v5[24] < 0) {
          operator delete(*(void **)(v5 + 1));
        }
        if (*v5 < 0) {
          operator delete(*(void **)(v5 - 23));
        }
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
    }
    *a1 = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    unint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 48 * *a1;
        uint64_t v7 = (char *)(v5 + 23);
        do
        {
          if (v7[24] < 0) {
            operator delete(*(void **)(v7 + 1));
          }
          if (*v7 < 0) {
            operator delete(*(void **)(v7 - 23));
          }
          v7 += 48;
          v6 -= 48;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x555555555555554) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 48 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F5B0734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__uninitialized_fill[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (long long *)((char *)a3 + 24);
    do
    {
      int v8 = (std::string *)(v3 + v6);
      if (*((char *)a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v9 = *a3;
        v8->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v10 = (std::string *)(v3 + v6 + 24);
      if (*((char *)a3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
      }
      else
      {
        long long v11 = *v7;
        *(void *)(v3 + v6 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *((void *)v7 + 2);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      v6 += 48;
    }
    while (v3 + v6 != a2);
    return a2;
  }
  return v3;
}

void sub_23F5B0800(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_23F5B0848(_Unwind_Exception *a1)
{
}

uint64_t std::__uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,std::__always_false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = (std::string *)(a3 + v6);
    int v8 = (long long *)(a1 + v6);
    if (*(char *)(a1 + v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      v7->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
    }
    uint64_t v10 = (std::string *)(a3 + v6 + 24);
    long long v11 = (const std::string::value_type **)(a1 + v6 + 24);
    if (*(char *)(a1 + v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *v11, *(void *)(a1 + v6 + 32));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      *(void *)(a3 + v6 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *(void *)(a1 + v6 + 40);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
    }
    v6 += 48;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_23F5B0920(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_23F5B0968(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath]");
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)this, *(void *)this);
      std::__uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,std::__always_false>(v4, v4 + 48 * v5, (uint64_t)New);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(this);
      *((void *)this + 4) = New;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath> const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_12SdfAssetPathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef((void *)v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    unint64_t v3 = (const char *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfAssetPath const&>((uint64_t)&v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfAssetPath const&>(uint64_t a1, const char *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, a2, (uint64_t)(a2 + 24));
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::operator==(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (unsigned __int8 *)a1[4];
  uint64_t v7 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v8 = 48 * v5 - 48;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 48;
    v7 += 48;
    uint64_t v9 = v8;
    v8 -= 48;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 48;
  return MEMORY[0x270FA3EE0](a2, v3);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_Hash(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  return bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::hash_value(*a1, a2));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_Equal(void *a1, void *a2)
{
  return MEMORY[0x270FA3E98](*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_EqualPtr(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3E98](*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3EE8](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12VtDictionaryE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)v2, 0);
    MEMORY[0x2455D2BD0](v2, 0x1020C403A5D3213);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::hash_value(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  if (pxrInternal__aapl__pxrReserved__::VtDictionary::empty(this)) {
    return 0;
  }
  uint64_t v4 = *(void *)this;
  uint64_t v5 = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendRange<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>((uint64_t)&v5, *(void **)v4, (void *)(v4 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendRange<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    do
    {
      uint64_t v5 = (void *)a2[1];
      char v6 = a2;
      if (v5)
      {
        do
        {
          uint64_t v7 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          char v6 = v7;
        }
        while (!v8);
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(v4, (const char *)a2 + 32);
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, const char *a2)
{
  uint64_t v2 = a2;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2);

  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::VtValue const&>((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 24));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 8));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F5B11FC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy()
{
}

void sub_23F5B1284(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void *RIO_MTLX::SHADER_SEMANTIC(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::SHADER_SEMANTIC(void)::v, "shader");
  }
  return RIO_MTLX::SHADER_SEMANTIC(void)::v;
}

void sub_23F5B1310(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::NodeDef::NODE_ATTRIBUTE(RIO_MTLX::NodeDef *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NodeDef::NODE_ATTRIBUTE(void)::v, "node");
  }
  return RIO_MTLX::NodeDef::NODE_ATTRIBUTE(void)::v;
}

void sub_23F5B1390(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::UnitDef::UNITTYPE_ATTRIBUTE(RIO_MTLX::UnitDef *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_268C40498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_268C40498))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C404D0, "unittype");
    __cxa_guard_release(qword_268C40498);
  }
  return qword_268C404D0;
}

void sub_23F5B1410(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::NodeDef::getType(RIO_MTLX::NodeDef *this)
{
  RIO_MTLX::InterfaceElement::getActiveOutputs(this, &v5);
  if ((unint64_t)(v6 - v5) < 0x11)
  {
    if (v6 - v5 == 16) {
      uint64_t v2 = (void *)(*(uint64_t (**)(void))(**(void **)v5 + 56))();
    }
    else {
      uint64_t v2 = RIO_MTLX::DEFAULT_TYPE_STRING(v1);
    }
  }
  else
  {
    uint64_t v2 = RIO_MTLX::MULTI_OUTPUT_TYPE_STRING(v1);
  }
  uint64_t v3 = v2;
  uint64_t v7 = (void **)&v5;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v7);
  return v3;
}

void sub_23F5B14BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void RIO_MTLX::NodeDef::getImplementation(std::string *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &v77);
  uint64_t v6 = (std::string *)v77;
  RIO_MTLX::Element::getQualifiedName((uint64_t)a1, a1 + 2, &__p);
  RIO_MTLX::Document::getMatchingImplementations((uint64_t)v6, (unsigned __int8 *)&__p, (uint64_t)&v75);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v78) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78);
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &__p);
  RIO_MTLX::Document::getMatchingImplementations((uint64_t)__p.__r_.__value_.__l.__data_, (unsigned __int8 *)&a1[2], (uint64_t)&v73);
  uint64_t v70 = a2;
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  BOOL v8 = v73;
  uint64_t v7 = v74;
  if ((char *)v74 - (char *)v73 >= 1)
  {
    uint64_t v9 = ((char *)v74 - (char *)v73) >> 4;
    long long v10 = v75;
    uint64_t v11 = (uint64_t)(*((void *)&v75 + 1) - v75) >> 4;
    long long v12 = (std::string::size_type *)(v75 + ((*((void *)&v75 + 1) - v75) & 0xFFFFFFFFFFFFFFF0));
    if (v9 > (uint64_t)(v76[0] - *((void *)&v75 + 1)) >> 4)
    {
      unint64_t v13 = v11 + v9;
      if ((unint64_t)(v11 + v9) >> 60) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v76[0] - v75;
      if ((uint64_t)(v76[0] - v75) >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      *((void *)&v83 + 1) = v76;
      if (v15) {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)v76, v15);
      }
      else {
        uint64_t v16 = 0;
      }
      std::string::size_type v24 = (std::string::size_type)&v16[16 * v11];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      __p.__r_.__value_.__l.__size_ = v24;
      *(void *)&long long v83 = &v16[16 * v15];
      uint64_t v25 = (void *)v24;
      do
      {
        *uint64_t v25 = *v8;
        std::string::size_type v26 = v8[1];
        v25[1] = v26;
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        v25 += 2;
        v8 += 2;
      }
      while (v25 != (void *)(v24 + 16 * v9));
      __p.__r_.__value_.__r.__words[2] = v24 + 16 * v9;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>>((uint64_t)v76, (uint64_t)v12, v12, v75, (void *)v75, v24, v24);
      __p.__r_.__value_.__l.__size_ = v27;
      uint64_t v28 = (std::string::size_type *)*((void *)&v75 + 1);
      uint64_t v29 = (_OWORD *)__p.__r_.__value_.__r.__words[2];
      *(void *)&long long v81 = *((void *)&__p.__r_.__value_.__l + 2);
      std::string::size_type v71 = __p.__r_.__value_.__r.__words[2];
      int v77 = (std::__shared_weak_count *)v76;
      long long v78 = (std::string *)&v71;
      uint64_t v79 = (std::string *)&v81;
      if (*((std::string::size_type **)&v75 + 1) != v12)
      {
        do
        {
          *v29++ = *(_OWORD *)v12;
          *long long v12 = 0;
          v12[1] = 0;
          v12 += 2;
        }
        while (v12 != v28);
        *(void *)&long long v81 = v29;
      }
      char v80 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::shared_ptr<RIO_MTLX::InterfaceElement>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v77);
      long long v30 = v75;
      *(void *)&long long v75 = __p.__r_.__value_.__l.__size_;
      *((void *)&v75 + 1) = v29;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v30;
      uint64_t v31 = v76[0];
      v76[0] = v83;
      *(void *)&long long v83 = v31;
      __p.__r_.__value_.__r.__words[0] = v30;
      std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
      goto LABEL_50;
    }
    uint64_t v69 = (uint64_t)(*((void *)&v75 + 1) - v75) >> 4;
    uint64_t v17 = *((void *)&v75 + 1) - (void)v12;
    uint64_t v18 = (uint64_t)(*((void *)&v75 + 1) - (void)v12) >> 4;
    if (v18 >= v9)
    {
      unint64_t v19 = &v73[2 * v9];
      int v20 = (char *)*((void *)&v75 + 1);
LABEL_36:
      uint64_t v32 = (char *)&v12[2 * v9];
      long long v33 = &v20[-16 * v9];
      uint64_t v34 = v20;
      if ((unint64_t)v33 < *((void *)&v10 + 1))
      {
        uint64_t v34 = v20;
        do
        {
          *(_OWORD *)uint64_t v34 = *(_OWORD *)v33;
          v34 += 16;
          *(void *)long long v33 = 0;
          *((void *)v33 + 1) = 0;
          v33 += 16;
        }
        while ((unint64_t)v33 < *((void *)&v10 + 1));
      }
      *((void *)&v75 + 1) = v34;
      if (v20 != v32)
      {
        uint64_t v35 = (v20 - v32) >> 4;
        long long v36 = (std::__shared_weak_count **)(v20 - 8);
        uint64_t v37 = v10 + 16 * v69 - 16;
        uint64_t v38 = 16 * v35;
        do
        {
          long long v39 = (void *)(v37 + v38);
          long long v40 = *(_OWORD *)(v37 + v38);
          *long long v39 = 0;
          v39[1] = 0;
          long long v41 = *v36;
          *(_OWORD *)(v36 - 1) = v40;
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          v36 -= 2;
          v38 -= 16;
        }
        while (v38);
      }
      for (; v8 != v19; v12 += 2)
      {
        std::string::size_type v43 = *v8;
        std::string::size_type v42 = v8[1];
        if (v42) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
        }
        long long v44 = (std::__shared_weak_count *)v12[1];
        *long long v12 = v43;
        v12[1] = v42;
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        v8 += 2;
      }
      goto LABEL_50;
    }
    int v77 = (std::__shared_weak_count *)*((void *)&v75 + 1);
    unint64_t v19 = &v73[2 * v18];
    *(void *)&long long v81 = *((void *)&v75 + 1);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v81;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v77;
    if (v19 == v74)
    {
      int v20 = (char *)*((void *)&v75 + 1);
    }
    else
    {
      int v20 = (char *)*((void *)&v75 + 1);
      uint64_t v21 = (std::string *)*((void *)&v75 + 1);
      uint64_t v22 = &v73[2 * v18];
      do
      {
        v21->__r_.__value_.__r.__words[0] = *v22;
        std::string::size_type v23 = v22[1];
        v21->__r_.__value_.__l.__size_ = v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = (std::string *)((char *)v21 + 16);
        v20 += 16;
        v22 += 2;
      }
      while (v22 != v7);
      int v77 = (std::__shared_weak_count *)v21;
    }
    LOBYTE(v83) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::shared_ptr<RIO_MTLX::InterfaceElement>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__p);
    *((void *)&v75 + 1) = v20;
    if (v17 >= 1) {
      goto LABEL_36;
    }
  }
LABEL_50:
  uint64_t v45 = *(unsigned __int8 *)(v70 + 23);
  if ((v45 & 0x80u) != 0) {
    uint64_t v45 = *(void *)(v70 + 8);
  }
  if (!v45)
  {
    if ((void)v75 == *((void *)&v75 + 1))
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      uint64_t v51 = *(void *)(v75 + 8);
      *a3 = *(void *)v75;
      a3[1] = v51;
      if (v51) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
      }
    }
    goto LABEL_103;
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &__p);
  long long v46 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(__p.__r_.__value_.__r.__words[0] + 96), (unsigned __int8 *)v70);
  long long v47 = v46;
  if (!v46)
  {
    long long v49 = 0;
    goto LABEL_68;
  }
  uint64_t v48 = *((void *)v46 + 5);
  long long v49 = (std::__shared_weak_count *)*((void *)v47 + 6);
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v48)
  {
LABEL_68:
    std::string::size_type v71 = 0;
    long long v72 = 0;
    if (!v49) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::TargetDef>(v48, &v71);
  if (v49) {
LABEL_58:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
LABEL_59:
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  long long v50 = (RIO_MTLX::Element *)v71;
  if (v71)
  {
    if (*(char *)(v71 + 71) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v71 + 48), *(void *)(v71 + 56));
    }
    else {
      std::string __p = *(std::string *)(v71 + 48);
    }
    int v77 = 0;
    long long v78 = 0;
    uint64_t v79 = 0;
    *(void *)&long long v81 = &v77;
    BYTE8(v81) = 0;
    int v77 = (std::__shared_weak_count *)operator new(0x18uLL);
    long long v78 = (std::string *)v77;
    uint64_t v79 = (std::string *)&v77[1];
    long long v78 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v79, (long long *)&__p, &v83, (std::string *)v77);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    Inherituint64_t String = (std::string *)RIO_MTLX::Element::getInheritString(v50);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>((uint64_t)v50, InheritString, &__p);
    for (std::string::size_type i = __p.__r_.__value_.__r.__words[0]; __p.__r_.__value_.__r.__words[0]; std::string::size_type i = __p.__r_.__value_.__r.__words[0])
    {
      while (1)
      {
        uint64_t v54 = (long long *)(i + 48);
        char v55 = (std::__shared_weak_count *)v78;
        if (v78 >= v79)
        {
          uint64_t v57 = (std::__shared_weak_count *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v77, v54);
        }
        else
        {
          if (*(char *)(i + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v78, *(const std::string::value_type **)(i + 48), *(void *)(i + 56));
          }
          else
          {
            long long v56 = *v54;
            v78->__r_.__value_.__r.__words[2] = *(void *)(i + 64);
            v55->std::__shared_count = (std::__shared_count)v56;
          }
          uint64_t v57 = v55 + 1;
        }
        long long v78 = (std::string *)v57;
        uint64_t v58 = __p.__r_.__value_.__r.__words[0];
        int v59 = (std::string *)RIO_MTLX::Element::getInheritString((RIO_MTLX::Element *)__p.__r_.__value_.__l.__data_);
        RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(v58, v59, &v81);
        long long v60 = v81;
        long long v81 = 0uLL;
        std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
        if (size) {
          break;
        }
        std::string::size_type i = v60;
        if (!(void)v60) {
          goto LABEL_87;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
      if (*((void *)&v81 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
      }
    }
LABEL_87:
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    uint64_t v62 = (std::string *)v77;
    long long v63 = (std::__shared_weak_count *)v78;
    if (v77 != (std::__shared_weak_count *)v78)
    {
      do
      {
        uint64_t v65 = *((void *)&v75 + 1);
        for (uint64_t j = v75; j != v65; j += 16)
        {
          uint64_t v66 = *(RIO_MTLX::InterfaceElement **)j;
          long long v67 = *(std::__shared_weak_count **)(j + 8);
          *a3 = *(void *)j;
          a3[1] = v67;
          if (v67) {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Target = RIO_MTLX::InterfaceElement::getTarget(v66);
          if (RIO_MTLX::targetStringsMatch((uint64_t)Target, (uint64_t)v62)) {
            goto LABEL_100;
          }
          if (v67) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v67);
          }
        }
        ++v62;
      }
      while (v62 != (std::string *)v63);
    }
  }
  else
  {
    int v77 = 0;
    long long v78 = 0;
    uint64_t v79 = 0;
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_100:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
LABEL_103:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_23F5B1B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a21 = &a14;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = &a17;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::InterfaceElement::getTarget(RIO_MTLX::InterfaceElement *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE(this);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t RIO_MTLX::NodeDef::validate(RIO_MTLX::TypedElement *a1, std::string *a2)
{
  char v9 = 1;
  uint64_t v4 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(a1);
  char v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, v4) == 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Nodedef should not have a type but an explicit output");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v5, &v9, a2, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v9) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F5B1DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIO_MTLX::NodeDef::isVersionCompatible(RIO_MTLX::InterfaceElement *a1, unsigned __int8 *a2)
{
  Versionuint64_t String = RIO_MTLX::InterfaceElement::getVersionString(a1);
  uint64_t v5 = *((unsigned __int8 *)VersionString + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *((unsigned __int8 *)VersionString + 23);
  }
  else {
    uint64_t v6 = VersionString[1];
  }
  uint64_t v7 = a2[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v6 == v7)
  {
    if (v8 >= 0) {
      char v9 = a2;
    }
    else {
      char v9 = *(unsigned __int8 **)a2;
    }
    if ((v5 & 0x80) != 0)
    {
      Versionuint64_t String = (uint64_t *)memcmp((const void *)*VersionString, v9, VersionString[1]);
      if (!VersionString) {
        return 1;
      }
    }
    else
    {
      if (!*((unsigned char *)VersionString + 23)) {
        return 1;
      }
      while (*(unsigned __int8 *)VersionString == *v9)
      {
        Versionuint64_t String = (uint64_t *)((char *)VersionString + 1);
        ++v9;
        if (!--v5) {
          return 1;
        }
      }
    }
  }
  long long v10 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)VersionString);
  if (!RIO_MTLX::Element::getTypedAttribute<BOOL>((uint64_t)a1, v10)) {
    return 0;
  }
  uint64_t v11 = a2[23];
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)a2 + 1);
  }
  return !v11;
}

uint64_t *RIO_MTLX::InterfaceElement::getVersionString(RIO_MTLX::InterfaceElement *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(this);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::NodeDef::getDeclaration(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v3, (void *)(a1 + 8));
  RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_23F5B1F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(a1 + 240);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  RIO_MTLX::Element::getQualifiedName(a1, a2, &__p);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>(v8, (unsigned __int8 *)&__p, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    char v9 = v12;
    *a3 = v11;
    a3[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>(v8, (unsigned __int8 *)a2, a3);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_23F5B2030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *RIO_MTLX::InterfaceElement::getNodeDefString(RIO_MTLX::InterfaceElement *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(this);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t RIO_MTLX::Implementation::validate(RIO_MTLX::InterfaceElement *a1, std::string *a2)
{
  char v9 = 1;
  uint64_t v4 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(a1);
  char v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, v4) == 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Implementation elements do not support version strings");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v5, &v9, a2, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v9) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F5B216C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double RIO_MTLX::Implementation::getDeclaration@<D0>(RIO_MTLX::InterfaceElement *a1@<X0>, _OWORD *a2@<X8>)
{
  NodeDefuint64_t String = (std::string *)RIO_MTLX::InterfaceElement::getNodeDefString(a1);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>((uint64_t)a1, NodeDefString, &v6);
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void RIO_MTLX::UnitTypeDef::getUnitDefs(RIO_MTLX::UnitTypeDef *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  RIO_MTLX::Element::getDocument(this, &v47);
  uint64_t v3 = v47;
  char v5 = RIO_MTLX::EMPTY_STRING(v4);
  long long v6 = *(uint64_t **)(v3 + 136);
  uint64_t v7 = *(uint64_t **)(v3 + 144);
  long long v49 = 0uLL;
  long long v50 = 0;
  if (v6 != v7)
  {
    char v8 = v5;
    long long v46 = v5;
    do
    {
      uint64_t v10 = *v6;
      char v9 = (std::__shared_weak_count *)v6[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::UnitDef>(v10, &v51);
      uint64_t v11 = v51;
      if (!v51) {
        goto LABEL_42;
      }
      int v12 = *((char *)v8 + 23);
      uint64_t v13 = v8[1];
      if (v12 >= 0) {
        uint64_t v13 = *((unsigned __int8 *)v8 + 23);
      }
      if (!v13) {
        goto LABEL_22;
      }
      uint64_t v14 = *(unsigned __int8 *)(v10 + 47);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *(unsigned __int8 *)(v10 + 47);
      }
      else {
        uint64_t v15 = *(void *)(v10 + 32);
      }
      if (v15 == v13)
      {
        uint64_t v16 = (const void **)(v10 + 24);
        if (v12 >= 0) {
          uint64_t v17 = (unsigned __int8 *)v8;
        }
        else {
          uint64_t v17 = (unsigned __int8 *)*v8;
        }
        if ((v14 & 0x80) == 0)
        {
          if (*(unsigned char *)(v10 + 47))
          {
            while (*(unsigned __int8 *)v16 == *v17)
            {
              uint64_t v16 = (const void **)((char *)v16 + 1);
              ++v17;
              if (!--v14) {
                goto LABEL_22;
              }
            }
            goto LABEL_42;
          }
LABEL_22:
          uint64_t v18 = v52;
          unint64_t v19 = (void *)*((void *)&v49 + 1);
          if (*((void *)&v49 + 1) >= (unint64_t)v50)
          {
            uint64_t v21 = v2;
            uint64_t v22 = v7;
            unint64_t v23 = v49;
            uint64_t v24 = (uint64_t)(*((void *)&v49 + 1) - v49) >> 4;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 60) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = (uint64_t)&v50[-v49];
            if ((uint64_t)&v50[-v49] >> 3 > v25) {
              unint64_t v25 = v26 >> 3;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            long long v56 = &v50;
            if (v27 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v28 = (char *)operator new(16 * v27);
            uint64_t v29 = &v28[16 * v24];
            *(void *)uint64_t v29 = v11;
            *((void *)v29 + 1) = v18;
            if (v18)
            {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v19 = (void *)*((void *)&v49 + 1);
            }
            uint64_t v7 = v22;
            if (v19 == (void *)v23)
            {
              int64x2_t v32 = vdupq_n_s64(v23);
              long long v30 = v29;
              uint64_t v2 = v21;
            }
            else
            {
              long long v30 = v29;
              uint64_t v2 = v21;
              do
              {
                long long v31 = *((_OWORD *)v19 - 1);
                v19 -= 2;
                *((_OWORD *)v30 - 1) = v31;
                v30 -= 16;
                void *v19 = 0;
                v19[1] = 0;
              }
              while (v19 != (void *)v23);
              int64x2_t v32 = (int64x2_t)v49;
            }
            char v8 = v46;
            int v20 = v29 + 16;
            *(void *)&long long v49 = v30;
            *((void *)&v49 + 1) = v29 + 16;
            int64x2_t v54 = v32;
            long long v33 = v50;
            long long v50 = &v28[16 * v27];
            char v55 = v33;
            long long v53 = (void **)v32.i64[0];
            std::__split_buffer<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::~__split_buffer((uint64_t)&v53);
          }
          else
          {
            **((void **)&v49 + 1) = v11;
            v19[1] = v18;
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v20 = v19 + 2;
          }
          *((void *)&v49 + 1) = v20;
          goto LABEL_42;
        }
        if (!memcmp(*v16, v17, *(void *)(v10 + 32))) {
          goto LABEL_22;
        }
      }
LABEL_42:
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  uint64_t v34 = v48;
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  long long v36 = (uint64_t *)*((void *)&v49 + 1);
  uint64_t v35 = (uint64_t *)v49;
  if ((void)v49 != *((void *)&v49 + 1))
  {
    while (1)
    {
      uint64_t v38 = *v35;
      uint64_t v37 = (std::__shared_weak_count *)v35[1];
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::UnitDef::UNITTYPE_ATTRIBUTE((RIO_MTLX::UnitDef *)v34);
      long long v39 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v38 + 160), (unsigned __int8 *)qword_268C404D0);
      if (v39) {
        uint64_t v34 = (std::__shared_weak_count *)(v39 + 40);
      }
      else {
        uint64_t v34 = (std::__shared_weak_count *)RIO_MTLX::EMPTY_STRING(0);
      }
      uint64_t shared_weak_owners_high = HIBYTE(v34->__shared_weak_owners_);
      if ((shared_weak_owners_high & 0x80u) == 0) {
        uint64_t shared_owners = HIBYTE(v34->__shared_weak_owners_);
      }
      else {
        uint64_t shared_owners = v34->__shared_owners_;
      }
      uint64_t v42 = *((unsigned __int8 *)v2 + 71);
      int v43 = (char)v42;
      if ((v42 & 0x80u) != 0) {
        uint64_t v42 = *((void *)v2 + 7);
      }
      if (shared_owners != v42) {
        goto LABEL_71;
      }
      long long v44 = v43 >= 0 ? (RIO_MTLX::UnitTypeDef *)((char *)v2 + 48) : (RIO_MTLX::UnitTypeDef *)*((void *)v2 + 6);
      if ((shared_weak_owners_high & 0x80) == 0) {
        break;
      }
      uint64_t v34 = (std::__shared_weak_count *)memcmp(v34->__vftable, v44, v34->__shared_owners_);
      if (!v34) {
        goto LABEL_70;
      }
LABEL_71:
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      v35 += 2;
      if (v35 == v36) {
        goto LABEL_74;
      }
    }
    if (HIBYTE(v34->__shared_weak_owners_))
    {
      while (LOBYTE(v34->__vftable) == *(unsigned __int8 *)v44)
      {
        uint64_t v34 = (std::__shared_weak_count *)((char *)v34 + 1);
        long long v44 = (RIO_MTLX::UnitTypeDef *)((char *)v44 + 1);
        if (!--shared_weak_owners_high) {
          goto LABEL_70;
        }
      }
      goto LABEL_71;
    }
LABEL_70:
    uint64_t v34 = (std::__shared_weak_count *)std::vector<std::shared_ptr<RIO_MTLX::UnitDef>>::push_back[abi:ne180100](a2, v38, (uint64_t)v37);
    goto LABEL_71;
  }
LABEL_74:
  long long v53 = (void **)&v49;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v53);
}

void sub_23F5B2544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = a10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

unint64_t *std::vector<std::shared_ptr<RIO_MTLX::UnitDef>>::push_back[abi:ne180100](unint64_t *result, uint64_t a2, uint64_t a3)
{
  char v5 = result;
  unint64_t v6 = result[2];
  uint64_t v7 = (void *)result[1];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *result;
    uint64_t v10 = (uint64_t)((uint64_t)v7 - *result) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v22 = result + 2;
    if (v13 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = &v14[16 * v10];
    *(void *)uint64_t v15 = a2;
    *((void *)v15 + 1) = a3;
    if (a3)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
      unint64_t v9 = *v5;
      uint64_t v7 = (void *)v5[1];
    }
    char v8 = v15 + 16;
    if (v7 == (void *)v9)
    {
      int64x2_t v17 = vdupq_n_s64(v9);
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v7 - 1);
        v7 -= 2;
        *((_OWORD *)v15 - 1) = v16;
        v15 -= 16;
        void *v7 = 0;
        v7[1] = 0;
      }
      while (v7 != (void *)v9);
      int64x2_t v17 = *(int64x2_t *)v5;
    }
    *char v5 = (unint64_t)v15;
    v5[1] = (unint64_t)v8;
    int64x2_t v20 = v17;
    unint64_t v18 = v5[2];
    _OWORD v5[2] = (unint64_t)&v14[16 * v13];
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    double result = (unint64_t *)std::__split_buffer<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    void *v7 = a2;
    v7[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
    char v8 = v7 + 2;
  }
  v5[1] = (unint64_t)v8;
  return result;
}

void RIO_MTLX::NodeDef::~NodeDef(RIO_MTLX::NodeDef *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void RIO_MTLX::Implementation::~Implementation(RIO_MTLX::Implementation *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

unsigned __int8 *RIO_MTLX::Element::getTypedAttribute<BOOL>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (void *)(a1 + 160);
  double result = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), a2);
  if (result)
  {
    char v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v3, a2);
    if (v5) {
      unint64_t v6 = (uint64_t *)(v5 + 40);
    }
    else {
      unint64_t v6 = RIO_MTLX::EMPTY_STRING(0);
    }
    char v7 = 0;
    return (unsigned __int8 *)(v7 != 0);
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::shared_ptr<RIO_MTLX::InterfaceElement>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 16)
    {
      char v5 = *(std::__shared_weak_count **)(i - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    char v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *char v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  char v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F5B29A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_23F5B2A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL realityio::OutputsDescriptor::addOutputDescriptor(uint64_t a1, std::string::size_type *a2)
{
  uint64_t v4 = (long long *)*a2;
  MEMORY[0x2455CF830](&__p, *a2);
  char v5 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::find<pxrInternal__aapl__pxrReserved__::TfToken>((void *)(a1 + 40), &__p);
  uint64_t v6 = v5;
  if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!v5)
  {
    std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<realityio::OutputDescriptor const>&,0>(&__p, v4, a2);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__emplace_unique_impl<std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>>((void *)(a1 + 40), (uint64_t)&__p);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    MEMORY[0x2455CF830](&__p, v4);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken>(a1, &__p, &__p);
    if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return v6 == 0;
}

void sub_23F5B2B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<realityio::OutputDescriptor const>&,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__emplace_unique_impl<std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__construct_node<std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    long long v5 = __p;
    std::string __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_23F5B2CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__construct_node<std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  std::string::size_type v6 = (char *)operator new(0x28uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)std::string::size_type v6 = 0;
  *((void *)v6 + 1) = 0;
  MEMORY[0x2455CF830](v6 + 16, a2);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 24) = result;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *((void *)v6 + 1) = bswap64(0x9E3779B97F4A7C55 * (*((void *)v6 + 2) & 0xFFFFFFFFFFFFFFF8));
  return result;
}

void sub_23F5B2D74(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique(void *a1, void *a2)
{
  uint64_t v2 = a2;
  char v4 = a2 + 2;
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * (a2[2] & 0xFFFFFFFFFFFFFFF8));
  *(v4 - 1) = v5;
  std::string::size_type v6 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a2 % v4;
      if (v4 > a2) {
        unint64_t v6 = a2;
      }
    }
    else
    {
      unint64_t v6 = (v4 - 1) & a2;
    }
    long long v7 = *(void **)(*(void *)a1 + 8 * v6);
    if (v7)
    {
      __n128 result = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v9 = result[1];
          if (v9 == a2)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == (*a3 & 0xFFFFFFFFFFFFFFF8)) {
              return result;
            }
          }
          else
          {
            if (v5.u32[0] > 1uLL)
            {
              if (v9 >= v4) {
                v9 %= v4;
              }
            }
            else
            {
              v9 &= v4 - 1;
            }
            if (v9 != v6) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
  float v10 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v11 = *(float *)(a1 + 32);
  if (v4 && (float)(v11 * (float)v4) >= v10) {
    return 0;
  }
  BOOL v12 = 1;
  if (v4 >= 3) {
    BOOL v12 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v13 = v12 | (2 * v4);
  unint64_t v14 = vcvtps_u32_f32(v10 / v11);
  if (v13 <= v14) {
    int8x8_t prime = (int8x8_t)v14;
  }
  else {
    int8x8_t prime = (int8x8_t)v13;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime > v4)
  {
LABEL_29:
    if (*(void *)&prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v16 = operator new(8 * *(void *)&prime);
    int64x2_t v17 = *(void **)a1;
    *(void *)a1 = v16;
    if (v17) {
      operator delete(v17);
    }
    uint64_t v18 = 0;
    *(int8x8_t *)(a1 + 8) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v18++) = 0;
    while (*(void *)&prime != v18);
    uint64_t v19 = *(void **)(a1 + 16);
    if (v19)
    {
      unint64_t v20 = v19[1];
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(prime);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        if (v20 >= *(void *)&prime) {
          v20 %= *(void *)&prime;
        }
      }
      else
      {
        v20 &= *(void *)&prime - 1;
      }
      *(void *)(*(void *)a1 + 8 * v2std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = a1 + 16;
      unint64_t v25 = (void *)*v19;
      if (*v19)
      {
        while (1)
        {
          unint64_t v26 = v25[1];
          if (v21.u32[0] > 1uLL)
          {
            if (v26 >= *(void *)&prime) {
              v26 %= *(void *)&prime;
            }
          }
          else
          {
            v26 &= *(void *)&prime - 1;
          }
          if (v26 != v20)
          {
            if (!*(void *)(*(void *)a1 + 8 * v26))
            {
              *(void *)(*(void *)a1 + 8 * v26) = v19;
              goto LABEL_54;
            }
            void *v19 = *v25;
            *unint64_t v25 = **(void **)(*(void *)a1 + 8 * v26);
            **(void **)(*(void *)a1 + 8 * v26) = v25;
            unint64_t v25 = v19;
          }
          unint64_t v26 = v20;
LABEL_54:
          uint64_t v19 = v25;
          unint64_t v25 = (void *)*v25;
          unint64_t v20 = v26;
          if (!v25) {
            return 0;
          }
        }
      }
    }
    return 0;
  }
  if (*(void *)&prime >= v4) {
    return 0;
  }
  unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v4 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
  {
    unint64_t v22 = std::__next_prime(v22);
  }
  else
  {
    uint64_t v24 = 1 << -(char)__clz(v22 - 1);
    if (v22 >= 2) {
      unint64_t v22 = v24;
    }
  }
  if (*(void *)&prime <= v22) {
    int8x8_t prime = (int8x8_t)v22;
  }
  if (*(void *)&prime >= v4) {
    return 0;
  }
  if (prime) {
    goto LABEL_29;
  }
  unint64_t v27 = *(void **)a1;
  *(void *)a1 = 0;
  if (v27) {
    operator delete(v27);
  }
  __n128 result = 0;
  *(void *)(a1 + 8) = 0;
  return result;
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint8x8_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *uint8x8_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    uint8x8_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = __p[2];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    float v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = *a3;
  *a3 = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint8x8_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *unint64_t v13 = i;
  *(void *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint8x8_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23F5B347C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v2 - 1);
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  __n128 result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v4)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t RIOBuilderDirtyStageDescriptorGetTypeID()
{
  if (RIOBuilderDirtyStageDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyStageDescriptorGetTypeID::onceToken, &__block_literal_global_8);
  }
  return RIOBuilderDirtyStageDescriptorGetTypeID::typeID;
}

void __RIOBuilderDirtyStageDescriptorGetTypeID_block_invoke()
{
  if (!RIOBuilderDirtyStageDescriptorGetTypeID::typeID) {
    RIOBuilderDirtyStageDescriptorGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderDirtyStageDescriptorCreateWithPrimDescriptorsAndMetadataDescriptors(const __CFArray *a1, const __CFArray *a2)
{
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  long long v36 = 0;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      long long v7 = *((_OWORD *)ValueAtIndex + 1);
      unint64_t v8 = (std::__shared_weak_count *)*((void *)ValueAtIndex + 3);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v9 = v35;
        float v10 = v36;
        if (v35 >= v36) {
          goto LABEL_9;
        }
        *(_OWORD *)uint64_t v35 = v7;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        unint64_t v9 = v35;
        float v10 = v36;
        if (v35 >= v36)
        {
LABEL_9:
          long long v31 = v7;
          uint64_t v12 = (v9 - v34) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v10 - v34;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          BOOL v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v36, v15);
          unint64_t v18 = &v16[16 * v12];
          *(_OWORD *)unint64_t v18 = v31;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float v11 = v18 + 16;
          size_t v19 = v34;
          uint64_t v20 = v35;
          if (v35 == v34)
          {
            uint64_t v34 = v18;
            uint64_t v35 = v18 + 16;
            long long v36 = &v16[16 * v17];
          }
          else
          {
            do
            {
              long long v21 = *((_OWORD *)v20 - 1);
              v20 -= 16;
              *((_OWORD *)v18 - 1) = v21;
              v18 -= 16;
              *(void *)uint64_t v20 = 0;
              *((void *)v20 + 1) = 0;
            }
            while (v20 != v19);
            uint64_t v20 = v34;
            unint64_t v22 = v35;
            uint64_t v34 = v18;
            uint64_t v35 = v11;
            long long v36 = &v16[16 * v17];
            while (v22 != v20)
            {
              uint8x8_t v23 = (std::__shared_weak_count *)*((void *)v22 - 1);
              if (v23) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              }
              v22 -= 16;
            }
          }
          if (v20) {
            operator delete(v20);
          }
          goto LABEL_27;
        }
        *(void *)uint64_t v35 = v7;
        *((void *)v9 + 1) = 0;
      }
      float v11 = v9 + 16;
LABEL_27:
      uint64_t v35 = v11;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  memset(v33, 0, sizeof(v33));
  CFIndex v24 = CFArrayGetCount(a2);
  if (v24 >= 1)
  {
    for (CFIndex j = 0; j != v24; ++j)
    {
      unint64_t v26 = CFArrayGetValueAtIndex(a2, j);
      uint64_t v27 = v26[3];
      *(void *)&long long v32 = v26[2];
      *((void *)&v32 + 1) = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((uint64_t *)v33, &v32);
      if (*((void *)&v32 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
      }
    }
  }
  uint64_t v28 = operator new(0x58uLL);
  v28[1] = 0;
  v28[2] = 0;
  void *v28 = &unk_26F339BD8;
  *(void *)&long long v32 = realityio::DirtyStageDescriptor::DirtyStageDescriptor((uint64_t)(v28 + 3), v33, (void **)&v34);
  *((void *)&v32 + 1) = v28;
  uint64_t v29 = RIOBuilderDirtyStageDescriptorCreate<std::shared_ptr<realityio::DirtyStageDescriptor const> &>(&v32);
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  *(void *)&long long v32 = v33;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v33[0] = (void **)&v34;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v33);
  return v29;
}

void sub_23F5B3874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void ***a11, std::__shared_weak_count *a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  a11 = &a13;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyStageDescriptorCreate<std::shared_ptr<realityio::DirtyStageDescriptor const> &>(void *a1)
{
  if (RIOBuilderDirtyStageDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyStageDescriptorGetTypeID::onceToken, &__block_literal_global_8);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = a1[1];
    *(void *)(result + 16) = *a1;
    *(void *)(result + 24) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

__CFArray *RIOBuilderDirtyStageDescriptorCopyMetadataDescriptors(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>(&v12, *(void **)(v3 + 8), *(void **)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 4);
      uint64_t v5 = v12;
      for (uint64_t i = v13; v5 != i; v5 += 16)
      {
        float v10 = *(void ***)v5;
        long long v7 = *(std::__shared_weak_count **)(v5 + 8);
        float v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v8 = (const void *)RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(&v10);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      float v10 = (void **)&v12;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F5B3A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *RIOBuilderDirtyStageDescriptorCopyPrimDescriptors(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>(&v12, *(void **)(v3 + 32), *(void **)(v3 + 40), (uint64_t)(*(void *)(v3 + 40) - *(void *)(v3 + 32)) >> 4);
      uint64_t v5 = v12;
      for (uint64_t i = v13; v5 != i; v5 += 16)
      {
        float v10 = *(void ***)v5;
        long long v7 = *(std::__shared_weak_count **)(v5 + 8);
        float v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v8 = (const void *)RIOBuilderDirtyPrimDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> &>(&v10);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      float v10 = (void **)&v12;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F5B3BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void _RIOBuilderDirtyStageDescriptorCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderDirtyStageDescriptorCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyStageDescriptorCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyStageDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyStageDescriptor %p>", a1);
}

CFStringRef _RIOBuilderDirtyStageDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyStageDescriptor %p>", a1);
}

void std::__shared_ptr_emplace<realityio::DirtyStageDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DirtyStageDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::DirtyStageDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F5B3DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *RIO_MTLX::FileSearchPath::find@<X0>(RIO_MTLX::FileSearchPath *this@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *((void *)this + 1);
  long long v7 = *a2;
  unint64_t v8 = a2[1];
  if (*(void *)this == v6)
  {
    uint64_t v9 = a2[1];
    goto LABEL_9;
  }
  uint64_t v9 = v7;
  if (v7 == v8)
  {
LABEL_9:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, v7, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3));
    uint64_t v10 = a2 + 3;
LABEL_12:
    *(_DWORD *)(a3 + 24) = *v10;
    return result;
  }
  uint64_t v10 = a2 + 3;
  if (*((_DWORD *)a2 + 6))
  {
LABEL_11:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, v7, v8, 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 3));
    goto LABEL_12;
  }
  while (1)
  {
    RIO_MTLX::FilePath::operator/(v5, a2, a3);
    uint64_t result = (std::string *)RIO_MTLX::FilePath::exists((char **)a3);
    if (result) {
      return result;
    }
    uint64_t v12 = (void **)a3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    v5 += 32;
    if (v5 == v6)
    {
      long long v7 = *a2;
      unint64_t v8 = a2[1];
      goto LABEL_11;
    }
  }
}

void sub_23F5B3F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t RIO_MTLX::FileSearchPath::append(unint64_t this, const RIO_MTLX::FileSearchPath *a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1);
  if (*(void *)a2 != v3)
  {
    unint64_t v4 = (uint64_t *)this;
    unint64_t v5 = *(void *)(this + 8);
    do
    {
      if (v5 >= v4[2])
      {
        this = std::vector<RIO_MTLX::FilePath>::__push_back_slow_path<RIO_MTLX::FilePath const&>(v4, v2);
        unint64_t v5 = this;
      }
      else
      {
        this = (unint64_t)std::vector<RIO_MTLX::FilePath>::__construct_one_at_end[abi:ne180100]<RIO_MTLX::FilePath const&>((uint64_t)v4, v2);
        v5 += 32;
      }
      v4[1] = v5;
      v2 += 32;
    }
    while (v2 != v3);
  }
  return this;
}

void *std::vector<RIO_MTLX::FilePath>::__init_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<RIO_MTLX::FilePath>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F5B3FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<RIO_MTLX::FilePath>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    std::string v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

realityio::BuilderRegistry *realityio::BuilderRegistry::BuilderRegistry(realityio::BuilderRegistry *this)
{
  v43[4] = *MEMORY[0x263EF8340];
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = (char *)this + 72;
  *((_DWORD *)this + 14) = 1065353216;
  *((void *)this + 1std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((void *)this + 11) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  v43[0] = &unk_26F33A178;
  v43[3] = v43;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v43);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v43);
  v42[0] = &unk_26F33A1F8;
  v42[3] = v42;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v42);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v42);
  v41[0] = &unk_26F33A2C8;
  v41[3] = v41;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v41);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v41);
  v40[0] = &unk_26F33A398;
  v40[3] = v40;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v40);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v40);
  v39[0] = &unk_26F33A468;
  v39[3] = v39;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v39);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v39);
  v38[0] = &unk_26F33A538;
  v38[3] = v38;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v38);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v38);
  v37[0] = &unk_26F33A5B8;
  void v37[3] = v37;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v37);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v37);
  v36[0] = &unk_26F33A638;
  v36[3] = v36;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v36);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v36);
  v35[0] = &unk_26F33A708;
  v35[3] = v35;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v35);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v35);
  v34[0] = &unk_26F33A7D8;
  v34[3] = v34;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v34);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v34);
  v33[0] = &unk_26F33A8A8;
  v33[3] = v33;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v33);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v33);
  v32[0] = &unk_26F33A978;
  v32[3] = v32;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v32);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v32);
  v31[0] = &unk_26F33A9F8;
  v31[3] = v31;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v31);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v31);
  v30[0] = &unk_26F33AA78;
  v30[3] = v30;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v30);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v30);
  v29[0] = &unk_26F33AAF8;
  v29[3] = v29;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v29);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v29);
  v28[0] = &unk_26F33AB78;
  v28[3] = v28;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v28);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v28);
  v27[0] = &unk_26F33AC48;
  v27[3] = v27;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v27);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v27);
  v26[0] = &unk_26F33AD18;
  void v26[3] = v26;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v26);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v26);
  v25[0] = &unk_26F33ADE8;
  void v25[3] = v25;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v25);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v25);
  v24[0] = &unk_26F33AEB8;
  v24[3] = v24;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v24);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v24);
  v23[0] = &unk_26F33AF88;
  void v23[3] = v23;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v23);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v23);
  v22[0] = &unk_26F33B058;
  void v22[3] = v22;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v22);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v22);
  v21[0] = &unk_26F33B128;
  v21[3] = v21;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v21);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v21);
  v20[0] = &unk_26F33B1F8;
  void v20[3] = v20;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v20);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v20);
  v19[0] = &unk_26F33B278;
  void v19[3] = v19;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v19);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v19);
  v18[0] = &unk_26F33B2F8;
  uint64_t v18[3] = v18;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v18);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v18);
  v17[0] = &unk_26F33B378;
  _DWORD v17[3] = v17;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v17);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v17);
  v16[0] = &unk_26F33B448;
  uint64_t v16[3] = v16;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v16);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v16);
  v15[0] = &unk_26F33B518;
  v15[3] = v15;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v15);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v15);
  v14[0] = &unk_26F33B5E8;
  uint64_t v14[3] = v14;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v14);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v14);
  v13[0] = &unk_26F33B6B8;
  void v13[3] = v13;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v13);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v13);
  v12[0] = &unk_26F33B738;
  void v12[3] = v12;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v12);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  v11[0] = &unk_26F33B7B8;
  void v11[3] = v11;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  v10[0] = &unk_26F33B838;
  v10[3] = v10;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v10);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v10);
  v9[0] = &unk_26F33B8B8;
  void v9[3] = v9;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v9);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v9);
  v8[0] = &unk_26F33B988;
  v8[3] = v8;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v8);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v8);
  v7[0] = &unk_26F33BA58;
  void v7[3] = v7;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v7);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v7);
  v6[0] = &unk_26F33BB28;
  void v6[3] = v6;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v6);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v6);
  v5[0] = &unk_26F33BBA8;
  void v5[3] = v5;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v5);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v5);
  v4[0] = &unk_26F33BC28;
  uint64_t v4[3] = v4;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v4);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v4);
  v3[0] = &unk_26F33BCA8;
  void v3[3] = v3;
  realityio::BuilderRegistry::registerBuilder((uint64_t *)this, (uint64_t)v3);
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v3);
  return this;
}

void sub_23F5B4AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10)
{
  std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a10);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(v12, *(void **)(v10 + 120));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(v11, *(void **)(v10 + 72));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::~__hash_table(v10 + 24);
  a9 = (void **)v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::BuilderRegistry::registerBuilder(uint64_t *a1, uint64_t a2)
{
  v17[18] = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  v17[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 48))(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v17);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v15 + 24))(&v14);
  (*(void (**)(realityio::DirtyStageSubscription **__return_ptr))(*(void *)v15 + 32))(&v12);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6) {
LABEL_9:
  }
    operator new();
  while (1)
  {
    unint64_t v8 = *(void **)v5;
    long long v7 = *(std::__shared_weak_count **)(v5 + 8);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v10 = *v8 & 0xFFFFFFFFFFFFFFF8;
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (v9 == v10) {
        break;
      }
      goto LABEL_8;
    }
    if ((v14 & 0xFFFFFFFFFFFFFFF8) == (*v8 & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
LABEL_8:
    v5 += 16;
    if (v5 == v6) {
      goto LABEL_9;
    }
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return 0;
}

void sub_23F5B56C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void **a18)
{
  uint64_t v21 = 136;
  while (1)
  {
    uint64_t v22 = *(void *)(v19 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      __cxa_guard_abort(&_MergedGlobals_13);
      a18 = (void **)&a10;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a18);
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (a14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a14);
      }
      if ((a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (a17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a17);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t realityio::BuilderRegistry::unregisterBuilder(uint64_t *a1, void *__s1)
{
  uint64_t v3 = a1;
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = v4 + v5;
      unint64_t v8 = *(void **)(v4 + v5);
      unint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v10 = *v8 & 0xFFFFFFFFFFFFFFF8;
      if (v10) {
        Emptyuint64_t String = v10 + 16;
      }
      else {
        Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
      }
      if (*((char *)__s1 + 23) < 0)
      {
        uint64_t v13 = (void *)*__s1;
        size_t v12 = __s1[1];
      }
      else
      {
        size_t v12 = *((unsigned __int8 *)__s1 + 23);
        uint64_t v13 = __s1;
      }
      int v14 = *(char *)(EmptyString + 23);
      if (v14 >= 0) {
        size_t v15 = *(unsigned __int8 *)(EmptyString + 23);
      }
      else {
        size_t v15 = *(void *)(EmptyString + 8);
      }
      if (v14 >= 0) {
        BOOL v16 = (const void *)EmptyString;
      }
      else {
        BOOL v16 = *(const void **)EmptyString;
      }
      if (v15 >= v12) {
        size_t v17 = v12;
      }
      else {
        size_t v17 = v15;
      }
      a1 = (uint64_t *)memcmp(v13, v16, v17);
      if (a1) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == v12;
      }
      if (v18)
      {
        CFIndex v24 = (long long *)v3[1];
        unint64_t v25 = (long long *)(*v3 + v5);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 != v24)
        {
          do
          {
            long long v27 = *v26;
            *(void *)unint64_t v26 = 0;
            *((void *)v26 + 1) = 0;
            uint64_t v28 = (std::__shared_weak_count *)*((void *)v26 - 1);
            *(v26 - 1) = v27;
            if (v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
            ++v26;
          }
          while (v26 != v24);
          unint64_t v25 = v26 - 1;
          unint64_t v26 = (long long *)v3[1];
        }
        while (v25 != v26)
        {
          uint64_t v29 = (std::__shared_weak_count *)*((void *)v26 - 1);
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          --v26;
        }
        v3[1] = (uint64_t)v25;
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        return 1;
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v6;
      uint64_t v4 = *v3;
      v5 += 16;
    }
    while (v6 < (v3[1] - *v3) >> 4);
  }
  MEMORY[0x2455CF830](&v42, __s1);
  uint64_t v19 = v42;
  int8x8_t v20 = (int8x8_t)v3[4];
  if (!*(void *)&v20) {
    goto LABEL_84;
  }
  unint64_t v21 = bswap64(0x9E3779B97F4A7C55 * (v42 & 0xFFFFFFFFFFFFFFF8));
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    unint64_t v23 = v21;
    if (v21 >= *(void *)&v20) {
      unint64_t v23 = v21 % *(void *)&v20;
    }
  }
  else
  {
    unint64_t v23 = v21 & (*(void *)&v20 - 1);
  }
  uint64_t v30 = v3[3];
  long long v31 = *(uint64_t ***)(v30 + 8 * v23);
  if (!v31) {
    goto LABEL_84;
  }
  long long v32 = *v31;
  if (!*v31) {
    goto LABEL_84;
  }
  uint64_t v33 = *(void *)&v20 - 1;
  while (1)
  {
    unint64_t v34 = v32[1];
    if (v34 == v21) {
      break;
    }
    if (v22.u32[0] > 1uLL)
    {
      if (v34 >= *(void *)&v20) {
        v34 %= *(void *)&v20;
      }
    }
    else
    {
      v34 &= v33;
    }
    if (v34 != v23) {
      goto LABEL_84;
    }
LABEL_54:
    long long v32 = (uint64_t *)*v32;
    if (!v32) {
      goto LABEL_84;
    }
  }
  if ((v32[2] & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_54;
  }
  uint64_t v35 = (void *)*v32;
  if (v22.u32[0] > 1uLL)
  {
    if (v21 >= *(void *)&v20) {
      v21 %= *(void *)&v20;
    }
  }
  else
  {
    v21 &= v33;
  }
  long long v36 = *(uint64_t **)(v30 + 8 * v21);
  do
  {
    uint64_t v37 = v36;
    long long v36 = (uint64_t *)*v36;
  }
  while (v36 != v32);
  if (v37 == v3 + 5) {
    goto LABEL_73;
  }
  unint64_t v38 = v37[1];
  if (v22.u32[0] > 1uLL)
  {
    if (v38 >= *(void *)&v20) {
      v38 %= *(void *)&v20;
    }
  }
  else
  {
    v38 &= v33;
  }
  if (v38 == v21)
  {
LABEL_75:
    if (v35)
    {
      unint64_t v39 = v35[1];
      goto LABEL_77;
    }
  }
  else
  {
LABEL_73:
    if (!v35) {
      goto LABEL_74;
    }
    unint64_t v39 = v35[1];
    if (v22.u32[0] > 1uLL)
    {
      unint64_t v40 = v35[1];
      if (v39 >= *(void *)&v20) {
        unint64_t v40 = v39 % *(void *)&v20;
      }
    }
    else
    {
      unint64_t v40 = v39 & v33;
    }
    if (v40 != v21)
    {
LABEL_74:
      *(void *)(v30 + 8 * v21) = 0;
      uint64_t v35 = (void *)*v32;
      goto LABEL_75;
    }
LABEL_77:
    if (v22.u32[0] > 1uLL)
    {
      if (v39 >= *(void *)&v20) {
        v39 %= *(void *)&v20;
      }
    }
    else
    {
      v39 &= v33;
    }
    if (v39 != v21)
    {
      *(void *)(v3[3] + 8 * v39) = v37;
      uint64_t v35 = (void *)*v32;
    }
  }
  uint64_t *v37 = (uint64_t)v35;
  *long long v32 = 0;
  --v3[6];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,void *>>>::operator()[abi:ne180100](1, v32);
  uint64_t v19 = v42;
LABEL_84:
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_23F5B5BC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::builderIdentifierToken<realityio::AnimationSceneAssetBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339C28;
  realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder((realityio::AnimationSceneAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B5CAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::EntityBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x148uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339C78;
  realityio::EntityBuilder::EntityBuilder((realityio::EntityBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B5DBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::MaterialAssetBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x180uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339CC8;
  realityio::MaterialAssetBuilder::MaterialAssetBuilder((realityio::MaterialAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B5ECC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::InstancedEntityBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x148uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339D18;
  realityio::InstancedEntityBuilder::InstancedEntityBuilder((realityio::InstancedEntityBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B5FDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::MeshAssetBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339D68;
  realityio::MeshAssetBuilder::MeshAssetBuilder((realityio::MeshAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B60EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::MeshComponentBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339DB8;
  realityio::MeshComponentBuilder::MeshComponentBuilder((realityio::MeshComponentBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B61FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::MeshModelDescriptorBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339E08;
  realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder((realityio::MeshModelDescriptorBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B630C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::SkeletalAnimationAssetBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x260uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3322D0;
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder((realityio::SkeletalAnimationAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B641C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::SkeletonPoseDefinitionBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x138uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339E58;
  realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder((realityio::SkeletonPoseDefinitionBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B652C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::SkeletalAnimationAggregationBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339EA8;
  realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder((realityio::SkeletalAnimationAggregationBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B663C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::StageMetersPerUnitBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339EF8;
  realityio::StageMetersPerUnitBuilder::StageMetersPerUnitBuilder((realityio::StageMetersPerUnitBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B674C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::StageSceneLibraryAssetBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x1C0uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339F48;
  realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder((realityio::StageSceneLibraryAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B685C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::StageTimeCodeBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339F98;
  realityio::StageTimeCodeBuilder::StageTimeCodeBuilder((realityio::StageTimeCodeBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B696C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::StageUpAxisBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339FE8;
  realityio::StageUpAxisBuilder::StageUpAxisBuilder((realityio::StageUpAxisBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B6A7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::TextureBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x160uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A038;
  realityio::TextureBuilder::TextureBuilder((realityio::TextureBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B6B8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::TransformAnimationAssetBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x1A8uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A088;
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder((realityio::TransformAnimationAssetBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B6C9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::TransformAnimationAggregationBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x178uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A0D8;
  realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder((realityio::TransformAnimationAggregationBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B6DAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::builderIdentifierToken<realityio::TransformComponentBuilder>()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = (std::__shared_weak_count *)operator new(0x130uLL);
  v0->__shared_owners_ = 0;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A128;
  realityio::TransformComponentBuilder::TransformComponentBuilder((realityio::TransformComponentBuilder *)&v0[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1);
  ((void (*)(std::__shared_weak_count *))v0[1].__get_deleter)(&v0[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
}

void sub_23F5B6EBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::AnimationSceneAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnimationSceneAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339C28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::AnimationSceneAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::EntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339C78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::EntityBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::MaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::MaterialAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::InstancedEntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InstancedEntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339D18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::InstancedEntityBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339D68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::MeshAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::MeshComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339DB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339DB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::MeshComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339E08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::SkeletonPoseDefinitionBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletonPoseDefinitionBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339E58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::SkeletonPoseDefinitionBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::StageMetersPerUnitBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StageMetersPerUnitBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::StageMetersPerUnitBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::StageSceneLibraryAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StageSceneLibraryAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339F48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::StageSceneLibraryAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::StageTimeCodeBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StageTimeCodeBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339F98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::StageTimeCodeBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::StageUpAxisBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StageUpAxisBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F339FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::StageUpAxisBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::TextureBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextureBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A038;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::TextureBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::TransformAnimationAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A088;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::TransformAnimationAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::TransformAnimationAggregationBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A0D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationAggregationBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A0D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::TransformAnimationAggregationBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::TransformComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A128;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::TransformComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::set<pxrInternal__aapl__pxrReserved__::TfToken>::set[abi:ne180100](uint64_t result, uint64_t a2)
{
  qword_268C40500 = 0;
  qword_268C404F8 = 0;
  qword_268C404F0 = (uint64_t)&qword_268C404F8;
  if (a2)
  {
    uint64_t v2 = (uint64_t *)result;
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(result + 8 * a2);
    uint64_t v5 = &qword_268C404F8;
    while (1)
    {
      if (v5 == &qword_268C404F8)
      {
        unint64_t v6 = &qword_268C404F8;
        if (v3) {
          goto LABEL_8;
        }
      }
      else
      {
        if (v3)
        {
          do
          {
            unint64_t v6 = (uint64_t *)v3;
            uint64_t v3 = *(void *)(v3 + 8);
          }
          while (v3);
        }
        else
        {
          unint64_t v8 = &qword_268C404F8;
          do
          {
            unint64_t v6 = (uint64_t *)v8[2];
            BOOL v9 = *v6 == (void)v8;
            unint64_t v8 = v6;
          }
          while (v9);
        }
        uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40500, v6 + 4, v2);
        if (!result)
        {
          uint64_t result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&qword_268C404F0, &v11, v2);
          uint64_t v7 = (uint64_t **)result;
LABEL_15:
          if (*v7) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        if (qword_268C404F8)
        {
LABEL_8:
          uint64_t v11 = v6;
          uint64_t v7 = (uint64_t **)(v6 + 1);
          goto LABEL_15;
        }
      }
      uint64_t v11 = &qword_268C404F8;
      uint64_t v7 = (uint64_t **)&qword_268C404F8;
LABEL_16:
      std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&qword_268C404F0, v2, (uint64_t)&v10);
      uint64_t result = (uint64_t)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)&qword_268C404F0, (uint64_t)v11, v7, v10);
LABEL_17:
      if (++v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_268C404F0;
      uint64_t v3 = qword_268C404F8;
    }
  }
  return result;
}

void sub_23F5B7A94(_Unwind_Exception *a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = a2[4];
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A178;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A178;
}

realityio::AnimationSceneAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::AnimationSceneAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339C28;
  uint64_t result = realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder((realityio::AnimationSceneAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::AnimationSceneAssetBuilder *)v4;
  return result;
}

void sub_23F5B7C00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_0,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A1F8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A1F8;
}

realityio::ArbitraryComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::ArbitraryComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A268;
  uint64_t result = realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder((realityio::ArbitraryComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::ArbitraryComponentBuilder *)v4;
  return result;
}

void sub_23F5B7D40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_1,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_1>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A268;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A2C8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A2C8;
}

realityio::ArbitraryComponentStructBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::ArbitraryComponentStructBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A338;
  uint64_t result = realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder((realityio::ArbitraryComponentStructBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::ArbitraryComponentStructBuilder *)v4;
  return result;
}

void sub_23F5B7F1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_2,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_2>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentStructBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentStructBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A338;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::ArbitraryComponentStructBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A398;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A398;
}

realityio::CameraComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::CameraComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A408;
  uint64_t result = realityio::CameraComponentBuilder::CameraComponentBuilder((realityio::CameraComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::CameraComponentBuilder *)v4;
  return result;
}

void sub_23F5B80F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_3,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_3>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::CameraComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CameraComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A408;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::CameraComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A468;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A468;
}

realityio::EndOfUpdateBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::EndOfUpdateBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A4D8;
  uint64_t result = realityio::EndOfUpdateBuilder::EndOfUpdateBuilder((realityio::EndOfUpdateBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::EndOfUpdateBuilder *)v4;
  return result;
}

void sub_23F5B82D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_4,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_4>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::EndOfUpdateBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EndOfUpdateBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::EndOfUpdateBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A538;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A538;
}

realityio::EntityBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::EntityBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339C78;
  uint64_t result = realityio::EntityBuilder::EntityBuilder((realityio::EntityBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::EntityBuilder *)v4;
  return result;
}

void sub_23F5B84B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_5,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_5>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A5B8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A5B8;
}

realityio::MaterialAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::MaterialAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x180uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339CC8;
  uint64_t result = realityio::MaterialAssetBuilder::MaterialAssetBuilder((realityio::MaterialAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::MaterialAssetBuilder *)v4;
  return result;
}

void sub_23F5B85F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_6,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_6>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A638;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A638;
}

realityio::DirectionalLightComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::DirectionalLightComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A6A8;
  uint64_t result = realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder((realityio::DirectionalLightComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::DirectionalLightComponentBuilder *)v4;
  return result;
}

void sub_23F5B8730(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_7,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_7>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::DirectionalLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DirectionalLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::DirectionalLightComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A708;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A708;
}

realityio::GeomSubsetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::GeomSubsetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x170uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A778;
  uint64_t result = realityio::GeomSubsetBuilder::GeomSubsetBuilder((realityio::GeomSubsetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::GeomSubsetBuilder *)v4;
  return result;
}

void sub_23F5B890C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_8,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_8>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::GeomSubsetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::GeomSubsetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A778;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::GeomSubsetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A7D8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A7D8;
}

realityio::IBLComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::IBLComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A848;
  uint64_t result = realityio::IBLComponentBuilder::IBLComponentBuilder((realityio::IBLComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::IBLComponentBuilder *)v4;
  return result;
}

void sub_23F5B8AE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_9,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_9>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::IBLComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::IBLComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A848;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::IBLComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A8A8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A8A8;
}

realityio::IBLCubeMapAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::IBLCubeMapAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x170uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A918;
  uint64_t result = realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder((realityio::IBLCubeMapAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::IBLCubeMapAssetBuilder *)v4;
  return result;
}

void sub_23F5B8CC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_10,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_10>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::IBLCubeMapAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::IBLCubeMapAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33A918;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::IBLCubeMapAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A978;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A978;
}

realityio::InstancedEntityBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::InstancedEntityBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339D18;
  uint64_t result = realityio::InstancedEntityBuilder::InstancedEntityBuilder((realityio::InstancedEntityBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::InstancedEntityBuilder *)v4;
  return result;
}

void sub_23F5B8EA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_11,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_11>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33A9F8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33A9F8;
}

realityio::MeshAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::MeshAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339D68;
  uint64_t result = realityio::MeshAssetBuilder::MeshAssetBuilder((realityio::MeshAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::MeshAssetBuilder *)v4;
  return result;
}

void sub_23F5B8FE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_12,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_12>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33AA78;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33AA78;
}

realityio::MeshComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::MeshComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339DB8;
  uint64_t result = realityio::MeshComponentBuilder::MeshComponentBuilder((realityio::MeshComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::MeshComponentBuilder *)v4;
  return result;
}

void sub_23F5B9120(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_13,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_13>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33AAF8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33AAF8;
}

realityio::MeshModelDescriptorBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::MeshModelDescriptorBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339E08;
  uint64_t result = realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder((realityio::MeshModelDescriptorBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::MeshModelDescriptorBuilder *)v4;
  return result;
}

void sub_23F5B9260(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_14,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_14>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33AB78;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33AB78;
}

realityio::PhysicsColliderAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsColliderAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x170uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33ABE8;
  uint64_t result = realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder((realityio::PhysicsColliderAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsColliderAssetBuilder *)v4;
  return result;
}

void sub_23F5B93A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_15,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_15>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsColliderAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33ABE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsColliderAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33ABE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsColliderAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33AC48;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33AC48;
}

realityio::PhysicsColliderComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsColliderComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33ACB8;
  uint64_t result = realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder((realityio::PhysicsColliderComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsColliderComponentBuilder *)v4;
  return result;
}

void sub_23F5B957C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_16,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_16>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsColliderComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33ACB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsColliderComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33ACB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsColliderComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33AD18;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33AD18;
}

realityio::PhysicsMaterialAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsMaterialAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x170uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33AD88;
  uint64_t result = realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder((realityio::PhysicsMaterialAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsMaterialAssetBuilder *)v4;
  return result;
}

void sub_23F5B9758(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_17,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_17>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsMaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33AD88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsMaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33AD88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsMaterialAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33ADE8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33ADE8;
}

realityio::PhysicsRigidBodyComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsRigidBodyComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33AE58;
  uint64_t result = realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder((realityio::PhysicsRigidBodyComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsRigidBodyComponentBuilder *)v4;
  return result;
}

void sub_23F5B9934(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_18,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_18>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsRigidBodyComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33AE58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsRigidBodyComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33AE58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsRigidBodyComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33AEB8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33AEB8;
}

realityio::PhysicsSceneGroundPlaneComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::PhysicsSceneGroundPlaneComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33AF28;
  uint64_t result = realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder((realityio::PhysicsSceneGroundPlaneComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::PhysicsSceneGroundPlaneComponentBuilder *)v4;
  return result;
}

void sub_23F5B9B10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_19,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_19>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::PhysicsSceneGroundPlaneComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33AF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PhysicsSceneGroundPlaneComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33AF28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::PhysicsSceneGroundPlaneComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33AF88;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33AF88;
}

realityio::RectAreaLightComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::RectAreaLightComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33AFF8;
  uint64_t result = realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder((realityio::RectAreaLightComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::RectAreaLightComponentBuilder *)v4;
  return result;
}

void sub_23F5B9CEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_20,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_20>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::RectAreaLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33AFF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RectAreaLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33AFF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::RectAreaLightComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B058;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B058;
}

realityio::SceneAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SceneAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x188uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33B0C8;
  uint64_t result = realityio::SceneAssetBuilder::SceneAssetBuilder((realityio::SceneAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SceneAssetBuilder *)v4;
  return result;
}

void sub_23F5B9EC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_21,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_21>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::SceneAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B0C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SceneAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B0C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::SceneAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B128;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B128;
}

realityio::ShadowComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::ShadowComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33B198;
  uint64_t result = realityio::ShadowComponentBuilder::ShadowComponentBuilder((realityio::ShadowComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::ShadowComponentBuilder *)v4;
  return result;
}

void sub_23F5BA0A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_22,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_22>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::ShadowComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ShadowComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B198;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::ShadowComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B1F8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B1F8;
}

realityio::SkeletalAnimationAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SkeletalAnimationAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x260uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F3322D0;
  uint64_t result = realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder((realityio::SkeletalAnimationAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SkeletalAnimationAssetBuilder *)v4;
  return result;
}

void sub_23F5BA280(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_23,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_23>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B278;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B278;
}

realityio::SkeletonPoseDefinitionBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SkeletonPoseDefinitionBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x138uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339E58;
  uint64_t result = realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder((realityio::SkeletonPoseDefinitionBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SkeletonPoseDefinitionBuilder *)v4;
  return result;
}

void sub_23F5BA3C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_24,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_24>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B2F8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B2F8;
}

realityio::SkeletalAnimationAggregationBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SkeletalAnimationAggregationBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339EA8;
  uint64_t result = realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder((realityio::SkeletalAnimationAggregationBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SkeletalAnimationAggregationBuilder *)v4;
  return result;
}

void sub_23F5BA500(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_25,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_25>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B378;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B378;
}

realityio::SpatialAudioFileAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SpatialAudioFileAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x138uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33B3E8;
  uint64_t result = realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder((realityio::SpatialAudioFileAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SpatialAudioFileAssetBuilder *)v4;
  return result;
}

void sub_23F5BA640(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_26,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_26>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::SpatialAudioFileAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B3E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SpatialAudioFileAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B3E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::SpatialAudioFileAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B448;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B448;
}

realityio::SpatialAudioComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SpatialAudioComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x150uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33B4B8;
  uint64_t result = realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder((realityio::SpatialAudioComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SpatialAudioComponentBuilder *)v4;
  return result;
}

void sub_23F5BA81C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_27,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_27>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::SpatialAudioComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B4B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SpatialAudioComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B4B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::SpatialAudioComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B518;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B518;
}

realityio::AcousticMeshComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::AcousticMeshComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33B588;
  uint64_t result = realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder((realityio::AcousticMeshComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::AcousticMeshComponentBuilder *)v4;
  return result;
}

void sub_23F5BA9F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_28,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_28>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::AcousticMeshComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AcousticMeshComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B588;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::AcousticMeshComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B5E8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B5E8;
}

realityio::SpotOrPointOrAmbientLightComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::SpotOrPointOrAmbientLightComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x138uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33B658;
  uint64_t result = realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder((realityio::SpotOrPointOrAmbientLightComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::SpotOrPointOrAmbientLightComponentBuilder *)v4;
  return result;
}

void sub_23F5BABD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_29,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_29>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::SpotOrPointOrAmbientLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SpotOrPointOrAmbientLightComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::SpotOrPointOrAmbientLightComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B6B8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B6B8;
}

realityio::StageMetersPerUnitBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::StageMetersPerUnitBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339EF8;
  uint64_t result = realityio::StageMetersPerUnitBuilder::StageMetersPerUnitBuilder((realityio::StageMetersPerUnitBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::StageMetersPerUnitBuilder *)v4;
  return result;
}

void sub_23F5BADB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_30,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_30>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B738;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B738;
}

realityio::StageSceneLibraryAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::StageSceneLibraryAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x1C0uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339F48;
  uint64_t result = realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder((realityio::StageSceneLibraryAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::StageSceneLibraryAssetBuilder *)v4;
  return result;
}

void sub_23F5BAEF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_31,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_31>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B7B8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B7B8;
}

realityio::StageTimeCodeBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::StageTimeCodeBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339F98;
  uint64_t result = realityio::StageTimeCodeBuilder::StageTimeCodeBuilder((realityio::StageTimeCodeBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::StageTimeCodeBuilder *)v4;
  return result;
}

void sub_23F5BB030(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_32,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_32>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B838;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B838;
}

realityio::StageUpAxisBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::StageUpAxisBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F339FE8;
  uint64_t result = realityio::StageUpAxisBuilder::StageUpAxisBuilder((realityio::StageUpAxisBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::StageUpAxisBuilder *)v4;
  return result;
}

void sub_23F5BB170(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_33,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_33>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B8B8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B8B8;
}

realityio::TextComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TextComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33B928;
  uint64_t result = realityio::TextComponentBuilder::TextComponentBuilder((realityio::TextComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TextComponentBuilder *)v4;
  return result;
}

void sub_23F5BB2B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_34,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_34>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::TextComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextComponentBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::TextComponentBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33B988;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33B988;
}

realityio::TextEntityBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TextEntityBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x138uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33B9F8;
  uint64_t result = realityio::TextEntityBuilder::TextEntityBuilder((realityio::TextEntityBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TextEntityBuilder *)v4;
  return result;
}

void sub_23F5BB48C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_35,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_35>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::TextEntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextEntityBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33B9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::TextEntityBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33BA58;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33BA58;
}

realityio::TextMeshAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TextMeshAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x170uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33BAC8;
  uint64_t result = realityio::TextMeshAssetBuilder::TextMeshAssetBuilder((realityio::TextMeshAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TextMeshAssetBuilder *)v4;
  return result;
}

void sub_23F5BB668(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_36,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_36>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::TextMeshAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33BAC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextMeshAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33BAC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::TextMeshAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33BB28;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33BB28;
}

realityio::TextureBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TextureBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x160uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A038;
  uint64_t result = realityio::TextureBuilder::TextureBuilder((realityio::TextureBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TextureBuilder *)v4;
  return result;
}

void sub_23F5BB844(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_37,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_37>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33BBA8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33BBA8;
}

realityio::TransformAnimationAssetBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TransformAnimationAssetBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x1A8uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A088;
  uint64_t result = realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder((realityio::TransformAnimationAssetBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TransformAnimationAssetBuilder *)v4;
  return result;
}

void sub_23F5BB984(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_38,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_38>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33BC28;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33BC28;
}

realityio::TransformAnimationAggregationBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TransformAnimationAggregationBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x178uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A0D8;
  uint64_t result = realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder((realityio::TransformAnimationAggregationBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TransformAnimationAggregationBuilder *)v4;
  return result;
}

void sub_23F5BBAC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_39,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_39>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F33BCA8;
  return result;
}

void std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33BCA8;
}

realityio::TransformComponentBuilder *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, realityio::TransformComponentBuilder **a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_26F33A128;
  uint64_t result = realityio::TransformComponentBuilder::TransformComponentBuilder((realityio::TransformComponentBuilder *)(v4 + 3), a1);
  *a2 = result;
  a2[1] = (realityio::TransformComponentBuilder *)v4;
  return result;
}

void sub_23F5BBC04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::BuilderRegistry::BuilderRegistry(void)::$_40,std::allocator<realityio::BuilderRegistry::BuilderRegistry(void)::$_40>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_pointer<realityio::BuilderRegistrationInfo *,std::shared_ptr<realityio::BuilderRegistrationInfo>::__shared_ptr_default_delete<realityio::BuilderRegistrationInfo,realityio::BuilderRegistrationInfo>,std::allocator<realityio::BuilderRegistrationInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_pointer<realityio::BuilderRegistrationInfo *,std::shared_ptr<realityio::BuilderRegistrationInfo>::__shared_ptr_default_delete<realityio::BuilderRegistrationInfo,realityio::BuilderRegistrationInfo>,std::allocator<realityio::BuilderRegistrationInfo>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<realityio::BuilderRegistrationInfo>::operator()[abi:ne180100](*(void **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<realityio::BuilderRegistrationInfo *,std::shared_ptr<realityio::BuilderRegistrationInfo>::__shared_ptr_default_delete<realityio::BuilderRegistrationInfo,realityio::BuilderRegistrationInfo>,std::allocator<realityio::BuilderRegistrationInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::default_delete<realityio::BuilderRegistrationInfo>::operator()[abi:ne180100](void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](result + 3);
    uint64_t v2 = (std::__shared_weak_count *)v1[2];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    if ((*v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = __p[2];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }

  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x38uLL);
  *((void *)v4 + 4) = *(void *)a2;
  *(_OWORD *)(v4 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v6 = (char **)(a1 + 1);
  uint64_t v5 = (char *)a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = (char **)v5;
        if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t *)v4 + 4, (uint64_t *)v5 + 4))break; {
        uint64_t v5 = *v6;
        }
        uint64_t v7 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v5 = v6[1];
    }
    while (v5);
    uint64_t v7 = v6 + 1;
  }
  else
  {
    uint64_t v7 = (char **)(a1 + 1);
  }
LABEL_8:
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  std::__shared_weak_count *v7 = v4;
  unint64_t v8 = (uint64_t *)**a1;
  if (v8)
  {
    *a1 = v8;
    uint64_t v4 = *v7;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_23F5BBEA8(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[6];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = __p[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__count_unique<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if ((std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v4, a2, v2 + 4) & 1) == 0)
      {
        if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v4, v2 + 4, a2))return v5; {
        ++v2;
        }
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

void *RIO_MTLX::readFromXmlFile(std::string **a1, uint64_t a2, RIO_MTLX::FileSearchPath *a3, uint64_t a4)
{
  v30[11] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)RIO_MTLX::PATH_LIST_SEPARATOR);
  RIO_MTLX::getEnvironmentPath((unsigned __int8 **)__p, (RIO_MTLX::FileSearchPath *)&v20);
  RIO_MTLX::FileSearchPath::append((unint64_t)a3, (const RIO_MTLX::FileSearchPath *)&v20);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  RIO_MTLX::FileSearchPath::find(a3, (long long **)a2, (uint64_t)&v20);
  if (&v20 != (std::string **)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a2, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  }
  *(_DWORD *)(a2 + 24) = v23;
  __p[0] = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  long long v23 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0x7FD8uLL;
  uint64_t v25 = 10241;
  v30[0] = &v22;
  v30[1] = 32728;
  uint64_t v30[2] = 0;
  v30[3] = 0;
  int8x8_t v20 = (std::string *)&v25;
  unint64_t v21 = 0;
  uint64_t v29 = 0;
  long long v28 = (unint64_t)&v25;
  uint8x8_t v22 = v30;
  RIO_MTLX::FilePath::asString((char **)a2, 1, &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  unsigned int v9 = 116;
  if (a4)
  {
    if (*(unsigned char *)a4) {
      unsigned int v9 = 118;
    }
    else {
      unsigned int v9 = 116;
    }
  }
  pugi::xml_document::load_file((uint64_t)&v20, (const char *)p_str, v9, 0, (uint64_t)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (!a4 || (uint64_t v11 = *(const std::string **)(a4 + 40), v11 == *(const std::string **)(a4 + 48)))
  {
    size_t v12 = *a1;
    RIO_MTLX::FilePath::asString((char **)a2, 1, &__str);
    std::string::operator=(v12 + 3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::operator=(*a1 + 3, v11);
  }
  uint64_t v13 = *a1;
  int v14 = (std::__shared_weak_count *)a1[1];
  v16[0] = v13;
  v16[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return pugi::xml_document::_destroy((pugi::xml_document *)&v20);
}

void sub_23F5BC200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  pugi::xml_document::_destroy((pugi::xml_document *)&a24);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::XmlReadOptions::XmlReadOptions(uint64_t this)
{
  *(_WORD *)this = 256;
  *(void *)(this + 8) = &unk_26F33BDA0;
  *(void *)(this + 16) = RIO_MTLX::readFromXmlFile;
  *(void *)(this + 32) = this + 8;
  *(void *)(this + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  return this;
}

void RIO_MTLX::anonymous namespace'::validateParseResult(RIO_MTLX::_anonymous_namespace_ *this, char **a2, const RIO_MTLX::FilePath *a3)
{
  if (*(_DWORD *)this)
  {
    uint64_t v5 = (char *)pugi::xml_parse_result::description(this);
    std::string::basic_string[abi:ne180100]<0>(&v27, v5);
    std::to_string(&v26, *((void *)this + 1));
    std::string::basic_string[abi:ne180100]<0>(&v25, "XML parse error");
    if (*a2 != a2[1])
    {
      RIO_MTLX::FilePath::asString(a2, 1, &v22);
      unint64_t v6 = std::string::insert(&v22, 0, " in ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      int64_t v24 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (v24 >= 0) {
        unint64_t v8 = __p;
      }
      else {
        unint64_t v8 = (void **)__p[0];
      }
      if (v24 >= 0) {
        std::string::size_type v9 = HIBYTE(v24);
      }
      else {
        std::string::size_type v9 = (std::string::size_type)__p[1];
      }
      std::string::append(&v25, (const std::string::value_type *)v8, v9);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
    std::operator+<char>();
    unint64_t v10 = std::string::append(&v20, " at character ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v12 = &v26;
    }
    else {
      size_t v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    int v14 = std::string::append(&v21, (const std::string::value_type *)v12, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    BOOL v16 = std::string::append(&v22, ")");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t v24 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v24 >= 0) {
      BOOL v18 = __p;
    }
    else {
      BOOL v18 = (void **)__p[0];
    }
    if (v24 >= 0) {
      std::string::size_type v19 = HIBYTE(v24);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    std::string::append(&v25, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
  }
}

void sub_23F5BC514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (*(char *)(v35 - 17) < 0) {
    operator delete(*(void **)(v35 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_23F5BC5E8()
{
}

void RIO_MTLX::anonymous namespace'::documentFromXml(RIO_MTLX::Document *a1, pugi::xml_node *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  long long v7 = (const char *)RIO_MTLX::Document::CATEGORY(a1);
  if (v7[23] >= 0) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = *(const char **)v7;
  }
  v31.__r_.__value_.__r.__words[0] = pugi::xml_node::child(a2, v8);
  if (!pugi::xml_node::operator void (*)(pugi::xml_node***)(&v31)) {
    goto LABEL_64;
  }
  std::string::size_type v9 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v35, 0, 24);
  if (a4)
  {
    std::__function::__value_func<void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__value_func[abi:ne180100]((uint64_t)v37, a4 + 8);
  }
  else
  {
    v37[0] = &unk_26F33BDA0;
    v37[1] = RIO_MTLX::readFromXmlFile;
    unint64_t v38 = v37;
  }
  std::string::size_type v10 = v31.__r_.__value_.__r.__words[0];
  if (v31.__r_.__value_.__r.__words[0]) {
    std::string::size_type v10 = *(void *)(v31.__r_.__value_.__r.__words[0] + 32);
  }
  unint64_t v34 = (uint64_t *)v10;
  while (pugi::xml_node::operator void (*)(pugi::xml_node***)(&v34))
  {
    long long v11 = v34;
    if (v34)
    {
      size_t v12 = (const char *)v34[1];
      if (v12) {
        BOOL v13 = v12 == "xi:include";
      }
      else {
        BOOL v13 = "" == "xi:include";
      }
      if (!v13)
      {
        int v14 = (uint64_t *)v34[6];
        goto LABEL_27;
      }
LABEL_21:
      if (v38)
      {
        uint64_t v15 = pugi::xml_node::attribute((pugi::xml_node *)&v34, "href");
        if (v15)
        {
          if (*(void *)(v15 + 16)) {
            BOOL v16 = *(char **)(v15 + 16);
          }
          else {
            BOOL v16 = "";
          }
        }
        else
        {
          BOOL v16 = "";
        }
        long long v17 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(__p, v16);
        if (!a4 || (BOOL v18 = *(unsigned __int8 **)(a4 + 40), v19 = *(unsigned __int8 **)(a4 + 48), v18 == v19)) {
LABEL_54:
        }
          RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(v17);
        if ((v33 & 0x80u) == 0) {
          unint64_t v20 = v33;
        }
        else {
          unint64_t v20 = (unint64_t)__p[1];
        }
        if ((v33 & 0x80u) == 0) {
          std::string v21 = __p;
        }
        else {
          std::string v21 = (void **)__p[0];
        }
        while (1)
        {
LABEL_37:
          uint64_t v22 = v18[23];
          size_t v23 = *((void *)v18 + 1);
          if ((v22 & 0x80u) == 0) {
            int64_t v24 = (void *)v18[23];
          }
          else {
            int64_t v24 = (void *)*((void *)v18 + 1);
          }
          if (v24 != (void *)v20) {
            goto LABEL_47;
          }
          if ((v22 & 0x80) == 0) {
            break;
          }
          long long v27 = *(const void **)v18;
          v18 += 24;
          long long v17 = (RIO_MTLX *)memcmp(v27, v21, v23);
          if (v17) {
            BOOL v28 = v18 == v19;
          }
          else {
            BOOL v28 = 1;
          }
          if (v28) {
            goto LABEL_54;
          }
        }
        if (!v18[23]) {
          goto LABEL_54;
        }
        std::string v25 = v21;
        std::string v26 = v18;
        while (*v26 == *(unsigned __int8 *)v25)
        {
          ++v26;
          std::string v25 = (void **)((char *)v25 + 1);
          if (!--v22) {
            goto LABEL_54;
          }
        }
LABEL_47:
        v18 += 24;
        if (v18 == v19) {
          goto LABEL_54;
        }
        goto LABEL_37;
      }
      long long v36 = v34;
      if (v34) {
        long long v11 = (uint64_t *)v34[6];
      }
      unint64_t v34 = v11;
      pugi::xml_node::remove_child((pugi::xml_node *)&v31, &v36);
    }
    else
    {
      if ("" == "xi:include") {
        goto LABEL_21;
      }
      int v14 = 0;
LABEL_27:
      unint64_t v34 = v14;
    }
  }
  std::__function::__value_func<void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::~__value_func[abi:ne180100](v37);
  long long v36 = v35;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v29 = (std::__shared_weak_count *)*((void *)a1 + 1);
  v30[0] = *(uint64_t **)a1;
  v30[1] = (uint64_t *)v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
LABEL_64:
  if (!a4 || *(unsigned char *)(a4 + 1)) {
    RIO_MTLX::Document::upgradeVersion(*(uint64_t ***)a1);
  }
}

void sub_23F5BCE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t *a48,uint64_t a49)
{
  a48 = (uint64_t *)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  a21 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a34 < 0) {
    operator delete(__p);
  }
  RIO_MTLX::XmlReadOptions::~XmlReadOptions((RIO_MTLX::XmlReadOptions *)(v50 - 200));
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  std::__function::__value_func<void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::~__value_func[abi:ne180100]((void *)(v50 - 136));
  *(void *)(v50 - 20std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = &a45;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 200));
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  _Unwind_Resume(a1);
}

void *RIO_MTLX::readFromXmlStream(uint64_t *a1, void *a2, unint64_t a3, unsigned char *a4)
{
  v29[11] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)RIO_MTLX::PATH_LIST_SEPARATOR);
  RIO_MTLX::getEnvironmentPath((unsigned __int8 **)__p, (RIO_MTLX::FileSearchPath *)v19);
  RIO_MTLX::FileSearchPath::append(a3, (const RIO_MTLX::FileSearchPath *)v19);
  v17[0] = (void **)v19;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](v17);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  long long v21 = 0u;
  uint64_t v27 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0x7FD8uLL;
  uint64_t v23 = 10241;
  v29[0] = &v20;
  v29[1] = 32728;
  v29[2] = 0;
  v29[3] = 0;
  v19[0] = &v23;
  v19[1] = 0;
  uint64_t v28 = 0;
  std::string v26 = &v23;
  unsigned int v8 = 116;
  unint64_t v20 = v29;
  if (a4)
  {
    if (*a4) {
      unsigned int v8 = 118;
    }
    else {
      unsigned int v8 = 116;
    }
  }
  pugi::xml_document::load((uint64_t)v19, a2, v8, 0, (uint64_t)v17);
  __p[0] = 0;
  __p[1] = 0;
  int v16 = 0;
  uint64_t v15 = 0;
  BOOL v18 = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint64_t v10 = *a1;
  long long v11 = (std::__shared_weak_count *)a1[1];
  v13[0] = v10;
  v13[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return pugi::xml_document::_destroy((pugi::xml_document *)v19);
}

void sub_23F5BD1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t RIO_MTLX::readFromXmlString(uint64_t *a1, const std::string *a2, uint64_t *a3, unsigned char *a4)
{
  std::istringstream::basic_istringstream[abi:ne180100](v12, a2, 8);
  uint64_t v7 = *a1;
  unsigned int v8 = (std::__shared_weak_count *)a1[1];
  v11[0] = v7;
  v11[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v10, 0, sizeof(v10));
  std::vector<RIO_MTLX::FilePath>::__init_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v10, *a3, a3[1], (a3[1] - *a3) >> 5);
  RIO_MTLX::readFromXmlStream(v11, v12, (unint64_t)v10, a4);
  uint64_t v15 = (void **)v10;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  v12[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v12 + *(void *)(v12[0] - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  uint64_t v12[2] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x2455D2B30](&v14);
}

void sub_23F5BD3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v8 - 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v7;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = v8;
  a1[1] = 0;
  uint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_23F5BD54C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2455D2B30](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x2455D2B30](a1 + 120);
  return a1;
}

void *RIO_MTLX::writeToXmlStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v22[11] = *MEMORY[0x263EF8340];
  long long v14 = 0u;
  uint64_t v20 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0x7FD8uLL;
  uint64_t v16 = 10241;
  v22[0] = &v13;
  v22[1] = 32728;
  void v22[2] = 0;
  void v22[3] = 0;
  v12[0] = &v16;
  v12[1] = 0;
  uint64_t v21 = 0;
  std::string::size_type v19 = &v16;
  char v13 = v22;
  appended = pugi::xml_node::append_child(v12, 2u);
  v11[0] = appended;
  pugi::xml_node::set_name((pugi::xml_node *)v11, "materialx");
  uint64_t v7 = *(std::__shared_weak_count_vtbl **)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  v10.__vftable = v7;
  v10.__shared_owners_ = (uint64_t)v8;
  v10.__shared_weak_owners_ = (uint64_t)appended;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  v11[0] = &unk_26F3426D8;
  v11[1] = a2;
  uint64_t v11[2] = 0;
  pugi::xml_document::save((uint64_t)v12, (uint64_t)v11);
  return pugi::xml_document::_destroy((pugi::xml_document *)v12);
}

void sub_23F5BD7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *RIO_MTLX::anonymous namespace'::elementToXml(std::__shared_weak_count *a1, pugi::xml_node *a2, uint64_t a3)
{
  uint64_t v5 = (RIO_MTLX::Element **)a1;
  uint64_t v62 = *MEMORY[0x263EF8340];
  if (a3)
  {
    BOOL v6 = *(unsigned char *)a3 != 0;
    a1 = *(std::__shared_weak_count **)(a3 + 32);
    if (a1)
    {
      if (a1 == (std::__shared_weak_count *)(a3 + 8))
      {
        unint64_t v61 = (std::__shared_weak_count *)v60;
        a1 = (std::__shared_weak_count *)((uint64_t (*)(std::__shared_weak_count *, void *))a1->__get_deleter)(a1, v60);
      }
      else
      {
        a1 = (std::__shared_weak_count *)((uint64_t (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
        unint64_t v61 = a1;
      }
    }
    else
    {
      unint64_t v61 = 0;
    }
  }
  else
  {
    unint64_t v61 = 0;
    BOOL v6 = 1;
  }
  uint64_t v7 = *v5;
  uint64_t v8 = (char *)*v5 + 48;
  if (*((char *)*v5 + 71) < 0)
  {
    if (!*((void *)v7 + 7)) {
      goto LABEL_17;
    }
    uint64_t v8 = *(char **)v8;
  }
  else if (!*((unsigned char *)*v5 + 71))
  {
    goto LABEL_17;
  }
  uint64_t v9 = (char *)RIO_MTLX::Element::NAME_ATTRIBUTE((RIO_MTLX::Element *)a1);
  if (v9[23] >= 0) {
    std::__shared_weak_count v10 = v9;
  }
  else {
    std::__shared_weak_count v10 = *(char **)v9;
  }
  appended = pugi::xml_node::append_attribute(a2, v10);
  a1 = (std::__shared_weak_count *)pugi::xml_attribute::set_value((pugi::xml_attribute *)&appended, v8);
  uint64_t v7 = *v5;
LABEL_17:
  size_t v12 = (char *)*((void *)v7 + 25);
  uint64_t v11 = (char *)*((void *)v7 + 26);
  if (v12 != v11)
  {
    do
    {
      char v13 = v12;
      if (v12[23] < 0) {
        char v13 = *(char **)v12;
      }
      appended = pugi::xml_node::append_attribute(a2, v13);
      long long v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)*v5 + 20, (unsigned __int8 *)v12);
      if (v14) {
        long long v15 = (char *)(v14 + 40);
      }
      else {
        long long v15 = (char *)RIO_MTLX::EMPTY_STRING(0);
      }
      if (v15[23] < 0) {
        long long v15 = *(char **)v15;
      }
      a1 = (std::__shared_weak_count *)pugi::xml_attribute::set_value((pugi::xml_attribute *)&appended, v15);
      v12 += 24;
    }
    while (v12 != v11);
    uint64_t v7 = *v5;
  }
  v59[0] = 0;
  v59[1] = 0;
  uint64_t v58 = v59;
  uint64_t v16 = (uint64_t *)*((void *)v7 + 17);
  long long v17 = (uint64_t *)*((void *)v7 + 18);
  if (v16 == v17)
  {
    uint64_t v47 = 0;
    goto LABEL_113;
  }
  do
  {
    uint64_t v18 = *v16;
    std::string::size_type v19 = (std::__shared_weak_count *)v16[1];
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v61) {
        goto LABEL_37;
      }
      uint64_t v56 = v18;
      uint64_t v57 = v19;
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      a1 = v61;
      if (!v61) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      a1 = v61;
      if (!v61) {
        goto LABEL_37;
      }
      uint64_t v56 = *v16;
      uint64_t v57 = 0;
    }
    char v20 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t *))a1->__vftable[1].~__shared_weak_count_0)(a1, &v56);
    a1 = v57;
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (v20)
    {
LABEL_37:
      if (!v6) {
        goto LABEL_80;
      }
      if (*(char *)(v18 + 95) < 0)
      {
        std::string::size_type v21 = *(void *)(v18 + 80);
        if (!v21) {
          goto LABEL_80;
        }
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)(v18 + 72), v21);
      }
      else
      {
        if (!*(unsigned char *)(v18 + 95)) {
          goto LABEL_80;
        }
        std::string v55 = *(std::string *)(v18 + 72);
      }
      RIO_MTLX::Element::getDocument(*v5, &appended);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v55.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = appended[95];
      int v24 = (char)v23;
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *((void *)appended + 10);
      }
      if (size == v23)
      {
        if (v24 >= 0) {
          long long v25 = appended + 72;
        }
        else {
          long long v25 = (char *)*((void *)appended + 9);
        }
        if ((*((unsigned char *)&v55.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v31 = memcmp(v55.__r_.__value_.__l.__data_, v25, v55.__r_.__value_.__l.__size_) != 0;
        }
        else if (*((unsigned char *)&v55.__r_.__value_.__s + 23))
        {
          uint64_t v26 = HIBYTE(v55.__r_.__value_.__r.__words[2]) - 1;
          uint64_t v27 = &v55;
          do
          {
            int v29 = v27->__r_.__value_.__s.__data_[0];
            uint64_t v27 = (std::string *)((char *)v27 + 1);
            int v28 = v29;
            int v30 = *v25++;
            BOOL v31 = v28 != v30;
          }
          while (v28 == v30 && v26-- != 0);
        }
        else
        {
          BOOL v31 = 0;
        }
      }
      else
      {
        BOOL v31 = 1;
      }
      a1 = v52;
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v31)
      {
        a1 = (std::__shared_weak_count *)std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v58, (const void **)&v55.__r_.__value_.__l.__data_);
        if (!a1)
        {
          if (!pugi::xml_node::attribute(a2, "xmlns:xi"))
          {
            appended = pugi::xml_node::append_attribute(a2, "xmlns:xi");
            pugi::xml_attribute::set_value((pugi::xml_attribute *)&appended, "http://www.w3.org/2001/XInclude");
          }
          unsigned __int8 v33 = pugi::xml_node::append_child((void **)a2, 2u);
          appended = v33;
          pugi::xml_node::set_name((pugi::xml_node *)&appended, "xi:include");
          int64x2_t v54 = v33;
          long long v53 = pugi::xml_node::append_attribute((pugi::xml_node *)&v54, "href");
          RIO_MTLX::FilePath::FilePath(&appended, &v55);
          RIO_MTLX::FilePath::asString(&appended, 1, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          pugi::xml_attribute::set_value((pugi::xml_attribute *)&v53, (char *)p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v58, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&v55);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&appended;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        goto LABEL_108;
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
LABEL_80:
      uint64_t v35 = (unsigned __int8 *)RIO_MTLX::CommentElement::CATEGORY((RIO_MTLX::CommentElement *)a1);
      long long v36 = (void *)(v18 + 24);
      if (*(char *)(v18 + 47) >= 0) {
        uint64_t v37 = *(unsigned __int8 *)(v18 + 47);
      }
      else {
        uint64_t v37 = *(void *)(v18 + 32);
      }
      uint64_t v38 = v35[23];
      int v39 = (char)v38;
      if ((v38 & 0x80u) != 0) {
        uint64_t v38 = *((void *)v35 + 1);
      }
      if (v37 == v38)
      {
        if (v39 >= 0) {
          unint64_t v40 = v35;
        }
        else {
          unint64_t v40 = *(unsigned __int8 **)v35;
        }
        if ((*(unsigned char *)(v18 + 47) & 0x80) != 0)
        {
          long long v36 = (void *)*v36;
          if (!memcmp(v36, v40, *(void *)(v18 + 32)))
          {
LABEL_102:
            appended = pugi::xml_node::append_child((void **)a2, 5u);
            long long v44 = (unsigned __int8 *)RIO_MTLX::Element::DOC_ATTRIBUTE((RIO_MTLX::Element *)appended);
            uint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v18 + 160), v44);
            if (v45) {
              long long v46 = (char *)(v45 + 40);
            }
            else {
              long long v46 = (char *)RIO_MTLX::EMPTY_STRING(0);
            }
            if (v46[23] < 0) {
              long long v46 = *(char **)v46;
            }
            a1 = (std::__shared_weak_count *)pugi::xml_node::set_value((pugi::xml_node *)&appended, v46);
            goto LABEL_108;
          }
          goto LABEL_98;
        }
        if (!*(unsigned char *)(v18 + 47)) {
          goto LABEL_102;
        }
        long long v41 = (unsigned __int8 *)(v18 + 24);
        uint64_t v42 = *(unsigned __int8 *)(v18 + 47);
        while (*v41 == *v40)
        {
          ++v41;
          ++v40;
          if (!--v42) {
            goto LABEL_102;
          }
        }
      }
      if ((*(unsigned char *)(v18 + 47) & 0x80) != 0) {
        long long v36 = (void *)*v36;
      }
LABEL_98:
      int v43 = pugi::xml_node::append_child((void **)a2, 2u);
      appended = v43;
      pugi::xml_node::set_name((pugi::xml_node *)&appended, (char *)v36);
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v49[0] = v18;
      v49[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
LABEL_108:
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    v16 += 2;
  }
  while (v16 != v17);
  uint64_t v47 = (char *)v59[0];
LABEL_113:
  std::__tree<std::string>::destroy((uint64_t)&v58, v47);
  return std::__function::__value_func<BOOL ()(std::shared_ptr<RIO_MTLX::Element const>)>::~__value_func[abi:ne180100](v60);
}

void sub_23F5BDDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33)
{
}

std::string *RIO_MTLX::GraphElement::addNode@<X0>(RIO_MTLX::Node *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, uint64_t *a5@<X8>)
{
  RIO_MTLX::Element::addChild<RIO_MTLX::Node>(a1, a3, a5);
  uint64_t v8 = std::string::operator=((std::string *)(*a5 + 24), a2);
  uint64_t v9 = (uint64_t *)*a5;
  std::__shared_weak_count v10 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v8);
  return RIO_MTLX::Element::setAttribute(v9, v10, a4);
}

void sub_23F5BDF24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::anonymous namespace'::elementFromXml(std::string *a1, uint64_t **a2, unsigned char *a3)
{
  std::string::size_type v5 = a1->__r_.__value_.__r.__words[0];
  if (!a1->__r_.__value_.__r.__words[0]) {
    goto LABEL_27;
  }
  BOOL v6 = *(void **)(v5 + 56);
  if (!v6) {
    goto LABEL_26;
  }
  uint64_t v7 = (std::string::__raw *)a1;
  do
  {
    if (v6[1]) {
      uint64_t v8 = (const char *)v6[1];
    }
    else {
      uint64_t v8 = "";
    }
    uint64_t v9 = RIO_MTLX::Element::NAME_ATTRIBUTE((RIO_MTLX::Element *)a1);
    size_t v10 = strlen(v8);
    if (*((char *)v9 + 23) < 0)
    {
      if (v10 == v9[1])
      {
        if (v10 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v9 = (void *)*v9;
LABEL_13:
        a1 = (std::string *)memcmp(v9, v8, v10);
        if (!a1) {
          goto LABEL_24;
        }
      }
    }
    else if (v10 == *((unsigned __int8 *)v9 + 23))
    {
      goto LABEL_13;
    }
    uint64_t v11 = *a2;
    if (v6[1]) {
      size_t v12 = (char *)v6[1];
    }
    else {
      size_t v12 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v44, v12);
    if (v6[2]) {
      char v13 = (char *)v6[2];
    }
    else {
      char v13 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v13);
    a1 = RIO_MTLX::Element::setAttribute(v11, &v44, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)v45 < 0) {
      operator delete((void *)v44);
    }
LABEL_24:
    BOOL v6 = (void *)v6[4];
  }
  while (v6);
  std::string::size_type v5 = v7->__words[0];
  if (v7->__words[0])
  {
LABEL_26:
    long long v14 = *(void **)(v5 + 32);
    goto LABEL_28;
  }
LABEL_27:
  long long v14 = 0;
LABEL_28:
  long long v41 = v14;
  std::string::size_type v42 = v5;
  while (v14)
  {
    if (v14[1]) {
      int v30 = (char *)v14[1];
    }
    else {
      int v30 = "";
    }
    size_t v31 = (size_t)std::string::basic_string[abi:ne180100]<0>(&v44, v30);
    memset(&__p, 0, sizeof(__p));
    for (uint64_t i = (void *)v14[7]; i; uint64_t i = (void *)i[4])
    {
      if (i[1]) {
        unsigned __int8 v33 = (const char *)i[1];
      }
      else {
        unsigned __int8 v33 = "";
      }
      unint64_t v34 = RIO_MTLX::Element::NAME_ATTRIBUTE((RIO_MTLX::Element *)v31);
      size_t v31 = strlen(v33);
      if (*((char *)v34 + 23) < 0)
      {
        if (v31 != v34[1]) {
          continue;
        }
        if (v31 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v34 = (void *)*v34;
      }
      else if (v31 != *((unsigned __int8 *)v34 + 23))
      {
        continue;
      }
      size_t v31 = memcmp(v34, v33, v31);
      if (!v31)
      {
        if (i[2]) {
          uint64_t v35 = (const char *)i[2];
        }
        else {
          uint64_t v35 = "";
        }
        MEMORY[0x2455D2770](&__p, v35);
        break;
      }
    }
LABEL_31:
    long long v15 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(*a2 + 12, (unsigned __int8 *)&__p);
    if (v15)
    {
      uint64_t v16 = *((void *)v15 + 5);
      long long v17 = (std::__shared_weak_count *)*((void *)v15 + 6);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v16) {
        goto LABEL_66;
      }
    }
    else
    {
      long long v17 = 0;
    }
    uint64_t v18 = (uint64_t)*a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v39, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v39 = __p;
    }
    RIO_MTLX::Element::addChildOfCategory(v18, (uint64_t)&v44, (uint64_t)&v39, (std::string **)&v40);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    std::string::size_type v19 = (std::__shared_weak_count *)*((void *)&v40 + 1);
    long long v38 = v40;
    if (*((void *)&v40 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (a3 && *a3)
    {
      uint64_t v21 = v45;
      if ((v45 & 0x80u) != 0) {
        uint64_t v21 = *((void *)&v44 + 1);
      }
      if (!v21)
      {
        long long v22 = *a2;
        uint64_t v23 = (std::__shared_weak_count *)*((void *)&v40 + 1);
        long long v37 = v40;
        if (*((void *)&v40 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        int v24 = RIO_MTLX::CommentElement::CATEGORY(v20);
        RIO_MTLX::Element::changeChildCategory(v22, (std::string **)&v37, (uint64_t)v24, (uint64_t)&v36);
        long long v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
        long long v40 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        uint64_t v26 = (uint64_t *)v40;
        if (v14)
        {
          if (v14[2]) {
            uint64_t v27 = (char *)v14[2];
          }
          else {
            uint64_t v27 = "";
          }
        }
        else
        {
          uint64_t v27 = "";
        }
        int v28 = (RIO_MTLX::Element *)std::string::basic_string[abi:ne180100]<0>(&v36, v27);
        int v29 = (long long *)RIO_MTLX::Element::DOC_ATTRIBUTE(v28);
        RIO_MTLX::Element::setAttribute(v26, v29, &v36);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*((void *)&v40 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
    }
LABEL_66:
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)v45 < 0) {
      operator delete((void *)v44);
    }
    long long v14 = (void *)v41[6];
    long long v41 = v14;
  }
  if (v42 != v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "");
    memset(&__p, 0, sizeof(__p));
    goto LABEL_31;
  }
}

void sub_23F5BE32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v37 - 81) < 0) {
    operator delete(*(void **)(v37 - 104));
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::XmlReadOptions::~XmlReadOptions(RIO_MTLX::XmlReadOptions *this)
{
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__function::__value_func<void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::~__value_func[abi:ne180100]((void *)this + 1);
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::vector<RIO_MTLX::FilePath>::__assign_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(std::vector<std::string> **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  size_t v10 = *a1;
  if (a4 > (v8 - (uint64_t)*a1) >> 5)
  {
    if (v10)
    {
      uint64_t v11 = (void **)a1[1];
      size_t v12 = *a1;
      if (v11 != (void **)v10)
      {
        do
        {
          v11 -= 4;
          uint64_t v21 = v11;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
        }
        while (v11 != (void **)v10);
        size_t v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v13 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    std::vector<RIO_MTLX::FilePath>::__vallocate[abi:ne180100](a1, v14);
    uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v9, a2, a3, (uint64_t)a1[1]);
    goto LABEL_16;
  }
  unint64_t v16 = ((char *)a1[1] - (char *)v10) >> 5;
  if (v16 < a4)
  {
    uint64_t v17 = a2 + 32 * v16;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>((int)&v21, a2, v17, v10);
    uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v9, v17, a3, (uint64_t)a1[1]);
LABEL_16:
    a1[1] = (std::vector<std::string> *)v15;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>((int)&v21, a2, a3, v10);
  std::string::size_type v19 = v18;
  char v20 = (void **)a1[1];
  if (v20 != v18)
  {
    do
    {
      v20 -= 4;
      uint64_t v21 = v20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
    }
    while (v20 != v19);
  }
  a1[1] = (std::vector<std::string> *)v19;
}

void sub_23F5BE640(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23F5BE648(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  std::string::size_type v5 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *std::__function::__value_func<BOOL ()(std::shared_ptr<RIO_MTLX::Element const>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void RIO_MTLX::Element::addChild<RIO_MTLX::Node>(RIO_MTLX::Node *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    BOOL v6 = (char *)RIO_MTLX::Node::CATEGORY(a1);
    uint64_t v7 = v6;
    if (v6[23] >= 0) {
      size_t v8 = v6[23];
    }
    else {
      size_t v8 = *((void *)v6 + 1);
    }
    uint64_t v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if (v15 < 0) {
      uint64_t v9 = (void **)__p[0];
    }
    if (v8)
    {
      if (v7[23] >= 0) {
        size_t v10 = v7;
      }
      else {
        size_t v10 = *(char **)v7;
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)a1, (uint64_t)__p, (uint64_t)&v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    std::string v17 = v16;
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = 0;
    v16.__r_.__value_.__s.__data_[0] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v16, (void *)a1 + 1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>((long long *)&v16, (uint64_t)&v17, a3);
  if (v16.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.__r_.__value_.__l.__size_);
  }
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  uint64_t v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(RIO_MTLX::Node *, uint64_t *))(*(void *)a1 + 40))(a1, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_23F5BE994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>(long long *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x128uLL);
  std::__shared_ptr_emplace<RIO_MTLX::Node>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Node>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_23F5BEA64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<RIO_MTLX::Node>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Node>,0>(void *a1, long long *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F331C30;
  std::allocator<RIO_MTLX::Node>::construct[abi:ne180100]<RIO_MTLX::Node,std::shared_ptr<RIO_MTLX::Element>,std::string &>((uint64_t)&v5, (RIO_MTLX::Node *)(a1 + 3), a2, a3);
  return a1;
}

void sub_23F5BEAD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::Node>::construct[abi:ne180100]<RIO_MTLX::Node,std::shared_ptr<RIO_MTLX::Element>,std::string &>(uint64_t a1, RIO_MTLX::Node *a2, long long *a3, uint64_t a4)
{
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  RIO_MTLX::Node::Node(a2, (uint64_t *)&v4, a4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_23F5BEB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::~__func()
{
}

void *std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F33BDA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F33BDA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, void *a5)
{
  size_t v8 = *(void (**)(uint64_t *, std::string *, void *, void))(a1 + 8);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  unint64_t v14 = v9;
  *a2 = 0;
  a2[1] = 0;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  int v12 = *(_DWORD *)(a3 + 24);
  memset(v10, 0, sizeof(v10));
  std::vector<RIO_MTLX::FilePath>::__init_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v10, *a4, a4[1], (a4[1] - *a4) >> 5);
  v8(&v13, &v11, v10, *a5);
  char v15 = (std::string *)v10;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  char v15 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_23F5BECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  *(void *)(v18 - 56) = v17;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  *(void *)(v18 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*),std::allocator<void (*)(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath,RIO_MTLX::FileSearchPath,RIO_MTLX::XmlReadOptions const*)>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::target_type()
{
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_23F5BEDC8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    long long v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    long long v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        long long v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t RIOPxrUsdUtilsCreateTopLevelEntityFromStage(uint64_t a1)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  *((void *)&v146 + 1) = 0;
  *(void *)&long long v147 = 0;
  *(void *)&long long v146 = (char *)&v146 + 8;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v146, *((char **)&v146 + 1));
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  v111 = 0;
  int64_t v112 = 0;
  unint64_t v113 = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(&v108, v2);
  char v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v108);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v3);
  long long v146 = 0uLL;
  *(void *)&long long v147 = 0;
  *(void *)&long long v144 = 0;
  v143.n128_u64[1] = 0;
  v143.n128_u64[0] = (unint64_t)&v143.n128_u64[1];
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v143, (void *)v143.n128_u64[1]);
  if (SBYTE7(v147) < 0) {
    operator delete((void *)v146);
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v146, (uint64_t *)&v110);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  uint64_t v4 = *((void *)&v146 + 1);
  if (*((void *)&v146 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v146 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unint64_t v137 = 0;
  v135[1] = 0;
  v136 = 0;
  unint64_t v138 = 0;
  std::string::size_type v134 = (uint64_t *)v135;
  v135[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "relocated");
  MEMORY[0x2455CF830](&v131, __p);
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v139);
  EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(EditTarget);
  pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath();
  std::string::size_type v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v139);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot((uint64_t *)&v143, v7);
  uint64_t UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(PseudoRoot);
  uint64_t v11 = *UsdPrimDefaultPredicate;
  uint64_t v10 = UsdPrimDefaultPredicate[1];
  uint64_t v12 = UsdPrimDefaultPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v11 & 0x2000) != 0 || (v10 & 0x2000) == 0))
  {
    v11 |= 0x2000uLL;
    v10 &= ~0x2000uLL;
  }
  *(void *)&long long v140 = v11;
  *((void *)&v140 + 1) = v10;
  *(void *)&long long v141 = v12;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v143, (uint64_t *)&v140, (uint64_t)&v146);
  if ((BYTE8(v144) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v144 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v100 = a1;
  v101 = (uint64_t *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v144);
  if (v143.n128_u64[1]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v143.n128_i64[1]);
  }
  v143.n128_u64[0] = v146;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v143.n128_u32[2], (_DWORD *)&v146 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v143.n128_u32[3], (_DWORD *)&v146 + 3);
  long long v144 = v147;
  uint64_t v145 = v148;
  *(void *)&long long v140 = v149;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v140 + 2, &v150);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v140 + 3, &v151);
  long long v141 = v152;
  uint64_t v142 = v153;
  while (*(_OWORD *)&v143 != v140
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v144, (uint64_t)&v141))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v143, (uint64_t)&v154);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v154, &v127);
    uint64_t v13 = v112;
    if ((unint64_t)v112 >= v113)
    {
      unint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v111, &v127);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v112, &v127);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 1, (_DWORD *)v127.__r_.__value_.__r.__words + 1);
      unint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 8);
    }
    int64_t v112 = v14;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
    if ((BYTE8(v155) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v155 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v155);
    if (*((void *)&v154 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v154 + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v143);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143.n128_i64[1]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v150);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146 + 8);
  char v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v139);
  pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll((uint64_t *)&v143, v15);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v143, (uint64_t)&v127);
  v124.__r_.__value_.__r.__words[0] = v143.n128_u64[1];
  v124.__r_.__value_.__l.__size_ = (std::string::size_type)&v143;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  int v125 = 0;
  __int16 v126 = 0;
  while (*(_OWORD *)&v127.__r_.__value_.__l.__data_ != *(_OWORD *)&v124.__r_.__value_.__l.__data_
       || v127.__r_.__value_.__r.__words[2] != v124.__r_.__value_.__r.__words[2]
       || v128 != v125
       || v129 != v126
       || v130 != HIBYTE(v126))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v127, (uint64_t)&v120);
    IsInstanceable = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsInstanceable((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v120);
    if (IsInstanceable)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(IsInstanceable);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      IsA = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if (IsA)
      {
        uint64_t v18 = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsA);
        uint64_t v20 = *v18;
        uint64_t v19 = v18[1];
        uint64_t v21 = v18[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v20 & 0x2000) != 0 || (v19 & 0x2000) == 0))
        {
          v20 |= 0x2000uLL;
          v19 &= ~0x2000uLL;
        }
        *(void *)&long long v140 = v20;
        *((void *)&v140 + 1) = v19;
        *(void *)&long long v141 = v21;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v120, (uint64_t *)&v140, (uint64_t)&v146);
        *(void *)&long long v140 = v146;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v140 + 2, (_DWORD *)&v146 + 2);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v140 + 3, (_DWORD *)&v146 + 3);
        long long v141 = v147;
        uint64_t v142 = v148;
        *(void *)&long long v154 = v149;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v154 + 2, &v150);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v154 + 3, &v151);
        long long v155 = v152;
        uint64_t v156 = v153;
        if (v140 == v154) {
          int v22 = pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v141, (uint64_t)&v155);
        }
        else {
          int v22 = 0;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v154 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v150);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146 + 8);
        if (v22) {
          pxrInternal__aapl__pxrReserved__::UsdPrim::SetInstanceable((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v120);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships((uint64_t *)&v140, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v120);
    uint64_t v23 = *((void *)&v140 + 1);
    uint64_t v102 = *((void *)&v140 + 1);
    for (uint64_t i = v140; i != v23; i += 32)
    {
      long long v154 = 0uLL;
      *(void *)&long long v155 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      long long v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v154 + 1);
      uint64_t v106 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v154 + 1);
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v154;
      for (j = i; v26 != v25; uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v26 + 8))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v120, &v118);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes((uint64_t *)&v146, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v118);
        uint64_t v27 = v146;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v119, (_DWORD *)v146);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v119 + 1, (_DWORD *)(v27 + 4));
        unint64_t v115 = (void **)&v146;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v115);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v118);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes((uint64_t *)&v146, v26);
        uint64_t v28 = v146;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v118, (_DWORD *)v146);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v118 + 1, (_DWORD *)(v28 + 4));
        unint64_t v115 = (void **)&v146;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v115);
        if (v119 != v118)
        {
          unint64_t v29 = v137;
          if (v137 >= v138)
          {
            uint64_t v31 = (uint64_t)(v137 - (void)v136) >> 5;
            if ((unint64_t)(v31 + 1) >> 59) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v32 = (uint64_t)(v138 - (void)v136) >> 4;
            if (v32 <= v31 + 1) {
              unint64_t v32 = v31 + 1;
            }
            if (v138 - (unint64_t)v136 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            if (v33)
            {
              if (v33 >> 59) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v34 = (char *)operator new(32 * v33);
            }
            else
            {
              unint64_t v34 = 0;
            }
            uint64_t v35 = (uint64_t)&v34[32 * v31];
            std::string v36 = &v34[32 * v33];
            std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(v35, i);
            unint64_t v30 = v35 + 32;
            uint64_t v37 = (char *)v137;
            long long v38 = v136;
            if ((char *)v137 == v136)
            {
              v136 = (char *)v35;
              unint64_t v137 = v35 + 32;
              unint64_t v138 = (unint64_t)v36;
            }
            else
            {
              unint64_t v39 = (unint64_t)v36;
              uint64_t v40 = 0;
              do
              {
                uint64_t v41 = v35 + v40;
                *(_DWORD *)(v41 - 32) = *(_DWORD *)&v37[v40 - 32];
                *(void *)(v41 - 24) = *(void *)&v37[v40 - 24];
                *(void *)&v37[v40 - 24] = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v35 + v40 - 16), &v37[v40 - 16]);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v35 + v40 - 12), &v37[v40 - 12]);
                *(void *)(v41 - 8) = *(void *)&v37[v40 - 8];
                *(void *)&v37[v40 - 8] = 0;
                v40 -= 32;
              }
              while (&v37[v40] != v38);
              uint64_t v37 = v136;
              uint64_t v42 = v137;
              v136 = (char *)(v35 + v40);
              unint64_t v137 = v35 + 32;
              unint64_t v138 = v39;
              while ((char *)v42 != v37)
              {
                v42 -= 32;
                std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::destroy[abi:ne180100]((uint64_t)&v138, v42);
              }
            }
            if (v37) {
              operator delete(v37);
            }
            uint64_t i = j;
          }
          else
          {
            std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(v137, i);
            unint64_t v30 = v29 + 32;
          }
          unint64_t v137 = v30;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v115, &v118);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v115 + 1, (_DWORD *)&v118 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v116, &v119);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v117, (_DWORD *)&v119 + 1);
          std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&v146, i, v26);
          int v43 = std::map<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,std::allocator<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::operator[](&v134, (uint64_t)&v146);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v43, (int *)&v115);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v43 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v43 + 1), &v116);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v43 + 12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
          if ((BYTE8(v147) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v147 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          long long v25 = v106;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
          if (*((void *)&v146 + 1)) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v146 + 1));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v116);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v118);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v119);
      }
      *(void *)&long long v146 = &v154;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
      uint64_t v23 = v102;
    }
    *(void *)&long long v146 = &v140;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
    if ((v123 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v122);
    if (v121) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v121);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v127);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v124.__r_.__value_.__r.__words[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127.__r_.__value_.__r.__words[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v144);
  long long v44 = v136;
  unint64_t v103 = v137;
  if (v136 != (char *)v137)
  {
    do
    {
      v143.n128_u32[0] = *(_DWORD *)v44;
      unint64_t v45 = *((void *)v44 + 1);
      v143.n128_u64[1] = v45;
      if (v45) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v144, (_DWORD *)v44 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v144 + 1, (_DWORD *)v44 + 5);
      uint64_t v46 = *((void *)v44 + 3);
      *((void *)&v144 + 1) = v46;
      if ((v46 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)&v144 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v104 = v44;
      long long v140 = 0uLL;
      *(void *)&long long v141 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      long long v154 = 0uLL;
      *(void *)&long long v155 = 0;
      uint64_t v107 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v140 + 1);
      uint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v140;
      if ((void)v140 != *((void *)&v140 + 1))
      {
        do
        {
          std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&v146, (uint64_t)&v143, v47);
          uint64_t v48 = std::map<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,std::allocator<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::operator[](&v134, (uint64_t)&v146);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v120, v48);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v120 + 1, (_DWORD *)v48 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v121, (_DWORD *)v48 + 2);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v121 + 1, (_DWORD *)v48 + 3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
          if ((BYTE8(v147) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v147 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
          if (*((void *)&v146 + 1)) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v146 + 1));
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes((uint64_t *)&v146, v47);
          uint64_t v49 = v146;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v115, (_DWORD *)v146);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v115 + 1, (_DWORD *)(v49 + 4));
          v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v119, &v121);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v119 + 1, (_DWORD *)&v121 + 1);
          uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v119);
          uint64_t v51 = (char *)String;
          if (*(char *)(String + 23) >= 0) {
            size_t v52 = *(unsigned __int8 *)(String + 23);
          }
          else {
            size_t v52 = *(void *)(String + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v124, v52 + 1);
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v53 = &v124;
          }
          else {
            long long v53 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          if (v52)
          {
            if (v51[23] >= 0) {
              int64x2_t v54 = v51;
            }
            else {
              int64x2_t v54 = *(char **)v51;
            }
            memmove(v53, v54, v52);
          }
          *(_WORD *)((char *)&v53->__r_.__value_.__l.__data_ + v52) = 47;
          if ((v133 & 0x80u) == 0) {
            std::string v55 = __p;
          }
          else {
            std::string v55 = (void **)__p[0];
          }
          if ((v133 & 0x80u) == 0) {
            std::string::size_type v56 = v133;
          }
          else {
            std::string::size_type v56 = (std::string::size_type)__p[1];
          }
          uint64_t v57 = std::string::append(&v124, (const std::string::value_type *)v55, v56);
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v127.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          uint64_t v59 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v47);
          int v60 = *(char *)(v59 + 23);
          if (v60 >= 0) {
            unint64_t v61 = (const std::string::value_type *)v59;
          }
          else {
            unint64_t v61 = *(const std::string::value_type **)v59;
          }
          if (v60 >= 0) {
            std::string::size_type v62 = *(unsigned __int8 *)(v59 + 23);
          }
          else {
            std::string::size_type v62 = *(void *)(v59 + 8);
          }
          long long v63 = std::string::append(&v127, v61, v62);
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          *(void *)&long long v147 = *((void *)&v63->__r_.__value_.__l + 2);
          long long v146 = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v127.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          MEMORY[0x2455CF7A0](&v127, &v146);
          uint64_t v65 = *((void *)&v154 + 1);
          if (*((void *)&v154 + 1) >= (unint64_t)v155)
          {
            uint64_t v66 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v154, &v127);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v154 + 1), &v127);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v65 + 4), (_DWORD *)v127.__r_.__value_.__r.__words + 1);
            uint64_t v66 = v65 + 8;
          }
          *((void *)&v154 + 1) = v66;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
          if (SBYTE7(v147) < 0) {
            operator delete((void *)v146);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v119);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v120);
          uint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v47 + 8);
        }
        while (v47 != v107);
        if ((void)v154 != *((void *)&v154 + 1)) {
          pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets();
        }
      }
      *(void *)&long long v146 = &v154;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
      *(void *)&long long v146 = &v140;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
      if ((BYTE8(v144) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v144 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v144);
      if (v143.n128_u64[1]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v143.n128_i64[1]);
      }
      long long v44 = v104 + 32;
    }
    while (v104 + 32 != (char *)v103);
  }
  long long v67 = v134;
  if (v134 != (uint64_t *)v135)
  {
    do
    {
      LODWORD(v146) = *((_DWORD *)v67 + 8);
      uint64_t v68 = v67[5];
      *((void *)&v146 + 1) = v68;
      if (v68) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v147, (_DWORD *)v67 + 12);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v147 + 1, (_DWORD *)v67 + 13);
      uint64_t v69 = v67[7];
      *((void *)&v147 + 1) = v69;
      if ((v69 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)&v147 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v148, (_DWORD *)v67 + 16);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v148 + 1, (_DWORD *)v67 + 17);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)v67 + 18);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v149 + 1, (_DWORD *)v67 + 19);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v150, (_DWORD *)v67 + 20);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v151, (_DWORD *)v67 + 21);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v127, &v149);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v127.__r_.__value_.__r.__words + 1, (_DWORD *)&v149 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v124, &v150);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v124.__r_.__value_.__r.__words + 1, &v151);
      uint64_t v70 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v139);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v154, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v124, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v131);
      NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v127);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v140, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v154, NameToken);
      pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim((uint64_t *)&v143, v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v140);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v154);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)&v140, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v143);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v154, 0.0, 1.0);
      pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
      if ((BYTE8(v141) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v141 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v141);
      if (*((void *)&v140 + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v140 + 1));
      }
      if ((BYTE8(v144) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v144 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v144);
      if (v143.n128_u64[1]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v143.n128_i64[1]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v124);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
      std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>::~pair((uint64_t)&v146);
      long long v72 = (uint64_t *)v67[1];
      if (v72)
      {
        do
        {
          long long v73 = v72;
          long long v72 = (uint64_t *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          long long v73 = (uint64_t *)v67[2];
          BOOL v74 = *v73 == (void)v67;
          long long v67 = v73;
        }
        while (!v74);
      }
      long long v67 = v73;
    }
    while (v73 != (uint64_t *)v135);
  }
  if ((v131 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((char)v133 < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::destroy(v135[0]);
  *(void *)&long long v146 = &v136;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v139);
  uint64_t v75 = v109;
  if (v109 && atomic_fetch_add_explicit((atomic_uint *volatile)(v109 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  int v76 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v101);
  RootLayer = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&v140, v76);
  pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(RootLayer);
  long long v78 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v114);
  uint64_t v79 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&v154, v78);
  pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v79);
  *(void *)&long long v146 = &unk_26F33BEC0;
  *((void *)&v146 + 1) = tleShouldCopyValue;
  *((void *)&v147 + 1) = &v146;
  v143.n128_u64[0] = (unint64_t)&unk_26F33BF70;
  v143.n128_u64[1] = (unint64_t)tleShouldCopyChildren;
  *((void *)&v144 + 1) = &v143;
  pxrInternal__aapl__pxrReserved__::SdfCopySpec();
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__value_func[abi:ne180100](&v143);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__value_func[abi:ne180100](&v146);
  uint64_t v80 = *((void *)&v154 + 1);
  if (*((void *)&v154 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
  }
  uint64_t v81 = *((void *)&v140 + 1);
  if (*((void *)&v140 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v140 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
  }
  int v82 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v114);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&v146, v82);
  long long v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v146);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData((uint64_t *)&v124, v83);
  uint64_t v84 = *((void *)&v146 + 1);
  if (*((void *)&v146 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v146 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
  }
  *((void *)&v154 + 1) = &unk_26F333523;
  LOBYTE(v154) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v146, "RealityKit");
  pxrInternal__aapl__pxrReserved__::VtDictionary::erase();
  if (SBYTE7(v147) < 0) {
    operator delete((void *)v146);
  }
  std::string::basic_string[abi:ne180100]<0>(&v146, "RealityKit:requireEntityAPI");
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  if (SBYTE7(v147) < 0) {
    operator delete((void *)v146);
  }
  std::string::size_type v85 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v114);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&v146, v85);
  uint64_t v86 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v146);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v86, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v124);
  uint64_t v87 = *((void *)&v146 + 1);
  if (*((void *)&v146 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v146 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
  }
  LODWORD(v146) = 1;
  *((void *)&v146 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)&v147 + 1) = 0;
  long long v88 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v114);
  std::string::basic_string[abi:ne180100]<0>(&v140, "/model");
  MEMORY[0x2455CF7A0](&v127, &v140);
  uint64_t v120 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)&v143, v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v127, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v120);
  LODWORD(v146) = v143.n128_u32[0];
  unint64_t v89 = v143.n128_u64[1];
  v143.n128_u64[1] = 0;
  uint64_t v90 = *((void *)&v146 + 1);
  *((void *)&v146 + 1) = v89;
  if (v90) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v90);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v147, (int *)&v144);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v147 + 4);
  if ((BYTE8(v147) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v147 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *((void *)&v147 + 1) = *((void *)&v144 + 1);
  *((void *)&v144 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v144);
  if (v143.n128_u64[1]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v143.n128_i64[1]);
  }
  if ((v120 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
  if (SBYTE7(v141) < 0) {
    operator delete((void *)v140);
  }
  if (v112 != v111)
  {
    unint64_t v91 = atomic_load(MEMORY[0x263F90528]);
    if (v91)
    {
      MEMORY[0x2455CF810](&v143, "RealityKit:entityName");
      pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v111);
      pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v146, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v91 + 72));
    }
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  markPrimAsEntityProducing((const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v146, 1, 0);
  v92 = *(const void **)(v100 + 24);
  uint64_t v93 = v114;
  uint64_t v114 = 0;
  v143.n128_u64[0] = (unint64_t)v93;
  v143.n128_u64[1] = (unint64_t)v92;
  if (v92) {
    CFRetain(v92);
  }
  uint64_t v94 = *(void *)(v100 + 32);
  *(void *)(v100 + 32) = 0;
  *(void *)&long long v144 = v94;
  __n128 v95 = RIOPxrUsdStageCreate<realityio::RIOPxrUsdStageData>(&v143);
  uint64_t v97 = v96;
  uint64_t v98 = v144;
  *(void *)&long long v144 = 0;
  if (v98) {
    (*(void (**)(uint64_t, __n128))(*(void *)v98 + 8))(v98, v95);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v143.n128_u64[1]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&v143);
  if ((BYTE8(v147) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v147 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
  if (*((void *)&v146 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v146 + 1));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v154);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)&v124, 0);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v110);
  *(void *)&long long v146 = &v111;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v114);
  return v97;
}

void sub_23F5C08A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,atomic_uint *a44,__int16 a45,uint64_t a46,uint64_t a47,atomic_uint *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&STACK[0x248]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v61 - 224));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v61 - 144));
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a57, 0);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a44);
  a61 = &a45;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a48);
  _Unwind_Resume(a1);
}

BOOL tleShouldCopyValue(uint64_t a1, void *a2)
{
  MEMORY[0x2455CF810](&v8, "defaultPrim");
  uint64_t v3 = v8;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (v8 & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL result = 0;
  }
  else
  {
    MEMORY[0x2455CF810](&v7, "subLayerOffsets");
    uint64_t v4 = v7;
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (v7 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL result = 0;
    }
    else
    {
      MEMORY[0x2455CF810](&v6, "subLayers");
      BOOL result = (*a2 & 0xFFFFFFFFFFFFFFF8) != (v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v4 = v7;
    }
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = v8;
  }
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t tleShouldCopyChildren()
{
  return 0;
}

__n128 RIOPxrUsdStageCreate<realityio::RIOPxrUsdStageData>(__n128 *a1)
{
  if (RIOPxrUsdStageGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    __n128 result = *a1;
    *(__n128 *)(Instance + 16) = *a1;
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    unint64_t v4 = a1[1].n128_u64[0];
    a1[1].n128_u64[0] = 0;
    *(void *)(Instance + 32) = v4;
  }
  return result;
}

void realityio::RIOPxrUsdStageData::~RIOPxrUsdStageData(realityio::RIOPxrUsdStageData *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)this + 1);

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsInstanceable(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<BOOL>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 200));
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::SetInstanceable(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (v2) {
    pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<BOOL>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 200));
  }
  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
}

uint64_t *std::map<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,std::allocator<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::operator[](uint64_t **a1, uint64_t a2)
{
  unint64_t v5 = a1 + 1;
  unint64_t v4 = a1[1];
  if (!v4)
  {
    uint64_t v6 = a1 + 1;
LABEL_10:
    uint64_t v8 = (uint64_t *)operator new(0x58uLL);
    *((_DWORD *)v8 + 8) = *(_DWORD *)a2;
    void v8[5] = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 12, (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 13, (_DWORD *)(a2 + 20));
    v8[7] = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 16, (_DWORD *)(a2 + 32));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 17, (_DWORD *)(a2 + 36));
    v8[10] = 0;
    v8[9] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *uint64_t v8 = 0;
    v8[1] = 0;
    _OWORD v8[2] = (uint64_t)v6;
    *unint64_t v5 = v8;
    uint64_t v9 = (uint64_t *)**a1;
    uint64_t v10 = v8;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v8 + 9;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t **)v4;
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(v4 + 4);
      if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100]((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, (pxrInternal__aapl__pxrReserved__::UsdObject *)(v4 + 4)))break; {
      unint64_t v4 = *v6;
      }
      unint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](v7, (pxrInternal__aapl__pxrReserved__::UsdObject *)a2))break; {
    unint64_t v5 = v6 + 1;
    }
    unint64_t v4 = v6[1];
    if (!v4) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = *v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v8 + 9;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  return a1;
}

uint64_t makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair::~toFromRootPair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  return a1;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[8 * v4];
  std::string v16 = &v10[8 * v9];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 1, a2 + 1);
  char v15 = v14 + 8;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v13);
  return v11;
}

void sub_23F5C1770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataTypedValue<BOOL>::StoreValue(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(unsigned char **)(a1 + 8) = *(unsigned char *)v2;
    return 1;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

{
  uint64_t result;

  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a2))
  {
    **(unsigned char **)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<BOOL>(a2);
    return 1;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<BOOL>(void *a1)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::VtValue::_GetMutable<BOOL>(a1);
  int v3 = *v2;
  unsigned char *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3 != 0;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_GetMutable<BOOL>(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<BOOL>::GetValue(uint64_t a1, uint64_t a2)
{
  char v3 = **(unsigned char **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = &unk_26F333523;
  *(unsigned char *)a2 = v3;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<BOOL>::IsEqual(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a2);
  if (result)
  {
    uint64_t v5 = *((void *)v2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *(unsigned __int8 *)v2 == **(unsigned __int8 **)(a1 + 8);
  }
  return result;
}

_DWORD *std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](pxrInternal__aapl__pxrReserved__::UsdObject *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  if (pxrInternal__aapl__pxrReserved__::operator<(a1, a2)) {
    return 1;
  }
  if (pxrInternal__aapl__pxrReserved__::operator<(a2, a1)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)a1 + 4, (void *)a2 + 4);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<(pxrInternal__aapl__pxrReserved__::UsdObject *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v6);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v5);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v6, &v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  return v3;
}

void sub_23F5C1CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), a3 + 1);
  return a1;
}

void std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath>,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>>>::destroy(a1[1]);
    std::pair<std::pair<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::SdfPath> const,makeReferencable(std::string const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> &)::toFromRootPair>::~pair((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F33BEC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F33BEC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, void *a10)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void, void))(a1 + 8))(*a2, a3, a4, a5, *a6, a7, a8, *a9, *a10);
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F33BF70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F33BF70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, unsigned __int8 *a8, void *a9, void *a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void, void, void))(a1 + 8))(a2, a3, a4, *a5, a6, a7, *a8, *a9, *a10);
}

uint64_t std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::allocator<BOOL (*)(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(RIO_MTLX *a1)
{
  v2[0] = 0;
  v2[1] = 0;
  uint64_t v1 = RIO_MTLX::EMPTY_STRING(a1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Document,std::allocator<RIO_MTLX::Document>,std::shared_ptr<RIO_MTLX::Element>,std::string const&,void>((uint64_t)&v3, v2, (long long *)v1);
}

void sub_23F5C21B0(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F5C21C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11) {
    JUMPOUT(0x23F5C21C0);
  }
  JUMPOUT(0x23F5C21BCLL);
}

void RIO_MTLX::Document::Document(RIO_MTLX::Document *a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (long long *)RIO_MTLX::Document::CATEGORY(a1);
  RIO_MTLX::GraphElement::GraphElement(a1, &v7, v6, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F33C020;
  operator new();
}

void sub_23F5C22C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  RIO_MTLX::Element::~Element(v10);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Document::~Document(RIO_MTLX::Document *this)
{
  *(void *)this = &unk_26F33C020;
  std::unique_ptr<RIO_MTLX::Document::Cache>::reset[abi:ne180100]((uint64_t *)this + 34);

  RIO_MTLX::Element::~Element(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F33C020;
  std::unique_ptr<RIO_MTLX::Document::Cache>::reset[abi:ne180100]((uint64_t *)this + 34);
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void RIO_MTLX::Document::initialize(RIO_MTLX::Document *this)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v9, (void *)this + 1);
  uint64_t v3 = v9;
  uint64_t v2 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 3std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v3;
  *((void *)this + 31) = v2;
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v2 = v10;
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  RIO_MTLX::Element::getDocument(this, &v9);
  uint64_t v5 = (void *)*((void *)this + 34);
  uint64_t v7 = v9;
  uint64_t v6 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)v5[1];
  *uint64_t v5 = v7;
  v5[1] = v6;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  RIO_MTLX::Element::clearContent(this);
  RIO_MTLX::InterfaceElement::setVersionIntegers(this, 1, 38);
}

std::string *RIO_MTLX::InterfaceElement::addOutput@<X0>(RIO_MTLX::Output *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  RIO_MTLX::Element::addChild<RIO_MTLX::Output>(a1, a2, a4);
  uint64_t v6 = (uint64_t *)*a4;
  uint64_t v8 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v7);
  return RIO_MTLX::Element::setAttribute(v6, v8, a3);
}

void sub_23F5C24B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Document::importLibrary(uint64_t a1, RIO_MTLX::Element **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *((void *)v2 + 17);
    uint64_t v4 = *((void *)v2 + 18);
    if (v3 != v4)
    {
      uint64_t v7 = (void *)(a1 + 96);
      while (1)
      {
        uint64_t v9 = *(const std::string **)v3;
        uint64_t v8 = *(std::__shared_weak_count **)(v3 + 8);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RIO_MTLX::Element::getQualifiedName((uint64_t)v9, (std::string *)&v9[2], &__p);
        uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v7, (unsigned __int8 *)&__p);
        if (!v10) {
          break;
        }
        uint64_t v11 = *((void *)v10 + 5);
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 + 6);
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v11) {
          goto LABEL_12;
        }
LABEL_44:
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v8) {
            goto LABEL_49;
          }
LABEL_48:
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          goto LABEL_49;
        }
        if (v8) {
          goto LABEL_48;
        }
LABEL_49:
        v3 += 16;
        if (v3 == v4) {
          return;
        }
      }
      uint64_t v12 = 0;
LABEL_12:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v49 = __p;
      }
      RIO_MTLX::Element::addChildOfCategory(a1, (uint64_t)&v9[1], (uint64_t)&v49, &v50);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = v50;
      uint64_t v47 = v9;
      uint64_t v48 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::copyContentFrom((uint64_t)v13, &v47);
      unint64_t v14 = (RIO_MTLX::Element *)v48;
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      char v15 = v50;
      std::string v16 = (unsigned __int8 *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(v14);
      uint64_t v17 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v15[6].__r_.__value_.__r.__words[2], v16);
      if (!v17)
      {
        uint64_t v18 = *a2;
        uint64_t v19 = (unsigned __int8 *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(0);
        uint64_t v17 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v18 + 20, v19);
        if (v17)
        {
          uint64_t v20 = v50;
          FilePrefix = RIO_MTLX::Element::getFilePrefix(*a2);
          int v22 = (long long *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE((RIO_MTLX::Element *)FilePrefix);
          uint64_t v17 = RIO_MTLX::Element::setAttribute((uint64_t *)v20, v22, (const std::string *)FilePrefix);
        }
      }
      uint64_t v23 = v50;
      int v24 = (unsigned __int8 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE((RIO_MTLX::Element *)v17);
      long long v25 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v23[6].__r_.__value_.__r.__words[2], v24);
      if (!v25)
      {
        uint64_t v26 = *a2;
        uint64_t v27 = (unsigned __int8 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(0);
        long long v25 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v26 + 20, v27);
        if (v25)
        {
          uint64_t v28 = v50;
          GeomPrefix = RIO_MTLX::Element::getGeomPrefix(*a2);
          unint64_t v30 = (long long *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE((RIO_MTLX::Element *)GeomPrefix);
          long long v25 = RIO_MTLX::Element::setAttribute((uint64_t *)v28, v30, (const std::string *)GeomPrefix);
        }
      }
      uint64_t v31 = v50;
      unint64_t v32 = (unsigned __int8 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE((RIO_MTLX::Element *)v25);
      unint64_t v33 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v31[6].__r_.__value_.__r.__words[2], v32);
      if (!v33)
      {
        unint64_t v34 = *a2;
        uint64_t v35 = (unsigned __int8 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(0);
        unint64_t v33 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v34 + 20, v35);
        if (v33)
        {
          std::string v36 = v50;
          ColorSpace = RIO_MTLX::Element::getColorSpace(*a2);
          long long v38 = (long long *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE((RIO_MTLX::Element *)ColorSpace);
          unint64_t v33 = RIO_MTLX::Element::setAttribute((uint64_t *)v36, v38, (const std::string *)ColorSpace);
        }
      }
      unint64_t v39 = v50;
      uint64_t v40 = (unsigned __int8 *)RIO_MTLX::Element::NAMESPACE_ATTRIBUTE((RIO_MTLX::Element *)v33);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v39[6].__r_.__value_.__r.__words[2], v40))
      {
        uint64_t v41 = *a2;
        uint64_t v42 = (unsigned __int8 *)RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(0);
        if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v41 + 20, v42))
        {
          int v43 = v50;
          Namespace = RIO_MTLX::Element::getNamespace(*a2);
          unint64_t v45 = (long long *)RIO_MTLX::Element::NAMESPACE_ATTRIBUTE((RIO_MTLX::Element *)Namespace);
          RIO_MTLX::Element::setAttribute((uint64_t *)v43, v45, (const std::string *)Namespace);
        }
      }
      if (SHIBYTE(v50[3].__r_.__value_.__r.__words[2]) < 0)
      {
        if (v50[3].__r_.__value_.__l.__size_) {
          goto LABEL_42;
        }
      }
      else if (*((unsigned char *)&v50[3].__r_.__value_.__s + 23))
      {
        goto LABEL_42;
      }
      uint64_t v46 = *a2;
      if (*((char *)*a2 + 95) < 0)
      {
        if (!*((void *)v46 + 10)) {
          goto LABEL_42;
        }
      }
      else if (!*((unsigned char *)*a2 + 95))
      {
LABEL_42:
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        goto LABEL_44;
      }
      std::string::operator=(v50 + 3, (const std::string *)v46 + 3);
      goto LABEL_42;
    }
  }
}

void sub_23F5C27E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *RIO_MTLX::Element::getColorSpace(RIO_MTLX::Element *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(this);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::Document::getReferencedSourceUris(RIO_MTLX::Document *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  RIO_MTLX::Element::traverseTree(this, (uint64_t)&v13);
  *((void *)&v17 + 1) = 0;
  uint64_t v9 = v13;
  uint64_t v10 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v11, 0, sizeof(v11));
  uint64_t v3 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v11, v15, v16, 0xAAAAAAAAAAAAAAABLL * (v16 - v15));
  long long v12 = v17;
  RIO_MTLX::NULL_TREE_ITERATOR(v3);
  long long v6 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  memset(v7, 0, sizeof(v7));
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v7, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v8 = xmmword_268C3FDB0;
  while (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v9, (uint64_t)&v6))
  {
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(v4 + 95) < 0)
    {
      if (!*(void *)(v4 + 80)) {
        goto LABEL_14;
      }
LABEL_13:
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, (const void **)(v4 + 72), v4 + 72);
      goto LABEL_14;
    }
    if (*(unsigned char *)(v4 + 95)) {
      goto LABEL_13;
    }
LABEL_14:
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    RIO_MTLX::TreeIterator::operator++(&v9);
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v6);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v9);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v13);
}

void sub_23F5C2A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)va);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)(v10 - 88));
  std::__tree<std::string>::destroy(v9, *(char **)(v9 + 8));
  _Unwind_Resume(a1);
}

unint64_t RIO_MTLX::Document::getVersionIntegers(RIO_MTLX::Document *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(this);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2))return 0x2600000001; {

  }
  return RIO_MTLX::InterfaceElement::getVersionIntegers(this);
}

char *RIO_MTLX::Document::getMatchingPorts@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  RIO_MTLX::Document::Cache::refresh(*(RIO_MTLX::Document::Cache **)(a1 + 272));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__equal_range_multi<std::string>((void *)(*(void *)(a1 + 272) + 88), a2);
  uint64_t v7 = result;
  uint64_t v9 = v8;
  while (v7 != v9)
  {
    uint64_t result = (char *)std::vector<std::shared_ptr<RIO_MTLX::PortElement>>::push_back[abi:ne180100](a3, (long long *)(v7 + 40));
    uint64_t v7 = *(char **)v7;
  }
  return result;
}

void sub_23F5C2B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Document::Cache::refresh(RIO_MTLX::Document::Cache *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (!*((unsigned char *)v1 + 80))
  {
    uint64_t v120 = v2;
    long long v132 = (unint64_t *)((char *)v1 + 112);
    if (*((void *)v1 + 14))
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*((void **)v1 + 13));
      *((void *)v1 + 13) = 0;
      uint64_t v3 = *((void *)v1 + 12);
      if (v3)
      {
        for (uint64_t i = 0; i != v3; ++i)
          *(void *)(*((void *)v1 + 11) + 8 * i) = 0;
      }
      *long long v132 = 0;
    }
    uint64_t v131 = (unint64_t *)((char *)v1 + 152);
    if (*((void *)v1 + 19))
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*((void **)v1 + 18));
      *((void *)v1 + 18) = 0;
      uint64_t v5 = *((void *)v1 + 17);
      if (v5)
      {
        for (uint64_t j = 0; j != v5; ++j)
          *(void *)(*((void *)v1 + 16) + 8 * j) = 0;
      }
      unint64_t *v131 = 0;
    }
    uint64_t v122 = (void *)((char *)v1 + 192);
    std::string v124 = (void *)((char *)v1 + 168);
    if (*((void *)v1 + 24))
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*((void **)v1 + 23));
      *((void *)v1 + 23) = 0;
      uint64_t v7 = *((void *)v1 + 22);
      if (v7)
      {
        for (uint64_t k = 0; k != v7; ++k)
          *(void *)(*v124 + 8 * k) = 0;
      }
      void *v122 = 0;
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v1 + 1);
    if (v9)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v9);
      uint64_t v10 = v9;
      if (v9) {
        uint64_t v9 = *(std::__shared_weak_count **)v1;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)v9, (uint64_t)&v155);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    *((void *)&v159 + 1) = 0;
    uint64_t v151 = v155;
    long long v152 = v156;
    if (v156) {
      atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(v153, 0, sizeof(v153));
    uint64_t v11 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v153, v157, v158, 0xAAAAAAAAAAAAAAABLL * (v158 - v157));
    long long v154 = v159;
    RIO_MTLX::NULL_TREE_ITERATOR(v11);
    long long v148 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
    if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
    }
    memset(v149, 0, sizeof(v149));
    std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v149, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
    long long v150 = xmmword_268C3FDB0;
    int v125 = (unsigned __int8 ***)((char *)v1 + 144);
    __int16 v126 = (unsigned __int8 ***)((char *)v1 + 104);
    long long v139 = (float *)((char *)v1 + 160);
    long long v140 = (float *)((char *)v1 + 120);
    std::string::size_type v121 = (std::string::size_type)v1 + 184;
    while (1)
    {
      BOOL v12 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v151, (uint64_t)&v148);
      if (v12)
      {
        RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v148);
        RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v151);
        RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v155);
        *((unsigned char *)v1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 1;
        uint64_t v2 = v120;
        goto LABEL_284;
      }
      uint64_t v13 = v151;
      unint64_t v14 = v152;
      if (v152) {
        atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v15 = (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v12);
      std::string v16 = (RIO_MTLX::NodeDef *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v13 + 160), v15);
      if (v16)
      {
        long long v17 = (RIO_MTLX::NodeDef *)((char *)v16 + 40);
      }
      else
      {
        std::string v16 = (RIO_MTLX::NodeDef *)RIO_MTLX::EMPTY_STRING(0);
        long long v17 = v16;
      }
      uint64_t v18 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(v16);
      uint64_t v19 = (RIO_MTLX::InterfaceElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v13 + 160), v18);
      if (v19)
      {
        uint64_t v20 = (RIO_MTLX::InterfaceElement *)((char *)v19 + 40);
      }
      else
      {
        uint64_t v19 = (RIO_MTLX::InterfaceElement *)RIO_MTLX::EMPTY_STRING(0);
        uint64_t v20 = v19;
      }
      uint64_t v21 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(v19);
      int v22 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v13 + 160), v21);
      uint64_t v23 = v22 ? (uint64_t *)(v22 + 40) : RIO_MTLX::EMPTY_STRING(0);
      if (*((char *)v17 + 23) < 0)
      {
        if (!*((void *)v17 + 1)) {
          goto LABEL_147;
        }
      }
      else if (!*((unsigned char *)v17 + 23))
      {
        goto LABEL_147;
      }
      RIO_MTLX::Element::asA<RIO_MTLX::PortElement>(v13, &v146);
      if (v146) {
        break;
      }
LABEL_145:
      if (v147) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v147);
      }
LABEL_147:
      if (*((char *)v20 + 23) < 0)
      {
        if (!*((void *)v20 + 1)) {
          goto LABEL_253;
        }
      }
      else if (!*((unsigned char *)v20 + 23))
      {
        goto LABEL_253;
      }
      RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v13, &v146);
      if (v146)
      {
        RIO_MTLX::Element::getQualifiedName(v146, (std::string *)v20, &__p);
        long long v67 = operator new(0x38uLL);
        uint64_t v68 = v146;
        uint64_t v69 = v147;
        *((void *)v67 + 4) = *((void *)&__p.__r_.__value_.__l + 2);
        *((void *)v67 + 5) = v68;
        v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
        v160.__r_.__value_.__l.__size_ = (std::string::size_type)v125;
        *(void *)long long v67 = 0;
        *((void *)v67 + 1) = 0;
        *((_OWORD *)v67 + 1) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        memset(&__p, 0, sizeof(__p));
        *((void *)v67 + 6) = v69;
        if (v69) {
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v160.__r_.__value_.__s.__data_[16] = 1;
        *((void *)v67 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v131, (uint64_t)v67 + 16);
        unint64_t v138 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v131, (uint64_t)v67 + 16);
        *((void *)v67 + 1) = v138;
        unint64_t v70 = *((void *)v1 + 17);
        float v71 = (float)(unint64_t)(*((void *)v1 + 19) + 1);
        float v72 = *((float *)v1 + 40);
        if (!v70 || (float)(v72 * (float)v70) < v71)
        {
          BOOL v73 = v70 < 3 || (v70 & (v70 - 1)) != 0;
          unint64_t v74 = v73 | (2 * v70);
          unint64_t v75 = vcvtps_u32_f32(v71 / v72);
          if (v74 <= v75) {
            int8x8_t prime = (int8x8_t)v75;
          }
          else {
            int8x8_t prime = (int8x8_t)v74;
          }
          v136 = v14;
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            unint64_t v70 = *((void *)v1 + 17);
          }
          uint64_t v134 = v13;
          int v128 = v23;
          if (*(void *)&prime > v70) {
            goto LABEL_167;
          }
          if (*(void *)&prime < v70)
          {
            unint64_t v84 = vcvtps_u32_f32((float)*v131 / *v139);
            if (v70 < 3 || (uint8x8_t v85 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v85.i16[0] = vaddlv_u8(v85), v85.u32[0] > 1uLL))
            {
              unint64_t v84 = std::__next_prime(v84);
            }
            else
            {
              uint64_t v86 = 1 << -(char)__clz(v84 - 1);
              if (v84 >= 2) {
                unint64_t v84 = v86;
              }
            }
            if (*(void *)&prime <= v84) {
              int8x8_t prime = (int8x8_t)v84;
            }
            if (*(void *)&prime < v70)
            {
              if (prime)
              {
LABEL_167:
                if (*(void *)&prime >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                int v77 = operator new(8 * *(void *)&prime);
                long long v78 = (void *)*((void *)v1 + 16);
                *((void *)v1 + 16) = v77;
                if (v78) {
                  operator delete(v78);
                }
                uint64_t v79 = 0;
                *((int8x8_t *)v1 + 17) = prime;
                do
                  *(void *)(*((void *)v1 + 16) + 8 * v79++) = 0;
                while (*(void *)&prime != v79);
                uint64_t v80 = *v125;
                if (*v125)
                {
                  unint64_t v81 = (unint64_t)v80[1];
                  uint8x8_t v82 = (uint8x8_t)vcnt_s8(prime);
                  v82.i16[0] = vaddlv_u8(v82);
                  unint64_t v83 = v82.u32[0];
                  if (v82.u32[0] > 1uLL)
                  {
                    if (v81 >= *(void *)&prime) {
                      v81 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v81 &= *(void *)&prime - 1;
                  }
                  *(void *)(*((void *)v1 + 16) + 8 * v81) = v125;
                  uint64_t v87 = *v80;
                  if (*v80)
                  {
                    uint64_t v88 = *(void *)&prime - 1;
                    unint64_t v130 = v82.u32[0];
                    do
                    {
                      unint64_t v89 = *((void *)v87 + 1);
                      if (v83 > 1)
                      {
                        if (v89 >= *(void *)&prime) {
                          v89 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v89 &= v88;
                      }
                      if (v89 == v81)
                      {
                        uint64_t v80 = (unsigned __int8 **)v87;
                      }
                      else
                      {
                        uint64_t v90 = *((void *)v1 + 16);
                        if (*(void *)(v90 + 8 * v89))
                        {
                          unint64_t v91 = *(unsigned __int8 **)v87;
                          if (*(void *)v87)
                          {
                            v92 = v1;
                            uint64_t v93 = v88;
                            uint64_t v94 = v87;
                            while (1)
                            {
                              int v95 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v139, v87 + 16, v91 + 16);
                              uint64_t v96 = *(unsigned __int8 **)v94;
                              if (!v95) {
                                break;
                              }
                              unint64_t v91 = *(unsigned __int8 **)v96;
                              uint64_t v94 = *(unsigned __int8 **)v94;
                              if (!*(void *)v96) {
                                goto LABEL_200;
                              }
                            }
                            unint64_t v91 = *(unsigned __int8 **)v94;
                            uint64_t v96 = v94;
LABEL_200:
                            uint64_t v88 = v93;
                            uint64_t v1 = v92;
                            unint64_t v83 = v130;
                          }
                          else
                          {
                            uint64_t v96 = v87;
                          }
                          *uint64_t v80 = v91;
                          *(void *)uint64_t v96 = **(void **)(*((void *)v1 + 16) + 8 * v89);
                          **(void **)(*((void *)v1 + 16) + 8 * v89) = v87;
                        }
                        else
                        {
                          *(void *)(v90 + 8 * v89) = v80;
                          uint64_t v80 = (unsigned __int8 **)v87;
                          unint64_t v81 = v89;
                        }
                      }
                      uint64_t v87 = *v80;
                    }
                    while (*v80);
                  }
                }
              }
              else
              {
                uint64_t v97 = (void *)*((void *)v1 + 16);
                *((void *)v1 + 16) = 0;
                if (v97) {
                  operator delete(v97);
                }
                *((void *)v1 + 17) = 0;
              }
            }
          }
          unint64_t v70 = *((void *)v1 + 17);
          uint64_t v13 = v134;
          unint64_t v14 = v136;
          uint64_t v23 = v128;
        }
        uint8x8_t v98 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
        v98.i16[0] = vaddlv_u8(v98);
        unint64_t v99 = v98.u32[0];
        if (v98.u32[0] > 1uLL)
        {
          unint64_t v100 = v138;
          if (v70 <= v138) {
            unint64_t v100 = v138 % v70;
          }
        }
        else
        {
          unint64_t v100 = (v70 - 1) & v138;
        }
        v101 = *(unsigned __int8 **)(*((void *)v1 + 16) + 8 * v100);
        if (v101)
        {
          uint64_t v102 = *(unsigned __int8 **)v101;
          if (*(void *)v101)
          {
            int v103 = 0;
            do
            {
              unint64_t v104 = *((void *)v102 + 1);
              if (v99 > 1)
              {
                unint64_t v105 = *((void *)v102 + 1);
                if (v104 >= v70) {
                  unint64_t v105 = v104 % v70;
                }
              }
              else
              {
                unint64_t v105 = v104 & (v70 - 1);
              }
              if (v105 != v100) {
                break;
              }
              int v106 = v104 == v138
                   ? std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v139, v102 + 16, (unsigned __int8 *)v67 + 16): 0;
              if (v103 & (v106 ^ 1)) {
                break;
              }
              v103 |= v106;
              v101 = *(unsigned __int8 **)v101;
              uint64_t v102 = *(unsigned __int8 **)v101;
            }
            while (*(void *)v101);
            unint64_t v70 = *((void *)v1 + 17);
            uint8x8_t v107 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
            v107.i16[0] = vaddlv_u8(v107);
            unint64_t v99 = v107.u32[0];
          }
        }
        unint64_t v108 = *((void *)v67 + 1);
        if (v99 > 1)
        {
          if (v108 >= v70) {
            v108 %= v70;
          }
        }
        else
        {
          v108 &= v70 - 1;
        }
        if (v101)
        {
          *(void *)long long v67 = *(void *)v101;
          *(void *)v101 = v67;
          if (!*(void *)v67) {
            goto LABEL_249;
          }
          unint64_t v109 = *(void *)(*(void *)v67 + 8);
          if (v99 > 1)
          {
            if (v109 >= v70) {
              v109 %= v70;
            }
          }
          else
          {
            v109 &= v70 - 1;
          }
          if (v109 == v108) {
            goto LABEL_249;
          }
LABEL_248:
          *(void *)(*((void *)v1 + 16) + 8 * v109) = v67;
        }
        else
        {
          *(void *)long long v67 = *((void *)v1 + 18);
          *((void *)v1 + 18) = v67;
          *(void *)(*((void *)v1 + 16) + 8 * v108) = v125;
          if (*(void *)v67)
          {
            unint64_t v109 = *(void *)(*(void *)v67 + 8);
            if (v99 > 1)
            {
              if (v109 >= v70) {
                v109 %= v70;
              }
            }
            else
            {
              v109 &= v70 - 1;
            }
            goto LABEL_248;
          }
        }
LABEL_249:
        ++*v131;
        v160.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v160);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (v147) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v147);
      }
LABEL_253:
      if (*((char *)v23 + 23) < 0)
      {
        if (!v23[1]) {
          goto LABEL_280;
        }
      }
      else if (!*((unsigned char *)v23 + 23))
      {
        goto LABEL_280;
      }
      RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v13, &v146);
      uint64_t v111 = v146;
      if (v146)
      {
        int64_t v112 = RIO_MTLX::EMPTY_STRING(v110);
        if (RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v111, (unsigned __int8 *)v112))
        {
          RIO_MTLX::Element::getQualifiedName(v146, (std::string *)v23, &v160);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::__emplace_multi<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>&>((uint64_t)v124, (uint64_t)&v160, &v146);
          if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v160.__r_.__value_.__l.__data_);
          }
        }
        RIO_MTLX::Element::asA<RIO_MTLX::Implementation>(v146, &v143);
        if (v143)
        {
          NodeGraph = RIO_MTLX::Implementation::getNodeGraph(v143);
          uint64_t v114 = (unsigned __int8 *)NodeGraph;
          uint64_t v115 = *((unsigned __int8 *)NodeGraph + 23);
          if ((v115 & 0x80u) != 0) {
            uint64_t v115 = NodeGraph[1];
          }
          if (v115)
          {
            RIO_MTLX::Element::getDocument(v143, &v160);
            RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>((uint64_t)v160.__r_.__value_.__l.__data_, v114, &v141);
            if (v160.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v160.__r_.__value_.__l.__size_);
            }
            if (v141)
            {
              RIO_MTLX::Element::getQualifiedName(v146, (std::string *)v23, &__p);
              int v116 = operator new(0x38uLL);
              uint64_t v117 = (uint64_t)v116;
              uint64_t v119 = v141;
              uint64_t v118 = v142;
              v116[4] = *((void *)&__p.__r_.__value_.__l + 2);
              v116[5] = v119;
              v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
              v160.__r_.__value_.__l.__size_ = v121;
              void *v116 = 0;
              v116[1] = 0;
              *((_OWORD *)v116 + 1) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              memset(&__p, 0, sizeof(__p));
              v116[6] = v118;
              if (v118) {
                atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v160.__r_.__value_.__s.__data_[16] = 1;
              v116[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v122, (uint64_t)(v116 + 2));
              std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi((uint64_t)v124, v117);
              v160.__r_.__value_.__r.__words[0] = 0;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v160);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            if (v142) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v142);
            }
          }
          else
          {
            RIO_MTLX::Element::getQualifiedName(v146, (std::string *)v23, &v160);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::__emplace_multi<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>&>((uint64_t)v124, (uint64_t)&v160, &v146);
            if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v160.__r_.__value_.__l.__data_);
            }
          }
        }
        if (v144) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v144);
        }
      }
      if (v147) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v147);
      }
LABEL_280:
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      RIO_MTLX::TreeIterator::operator++(&v151);
    }
    size_t v135 = v14;
    RIO_MTLX::Element::getQualifiedName(v146, (std::string *)v17, &__p);
    int v24 = operator new(0x38uLL);
    unsigned __int8 v129 = v20;
    uint64_t v25 = v146;
    uint64_t v26 = v147;
    *((void *)v24 + 4) = *((void *)&__p.__r_.__value_.__l + 2);
    *((void *)v24 + 5) = v25;
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v160.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
    *(void *)int v24 = 0;
    *((void *)v24 + 1) = 0;
    *((_OWORD *)v24 + 1) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    memset(&__p, 0, sizeof(__p));
    *((void *)v24 + 6) = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v160.__r_.__value_.__s.__data_[16] = 1;
    *((void *)v24 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v132, (uint64_t)v24 + 16);
    unint64_t v137 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v132, (uint64_t)v24 + 16);
    *((void *)v24 + 1) = v137;
    unint64_t v27 = *((void *)v1 + 12);
    float v28 = (float)(unint64_t)(*((void *)v1 + 14) + 1);
    float v29 = *((float *)v1 + 30);
    if (v27 && (float)(v29 * (float)v27) >= v28)
    {
LABEL_106:
      uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v55.i16[0] = vaddlv_u8(v55);
      unint64_t v56 = v55.u32[0];
      if (v55.u32[0] > 1uLL)
      {
        unint64_t v57 = v137;
        if (v27 <= v137) {
          unint64_t v57 = v137 % v27;
        }
      }
      else
      {
        unint64_t v57 = (v27 - 1) & v137;
      }
      long long v58 = *(unsigned __int8 **)(*((void *)v1 + 11) + 8 * v57);
      if (v58)
      {
        uint64_t v59 = *(unsigned __int8 **)v58;
        if (*(void *)v58)
        {
          int v60 = 0;
          do
          {
            unint64_t v61 = *((void *)v59 + 1);
            if (v56 > 1)
            {
              unint64_t v62 = *((void *)v59 + 1);
              if (v61 >= v27) {
                unint64_t v62 = v61 % v27;
              }
            }
            else
            {
              unint64_t v62 = v61 & (v27 - 1);
            }
            if (v62 != v57) {
              break;
            }
            int v63 = v61 == v137
                ? std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v140, v59 + 16, (unsigned __int8 *)v24 + 16): 0;
            if (v60 & (v63 ^ 1)) {
              break;
            }
            v60 |= v63;
            long long v58 = *(unsigned __int8 **)v58;
            uint64_t v59 = *(unsigned __int8 **)v58;
          }
          while (*(void *)v58);
          unint64_t v27 = *((void *)v1 + 12);
          uint8x8_t v64 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
          v64.i16[0] = vaddlv_u8(v64);
          unint64_t v56 = v64.u32[0];
        }
      }
      unint64_t v65 = *((void *)v24 + 1);
      if (v56 > 1)
      {
        if (v65 >= v27) {
          v65 %= v27;
        }
      }
      else
      {
        v65 &= v27 - 1;
      }
      if (v58)
      {
        *(void *)int v24 = *(void *)v58;
        *(void *)long long v58 = v24;
        uint64_t v20 = v129;
        if (!*(void *)v24) {
          goto LABEL_142;
        }
        unint64_t v66 = *(void *)(*(void *)v24 + 8);
        if (v56 > 1)
        {
          if (v66 >= v27) {
            v66 %= v27;
          }
        }
        else
        {
          v66 &= v27 - 1;
        }
        if (v66 == v65) {
          goto LABEL_142;
        }
      }
      else
      {
        *(void *)int v24 = *((void *)v1 + 13);
        *((void *)v1 + 13) = v24;
        *(void *)(*((void *)v1 + 11) + 8 * v65) = v126;
        uint64_t v20 = v129;
        if (!*(void *)v24)
        {
LABEL_142:
          ++*v132;
          v160.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v160);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          unint64_t v14 = v135;
          goto LABEL_145;
        }
        unint64_t v66 = *(void *)(*(void *)v24 + 8);
        if (v56 > 1)
        {
          if (v66 >= v27) {
            v66 %= v27;
          }
        }
        else
        {
          v66 &= v27 - 1;
        }
      }
      *(void *)(*((void *)v1 + 11) + 8 * v66) = v24;
      goto LABEL_142;
    }
    BOOL v30 = v27 < 3 || (v27 & (v27 - 1)) != 0;
    unint64_t v31 = v30 | (2 * v27);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      int8x8_t v33 = (int8x8_t)v32;
    }
    else {
      int8x8_t v33 = (int8x8_t)v31;
    }
    if (*(void *)&v33 == 1)
    {
      int8x8_t v33 = (int8x8_t)2;
    }
    else if ((*(void *)&v33 & (*(void *)&v33 - 1)) != 0)
    {
      int8x8_t v33 = (int8x8_t)std::__next_prime(*(void *)&v33);
      unint64_t v27 = *((void *)v1 + 12);
    }
    uint64_t v133 = v13;
    std::string v127 = v23;
    if (*(void *)&v33 > v27) {
      goto LABEL_60;
    }
    if (*(void *)&v33 < v27)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*v132 / *v140);
      if (v27 < 3 || (uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (*(void *)&v33 <= v41) {
        int8x8_t v33 = (int8x8_t)v41;
      }
      if (*(void *)&v33 < v27)
      {
        if (v33)
        {
LABEL_60:
          if (*(void *)&v33 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v34 = operator new(8 * *(void *)&v33);
          uint64_t v35 = (void *)*((void *)v1 + 11);
          *((void *)v1 + std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((void *)this + 11) = v34;
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = 0;
          *((int8x8_t *)v1 + 12) = v33;
          do
            *(void *)(*((void *)v1 + 11) + 8 * v36++) = 0;
          while (*(void *)&v33 != v36);
          uint64_t v37 = *v126;
          if (*v126)
          {
            unint64_t v38 = (unint64_t)v37[1];
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(v33);
            v39.i16[0] = vaddlv_u8(v39);
            unint64_t v40 = v39.u32[0];
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&v33) {
                v38 %= *(void *)&v33;
              }
            }
            else
            {
              v38 &= *(void *)&v33 - 1;
            }
            *(void *)(*((void *)v1 + 11) + 8 * v38) = v126;
            long long v44 = *v37;
            if (*v37)
            {
              uint64_t v45 = *(void *)&v33 - 1;
              unint64_t v123 = v39.u32[0];
              do
              {
                unint64_t v46 = *((void *)v44 + 1);
                if (v40 > 1)
                {
                  if (v46 >= *(void *)&v33) {
                    v46 %= *(void *)&v33;
                  }
                }
                else
                {
                  v46 &= v45;
                }
                if (v46 == v38)
                {
                  uint64_t v37 = (unsigned __int8 **)v44;
                }
                else
                {
                  uint64_t v47 = *((void *)v1 + 11);
                  if (*(void *)(v47 + 8 * v46))
                  {
                    uint64_t v48 = *(unsigned __int8 **)v44;
                    if (*(void *)v44)
                    {
                      std::string v49 = v1;
                      uint64_t v50 = v45;
                      uint64_t v51 = v44;
                      while (1)
                      {
                        int v52 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v140, v44 + 16, v48 + 16);
                        long long v53 = *(unsigned __int8 **)v51;
                        if (!v52) {
                          break;
                        }
                        uint64_t v48 = *(unsigned __int8 **)v53;
                        uint64_t v51 = *(unsigned __int8 **)v51;
                        if (!*(void *)v53) {
                          goto LABEL_93;
                        }
                      }
                      uint64_t v48 = *(unsigned __int8 **)v51;
                      long long v53 = v51;
LABEL_93:
                      uint64_t v45 = v50;
                      uint64_t v1 = v49;
                      unint64_t v40 = v123;
                    }
                    else
                    {
                      long long v53 = v44;
                    }
                    char *v37 = v48;
                    *(void *)long long v53 = **(void **)(*((void *)v1 + 11) + 8 * v46);
                    **(void **)(*((void *)v1 + 11) + 8 * v46) = v44;
                  }
                  else
                  {
                    *(void *)(v47 + 8 * v46) = v37;
                    uint64_t v37 = (unsigned __int8 **)v44;
                    unint64_t v38 = v46;
                  }
                }
                long long v44 = *v37;
              }
              while (*v37);
            }
          }
          goto LABEL_105;
        }
        int64x2_t v54 = (void *)*((void *)v1 + 11);
        *((void *)v1 + std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((void *)this + 11) = 0;
        if (v54) {
          operator delete(v54);
        }
        *((void *)v1 + 12) = 0;
      }
    }
LABEL_105:
    unint64_t v27 = *((void *)v1 + 12);
    uint64_t v23 = v127;
    uint64_t v13 = v133;
    goto LABEL_106;
  }
LABEL_284:
  std::mutex::unlock(v2);
}

void sub_23F5C3B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39,std::__shared_weak_count *a40)
{
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)(v40 - 224));
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)(v40 - 168));
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::PortElement>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::PortElement>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F5C3E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Document::getGeomPropValue(RIO_MTLX *a1, uint64_t a2, unsigned __int8 *a3, RIO_MTLX *a4)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v8 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>(a2, (uint64_t)v8, &v21);
  uint64_t v9 = v21;
  uint64_t v10 = v22;
  if (v21 != v22)
  {
    unint64_t v11 = 0;
    do
    {
      unint64_t v13 = *(RIO_MTLX::GeomElement **)v9;
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::GeomElement::getActiveGeom(&__p, v13);
      char v14 = RIO_MTLX::geomStringsMatch(a4, &__p, 0);
      char v15 = v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v15)
        {
LABEL_9:
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::GeomProp>(&__p, (uint64_t)v13, a3);
          if (__p.__r_.__value_.__r.__words[0])
          {
            RIO_MTLX::ValueElement::getValue((RIO_MTLX::ValueElement *)__p.__r_.__value_.__l.__data_, (uint64_t)&v18);
            uint64_t v16 = v18;
            long long v17 = v19;
            uint64_t v18 = 0;
            uint64_t v19 = 0;
            *(void *)a1 = v16;
            *((void *)a1 + 1) = v17;
            if (v11)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
            }
            unint64_t v11 = v17;
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
      }
      else if (v14)
      {
        goto LABEL_9;
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v9 += 16;
    }
    while (v9 != v10);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_23F5C3F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::string __p = &a17;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v20 = *(std::__shared_weak_count **)(v17 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

char *RIO_MTLX::Document::getMatchingNodeDefs@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  RIO_MTLX::Document::Cache::refresh(*(RIO_MTLX::Document::Cache **)(a1 + 272));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__equal_range_multi<std::string>((void *)(*(void *)(a1 + 272) + 128), a2);
  uint64_t v7 = result;
  uint64_t v9 = v8;
  while (v7 != v9)
  {
    uint64_t result = (char *)std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::push_back[abi:ne180100](a3, (long long *)(v7 + 40));
    uint64_t v7 = *(char **)v7;
  }
  return result;
}

void sub_23F5C403C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F5C4160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

char *RIO_MTLX::Document::getMatchingImplementations@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  RIO_MTLX::Document::Cache::refresh(*(RIO_MTLX::Document::Cache **)(a1 + 272));
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__equal_range_multi<std::string>((void *)(*(void *)(a1 + 272) + 168), a2);
  uint64_t v7 = result;
  uint64_t v9 = v8;
  while (v7 != v9)
  {
    uint64_t result = (char *)std::vector<std::shared_ptr<RIO_MTLX::InterfaceElement>>::push_back[abi:ne180100]((void **)a3, (long long *)(v7 + 40));
    uint64_t v7 = *(char **)v7;
  }
  return result;
}

void sub_23F5C41F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::InterfaceElement>>::push_back[abi:ne180100](void **result, long long *a2)
{
  uint64_t v3 = (uint64_t *)result;
  uint64_t v5 = (uint64_t)(result + 2);
  uint64_t v4 = (char *)result[2];
  unint64_t v6 = (char *)result[1];
  if (v6 >= v4)
  {
    uint64_t v9 = (v6 - (unsigned char *)*result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (unsigned char *)*result;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    int v24 = result + 2;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(result + 2), v12);
    char v14 = &v13[16 * v9];
    uint64_t v22 = v13;
    *(void *)uint64_t v23 = v14;
    *(void *)&v23[16] = &v13[16 * v15];
    long long v16 = *a2;
    *(_OWORD *)char v14 = *a2;
    if (*((void *)&v16 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)&v23[8] = v14 + 16;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::InterfaceElement>*>>(v5, v3[1], (void *)v3[1], *v3, (void *)*v3, (uint64_t)v14, (uint64_t)v14);
    uint64_t v17 = v3[2];
    long long v18 = *(_OWORD *)&v23[8];
    uint64_t v21 = *(void **)&v23[8];
    long long v19 = *(_OWORD *)v3;
    *uint64_t v3 = v20;
    *(_OWORD *)uint64_t v23 = v19;
    *(_OWORD *)(v3 + 1) = v18;
    *(void *)&v23[16] = v17;
    uint64_t v22 = (void *)v19;
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(&v22);
    uint64_t v8 = v21;
  }
  else
  {
    *(void *)unint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    *((void *)v6 + 1) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v6 + 16;
    result[1] = v8;
  }
  v3[1] = (uint64_t)v8;
  return result;
}

void sub_23F5C4350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Document::validate(uint64_t a1, std::string *a2)
{
  char v17 = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  BOOL v6 = v4 != 1 || SHIDWORD(v4) > 37;
  char v7 = (int)v4 >= 1 && v6;
  std::string::basic_string[abi:ne180100]<0>(__p, "Unsupported document version");
  RIO_MTLX::Element::validateRequire(a1, v7, &v17, a2, (const void **)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  BOOL v10 = v8 != 1 || SHIDWORD(v8) < 39;
  char v11 = (int)v8 <= 1 && v10;
  std::string::basic_string[abi:ne180100]<0>(v13, "Future document version");
  RIO_MTLX::Element::validateRequire(a1, v11, &v17, a2, (const void **)v13);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  LODWORD(result) = RIO_MTLX::Element::validate(a1, a2);
  if (v17) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F5C44AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Document::upgradeVersion(uint64_t **this)
{
  uint64_t v1178 = *MEMORY[0x263EF8340];
  uint64_t v2 = (RIO_MTLX *)((uint64_t (*)(uint64_t **))(*this)[8])(this);
  BOOL v3 = (int)v2 >= 1 && v2 == 1;
  if (!v3 || SHIDWORD(v2) > 37) {
    return;
  }
  switch(HIDWORD(v2))
  {
    case 0x16:
      RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
      *(void *)&v1175[8] = 0;
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
      if (v1173.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      v1170 = 0;
      v1169.__r_.__value_.__r.__words[2] = 0;
      uint64_t v1171 = 0;
      uint64_t v4 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
      long long v1172 = *(_OWORD *)v1175;
      RIO_MTLX::NULL_TREE_ITERATOR(v4);
      long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
      if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v1166 = 0;
      uint64_t v1165 = 0;
      uint64_t v1167 = 0;
      std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
      long long v1168 = xmmword_268C3FDB0;
      break;
    case 0x17:
      goto LABEL_36;
    case 0x18:
      goto LABEL_81;
    case 0x19:
      goto LABEL_107;
    case 0x1A:
      goto LABEL_137;
    case 0x22:
      goto LABEL_577;
    case 0x23:
      goto LABEL_620;
    case 0x24:
      goto LABEL_840;
    default:
      if (SHIDWORD(v2) < 37) {
        return;
      }
      goto LABEL_1326;
  }
  while (1)
  {
    BOOL v5 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164);
    if (v5) {
      break;
    }
    long long v6 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
    if (v1169.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    char v7 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v5);
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v6 + 160), v7);
    if (v8) {
      uint64_t v9 = (uint64_t *)(v8 + 40);
    }
    else {
      uint64_t v9 = RIO_MTLX::EMPTY_STRING(0);
    }
    int v10 = *((char *)v9 + 23);
    if (v10 < 0)
    {
      if (v9[1] != 6) {
        goto LABEL_30;
      }
      uint64_t v9 = (uint64_t *)*v9;
    }
    else if (v10 != 6)
    {
      goto LABEL_30;
    }
    if (*(_DWORD *)v9 == 1952671094 && *((_WORD *)v9 + 2) == 29295)
    {
      unint64_t v12 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v9);
      RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
      RIO_MTLX::Element::setAttribute((uint64_t *)v6, v12, (const std::string *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v);
    }
LABEL_30:
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
    RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
LABEL_36:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  unint64_t v13 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v13);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164))
    {
      long long v14 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
      if (v1169.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = (uint64_t **)(v14 + 24);
      int v16 = *(char *)(v14 + 47);
      if (v16 < 0)
      {
        if (*(void *)(v14 + 32) != 6) {
          goto LABEL_53;
        }
        uint64_t v15 = (uint64_t **)*v15;
      }
      else if (v16 != 6)
      {
        goto LABEL_53;
      }
      int v17 = *(_DWORD *)v15;
      int v18 = *((unsigned __int16 *)v15 + 2);
      if (v17 == 1684105331 && v18 == 29285)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "shadername");
        int v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v14 + 160), (unsigned __int8 *)&__str);
        uint64_t v25 = v24;
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
        if (v25)
        {
          uint64_t v26 = (long long *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE((RIO_MTLX::NodeDef *)v24);
          std::string::basic_string[abi:ne180100]<0>(&__str, "shadername");
          unint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v14 + 160), (unsigned __int8 *)&__str);
          if (v27) {
            float v28 = (const std::string *)(v27 + 40);
          }
          else {
            float v28 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
          }
          RIO_MTLX::Element::setAttribute((uint64_t *)v14, v26, v28);
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "shadername");
          RIO_MTLX::Element::removeAttribute((void *)v14, (unsigned __int8 *)&__str);
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
        }
      }
LABEL_53:
      std::string::basic_string[abi:ne180100]<0>(&__p, "assign");
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&__str, this[17], this[18], (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v21 = (std::string **)*((void *)&__str + 1);
      uint64_t v20 = (std::string **)__str;
LABEL_56:
      if (v20 == v21)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (*((void *)&v14 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
        }
        RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
        continue;
      }
      uint64_t v22 = *v20;
      uint64_t v23 = v20[1];
      if (v23)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v23->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v23->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      v1161[1] = v23;
      v1161[0] = v22;
      std::string::basic_string[abi:ne180100]<0>(&__p, "materialassign");
      RIO_MTLX::Element::changeChildCategory((void *)v14, v1161, (uint64_t)&__p, (uint64_t)v1162);
      if (v1163) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v1163);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v23)
        {
LABEL_63:
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v23);
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v23);
        }
      }
      else if (v23)
      {
        goto LABEL_63;
      }
      v20 += 2;
      goto LABEL_56;
    }
    break;
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
LABEL_81:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  float v29 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v29);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  while (2)
  {
    BOOL v30 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164);
    if (!v30)
    {
      long long v31 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
      if (v1169.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v32 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v30);
      if (!RIO_MTLX::Element::isA<RIO_MTLX::Input>(v31, (unsigned __int8 *)v32)) {
        goto LABEL_103;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "graphname");
      int8x8_t v33 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v31 + 160), (unsigned __int8 *)&__str);
      unint64_t v34 = v33;
      if (SBYTE7(__str_16) < 0)
      {
        operator delete((void *)__str);
        if (!v34)
        {
LABEL_103:
          if (*((void *)&v31 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
          }
          RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
          continue;
        }
      }
      else if (!v33)
      {
        goto LABEL_103;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "opgraph");
      std::string::basic_string[abi:ne180100]<0>(&__p, "graphname");
      uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v31 + 160), (unsigned __int8 *)&__p);
      if (v35) {
        uint64_t v36 = (const std::string *)(v35 + 40);
      }
      else {
        uint64_t v36 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
      }
      RIO_MTLX::Element::setAttribute((uint64_t *)v31, &__str, v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(__str_16) < 0) {
        operator delete((void *)__str);
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "graphname");
      RIO_MTLX::Element::removeAttribute((void *)v31, (unsigned __int8 *)&__str);
      if (SBYTE7(__str_16) < 0) {
        operator delete((void *)__str);
      }
      goto LABEL_103;
    }
    break;
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
LABEL_107:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  uint64_t v37 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v37);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164))
    {
      long long v38 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
      if (v1169.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      uint8x8_t v39 = (void *)(v38 + 24);
      int v40 = *(char *)(v38 + 47);
      if (v40 < 0)
      {
        if (*(void *)(v38 + 32) == 8)
        {
          uint8x8_t v39 = (void *)*v39;
          goto LABEL_120;
        }
      }
      else
      {
        if (v40 != 8) {
          goto LABEL_133;
        }
LABEL_120:
        if (*v39 == 0x746E6174736E6F63)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "color");
          unint64_t v41 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v38 + 96), (unsigned __int8 *)&__str);
          if (v41)
          {
            uint64_t v43 = (std::string *)*((void *)v41 + 5);
            uint8x8_t v42 = (std::__shared_weak_count *)*((void *)v41 + 6);
            if (v42) {
              atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint8x8_t v42 = 0;
            uint64_t v43 = 0;
          }
          if (SBYTE7(__str_16) < 0)
          {
            operator delete((void *)__str);
            if (!v43) {
              goto LABEL_131;
            }
          }
          else if (!v43)
          {
LABEL_131:
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
            goto LABEL_133;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "value");
          RIO_MTLX::Element::setName(v43, (std::string *)&__str);
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
          goto LABEL_131;
        }
      }
LABEL_133:
      if (*((void *)&v38 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
      }
      RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
      continue;
    }
    break;
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
LABEL_137:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  long long v44 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v44);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164))
    {
      long long v45 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
      if (v1169.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      long long __str = 0uLL;
      *(void *)&long long __str_16 = 0;
      std::string::size_type size = std::vector<std::shared_ptr<RIO_MTLX::Element>>::__init_with_size[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>*,std::shared_ptr<RIO_MTLX::Element>*>((uint64_t)&__str, *(void **)(v45 + 136), *(void **)(v45 + 144), (uint64_t)(*(void *)(v45 + 144) - *(void *)(v45 + 136)) >> 4);
      uint64_t v47 = (uint64_t *)*((void *)&__str + 1);
      uint64_t v48 = (uint64_t *)__str;
LABEL_146:
      if (v48 == v47)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (*((void *)&v45 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
        }
        RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
        continue;
      }
      uint64_t v49 = *v48;
      uint64_t v50 = (std::__shared_weak_count *)v48[1];
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v51 = (uint64_t *)(v49 + 24);
      if (*(char *)(v49 + 47) < 0)
      {
        uint64_t v53 = *(void *)(v49 + 32);
        if (v53 != 6)
        {
          if (v53 != 7)
          {
            if (v53 != 9) {
              goto LABEL_246;
            }
            uint64_t v51 = (uint64_t *)*v51;
            goto LABEL_158;
          }
          uint64_t v51 = (uint64_t *)*v51;
          goto LABEL_170;
        }
        uint64_t v51 = (uint64_t *)*v51;
      }
      else
      {
        int v52 = *(unsigned __int8 *)(v49 + 47);
        if (v52 != 6)
        {
          if (v52 != 7)
          {
            if (v52 != 9) {
              goto LABEL_246;
            }
LABEL_158:
            if (*v51 == 0x6572726564616873 && *((unsigned char *)v51 + 8) == 102)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "shadertype");
              std::string::size_type size = (std::string::size_type)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v49 + 160), (unsigned __int8 *)&__p);
              std::string::size_type v70 = size;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if (!v70) {
                  goto LABEL_246;
                }
              }
              else if (!size)
              {
                goto LABEL_246;
              }
              float v71 = (RIO_MTLX *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)size);
              float v72 = (const std::string *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(v71);
              RIO_MTLX::Element::setAttribute((uint64_t *)v49, (long long *)v71, v72);
              std::string::basic_string[abi:ne180100]<0>(&__p, "shadertype");
              RIO_MTLX::Element::removeAttribute((void *)v49, (unsigned __int8 *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_246;
            }
            uint8x8_t v55 = (uint64_t *)*v51;
            int v56 = *((unsigned __int8 *)v51 + 8);
            if (v55 != (uint64_t *)0x6574656D61726170 || v56 != 114) {
              goto LABEL_246;
            }
            long long v58 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)size);
            uint64_t v59 = (void *)(v49 + 160);
            int v60 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v49 + 160), v58);
            std::string::size_type size = v60 ? (std::string::size_type)(v60 + 40) : (std::string::size_type)RIO_MTLX::EMPTY_STRING(0);
            int v83 = *(char *)(size + 23);
            if (v83 < 0)
            {
              if (*(void *)(size + 8) != 11) {
                goto LABEL_246;
              }
              std::string::size_type size = *(void *)size;
            }
            else if (v83 != 11)
            {
              goto LABEL_246;
            }
            if (*(void *)size != 0x6E6870617267706FLL || *(void *)(size + 3) != 0x65646F6E68706172)
            {
LABEL_246:
              if (v50) {
LABEL_247:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100](v50);
LABEL_248:
              v48 += 2;
              goto LABEL_146;
            }
            uint8x8_t v85 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)size);
            BOOL v86 = RIO_MTLX::Element::isA<RIO_MTLX::Node>(v45, (unsigned __int8 *)v85);
            if (v86)
            {
              v1156[0] = (std::string *)v49;
              v1156[1] = (std::string *)v50;
              if (v50) {
                atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "input");
              RIO_MTLX::Element::changeChildCategory((void *)v45, v1156, (uint64_t)&__p, (uint64_t)&v1108);
              RIO_MTLX::Element::asA<RIO_MTLX::Input>((uint64_t)v1108.__r_.__value_.__l.__data_, &v1110);
              if (v1108.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1108.__r_.__value_.__l.__size_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v50) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v50);
              }
              uint64_t v87 = (uint64_t *)v1110.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(&__p, "value");
              uint64_t v88 = (RIO_MTLX::PortElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v87 + 20, (unsigned __int8 *)&__p);
              if (v88)
              {
                unint64_t v89 = (const std::string *)((char *)v88 + 40);
              }
              else
              {
                uint64_t v88 = (RIO_MTLX::PortElement *)RIO_MTLX::EMPTY_STRING(0);
                unint64_t v89 = (const std::string *)v88;
              }
              uint64_t v97 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(v88);
              RIO_MTLX::Element::setAttribute(v87, v97, v89);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              uint8x8_t v98 = (void *)v1110.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(&__p, "value");
              RIO_MTLX::Element::removeAttribute(v98, (unsigned __int8 *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              (*(void (**)(std::string *__return_ptr))(*(void *)v1110.__r_.__value_.__l.__data_ + 64))(&__p);
              std::string::size_type v99 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
              }
              unint64_t v100 = (uint64_t *)v1110.__r_.__value_.__r.__words[0];
              if (v99)
              {
                (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v1110.__r_.__value_.__l.__data_
                                                                                          + 64))(&__p, v1110.__r_.__value_.__r.__words[0]);
                v101 = (RIO_MTLX::TypedElement *)(*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 56))(__p.__r_.__value_.__r.__words[0]);
                uint64_t v102 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v101);
                RIO_MTLX::Element::setAttribute(v100, v102, (const std::string *)v101);
                if (__p.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                }
              }
              else
              {
                int v103 = RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
                unint64_t v104 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v103);
                RIO_MTLX::Element::setAttribute(v100, v104, (const std::string *)&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v);
              }
              goto LABEL_244;
            }
            v92 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v86);
            std::string::size_type size = RIO_MTLX::Element::isA<RIO_MTLX::Output>(v45, (unsigned __int8 *)v92);
            if (!size) {
              goto LABEL_246;
            }
            uint64_t v93 = (_WORD **)(v49 + 48);
            int v94 = *(char *)(v49 + 71);
            if (v94 < 0)
            {
              uint64_t v105 = *(void *)(v49 + 56);
              uint64_t v96 = (unsigned __int8 *)(v49 + 48);
              if (v105 != 2)
              {
LABEL_274:
                RIO_MTLX::Element::removeChild((void *)v45, v96);
                goto LABEL_246;
              }
              int v95 = *v93;
            }
            else
            {
              int v95 = (_WORD *)(v49 + 48);
              uint64_t v96 = (unsigned __int8 *)(v49 + 48);
              if (v94 != 2) {
                goto LABEL_274;
              }
            }
            if (*v95 == 28265)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "nodename");
              std::string::basic_string[abi:ne180100]<0>(&v1110, "value");
              int v106 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v59, (unsigned __int8 *)&v1110);
              if (v106) {
                uint8x8_t v107 = (const std::string *)(v106 + 40);
              }
              else {
                uint8x8_t v107 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
              }
              RIO_MTLX::Element::setAttribute((uint64_t *)v45, (long long *)&__p, v107);
              if (SHIBYTE(v1110.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1110.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            goto LABEL_274;
          }
LABEL_170:
          int v61 = *(_DWORD *)v51;
          int v62 = *(_DWORD *)((char *)v51 + 3);
          if (v61 != 1919381615 || v62 != 1752195442) {
            goto LABEL_246;
          }
          v1158[0] = (std::string *)v49;
          v1158[1] = (std::string *)v50;
          if (v50) {
            atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "nodegraph");
          RIO_MTLX::Element::changeChildCategory((void *)v45, v1158, (uint64_t)&__p, (uint64_t)v1159);
          std::string::size_type size = (std::string::size_type)v1160;
          if (v1160) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v1160);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v50) {
              goto LABEL_248;
            }
          }
          else if (!v50)
          {
            goto LABEL_248;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          goto LABEL_247;
        }
      }
      int v64 = *(_DWORD *)v51;
      int v65 = *((unsigned __int16 *)v51 + 2);
      if (v64 != 1684105331 || v65 != 29285) {
        goto LABEL_246;
      }
      v1157[0] = (std::string *)v49;
      v1157[1] = (std::string *)v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "nodedef");
      RIO_MTLX::Element::changeChildCategory((void *)v45, v1157, (uint64_t)&__p, (uint64_t)&v1108);
      RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>((uint64_t)v1108.__r_.__value_.__l.__data_, &v1110);
      if (v1108.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1108.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v50) {
LABEL_194:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      else if (v50)
      {
        goto LABEL_194;
      }
      std::string::size_type v67 = v1110.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shadertype");
      uint64_t v68 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v67 + 160), (unsigned __int8 *)&__p);
      uint64_t v69 = v68;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v69) {
          goto LABEL_211;
        }
      }
      else if (!v68)
      {
        goto LABEL_211;
      }
      BOOL v73 = (uint64_t *)v1110.__r_.__value_.__r.__words[0];
      unint64_t v74 = (RIO_MTLX::TypedElement *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING((RIO_MTLX *)v68);
      unint64_t v75 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v74);
      RIO_MTLX::Element::setAttribute(v73, v75, (const std::string *)v74);
      int v76 = (void *)v1110.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shadertype");
      RIO_MTLX::Element::removeAttribute(v76, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_211:
      std::string::size_type v77 = v1110.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shaderprogram");
      long long v78 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v77 + 160), (unsigned __int8 *)&__p);
      uint64_t v79 = v78;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v79) {
          goto LABEL_244;
        }
      }
      else if (!v78)
      {
LABEL_244:
        std::string::size_type size = v1110.__r_.__value_.__l.__size_;
        if (v1110.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1110.__r_.__value_.__l.__size_);
        }
        goto LABEL_246;
      }
      uint64_t v80 = (uint64_t *)v1110.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shaderprogram");
      unint64_t v81 = (RIO_MTLX::NodeDef *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v80 + 20, (unsigned __int8 *)&__p);
      if (v81)
      {
        uint8x8_t v82 = (const std::string *)((char *)v81 + 40);
      }
      else
      {
        unint64_t v81 = (RIO_MTLX::NodeDef *)RIO_MTLX::EMPTY_STRING(0);
        uint8x8_t v82 = (const std::string *)v81;
      }
      uint64_t v90 = (long long *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(v81);
      RIO_MTLX::Element::setAttribute(v80, v90, v82);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v91 = (void *)v1110.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "shaderprogram");
      RIO_MTLX::Element::removeAttribute(v91, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_244;
    }
    break;
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
  std::string::basic_string[abi:ne180100]<0>(&v1169, "material");
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&v1173, this[17], this[18], (uint64_t)&v1169);
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::string::size_type v109 = v1173.__r_.__value_.__l.__size_;
  for (uint64_t i = (uint64_t *)v1173.__r_.__value_.__r.__words[0]; i != (uint64_t *)v109; i += 2)
  {
    uint64_t v111 = *i;
    uint64_t v110 = (std::__shared_weak_count *)i[1];
    if (v110) {
      atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v1164, "shaderref");
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&v1169, *(uint64_t **)(v111 + 136), *(uint64_t **)(v111 + 144), (uint64_t)&v1164);
    if (SHIBYTE(v1165) < 0) {
      operator delete((void *)v1164);
    }
    std::string::size_type v112 = v1169.__r_.__value_.__l.__size_;
    for (uint64_t j = (uint64_t *)v1169.__r_.__value_.__r.__words[0]; j != (uint64_t *)v112; j += 2)
    {
      uint64_t v115 = *j;
      uint64_t v114 = (std::__shared_weak_count *)j[1];
      if (v114)
      {
        atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v1155[0] = v115;
      v1155[1] = (uint64_t)v114;
      uint64_t v116 = v1164;
      if (*((void *)&v1164 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1164 + 1));
      }
      if (v114) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v114);
      }
      if (!v116)
      {
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)(v115 + 48), &v1164);
        if ((void)v1164)
        {
          uint64_t v118 = (long long *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(v117);
          uint64_t v119 = RIO_MTLX::Element::setAttribute((uint64_t *)v115, v118, (const std::string *)(v1164 + 48));
          uint64_t v120 = (long long *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE((RIO_MTLX::NodeDef *)v119);
          Nodeuint64_t String = (const std::string *)RIO_MTLX::NodeDef::getNodeString((RIO_MTLX::NodeDef *)v1164);
          RIO_MTLX::Element::setAttribute((uint64_t *)v115, v120, NodeString);
        }
        if (*((void *)&v1164 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1164 + 1));
        }
      }
      if (v114) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v114);
      }
    }
    *(void *)&long long v1164 = &v1169;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1164);
    if (v110) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v110);
    }
  }
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  std::string::basic_string[abi:ne180100]<0>(&v1173, "material");
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&__str, this[17], this[18], (uint64_t)&v1173);
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
  unint64_t v123 = RIO_MTLX::EMPTY_STRING(v122);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>((uint64_t)this, (uint64_t)v123, (uint64_t *)&v1173);
  v974 = (std::string *)v1173.__r_.__value_.__l.__size_;
  std::string::size_type v124 = v1173.__r_.__value_.__r.__words[0];
  if (v1173.__r_.__value_.__r.__words[0] == v1173.__r_.__value_.__l.__size_) {
    goto LABEL_380;
  }
  while (2)
  {
    __int16 v126 = *(RIO_MTLX::InterfaceElement **)v124;
    int v125 = *(std::__shared_weak_count **)(v124 + 8);
    if (v125) {
      atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v977 = (std::string *)v124;
    RIO_MTLX::InterfaceElement::getActiveInputs(v126, (uint64_t *)&v1169);
    std::string::size_type v128 = v1169.__r_.__value_.__l.__size_;
    std::string::size_type v127 = v1169.__r_.__value_.__r.__words[0];
    v991 = (std::string *)v125;
    std::string::size_type v980 = v1169.__r_.__value_.__l.__size_;
    if (v1169.__r_.__value_.__r.__words[0] == v1169.__r_.__value_.__l.__size_) {
      goto LABEL_377;
    }
    while (2)
    {
      unint64_t v130 = *(void **)v127;
      unsigned __int8 v129 = *(std::__shared_weak_count **)(v127 + 8);
      if (v129) {
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v987 = v129;
      std::string::basic_string[abi:ne180100]<0>(&v1164, "opgraph");
      if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v130 + 20, (unsigned __int8 *)&v1164))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "graphoutput");
        BOOL v131 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v130 + 20, (unsigned __int8 *)&__p) != 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        BOOL v131 = 0;
      }
      if (SHIBYTE(v1165) < 0)
      {
        operator delete((void *)v1164);
        if (!v131) {
          goto LABEL_374;
        }
      }
      else if (!v131)
      {
        goto LABEL_374;
      }
      v983 = (std::string *)v127;
      v995 = (std::string *)*((void *)&__str + 1);
      long long v132 = (std::string *)__str;
      if ((void)__str == *((void *)&__str + 1)) {
        goto LABEL_370;
      }
      while (2)
      {
        std::string::size_type v134 = v132->__r_.__value_.__r.__words[0];
        uint64_t v133 = (std::__shared_weak_count *)v132->__r_.__value_.__l.__size_;
        if (v133) {
          atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v1004 = v133;
        std::string::basic_string[abi:ne180100]<0>(&__p, "shaderref");
        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&v1164, *(uint64_t **)(v134 + 136), *(uint64_t **)(v134 + 144), (uint64_t)&__p);
        v1000 = v132;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        size_t v135 = (uint64_t *)*((void *)&v1164 + 1);
        v136 = (uint64_t *)v1164;
        while (2)
        {
          if (v136 != v135)
          {
            uint64_t v138 = *v136;
            unint64_t v137 = (std::__shared_weak_count *)v136[1];
            if (v137)
            {
              atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v1154[0] = v138;
            v1154[1] = (uint64_t)v137;
            if ((RIO_MTLX::InterfaceElement *)__p.__r_.__value_.__l.__data_ != v126)
            {
              BOOL v139 = 0;
LABEL_335:
              if (__p.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
              }
              if (v137) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v137);
              }
              if (v139)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "bindinput");
                if (*((char *)v130 + 71) < 0) {
                  std::string::__init_copy_ctor_external(&v1153, (const std::string::value_type *)v130[6], v130[7]);
                }
                else {
                  std::string v1153 = *(std::string *)((unsigned char *)v130 + 2);
                }
                RIO_MTLX::Element::addChildOfCategory(v138, (uint64_t)&__p, (uint64_t)&v1153, (std::string **)&v1108);
                if (SHIBYTE(v1153.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1153.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                long long v144 = (uint64_t *)v1108.__r_.__value_.__r.__words[0];
                uint64_t v145 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v143);
                uint64_t v146 = (const std::string *)(*(uint64_t (**)(void *))(*v130 + 56))(v130);
                RIO_MTLX::Element::setAttribute(v144, v145, v146);
                long long v147 = (uint64_t *)v1108.__r_.__value_.__r.__words[0];
                std::string::basic_string[abi:ne180100]<0>(&__p, "nodegraph");
                std::string::basic_string[abi:ne180100]<0>(&v1110, "opgraph");
                long long v148 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v130 + 20, (unsigned __int8 *)&v1110);
                if (v148) {
                  uint64_t v149 = (const std::string *)(v148 + 40);
                }
                else {
                  uint64_t v149 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
                }
                RIO_MTLX::Element::setAttribute(v147, (long long *)&__p, v149);
                if (SHIBYTE(v1110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1110.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                long long v150 = (uint64_t *)v1108.__r_.__value_.__r.__words[0];
                std::string::basic_string[abi:ne180100]<0>(&__p, "output");
                std::string::basic_string[abi:ne180100]<0>(&v1110, "graphoutput");
                uint64_t v151 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v130 + 20, (unsigned __int8 *)&v1110);
                if (v151) {
                  long long v152 = (const std::string *)(v151 + 40);
                }
                else {
                  long long v152 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
                }
                RIO_MTLX::Element::setAttribute(v150, (long long *)&__p, v152);
                if (SHIBYTE(v1110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1110.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (v1108.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1108.__r_.__value_.__l.__size_);
                }
              }
              if (v137) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v137);
              }
              v136 += 2;
              continue;
            }
            long long v140 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v138 + 96), (unsigned __int8 *)v130 + 48);
            if (v140)
            {
              uint64_t v142 = *((void *)v140 + 5);
              uint64_t v141 = (std::__shared_weak_count *)*((void *)v140 + 6);
              if (v141)
              {
                atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
                BOOL v139 = v142 == 0;
                std::__shared_weak_count::__release_shared[abi:ne180100](v141);
                goto LABEL_335;
              }
            }
            else
            {
              uint64_t v142 = 0;
            }
            BOOL v139 = v142 == 0;
            goto LABEL_335;
          }
          break;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1164;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v1004) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1004);
        }
        long long v132 = (std::string *)&v1000->__r_.__value_.__r.__words[2];
        int v125 = (std::__shared_weak_count *)v991;
        if (&v1000->__r_.__value_.__r.__words[2] != (std::string::size_type *)v995) {
          continue;
        }
        break;
      }
LABEL_370:
      std::string::basic_string[abi:ne180100]<0>(&v1164, "opgraph");
      RIO_MTLX::Element::removeAttribute(v130, (unsigned __int8 *)&v1164);
      if (SHIBYTE(v1165) < 0) {
        operator delete((void *)v1164);
      }
      std::string::basic_string[abi:ne180100]<0>(&v1164, "graphoutput");
      std::string::size_type v128 = v980;
      std::string::size_type v127 = (std::string::size_type)v983;
      RIO_MTLX::Element::removeAttribute(v130, (unsigned __int8 *)&v1164);
      if (SHIBYTE(v1165) < 0) {
        operator delete((void *)v1164);
      }
LABEL_374:
      if (v987) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v987);
      }
      v127 += 16;
      if (v127 != v128) {
        continue;
      }
      break;
    }
LABEL_377:
    *(void *)&long long v1164 = &v1169;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1164);
    if (v125) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v125);
    }
    std::string::size_type v124 = (std::string::size_type)&v977->__r_.__value_.__r.__words[2];
    if (&v977->__r_.__value_.__r.__words[2] != (std::string::size_type *)v974) {
      continue;
    }
    break;
  }
LABEL_380:
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  long long v154 = RIO_MTLX::EMPTY_STRING(v153);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>((uint64_t)this, (uint64_t)v154, (uint64_t *)&v1173);
  std::string::size_type v156 = v1173.__r_.__value_.__l.__size_;
  uint64_t v155 = (uint64_t *)v1173.__r_.__value_.__r.__words[0];
  if (v1173.__r_.__value_.__r.__words[0] == v1173.__r_.__value_.__l.__size_) {
    goto LABEL_400;
  }
  while (2)
  {
    uint64_t v158 = *v155;
    uint64_t v157 = (std::__shared_weak_count *)v155[1];
    if (v157) {
      atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v1164, "geomattr");
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&v1169, *(uint64_t **)(v158 + 136), *(uint64_t **)(v158 + 144), (uint64_t)&v1164);
    if (SHIBYTE(v1165) < 0) {
      operator delete((void *)v1164);
    }
    std::string::size_type v159 = v1169.__r_.__value_.__l.__size_;
    std::string::size_type v160 = v1169.__r_.__value_.__r.__words[0];
    while (2)
    {
      if (v160 != v159)
      {
        v161 = *(std::string **)v160;
        v162 = *(std::string **)(v160 + 8);
        if (v162)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)&v162->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)&v162->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
        }
        v1150[1] = v162;
        v1150[0] = v161;
        std::string::basic_string[abi:ne180100]<0>(&v1164, "geomprop");
        RIO_MTLX::Element::changeChildCategory((void *)v158, v1150, (uint64_t)&v1164, (uint64_t)v1151);
        if (v1152) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1152);
        }
        if (SHIBYTE(v1165) < 0)
        {
          operator delete((void *)v1164);
          if (v162)
          {
LABEL_393:
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v162);
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v162);
          }
        }
        else if (v162)
        {
          goto LABEL_393;
        }
        v160 += 16;
        continue;
      }
      break;
    }
    *(void *)&long long v1164 = &v1169;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1164);
    if (v157) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v157);
    }
    v155 += 2;
    if (v155 != (uint64_t *)v156) {
      continue;
    }
    break;
  }
LABEL_400:
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  v163 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&v1173, "udim");
  long long v164 = RIO_MTLX::UNIVERSAL_GEOM_NAME(v163);
  RIO_MTLX::Document::getGeomPropValue((RIO_MTLX *)&v1164, (uint64_t)this, (unsigned __int8 *)&v1173, (RIO_MTLX *)v164);
  if ((void)v1164)
  {
    v165 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&v1169, "udimset");
    long long v166 = RIO_MTLX::UNIVERSAL_GEOM_NAME(v165);
    RIO_MTLX::Document::getGeomPropValue((RIO_MTLX *)&__p, (uint64_t)this, (unsigned __int8 *)&v1169, (RIO_MTLX *)v166);
    BOOL v167 = __p.__r_.__value_.__r.__words[0] == 0;
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v167 = 0;
  }
  uint64_t v168 = (RIO_MTLX *)*((void *)&v1164 + 1);
  if (*((void *)&v1164 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1164 + 1));
  }
  if ((SHIBYTE(v1173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v167) {
      goto LABEL_576;
    }
LABEL_412:
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    v169 = RIO_MTLX::EMPTY_STRING(v168);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>((uint64_t)this, (uint64_t)v169, (uint64_t *)&v1173);
    v984 = (std::string *)v1173.__r_.__value_.__l.__size_;
    v171 = (std::string *)v1173.__r_.__value_.__r.__words[0];
    if (v1173.__r_.__value_.__r.__words[0] == v1173.__r_.__value_.__l.__size_) {
      goto LABEL_485;
    }
LABEL_413:
    std::string::size_type v172 = v171->__r_.__value_.__r.__words[0];
    v173 = (std::__shared_weak_count *)v171->__r_.__value_.__l.__size_;
    if (v173) {
      atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v174 = RIO_MTLX::EMPTY_STRING(v170);
    v176 = *(uint64_t **)(v172 + 136);
    uint64_t v175 = *(uint64_t **)(v172 + 144);
    memset(&v1169, 0, sizeof(v1169));
    if (v176 == v175) {
      goto LABEL_482;
    }
    v177 = (std::string *)v174;
    v992 = v171;
    v996 = (std::string *)v173;
    std::string::size_type v178 = 0;
    uint64_t v179 = 0;
    v1001 = (std::string *)v174;
    v1005 = 0;
    v180 = 0;
    while (1)
    {
      uint64_t v182 = *v176;
      std::string::size_type v181 = (std::__shared_weak_count *)v176[1];
      if (v181) {
        atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::GeomProp>(v182, &v1164);
      uint64_t v183 = v1164;
      if (!(void)v1164) {
        goto LABEL_459;
      }
      int v184 = SHIBYTE(v177->__r_.__value_.__r.__words[2]);
      std::string::size_type v185 = v177->__r_.__value_.__l.__size_;
      if (v184 >= 0) {
        std::string::size_type v185 = HIBYTE(v177->__r_.__value_.__r.__words[2]);
      }
      if (!v185) {
        goto LABEL_436;
      }
      uint64_t v186 = *(unsigned __int8 *)(v182 + 47);
      if ((v186 & 0x80u) == 0) {
        uint64_t v187 = *(unsigned __int8 *)(v182 + 47);
      }
      else {
        uint64_t v187 = *(void *)(v182 + 32);
      }
      if (v187 != v185) {
        goto LABEL_459;
      }
      uint64_t v188 = (const void **)(v182 + 24);
      uint64_t v189 = v184 >= 0 ? v177 : (std::string *)v177->__r_.__value_.__r.__words[0];
      if ((v186 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v188, v189, *(void *)(v182 + 32))) {
        goto LABEL_436;
      }
LABEL_459:
      if (*((void *)&v1164 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1164 + 1));
      }
      if (v181) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v181);
      }
      v176 += 2;
      if (v176 == v175)
      {
        std::string::size_type v200 = v1169.__r_.__value_.__l.__size_;
        unint64_t v199 = (uint64_t *)v1169.__r_.__value_.__r.__words[0];
        v171 = v992;
        v173 = (std::__shared_weak_count *)v996;
        while (v199 != (uint64_t *)v200)
        {
          uint64_t v201 = *v199;
          v202 = (std::__shared_weak_count *)v199[1];
          if (v202) {
            atomic_fetch_add_explicit(&v202->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v203 = (void *)(v201 + 48);
          int v204 = *(char *)(v201 + 71);
          if (v204 < 0)
          {
            if (*(void *)(v201 + 56) == 4)
            {
              std::string v203 = (void *)*v203;
LABEL_477:
              if (*(_DWORD *)v203 == 1835623541)
              {
                Valueuint64_t String = RIO_MTLX::ValueElement::getValueString((RIO_MTLX::ValueElement *)v201);
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&__p, (const void **)ValueString, (uint64_t)ValueString);
              }
            }
          }
          else if (v204 == 4)
          {
            goto LABEL_477;
          }
          if (v202) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v202);
          }
          v199 += 2;
        }
LABEL_482:
        *(void *)&long long v1164 = &v1169;
        std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1164);
        if (v173) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v173);
        }
        v171 = (std::string *)((char *)v171 + 16);
        if (v171 != v984) {
          goto LABEL_413;
        }
LABEL_485:
        v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
        memset(&v1110, 0, sizeof(v1110));
        std::string::size_type v207 = __p.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
        {
          do
          {
            std::string::size_type v208 = HIBYTE(v1110.__r_.__value_.__r.__words[2]);
            if ((v1110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v208 = v1110.__r_.__value_.__l.__size_;
            }
            if (v208)
            {
              std::operator+<char>();
              if ((v1173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v209 = &v1173;
              }
              else {
                v209 = (std::string *)v1173.__r_.__value_.__r.__words[0];
              }
              if ((v1173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v210 = HIBYTE(v1173.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v210 = v1173.__r_.__value_.__l.__size_;
              }
              uint64_t v206 = std::string::append(&v1110, (const std::string::value_type *)v209, v210);
              if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1173.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              uint64_t v206 = std::string::operator=(&v1110, (const std::string *)(v207 + 32));
            }
            v211 = *(std::string **)(v207 + 8);
            if (v211)
            {
              do
              {
                v212 = v211;
                v211 = (std::string *)v211->__r_.__value_.__r.__words[0];
              }
              while (v211);
            }
            else
            {
              do
              {
                v212 = *(std::string **)(v207 + 16);
                BOOL v3 = v212->__r_.__value_.__r.__words[0] == v207;
                std::string::size_type v207 = (std::string::size_type)v212;
              }
              while (!v3);
            }
            std::string::size_type v207 = (std::string::size_type)v212;
          }
          while (v212 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
        }
        v213 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v206);
        v214 = RIO_MTLX::UNIVERSAL_GEOM_NAME((RIO_MTLX *)v213);
        v215 = (const std::string *)v214;
        if (*((char *)v213 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v1173, (const std::string::value_type *)*v213, v213[1]);
        }
        else
        {
          long long v216 = *(_OWORD *)v213;
          v1173.__r_.__value_.__r.__words[2] = v213[2];
          *(_OWORD *)&v1173.__r_.__value_.__l.__data_ = v216;
        }
        std::string::size_type v217 = HIBYTE(v1173.__r_.__value_.__r.__words[2]);
        if ((v1173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v217 = v1173.__r_.__value_.__l.__size_;
        }
        if (!v217)
        {
          v218 = (char *)RIO_MTLX::GeomInfo::CATEGORY((RIO_MTLX::GeomInfo *)v214);
          v219 = v218;
          if (v218[23] >= 0) {
            size_t v220 = v218[23];
          }
          else {
            size_t v220 = *((void *)v218 + 1);
          }
          v221 = &v1164;
          std::string::basic_string[abi:ne180100]((uint64_t)&v1164, v220 + 1);
          if (v1165 < 0) {
            v221 = (long long *)v1164;
          }
          if (v220)
          {
            if (v219[23] >= 0) {
              v222 = v219;
            }
            else {
              v222 = *(char **)v219;
            }
            memmove(v221, v222, v220);
          }
          *(_WORD *)((char *)v221 + v22std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 49;
          RIO_MTLX::Element::createValidChildName((uint64_t)this, (uint64_t)&v1164, (uint64_t)&v1169);
          if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1173.__r_.__value_.__l.__data_);
          }
          std::string v1173 = v1169;
          *((unsigned char *)&v1169.__r_.__value_.__s + 23) = 0;
          v1169.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v1165) < 0) {
            operator delete((void *)v1164);
          }
        }
        std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v1108, this + 1);
        v223 = operator new(0x118uLL);
        v223[1] = 0;
        v223[2] = 0;
        void *v223 = &unk_26F331B30;
        *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1108.__r_.__value_.__l.__data_;
        *(_OWORD *)&v1108.__r_.__value_.__l.__data_ = 0uLL;
        RIO_MTLX::GeomInfo::GeomInfo((RIO_MTLX::GeomInfo *)(v223 + 3), (uint64_t *)&v1169, (uint64_t)&v1173);
        if (v1169.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
        }
        v1103.__r_.__value_.__r.__words[0] = (std::string::size_type)(v223 + 3);
        v1103.__r_.__value_.__l.__size_ = (std::string::size_type)v223;
        std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v1103, v223 + 4, (uint64_t)(v223 + 3));
        if (v1108.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1108.__r_.__value_.__l.__size_);
        }
        *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1103.__r_.__value_.__l.__data_;
        if (v1103.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v1103.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        ((void (*)(uint64_t **, std::string *))(*this)[5])(this, &v1169);
        v224 = (RIO_MTLX::GeomElement *)v1169.__r_.__value_.__l.__size_;
        if (v1169.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1173.__r_.__value_.__l.__data_);
        }
        v225 = (uint64_t *)v1103.__r_.__value_.__r.__words[0];
        v226 = (long long *)RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(v224);
        v227 = RIO_MTLX::Element::setAttribute(v225, v226, v215);
        v228 = (void *)v1103.__r_.__value_.__r.__words[0];
        v229 = (unsigned __int8 *)RIO_MTLX::UDIM_SET_PROPERTY((RIO_MTLX *)v227);
        RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE();
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::GeomProp>(&v1149, (uint64_t)v228, v229);
        v230 = (RIO_MTLX::GeomProp *)v1149;
        if (!(void)v1149)
        {
          if ((char)v229[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v1173, *(const std::string::value_type **)v229, *((void *)v229 + 1));
          }
          else
          {
            long long v231 = *(_OWORD *)v229;
            v1173.__r_.__value_.__r.__words[2] = *((void *)v229 + 2);
            *(_OWORD *)&v1173.__r_.__value_.__l.__data_ = v231;
          }
          std::string::size_type v232 = HIBYTE(v1173.__r_.__value_.__r.__words[2]);
          if ((v1173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v232 = v1173.__r_.__value_.__l.__size_;
          }
          if (!v232)
          {
            v233 = (char *)RIO_MTLX::GeomProp::CATEGORY(v230);
            v234 = v233;
            if (v233[23] >= 0) {
              size_t v235 = v233[23];
            }
            else {
              size_t v235 = *((void *)v233 + 1);
            }
            v236 = &v1164;
            std::string::basic_string[abi:ne180100]((uint64_t)&v1164, v235 + 1);
            if (v1165 < 0) {
              v236 = (long long *)v1164;
            }
            if (v235)
            {
              if (v234[23] >= 0) {
                v237 = v234;
              }
              else {
                v237 = *(char **)v234;
              }
              memmove(v236, v237, v235);
            }
            *(_WORD *)((char *)v236 + v235) = 49;
            RIO_MTLX::Element::createValidChildName((uint64_t)v228, (uint64_t)&v1164, (uint64_t)&v1169);
            if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1173.__r_.__value_.__l.__data_);
            }
            std::string v1173 = v1169;
            *((unsigned char *)&v1169.__r_.__value_.__s + 23) = 0;
            v1169.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v1165) < 0) {
              operator delete((void *)v1164);
            }
          }
          std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v1108, v228 + 1);
          v238 = operator new(0x118uLL);
          v238[1] = 0;
          v238[2] = 0;
          void *v238 = &unk_26F331DD8;
          *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1108.__r_.__value_.__l.__data_;
          *(_OWORD *)&v1108.__r_.__value_.__l.__data_ = 0uLL;
          RIO_MTLX::GeomProp::GeomProp((RIO_MTLX::GeomProp *)(v238 + 3), (uint64_t *)&v1169, (uint64_t)&v1173);
          if (v1169.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
          }
          v1105[0] = v238 + 3;
          v1105[1] = v238;
          std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)v1105, v238 + 4, (uint64_t)(v238 + 3));
          if (v1108.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1108.__r_.__value_.__l.__size_);
          }
          *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)v1105;
          if (v1105[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v1105[1] + 1, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *, std::string *))(*v228 + 40))(v228, &v1169);
          if (v1169.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1173.__r_.__value_.__l.__data_);
          }
          long long v239 = *(_OWORD *)v1105;
          v1105[0] = 0;
          v1105[1] = 0;
          v240 = (std::__shared_weak_count *)*((void *)&v1149 + 1);
          long long v1149 = v239;
          if (v240)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v240);
            if (v1105[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1105[1]);
            }
          }
          v230 = (RIO_MTLX::GeomProp *)v1149;
        }
        RIO_MTLX::ValueElement::setValue<std::string>(v230, &v1110, (uint64_t)RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v);
        if (*((void *)&v1149 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1149 + 1));
        }
        if (v1103.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1103.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v1110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1110.__r_.__value_.__l.__data_);
        }
        std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
        goto LABEL_576;
      }
    }
    if (*(unsigned char *)(v182 + 47))
    {
      while (*(unsigned __int8 *)v188 == v189->__r_.__value_.__s.__data_[0])
      {
        uint64_t v188 = (const void **)((char *)v188 + 1);
        uint64_t v189 = (std::string *)((char *)v189 + 1);
        if (!--v186) {
          goto LABEL_436;
        }
      }
      goto LABEL_459;
    }
LABEL_436:
    uint64_t v190 = *((void *)&v1164 + 1);
    if (v180 < v1005)
    {
      *(void *)v180 = v183;
      *((void *)v180 + 1) = v190;
      if (v190) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v190 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type v191 = (std::string::size_type)(v180 + 16);
      goto LABEL_458;
    }
    uint64_t v192 = (v180 - v179) >> 4;
    unint64_t v193 = v192 + 1;
    if ((unint64_t)(v192 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    if ((v1005 - v179) >> 3 > v193) {
      unint64_t v193 = (v1005 - v179) >> 3;
    }
    if ((unint64_t)(v1005 - v179) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v194 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v194 = v193;
    }
    if (v194 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int64x2_t v195 = (char *)operator new(16 * v194);
    unint64_t v196 = &v195[16 * v192];
    *(void *)unint64_t v196 = v183;
    *((void *)v196 + 1) = v190;
    if (v190) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v190 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type v191 = (std::string::size_type)(v196 + 16);
    v1005 = &v195[16 * v194];
    if (v180 == v179)
    {
      v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)v196;
      v1169.__r_.__value_.__r.__words[2] = (std::string::size_type)&v195[16 * v194];
      if (!v179) {
        goto LABEL_457;
      }
    }
    else
    {
      do
      {
        long long v197 = *((_OWORD *)v180 - 1);
        v180 -= 16;
        *((_OWORD *)v196 - 1) = v197;
        v196 -= 16;
        *(void *)v180 = 0;
        *((void *)v180 + 1) = 0;
      }
      while (v180 != v179);
      v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)v196;
      v1169.__r_.__value_.__l.__size_ = v191;
      v1169.__r_.__value_.__r.__words[2] = (std::string::size_type)&v195[16 * v194];
      if (v178 == v179)
      {
        uint64_t v179 = v178;
        if (!v178) {
          goto LABEL_457;
        }
      }
      else
      {
        do
        {
          v198 = (std::__shared_weak_count *)*((void *)v178 - 1);
          if (v198) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v198);
          }
          v178 -= 16;
        }
        while (v178 != v179);
        if (!v179) {
          goto LABEL_457;
        }
      }
    }
    operator delete(v179);
LABEL_457:
    uint64_t v179 = v196;
    v177 = v1001;
LABEL_458:
    v1169.__r_.__value_.__l.__size_ = v191;
    std::string::size_type v178 = (char *)v191;
    v180 = (char *)v191;
    goto LABEL_459;
  }
  operator delete(v1173.__r_.__value_.__l.__data_);
  if (v167) {
    goto LABEL_412;
  }
LABEL_576:
  v1173.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1173);
LABEL_577:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  v241 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v241);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  while (1)
  {
    BOOL v242 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164);
    if (v242) {
      break;
    }
    long long v243 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
    if (v1169.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    v244 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v242);
    v245 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v243 + 160), v244);
    if (v245) {
      v246 = (uint64_t *)(v245 + 40);
    }
    else {
      v246 = RIO_MTLX::EMPTY_STRING(0);
    }
    int v247 = *((char *)v246 + 23);
    if (v247 < 0)
    {
      if (v246[1] != 6) {
        goto LABEL_599;
      }
      v246 = (uint64_t *)*v246;
    }
    else if (v247 != 6)
    {
      goto LABEL_599;
    }
    if (*(_DWORD *)v246 == 1920229741 && *((_WORD *)v246 + 2) == 30825)
    {
      v249 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v246);
      RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
      RIO_MTLX::Element::setAttribute((uint64_t *)v243, v249, (const std::string *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v);
    }
LABEL_599:
    std::string::basic_string[abi:ne180100]<0>(&__str, "default");
    v250 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v243 + 160), (unsigned __int8 *)&__str);
    if (v250)
    {
      v251 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v250);
      v252 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v243 + 160), v251);
      v253 = v252;
      if (SBYTE7(__str_16) < 0)
      {
        operator delete((void *)__str);
        if (v253) {
          goto LABEL_612;
        }
      }
      else if (v252)
      {
        goto LABEL_612;
      }
      v254 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v252);
      std::string::basic_string[abi:ne180100]<0>(&__str, "default");
      v255 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v243 + 160), (unsigned __int8 *)&__str);
      if (v255) {
        v256 = (const std::string *)(v255 + 40);
      }
      else {
        v256 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
      }
      RIO_MTLX::Element::setAttribute((uint64_t *)v243, v254, v256);
      if (SBYTE7(__str_16) < 0) {
        operator delete((void *)__str);
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "default");
      RIO_MTLX::Element::removeAttribute((void *)v243, (unsigned __int8 *)&__str);
    }
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
LABEL_612:
    RIO_MTLX::Element::asA<RIO_MTLX::MaterialAssign>(v243, &__str);
    v258 = (std::string *)__str;
    if ((void)__str)
    {
      v259 = (long long *)RIO_MTLX::MaterialAssign::MATERIAL_ATTRIBUTE(v257);
      RIO_MTLX::Element::setAttribute((uint64_t *)v258, v259, v258 + 2);
    }
    if (*((void *)&__str + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
    }
    if (*((void *)&v243 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v243 + 1));
    }
    RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
LABEL_620:
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  v260 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v260);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164))
    {
      v261 = (std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_;
      uint64_t v262 = v1169.__r_.__value_.__r.__words[0];
      if (v1169.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Look>(v262, v1105);
      RIO_MTLX::Element::asA<RIO_MTLX::GeomInfo>(v262, &v1103);
      v264 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v263);
      v265 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v262 + 160), v264);
      if (v265)
      {
        v266 = (RIO_MTLX *)((char *)v265 + 40);
      }
      else
      {
        v265 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        v266 = v265;
      }
      v267 = (std::string *)RIO_MTLX::GEOMNAME_TYPE_STRING(v265);
      uint64_t v268 = *((unsigned __int8 *)v266 + 23);
      if ((v268 & 0x80u) == 0) {
        uint64_t v269 = *((unsigned __int8 *)v266 + 23);
      }
      else {
        uint64_t v269 = *((void *)v266 + 1);
      }
      std::string::size_type v270 = HIBYTE(v267->__r_.__value_.__r.__words[2]);
      int v271 = (char)v270;
      if ((v270 & 0x80u) != 0) {
        std::string::size_type v270 = v267->__r_.__value_.__l.__size_;
      }
      if (v269 != v270) {
        goto LABEL_656;
      }
      if (v271 >= 0) {
        v272 = (unsigned __int8 *)v267;
      }
      else {
        v272 = (unsigned __int8 *)v267->__r_.__value_.__r.__words[0];
      }
      if ((v268 & 0x80) != 0)
      {
        v267 = (std::string *)memcmp(*(const void **)v266, v272, *((void *)v266 + 1));
        if (v267) {
          goto LABEL_656;
        }
      }
      else if (*((unsigned char *)v266 + 23))
      {
        while (*(unsigned __int8 *)v266 == *v272)
        {
          v266 = (RIO_MTLX *)((char *)v266 + 1);
          ++v272;
          if (!--v268) {
            goto LABEL_646;
          }
        }
        goto LABEL_656;
      }
LABEL_646:
      v273 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v267);
      v274 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v262 + 160), v273);
      if (v274) {
        v267 = (std::string *)(v274 + 40);
      }
      else {
        v267 = (std::string *)RIO_MTLX::EMPTY_STRING(0);
      }
      int v275 = SHIBYTE(v267->__r_.__value_.__r.__words[2]);
      if (v275 < 0)
      {
        if (v267->__r_.__value_.__l.__size_ != 1) {
          goto LABEL_656;
        }
        v267 = (std::string *)v267->__r_.__value_.__r.__words[0];
      }
      else if (v275 != 1)
      {
        goto LABEL_656;
      }
      if (v267->__r_.__value_.__s.__data_[0] == 42)
      {
        v276 = (RIO_MTLX *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v267);
        v277 = RIO_MTLX::UNIVERSAL_GEOM_NAME(v276);
        v267 = RIO_MTLX::Element::setAttribute((uint64_t *)v262, (long long *)v276, (const std::string *)v277);
      }
LABEL_656:
      v278 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v267);
      v279 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v262 + 160), v278);
      if (v279)
      {
        v280 = (RIO_MTLX *)((char *)v279 + 40);
      }
      else
      {
        v279 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        v280 = v279;
      }
      v281 = (RIO_MTLX *)RIO_MTLX::FILENAME_TYPE_STRING(v279);
      uint64_t v282 = *((unsigned __int8 *)v280 + 23);
      if ((v282 & 0x80u) == 0) {
        uint64_t v283 = *((unsigned __int8 *)v280 + 23);
      }
      else {
        uint64_t v283 = *((void *)v280 + 1);
      }
      uint64_t v284 = *((unsigned __int8 *)v281 + 23);
      int v285 = (char)v284;
      if ((v284 & 0x80u) != 0) {
        uint64_t v284 = *((void *)v281 + 1);
      }
      v981 = v261;
      if (v283 == v284)
      {
        if (v285 >= 0) {
          v286 = (unsigned __int8 *)v281;
        }
        else {
          v286 = *(unsigned __int8 **)v281;
        }
        if ((v282 & 0x80) != 0)
        {
          v281 = (RIO_MTLX *)memcmp(*(const void **)v280, v286, *((void *)v280 + 1));
          if (v281) {
            goto LABEL_689;
          }
        }
        else if (*((unsigned char *)v280 + 23))
        {
          while (*(unsigned __int8 *)v280 == *v286)
          {
            v280 = (RIO_MTLX *)((char *)v280 + 1);
            ++v286;
            if (!--v282) {
              goto LABEL_674;
            }
          }
          goto LABEL_689;
        }
LABEL_674:
        long long __str = 0u;
        long long __str_16 = 0u;
        LODWORD(v1038) = 1065353216;
        v287 = (const std::string *)RIO_MTLX::UDIM_TOKEN(v281);
        std::string::basic_string[abi:ne180100]<0>(&__p, "%UDIM");
        v1110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v288 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&__str, (unsigned __int8 *)&__p, (long long **)&v1110);
        v289 = std::string::operator=((std::string *)(v288 + 40), v287);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v290 = (const std::string *)RIO_MTLX::UV_TILE_TOKEN((RIO_MTLX *)v289);
        std::string::basic_string[abi:ne180100]<0>(&__p, "%UVTILE");
        v1110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v291 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&__str, (unsigned __int8 *)&__p, (long long **)&v1110);
        v292 = std::string::operator=((std::string *)(v291 + 40), v290);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v293 = (RIO_MTLX::ValueElement *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v292);
        v294 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v293);
        v295 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v262 + 160), v294);
        if (v295) {
          v296 = (uint64_t *)(v295 + 40);
        }
        else {
          v296 = RIO_MTLX::EMPTY_STRING(0);
        }
        if (*((char *)v296 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v1148, (const std::string::value_type *)*v296, v296[1]);
        }
        else
        {
          long long v297 = *(_OWORD *)v296;
          v1148.__r_.__value_.__r.__words[2] = v296[2];
          *(_OWORD *)&v1148.__r_.__value_.__l.__data_ = v297;
        }
        RIO_MTLX::replaceSubstrings(&v1148, (uint64_t)&__str, (uint64_t)&__p);
        RIO_MTLX::Element::setAttribute((uint64_t *)v262, (long long *)v293, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1148.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1148.__r_.__value_.__l.__data_);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&__str);
      }
LABEL_689:
      long long __str = 0uLL;
      *(void *)&long long __str_16 = 0;
      std::vector<std::shared_ptr<RIO_MTLX::Element>>::__init_with_size[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>*,std::shared_ptr<RIO_MTLX::Element>*>((uint64_t)&__str, *(void **)(v262 + 136), *(void **)(v262 + 144), (uint64_t)(*(void *)(v262 + 144) - *(void *)(v262 + 136)) >> 4);
      v298 = (std::string *)*((void *)&__str + 1);
      v299 = (std::string *)__str;
      if ((void)__str == *((void *)&__str + 1))
      {
LABEL_832:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v1103.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1103.__r_.__value_.__l.__size_);
        }
        if (v1105[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1105[1]);
        }
        if (v261) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v261);
        }
        RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
        continue;
      }
      v300 = (void **)(v262 + 24);
      while (1)
      {
        std::string::size_type v302 = v299->__r_.__value_.__r.__words[0];
        v301 = (std::__shared_weak_count *)v299->__r_.__value_.__l.__size_;
        if (v301) {
          atomic_fetch_add_explicit(&v301->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v993 = v301;
        int v303 = *(unsigned __int8 *)(v262 + 47);
        if (*(char *)(v262 + 47) < 0)
        {
          if (*(void *)(v262 + 32) != 8) {
            goto LABEL_708;
          }
          v304 = *v300;
        }
        else
        {
          v304 = v300;
          if (v303 != 8) {
            goto LABEL_708;
          }
        }
        if (*v304 == 0x6C6169726574616DLL)
        {
          v306 = (void *)(v302 + 24);
          int v307 = *(char *)(v302 + 47);
          if (v307 < 0)
          {
            if (*(void *)(v302 + 32) != 8) {
              goto LABEL_699;
            }
            v306 = (void *)*v306;
          }
          else if (v307 != 8)
          {
            goto LABEL_699;
          }
          if (*v306 == 0x656469727265766FLL) {
            break;
          }
        }
LABEL_699:
        if ((v303 & 0x80) != 0)
        {
          if (*(void *)(v262 + 32) != 8) {
            goto LABEL_708;
          }
          v305 = *v300;
        }
        else
        {
          v305 = v300;
          if (v303 != 8) {
            goto LABEL_708;
          }
        }
        if (*v305 != 0x6C6169726574616DLL) {
          goto LABEL_708;
        }
        v315 = (void *)(v302 + 24);
        int v316 = *(char *)(v302 + 47);
        if (v316 < 0)
        {
          if (*(void *)(v302 + 32) != 15) {
            goto LABEL_708;
          }
          v315 = (void *)*v315;
        }
        else if (v316 != 15)
        {
          goto LABEL_708;
        }
        v354 = (void *)*v315;
        uint64_t v355 = *(void *)((char *)v315 + 7);
        if (v354 == (void *)0x6C6169726574616DLL && v355 == 0x74697265686E696CLL)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "material");
          v357 = (RIO_MTLX::Element *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v302 + 160), (unsigned __int8 *)&__p);
          if (v357)
          {
            v358 = (const std::string *)((char *)v357 + 40);
          }
          else
          {
            v357 = (RIO_MTLX::Element *)RIO_MTLX::EMPTY_STRING(0);
            v358 = (const std::string *)v357;
          }
          v359 = (long long *)RIO_MTLX::Element::INHERIT_ATTRIBUTE(v357);
          RIO_MTLX::Element::setAttribute((uint64_t *)v262, v359, v358);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_814;
        }
LABEL_708:
        if (v1105[0])
        {
          v308 = (void *)(v302 + 24);
          int v309 = *(char *)(v302 + 47);
          if ((v309 & 0x80000000) == 0)
          {
            if (v309 != 11) {
              goto LABEL_815;
            }
            goto LABEL_714;
          }
          if (*(void *)(v302 + 32) == 11)
          {
            v308 = (void *)*v308;
LABEL_714:
            v310 = (void *)*v308;
            uint64_t v311 = *(void *)((char *)v308 + 3);
            if (v310 != (void *)0x65686E696B6F6F6CLL || v311 != 0x74697265686E696BLL) {
              goto LABEL_815;
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "look");
            v313 = (RIO_MTLX::Element *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v302 + 160), (unsigned __int8 *)&__p);
            if (v313)
            {
              v314 = (const std::string *)((char *)v313 + 40);
            }
            else
            {
              v313 = (RIO_MTLX::Element *)RIO_MTLX::EMPTY_STRING(0);
              v314 = (const std::string *)v313;
            }
            v353 = (long long *)RIO_MTLX::Element::INHERIT_ATTRIBUTE(v313);
            RIO_MTLX::Element::setAttribute((uint64_t *)v262, v353, v314);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_814;
          }
        }
LABEL_815:
        if (v993) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v993);
        }
        v299 = (std::string *)((char *)v299 + 16);
        if (v299 == v298) {
          goto LABEL_832;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v1110, "shaderref");
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&__p, *(uint64_t **)(v262 + 136), *(uint64_t **)(v262 + 144), (uint64_t)&v1110);
      if (SHIBYTE(v1110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1110.__r_.__value_.__l.__data_);
      }
      v985 = (std::string *)__p.__r_.__value_.__l.__size_;
      v317 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
      {
        v997 = (std::string *)(v302 + 160);
        v975 = v298;
        v978 = (std::string *)v262;
        v973 = v300;
        do
        {
          v318 = (std::__shared_weak_count *)v317[1];
          uint64_t v1006 = *v317;
          if (v318)
          {
            atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v1147[0] = v1006;
          v1147[1] = (uint64_t)v318;
          if (v318) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v318);
          }
          v988 = v318;
          if (v1101.__r_.__value_.__r.__words[0])
          {
            RIO_MTLX::InterfaceElement::getActiveValueElements((RIO_MTLX::InterfaceElement *)v1101.__r_.__value_.__l.__data_, (uint64_t *)&v1110);
            std::string::size_type v320 = v1110.__r_.__value_.__l.__size_;
            for (uint64_t k = (uint64_t *)v1110.__r_.__value_.__r.__words[0]; k != (uint64_t *)v320; k += 2)
            {
              uint64_t v322 = *k;
              v321 = (std::__shared_weak_count *)k[1];
              if (v321) {
                atomic_fetch_add_explicit(&v321->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v1108, "publicname");
              v323 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v322 + 160), (unsigned __int8 *)&v1108);
              if (v323) {
                v324 = (std::__shared_weak_count *)(v323 + 40);
              }
              else {
                v324 = (std::__shared_weak_count *)RIO_MTLX::EMPTY_STRING(0);
              }
              uint64_t shared_weak_owners_high = HIBYTE(v324->__shared_weak_owners_);
              if ((shared_weak_owners_high & 0x80u) == 0) {
                uint64_t shared_owners = HIBYTE(v324->__shared_weak_owners_);
              }
              else {
                uint64_t shared_owners = v324->__shared_owners_;
              }
              uint64_t v327 = *(unsigned __int8 *)(v302 + 71);
              int v328 = (char)v327;
              if ((v327 & 0x80u) != 0) {
                uint64_t v327 = *(void *)(v302 + 56);
              }
              if (shared_owners != v327) {
                goto LABEL_757;
              }
              if (v328 >= 0) {
                v329 = (unsigned __int8 *)(v302 + 48);
              }
              else {
                v329 = *(unsigned __int8 **)(v302 + 48);
              }
              if ((shared_weak_owners_high & 0x80) != 0)
              {
                v324 = (std::__shared_weak_count *)memcmp(v324->__vftable, v329, v324->__shared_owners_);
                if (v324) {
                  goto LABEL_757;
                }
              }
              else if (HIBYTE(v324->__shared_weak_owners_))
              {
                while (LOBYTE(v324->__vftable) == *v329)
                {
                  v324 = (std::__shared_weak_count *)((char *)v324 + 1);
                  ++v329;
                  if (!--shared_weak_owners_high) {
                    goto LABEL_765;
                  }
                }
LABEL_757:
                BOOL v330 = 0;
                goto LABEL_758;
              }
LABEL_765:
              v324 = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v1006 + 96), (unsigned __int8 *)(v302 + 48));
              if (v324)
              {
                uint64_t shared_weak_owners = v324[1].__shared_weak_owners_;
                v324 = (std::__shared_weak_count *)v324[2].__vftable;
                if (v324)
                {
                  atomic_fetch_add_explicit(&v324->__shared_owners_, 1uLL, memory_order_relaxed);
                  BOOL v330 = shared_weak_owners == 0;
                  std::__shared_weak_count::__release_shared[abi:ne180100](v324);
                  goto LABEL_758;
                }
              }
              else
              {
                uint64_t shared_weak_owners = 0;
              }
              BOOL v330 = shared_weak_owners == 0;
LABEL_758:
              if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v1108.__r_.__value_.__l.__data_);
                if (!v330) {
                  goto LABEL_801;
                }
              }
              else if (!v330)
              {
                goto LABEL_801;
              }
              uint64_t v331 = v322 + 24;
              int v332 = *(char *)(v322 + 47);
              if (v332 < 0)
              {
                if (*(void *)(v322 + 32) == 9)
                {
                  uint64_t v331 = *(void *)v331;
LABEL_770:
                  uint64_t v334 = *(void *)v331;
                  int v335 = *(unsigned __int8 *)(v331 + 8);
                  if (v334 == 0x6574656D61726170 && v335 == 114)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v1108, "bindparam");
                    if (*(char *)(v322 + 71) < 0) {
                      std::string::__init_copy_ctor_external(&v1146, *(const std::string::value_type **)(v322 + 48), *(void *)(v322 + 56));
                    }
                    else {
                      std::string v1146 = *(std::string *)(v322 + 48);
                    }
                    RIO_MTLX::Element::addChildOfCategory(v1006, (uint64_t)&v1108, (uint64_t)&v1146, (std::string **)&v1099);
                    if (SHIBYTE(v1146.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v1146.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v1108.__r_.__value_.__l.__data_);
                    }
                    v348 = (uint64_t *)v1099.__r_.__value_.__r.__words[0];
                    v349 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v347);
                    v350 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v322 + 56))(v322);
                    v351 = RIO_MTLX::Element::setAttribute(v348, v349, v350);
                    v343 = (uint64_t *)v1099.__r_.__value_.__r.__words[0];
                    v344 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v351);
                    std::string::basic_string[abi:ne180100]<0>(&v1108, "value");
                    v352 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v997, (unsigned __int8 *)&v1108);
                    if (v352)
                    {
                      v346 = (const std::string *)(v352 + 40);
                      goto LABEL_797;
                    }
LABEL_796:
                    v346 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
                    goto LABEL_797;
                  }
                }
              }
              else if (v332 == 9)
              {
                goto LABEL_770;
              }
              v337 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v324);
              if (RIO_MTLX::Element::isA<RIO_MTLX::Input>(v322, (unsigned __int8 *)v337))
              {
                std::string::basic_string[abi:ne180100]<0>(&v1108, "bindinput");
                if (*(char *)(v322 + 71) < 0) {
                  std::string::__init_copy_ctor_external(&v1145, *(const std::string::value_type **)(v322 + 48), *(void *)(v322 + 56));
                }
                else {
                  std::string v1145 = *(std::string *)(v322 + 48);
                }
                RIO_MTLX::Element::addChildOfCategory(v1006, (uint64_t)&v1108, (uint64_t)&v1145, (std::string **)&v1099);
                if (SHIBYTE(v1145.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1145.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1108.__r_.__value_.__l.__data_);
                }
                v339 = (uint64_t *)v1099.__r_.__value_.__r.__words[0];
                v340 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v338);
                v341 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v322 + 56))(v322);
                v342 = RIO_MTLX::Element::setAttribute(v339, v340, v341);
                v343 = (uint64_t *)v1099.__r_.__value_.__r.__words[0];
                v344 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v342);
                std::string::basic_string[abi:ne180100]<0>(&v1108, "value");
                v345 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v997, (unsigned __int8 *)&v1108);
                if (v345)
                {
                  v346 = (const std::string *)(v345 + 40);
LABEL_797:
                  RIO_MTLX::Element::setAttribute(v343, v344, v346);
                  if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1108.__r_.__value_.__l.__data_);
                  }
                  if (v1099.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1099.__r_.__value_.__l.__size_);
                  }
                  goto LABEL_801;
                }
                goto LABEL_796;
              }
LABEL_801:
              if (v321) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v321);
              }
            }
            v1108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1110;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1108);
            uint64_t v262 = (uint64_t)v978;
            v261 = v981;
            v300 = v973;
            v298 = v975;
          }
          if (v1101.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1101.__r_.__value_.__l.__size_);
          }
          if (v988) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v988);
          }
          v317 += 2;
        }
        while (v317 != (uint64_t *)v985);
      }
      v1110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1110);
LABEL_814:
      RIO_MTLX::Element::removeChild((void *)v262, (unsigned __int8 *)(v302 + 48));
      goto LABEL_815;
    }
    break;
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
LABEL_840:
  v360 = RIO_MTLX::EMPTY_STRING(v2);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>((uint64_t)this, (uint64_t)v360, (uint64_t *)&v1173);
  std::string::size_type v363 = v1173.__r_.__value_.__l.__size_;
  for (std::string::size_type m = v1173.__r_.__value_.__r.__words[0]; m != v363; m += 16)
  {
    v365 = *(RIO_MTLX::Output **)m;
    v364 = *(std::__shared_weak_count **)(m + 8);
    if (v364)
    {
      atomic_fetch_add_explicit(&v364->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v364->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v365) {
      goto LABEL_893;
    }
    v366 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v361);
    v361 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v365 + 20, v366);
    if (!v361) {
      goto LABEL_893;
    }
    v367 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v361);
    v368 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v365 + 20, v367);
    if (v368) {
      v369 = (std::string *)(v368 + 40);
    }
    else {
      v369 = (std::string *)RIO_MTLX::EMPTY_STRING(0);
    }
    if (SHIBYTE(v369->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v1169, v369->__r_.__value_.__l.__data_, v369->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v370 = *(_OWORD *)&v369->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v369->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v370;
    }
    std::string::size_type v371 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
    if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v371 = v1169.__r_.__value_.__l.__size_;
    }
    if (!v371)
    {
LABEL_873:
      v378 = 0;
      v379 = 0;
      goto LABEL_881;
    }
    v369 = (std::string *)RIO_MTLX::MULTI_OUTPUT_TYPE_STRING((RIO_MTLX *)v369);
    uint64_t v372 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
    if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v373 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v373 = v1169.__r_.__value_.__l.__size_;
    }
    std::string::size_type v374 = HIBYTE(v369->__r_.__value_.__r.__words[2]);
    int v375 = (char)v374;
    if ((v374 & 0x80u) != 0) {
      std::string::size_type v374 = v369->__r_.__value_.__l.__size_;
    }
    if (v373 == v374)
    {
      if (v375 >= 0) {
        v376 = (const std::string::value_type *)v369;
      }
      else {
        v376 = (const std::string::value_type *)v369->__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v1169.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v369 = (std::string *)memcmp(v1169.__r_.__value_.__l.__data_, v376, v1169.__r_.__value_.__l.__size_);
        if (!v369) {
          goto LABEL_873;
        }
      }
      else
      {
        if (!*((unsigned char *)&v1169.__r_.__value_.__s + 23)) {
          goto LABEL_873;
        }
        v377 = &v1169;
        while (v377->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v376)
        {
          v377 = (std::string *)((char *)v377 + 1);
          ++v376;
          if (!--v372) {
            goto LABEL_873;
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v1164, "out");
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v365, (unsigned __int8 *)&v1164, &__str);
    v378 = (std::__shared_weak_count *)*((void *)&__str + 1);
    v379 = (uint64_t *)__str;
    long long __str = 0uLL;
    if (SHIBYTE(v1165) < 0)
    {
      operator delete((void *)v1164);
      if (v379) {
        goto LABEL_881;
      }
    }
    else if (v379)
    {
      goto LABEL_881;
    }
    std::string::basic_string[abi:ne180100]<0>(&v1164, "out");
    v369 = RIO_MTLX::InterfaceElement::addOutput(v365, (uint64_t)&v1164, &v1169, (uint64_t *)&__str);
    v380 = (std::__shared_weak_count *)*((void *)&__str + 1);
    v379 = (uint64_t *)__str;
    long long __str = 0uLL;
    if (v378)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v378);
      v369 = (std::string *)*((void *)&__str + 1);
      if (*((void *)&__str + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
      }
    }
    if (SHIBYTE(v1165) < 0) {
      operator delete((void *)v1164);
    }
    v378 = v380;
LABEL_881:
    v381 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v369);
    RIO_MTLX::Element::removeAttribute(v365, v381);
    v383 = (unsigned __int8 *)RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(v382);
    v384 = (RIO_MTLX::Output *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v365 + 20, v383);
    if (v384)
    {
      v385 = (RIO_MTLX::Output *)((char *)v384 + 40);
      if (!v379) {
        goto LABEL_890;
      }
    }
    else
    {
      v384 = (RIO_MTLX::Output *)RIO_MTLX::EMPTY_STRING(0);
      v385 = v384;
      if (!v379) {
        goto LABEL_890;
      }
    }
    if (*((char *)v385 + 23) < 0)
    {
      if (!*((void *)v385 + 1)) {
        goto LABEL_890;
      }
LABEL_889:
      v386 = (long long *)RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(v384);
      v384 = (RIO_MTLX::Output *)RIO_MTLX::Element::setAttribute(v379, v386, (const std::string *)v385);
      goto LABEL_890;
    }
    if (*((unsigned char *)v385 + 23)) {
      goto LABEL_889;
    }
LABEL_890:
    v387 = (unsigned __int8 *)RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(v384);
    RIO_MTLX::Element::removeAttribute(v365, v387);
    if (v378) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v378);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1169.__r_.__value_.__l.__data_);
      if (!v364) {
        continue;
      }
LABEL_894:
      std::__shared_weak_count::__release_shared[abi:ne180100](v364);
      std::__shared_weak_count::__release_shared[abi:ne180100](v364);
      continue;
    }
LABEL_893:
    if (v364) {
      goto LABEL_894;
    }
  }
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  v389 = RIO_MTLX::EMPTY_STRING(v388);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>((uint64_t)this, (uint64_t)v389, (uint64_t *)&v1173);
  std::string::size_type v391 = v1173.__r_.__value_.__l.__size_;
  for (std::string::size_type n = v1173.__r_.__value_.__r.__words[0]; n != v391; n += 16)
  {
    v393 = *(unsigned __int8 **)n;
    v392 = *(std::__shared_weak_count **)(n + 8);
    if (v392) {
      atomic_fetch_add_explicit(&v392->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v394 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v393 + 56))(v393);
    int v395 = *(char *)(v394 + 23);
    if (v395 < 0)
    {
      if (*(void *)(v394 + 8) == 7)
      {
        uint64_t v394 = *(void *)v394;
LABEL_907:
        if (*(_DWORD *)v394 == 1718777203 && *(_DWORD *)(v394 + 3) == 1701011814) {
          RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, v393 + 48);
        }
      }
    }
    else if (v395 == 7)
    {
      goto LABEL_907;
    }
    if (v392) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v392);
    }
  }
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  v398 = RIO_MTLX::EMPTY_STRING(v397);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>((uint64_t)this, (uint64_t)v398, (uint64_t *)&v1173);
  std::string::size_type v400 = v1173.__r_.__value_.__l.__size_;
  v399 = (uint64_t *)v1173.__r_.__value_.__r.__words[0];
  if (v1173.__r_.__value_.__r.__words[0] == v1173.__r_.__value_.__l.__size_) {
    goto LABEL_936;
  }
  do
  {
    uint64_t v402 = *v399;
    v401 = (std::__shared_weak_count *)v399[1];
    if (v401) {
      atomic_fetch_add_explicit(&v401->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v1164, "geomattr");
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&v1169, *(uint64_t **)(v402 + 136), *(uint64_t **)(v402 + 144), (uint64_t)&v1164);
    if (SHIBYTE(v1165) < 0) {
      operator delete((void *)v1164);
    }
    std::string::size_type v403 = v1169.__r_.__value_.__l.__size_;
    for (iuint64_t i = v1169.__r_.__value_.__r.__words[0]; ii != v403; ii += 16)
    {
      v405 = *(std::string **)ii;
      v406 = *(std::string **)(ii + 8);
      if (v406)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v406->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v406->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      v1142[1] = v406;
      v1142[0] = v405;
      std::string::basic_string[abi:ne180100]<0>(&v1164, "geomprop");
      RIO_MTLX::Element::changeChildCategory((void *)v402, v1142, (uint64_t)&v1164, (uint64_t)v1143);
      if (v1144) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v1144);
      }
      if ((SHIBYTE(v1165) & 0x80000000) == 0)
      {
        if (!v406) {
          continue;
        }
LABEL_929:
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v406);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v406);
        continue;
      }
      operator delete((void *)v1164);
      if (v406) {
        goto LABEL_929;
      }
    }
    *(void *)&long long v1164 = &v1169;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1164);
    if (v401) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v401);
    }
    v399 += 2;
  }
  while (v399 != (uint64_t *)v400);
LABEL_936:
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  v407 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v407);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164))
    {
      long long v408 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
      if (v1169.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Node>(v408, &v1110);
      if (!v1110.__r_.__value_.__r.__words[0]) {
        goto LABEL_954;
      }
      v409 = (std::string *)(v1110.__r_.__value_.__r.__words[0] + 24);
      int v410 = *(char *)(v1110.__r_.__value_.__r.__words[0] + 47);
      if (v410 < 0)
      {
        if (*(void *)(v1110.__r_.__value_.__r.__words[0] + 32) != 13)
        {
LABEL_954:
          if (v1110.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1110.__r_.__value_.__l.__size_);
          }
          if (*((void *)&v408 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v408 + 1));
          }
          RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
          continue;
        }
        v411 = (uint64_t *)v409->__r_.__value_.__r.__words[0];
      }
      else
      {
        v411 = (uint64_t *)(v1110.__r_.__value_.__r.__words[0] + 24);
        if (v410 != 13) {
          goto LABEL_954;
        }
      }
      uint64_t v412 = *v411;
      uint64_t v413 = *(uint64_t *)((char *)v411 + 5);
      if (v412 == 0x727474616D6F6567 && v413 == 0x65756C6176727474)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "geompropvalue");
        std::string::operator=(v409, (const std::string *)&__str);
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
        std::string::size_type v415 = v1110.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&__str, "attrname");
        v416 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v415 + 160), (unsigned __int8 *)&__str);
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
        if (v416)
        {
          v417 = (uint64_t *)v1110.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__str, "geomprop");
          std::string::size_type v418 = v1110.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "attrname");
          v419 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v418 + 160), (unsigned __int8 *)&__p);
          if (v419) {
            v420 = (const std::string *)(v419 + 40);
          }
          else {
            v420 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
          }
          RIO_MTLX::Element::setAttribute(v417, &__str, v420);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
          v421 = (void *)v1110.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__str, "attrname");
          RIO_MTLX::Element::removeAttribute(v421, (unsigned __int8 *)&__str);
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
        }
      }
      goto LABEL_954;
    }
    break;
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  v422 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v422);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  uint64_t v1 = 1;
  while (2)
  {
    if (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164))
    {
      long long v423 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
      if (v1169.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Node>(v423, v1105);
      v425 = (unsigned __int8 *)v1105[0];
      if (v1105[0])
      {
        v426 = (char *)v1105[0] + 24;
        if (*((char *)v1105[0] + 47) < 0)
        {
          if (*((void *)v1105[0] + 4) != 6) {
            goto LABEL_991;
          }
          v428 = *(char **)v426;
        }
        else
        {
          int v427 = *((unsigned __int8 *)v1105[0] + 47);
          v428 = (char *)v1105[0] + 24;
          if (v427 != 6) {
            goto LABEL_992;
          }
        }
        int v429 = *(_DWORD *)v428;
        int v430 = *((unsigned __int16 *)v428 + 2);
        if (v429 != 1702260329 || v430 != 29810) {
          goto LABEL_991;
        }
        v443 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v1105[0] + 56))(v1105[0]);
        RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE();
        uint64_t v444 = v443[23];
        if ((v444 & 0x80u) == 0) {
          uint64_t v445 = v443[23];
        }
        else {
          uint64_t v445 = *((void *)v443 + 1);
        }
        uint64_t v446 = byte_268C3FB57;
        if (byte_268C3FB57 < 0) {
          uint64_t v446 = qword_268C3FB48;
        }
        if (v445 != v446) {
          goto LABEL_1139;
        }
        if (byte_268C3FB57 >= 0) {
          v447 = &RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
        }
        else {
          v447 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
        }
        if ((v444 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v443, v447, *((void *)v443 + 1)))
          {
LABEL_1139:
            v491 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v1105[0] + 56))(v1105[0]);
            v424 = RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
            uint64_t v492 = v491[23];
            if ((v492 & 0x80u) == 0) {
              uint64_t v493 = v491[23];
            }
            else {
              uint64_t v493 = *((void *)v491 + 1);
            }
            uint64_t v494 = byte_268C3FB87;
            if (byte_268C3FB87 < 0) {
              uint64_t v494 = qword_268C3FB78;
            }
            if (v493 != v494) {
              goto LABEL_991;
            }
            if (byte_268C3FB87 >= 0) {
              v495 = &RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
            }
            else {
              v495 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
            }
            if ((v492 & 0x80) != 0)
            {
              v424 = (uint64_t *)memcmp(*(const void **)v491, v495, *((void *)v491 + 1));
              if (v424) {
                goto LABEL_991;
              }
            }
            else if (v491[23])
            {
              while (*v491 == *(unsigned __int8 *)v495)
              {
                ++v491;
                v495 = (uint64_t *)((char *)v495 + 1);
                if (!--v492) {
                  goto LABEL_1154;
                }
              }
LABEL_991:
              int v427 = v425[47];
              if (((char)v425[47] & 0x80000000) == 0)
              {
LABEL_992:
                int v432 = 0;
                v433 = v425 + 24;
                switch(v427)
                {
                  case 6:
                    if (*(_DWORD *)v426 == 1635020658 && *((_WORD *)v425 + 14) == 25972) {
                      goto LABEL_1005;
                    }
                    goto LABEL_1311;
                  case 7:
                    if (*(_DWORD *)v426 == 1886220131 && *(_DWORD *)(v425 + 27) == 1701994864) {
                      goto LABEL_1070;
                    }
                    int v427 = 7;
                    v449 = (int *)(v425 + 24);
                    goto LABEL_1064;
                  case 8:
                    goto LABEL_1090;
                  case 14:
                    if (*(void *)v426 == 0x726F66736E617274 && *(void *)(v425 + 30) == 0x746E696F706D726FLL) {
                      goto LABEL_1094;
                    }
                    goto LABEL_1311;
                  case 15:
                    if (*(void *)v426 == 0x726F66736E617274 && *(void *)(v425 + 31) == 0x726F746365766D72) {
                      goto LABEL_1094;
                    }
                    if (*(void *)v426 == 0x726F66736E617274 && *(void *)(v425 + 31) == 0x6C616D726F6E6D72) {
                      goto LABEL_1094;
                    }
                    goto LABEL_1311;
                  default:
                    goto LABEL_1311;
                }
              }
              switch(*((void *)v425 + 4))
              {
                case 6:
                  if (**(_DWORD **)v426 != 1635020658 || *(_WORD *)(*(void *)v426 + 4) != 25972) {
                    goto LABEL_1088;
                  }
LABEL_1005:
                  v436 = (std::string *)v1105[0];
                  v437 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v1105[0] + 56))(v1105[0]);
                  RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
                  uint64_t v438 = v437[23];
                  if ((v438 & 0x80u) == 0) {
                    uint64_t v439 = v437[23];
                  }
                  else {
                    uint64_t v439 = *((void *)v437 + 1);
                  }
                  uint64_t v440 = byte_268C3FAC7;
                  if (byte_268C3FAC7 < 0) {
                    uint64_t v440 = qword_268C3FAB8;
                  }
                  v441 = "rotate3d";
                  if (v439 != v440) {
                    goto LABEL_1262;
                  }
                  if (byte_268C3FAC7 >= 0) {
                    v442 = &RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
                  }
                  else {
                    v442 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
                  }
                  if ((v438 & 0x80) != 0)
                  {
                    int v509 = memcmp(*(const void **)v437, v442, *((void *)v437 + 1));
                    v441 = "rotate3d";
                    if (v509) {
                      goto LABEL_1262;
                    }
                  }
                  else if (v437[23])
                  {
                    while (*v437 == *(unsigned __int8 *)v442)
                    {
                      ++v437;
                      v442 = (uint64_t *)((char *)v442 + 1);
                      if (!--v438) {
                        goto LABEL_1199;
                      }
                    }
                    v441 = "rotate3d";
LABEL_1262:
                    std::string::basic_string[abi:ne180100]<0>(&__str, v441);
                    std::string::operator=(v436 + 1, (const std::string *)&__str);
                    goto LABEL_1263;
                  }
LABEL_1199:
                  v441 = "rotate2d";
                  goto LABEL_1262;
                case 7:
                  v449 = *(int **)v426;
                  if (**(_DWORD **)v426 == 1886220131 && *(_DWORD *)(*(void *)v426 + 3) == 1701994864)
                  {
LABEL_1070:
                    v458 = (std::string *)v1105[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "ifgreatereq");
                    std::string::operator=(v458 + 1, (const std::string *)&__str);
                    if (SBYTE7(__str_16) < 0) {
                      operator delete((void *)__str);
                    }
                    v459 = v1105[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "intest");
                    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v459, (unsigned __int8 *)&__str, &__p);
                    if (SBYTE7(__str_16) < 0) {
                      operator delete((void *)__str);
                    }
                    v460 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if (__p.__r_.__value_.__r.__words[0])
                    {
                      std::string::basic_string[abi:ne180100]<0>(&__str, "value1");
                      RIO_MTLX::Element::setName(v460, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                    }
                    v461 = v1105[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "cutoff");
                    v462 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v461 + 12, (unsigned __int8 *)&__str);
                    if (v462)
                    {
                      v464 = (std::string *)*((void *)v462 + 5);
                      v463 = (std::string *)*((void *)v462 + 6);
                      if (v463) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)&v463->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
                      }
                    }
                    else
                    {
                      v463 = 0;
                      v464 = 0;
                    }
                    if (SBYTE7(__str_16) < 0)
                    {
                      operator delete((void *)__str);
                      if (!v464) {
                        goto LABEL_1169;
                      }
LABEL_1158:
                      v497 = v1105[0];
                      v1141[0] = v464;
                      v1141[1] = v463;
                      if (v463) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)&v463->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&__str, "input");
                      RIO_MTLX::Element::changeChildCategory(v497, v1141, (uint64_t)&__str, (uint64_t)&v1110);
                      v498 = (std::__shared_weak_count *)v1110.__r_.__value_.__l.__size_;
                      v499 = (std::string *)v1110.__r_.__value_.__r.__words[0];
                      if (v463) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v463);
                      }
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                      if (v463) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v463);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&__str, "value2");
                      RIO_MTLX::Element::setName(v499, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                    }
                    else
                    {
                      if (v464) {
                        goto LABEL_1158;
                      }
LABEL_1169:
                      v498 = (std::__shared_weak_count *)v463;
                    }
                    v500 = v1105[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "in1");
                    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v500, (unsigned __int8 *)&__str, &v1110);
                    if (SBYTE7(__str_16) < 0) {
                      operator delete((void *)__str);
                    }
                    v501 = v1105[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "in2");
                    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v501, (unsigned __int8 *)&__str, &v1108);
                    if (SBYTE7(__str_16) < 0) {
                      operator delete((void *)__str);
                    }
                    v502 = (std::string *)v1110.__r_.__value_.__r.__words[0];
                    if (v1110.__r_.__value_.__r.__words[0] && v1108.__r_.__value_.__r.__words[0])
                    {
                      std::string::basic_string[abi:ne180100]<0>(v1139, "temp");
                      RIO_MTLX::Element::createValidChildName((uint64_t)this, (uint64_t)v1139, (uint64_t)&__str);
                      RIO_MTLX::Element::setName(v502, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                      if (v1140 < 0) {
                        operator delete(v1139[0]);
                      }
                      v503 = (std::string *)v1108.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&__str, "in1");
                      RIO_MTLX::Element::setName(v503, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                      v504 = (std::string *)v1110.__r_.__value_.__r.__words[0];
                      std::string::basic_string[abi:ne180100]<0>(&__str, "in2");
                      RIO_MTLX::Element::setName(v504, (std::string *)&__str);
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                    }
                    if (v1108.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1108.__r_.__value_.__l.__size_);
                    }
                    if (v1110.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1110.__r_.__value_.__l.__size_);
                    }
                    if (v498) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v498);
                    }
                    goto LABEL_1309;
                  }
LABEL_1064:
                  int v455 = *v449;
                  int v456 = *(int *)((char *)v449 + 3);
                  if (v455 == 1651339107 && v456 == 1701734754)
                  {
                    v486 = v1105[0];
                    std::string::basic_string[abi:ne180100]<0>(&__str, "in4");
                    v487 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v486 + 12, (unsigned __int8 *)&__str);
                    if (v487)
                    {
                      uint64_t v489 = *((void *)v487 + 5);
                      v488 = (std::__shared_weak_count *)*((void *)v487 + 6);
                      if (v488)
                      {
                        atomic_fetch_add_explicit(&v488->__shared_owners_, 1uLL, memory_order_relaxed);
                        std::__shared_weak_count::__release_shared[abi:ne180100](v488);
                      }
                    }
                    else
                    {
                      uint64_t v489 = 0;
                    }
                    if (SBYTE7(__str_16) < 0) {
                      operator delete((void *)__str);
                    }
                    v505 = (std::string *)v1105[0];
                    if (v489)
                    {
                      std::string::basic_string[abi:ne180100]<0>(&__str, "combine4");
                      std::string::operator=(v505 + 1, (const std::string *)&__str);
                    }
                    else
                    {
                      std::string::basic_string[abi:ne180100]<0>(&__str, "in3");
                      v506 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v505[4].__r_.__value_.__r.__words, (unsigned __int8 *)&__str);
                      if (v506)
                      {
                        uint64_t v508 = *((void *)v506 + 5);
                        v507 = (std::__shared_weak_count *)*((void *)v506 + 6);
                        if (v507)
                        {
                          atomic_fetch_add_explicit(&v507->__shared_owners_, 1uLL, memory_order_relaxed);
                          std::__shared_weak_count::__release_shared[abi:ne180100](v507);
                        }
                      }
                      else
                      {
                        uint64_t v508 = 0;
                      }
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                      v540 = (std::string *)v1105[0];
                      if (v508) {
                        std::string::basic_string[abi:ne180100]<0>(&__str, "combine3");
                      }
                      else {
                        std::string::basic_string[abi:ne180100]<0>(&__str, "combine2");
                      }
                      std::string::operator=(v540 + 1, (const std::string *)&__str);
                    }
                    goto LABEL_1263;
                  }
                  if ((v427 & 0x80) == 0) {
                    goto LABEL_1311;
                  }
LABEL_1088:
                  if (*((void *)v425 + 4) == 8)
                  {
                    v433 = *(void **)v426;
                    int v432 = 1;
LABEL_1090:
                    if (*v433 == 0x6574617261706573)
                    {
                      v475 = v1105[0];
                      std::string::basic_string[abi:ne180100]<0>(&__str, "in");
                      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v475, (unsigned __int8 *)&__str, &__p);
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                      if (!__p.__r_.__value_.__r.__words[0]) {
                        goto LABEL_1309;
                      }
                      v476 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_
                                                                                                  + 56))(__p.__r_.__value_.__r.__words[0]);
                      RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE();
                      uint64_t v477 = v476[23];
                      if ((v477 & 0x80u) == 0) {
                        uint64_t v478 = v476[23];
                      }
                      else {
                        uint64_t v478 = *((void *)v476 + 1);
                      }
                      uint64_t v479 = byte_268C3FB27;
                      if (byte_268C3FB27 < 0) {
                        uint64_t v479 = qword_268C3FB18;
                      }
                      if (v478 != v479) {
                        goto LABEL_1246;
                      }
                      if (byte_268C3FB27 >= 0) {
                        v480 = &RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
                      }
                      else {
                        v480 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
                      }
                      if ((v477 & 0x80) != 0)
                      {
                        if (memcmp(*(const void **)v476, v480, *((void *)v476 + 1))) {
                          goto LABEL_1246;
                        }
                        goto LABEL_1281;
                      }
                      if (!v476[23]) {
                        goto LABEL_1281;
                      }
                      v481 = v476;
                      while (*v481 == *(unsigned __int8 *)v480)
                      {
                        ++v481;
                        v480 = (uint64_t *)((char *)v480 + 1);
                        if (!--v477) {
                          goto LABEL_1281;
                        }
                      }
LABEL_1246:
                      RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE();
                      uint64_t v529 = v476[23];
                      if ((v529 & 0x80u) == 0) {
                        uint64_t v530 = v476[23];
                      }
                      else {
                        uint64_t v530 = *((void *)v476 + 1);
                      }
                      uint64_t v531 = byte_268C3FA97;
                      if (byte_268C3FA97 < 0) {
                        uint64_t v531 = qword_268C3FA88;
                      }
                      if (v530 == v531)
                      {
                        if (byte_268C3FA97 >= 0) {
                          v532 = &RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
                        }
                        else {
                          v532 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
                        }
                        if ((v529 & 0x80) != 0)
                        {
                          if (memcmp(*(const void **)v476, v532, *((void *)v476 + 1))) {
                            goto LABEL_1266;
                          }
                        }
                        else if (v476[23])
                        {
                          v533 = v476;
                          while (*v533 == *(unsigned __int8 *)v532)
                          {
                            ++v533;
                            v532 = (uint64_t *)((char *)v532 + 1);
                            if (!--v529) {
                              goto LABEL_1281;
                            }
                          }
                          goto LABEL_1266;
                        }
LABEL_1281:
                        v539 = (std::string *)v1105[0];
                        std::string::basic_string[abi:ne180100]<0>(&__str, "separate4");
                        std::string::operator=(v539 + 1, (const std::string *)&__str);
LABEL_1307:
                        if (SBYTE7(__str_16) < 0) {
                          operator delete((void *)__str);
                        }
LABEL_1309:
                        v528 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                        if (!__p.__r_.__value_.__l.__size_) {
                          goto LABEL_1311;
                        }
LABEL_1310:
                        std::__shared_weak_count::__release_shared[abi:ne180100](v528);
                        goto LABEL_1311;
                      }
LABEL_1266:
                      RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
                      uint64_t v534 = v476[23];
                      if ((v534 & 0x80u) == 0) {
                        uint64_t v535 = v476[23];
                      }
                      else {
                        uint64_t v535 = *((void *)v476 + 1);
                      }
                      uint64_t v536 = byte_268C3FAF7;
                      if (byte_268C3FAF7 < 0) {
                        uint64_t v536 = qword_268C3FAE8;
                      }
                      if (v535 == v536)
                      {
                        if (byte_268C3FAF7 >= 0) {
                          v537 = &RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
                        }
                        else {
                          v537 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
                        }
                        if ((v534 & 0x80) != 0)
                        {
                          if (memcmp(*(const void **)v476, v537, *((void *)v476 + 1))) {
                            goto LABEL_1290;
                          }
                        }
                        else if (v476[23])
                        {
                          v538 = v476;
                          while (*v538 == *(unsigned __int8 *)v537)
                          {
                            ++v538;
                            v537 = (uint64_t *)((char *)v537 + 1);
                            if (!--v534) {
                              goto LABEL_1306;
                            }
                          }
                          goto LABEL_1290;
                        }
LABEL_1306:
                        v546 = (std::string *)v1105[0];
                        std::string::basic_string[abi:ne180100]<0>(&__str, "separate3");
                        std::string::operator=(v546 + 1, (const std::string *)&__str);
                        goto LABEL_1307;
                      }
LABEL_1290:
                      RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
                      uint64_t v541 = v476[23];
                      if ((v541 & 0x80u) == 0) {
                        uint64_t v542 = v476[23];
                      }
                      else {
                        uint64_t v542 = *((void *)v476 + 1);
                      }
                      uint64_t v543 = byte_268C3FA67;
                      if (byte_268C3FA67 < 0) {
                        uint64_t v543 = qword_268C3FA58;
                      }
                      if (v542 == v543)
                      {
                        if (byte_268C3FA67 >= 0) {
                          v544 = &RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
                        }
                        else {
                          v544 = (uint64_t *)RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
                        }
                        if ((v541 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v476, v544, *((void *)v476 + 1))) {
                            goto LABEL_1306;
                          }
                        }
                        else
                        {
                          if (!v476[23]) {
                            goto LABEL_1306;
                          }
                          while (*v476 == *(unsigned __int8 *)v544)
                          {
                            ++v476;
                            v544 = (uint64_t *)((char *)v544 + 1);
                            if (!--v541) {
                              goto LABEL_1306;
                            }
                          }
                        }
                      }
                      v545 = (std::string *)v1105[0];
                      std::string::basic_string[abi:ne180100]<0>(&__str, "separate2");
                      std::string::operator=(v545 + 1, (const std::string *)&__str);
                      goto LABEL_1307;
                    }
                    if (v432)
                    {
                      if (*((void *)v425 + 4) != 8) {
                        goto LABEL_1311;
                      }
                      v426 = *(char **)v426;
                    }
                    else if (v427 != 8)
                    {
                      goto LABEL_1311;
                    }
                    if (*(void *)v426 == 0x706F72646B636162)
                    {
                      if (*((char *)v1105[0] + 71) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)&__str, *((const std::string::value_type **)v1105[0] + 6), *((void *)v1105[0] + 7));
                      }
                      else
                      {
                        long long __str = *((_OWORD *)v1105[0] + 3);
                        *(void *)&long long __str_16 = *((void *)v1105[0] + 8);
                      }
                      uint64_t v510 = BYTE7(__str_16);
                      if (SBYTE7(__str_16) < 0) {
                        uint64_t v510 = *((void *)&__str + 1);
                      }
                      if (!v510)
                      {
                        v511 = (char *)RIO_MTLX::Backdrop::CATEGORY((RIO_MTLX::Backdrop *)v424);
                        v512 = v511;
                        if (v511[23] >= 0) {
                          size_t v513 = v511[23];
                        }
                        else {
                          size_t v513 = *((void *)v511 + 1);
                        }
                        std::string::basic_string[abi:ne180100]((uint64_t)&v1110, v513 + 1);
                        if ((v1110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          v514 = &v1110;
                        }
                        else {
                          v514 = (std::string *)v1110.__r_.__value_.__r.__words[0];
                        }
                        if (v513)
                        {
                          if (v512[23] >= 0) {
                            v515 = v512;
                          }
                          else {
                            v515 = *(char **)v512;
                          }
                          memmove(v514, v515, v513);
                        }
                        *(_WORD *)((char *)&v514->__r_.__value_.__l.__data_ + v513) = 49;
                        RIO_MTLX::Element::createValidChildName((uint64_t)this, (uint64_t)&v1110, (uint64_t)&__p);
                        if (SBYTE7(__str_16) < 0) {
                          operator delete((void *)__str);
                        }
                        long long __str = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                        *(void *)&long long __str_16 = *((void *)&__p.__r_.__value_.__l + 2);
                        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
                        __p.__r_.__value_.__s.__data_[0] = 0;
                        if (SHIBYTE(v1110.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v1110.__r_.__value_.__l.__data_);
                        }
                      }
                      std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v1108, this + 1);
                      v516 = operator new(0x118uLL);
                      v516[1] = 0;
                      v516[2] = 0;
                      void *v516 = &unk_26F331BE0;
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1108.__r_.__value_.__l.__data_;
                      *(_OWORD *)&v1108.__r_.__value_.__l.__data_ = 0uLL;
                      RIO_MTLX::Backdrop::Backdrop((RIO_MTLX::Backdrop *)(v516 + 3), (uint64_t *)&__p, (uint64_t)&__str);
                      if (__p.__r_.__value_.__l.__size_) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                      }
                      v1103.__r_.__value_.__r.__words[0] = (std::string::size_type)(v516 + 3);
                      v1103.__r_.__value_.__l.__size_ = (std::string::size_type)v516;
                      std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v1103, v516 + 4, (uint64_t)(v516 + 3));
                      if (v1108.__r_.__value_.__l.__size_) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1108.__r_.__value_.__l.__size_);
                      }
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v1103.__r_.__value_.__l.__data_;
                      if (v1103.__r_.__value_.__l.__size_) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1103.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                      }
                      ((void (*)(uint64_t **, std::string *))(*this)[5])(this, &__p);
                      if (__p.__r_.__value_.__l.__size_) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                      }
                      if (SBYTE7(__str_16) < 0) {
                        operator delete((void *)__str);
                      }
                      v517 = (uint64_t **)v1105[0];
                      std::string::basic_string[abi:ne180100]<0>(&__p, "parameter");
                      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&__str, v517[17], v517[18], (uint64_t)&__p);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      v519 = (uint64_t *)*((void *)&__str + 1);
                      for (juint64_t j = (uint64_t *)__str; jj != v519; jj += 2)
                      {
                        uint64_t v522 = *jj;
                        v521 = (std::__shared_weak_count *)jj[1];
                        if (v521) {
                          atomic_fetch_add_explicit(&v521->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        v523 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v518);
                        v518 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v522 + 160), v523);
                        if (v518)
                        {
                          v524 = (uint64_t *)v1103.__r_.__value_.__r.__words[0];
                          v525 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v518);
                          v526 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v522 + 160), v525);
                          if (v526) {
                            v527 = (const std::string *)(v526 + 40);
                          }
                          else {
                            v527 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
                          }
                          v518 = RIO_MTLX::Element::setAttribute(v524, (long long *)(v522 + 48), v527);
                        }
                        if (v521) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v521);
                        }
                      }
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                      RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Node>(this, (unsigned __int8 *)v1105[0] + 48);
                      v528 = (std::__shared_weak_count *)v1103.__r_.__value_.__l.__size_;
                      if (v1103.__r_.__value_.__l.__size_) {
                        goto LABEL_1310;
                      }
                    }
                  }
                  goto LABEL_1311;
                case 0xELL:
                  if (**(void **)v426 != 0x726F66736E617274
                    || *(void *)(*(void *)v426 + 6) != 0x746E696F706D726FLL)
                  {
                    goto LABEL_1088;
                  }
                  goto LABEL_1094;
                case 0xFLL:
                  v465 = *(uint64_t **)v426;
                  if (**(void **)v426 != 0x726F66736E617274
                    || *(void *)(*(void *)v426 + 7) != 0x726F746365766D72)
                  {
                    uint64_t v467 = *v465;
                    uint64_t v468 = *(uint64_t *)((char *)v465 + 7);
                    if (v467 != 0x726F66736E617274 || v468 != 0x6C616D726F6E6D72) {
                      goto LABEL_1088;
                    }
                  }
LABEL_1094:
                  v470 = v1105[0];
                  std::string::basic_string[abi:ne180100]<0>(&__str, "fromspace");
                  v471 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v470 + 12, (unsigned __int8 *)&__str);
                  if (v471)
                  {
                    uint64_t v472 = *((void *)v471 + 5);
                    v473 = (std::__shared_weak_count *)*((void *)v471 + 6);
                    if (v473) {
                      atomic_fetch_add_explicit(&v473->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (v472)
                    {
                      BOOL v474 = 0;
                      goto LABEL_1131;
                    }
                  }
                  else
                  {
                    v473 = 0;
                  }
                  v482 = v1105[0];
                  std::string::basic_string[abi:ne180100]<0>(&__p, "tospace");
                  v483 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v482 + 12, (unsigned __int8 *)&__p);
                  if (v483)
                  {
                    uint64_t v485 = *((void *)v483 + 5);
                    v484 = (std::__shared_weak_count *)*((void *)v483 + 6);
                    if (v484)
                    {
                      atomic_fetch_add_explicit(&v484->__shared_owners_, 1uLL, memory_order_relaxed);
                      std::__shared_weak_count::__release_shared[abi:ne180100](v484);
                    }
                  }
                  else
                  {
                    uint64_t v485 = 0;
                  }
                  BOOL v474 = v485 == 0;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
LABEL_1131:
                  if (v473) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v473);
                  }
                  if (SBYTE7(__str_16) < 0)
                  {
                    operator delete((void *)__str);
                    if (!v474) {
                      goto LABEL_1311;
                    }
                  }
                  else if (!v474)
                  {
                    goto LABEL_1311;
                  }
                  v490 = (std::string *)v1105[0];
                  std::string::basic_string[abi:ne180100]<0>(&__str, "transformmatrix");
                  std::string::operator=(v490 + 1, (const std::string *)&__str);
                  goto LABEL_1263;
                default:
                  goto LABEL_1088;
              }
            }
          }
        }
        else if (v443[23])
        {
          while (*v443 == *(unsigned __int8 *)v447)
          {
            ++v443;
            v447 = (uint64_t *)((char *)v447 + 1);
            if (!--v444) {
              goto LABEL_1154;
            }
          }
          goto LABEL_1139;
        }
LABEL_1154:
        v496 = (std::string *)v1105[0];
        std::string::basic_string[abi:ne180100]<0>(&__str, "invertmatrix");
        std::string::operator=(v496 + 1, (const std::string *)&__str);
LABEL_1263:
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
      }
LABEL_1311:
      if (v1105[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1105[1]);
      }
      if (*((void *)&v423 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v423 + 1));
      }
      RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
      continue;
    }
    break;
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
  std::string::basic_string[abi:ne180100]<0>(v547, "ND_backdrop");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v1173);
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v1173, "ND_invert_matrix33");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v1173);
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v1173, "ND_invert_matrix44");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v1173);
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v1173, "ND_rotate_vector2");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v1173);
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v1173, "ND_rotate_vector3");
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v1173);
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
LABEL_1326:
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(&v1173, "r", "x");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(&v1175[8], "a", "y");
  uint64_t v548 = 0;
  long long v1137 = 0u;
  long long v1136 = 0u;
  float v1138 = 1.0;
  do
  {
    unint64_t v549 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v1137 + 8, (uint64_t)(&v1173 + 2 * v548));
    unint64_t v550 = v549;
    unint64_t v551 = *((void *)&v1136 + 1);
    if (*((void *)&v1136 + 1))
    {
      uint8x8_t v552 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v1136 + 8));
      v552.i16[0] = vaddlv_u8(v552);
      unint64_t v553 = v552.u32[0];
      if (v552.u32[0] > 1uLL)
      {
        uint64_t v1 = v549;
        if (v549 >= *((void *)&v1136 + 1)) {
          uint64_t v1 = v549 % *((void *)&v1136 + 1);
        }
      }
      else
      {
        uint64_t v1 = (*((void *)&v1136 + 1) - 1) & v549;
      }
      v554 = *(unsigned __int8 ***)(v1136 + 8 * v1);
      if (v554)
      {
        for (kuint64_t k = *v554; kk; kuint64_t k = *(unsigned __int8 **)kk)
        {
          unint64_t v556 = *((void *)kk + 1);
          if (v556 == v550)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v1138, kk + 16, (unsigned __int8 *)&v1173 + 48 * v548))goto LABEL_1364; {
          }
            }
          else
          {
            if (v553 > 1)
            {
              if (v556 >= v551) {
                v556 %= v551;
              }
            }
            else
            {
              v556 &= v551 - 1;
            }
            if (v556 != v1) {
              break;
            }
          }
        }
      }
    }
    v557 = (char *)operator new(0x40uLL);
    v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)v557;
    v1169.__r_.__value_.__l.__size_ = (std::string::size_type)&v1137;
    v1169.__r_.__value_.__s.__data_[16] = 0;
    *(void *)v557 = 0;
    *((void *)v557 + 1) = v550;
    std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v557 + 16), (long long *)&v1173 + 3 * v548);
    v1169.__r_.__value_.__s.__data_[16] = 1;
    float v558 = (float)(unint64_t)(*((void *)&v1137 + 1) + 1);
    if (!v551 || (float)(v1138 * (float)v551) < v558)
    {
      BOOL v559 = (v551 & (v551 - 1)) != 0;
      if (v551 < 3) {
        BOOL v559 = 1;
      }
      unint64_t v560 = v559 | (2 * v551);
      unint64_t v561 = vcvtps_u32_f32(v558 / v1138);
      if (v560 <= v561) {
        size_t v562 = v561;
      }
      else {
        size_t v562 = v560;
      }
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>((uint64_t)&v1136, v562);
      unint64_t v551 = *((void *)&v1136 + 1);
      if ((*((void *)&v1136 + 1) & (*((void *)&v1136 + 1) - 1)) != 0)
      {
        if (v550 >= *((void *)&v1136 + 1)) {
          uint64_t v1 = v550 % *((void *)&v1136 + 1);
        }
        else {
          uint64_t v1 = v550;
        }
      }
      else
      {
        uint64_t v1 = (*((void *)&v1136 + 1) - 1) & v550;
      }
    }
    v563 = *(void **)(v1136 + 8 * v1);
    if (v563)
    {
      *(void *)v1169.__r_.__value_.__l.__data_ = *v563;
      void *v563 = v1169.__r_.__value_.__r.__words[0];
    }
    else
    {
      *(void *)v1169.__r_.__value_.__l.__data_ = v1137;
      *(void *)&long long v1137 = v1169.__r_.__value_.__r.__words[0];
      *(void *)(v1136 + 8 * v1) = &v1137;
      if (*(void *)v1169.__r_.__value_.__l.__data_)
      {
        unint64_t v564 = *(void *)(*(void *)v1169.__r_.__value_.__l.__data_ + 8);
        if ((v551 & (v551 - 1)) != 0)
        {
          if (v564 >= v551) {
            v564 %= v551;
          }
        }
        else
        {
          v564 &= v551 - 1;
        }
        *(void *)(v1136 + 8 * v564) = v1169.__r_.__value_.__r.__words[0];
      }
    }
    v1169.__r_.__value_.__r.__words[0] = 0;
    ++*((void *)&v1137 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v1169, 0);
LABEL_1364:
    ++v548;
  }
  while (v548 != 2);
  for (mstd::string::size_type m = 0; mm != -12; mm -= 6)
  {
    v566 = (void **)((char *)&v1173.__r_.__value_.__l.__data_ + mm * 8);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[mm + 2]) < 0) {
      operator delete(v566[9]);
    }
    if (*((char *)v566 + 71) < 0) {
      operator delete(v566[6]);
    }
  }
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1173);
  *(void *)&v1175[8] = 0;
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)&v1173.__r_.__value_.__l.__data_;
  if (v1173.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1173.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  v1170 = 0;
  v1169.__r_.__value_.__r.__words[2] = 0;
  uint64_t v1171 = 0;
  v567 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1169.__r_.__value_.__r.__words[2], (void *)v1173.__r_.__value_.__r.__words[2], (void *)v1174, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1174 - v1173.__r_.__value_.__r.__words[2]) >> 3));
  long long v1172 = *(_OWORD *)v1175;
  RIO_MTLX::NULL_TREE_ITERATOR(v567);
  long long v1164 = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1168 = xmmword_268C3FDB0;
  while (1)
  {
    BOOL v568 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v1169, (uint64_t)&v1164);
    if (v568) {
      break;
    }
    long long v569 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
    if (v1169.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    v570 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v568);
    v571 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v569 + 160), v570);
    if (v571) {
      v572 = (uint64_t *)(v571 + 40);
    }
    else {
      v572 = RIO_MTLX::EMPTY_STRING(0);
    }
    int v573 = *((char *)v572 + 23);
    if (v573 < 0)
    {
      if (v572[1] != 6) {
        goto LABEL_1461;
      }
      v572 = (uint64_t *)*v572;
    }
    else if (v573 != 6)
    {
      goto LABEL_1461;
    }
    if (*(_DWORD *)v572 == 1869377379 && *((_WORD *)v572 + 2) == 12914)
    {
      v575 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v572);
      RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
      RIO_MTLX::Element::setAttribute((uint64_t *)v569, v575, (const std::string *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v);
      v576 = *(std::__shared_weak_count **)(v569 + 232);
      if (v576)
      {
        v576 = std::__shared_weak_count::lock(v576);
        v577 = v576;
        if (v576) {
          v576 = *(std::__shared_weak_count **)(v569 + 224);
        }
      }
      else
      {
        v577 = 0;
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Node>((uint64_t)v576, &v1108);
      if (v577) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v577);
      }
      if (!v1108.__r_.__value_.__r.__words[0]) {
        goto LABEL_1459;
      }
      RIO_MTLX::Node::getDownstreamPorts((RIO_MTLX::Node *)v1108.__r_.__value_.__l.__data_, (uint64_t *)&__str);
      uint64_t v579 = *((void *)&__str + 1);
      uint64_t v580 = __str;
      while (2)
      {
        if (v580 == v579)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          std::string::size_type v594 = v1108.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__str, "channels");
          v595 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v594 + 96), (unsigned __int8 *)&__str);
          if (v595)
          {
            v597 = (uint64_t *)*((void *)v595 + 5);
            v596 = (std::__shared_weak_count *)*((void *)v595 + 6);
            if (v596) {
              atomic_fetch_add_explicit(&v596->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            v596 = 0;
            v597 = 0;
          }
          if (SBYTE7(__str_16) < 0)
          {
            operator delete((void *)__str);
            if (v597) {
              goto LABEL_1441;
            }
          }
          else
          {
            if (!v597) {
              goto LABEL_1457;
            }
LABEL_1441:
            v598 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v595);
            v599 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v597 + 20, v598);
            if (v599)
            {
              v600 = (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v599);
              v601 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v597 + 20, v600);
              if (v601) {
                v602 = (uint64_t *)(v601 + 40);
              }
              else {
                v602 = RIO_MTLX::EMPTY_STRING(0);
              }
              if (*((char *)v602 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__str, (const std::string::value_type *)*v602, v602[1]);
              }
              else
              {
                long long v603 = *(_OWORD *)v602;
                *(void *)&long long __str_16 = v602[2];
                long long __str = v603;
              }
              if (SBYTE7(__str_16) < 0)
              {
                std::string::__init_copy_ctor_external(&v1133, (const std::string::value_type *)__str, *((std::string::size_type *)&__str + 1));
              }
              else
              {
                *(_OWORD *)&v1133.__r_.__value_.__l.__data_ = __str;
                v1133.__r_.__value_.__r.__words[2] = __str_16;
              }
              RIO_MTLX::replaceSubstrings(&v1133, (uint64_t)&v1136, (uint64_t)&__p);
              if (SBYTE7(__str_16) < 0) {
                operator delete((void *)__str);
              }
              long long __str = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)&long long __str_16 = *((void *)&__p.__r_.__value_.__l + 2);
              *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
              __p.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v1133.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1133.__r_.__value_.__l.__data_);
              }
              v605 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v604);
              RIO_MTLX::Element::setAttribute(v597, v605, (const std::string *)&__str);
              if (SBYTE7(__str_16) < 0) {
                operator delete((void *)__str);
              }
            }
          }
LABEL_1457:
          if (v596) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v596);
          }
LABEL_1459:
          if (v1108.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1108.__r_.__value_.__l.__size_);
          }
          break;
        }
        v582 = *(RIO_MTLX::PortElement **)v580;
        v581 = *(std::__shared_weak_count **)(v580 + 8);
        if (v581) {
          atomic_fetch_add_explicit(&v581->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v583 = (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE((RIO_MTLX::PortElement *)v578);
        v584 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v582 + 20, v583);
        if (v584)
        {
          Channels = RIO_MTLX::PortElement::getChannels(v582);
          if (*((char *)Channels + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*Channels, Channels[1]);
          }
          else
          {
            long long v586 = *(_OWORD *)Channels;
            __p.__r_.__value_.__r.__words[2] = Channels[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v586;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v1135, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v1135 = __p;
          }
          RIO_MTLX::replaceSubstrings(&v1135, (uint64_t)&v1136, (uint64_t)&v1110);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v1110;
          *((unsigned char *)&v1110.__r_.__value_.__s + 23) = 0;
          v1110.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v1135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1135.__r_.__value_.__l.__data_);
          }
          v588 = (long long *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(v587);
          v584 = RIO_MTLX::Element::setAttribute((uint64_t *)v582, v588, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v589 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v584);
        v578 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v582 + 20, v589);
        if (!v578) {
          goto LABEL_1428;
        }
        Outputuint64_t String = RIO_MTLX::PortElement::getOutputString(v582);
        if (*((char *)OutputString + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*OutputString, OutputString[1]);
        }
        else
        {
          long long v591 = *(_OWORD *)OutputString;
          __p.__r_.__value_.__r.__words[2] = OutputString[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v591;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v1134, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v1134 = __p;
        }
        RIO_MTLX::replaceSubstrings(&v1134, (uint64_t)&v1136, (uint64_t)&v1110);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v1110;
        *((unsigned char *)&v1110.__r_.__value_.__s + 23) = 0;
        v1110.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v1134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1134.__r_.__value_.__l.__data_);
        }
        v593 = (long long *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(v592);
        v578 = RIO_MTLX::Element::setAttribute((uint64_t *)v582, v593, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v581) {
LABEL_1429:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v581);
        }
        else
        {
LABEL_1428:
          if (v581) {
            goto LABEL_1429;
          }
        }
        v580 += 16;
        continue;
      }
    }
LABEL_1461:
    if (*((void *)&v569 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v569 + 1));
    }
    RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1169);
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1173);
  std::string::basic_string[abi:ne180100]<0>(v606, "material");
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&__str, this[17], this[18], (uint64_t)&v1173);
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
  v976 = (std::string *)*((void *)&__str + 1);
  v607 = (std::string *)__str;
  if ((void)__str != *((void *)&__str + 1))
  {
LABEL_1467:
    std::string::size_type v608 = v607->__r_.__value_.__r.__words[0];
    v609 = (std::__shared_weak_count *)v607->__r_.__value_.__l.__size_;
    if (v609) {
      atomic_fetch_add_explicit(&v609->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v994 = (std::string *)v609;
    std::string::basic_string[abi:ne180100]<0>(&v1173, "shaderref");
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&__p, *(uint64_t **)(v608 + 136), *(uint64_t **)(v608 + 144), (uint64_t)&v1173);
    if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1173.__r_.__value_.__l.__data_);
    }
    v979 = v607;
    v982 = (std::string *)v608;
    v989 = (std::string *)__p.__r_.__value_.__l.__size_;
    v610 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    {
      v612 = 0;
      v611 = 0;
      goto LABEL_1641;
    }
    v611 = 0;
    v612 = 0;
    v986 = (std::string *)(v608 + 72);
    while (1)
    {
      uint64_t v613 = v610->__r_.__value_.__r.__words[0];
      v614 = (std::__shared_weak_count *)v610->__r_.__value_.__l.__size_;
      if (v614)
      {
        atomic_fetch_add_explicit(&v614->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v614->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v1132[0] = v613;
      v1132[1] = (uint64_t)v614;
      if (v614) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v614);
      }
      if (v1092) {
        v615 = (const std::string::value_type **)(*(uint64_t (**)(RIO_MTLX::NodeDef *))(*(void *)v1092 + 56))(v1092);
      }
      else {
        v615 = (const std::string::value_type **)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(0);
      }
      if (*((char *)v615 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1110, *v615, (std::string::size_type)v615[1]);
      }
      else
      {
        long long v616 = *(_OWORD *)v615;
        v1110.__r_.__value_.__r.__words[2] = (std::string::size_type)v615[2];
        *(_OWORD *)&v1110.__r_.__value_.__l.__data_ = v616;
      }
      if (v1092)
      {
        v617 = RIO_MTLX::NodeDef::getNodeString(v1092);
      }
      else
      {
        v618 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(0);
        v619 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v613 + 160), v618);
        if (v619) {
          v617 = (uint64_t *)(v619 + 40);
        }
        else {
          v617 = RIO_MTLX::EMPTY_STRING(0);
        }
      }
      if (*((char *)v617 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1108, (const std::string::value_type *)*v617, v617[1]);
      }
      else
      {
        long long v620 = *(_OWORD *)v617;
        v1108.__r_.__value_.__r.__words[2] = v617[2];
        *(_OWORD *)&v1108.__r_.__value_.__l.__data_ = v620;
      }
      if (*(char *)(v613 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v1131, *(const std::string::value_type **)(v613 + 48), *(void *)(v613 + 56));
      }
      else {
        std::string v1131 = *(std::string *)(v613 + 48);
      }
      RIO_MTLX::Element::createValidChildName((uint64_t)this, (uint64_t)&v1131, (uint64_t)v1105);
      if (SHIBYTE(v1131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1131.__r_.__value_.__l.__data_);
      }
      v621 = RIO_MTLX::GraphElement::addNode((RIO_MTLX::Node *)this, &v1108, (uint64_t)v1105, &v1110, (uint64_t *)&v1088);
      v622 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v621);
      v623 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v613 + 160), v622);
      if (v623) {
        v624 = (uint64_t *)(v623 + 40);
      }
      else {
        v624 = RIO_MTLX::EMPTY_STRING(0);
      }
      if (*((char *)v624 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1103, (const std::string::value_type *)*v624, v624[1]);
      }
      else
      {
        long long v625 = *(_OWORD *)v624;
        v1103.__r_.__value_.__r.__words[2] = v624[2];
        *(_OWORD *)&v1103.__r_.__value_.__l.__data_ = v625;
      }
      v626 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v624);
      v627 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v613 + 160), v626);
      if (v627) {
        v628 = (uint64_t *)(v627 + 40);
      }
      else {
        v628 = RIO_MTLX::EMPTY_STRING(0);
      }
      if (*((char *)v628 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1101, (const std::string::value_type *)*v628, v628[1]);
      }
      else
      {
        long long v629 = *(_OWORD *)v628;
        v1101.__r_.__value_.__r.__words[2] = v628[2];
        *(_OWORD *)&v1101.__r_.__value_.__l.__data_ = v629;
      }
      v630 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v628);
      v631 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v613 + 160), v630);
      if (v631) {
        v632 = (std::string *)(v631 + 40);
      }
      else {
        v632 = (std::string *)RIO_MTLX::EMPTY_STRING(0);
      }
      if (SHIBYTE(v632->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v1099, v632->__r_.__value_.__l.__data_, v632->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v633 = *(_OWORD *)&v632->__r_.__value_.__l.__data_;
        v1099.__r_.__value_.__r.__words[2] = v632->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1099.__r_.__value_.__l.__data_ = v633;
      }
      std::string::size_type v634 = HIBYTE(v1103.__r_.__value_.__r.__words[2]);
      if ((v1103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v634 = v1103.__r_.__value_.__l.__size_;
      }
      if (v634)
      {
        v635 = (uint64_t *)v1088;
        v636 = (long long *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v632);
        v632 = RIO_MTLX::Element::setAttribute(v635, v636, &v1103);
      }
      std::string::size_type v637 = HIBYTE(v1101.__r_.__value_.__r.__words[2]);
      if ((v1101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v637 = v1101.__r_.__value_.__l.__size_;
      }
      if (v637)
      {
        v638 = (uint64_t *)v1088;
        v639 = (long long *)RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v632);
        v632 = RIO_MTLX::Element::setAttribute(v638, v639, &v1101);
      }
      std::string::size_type v640 = HIBYTE(v1099.__r_.__value_.__r.__words[2]);
      if ((v1099.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v640 = v1099.__r_.__value_.__l.__size_;
      }
      if (v640)
      {
        v641 = (uint64_t *)v1088;
        v642 = (long long *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v632);
        RIO_MTLX::Element::setAttribute(v641, v642, &v1099);
      }
      v643 = (RIO_MTLX *)std::string::operator=((std::string *)v1088 + 3, (const std::string *)(v613 + 72));
      v998 = v612;
      v1002 = (std::string *)v614;
      v1007 = v611;
      v644 = *(std::string::size_type **)(v613 + 136);
      v645 = *(std::string::size_type **)(v613 + 144);
      while (v644 != v645)
      {
        std::string::size_type v646 = *v644;
        v647 = (std::__shared_weak_count *)v644[1];
        if (v647) {
          atomic_fetch_add_explicit(&v647->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v648 = v646 + 24;
        int v649 = *(char *)(v646 + 47);
        if (v649 < 0)
        {
          if (*(void *)(v646 + 32) != 9) {
            goto LABEL_1557;
          }
          std::string::size_type v648 = *(void *)v648;
        }
        else if (v649 != 9)
        {
          goto LABEL_1557;
        }
        BOOL v650 = *(void *)v648 == 0x75706E69646E6962 && *(unsigned char *)(v648 + 8) == 116;
        if (v650 || (*(void *)v648 == 0x61726170646E6962 ? (BOOL v651 = *(unsigned char *)(v648 + 8) == 109) : (BOOL v651 = 0), v651))
        {
          v656 = (RIO_MTLX::Input *)v1088;
          v657 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING(v643);
          RIO_MTLX::InterfaceElement::addInput(v656, v646 + 48, v657, (uint64_t *)&v1173);
          v658 = (std::__shared_weak_count *)v1173.__r_.__value_.__l.__size_;
          v643 = (RIO_MTLX *)v1173.__r_.__value_.__r.__words[0];
          if (v1173.__r_.__value_.__r.__words[0]) {
            goto LABEL_1551;
          }
        }
        else
        {
          std::string::size_type v652 = *(void *)v648;
          int v653 = *(unsigned __int8 *)(v648 + 8);
          if (v652 != 0x656B6F74646E6962 || v653 != 110) {
            goto LABEL_1557;
          }
          v655 = v1088;
          if (*(char *)(v646 + 71) < 0) {
            std::string::__init_copy_ctor_external(&v1173, *(const std::string::value_type **)(v646 + 48), *(void *)(v646 + 56));
          }
          else {
            std::string v1173 = *(std::string *)(v646 + 48);
          }
          std::string::size_type v659 = HIBYTE(v1173.__r_.__value_.__r.__words[2]);
          if ((v1173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v659 = v1173.__r_.__value_.__l.__size_;
          }
          if (!v659)
          {
            v660 = (char *)RIO_MTLX::Token::CATEGORY(v643);
            v661 = v660;
            if (v660[23] >= 0) {
              size_t v662 = v660[23];
            }
            else {
              size_t v662 = *((void *)v660 + 1);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v1164, v662 + 1);
            if (v1165 >= 0) {
              v663 = &v1164;
            }
            else {
              v663 = (long long *)v1164;
            }
            if (v662)
            {
              if (v661[23] >= 0) {
                v664 = v661;
              }
              else {
                v664 = *(char **)v661;
              }
              memmove(v663, v664, v662);
            }
            *(_WORD *)((char *)v663 + v662) = 49;
            RIO_MTLX::Element::createValidChildName((uint64_t)v655, (uint64_t)&v1164, (uint64_t)&v1169);
            if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1173.__r_.__value_.__l.__data_);
            }
            std::string v1173 = v1169;
            *((unsigned char *)&v1169.__r_.__value_.__s + 23) = 0;
            v1169.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v1165) < 0) {
              operator delete((void *)v1164);
            }
          }
          std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(v1096, v655 + 1);
          v665 = operator new(0x118uLL);
          v665[1] = 0;
          v665[2] = 0;
          void *v665 = &unk_26F331C80;
          *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = *(_OWORD *)v1096;
          v1096[0] = 0;
          v1096[1] = 0;
          RIO_MTLX::Token::Token((RIO_MTLX::Token *)(v665 + 3), (uint64_t *)&v1169, (uint64_t)&v1173);
          if (v1169.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
          }
          *(void *)&long long v1126 = v665 + 3;
          *((void *)&v1126 + 1) = v665;
          std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v1126, v665 + 4, (uint64_t)(v665 + 3));
          if (v1096[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1096[1]);
          }
          *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1126;
          if (*((void *)&v1126 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1126 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *, std::string *))(*v655 + 40))(v655, &v1169);
          if (v1169.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1173.__r_.__value_.__l.__data_);
          }
          v658 = (std::__shared_weak_count *)*((void *)&v1126 + 1);
          v643 = (RIO_MTLX *)v1126;
          if ((void)v1126)
          {
LABEL_1551:
            v1173.__r_.__value_.__r.__words[0] = v646;
            v1173.__r_.__value_.__l.__size_ = (std::string::size_type)v647;
            if (v647) {
              atomic_fetch_add_explicit(&v647->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            RIO_MTLX::Element::copyContentFrom((uint64_t)v643, (const std::string **)&v1173);
            v643 = (RIO_MTLX *)v1173.__r_.__value_.__l.__size_;
            if (v1173.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1173.__r_.__value_.__l.__size_);
            }
          }
        }
        if (v658) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v658);
        }
LABEL_1557:
        if (v647) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v647);
        }
        v644 += 2;
      }
      v612 = v998;
      if (v998)
      {
        v609 = (std::__shared_weak_count *)v994;
        v666 = (std::__shared_weak_count *)v1002;
        v611 = v1007;
      }
      else
      {
        v609 = (std::__shared_weak_count *)v994;
        v666 = (std::__shared_weak_count *)v1002;
        std::string::basic_string[abi:ne180100]<0>(&v1130, "temp");
        if ((v1130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v667 = &v1130;
        }
        else {
          v667 = (std::string *)v1130.__r_.__value_.__r.__words[0];
        }
        if ((v1130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v668 = HIBYTE(v1130.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v668 = v1130.__r_.__value_.__l.__size_;
        }
        for (; v668; --v668)
        {
            v667->__r_.__value_.__s.__data_[0] = 95;
          v667 = (std::string *)((char *)v667 + 1);
        }
        std::string v1173 = v1130;
        memset(&v1130, 0, sizeof(v1130));
        v1128 = (const std::string *)v1088;
        v1129 = v1089;
        if (v1089) {
          atomic_fetch_add_explicit(&v1089->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RIO_MTLX::GraphElement::addMaterialNode((RIO_MTLX *)this, (uint64_t)&v1173, &v1128, (uint64_t *)&v1169);
        std::string::size_type v669 = v1169.__r_.__value_.__l.__size_;
        v612 = (std::string *)v1169.__r_.__value_.__r.__words[0];
        *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = 0uLL;
        if (v1007)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1007);
          if (v1169.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
          }
        }
        if (v1129) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1129);
        }
        if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1173.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1130.__r_.__value_.__l.__data_);
        }
        v611 = (std::__shared_weak_count *)v669;
        std::string::operator=(v612 + 3, v986);
      }
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v612, (unsigned __int8 *)&v1110, &v1173);
      std::string::size_type v670 = v1173.__r_.__value_.__r.__words[0];
      if (v1173.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1173.__r_.__value_.__l.__size_);
      }
      if (!v670)
      {
        v671 = RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)v612, (uint64_t)&v1110, &v1110, (uint64_t *)&v1173);
        v672 = (uint64_t *)v1173.__r_.__value_.__r.__words[0];
        v673 = (const std::string *)v1088;
        v674 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v671);
        RIO_MTLX::Element::setAttribute(v672, v674, v673 + 2);
        if (v1173.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1173.__r_.__value_.__l.__size_);
        }
      }
      if (SHIBYTE(v1099.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1099.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1101.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1103.__r_.__value_.__l.__data_);
      }
      if (v1089) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v1089);
      }
      if ((char)v1106 < 0) {
        operator delete(v1105[0]);
      }
      if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1108.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1110.__r_.__value_.__l.__data_);
      }
      if (v1093) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v1093);
      }
      if (v666) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v666);
      }
      v610 = (std::string *)((char *)v610 + 16);
      if (v610 == v989)
      {
LABEL_1641:
        v1173.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1173);
        RIO_MTLX::Element::removeChild(this, (unsigned __int8 *)&v982[2]);
        if (v612)
        {
          RIO_MTLX::Element::setName(v612, v982 + 2);
          v675 = (unsigned __int8 *)v982[8].__r_.__value_.__l.__size_;
          for (nstd::string::size_type n = (unsigned __int8 *)v982[8].__r_.__value_.__r.__words[2]; v675 != nn; v675 += 24)
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v612[6].__r_.__value_.__r.__words[2], v675))
            {
              v677 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v982[6].__r_.__value_.__r.__words[2], v675);
              if (v677) {
                v678 = (const std::string *)(v677 + 40);
              }
              else {
                v678 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
              }
              RIO_MTLX::Element::setAttribute((uint64_t *)v612, (long long *)v675, v678);
            }
          }
        }
        if (v611) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v611);
        }
        if (v609) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v609);
        }
        v607 = (std::string *)&v979->__r_.__value_.__r.__words[2];
        if (&v979->__r_.__value_.__r.__words[2] == (std::string::size_type *)v976) {
          break;
        }
        goto LABEL_1467;
      }
    }
  }
  v1173.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1173);
  std::string::basic_string[abi:ne180100]<0>(&v1126, "atan2");
  std::string::basic_string[abi:ne180100]<0>(&v1125, "in1");
  std::string::basic_string[abi:ne180100]<0>(&v1124, "in2");
  std::string::basic_string[abi:ne180100]<0>(v1122, "rotate3d");
  std::string::basic_string[abi:ne180100]<0>(v1120, "axis");
  std::string::basic_string[abi:ne180100]<0>(v1118, "1.0");
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)this, (unsigned __int8 *)&v1126, (uint64_t *)&v1173);
  std::string::size_type v680 = v1173.__r_.__value_.__l.__size_;
  v679 = (uint64_t *)v1173.__r_.__value_.__r.__words[0];
  if (v1173.__r_.__value_.__r.__words[0] != v1173.__r_.__value_.__l.__size_)
  {
    char v1008 = 0;
    while (1)
    {
      uint64_t v682 = *v679;
      v681 = (std::__shared_weak_count *)v679[1];
      if (v681) {
        atomic_fetch_add_explicit(&v681->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v682, (unsigned __int8 *)&v1125, &v1164);
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v682, (unsigned __int8 *)&v1124, &__str);
      v683 = RIO_MTLX::ValueElement::getValueString((RIO_MTLX::ValueElement *)v1164);
      if (*((char *)v683 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v1169, (const std::string::value_type *)*v683, v683[1]);
      }
      else
      {
        long long v684 = *(_OWORD *)v683;
        v1169.__r_.__value_.__r.__words[2] = v683[2];
        *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v684;
      }
      uint64_t v685 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
      char v686 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
      if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v687 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v687 = v1169.__r_.__value_.__l.__size_;
      }
      unint64_t v688 = v1119;
      if ((v1119 & 0x80u) != 0) {
        unint64_t v688 = (unint64_t)v1118[1];
      }
      if (v687 == v688)
      {
        if ((v1119 & 0x80u) == 0) {
          v689 = v1118;
        }
        else {
          v689 = (void **)v1118[0];
        }
        if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        {
          v691 = (void *)v1169.__r_.__value_.__r.__words[0];
          if (memcmp(v1169.__r_.__value_.__l.__data_, v689, v1169.__r_.__value_.__l.__size_)) {
            goto LABEL_1680;
          }
LABEL_1677:
          v692 = (uint64_t *)v1164;
          v693 = RIO_MTLX::ValueElement::getValueString((RIO_MTLX::ValueElement *)__str);
          v694 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v693);
          v695 = RIO_MTLX::Element::setAttribute(v692, v694, (const std::string *)v693);
          v696 = (uint64_t *)__str;
          v697 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v695);
          RIO_MTLX::Element::setAttribute(v696, v697, &v1169);
          char v1008 = 1;
          char v686 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
          goto LABEL_1678;
        }
        if (!*((unsigned char *)&v1169.__r_.__value_.__s + 23)) {
          goto LABEL_1677;
        }
        v690 = &v1169;
        while (v690->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v689)
        {
          v690 = (std::string *)((char *)v690 + 1);
          v689 = (void **)((char *)v689 + 1);
          if (!--v685) {
            goto LABEL_1677;
          }
        }
      }
LABEL_1678:
      if (v686 < 0)
      {
        v691 = (void *)v1169.__r_.__value_.__r.__words[0];
LABEL_1680:
        operator delete(v691);
      }
      if (*((void *)&__str + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
      }
      if (*((void *)&v1164 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1164 + 1));
      }
      if (v681) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v681);
      }
      v679 += 2;
      if (v679 == (uint64_t *)v680) {
        goto LABEL_1690;
      }
    }
  }
  char v1008 = 0;
LABEL_1690:
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)this, (unsigned __int8 *)v1122, (uint64_t *)&v1173);
  std::string::size_type v699 = v1173.__r_.__value_.__l.__size_;
  for (std::string::size_type i1 = v1173.__r_.__value_.__r.__words[0]; i1 != v699; i1 += 16)
  {
    v701 = *(void **)i1;
    v700 = *(std::__shared_weak_count **)(i1 + 8);
    if (v700) {
      atomic_fetch_add_explicit(&v700->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v702 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v701 + 12, (unsigned __int8 *)v1120);
    if (!v702) {
      goto LABEL_1707;
    }
    v703 = (std::string *)*((void *)v702 + 5);
    v704 = (std::__shared_weak_count *)*((void *)v702 + 6);
    if (v704)
    {
      atomic_fetch_add_explicit(&v704->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v703) {
        goto LABEL_1706;
      }
      v1114 = v703;
      v1115 = v704;
      atomic_fetch_add_explicit(&v704->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      if (!v703) {
        goto LABEL_1707;
      }
      v1114 = (std::string *)*((void *)v702 + 5);
      v1115 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v1169, "input");
    RIO_MTLX::Element::changeChildCategory(v701, &v1114, (uint64_t)&v1169, (uint64_t)v1116);
    if (v1117) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v1117);
    }
    if ((SHIBYTE(v1169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v704) {
        goto LABEL_1707;
      }
LABEL_1705:
      std::__shared_weak_count::__release_shared[abi:ne180100](v704);
LABEL_1706:
      std::__shared_weak_count::__release_shared[abi:ne180100](v704);
      goto LABEL_1707;
    }
    operator delete(v1169.__r_.__value_.__l.__data_);
    if (v704) {
      goto LABEL_1705;
    }
LABEL_1707:
    if (v700) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v700);
    }
  }
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1173;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(&__p, "dielectric_brdf", "dielectric_bsdf");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(&v1110, "dielectric_btdf", "dielectric_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&v1108, "generalized_schlick_brdf");
  std::string::basic_string[abi:ne180100]<0>(&v1109, "generalized_schlick_bsdf");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v1105, "conductor_brdf", "conductor_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&v1103, "sheen_brdf");
  std::string::basic_string[abi:ne180100]<0>(&v1104, "sheen_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&v1101, "diffuse_brdf");
  std::string::basic_string[abi:ne180100]<0>(&v1102, "oren_nayar_diffuse_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&v1099, "burley_diffuse_brdf");
  std::string::basic_string[abi:ne180100]<0>(&v1100, "burley_diffuse_bsdf");
  std::string::basic_string[abi:ne180100]<0>(v1096, "diffuse_btdf");
  std::string::basic_string[abi:ne180100]<0>(&v1098, "translucent_bsdf");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(&v1092, "subsurface_brdf", "subsurface_bsdf");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(&v1088, "thin_film_brdf", "thin_film_bsdf");
  std::string::basic_string[abi:ne180100]<0>(&__s, "scatter_mode");
  std::string::basic_string[abi:ne180100]<0>(&v1086, "BSDF");
  std::string::basic_string[abi:ne180100]<0>(&v1084, "layer");
  std::string::basic_string[abi:ne180100]<0>(&v1083, "top");
  std::string::basic_string[abi:ne180100]<0>(&v1081, "base");
  std::string::basic_string[abi:ne180100]<0>(v1079, "interior");
  std::string::basic_string[abi:ne180100]<0>(&v1078, "artistic_ior");
  std::string::basic_string[abi:ne180100]<0>(v1076, "complex_ior");
  std::string::basic_string[abi:ne180100]<0>(v1074, "reflectivity");
  std::string::basic_string[abi:ne180100]<0>(v1072, "edge_color");
  std::string::basic_string[abi:ne180100]<0>(&v1071, "ior");
  std::string::basic_string[abi:ne180100]<0>(&v1070, "extinction");
  std::string::basic_string[abi:ne180100]<0>(&v1069, "color3");
  std::string::basic_string[abi:ne180100]<0>(&v1068, "vector3");
  std::string::basic_string[abi:ne180100]<0>(&v1067, "convert");
  std::string::basic_string[abi:ne180100]<0>(v1065, "in");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v1064, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v1064 = __s;
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&__p, &v1062);
  RIO_MTLX::Document::upgradeVersion(void)::$_0::operator()((uint64_t)&v1064, &v1062, &v1113);
  if (v1063) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1063);
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1108, &v1060);
  RIO_MTLX::Document::upgradeVersion(void)::$_0::operator()((uint64_t)&v1064, &v1060, &v1109);
  if (v1061) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1061);
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)v1105, &v1058);
  if (v1058) {
    RIO_MTLX::Element::setName(v1058, &v1107);
  }
  if (v1059) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1059);
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1103, &v1056);
  if (v1056) {
    RIO_MTLX::Element::setName(v1056, &v1104);
  }
  if (v1057) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1057);
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1101, &v1054);
  if (v1054) {
    RIO_MTLX::Element::setName(v1054, &v1102);
  }
  if (v1055) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1055);
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1099, &v1052);
  if (v1052) {
    RIO_MTLX::Element::setName(v1052, &v1100);
  }
  if (v1053) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1053);
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)v1096, &v1050);
  if (v1050) {
    RIO_MTLX::Element::setName(v1050, &v1098);
  }
  if (v1051) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1051);
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1092, &v1048);
  if (v1048) {
    RIO_MTLX::Element::setName(v1048, &v1095);
  }
  if (v1049) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1049);
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)this, (unsigned __int8 *)&v1088, &v1046);
  if (v1046) {
    RIO_MTLX::Element::setName(v1046, &v1091);
  }
  if (v1047) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1047);
  }
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)&v1110);
  RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(this, (unsigned __int8 *)v1076);
  if (SHIBYTE(v1083.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v1173, v1083.__r_.__value_.__l.__data_, v1083.__r_.__value_.__l.__size_);
  }
  else {
    std::string v1173 = v1083;
  }
  if (SHIBYTE(v1082) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v1174, (const std::string::value_type *)v1081, *((std::string::size_type *)&v1081 + 1));
  }
  else
  {
    long long v1174 = v1081;
    *(void *)v1175 = v1082;
  }
  if (SHIBYTE(v1085) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v1175[8], (const std::string::value_type *)v1084, *((std::string::size_type *)&v1084 + 1));
  }
  else
  {
    *(_OWORD *)&v1175[8] = v1084;
    uint64_t v1176 = v1085;
  }
  if (SHIBYTE(v1086.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v1177, v1086.__r_.__value_.__l.__data_, v1086.__r_.__value_.__l.__size_);
  }
  else {
    std::string v1177 = v1086;
  }
  uint64_t v1043 = 0;
  uint64_t v1044 = 0;
  uint64_t v1045 = 0;
  uint64_t v1040 = 0;
  uint64_t v1041 = 0;
  uint64_t v1042 = 0;
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1169);
  *((void *)&v1172 + 1) = 0;
  long long v1164 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
  if (v1169.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  v705 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)v1169.__r_.__value_.__r.__words[2], v1170, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v1170 - v1169.__r_.__value_.__r.__words[2]) >> 3));
  long long v1168 = v1172;
  RIO_MTLX::NULL_TREE_ITERATOR(v705);
  long long __str = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long __str_16 = 0uLL;
  uint64_t v1038 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&__str_16, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1039 = xmmword_268C3FDB0;
  while (!RIO_MTLX::TreeIterator::operator==((uint64_t)&v1164, (uint64_t)&__str))
  {
    long long v706 = v1164;
    if (*((void *)&v1164 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1164 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Node>(v706, &v1034);
    v707 = (std::string *)v1034;
    if (v1034)
    {
      v708 = (const void **)((char *)v1034 + 24);
      v709 = (std::__shared_weak_count *)*((unsigned __int8 *)v1034 + 47);
      if ((v1008 & 1) == 0)
      {
        size_t v710 = *((void *)v1034 + 4);
        goto LABEL_1783;
      }
      size_t v710 = *((void *)v1034 + 4);
      if ((char)v709 >= 0) {
        uint64_t v711 = *((unsigned __int8 *)v1034 + 47);
      }
      else {
        uint64_t v711 = *((void *)v1034 + 4);
      }
      uint64_t v712 = v1127;
      if ((v1127 & 0x80u) != 0) {
        uint64_t v712 = *((void *)&v1126 + 1);
      }
      if (v711 == v712)
      {
        if ((v1127 & 0x80u) == 0) {
          v713 = (unsigned __int8 *)&v1126;
        }
        else {
          v713 = (unsigned __int8 *)v1126;
        }
        if ((v709 & 0x80) != 0)
        {
          if (memcmp(*v708, v713, *((void *)v1034 + 4))) {
            goto LABEL_1783;
          }
        }
        else if (*((unsigned char *)v1034 + 47))
        {
          v714 = (unsigned __int8 *)v1034 + 24;
          uint64_t v715 = *((unsigned __int8 *)v1034 + 47);
          while (*v714 == *v713)
          {
            ++v714;
            ++v713;
            if (!--v715) {
              goto LABEL_1832;
            }
          }
          goto LABEL_1783;
        }
LABEL_1832:
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v707, (unsigned __int8 *)&v1125, &v1029);
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v1034, (unsigned __int8 *)&v1124, &v1020);
        v734 = (std::string *)v1029.__r_.__value_.__r.__words[0];
        if (v1029.__r_.__value_.__r.__words[0])
        {
          if (v1020.__r_.__value_.__r.__words[0])
          {
            v735 = (std::string *)RIO_MTLX::EMPTY_STRING(v733);
            RIO_MTLX::Element::setName(v734, v735);
            RIO_MTLX::Element::setName((std::string *)v1020.__r_.__value_.__l.__data_, &v1125);
            RIO_MTLX::Element::setName((std::string *)v1029.__r_.__value_.__l.__data_, &v1124);
            goto LABEL_1895;
          }
          RIO_MTLX::Element::setName((std::string *)v1029.__r_.__value_.__l.__data_, &v1124);
        }
        if (v1020.__r_.__value_.__r.__words[0]) {
          RIO_MTLX::Element::setName((std::string *)v1020.__r_.__value_.__l.__data_, &v1125);
        }
LABEL_1895:
        if (v1020.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1020.__r_.__value_.__l.__size_);
        }
        std::string::size_type v725 = v1029.__r_.__value_.__l.__size_;
        if (!v1029.__r_.__value_.__l.__size_) {
          goto LABEL_1918;
        }
LABEL_1917:
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v725);
        goto LABEL_1918;
      }
LABEL_1783:
      if ((char)v709 >= 0) {
        v716 = v709;
      }
      else {
        v716 = (std::__shared_weak_count *)v710;
      }
      unint64_t v717 = v1123;
      if ((v1123 & 0x80u) != 0) {
        unint64_t v717 = (unint64_t)v1122[1];
      }
      if (v716 == (std::__shared_weak_count *)v717)
      {
        if ((v1123 & 0x80u) == 0) {
          v718 = v1122;
        }
        else {
          v718 = (void **)v1122[0];
        }
        if ((v709 & 0x80) != 0)
        {
          if (memcmp(*v708, v718, v710)) {
            goto LABEL_1799;
          }
        }
        else if (v709)
        {
          v719 = v707 + 1;
          v720 = v709;
          while (v719->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v718)
          {
            v719 = (std::string *)((char *)v719 + 1);
            v718 = (void **)((char *)v718 + 1);
            v720 = (std::__shared_weak_count *)((char *)v720 - 1);
            if (!v720) {
              goto LABEL_1811;
            }
          }
          goto LABEL_1799;
        }
LABEL_1811:
        std::string::size_type v725 = (std::string::size_type)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v707[4].__r_.__value_.__r.__words, (unsigned __int8 *)v1120);
        if (!v725) {
          goto LABEL_1918;
        }
        v726 = *(std::string **)(v725 + 40);
        v727 = *(std::__shared_weak_count **)(v725 + 48);
        if (v727)
        {
          atomic_fetch_add_explicit(&v727->__shared_owners_, 1uLL, memory_order_relaxed);
          if (v726)
          {
            v728 = v1034;
            v1030 = v726;
            v1031 = v727;
            atomic_fetch_add_explicit(&v727->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_1870;
          }
        }
        else
        {
          if (!v726) {
            goto LABEL_1918;
          }
          v728 = v1034;
          v1030 = *(std::string **)(v725 + 40);
          v1031 = 0;
LABEL_1870:
          std::string::basic_string[abi:ne180100]<0>(&v1029, "input");
          RIO_MTLX::Element::changeChildCategory(v728, &v1030, (uint64_t)&v1029, (uint64_t)v1032);
          std::string::size_type v725 = (std::string::size_type)v1033;
          if (v1033) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v1033);
          }
          if (SHIBYTE(v1029.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1029.__r_.__value_.__l.__data_);
          }
          if (!v727) {
            goto LABEL_1918;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v727);
        }
LABEL_1916:
        std::string::size_type v725 = (std::string::size_type)v727;
        goto LABEL_1917;
      }
LABEL_1799:
      std::string::size_type v721 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v721 = __p.__r_.__value_.__l.__size_;
      }
      if (v716 == (std::__shared_weak_count *)v721)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v709 & 0x80) != 0)
        {
          if (memcmp(*v708, p_p, v710)) {
            goto LABEL_1816;
          }
        }
        else if (v709)
        {
          v723 = v707 + 1;
          v724 = v709;
          while (v723->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
          {
            v723 = (std::string *)((char *)v723 + 1);
            p_p = (std::string *)((char *)p_p + 1);
            v724 = (std::__shared_weak_count *)((char *)v724 - 1);
            if (!v724) {
              goto LABEL_1828;
            }
          }
          goto LABEL_1816;
        }
LABEL_1828:
        std::string::operator=(v707 + 1, &v1113);
        v727 = v1035;
        v1028[0] = (uint64_t)v1034;
        v1028[1] = (uint64_t)v1035;
        if (v1035) {
          atomic_fetch_add_explicit(&v1035->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(&v1173, v1028);
LABEL_1915:
        if (!v727) {
          goto LABEL_1918;
        }
        goto LABEL_1916;
      }
LABEL_1816:
      std::string::size_type v729 = HIBYTE(v1110.__r_.__value_.__r.__words[2]);
      if ((v1110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v729 = v1110.__r_.__value_.__l.__size_;
      }
      if (v716 == (std::__shared_weak_count *)v729)
      {
        if ((v1110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v730 = &v1110;
        }
        else {
          v730 = (std::string *)v1110.__r_.__value_.__r.__words[0];
        }
        if ((v709 & 0x80) != 0)
        {
          if (memcmp(*v708, v730, v710)) {
            goto LABEL_1836;
          }
        }
        else if (v709)
        {
          v731 = v707 + 1;
          v732 = v709;
          while (v731->__r_.__value_.__s.__data_[0] == v730->__r_.__value_.__s.__data_[0])
          {
            v731 = (std::string *)((char *)v731 + 1);
            v730 = (std::string *)((char *)v730 + 1);
            v732 = (std::__shared_weak_count *)((char *)v732 - 1);
            if (!v732) {
              goto LABEL_1848;
            }
          }
          goto LABEL_1836;
        }
LABEL_1848:
        std::string::operator=(v707 + 1, &v1111);
        RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>(v1034, (unsigned __int8 *)v1079);
        v740 = v1034;
        v742 = (const std::string *)RIO_MTLX::STRING_TYPE_STRING(v741);
        RIO_MTLX::InterfaceElement::addInput(v740, (uint64_t)&__s, v742, (uint64_t *)&v1020);
        v743 = (uint64_t *)v1020.__r_.__value_.__r.__words[0];
        v744 = (RIO_MTLX::ValueElement *)std::string::basic_string[abi:ne180100]<0>(&v1029, "T");
        v745 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v744);
        RIO_MTLX::Element::setAttribute(v743, v745, &v1029);
        if (SHIBYTE(v1029.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1029.__r_.__value_.__l.__data_);
        }
        std::string::size_type v725 = v1020.__r_.__value_.__l.__size_;
        if (!v1020.__r_.__value_.__l.__size_) {
          goto LABEL_1918;
        }
        goto LABEL_1917;
      }
LABEL_1836:
      std::string::size_type v736 = HIBYTE(v1108.__r_.__value_.__r.__words[2]);
      if ((v1108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v736 = v1108.__r_.__value_.__l.__size_;
      }
      if (v716 == (std::__shared_weak_count *)v736)
      {
        if ((v1108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v737 = &v1108;
        }
        else {
          v737 = (std::string *)v1108.__r_.__value_.__r.__words[0];
        }
        if ((v709 & 0x80) != 0)
        {
          if (memcmp(*v708, v737, v710)) {
            goto LABEL_1853;
          }
        }
        else if (v709)
        {
          v738 = v707 + 1;
          v739 = v709;
          while (v738->__r_.__value_.__s.__data_[0] == v737->__r_.__value_.__s.__data_[0])
          {
            v738 = (std::string *)((char *)v738 + 1);
            v737 = (std::string *)((char *)v737 + 1);
            v739 = (std::__shared_weak_count *)((char *)v739 - 1);
            if (!v739) {
              goto LABEL_1865;
            }
          }
          goto LABEL_1853;
        }
LABEL_1865:
        std::string::operator=(v707 + 1, &v1109);
        v727 = v1035;
        v1027[0] = (uint64_t)v1034;
        v1027[1] = (uint64_t)v1035;
        if (v1035) {
          atomic_fetch_add_explicit(&v1035->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(&v1173, v1027);
        goto LABEL_1915;
      }
LABEL_1853:
      std::string::size_type v746 = HIBYTE(v1103.__r_.__value_.__r.__words[2]);
      if ((v1103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v746 = v1103.__r_.__value_.__l.__size_;
      }
      if (v716 == (std::__shared_weak_count *)v746)
      {
        if ((v1103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v747 = &v1103;
        }
        else {
          v747 = (std::string *)v1103.__r_.__value_.__r.__words[0];
        }
        if ((v709 & 0x80) != 0)
        {
          if (memcmp(*v708, v747, v710)) {
            goto LABEL_1877;
          }
        }
        else if (v709)
        {
          v748 = v707 + 1;
          v749 = v709;
          while (v748->__r_.__value_.__s.__data_[0] == v747->__r_.__value_.__s.__data_[0])
          {
            v748 = (std::string *)((char *)v748 + 1);
            v747 = (std::string *)((char *)v747 + 1);
            v749 = (std::__shared_weak_count *)((char *)v749 - 1);
            if (!v749) {
              goto LABEL_1889;
            }
          }
          goto LABEL_1877;
        }
LABEL_1889:
        std::string::operator=(v707 + 1, &v1104);
        v727 = v1035;
        v1026[0] = (uint64_t)v1034;
        v1026[1] = (uint64_t)v1035;
        if (v1035) {
          atomic_fetch_add_explicit(&v1035->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(&v1173, v1026);
        goto LABEL_1915;
      }
LABEL_1877:
      unint64_t v750 = v1090;
      if ((v1090 & 0x80u) != 0) {
        unint64_t v750 = (unint64_t)v1089;
      }
      if (v716 == (std::__shared_weak_count *)v750)
      {
        if ((v1090 & 0x80u) == 0) {
          v751 = (unsigned __int8 *)&v1088;
        }
        else {
          v751 = (unsigned __int8 *)v1088;
        }
        if ((v709 & 0x80) != 0)
        {
          if (memcmp(*v708, v751, v710)) {
            goto LABEL_1900;
          }
        }
        else if (v709)
        {
          v752 = v707 + 1;
          v753 = v709;
          while (v752->__r_.__value_.__s.__data_[0] == *v751)
          {
            v752 = (std::string *)((char *)v752 + 1);
            ++v751;
            v753 = (std::__shared_weak_count *)((char *)v753 - 1);
            if (!v753) {
              goto LABEL_1912;
            }
          }
          goto LABEL_1900;
        }
LABEL_1912:
        std::string::operator=(v707 + 1, &v1091);
        v727 = v1035;
        v1025[0] = (uint64_t)v1034;
        v1025[1] = (uint64_t)v1035;
        if (v1035) {
          atomic_fetch_add_explicit(&v1035->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(&v1173, v1025);
        goto LABEL_1915;
      }
LABEL_1900:
      unint64_t v754 = v1106;
      if ((v1106 & 0x80u) != 0) {
        unint64_t v754 = (unint64_t)v1105[1];
      }
      if (v716 == (std::__shared_weak_count *)v754)
      {
        if ((v1106 & 0x80u) == 0) {
          v755 = v1105;
        }
        else {
          v755 = (void **)v1105[0];
        }
        if ((v709 & 0x80) != 0)
        {
          if (memcmp(*v708, v755, v710)) {
            goto LABEL_2028;
          }
        }
        else if (v709)
        {
          v756 = v707 + 1;
          v757 = v709;
          while (v756->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v755)
          {
            v756 = (std::string *)((char *)v756 + 1);
            v755 = (void **)((char *)v755 + 1);
            v757 = (std::__shared_weak_count *)((char *)v757 - 1);
            if (!v757) {
              goto LABEL_2043;
            }
          }
          goto LABEL_2028;
        }
LABEL_2043:
        std::string::operator=(v707 + 1, &v1107);
        v800 = v1034;
        v801 = (std::__shared_weak_count *)*((void *)v1034 + 29);
        if (v801)
        {
          v801 = std::__shared_weak_count::lock(v801);
          v802 = v801;
          if (v801) {
            v801 = (std::__shared_weak_count *)*((void *)v800 + 28);
          }
        }
        else
        {
          v802 = 0;
        }
        RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)v801, &v1023);
        if (v802) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v802);
        }
        v808 = (RIO_MTLX::Node *)v1023;
        v809 = v1034;
        if (*((char *)v1034 + 71) >= 0) {
          size_t v810 = *((unsigned __int8 *)v1034 + 71);
        }
        else {
          size_t v810 = *((void *)v1034 + 7);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v1029, v810 + 14);
        if ((v1029.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v811 = &v1029;
        }
        else {
          v811 = (std::string *)v1029.__r_.__value_.__r.__words[0];
        }
        if (v810)
        {
          if (*((char *)v809 + 71) >= 0) {
            v812 = (char *)v809 + 48;
          }
          else {
            v812 = (const void *)*((void *)v809 + 6);
          }
          memmove(v811, v812, v810);
        }
        strcpy((char *)v811 + v810, "__artistic_ior");
        std::string::basic_string[abi:ne180100]<0>(&v1020, "multioutput");
        RIO_MTLX::GraphElement::addNode(v808, &v1078, (uint64_t)&v1029, &v1020, (uint64_t *)&v1021);
        if (SHIBYTE(v1020.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1020.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1029.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1029.__r_.__value_.__l.__data_);
        }
        RIO_MTLX::InterfaceElement::addOutput(v1021, (uint64_t)&v1071, &v1069, (uint64_t *)&v1029);
        RIO_MTLX::InterfaceElement::addOutput(v1021, (uint64_t)&v1070, &v1069, (uint64_t *)&v1020);
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v1034, (unsigned __int8 *)v1074, &v1018);
        if (v1018)
        {
          RIO_MTLX::InterfaceElement::addInput(v1021, (uint64_t)v1074, &v1069, (uint64_t *)&v1016);
          uint64_t v813 = v1018;
          v814 = v1019;
          if (v1019) {
            atomic_fetch_add_explicit(&v1019->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v816 = v1016;
          v815 = v1017;
          if (v1017) {
            atomic_fetch_add_explicit(&v1017->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v817 = *(unsigned __int8 **)(v813 + 200);
          v818 = *(unsigned __int8 **)(v813 + 208);
          if (v817 != v818)
          {
            v819 = (void *)(v813 + 160);
            do
            {
              v820 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v819, v817);
              if (v820) {
                v821 = (const std::string *)(v820 + 40);
              }
              else {
                v821 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
              }
              RIO_MTLX::Element::setAttribute(v816, (long long *)v817, v821);
              v817 += 24;
            }
            while (v817 != v818);
          }
          if (v815) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v815);
          }
          if (v814) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v814);
          }
          if (v1017) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v1017);
          }
        }
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v1034, (unsigned __int8 *)v1072, &v1016);
        if (v1016)
        {
          RIO_MTLX::InterfaceElement::addInput(v1021, (uint64_t)v1072, &v1069, (uint64_t *)&v1014);
          uint64_t v822 = (uint64_t)v1016;
          v823 = v1017;
          if (v1017) {
            atomic_fetch_add_explicit(&v1017->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v825 = v1014;
          v824 = v1015;
          if (v1015) {
            atomic_fetch_add_explicit(&v1015->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v826 = *(unsigned __int8 **)(v822 + 200);
          v827 = *(unsigned __int8 **)(v822 + 208);
          if (v826 != v827)
          {
            v828 = (void *)(v822 + 160);
            do
            {
              v829 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v828, v826);
              if (v829) {
                v830 = (const std::string *)(v829 + 40);
              }
              else {
                v830 = (const std::string *)RIO_MTLX::EMPTY_STRING(0);
              }
              RIO_MTLX::Element::setAttribute(v825, (long long *)v826, v830);
              v826 += 24;
            }
            while (v826 != v827);
          }
          if (v824) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v824);
          }
          if (v823) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v823);
          }
          if (v1015) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v1015);
          }
        }
        RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>(v1034, (unsigned __int8 *)v1074);
        RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>(v1034, (unsigned __int8 *)v1072);
        v831 = RIO_MTLX::InterfaceElement::addInput(v1034, (uint64_t)&v1071, &v1069, (uint64_t *)&v1014);
        v832 = v1014;
        v833 = (const std::string *)v1021;
        v834 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v831);
        v835 = RIO_MTLX::Element::setAttribute(v832, v834, v833 + 2);
        v836 = v1014;
        v837 = (const std::string *)v1029.__r_.__value_.__r.__words[0];
        v838 = (long long *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v835);
        RIO_MTLX::Element::setAttribute(v836, v838, v837 + 2);
        v839 = RIO_MTLX::InterfaceElement::addInput(v1034, (uint64_t)&v1070, &v1069, (uint64_t *)&v1012);
        v840 = v1012;
        v841 = (const std::string *)v1021;
        v842 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v839);
        v843 = RIO_MTLX::Element::setAttribute(v840, v842, v841 + 2);
        v844 = v1012;
        v845 = (const std::string *)v1020.__r_.__value_.__r.__words[0];
        v846 = (long long *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v843);
        RIO_MTLX::Element::setAttribute(v844, v846, v845 + 2);
        if (v1013) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1013);
        }
        if (v1015) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1015);
        }
        if (v1017) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1017);
        }
        if (v1019) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1019);
        }
        if (v1020.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1020.__r_.__value_.__l.__size_);
        }
        if (v1029.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1029.__r_.__value_.__l.__size_);
        }
        if (v1022) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1022);
        }
        std::string::size_type v725 = (std::string::size_type)v1024;
        if (!v1024) {
          goto LABEL_1918;
        }
        goto LABEL_1917;
      }
LABEL_2028:
      if ((char)v709 >= 0) {
        v794 = v709;
      }
      else {
        v794 = (std::__shared_weak_count *)v710;
      }
      std::string::size_type v795 = HIBYTE(v1101.__r_.__value_.__r.__words[2]);
      if ((v1101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v795 = v1101.__r_.__value_.__l.__size_;
      }
      if (v794 != (std::__shared_weak_count *)v795) {
        goto LABEL_2047;
      }
      if ((v1101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v796 = &v1101;
      }
      else {
        v796 = (std::string *)v1101.__r_.__value_.__r.__words[0];
      }
      if ((v709 & 0x80) == 0)
      {
        v797 = &v1102;
        if (v709)
        {
          v798 = v707 + 1;
          v799 = v709;
          do
          {
            if (v798->__r_.__value_.__s.__data_[0] != v796->__r_.__value_.__s.__data_[0]) {
              goto LABEL_2047;
            }
            v798 = (std::string *)((char *)v798 + 1);
            v796 = (std::string *)((char *)v796 + 1);
            v799 = (std::__shared_weak_count *)((char *)v799 - 1);
          }
          while (v799);
          v797 = &v1102;
        }
        goto LABEL_2159;
      }
      int v803 = memcmp(*v708, v796, v710);
      v797 = &v1102;
      if (v803)
      {
LABEL_2047:
        std::string::size_type v804 = HIBYTE(v1099.__r_.__value_.__r.__words[2]);
        if ((v1099.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v804 = v1099.__r_.__value_.__l.__size_;
        }
        if (v794 != (std::__shared_weak_count *)v804) {
          goto LABEL_2128;
        }
        if ((v1099.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v805 = &v1099;
        }
        else {
          v805 = (std::string *)v1099.__r_.__value_.__r.__words[0];
        }
        if ((v709 & 0x80) == 0)
        {
          v797 = &v1100;
          if (v709)
          {
            v806 = v707 + 1;
            v807 = v709;
            do
            {
              if (v806->__r_.__value_.__s.__data_[0] != v805->__r_.__value_.__s.__data_[0]) {
                goto LABEL_2128;
              }
              v806 = (std::string *)((char *)v806 + 1);
              v805 = (std::string *)((char *)v805 + 1);
              v807 = (std::__shared_weak_count *)((char *)v807 - 1);
            }
            while (v807);
            v797 = &v1100;
          }
          goto LABEL_2159;
        }
        int v847 = memcmp(*v708, v805, v710);
        v797 = &v1100;
        if (v847)
        {
LABEL_2128:
          unint64_t v848 = v1097;
          if ((v1097 & 0x80u) != 0) {
            unint64_t v848 = (unint64_t)v1096[1];
          }
          if (v794 != (std::__shared_weak_count *)v848) {
            goto LABEL_2141;
          }
          if ((v1097 & 0x80u) == 0) {
            v849 = v1096;
          }
          else {
            v849 = (void **)v1096[0];
          }
          if ((v709 & 0x80) == 0)
          {
            v797 = &v1098;
            if (v709)
            {
              v850 = v707 + 1;
              v851 = v709;
              do
              {
                if (v850->__r_.__value_.__s.__data_[0] != *(unsigned __int8 *)v849) {
                  goto LABEL_2141;
                }
                v850 = (std::string *)((char *)v850 + 1);
                v849 = (void **)((char *)v849 + 1);
                v851 = (std::__shared_weak_count *)((char *)v851 - 1);
              }
              while (v851);
              v797 = &v1098;
            }
            goto LABEL_2159;
          }
          int v852 = memcmp(*v708, v849, v710);
          v797 = &v1098;
          if (v852)
          {
LABEL_2141:
            unint64_t v853 = v1094;
            if ((v1094 & 0x80u) != 0) {
              unint64_t v853 = (unint64_t)v1093;
            }
            if (v794 != (std::__shared_weak_count *)v853) {
              goto LABEL_2154;
            }
            if ((v1094 & 0x80u) == 0) {
              v854 = (unsigned __int8 *)&v1092;
            }
            else {
              v854 = (unsigned __int8 *)v1092;
            }
            if ((v709 & 0x80) == 0)
            {
              v797 = &v1095;
              if (v709)
              {
                v855 = v707 + 1;
                do
                {
                  if (v855->__r_.__value_.__s.__data_[0] != *v854) {
                    goto LABEL_2154;
                  }
                  v855 = (std::string *)((char *)v855 + 1);
                  ++v854;
                  v709 = (std::__shared_weak_count *)((char *)v709 - 1);
                }
                while (v709);
                v797 = &v1095;
              }
              goto LABEL_2159;
            }
            int v856 = memcmp(*v708, v854, v710);
            v797 = &v1095;
            if (v856)
            {
LABEL_2154:
              std::string::size_type v725 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v707[1], (unsigned __int8 *)&v1078);
              if (v725)
              {
                RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v1034, (unsigned __int8 *)&v1071, &v1029);
                v858 = (uint64_t *)v1029.__r_.__value_.__r.__words[0];
                if (v1029.__r_.__value_.__r.__words[0])
                {
                  v859 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v857);
                  RIO_MTLX::Element::setAttribute(v858, v859, &v1069);
                }
                RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v1034, (unsigned __int8 *)&v1070, &v1020);
                v861 = (uint64_t *)v1020.__r_.__value_.__r.__words[0];
                if (v1020.__r_.__value_.__r.__words[0])
                {
                  v862 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v860);
                  RIO_MTLX::Element::setAttribute(v861, v862, &v1069);
                }
                goto LABEL_1895;
              }
LABEL_1918:
              v758 = v1034;
              v759 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v725);
              RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>((uint64_t)v758, (uint64_t)v759, (uint64_t *)&v1029);
              std::string::size_type v761 = v1029.__r_.__value_.__l.__size_;
              std::string::size_type v760 = v1029.__r_.__value_.__r.__words[0];
              while (2)
              {
                if (v760 == v761)
                {
                  v1020.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1029;
                  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1020);
                  goto LABEL_2022;
                }
                v762 = *(RIO_MTLX::PortElement **)v760;
                std::string::size_type v763 = *(void *)(v760 + 8);
                v1020.__r_.__value_.__r.__words[0] = *(void *)v760;
                v1020.__r_.__value_.__l.__size_ = v763;
                if (v763) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v763 + 8), 1uLL, memory_order_relaxed);
                }
                v764 = RIO_MTLX::PortElement::getOutputString(v762);
                uint64_t v765 = *((unsigned __int8 *)v764 + 23);
                if ((v765 & 0x80u) == 0) {
                  uint64_t v766 = *((unsigned __int8 *)v764 + 23);
                }
                else {
                  uint64_t v766 = v764[1];
                }
                std::string::size_type v767 = HIBYTE(v1071.__r_.__value_.__r.__words[2]);
                if ((v1071.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v767 = v1071.__r_.__value_.__l.__size_;
                }
                if (v766 == v767)
                {
                  if ((v1071.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v768 = &v1071;
                  }
                  else {
                    v768 = (std::string *)v1071.__r_.__value_.__r.__words[0];
                  }
                  if ((v765 & 0x80) != 0)
                  {
                    if (memcmp((const void *)*v764, v768, v764[1])) {
                      break;
                    }
                  }
                  else if (*((unsigned char *)v764 + 23))
                  {
                    while (*(unsigned __int8 *)v764 == v768->__r_.__value_.__s.__data_[0])
                    {
                      v764 = (uint64_t *)((char *)v764 + 1);
                      v768 = (std::string *)((char *)v768 + 1);
                      if (!--v765) {
                        goto LABEL_1937;
                      }
                    }
                    break;
                  }
LABEL_1937:
                  v769 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type, std::string *))(*(void *)v1020.__r_.__value_.__l.__data_ + 56))(v1020.__r_.__value_.__r.__words[0], v768);
                  uint64_t v770 = v769[23];
                  if ((v770 & 0x80u) == 0) {
                    uint64_t v771 = v769[23];
                  }
                  else {
                    uint64_t v771 = *((void *)v769 + 1);
                  }
                  std::string::size_type v772 = HIBYTE(v1068.__r_.__value_.__r.__words[2]);
                  if ((v1068.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v772 = v1068.__r_.__value_.__l.__size_;
                  }
                  if (v771 != v772) {
                    break;
                  }
                  if ((v1068.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v773 = &v1068;
                  }
                  else {
                    v773 = (std::string *)v1068.__r_.__value_.__r.__words[0];
                  }
                  if ((v770 & 0x80) != 0)
                  {
                    if (memcmp(*(const void **)v769, v773, *((void *)v769 + 1))) {
                      break;
                    }
                  }
                  else if (v769[23])
                  {
                    while (*v769 == v773->__r_.__value_.__s.__data_[0])
                    {
                      ++v769;
                      v773 = (std::string *)((char *)v773 + 1);
                      if (!--v770) {
                        goto LABEL_1981;
                      }
                    }
                    break;
                  }
LABEL_1981:
                  (*(void (**)(std::string **__return_ptr))(*(void *)v1020.__r_.__value_.__l.__data_ + 64))(&v1023);
                  if (v1023)
                  {
                    uint64_t v784 = HIBYTE(v1023[1].__r_.__value_.__r.__words[2]);
                    if ((v784 & 0x80u) == 0) {
                      v785 = (void *)HIBYTE(v1023[1].__r_.__value_.__r.__words[2]);
                    }
                    else {
                      v785 = (void *)v1023[1].__r_.__value_.__l.__size_;
                    }
                    std::string::size_type v786 = HIBYTE(v1078.__r_.__value_.__r.__words[2]);
                    if ((v1078.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v786 = v1078.__r_.__value_.__l.__size_;
                    }
                    if (v785 == (void *)v786)
                    {
                      p_data = (const void **)&v1023[1].__r_.__value_.__l.__data_;
                      if ((v1078.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        v788 = &v1078;
                      }
                      else {
                        v788 = (std::string *)v1078.__r_.__value_.__r.__words[0];
                      }
                      if ((v784 & 0x80) != 0)
                      {
                        if (memcmp(*p_data, v788, v1023[1].__r_.__value_.__l.__size_)) {
                          goto LABEL_2016;
                        }
                      }
                      else if (*((unsigned char *)&v1023[1].__r_.__value_.__s + 23))
                      {
                        while (*(unsigned __int8 *)p_data == v788->__r_.__value_.__s.__data_[0])
                        {
                          p_data = (const void **)((char *)p_data + 1);
                          v788 = (std::string *)((char *)v788 + 1);
                          if (!--v784) {
                            goto LABEL_2013;
                          }
                        }
                        goto LABEL_2016;
                      }
LABEL_2013:
                      std::vector<std::shared_ptr<RIO_MTLX::Input>>::push_back[abi:ne180100](&v1043, (long long *)&v1020);
                    }
                  }
LABEL_2016:
                  if (v1024) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v1024);
                  }
LABEL_2018:
                  if (v1020.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1020.__r_.__value_.__l.__size_);
                  }
                  v760 += 16;
                  continue;
                }
                break;
              }
              v774 = RIO_MTLX::PortElement::getOutputString((RIO_MTLX::PortElement *)v1020.__r_.__value_.__l.__data_);
              uint64_t v775 = *((unsigned __int8 *)v774 + 23);
              if ((v775 & 0x80u) == 0) {
                uint64_t v776 = *((unsigned __int8 *)v774 + 23);
              }
              else {
                uint64_t v776 = v774[1];
              }
              std::string::size_type v777 = HIBYTE(v1070.__r_.__value_.__r.__words[2]);
              if ((v1070.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v777 = v1070.__r_.__value_.__l.__size_;
              }
              if (v776 != v777) {
                goto LABEL_2018;
              }
              if ((v1070.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v778 = &v1070;
              }
              else {
                v778 = (std::string *)v1070.__r_.__value_.__r.__words[0];
              }
              if ((v775 & 0x80) != 0)
              {
                if (memcmp((const void *)*v774, v778, v774[1])) {
                  goto LABEL_2018;
                }
              }
              else if (*((unsigned char *)v774 + 23))
              {
                while (*(unsigned __int8 *)v774 == v778->__r_.__value_.__s.__data_[0])
                {
                  v774 = (uint64_t *)((char *)v774 + 1);
                  v778 = (std::string *)((char *)v778 + 1);
                  if (!--v775) {
                    goto LABEL_1967;
                  }
                }
                goto LABEL_2018;
              }
LABEL_1967:
              v779 = (unsigned __int8 *)(*(uint64_t (**)(std::string::size_type, std::string *))(*(void *)v1020.__r_.__value_.__l.__data_ + 56))(v1020.__r_.__value_.__r.__words[0], v778);
              uint64_t v780 = v779[23];
              if ((v780 & 0x80u) == 0) {
                uint64_t v781 = v779[23];
              }
              else {
                uint64_t v781 = *((void *)v779 + 1);
              }
              std::string::size_type v782 = HIBYTE(v1068.__r_.__value_.__r.__words[2]);
              if ((v1068.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v782 = v1068.__r_.__value_.__l.__size_;
              }
              if (v781 != v782) {
                goto LABEL_2018;
              }
              if ((v1068.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v783 = &v1068;
              }
              else {
                v783 = (std::string *)v1068.__r_.__value_.__r.__words[0];
              }
              if ((v780 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v779, v783, *((void *)v779 + 1))) {
                  goto LABEL_2018;
                }
              }
              else if (v779[23])
              {
                while (*v779 == v783->__r_.__value_.__s.__data_[0])
                {
                  ++v779;
                  v783 = (std::string *)((char *)v783 + 1);
                  if (!--v780) {
                    goto LABEL_1997;
                  }
                }
                goto LABEL_2018;
              }
LABEL_1997:
              (*(void (**)(std::string **__return_ptr))(*(void *)v1020.__r_.__value_.__l.__data_ + 64))(&v1023);
              if (!v1023) {
                goto LABEL_2016;
              }
              uint64_t v789 = HIBYTE(v1023[1].__r_.__value_.__r.__words[2]);
              if ((v789 & 0x80u) == 0) {
                v790 = (void *)HIBYTE(v1023[1].__r_.__value_.__r.__words[2]);
              }
              else {
                v790 = (void *)v1023[1].__r_.__value_.__l.__size_;
              }
              std::string::size_type v791 = HIBYTE(v1078.__r_.__value_.__r.__words[2]);
              if ((v1078.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v791 = v1078.__r_.__value_.__l.__size_;
              }
              if (v790 != (void *)v791) {
                goto LABEL_2016;
              }
              v792 = (const void **)&v1023[1].__r_.__value_.__l.__data_;
              if ((v1078.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v793 = &v1078;
              }
              else {
                v793 = (std::string *)v1078.__r_.__value_.__r.__words[0];
              }
              if ((v789 & 0x80) != 0)
              {
                if (memcmp(*v792, v793, v1023[1].__r_.__value_.__l.__size_)) {
                  goto LABEL_2016;
                }
              }
              else if (*((unsigned char *)&v1023[1].__r_.__value_.__s + 23))
              {
                while (*(unsigned __int8 *)v792 == v793->__r_.__value_.__s.__data_[0])
                {
                  v792 = (const void **)((char *)v792 + 1);
                  v793 = (std::string *)((char *)v793 + 1);
                  if (!--v789) {
                    goto LABEL_2015;
                  }
                }
                goto LABEL_2016;
              }
LABEL_2015:
              std::vector<std::shared_ptr<RIO_MTLX::Input>>::push_back[abi:ne180100](&v1040, (long long *)&v1020);
              goto LABEL_2016;
            }
          }
        }
      }
LABEL_2159:
      std::string::size_type v725 = (std::string::size_type)std::string::operator=(v707 + 1, v797);
      goto LABEL_1918;
    }
LABEL_2022:
    if (v1035) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v1035);
    }
    if (*((void *)&v706 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v706 + 1));
    }
    RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1164);
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&__str);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  uint64_t v864 = v1043;
  for (uint64_t i2 = v1044; v864 != i2; v864 += 16)
  {
    v867 = *(uint64_t **)v864;
    v866 = *(std::__shared_weak_count **)(v864 + 8);
    if (v866) {
      atomic_fetch_add_explicit(&v866->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr, uint64_t *))(*v867 + 64))(&v1164, v867);
    v868 = (std::__shared_weak_count *)v867[29];
    if (v868)
    {
      v869 = std::__shared_weak_count::lock(v868);
      if (v869) {
        uint64_t v870 = v867[28];
      }
      else {
        uint64_t v870 = 0;
      }
    }
    else
    {
      uint64_t v870 = 0;
      v869 = 0;
    }
    v871 = *(std::__shared_weak_count **)(v870 + 232);
    if (v871)
    {
      v871 = std::__shared_weak_count::lock(v871);
      v872 = v871;
      if (v871) {
        v871 = *(std::__shared_weak_count **)(v870 + 224);
      }
    }
    else
    {
      v872 = 0;
    }
    RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)v871, &__str);
    if (v872) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v872);
    }
    v873 = (RIO_MTLX::Node *)__str;
    if (*(char *)(v870 + 71) >= 0) {
      size_t v874 = *(unsigned __int8 *)(v870 + 71);
    }
    else {
      size_t v874 = *(void *)(v870 + 56);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v1169, v874 + 13);
    if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v875 = &v1169;
    }
    else {
      v875 = (std::string *)v1169.__r_.__value_.__r.__words[0];
    }
    if (v874)
    {
      if (*(char *)(v870 + 71) >= 0) {
        v876 = (const void *)(v870 + 48);
      }
      else {
        v876 = *(const void **)(v870 + 48);
      }
      memmove(v875, v876, v874);
    }
    strcpy((char *)v875 + v874, "__convert_ior");
    RIO_MTLX::GraphElement::addNode(v873, &v1067, (uint64_t)&v1169, &v1068, (uint64_t *)&v1029);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    v877 = RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)v1029.__r_.__value_.__l.__data_, (uint64_t)v1065, &v1069, (uint64_t *)&v1169);
    v878 = (uint64_t *)v1169.__r_.__value_.__r.__words[0];
    v879 = (const std::string *)v1164;
    v880 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v877);
    v881 = RIO_MTLX::Element::setAttribute(v878, v880, v879 + 2);
    v882 = (uint64_t *)v1169.__r_.__value_.__r.__words[0];
    v883 = (long long *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v881);
    v884 = RIO_MTLX::Element::setAttribute(v882, v883, &v1071);
    v885 = (const std::string *)v1029.__r_.__value_.__r.__words[0];
    v886 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v884);
    v887 = RIO_MTLX::Element::setAttribute(v867, v886, v885 + 2);
    v888 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v887);
    RIO_MTLX::Element::removeAttribute(v867, v888);
    if (v1169.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
    }
    if (v1029.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1029.__r_.__value_.__l.__size_);
    }
    if (*((void *)&__str + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
    }
    if (v869) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v869);
    }
    v863 = (RIO_MTLX *)*((void *)&v1164 + 1);
    if (*((void *)&v1164 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1164 + 1));
    }
    if (v866) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v866);
    }
  }
  uint64_t v889 = v1040;
  for (uint64_t i3 = v1041; v889 != i3; v889 += 16)
  {
    v892 = *(uint64_t **)v889;
    v891 = *(std::__shared_weak_count **)(v889 + 8);
    if (v891) {
      atomic_fetch_add_explicit(&v891->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr, uint64_t *))(*v892 + 64))(&v1164, v892);
    v893 = (std::__shared_weak_count *)v892[29];
    if (v893)
    {
      v894 = std::__shared_weak_count::lock(v893);
      if (v894) {
        uint64_t v895 = v892[28];
      }
      else {
        uint64_t v895 = 0;
      }
    }
    else
    {
      uint64_t v895 = 0;
      v894 = 0;
    }
    v896 = *(std::__shared_weak_count **)(v895 + 232);
    if (v896)
    {
      v896 = std::__shared_weak_count::lock(v896);
      v897 = v896;
      if (v896) {
        v896 = *(std::__shared_weak_count **)(v895 + 224);
      }
    }
    else
    {
      v897 = 0;
    }
    RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)v896, &__str);
    if (v897) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v897);
    }
    v898 = (RIO_MTLX::Node *)__str;
    if (*(char *)(v895 + 71) >= 0) {
      size_t v899 = *(unsigned __int8 *)(v895 + 71);
    }
    else {
      size_t v899 = *(void *)(v895 + 56);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v1169, v899 + 20);
    if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v900 = &v1169;
    }
    else {
      v900 = (std::string *)v1169.__r_.__value_.__r.__words[0];
    }
    if (v899)
    {
      if (*(char *)(v895 + 71) >= 0) {
        v901 = (const void *)(v895 + 48);
      }
      else {
        v901 = *(const void **)(v895 + 48);
      }
      memmove(v900, v901, v899);
    }
    strcpy((char *)v900 + v899, "__convert_extinction");
    RIO_MTLX::GraphElement::addNode(v898, &v1067, (uint64_t)&v1169, &v1068, (uint64_t *)&v1029);
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    v902 = RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)v1029.__r_.__value_.__l.__data_, (uint64_t)v1065, &v1069, (uint64_t *)&v1169);
    v903 = (uint64_t *)v1169.__r_.__value_.__r.__words[0];
    v904 = (const std::string *)v1164;
    v905 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v902);
    v906 = RIO_MTLX::Element::setAttribute(v903, v905, v904 + 2);
    v907 = (uint64_t *)v1169.__r_.__value_.__r.__words[0];
    v908 = (long long *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v906);
    v909 = RIO_MTLX::Element::setAttribute(v907, v908, &v1070);
    v910 = (const std::string *)v1029.__r_.__value_.__r.__words[0];
    v911 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v909);
    v912 = RIO_MTLX::Element::setAttribute(v892, v911, v910 + 2);
    v913 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE((RIO_MTLX::PortElement *)v912);
    RIO_MTLX::Element::removeAttribute(v892, v913);
    if (v1169.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1169.__r_.__value_.__l.__size_);
    }
    if (v1029.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1029.__r_.__value_.__l.__size_);
    }
    if (*((void *)&__str + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
    }
    if (v894) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v894);
    }
    v863 = (RIO_MTLX *)*((void *)&v1164 + 1);
    if (*((void *)&v1164 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1164 + 1));
    }
    if (v891) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v891);
    }
  }
  v914 = RIO_MTLX::EMPTY_STRING(v863);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeGraph>((uint64_t)this, (uint64_t)v914, (uint64_t *)&v1169);
  v999 = (std::string *)v1169.__r_.__value_.__l.__size_;
  std::string::size_type v916 = v1169.__r_.__value_.__r.__words[0];
  if (v1169.__r_.__value_.__r.__words[0] != v1169.__r_.__value_.__l.__size_)
  {
LABEL_2241:
    v1003 = (std::string *)v916;
    v918 = *(void **)v916;
    v917 = *(std::__shared_weak_count **)(v916 + 8);
    if (v917) {
      atomic_fetch_add_explicit(&v917->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v1009 = v917;
    v919 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(v915);
    RIO_MTLX::Element::removeAttribute(v918, v919);
    *((void *)&v1164 + 1) = 0;
    uint64_t v1165 = 0;
    *(void *)&long long v1164 = (char *)&v1164 + 8;
    v921 = (uint64_t *)v918[17];
    v920 = (uint64_t *)v918[18];
    if (v921 == v920) {
      goto LABEL_2309;
    }
    do
    {
      uint64_t v922 = *v921;
      v923 = (std::__shared_weak_count *)v921[1];
      if (v923) {
        atomic_fetch_add_explicit(&v923->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Node>(v922, &v1029);
      uint64_t v925 = v1029.__r_.__value_.__r.__words[0];
      if (v1029.__r_.__value_.__r.__words[0])
      {
        v926 = RIO_MTLX::EMPTY_STRING(v924);
        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::ValueElement>(v925, (uint64_t)v926, (uint64_t *)&__str);
        uint64_t v927 = *((void *)&__str + 1);
        for (uint64_t i4 = __str; i4 != v927; i4 += 16)
        {
          v929 = *(RIO_MTLX::ValueElement **)i4;
          v930 = *(std::__shared_weak_count **)(i4 + 8);
          if (v930) {
            atomic_fetch_add_explicit(&v930->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Interfaceuint64_t Name = RIO_MTLX::ValueElement::getInterfaceName(v929);
          uint64_t v932 = *((unsigned __int8 *)InterfaceName + 23);
          if ((v932 & 0x80u) != 0) {
            uint64_t v932 = InterfaceName[1];
          }
          if (v932) {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v1164, (const void **)InterfaceName, (uint64_t)InterfaceName);
          }
          if (v930) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v930);
          }
        }
        v1020.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1020);
      }
      if (v1029.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1029.__r_.__value_.__l.__size_);
      }
      if (v923) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v923);
      }
      v921 += 2;
    }
    while (v921 != v920);
    v933 = (_OWORD *)v1164;
    if ((long long *)v1164 == (long long *)((char *)&v1164 + 8)) {
      goto LABEL_2309;
    }
    while (1)
    {
      if (*((char *)v933 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str, *((const std::string::value_type **)v933 + 4), *((void *)v933 + 5));
      }
      else
      {
        long long __str = v933[2];
        *(void *)&long long __str_16 = *((void *)v933 + 6);
      }
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>((uint64_t)v918, (unsigned __int8 *)&__str, &v1034);
      if (!v1034) {
        goto LABEL_2299;
      }
      if (SBYTE7(__str_16) < 0)
      {
        std::string::__init_copy_ctor_external(&v1011, (const std::string::value_type *)__str, *((std::string::size_type *)&__str + 1));
      }
      else
      {
        *(_OWORD *)&v1011.__r_.__value_.__l.__data_ = __str;
        v1011.__r_.__value_.__r.__words[2] = __str_16;
      }
      RIO_MTLX::Element::createValidChildName((uint64_t)v918, (uint64_t)&v1011, (uint64_t)&v1029);
      if (SHIBYTE(v1011.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1011.__r_.__value_.__l.__data_);
      }
      RIO_MTLX::Node::getDownstreamPorts(v1034, (uint64_t *)&v1020);
      std::string::size_type v935 = v1020.__r_.__value_.__l.__size_;
      for (std::string::size_type i5 = v1020.__r_.__value_.__r.__words[0]; i5 != v935; i5 += 16)
      {
        v937 = *(RIO_MTLX::PortElement **)i5;
        v936 = *(std::__shared_weak_count **)(i5 + 8);
        if (v936) {
          atomic_fetch_add_explicit(&v936->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Nodeuint64_t Name = RIO_MTLX::PortElement::getNodeName(v937);
        uint64_t v939 = *((unsigned __int8 *)NodeName + 23);
        if ((v939 & 0x80u) == 0) {
          uint64_t v940 = *((unsigned __int8 *)NodeName + 23);
        }
        else {
          uint64_t v940 = NodeName[1];
        }
        uint64_t v941 = BYTE7(__str_16);
        if (SBYTE7(__str_16) < 0) {
          uint64_t v941 = *((void *)&__str + 1);
        }
        if (v940 == v941)
        {
          if ((SBYTE7(__str_16) & 0x80u) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (long long *)__str;
          }
          if ((v939 & 0x80) != 0)
          {
            Nodeuint64_t Name = (uint64_t *)memcmp((const void *)*NodeName, p_str, NodeName[1]);
            if (NodeName) {
              goto LABEL_2294;
            }
LABEL_2293:
            v943 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)NodeName);
            RIO_MTLX::Element::setAttribute((uint64_t *)v937, v943, &v1029);
            goto LABEL_2294;
          }
          if (!*((unsigned char *)NodeName + 23)) {
            goto LABEL_2293;
          }
          while (*(unsigned __int8 *)NodeName == *(unsigned __int8 *)p_str)
          {
            Nodeuint64_t Name = (uint64_t *)((char *)NodeName + 1);
            p_str = (long long *)((char *)p_str + 1);
            if (!--v939) {
              goto LABEL_2293;
            }
          }
        }
LABEL_2294:
        if (v936) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v936);
        }
      }
      RIO_MTLX::Element::setName((std::string *)v1034, &v1029);
      v1023 = &v1020;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1023);
      if (SHIBYTE(v1029.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1029.__r_.__value_.__l.__data_);
      }
LABEL_2299:
      if (v1035) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v1035);
      }
      if (SBYTE7(__str_16) < 0) {
        operator delete((void *)__str);
      }
      v944 = (void *)*((void *)v933 + 1);
      if (v944)
      {
        do
        {
          v945 = v944;
          v944 = (void *)*v944;
        }
        while (v944);
      }
      else
      {
        do
        {
          v945 = (_OWORD *)*((void *)v933 + 2);
          BOOL v3 = *(void *)v945 == (void)v933;
          v933 = v945;
        }
        while (!v3);
      }
      v933 = v945;
      if (v945 == (long long *)((char *)&v1164 + 8))
      {
LABEL_2309:
        std::__tree<std::string>::destroy((uint64_t)&v1164, *((char **)&v1164 + 1));
        v915 = (RIO_MTLX::InterfaceElement *)v1009;
        if (v1009) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v1009);
        }
        std::string::size_type v916 = (std::string::size_type)&v1003->__r_.__value_.__r.__words[2];
        if (&v1003->__r_.__value_.__r.__words[2] == (std::string::size_type *)v999) {
          break;
        }
        goto LABEL_2241;
      }
    }
  }
  *(void *)&long long v1164 = &v1169;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1164);
  RIO_MTLX::Element::traverseTree((RIO_MTLX::Element *)this, (uint64_t)&v1169);
  *((void *)&v1172 + 1) = 0;
  long long v1164 = *(_OWORD *)&v1169.__r_.__value_.__l.__data_;
  if (v1169.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1169.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1166 = 0;
  uint64_t v1165 = 0;
  uint64_t v1167 = 0;
  v946 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&v1165, (void *)v1169.__r_.__value_.__r.__words[2], v1170, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v1170 - v1169.__r_.__value_.__r.__words[2]) >> 3));
  long long v1168 = v1172;
  RIO_MTLX::NULL_TREE_ITERATOR(v946);
  long long __str = RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
  if (*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&RIO_MTLX::NULL_TREE_ITERATOR(void)::v + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long __str_16 = 0uLL;
  uint64_t v1038 = 0;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(&__str_16, (void *)qword_268C3FD98, unk_268C3FDA0, 0xAAAAAAAAAAAAAAABLL * ((unk_268C3FDA0 - qword_268C3FD98) >> 3));
  long long v1039 = xmmword_268C3FDB0;
  while (1)
  {
    BOOL v947 = RIO_MTLX::TreeIterator::operator==((uint64_t)&v1164, (uint64_t)&__str);
    if (v947) {
      break;
    }
    long long v948 = v1164;
    if (*((void *)&v1164 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1164 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v949 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v947);
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v948, &v1029);
    std::string::size_type v950 = v1029.__r_.__value_.__r.__words[0];
    if (v1029.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1029.__r_.__value_.__l.__size_);
    }
    if (v950)
    {
      int v951 = *((char *)v949 + 23);
      uint64_t v952 = v949[1];
      if (v951 >= 0) {
        uint64_t v952 = *((unsigned __int8 *)v949 + 23);
      }
      if (!v952) {
        goto LABEL_2339;
      }
      uint64_t v953 = *(unsigned __int8 *)(v948 + 47);
      uint64_t v954 = (v953 & 0x80u) == 0 ? *(unsigned __int8 *)(v948 + 47) : *(void *)(v948 + 32);
      if (v954 == v952)
      {
        v955 = (const void **)(v948 + 24);
        if (v951 >= 0) {
          v956 = (unsigned __int8 *)v949;
        }
        else {
          v956 = (unsigned __int8 *)*v949;
        }
        if ((v953 & 0x80) != 0)
        {
          if (memcmp(*v955, v956, *(void *)(v948 + 32))) {
            goto LABEL_2378;
          }
LABEL_2339:
          std::string::basic_string[abi:ne180100]<0>(&v1020, "parameter");
          RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>((uint64_t *)&v1029, *(uint64_t **)(v948 + 136), *(uint64_t **)(v948 + 144), (uint64_t)&v1020);
          if (SHIBYTE(v1020.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v1020.__r_.__value_.__l.__data_);
          }
          std::string::size_type v958 = v1029.__r_.__value_.__l.__size_;
          std::string::size_type v957 = v1029.__r_.__value_.__r.__words[0];
          if (v1029.__r_.__value_.__r.__words[0] == v1029.__r_.__value_.__l.__size_)
          {
LABEL_2377:
            v1020.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1029;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1020);
            goto LABEL_2378;
          }
          while (2)
          {
            v959 = *(std::string **)v957;
            v960 = *(std::string **)(v957 + 8);
            if (v960)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)&v960->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit((atomic_ullong *volatile)&v960->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
            }
            v1010[0] = v959;
            v1010[1] = v960;
            std::string::basic_string[abi:ne180100]<0>(&v1020, "input");
            RIO_MTLX::Element::changeChildCategory((void *)v948, v1010, (uint64_t)&v1020, (uint64_t)&v1023);
            RIO_MTLX::Element::asA<RIO_MTLX::Input>((uint64_t)v1023, &v1034);
            v961 = (RIO_MTLX *)v1024;
            if (v1024) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v1024);
            }
            if (SHIBYTE(v1020.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v1020.__r_.__value_.__l.__data_);
              if (v960) {
LABEL_2348:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v960);
            }
            else if (v960)
            {
              goto LABEL_2348;
            }
            v962 = RIO_MTLX::EMPTY_STRING(v961);
            RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v948, &v1020);
            std::string::size_type v963 = v1020.__r_.__value_.__l.__size_;
            std::string::size_type v964 = v1020.__r_.__value_.__r.__words[0];
            if (v1020.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v1020.__r_.__value_.__l.__size_);
            }
            if (v964)
            {
              int v965 = *((char *)v962 + 23);
              uint64_t v966 = v962[1];
              if (v965 >= 0) {
                uint64_t v966 = *((unsigned __int8 *)v962 + 23);
              }
              if (v966)
              {
                uint64_t v967 = *(unsigned __int8 *)(v948 + 47);
                if ((v967 & 0x80u) == 0) {
                  uint64_t v968 = *(unsigned __int8 *)(v948 + 47);
                }
                else {
                  uint64_t v968 = *(void *)(v948 + 32);
                }
                if (v968 != v966) {
                  goto LABEL_2372;
                }
                if (v965 >= 0) {
                  v969 = (unsigned __int8 *)v962;
                }
                else {
                  v969 = (unsigned __int8 *)*v962;
                }
                if ((v967 & 0x80) != 0)
                {
                  std::string::size_type v963 = memcmp(*(const void **)(v948 + 24), v969, *(void *)(v948 + 32));
                  if (v963) {
                    goto LABEL_2372;
                  }
                }
                else if (*(unsigned char *)(v948 + 47))
                {
                  v970 = (unsigned __int8 *)(v948 + 24);
                  while (*v970 == *v969)
                  {
                    ++v970;
                    ++v969;
                    if (!--v967) {
                      goto LABEL_2371;
                    }
                  }
                  goto LABEL_2372;
                }
              }
LABEL_2371:
              v971 = (uint64_t *)v1034;
              v1020.__r_.__value_.__s.__data_[0] = 1;
              v972 = (long long *)RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE((RIO_MTLX::ValueElement *)v963);
              RIO_MTLX::Element::setTypedAttribute<BOOL>(v971, v972, (RIO_MTLX *)&v1020);
            }
LABEL_2372:
            if (v1035) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v1035);
            }
            if (v960) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v960);
            }
            v957 += 16;
            if (v957 == v958) {
              goto LABEL_2377;
            }
            continue;
          }
        }
        if (!*(unsigned char *)(v948 + 47)) {
          goto LABEL_2339;
        }
        while (*(unsigned __int8 *)v955 == *v956)
        {
          v955 = (const void **)((char *)v955 + 1);
          ++v956;
          if (!--v953) {
            goto LABEL_2339;
          }
        }
      }
    }
LABEL_2378:
    if (*((void *)&v948 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v948 + 1));
    }
    RIO_MTLX::TreeIterator::operator++((uint64_t *)&v1164);
  }
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&__str);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1164);
  RIO_MTLX::TreeIterator::~TreeIterator((RIO_MTLX::TreeIterator *)&v1169);
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1040;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  v1169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1043;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1169);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176) < 0) {
    operator delete(*(void **)&v1175[8]);
  }
  if ((v1175[7] & 0x80000000) != 0) {
    operator delete((void *)v1174);
  }
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1064.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1064.__r_.__value_.__l.__data_);
  }
  if (v1066 < 0) {
    operator delete(v1065[0]);
  }
  if (SHIBYTE(v1067.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1067.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1068.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1068.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1069.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1069.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1070.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1070.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1071.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1071.__r_.__value_.__l.__data_);
  }
  if (v1073 < 0) {
    operator delete(v1072[0]);
  }
  if (v1075 < 0) {
    operator delete(v1074[0]);
  }
  if (v1077 < 0) {
    operator delete(v1076[0]);
  }
  if (SHIBYTE(v1078.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1078.__r_.__value_.__l.__data_);
  }
  if (v1080 < 0) {
    operator delete(v1079[0]);
  }
  if (SHIBYTE(v1082) < 0) {
    operator delete((void *)v1081);
  }
  if (SHIBYTE(v1083.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1083.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1085) < 0) {
    operator delete((void *)v1084);
  }
  if (SHIBYTE(v1086.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1086.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1091.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1091.__r_.__value_.__l.__data_);
  }
  if ((char)v1090 < 0) {
    operator delete(v1088);
  }
  if (SHIBYTE(v1095.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1095.__r_.__value_.__l.__data_);
  }
  if ((char)v1094 < 0) {
    operator delete(v1092);
  }
  if (SHIBYTE(v1098.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1098.__r_.__value_.__l.__data_);
  }
  if ((char)v1097 < 0) {
    operator delete(v1096[0]);
  }
  if (SHIBYTE(v1100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1099.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1099.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1104.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1107.__r_.__value_.__l.__data_);
  }
  if ((char)v1106 < 0) {
    operator delete(v1105[0]);
  }
  if (SHIBYTE(v1109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1109.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1108.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1111.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1110.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1113.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v1119 < 0) {
    operator delete(v1118[0]);
  }
  if (v1121 < 0) {
    operator delete(v1120[0]);
  }
  if ((char)v1123 < 0) {
    operator delete(v1122[0]);
  }
  if (SHIBYTE(v1124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1125.__r_.__value_.__l.__data_);
  }
  if ((char)v1127 < 0) {
    operator delete((void *)v1126);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v1136);
  RIO_MTLX::InterfaceElement::setVersionIntegers((RIO_MTLX::InterfaceElement *)this, 1, 38);
}

void sub_23F5CCA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (SLOBYTE(STACK[0x93F]) < 0) {
    operator delete((void *)STACK[0x928]);
  }
  if (*(char *)(v59 - 185) < 0) {
    operator delete(*(void **)(v59 - 208));
  }
  if (STACK[0x868]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x868]);
  }
  if (STACK[0x528]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x528]);
  }
  if (SLOBYTE(STACK[0x5C7]) < 0) {
    operator delete((void *)STACK[0x5B0]);
  }
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x5E0], (char *)STACK[0x5E8]);
  STACK[0x5E0] = (unint64_t)&a59;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5E0]);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Element>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    while (1)
    {
      uint64_t v9 = *v6;
      uint64_t v8 = (std::__shared_weak_count *)v6[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Element>(v9, &v16);
      if (!(void)v16) {
        goto LABEL_23;
      }
      int v10 = *(char *)(a4 + 23);
      uint64_t v11 = *(void *)(a4 + 8);
      if (v10 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a4 + 23);
      }
      if (!v11) {
        goto LABEL_22;
      }
      uint64_t v12 = *(unsigned __int8 *)(v9 + 47);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = *(unsigned __int8 *)(v9 + 47);
      }
      else {
        uint64_t v13 = *(void *)(v9 + 32);
      }
      if (v13 != v11) {
        goto LABEL_23;
      }
      long long v14 = (const void **)(v9 + 24);
      uint64_t v15 = v10 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if ((v12 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v14, v15, *(void *)(v9 + 32))) {
        goto LABEL_22;
      }
LABEL_23:
      if (*((void *)&v16 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v6 += 2;
      if (v6 == a3) {
        return;
      }
    }
    if (*(unsigned char *)(v9 + 47))
    {
      while (*(unsigned __int8 *)v14 == *v15)
      {
        long long v14 = (const void **)((char *)v14 + 1);
        ++v15;
        if (!--v12) {
          goto LABEL_22;
        }
      }
      goto LABEL_23;
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](a1, &v16);
    goto LABEL_23;
  }
}

void sub_23F5CE92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::Element::isA<RIO_MTLX::Node>(uint64_t a1, unsigned __int8 *a2)
{
  RIO_MTLX::Element::asA<RIO_MTLX::Node>(a1, &v12);
  uint64_t v4 = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (!v4) {
    return 0;
  }
  int v5 = (char)a2[23];
  uint64_t v6 = *((void *)a2 + 1);
  if (v5 >= 0) {
    uint64_t v6 = a2[23];
  }
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
  uint64_t v8 = (v7 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 47) : *(void *)(a1 + 32);
  if (v8 != v6) {
    return 0;
  }
  uint64_t v9 = (const void **)(a1 + 24);
  if (v5 >= 0) {
    int v10 = a2;
  }
  else {
    int v10 = *(unsigned __int8 **)a2;
  }
  if ((v7 & 0x80) != 0) {
    return !memcmp(*v9, v10, *(void *)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      uint64_t v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v7) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

BOOL RIO_MTLX::Element::isA<RIO_MTLX::Output>(uint64_t a1, unsigned __int8 *a2)
{
  RIO_MTLX::Element::asA<RIO_MTLX::Output>(a1, &v12);
  uint64_t v4 = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (!v4) {
    return 0;
  }
  int v5 = (char)a2[23];
  uint64_t v6 = *((void *)a2 + 1);
  if (v5 >= 0) {
    uint64_t v6 = a2[23];
  }
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
  uint64_t v8 = (v7 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 47) : *(void *)(a1 + 32);
  if (v8 != v6) {
    return 0;
  }
  uint64_t v9 = (const void **)(a1 + 24);
  if (v5 >= 0) {
    int v10 = a2;
  }
  else {
    int v10 = *(unsigned __int8 **)a2;
  }
  if ((v7 & 0x80) != 0) {
    return !memcmp(*v9, v10, *(void *)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      uint64_t v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v7) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

void RIO_MTLX::anonymous namespace'::getShaderNodeDef(RIO_MTLX::InterfaceElement *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  int v5 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(a1);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v4 + 160), v5);
  if (v6)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v6);
    uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v7 + 160), v8);
    if (v9) {
      int v10 = (uint64_t *)(v9 + 40);
    }
    else {
      int v10 = RIO_MTLX::EMPTY_STRING(0);
    }
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)*v10, v10[1]);
    }
    else
    {
      long long v18 = *(_OWORD *)v10;
      v56.__r_.__value_.__r.__words[2] = v10[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v18;
    }
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>(*a2, &v56, a1);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v11 = *a2;
  uint64_t v12 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(0);
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v11 + 160), v12);
  if (!v13) {
    goto LABEL_78;
  }
  uint64_t v14 = *a2;
  uint64_t v15 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE((RIO_MTLX::NodeDef *)v13);
  long long v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v14 + 160), v15);
  if (v16) {
    int v17 = (uint64_t *)(v16 + 40);
  }
  else {
    int v17 = RIO_MTLX::EMPTY_STRING(0);
  }
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)*v17, v17[1]);
  }
  else
  {
    long long v19 = *(_OWORD *)v17;
    v56.__r_.__value_.__r.__words[2] = v17[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v19;
  }
  uint64_t v20 = *a2;
  uint64_t v21 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v17);
  uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v20 + 160), v21);
  if (v22) {
    uint64_t v23 = (uint64_t *)(v22 + 40);
  }
  else {
    uint64_t v23 = RIO_MTLX::EMPTY_STRING(0);
  }
  if (*((char *)v23 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)*v23, v23[1]);
  }
  else
  {
    long long v24 = *(_OWORD *)v23;
    v55.__r_.__value_.__r.__words[2] = v23[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
  }
  uint64_t v25 = *a2;
  uint64_t v26 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v23);
  unint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v25 + 160), v26);
  if (v27) {
    float v28 = (uint64_t *)(v27 + 40);
  }
  else {
    float v28 = RIO_MTLX::EMPTY_STRING(0);
  }
  if (*((char *)v28 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)*v28, v28[1]);
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    v54.__r_.__value_.__r.__words[2] = v28[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v29;
  }
  uint64_t v30 = *a2;
  long long v31 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v28);
  unint64_t v32 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v30 + 160), v31);
  if (v32) {
    int8x8_t v33 = (uint64_t *)(v32 + 40);
  }
  else {
    int8x8_t v33 = RIO_MTLX::EMPTY_STRING(0);
  }
  if (*((char *)v33 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)*v33, v33[1]);
  }
  else
  {
    long long v34 = *(_OWORD *)v33;
    v53.__r_.__value_.__r.__words[2] = v33[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)*a2, &p_p);
  p_data = (void **)&p_p->__r_.__value_.__l.__data_;
  RIO_MTLX::Element::getQualifiedName(*a2, &v56, &__p);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)p_data, (unsigned __int8 *)&__p, (uint64_t *)&v51);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)*a2, &p_p);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)p_p, (unsigned __int8 *)&v56, (uint64_t *)&__p);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>>((uint64_t *)&v51, v52, (uint64_t *)__p.__r_.__value_.__l.__data_, (void *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
  uint64_t v36 = v51;
  uint64_t v37 = v52;
  if (v51 == v52)
  {
LABEL_67:
    char v47 = 1;
    goto LABEL_69;
  }
  while (1)
  {
    long long v38 = *v36;
    *(void *)a1 = *v36;
    uint8x8_t v39 = (std::__shared_weak_count *)v36[1];
    *((void *)a1 + 1) = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Target = RIO_MTLX::InterfaceElement::getTarget(v38);
    if (!RIO_MTLX::targetStringsMatch((uint64_t)Target, (uint64_t)&v54)
      || !RIO_MTLX::NodeDef::isVersionCompatible(v38, (unsigned __int8 *)&v53))
    {
      goto LABEL_64;
    }
    std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v55.__r_.__value_.__l.__size_;
    }
    if (!size) {
      break;
    }
    uint8x8_t v42 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::InterfaceElement *))(*(void *)v38 + 56))(v38);
    uint64_t v43 = v42[23];
    if ((v43 & 0x80u) == 0) {
      uint64_t v44 = v42[23];
    }
    else {
      uint64_t v44 = *((void *)v42 + 1);
    }
    std::string::size_type v45 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v45 = v55.__r_.__value_.__l.__size_;
    }
    if (v44 == v45)
    {
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v46 = &v55;
      }
      else {
        unint64_t v46 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v43 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v42, v46, *((void *)v42 + 1))) {
          break;
        }
      }
      else
      {
        if (!v42[23]) {
          break;
        }
        while (*v42 == v46->__r_.__value_.__s.__data_[0])
        {
          ++v42;
          unint64_t v46 = (std::string *)((char *)v46 + 1);
          if (!--v43) {
            goto LABEL_68;
          }
        }
      }
    }
LABEL_64:
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    v36 += 2;
    if (v36 == v37) {
      goto LABEL_67;
    }
  }
LABEL_68:
  char v47 = 0;
LABEL_69:
  p_p = &__p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (v47)
  {
LABEL_78:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
  }
}

void sub_23F5CEF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void **a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  a15 = (void **)&a9;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  a9 = &a17;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::NodeDef::getNodeString(RIO_MTLX::NodeDef *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::NodeDef::NODE_ATTRIBUTE(this);
  BOOL v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t *RIO_MTLX::PortElement::getOutputString(RIO_MTLX::PortElement *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(this);
  BOOL v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

std::string *RIO_MTLX::InterfaceElement::addInput@<X0>(RIO_MTLX::Input *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  RIO_MTLX::Element::addChild<RIO_MTLX::Input>(a1, a2, a4);
  uint64_t v6 = (uint64_t *)*a4;
  uint64_t v8 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v7);
  return RIO_MTLX::Element::setAttribute(v6, v8, a3);
}

void sub_23F5CF11C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Document::upgradeVersion(void)::$_0::operator()(uint64_t a1, std::string **a2, std::string *a3)
{
  if (*a2)
  {
    RIO_MTLX::Element::setName(*a2, a3);
    int v5 = *a2;
    uint64_t v7 = (const std::string *)RIO_MTLX::STRING_TYPE_STRING(v6);
    uint64_t v8 = RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)v5, a1, v7, (uint64_t *)&v17);
    uint64_t v9 = v17;
    __p.__r_.__value_.__s.__data_[0] = 1;
    int v10 = (long long *)RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE((RIO_MTLX::ValueElement *)v8);
    RIO_MTLX::Element::setTypedAttribute<BOOL>(v9, v10, (RIO_MTLX *)&__p);
    uint64_t v11 = v17;
    uint64_t v12 = (RIO_MTLX::ValueElement *)std::string::basic_string[abi:ne180100]<0>(&__p, "R");
    uint64_t v13 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v12);
    RIO_MTLX::Element::setAttribute(v11, v13, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v14 = v17;
    std::string::basic_string[abi:ne180100]<0>(&__p, "enum");
    std::string::basic_string[abi:ne180100]<0>(&v15, "R,T,RT");
    RIO_MTLX::Element::setAttribute(v14, (long long *)&__p, &v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
}

void sub_23F5CF244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Document::upgradeVersion(void)::$_1::operator()(const std::string *a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned __int8 *)&a1[1];
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(*a2, (unsigned __int8 *)&a1[1], &v28);
  if (v28)
  {
    (*(void (**)(const std::string **__return_ptr))(*(void *)v28 + 64))(&v26);
    if (v26)
    {
      uint64_t v5 = *a2;
      uint64_t v6 = *(std::__shared_weak_count **)(*a2 + 232);
      if (v6)
      {
        uint64_t v6 = std::__shared_weak_count::lock(v6);
        uint64_t v7 = v6;
        if (v6) {
          uint64_t v6 = *(std::__shared_weak_count **)(v5 + 224);
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)v6, &v24);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      uint64_t v8 = (std::string *)*a2;
      if (*(char *)(*a2 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v23, v8[2].__r_.__value_.__l.__data_, v8[2].__r_.__value_.__l.__size_);
        uint64_t v8 = (std::string *)*a2;
      }
      else
      {
        std::string v23 = v8[2];
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v23.__r_.__value_.__l.__size_;
      }
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 11);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v11 = &v23;
        }
        else {
          uint64_t v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        memmove(p_p, v11, size);
      }
      strcpy((char *)p_p + size, "__layer_top");
      RIO_MTLX::Element::setName(v8, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      RIO_MTLX::GraphElement::addNode(v24, a1 + 2, (uint64_t)&v23, a1 + 3, (uint64_t *)&__p);
      RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)__p.__r_.__value_.__l.__data_, (uint64_t)a1, a1 + 3, (uint64_t *)&v20);
      RIO_MTLX::InterfaceElement::addInput((RIO_MTLX::Input *)__p.__r_.__value_.__l.__data_, (uint64_t)&a1[1], a1 + 3, (uint64_t *)&v18);
      uint64_t v12 = v20;
      uint64_t v13 = (std::string *)a2[1];
      v17[0] = (const std::string *)*a2;
      v17[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v13->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::PortElement::setConnectedNode(v12, v17);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
      }
      uint64_t v14 = v18;
      std::string v15 = (std::__shared_weak_count *)v27;
      v16[0] = v26;
      v16[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v27->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::PortElement::setConnectedNode(v14, v16);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
    }
    RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>((void *)*a2, v4);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27);
    }
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_23F5CF530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(void *)(v29 - 88)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v29 - 88));
  }
  long long v31 = *(std::__shared_weak_count **)(v29 - 72);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  unint64_t v32 = *(std::__shared_weak_count **)(v29 - 56);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<RIO_MTLX::Input>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    std::string v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)std::string v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::Input>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F5CF708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::ValueElement>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v3 = *(uint64_t **)(a1 + 136);
  uint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::ValueElement>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      unint64_t v13 = (const void **)(v8 + 24);
      uint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        unint64_t v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::ValueElement>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F5CF848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::PortElement::getNodeName(RIO_MTLX::PortElement *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(this);
  BOOL v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t RIO_MTLX::Document::upgradeVersion(void)::$_1::~$_1(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void RIO_MTLX::Document::copy(RIO_MTLX::Document *this)
{
}

void sub_23F5CF998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::addChild<RIO_MTLX::NodeGraph>(RIO_MTLX::NodeGraph *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    unint64_t v6 = (char *)RIO_MTLX::NodeGraph::CATEGORY(a1);
    uint64_t v7 = v6;
    if (v6[23] >= 0) {
      size_t v8 = v6[23];
    }
    else {
      size_t v8 = *((void *)v6 + 1);
    }
    int v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if (v15 < 0) {
      int v9 = (void **)__p[0];
    }
    if (v8)
    {
      if (v7[23] >= 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = *(char **)v7;
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)a1, (uint64_t)__p, (uint64_t)&v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    std::string v17 = v16;
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = 0;
    v16.__r_.__value_.__s.__data_[0] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v16, (void *)a1 + 1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::NodeGraph,std::allocator<RIO_MTLX::NodeGraph>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>((long long *)&v16, (uint64_t)&v17, a3);
  if (v16.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.__r_.__value_.__l.__size_);
  }
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  unint64_t v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(RIO_MTLX::NodeGraph *, uint64_t *))(*(void *)a1 + 40))(a1, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_23F5CFB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::NodeGraph,std::allocator<RIO_MTLX::NodeGraph>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>(long long *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x128uLL);
  std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::NodeGraph>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_23F5CFC50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::NodeGraph>,0>(void *a1, long long *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F331A90;
  std::allocator<RIO_MTLX::NodeGraph>::construct[abi:ne180100]<RIO_MTLX::NodeGraph,std::shared_ptr<RIO_MTLX::Element>,std::string &>((uint64_t)&v5, (RIO_MTLX::NodeGraph *)(a1 + 3), a2, a3);
  return a1;
}

void sub_23F5CFCC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::NodeGraph>::construct[abi:ne180100]<RIO_MTLX::NodeGraph,std::shared_ptr<RIO_MTLX::Element>,std::string &>(uint64_t a1, RIO_MTLX::NodeGraph *a2, long long *a3, uint64_t a4)
{
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  RIO_MTLX::NodeGraph::NodeGraph(a2, (uint64_t *)&v4, a4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_23F5CFD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::setTypedAttribute<BOOL>(uint64_t *a1, long long *a2, RIO_MTLX *a3)
{
  RIO_MTLX::toValueString<BOOL>(a3, &__p);
  RIO_MTLX::Element::setAttribute(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F5CFD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v3 = *(uint64_t **)(a1 + 136);
  long long v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Output>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      unint64_t v13 = (const void **)(v8 + 24);
      uint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        unint64_t v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::Output>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F5CFEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::Output>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::Output>>::__swap_out_circular_buffer(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F5D001C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Output>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Output>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Output>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Output>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Output>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Output>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Output>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Output>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Output>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Output>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Output>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Output>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Output>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void RIO_MTLX::Element::addChild<RIO_MTLX::Output>(RIO_MTLX::Output *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v6 = (char *)RIO_MTLX::Output::CATEGORY(a1);
    uint64_t v7 = v6;
    if (v6[23] >= 0) {
      size_t v8 = v6[23];
    }
    else {
      size_t v8 = *((void *)v6 + 1);
    }
    long long v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if (v15 < 0) {
      long long v9 = (void **)__p[0];
    }
    if (v8)
    {
      if (v7[23] >= 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = *(char **)v7;
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)a1, (uint64_t)__p, (uint64_t)&v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    std::string v17 = v16;
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = 0;
    v16.__r_.__value_.__s.__data_[0] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v16, (void *)a1 + 1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Output,std::allocator<RIO_MTLX::Output>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>((long long *)&v16, (uint64_t)&v17, a3);
  if (v16.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.__r_.__value_.__l.__size_);
  }
  unint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  char v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(RIO_MTLX::Output *, uint64_t *))(*(void *)a1 + 40))(a1, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_23F5D0330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Output,std::allocator<RIO_MTLX::Output>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>(long long *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x118uLL);
  std::__shared_ptr_emplace<RIO_MTLX::Output>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Output>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_23F5D0400(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<RIO_MTLX::Output>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Output>,0>(void *a1, long long *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F331AE0;
  std::allocator<RIO_MTLX::Output>::construct[abi:ne180100]<RIO_MTLX::Output,std::shared_ptr<RIO_MTLX::Element>,std::string &>((uint64_t)&v5, (RIO_MTLX::Output *)(a1 + 3), a2, a3);
  return a1;
}

void sub_23F5D0474(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::Output>::construct[abi:ne180100]<RIO_MTLX::Output,std::shared_ptr<RIO_MTLX::Element>,std::string &>(uint64_t a1, RIO_MTLX::Output *a2, long long *a3, uint64_t a4)
{
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  RIO_MTLX::Output::Output(a2, (uint64_t *)&v4, a4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_23F5D04D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(uint64_t a1, unsigned __int8 *a2)
{
  RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(a1, &v12);
  uint64_t v4 = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (!v4) {
    return 0;
  }
  int v5 = (char)a2[23];
  uint64_t v6 = *((void *)a2 + 1);
  if (v5 >= 0) {
    uint64_t v6 = a2[23];
  }
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
  uint64_t v8 = (v7 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 47) : *(void *)(a1 + 32);
  if (v8 != v6) {
    return 0;
  }
  long long v9 = (const void **)(a1 + 24);
  if (v5 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a2;
  }
  if ((v7 & 0x80) != 0) {
    return !memcmp(*v9, v10, *(void *)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      long long v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v7) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t *RIO_MTLX::Implementation::getNodeGraph(RIO_MTLX::Implementation *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(this);
  BOOL v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::__emplace_multi<std::string,std::shared_ptr<RIO_MTLX::InterfaceElement>&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x38uLL);
  v11[0] = v7;
  v11[1] = v6;
  void *v7 = 0;
  v7[1] = 0;
  *((_OWORD *)v7 + 1) = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  void v7[4] = v8;
  void v7[5] = v10;
  v7[6] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  char v12 = 1;
  v7[1] = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, (uint64_t)v7);
  v11[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
}

void sub_23F5D0768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::GeomProp>(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a2 + 96), a3);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  int v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::GeomProp>(v6, a1);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F5D0804(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v3 = *(uint64_t **)(a1 + 136);
  uint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      char v13 = (const void **)(v8 + 24);
      long long v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        char v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::NodeGraph>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F5D0948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::NodeGraph>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::NodeGraph>>::__swap_out_circular_buffer(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F5D0A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::NodeGraph>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeGraph>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeGraph>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeGraph>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeGraph>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeGraph>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeGraph>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeGraph>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeGraph>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::NodeGraph>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeGraph>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::NodeGraph>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeGraph>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    long long v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        uint64_t v21 = &a3[2 * a5];
      }
      else
      {
        uint64_t v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::shared_ptr<RIO_MTLX::NodeDef>*,std::shared_ptr<RIO_MTLX::NodeDef>*,std::shared_ptr<RIO_MTLX::NodeDef>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::NodeDef> *,std::shared_ptr<RIO_MTLX::NodeDef> *,std::shared_ptr<RIO_MTLX::NodeDef> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      void v26[4] = v9;
      if (v17) {
        long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)v9, v17);
      }
      else {
        long long v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      void v26[3] = &v18[16 * v17];
      std::string v23 = &v22[2 * a5];
      do
      {
        uint64_t *v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      v26[2] = v23;
      uint64_t v5 = (void *)std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_23F5D0D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    long long v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *long long v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::NodeDef> *,std::shared_ptr<RIO_MTLX::NodeDef> *,std::shared_ptr<RIO_MTLX::NodeDef> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::shared_ptr<RIO_MTLX::NodeDef>*,std::shared_ptr<RIO_MTLX::NodeDef>*,std::shared_ptr<RIO_MTLX::NodeDef>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::shared_ptr<RIO_MTLX::NodeDef>*,std::shared_ptr<RIO_MTLX::NodeDef>*,std::shared_ptr<RIO_MTLX::NodeDef>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _OWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::shared_ptr<RIO_MTLX::NodeDef>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::shared_ptr<RIO_MTLX::NodeDef>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::NodeDef> *,std::shared_ptr<RIO_MTLX::NodeDef> *,std::shared_ptr<RIO_MTLX::NodeDef> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      void *v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::NodeDef> *,std::shared_ptr<RIO_MTLX::NodeDef> *,std::shared_ptr<RIO_MTLX::NodeDef> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::shared_ptr<RIO_MTLX::NodeDef>*,std::shared_ptr<RIO_MTLX::NodeDef>*,std::shared_ptr<RIO_MTLX::NodeDef>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  long long v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  std::string v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::shared_ptr<RIO_MTLX::NodeDef>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v3 = *(uint64_t **)(a1 + 136);
  uint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      char v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      char v13 = (const void **)(v8 + 24);
      long long v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        char v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F5D12B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    char v7 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  char v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Output>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F5D1374(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::removeChildOfType<RIO_MTLX::NodeDef>(void *a1, unsigned __int8 *a2)
{
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>((uint64_t)a1, a2, &v5);
  uint64_t v4 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4) {
    RIO_MTLX::Element::removeChild(a1, a2);
  }
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    char v7 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  char v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Input>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F5D1468(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Node>(void *a1, unsigned __int8 *a2)
{
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>((uint64_t)a1, a2, &v5);
  uint64_t v4 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4) {
    RIO_MTLX::Element::removeChild(a1, a2);
  }
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_23F5D1510(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::addChild<RIO_MTLX::Input>(RIO_MTLX::Input *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v6 = (char *)RIO_MTLX::Input::CATEGORY(a1);
    char v7 = v6;
    if (v6[23] >= 0) {
      size_t v8 = v6[23];
    }
    else {
      size_t v8 = *((void *)v6 + 1);
    }
    int v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if (v15 < 0) {
      int v9 = (void **)__p[0];
    }
    if (v8)
    {
      if (v7[23] >= 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = *(char **)v7;
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 49;
    RIO_MTLX::Element::createValidChildName((uint64_t)a1, (uint64_t)__p, (uint64_t)&v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    std::string v17 = v16;
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = 0;
    v16.__r_.__value_.__s.__data_[0] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v16, (void *)a1 + 1);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Input,std::allocator<RIO_MTLX::Input>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>((long long *)&v16, (uint64_t)&v17, a3);
  if (v16.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.__r_.__value_.__l.__size_);
  }
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  char v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(RIO_MTLX::Input *, uint64_t *))(*(void *)a1 + 40))(a1, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_23F5D16E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Input,std::allocator<RIO_MTLX::Input>,std::shared_ptr<RIO_MTLX::Element>,std::string &,void>(long long *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x118uLL);
  std::__shared_ptr_emplace<RIO_MTLX::Input>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Input>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_23F5D17B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<RIO_MTLX::Input>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string &,std::allocator<RIO_MTLX::Input>,0>(void *a1, long long *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F331EE8;
  std::allocator<RIO_MTLX::Input>::construct[abi:ne180100]<RIO_MTLX::Input,std::shared_ptr<RIO_MTLX::Element>,std::string &>((uint64_t)&v5, (RIO_MTLX::Input *)(a1 + 3), a2, a3);
  return a1;
}

void sub_23F5D182C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::Input>::construct[abi:ne180100]<RIO_MTLX::Input,std::shared_ptr<RIO_MTLX::Element>,std::string &>(uint64_t a1, RIO_MTLX::Input *a2, long long *a3, uint64_t a4)
{
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  RIO_MTLX::Input::Input(a2, (uint64_t *)&v4, a4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_23F5D188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_23F5D18DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_23F5D1930(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::removeChildOfType<RIO_MTLX::Input>(void *a1, unsigned __int8 *a2)
{
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)a1, a2, &v5);
  uint64_t v4 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4) {
    RIO_MTLX::Element::removeChild(a1, a2);
  }
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v3 = *(uint64_t **)(a1 + 136);
  uint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      char v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Input>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      char v13 = (const void **)(v8 + 24);
      long long v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        char v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::Input>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F5D1AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Document,std::allocator<RIO_MTLX::Document>,std::shared_ptr<RIO_MTLX::Element>,std::string const&,void>(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = operator new(0x130uLL);
  std::__shared_ptr_emplace<RIO_MTLX::Document>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::allocator<RIO_MTLX::Document>,0>(v5, a2, a3);
}

void sub_23F5D1B70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Document>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::allocator<RIO_MTLX::Document>,0>(void *a1, uint64_t *a2, long long *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F331D38;
  std::allocator<RIO_MTLX::Document>::construct[abi:ne180100]<RIO_MTLX::Document,std::shared_ptr<RIO_MTLX::Element>,std::string const&>((uint64_t)&v3, (RIO_MTLX::Document *)(a1 + 3), a2, a3);
}

void sub_23F5D1BE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<RIO_MTLX::Document>::construct[abi:ne180100]<RIO_MTLX::Document,std::shared_ptr<RIO_MTLX::Element>,std::string const&>(uint64_t a1, RIO_MTLX::Document *a2, uint64_t *a3, long long *a4)
{
  uint64_t v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  *a3 = 0;
  a3[1] = 0;
  RIO_MTLX::Document::Document(a2, v5, a4);
}

void sub_23F5D1C60(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<RIO_MTLX::Document::Cache>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*(void **)(v1 + 184));
    uint64_t v2 = *(void **)(v1 + 168);
    *(void *)(v1 + 168) = 0;
    if (v2) {
      operator delete(v2);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*(void **)(v1 + 144));
    char v3 = *(void **)(v1 + 128);
    *(void *)(v1 + 128) = 0;
    if (v3) {
      operator delete(v3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__deallocate_node(*(void **)(v1 + 104));
    uint64_t v4 = *(void **)(v1 + 88);
    *(void *)(v1 + 88) = 0;
    if (v4) {
      operator delete(v4);
    }
    std::mutex::~mutex((std::mutex *)(v1 + 16));
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::PortElement>>>>::__equal_range_multi<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = (uint64_t)(a1 + 4);
    char v7 = v4;
    do
      char v7 = *(unsigned __int8 **)v7;
    while (v7 && (std::equal_to<std::string>::operator()[abi:ne180100](v6, v7 + 16, a2) & 1) != 0);
  }
  return v5;
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::PortElement>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::PortElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::PortElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::PortElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::PortElement>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::PortElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::PortElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::PortElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::PortElement>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::PortElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::PortElement>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::PortElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::PortElement>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::NodeDef>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::NodeDef>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Element>>::__init_with_size[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element>*,std::shared_ptr<RIO_MTLX::Element>*>(uint64_t result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = (void *)result;
    if (a4 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result + 16, a4);
    uint64_t v8 = v7;
    *uint64_t v4 = v7;
    v4[1] = v7;
    _OWORD v4[2] = &v7[2 * v9];
    long long v14 = v7;
    long long v15 = v7;
    v12[0] = v4 + 2;
    v12[1] = &v14;
    uint64_t v12[2] = &v15;
    if (a2 != a3)
    {
      uint64_t v10 = v7;
      do
      {
        void *v10 = *a2;
        uint64_t v11 = a2[1];
        v10[1] = v11;
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        v10 += 2;
        v8 += 2;
        a2 += 2;
      }
      while (a2 != a3);
      long long v15 = v10;
    }
    char v13 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Element>>,std::shared_ptr<RIO_MTLX::Element>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
    v4[1] = v8;
  }
  return result;
}

void sub_23F5D2040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void RIO_MTLX::ValueElement::setValue<std::string>(RIO_MTLX::TypedElement *a1, std::string *a2, uint64_t a3)
{
  char v3 = (const std::string *)a3;
  uint64_t v5 = (uint64_t *)a1;
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (!v6)
  {
    a1 = (RIO_MTLX::TypedElement *)RIO_MTLX::TypedValue<std::string>::TYPE();
    char v3 = (const std::string *)RIO_MTLX::TypedValue<std::string>::TYPE(void)::v;
  }
  uint64_t v7 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(a1);
  RIO_MTLX::Element::setAttribute(v5, v7, v3);
  uint64_t v8 = RIO_MTLX::toValueString<std::string>(a2, &__p);
  uint64_t v9 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v8);
  RIO_MTLX::Element::setAttribute(v5, v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F5D20F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string v16 = operator new(0x40uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *std::string v16 = 0;
  v16[1] = v9;
  std::string v17 = *a3;
  long long v18 = **a3;
  void v16[4] = *((void *)*a3 + 2);
  *((_OWORD *)v16 + 1) = v18;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)std::string v17 = 0;
  v16[6] = 0;
  v16[7] = 0;
  v16[5] = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *uint64_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_23F5D2394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Input>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Input>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Input>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Input>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Input>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Input>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Input>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Input>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Input>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Input>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Input>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Input>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Input>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::vector<std::shared_ptr<RIO_MTLX::ValueElement>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::ValueElement>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F5D25F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::ValueElement>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::ValueElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::ValueElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::ValueElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::ValueElement>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::ValueElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::ValueElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::ValueElement>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::ValueElement>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::ValueElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::ValueElement>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::ValueElement>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::ValueElement>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t realityio::meshAttributeRateForInterpolation(realityio *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v3 = atomic_load(MEMORY[0x263F90538]);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v3 + 136) & 0xFFFFFFFFFFFFFFF8))
  {
    return 0;
  }
  else
  {
    unint64_t v4 = atomic_load(MEMORY[0x263F90538]);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v4 + 1160) & 0xFFFFFFFFFFFFFFF8))
    {
      return 2;
    }
    else
    {
      unint64_t v5 = atomic_load(MEMORY[0x263F90538]);
      if (!v5) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v5 + 1208) & 0xFFFFFFFFFFFFFFF8)) {
        return 1;
      }
      unint64_t v6 = atomic_load(MEMORY[0x263F90538]);
      if (!v6) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v6 + 1224) & 0xFFFFFFFFFFFFFFF8))
      {
        return 1;
      }
      else
      {
        unint64_t v7 = atomic_load(MEMORY[0x263F90538]);
        if (!v7) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
        }
        if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v7 + 320) & 0xFFFFFFFFFFFFFFF8)) {
          return 3;
        }
        else {
          return -1;
        }
      }
    }
  }
}

uint64_t realityio::isTexCoord2(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  v10[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  v10[1] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v10);
  uint64_t v2 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t realityio::isTexCoord3(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  v10[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  v10[1] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v10);
  uint64_t v2 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t realityio::isScalar2(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  v7[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  v7[1] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v7);
  uint64_t v2 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v2)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t realityio::addUsdAttributeToGeomModelDescriptor(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *this, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
  uint64_t v8 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_19;
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_19;
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_19;
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_19;
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_19;
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_19:
    int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
    if (IsPrimvar)
    {
      MEMORY[0x2455CEC30](&v106, this);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v106);
    }
    else
    {
      int v106 = 3;
      uint64_t v107 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      std::vector<unsigned int>::size_type v17 = *a4;
      __sz[0] = v17;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        __sz[0] &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    uint64_t v18 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v16);
    if ((__sz[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v105 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    unint64_t v100 = 0;
    v101 = 0;
    uint64_t v102 = 0;
    uint64_t v99 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v99))
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v99)) {
        goto LABEL_88;
      }
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(this, (uint64_t)__sz);
      if (!LOBYTE(__sz[0]))
      {
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_88;
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v103);
      long long v103 = *(_OWORD *)&__sz[1];
      long long v104 = *(_OWORD *)&__sz[3];
      memset(&__sz[1], 0, 32);
      uint64_t v105 = v98;
      uint8x8_t v98 = 0;
      if (v18) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 4 * ((unint64_t)v103 > 1);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_54:
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v100, v103);
      long long v31 = v100;
      if ((void)v103)
      {
        unint64_t v32 = v105;
        uint64_t v33 = 12 * v103;
        do
        {
          *(void *)&long long v30 = *v32;
          DWORD2(v3std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)v32 + 2);
          *v31++ = v30;
          unint64_t v32 = (void *)((char *)v32 + 12);
          v33 -= 12;
        }
        while (v33);
        long long v31 = v100;
      }
      if (IsPrimvar)
      {
        memset(__sz, 0, sizeof(__sz));
        int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
        char v35 = Indices;
        if (Indices)
        {
          memset(&v111, 0, sizeof(v111));
          std::vector<int>::resize(&v111, __sz[0]);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
          uint64_t v36 = (unsigned int *)__sz[4];
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
          std::vector<unsigned int>::size_type v37 = __sz[4] + 4 * __sz[0];
          if (v36 != (unsigned int *)v37)
          {
            begistd::string::size_type n = v111.__begin_;
            do
            {
              unsigned int v39 = *v36++;
              *begin++ = v39;
            }
            while (v36 != (unsigned int *)v37);
          }
          if (!a3)
          {
            uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
            if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
            }
          }
          uint64_t v41 = REGeomModelDescriptorAddIndexedAttributeVector3F();
          if (v111.__begin_)
          {
            v111.__end_ = v111.__begin_;
            operator delete(v111.__begin_);
          }
        }
        else
        {
          uint64_t v41 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
        if (v35) {
          goto LABEL_89;
        }
      }
      char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v99);
      if (v18 == 4) {
        char v43 = 1;
      }
      else {
        char v43 = IsArray;
      }
      if ((v43 & 1) != 0
        || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v99),
             !v18)
          ? (int v45 = IsScalar)
          : (int v45 = 0),
            v45 == 1))
      {
        if (!a3)
        {
          unint64_t v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          a3 = (*(void *)v46 & 0xFFFFFFFFFFFFFFF8) != 0
             ? (*(void *)v46 & 0xFFFFFFFFFFFFFFF8) + 16
             : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          if (*(char *)(a3 + 23) < 0) {
            a3 = *(void *)a3;
          }
        }
        if (MEMORY[0x2455CD260](a1, a3, v18, v103, v31))
        {
          uint64_t v41 = 1;
LABEL_89:
          if (v100)
          {
            v101 = v100;
            operator delete(v100);
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v103);
          if ((v110 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v109 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
          if (v107) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
          }
          return v41;
        }
      }
LABEL_88:
      uint64_t v41 = 0;
      goto LABEL_89;
    }
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(this, (uint64_t)__sz);
    if (LOBYTE(__sz[0]))
    {
      if (!DWORD2(v103))
      {
        uint64_t v19 = v103;
        if (!*((void *)&v104 + 1))
        {
          float v20 = v105;
          if (!v105)
          {
            uint64_t v22 = 0;
LABEL_40:
            if ((void)v103 != v22)
            {
              std::vector<unsigned int>::size_type v23 = __sz[1];
              uint64_t v24 = (uint64_t)v20 + 12 * v103;
              *(_DWORD *)(v24 + 8) = __sz[2];
              *(void *)uint64_t v24 = v23;
LABEL_50:
              *(void *)&long long v103 = v103 + 1;
LABEL_51:
              if (!LOBYTE(__sz[0]) && SHIBYTE(v98) < 0) {
                operator delete((void *)__sz[3]);
              }
              goto LABEL_54;
            }
            goto LABEL_125;
          }
          unint64_t v21 = atomic_load(v105 - 2);
          if (v21 == 1)
          {
            float v20 = v105;
            uint64_t v22 = *(v105 - 1);
            goto LABEL_40;
          }
        }
LABEL_125:
        unint64_t v57 = v105;
        uint64_t v58 = 1;
        do
        {
          unint64_t v59 = v58;
          v58 *= 2;
        }
        while (v59 < (uint64_t)v103 + 1);
        New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)&v103, v59);
        int v61 = New;
        if (v19)
        {
          uint64_t v62 = 12 * v19;
          int v63 = New;
          do
          {
            uint64_t v64 = *v57;
            *((_DWORD *)v63 + 2) = *((_DWORD *)v57 + 2);
            *int v63 = v64;
            int v63 = (void *)((char *)v63 + 12);
            unint64_t v57 = (uint64_t *)((char *)v57 + 12);
            v62 -= 12;
          }
          while (v62);
        }
        std::vector<unsigned int>::size_type v65 = __sz[1];
        unint64_t v66 = (char *)New + 12 * v19;
        *((_DWORD *)v66 + 2) = __sz[2];
        *(void *)unint64_t v66 = v65;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v103);
LABEL_137:
        uint64_t v105 = v61;
        goto LABEL_50;
      }
      v111.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v111.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v111.__end_cap_.__value_ = (unsigned int *)433;
      std::string::size_type v112 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::emplace_back(Arg"
             "s &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3f &>]";
      char v113 = 0;
LABEL_139:
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      goto LABEL_51;
    }
    int v115 = 0;
    uint64_t v114 = 0;
    if (DWORD2(v103))
    {
      v111.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v111.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v111.__end_cap_.__value_ = (unsigned int *)433;
      std::string::size_type v112 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::emplace_back(Arg"
             "s &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, Args = <pxrInternal__aapl__pxrReserved__::GfVec3f>]";
      char v113 = 0;
      goto LABEL_139;
    }
    uint64_t v25 = v103;
    if (!*((void *)&v104 + 1))
    {
      unint64_t v26 = v105;
      if (!v105)
      {
        uint64_t v28 = 0;
LABEL_48:
        if ((void)v103 != v28)
        {
          uint64_t v29 = (uint64_t)v26 + 12 * v103;
          *(void *)uint64_t v29 = v114;
          *(_DWORD *)(v29 + 8) = v115;
          goto LABEL_50;
        }
        goto LABEL_131;
      }
      unint64_t v27 = atomic_load(v105 - 2);
      if (v27 == 1)
      {
        unint64_t v26 = v105;
        uint64_t v28 = *(v105 - 1);
        goto LABEL_48;
      }
    }
LABEL_131:
    std::string::size_type v67 = v105;
    uint64_t v68 = 1;
    do
    {
      unint64_t v69 = v68;
      v68 *= 2;
    }
    while (v69 < (uint64_t)v103 + 1);
    std::string::size_type v70 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)&v103, v69);
    int v61 = v70;
    if (v25)
    {
      uint64_t v71 = 12 * v25;
      float v72 = v70;
      do
      {
        uint64_t v73 = *v67;
        *((_DWORD *)v72 + 2) = *((_DWORD *)v67 + 2);
        *float v72 = v73;
        float v72 = (void *)((char *)v72 + 12);
        std::string::size_type v67 = (uint64_t *)((char *)v67 + 12);
        v71 -= 12;
      }
      while (v71);
    }
    unint64_t v74 = (char *)v70 + 12 * v25;
    *(void *)unint64_t v74 = v114;
    *((_DWORD *)v74 + 2) = v115;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v103);
    goto LABEL_137;
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2fEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2fEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2dEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2dEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2hEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2hEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(a1, this, a3, (uint64_t *)a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return realityio::convertAndAddAttributeToModelDescriptor<int,int>(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return realityio::convertAndAddAttributeToModelDescriptor<unsigned int,unsigned int>(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return realityio::convertAndAddAttributeToModelDescriptor<unsigned char,unsigned char>(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return realityio::convertAndAddAttributeToModelDescriptor<float,float>(a1, this, a3, a4);
  }
  if (!atomic_load(v8)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 0;
  }
  return realityio::convertAndAddAttributeToModelDescriptor<double,double>(a1, this, a3, a4);
}

void sub_23F5D3974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (!(_BYTE)a13 && a21 < 0) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a32);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2fEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v62, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v62);
  }
  else
  {
    int v62 = 3;
    uint64_t v63 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    std::vector<unsigned int>::size_type v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v11 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v61 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  std::string v56 = 0;
  unint64_t v57 = 0;
  uint64_t v58 = 0;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        long long v59 = *(_OWORD *)&__sz[1];
        long long v60 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        int v61 = v54;
        std::string v54 = 0;
        if (v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = 4 * ((unint64_t)v59 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_36;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_70:
    uint64_t v31 = 0;
    goto LABEL_71;
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    if (DWORD2(v59))
    {
      v67.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v67.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v67.__end_cap_.__value_ = (unsigned int *)433;
      uint64_t v68 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::emplace_back(Args"
            " &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, Args = <pxrInternal__aapl__pxrReserved__::GfVec2f>]";
      char v69 = 0;
      goto LABEL_94;
    }
    uint64_t v16 = v59;
    if (!*((void *)&v60 + 1))
    {
      std::vector<unsigned int>::size_type v17 = v61;
      if (!v61)
      {
        uint64_t v19 = 0;
LABEL_30:
        if ((void)v59 != v19)
        {
          v17[(void)v59] = 0;
          goto LABEL_32;
        }
        goto LABEL_86;
      }
      unint64_t v18 = atomic_load(v61 - 2);
      if (v18 == 1)
      {
        std::vector<unsigned int>::size_type v17 = v61;
        uint64_t v19 = *(v61 - 1);
        goto LABEL_30;
      }
    }
LABEL_86:
    unint64_t v46 = v61;
    uint64_t v47 = 1;
    do
    {
      unint64_t v48 = v47;
      v47 *= 2;
    }
    while (v48 < (uint64_t)v59 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v59, v48);
    uint8x8_t v42 = New;
    if (v16)
    {
      uint64_t v50 = 8 * v16;
      uint64_t v51 = New;
      do
      {
        uint64_t v52 = *v46++;
        *v51++ = v52;
        v50 -= 8;
      }
      while (v50);
    }
    New[v16] = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
    goto LABEL_92;
  }
  if (DWORD2(v59))
  {
    v67.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v67.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v67.__end_cap_.__value_ = (unsigned int *)433;
    uint64_t v68 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::emplace_back(Args &"
          "&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec2f &>]";
    char v69 = 0;
LABEL_94:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_33;
  }
  uint64_t v12 = v59;
  if (*((void *)&v60 + 1)) {
    goto LABEL_80;
  }
  char v13 = v61;
  if (v61)
  {
    unint64_t v14 = atomic_load(v61 - 2);
    if (v14 != 1) {
      goto LABEL_80;
    }
    char v13 = v61;
    uint64_t v15 = *(v61 - 1);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if ((void)v59 == v15)
  {
LABEL_80:
    long long v38 = v61;
    uint64_t v39 = 1;
    do
    {
      unint64_t v40 = v39;
      v39 *= 2;
    }
    while (v40 < (uint64_t)v59 + 1);
    uint64_t v41 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v59, v40);
    uint8x8_t v42 = v41;
    if (v12)
    {
      uint64_t v43 = 8 * v12;
      uint64_t v44 = v41;
      do
      {
        uint64_t v45 = *v38++;
        *v44++ = v45;
        v43 -= 8;
      }
      while (v43);
    }
    v41[v12] = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
LABEL_92:
    int v61 = v42;
    goto LABEL_32;
  }
  v13[(void)v59] = __sz[1];
LABEL_32:
  *(void *)&long long v59 = v59 + 1;
LABEL_33:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v54) < 0) {
    operator delete((void *)__sz[3]);
  }
LABEL_36:
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(&v56, v59);
  float v20 = v56;
  if ((void)v59)
  {
    unint64_t v21 = v61;
    uint64_t v22 = 8 * v59;
    do
    {
      uint64_t v23 = *v21++;
      *v20++ = v23;
      v22 -= 8;
    }
    while (v22);
    float v20 = v56;
  }
  if (!IsPrimvar) {
    goto LABEL_54;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v25 = Indices;
  if (Indices)
  {
    memset(&v67, 0, sizeof(v67));
    std::vector<int>::resize(&v67, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    unint64_t v26 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v27 = __sz[4] + 4 * __sz[0];
    if (v26 != (unsigned int *)v27)
    {
      begistd::string::size_type n = v67.__begin_;
      do
      {
        unsigned int v29 = *v26++;
        *begin++ = v29;
      }
      while (v26 != (unsigned int *)v27);
    }
    if (!a3)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
    }
    uint64_t v31 = REGeomModelDescriptorAddIndexedAttributeVector2F();
    if (v67.__begin_)
    {
      v67.__end_ = v67.__begin_;
      operator delete(v67.__begin_);
    }
  }
  else
  {
    uint64_t v31 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v25 & 1) == 0)
  {
LABEL_54:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v11 == 4) {
      char v33 = 1;
    }
    else {
      char v33 = IsArray;
    }
    if ((v33 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v11)
        ? (int v35 = IsScalar)
        : (int v35 = 0),
          v35 == 1))
    {
      if (!a3)
      {
        uint64_t v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v36 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v36 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD250](a1, a3, v11, v59, v20))
      {
        uint64_t v31 = 1;
        goto LABEL_71;
      }
    }
    goto LABEL_70;
  }
LABEL_71:
  if (v56)
  {
    unint64_t v57 = v56;
    operator delete(v56);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v65 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
  if (v63) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v63);
  }
  return v31;
}

void sub_23F5D4090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!(_BYTE)a11 && a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a29);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v69, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v69);
  }
  else
  {
    int v69 = 3;
    uint64_t v70 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    std::vector<unsigned int>::size_type v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v11 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v68 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((uint64_t)__sz, a2);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v66);
        long long v66 = *(_OWORD *)&__sz[1];
        long long v67 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        uint64_t v68 = v61;
        int v61 = 0;
        if (v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = 4 * ((unint64_t)v66 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_36;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_70:
    uint64_t v35 = 0;
    goto LABEL_71;
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    long long v77 = 0uLL;
    uint64_t v78 = 0;
    if (DWORD2(v66))
    {
      v74.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v74.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v74.__end_cap_.__value_ = (unsigned int *)433;
      unint64_t v75 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::emplace_back(Args"
            " &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3d, Args = <pxrInternal__aapl__pxrReserved__::GfVec3d>]";
      char v76 = 0;
      goto LABEL_94;
    }
    uint64_t v18 = v66;
    if (!*((void *)&v67 + 1))
    {
      uint64_t v19 = v68;
      if (!v68)
      {
        float64_t v21 = 0.0;
LABEL_30:
        if ((void)v66 != *(void *)&v21)
        {
          uint64_t v22 = (uint64_t)v19 + 24 * v66;
          *(_OWORD *)uint64_t v22 = v77;
          *(void *)(v22 + 16) = v78;
          goto LABEL_32;
        }
        goto LABEL_86;
      }
      unint64_t v20 = atomic_load((unint64_t *)&v68[-1]);
      if (v20 == 1)
      {
        uint64_t v19 = v68;
        float64_t v21 = v68[-1].f64[1];
        goto LABEL_30;
      }
    }
LABEL_86:
    uint64_t v52 = v68;
    uint64_t v53 = 1;
    do
    {
      unint64_t v54 = v53;
      v53 *= 2;
    }
    while (v54 < (uint64_t)v66 + 1);
    New = (float64x2_t *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v66, v54);
    unint64_t v46 = New;
    if (v18)
    {
      uint64_t v56 = 24 * v18;
      unint64_t v57 = New;
      do
      {
        float64x2_t v58 = *v52;
        v57[1].f64[0] = v52[1].f64[0];
        float64x2_t *v57 = v58;
        unint64_t v57 = (float64x2_t *)((char *)v57 + 24);
        uint64_t v52 = (float64x2_t *)((char *)v52 + 24);
        v56 -= 24;
      }
      while (v56);
    }
    long long v59 = (void *)&New->f64[3 * v18];
    *(_OWORD *)long long v59 = v77;
    void v59[2] = v78;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v66);
    goto LABEL_92;
  }
  if (DWORD2(v66))
  {
    v74.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v74.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v74.__end_cap_.__value_ = (unsigned int *)433;
    unint64_t v75 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::emplace_back(Args &"
          "&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3d, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3d &>]";
    char v76 = 0;
LABEL_94:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_33;
  }
  uint64_t v12 = v66;
  if (*((void *)&v67 + 1)) {
    goto LABEL_80;
  }
  char v13 = v68;
  if (v68)
  {
    unint64_t v14 = atomic_load((unint64_t *)&v68[-1]);
    if (v14 != 1) {
      goto LABEL_80;
    }
    char v13 = v68;
    float64_t v15 = v68[-1].f64[1];
  }
  else
  {
    float64_t v15 = 0.0;
  }
  if ((void)v66 == *(void *)&v15)
  {
LABEL_80:
    uint8x8_t v42 = v68;
    uint64_t v43 = 1;
    do
    {
      unint64_t v44 = v43;
      v43 *= 2;
    }
    while (v44 < (uint64_t)v66 + 1);
    uint64_t v45 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v66, v44);
    unint64_t v46 = v45;
    if (v12)
    {
      uint64_t v47 = 24 * v12;
      unint64_t v48 = v45;
      do
      {
        float64x2_t v49 = *v42;
        v48[1].f64[0] = v42[1].f64[0];
        *unint64_t v48 = v49;
        unint64_t v48 = (float64x2_t *)((char *)v48 + 24);
        uint8x8_t v42 = (float64x2_t *)((char *)v42 + 24);
        v47 -= 24;
      }
      while (v47);
    }
    long long v50 = *(_OWORD *)&__sz[1];
    uint64_t v51 = (void *)&v45->f64[3 * v12];
    v51[2] = __sz[3];
    *(_OWORD *)uint64_t v51 = v50;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v66);
LABEL_92:
    uint64_t v68 = v46;
    goto LABEL_32;
  }
  long long v16 = *(_OWORD *)&__sz[1];
  uint64_t v17 = (uint64_t)v13 + 24 * v66;
  *(void *)(v17 + 16) = __sz[3];
  *(_OWORD *)uint64_t v17 = v16;
LABEL_32:
  *(void *)&long long v66 = v66 + 1;
LABEL_33:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v61) < 0) {
    operator delete((void *)__sz[3]);
  }
LABEL_36:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v63, v66);
  uint64_t v23 = (float64x2_t *)v63;
  if ((void)v66)
  {
    uint64_t v24 = v68;
    char v25 = (float64x2_t *)((char *)v68 + 24 * v66);
    do
    {
      float64x2_t v26 = *v24;
      *(float32x2_t *)&v26.f64[0] = vcvt_f32_f64(*v24);
      float v27 = v24[1].f64[0];
      *(float *)&v26.f64[1] = v27;
      *v23++ = v26;
      uint64_t v24 = (float64x2_t *)((char *)v24 + 24);
    }
    while (v24 != v25);
    uint64_t v23 = (float64x2_t *)v63;
  }
  if (!IsPrimvar) {
    goto LABEL_54;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v29 = Indices;
  if (Indices)
  {
    memset(&v74, 0, sizeof(v74));
    std::vector<int>::resize(&v74, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    long long v30 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v31 = __sz[4] + 4 * __sz[0];
    if (v30 != (unsigned int *)v31)
    {
      begistd::string::size_type n = v74.__begin_;
      do
      {
        unsigned int v33 = *v30++;
        *begin++ = v33;
      }
      while (v30 != (unsigned int *)v31);
    }
    if (!a3)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
    }
    uint64_t v35 = REGeomModelDescriptorAddIndexedAttributeVector3F();
    if (v74.__begin_)
    {
      v74.__end_ = v74.__begin_;
      operator delete(v74.__begin_);
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v29 & 1) == 0)
  {
LABEL_54:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v11 == 4) {
      char v37 = 1;
    }
    else {
      char v37 = IsArray;
    }
    if ((v37 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v11)
        ? (int v39 = IsScalar)
        : (int v39 = 0),
          v39 == 1))
    {
      if (!a3)
      {
        unint64_t v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v40 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v40 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v40);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD260](a1, a3, v11, v66, v23))
      {
        uint64_t v35 = 1;
        goto LABEL_71;
      }
    }
    goto LABEL_70;
  }
LABEL_71:
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v66);
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v72 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
  if (v70) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
  }
  return v35;
}

void sub_23F5D4854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!(_BYTE)a11 && a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a29);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2dEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v125, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v125);
  }
  else
  {
    int v125 = 3;
    uint64_t v126 = 0;
    unint64_t v4 = &v125;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v12 = *a4;
    *(void *)__sz = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)__sz &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v11);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__sz & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string::size_type v124 = 0;
  long long v122 = 0u;
  long long v123 = 0u;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName)) {
      goto LABEL_186;
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v138, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v137);
      *(_OWORD *)&__sz[8] = v138;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v139;
      *(void *)&__sz[39] = *(void *)&v139[15];
      char v35 = v139[23];
      memset(v139, 0, sizeof(v139));
      __sz[0] = 0;
      __sz[47] = v35;
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      goto LABEL_147;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v131, a2);
    long long v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v131);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v16))
    {
      float v27 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v131);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v27);
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v131);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v17);
    double v130 = v28;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      long long v34 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v34 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v34);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v138, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v137);
      *(_OWORD *)&__sz[8] = v138;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v139;
      *(void *)&__sz[39] = *(void *)&v139[15];
      char v49 = v139[23];
      memset(v139, 0, sizeof(v139));
      __sz[0] = 0;
      __sz[47] = v49;
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      goto LABEL_144;
    }
    v136.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v136))
      {
        uint64_t v29 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v136);
        long long v30 = *(_OWORD *)(v29 + 16);
        long long v138 = *(_OWORD *)v29;
        *(_OWORD *)BOOL v139 = v30;
        uint64_t v31 = *(void *)(v29 + 32);
        if (v31)
        {
          unint64_t v32 = *(atomic_ullong **)&v139[8];
          if (!*(void *)&v139[8]) {
            unint64_t v32 = (atomic_ullong *)(v31 - 16);
          }
          atomic_fetch_add_explicit(v32, 1uLL, memory_order_relaxed);
        }
        __sz[0] = 1;
        *(_OWORD *)&__sz[8] = v138;
        *(_OWORD *)&__sz[24] = *(_OWORD *)v139;
        long long v138 = 0u;
        memset(v139, 0, sizeof(v139));
        *(void *)&__sz[40] = v31;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v138);
        goto LABEL_143;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v136);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v136))
        {
          uint64_t v53 = &v136;
        }
        else
        {
          uint64_t v53 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v136, &v138);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v138);
        }
        std::vector<unsigned int> v74 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v135, (const pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        if (v135.__r_.__value_.__l.__size_)
        {
          uint64_t v75 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(v74);
          long long v76 = *(_OWORD *)(v75 + 16);
          long long v138 = *(_OWORD *)v75;
          *(_OWORD *)BOOL v139 = v76;
          uint64_t v77 = *(void *)(v75 + 32);
          if (v77)
          {
            uint64_t v78 = *(atomic_ullong **)&v139[8];
            if (!*(void *)&v139[8]) {
              uint64_t v78 = (atomic_ullong *)(v77 - 16);
            }
            atomic_fetch_add_explicit(v78, 1uLL, memory_order_relaxed);
          }
          __sz[0] = 1;
          *(_OWORD *)&__sz[8] = v138;
          *(_OWORD *)&__sz[24] = *(_OWORD *)v139;
          long long v138 = 0u;
          memset(v139, 0, sizeof(v139));
          *(void *)&__sz[40] = v77;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v138);
        }
        else
        {
          uint64_t v79 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v79 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v79);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v138, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v137);
          *(_OWORD *)&__sz[8] = v138;
          *(_OWORD *)&__sz[24] = *(_OWORD *)v139;
          *(void *)&__sz[39] = *(void *)&v139[15];
          char v80 = v139[23];
          memset(v139, 0, sizeof(v139));
          __sz[0] = 0;
          __sz[47] = v80;
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v135);
        goto LABEL_143;
      }
      std::string::basic_string[abi:ne180100]<0>(&v137, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v138, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v137);
      *(_OWORD *)&__sz[8] = v138;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v139;
      *(void *)&__sz[39] = *(void *)&v139[15];
      char v72 = v139[23];
      memset(v139, 0, sizeof(v139));
      __sz[0] = 0;
      __sz[47] = v72;
      if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_143:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v136);
LABEL_144:
        uint64_t v81 = v132;
        if (v132 && atomic_fetch_add_explicit((atomic_uint *volatile)(v132 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
        }
LABEL_147:
        if (__sz[0])
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v122);
          long long v122 = *(_OWORD *)&__sz[8];
          long long v123 = *(_OWORD *)&__sz[24];
          memset(&__sz[8], 0, 40);
          std::string::size_type v124 = *(unint64_t **)&__sz[40];
          if (v13) {
            uint64_t v13 = v13;
          }
          else {
            uint64_t v13 = 4 * ((unint64_t)v122 > 1);
          }
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,realityio::DetailedError>::~Result((uint64_t)__sz);
          goto LABEL_152;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_186:
        uint64_t v93 = 0;
        goto LABEL_187;
      }
      uint64_t v71 = (void *)v137.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v41 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
      }
      std::operator+<char>();
      uint64_t v64 = std::string::append(&v133, ") at the given time: ");
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v135.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v134, v130);
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v66 = &v134;
      }
      else {
        long long v66 = (std::string *)v134.__r_.__value_.__r.__words[0];
      }
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v134.__r_.__value_.__l.__size_;
      }
      uint64_t v68 = std::string::append(&v135, (const std::string::value_type *)v66, size);
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v138, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v137);
      *(_OWORD *)&__sz[8] = v138;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v139;
      *(void *)&__sz[39] = *(void *)&v139[15];
      char v70 = v139[23];
      memset(v139, 0, sizeof(v139));
      __sz[0] = 0;
      __sz[47] = v70;
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      uint64_t v71 = (void *)v133.__r_.__value_.__r.__words[0];
    }
    operator delete(v71);
    goto LABEL_143;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v138);
    unint64_t v4 = *(int **)&__sz[16];
    char v5 = __sz[39];
    memset(&__sz[16], 0, 24);
    if ((v139[7] & 0x80000000) != 0) {
      operator delete((void *)v138);
    }
LABEL_90:
    long long v138 = 0uLL;
    if (DWORD2(v122))
    {
      *(void *)__sz = "vt/array.h";
      *(void *)&__sz[8] = "emplace_back";
      *(void *)&__sz[16] = 433;
      *(void *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::"
                             "emplace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, Args = <pxrInterna"
                             "l__aapl__pxrReserved__::GfVec2d>]";
      __sz[32] = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_99:
      if (v5 < 0) {
        operator delete(v4);
      }
      goto LABEL_152;
    }
    uint64_t v59 = v122;
    if (*((void *)&v123 + 1)) {
      goto LABEL_196;
    }
    long long v60 = v124;
    if (v124)
    {
      unint64_t v61 = atomic_load(v124 - 2);
      if (v61 != 1) {
        goto LABEL_196;
      }
      long long v60 = v124;
      uint64_t v62 = *(v124 - 1);
    }
    else
    {
      uint64_t v62 = 0;
    }
    if ((void)v122 != v62)
    {
      *(_OWORD *)&v60[2 * v122] = v138;
LABEL_98:
      *(void *)&long long v122 = v122 + 1;
      goto LABEL_99;
    }
LABEL_196:
    unint64_t v100 = v124;
    uint64_t v101 = 1;
    do
    {
      unint64_t v102 = v101;
      v101 *= 2;
    }
    while (v102 < (uint64_t)v122 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v122, v102);
    long long v104 = New;
    if (v59)
    {
      uint64_t v105 = 16 * v59;
      int v106 = New;
      do
      {
        long long v107 = *(_OWORD *)v100;
        v100 += 2;
        *(_OWORD *)int v106 = v107;
        v106 += 2;
        v105 -= 16;
      }
      while (v105);
    }
    *(_OWORD *)&New[2 * v59] = v138;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v122);
    std::string::size_type v124 = v104;
    goto LABEL_98;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v136, a2);
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v136);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v14))
  {
    unint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v136);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v20);
  }
  float64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v136);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v15);
  double v131 = v21;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2))
  {
    v134.__r_.__value_.__l.__size_ = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v134))
      {
        uint64_t v22 = (unint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v134);
        unint64_t v23 = *v22;
        unint64_t v24 = v22[1];
        int v25 = 1;
LABEL_80:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v134);
        goto LABEL_81;
      }
      uint64_t v36 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v134);
      {
        long long v38 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v134);
        int v39 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v137, (const pxrInternal__aapl__pxrReserved__::VtValue *)v38);
        if (v137.__r_.__value_.__l.__size_)
        {
          unint64_t v40 = (unint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>(v39);
          unint64_t v23 = *v40;
          unint64_t v24 = v40[1];
          int v25 = 1;
        }
        else
        {
          uint64_t v73 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v73 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v73);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v138);
          unint64_t v23 = *(void *)__sz;
          unint64_t v24 = *(void *)&__sz[8];
          unint64_t v4 = *(int **)&__sz[16];
          char v5 = __sz[39];
          memset(&__sz[16], 0, 24);
          if ((v139[7] & 0x80000000) != 0) {
            operator delete((void *)v138);
          }
          int v25 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v137);
        goto LABEL_80;
      }
      std::string::basic_string[abi:ne180100]<0>(&v138, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v138);
      unint64_t v23 = *(void *)__sz;
      unint64_t v24 = *(void *)&__sz[8];
      unint64_t v4 = *(int **)&__sz[16];
      char v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if ((v139[7] & 0x80000000) == 0)
      {
LABEL_79:
        int v25 = 0;
        goto LABEL_80;
      }
      unint64_t v48 = (void *)v138;
    }
    else
    {
      unsigned int v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v33 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
      }
      std::operator+<char>();
      uint8x8_t v42 = std::string::append(&v135, ") at the given time: ");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v133, v131);
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v44 = &v133;
      }
      else {
        unint64_t v44 = (std::string *)v133.__r_.__value_.__r.__words[0];
      }
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = v133.__r_.__value_.__l.__size_;
      }
      unint64_t v46 = std::string::append(&v137, (const std::string::value_type *)v44, v45);
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      *(void *)BOOL v139 = *((void *)&v46->__r_.__value_.__l + 2);
      long long v138 = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v138);
      unint64_t v23 = *(void *)__sz;
      unint64_t v24 = *(void *)&__sz[8];
      unint64_t v4 = *(int **)&__sz[16];
      char v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if ((v139[7] & 0x80000000) != 0) {
        operator delete((void *)v138);
      }
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      unint64_t v48 = (void *)v135.__r_.__value_.__r.__words[0];
    }
    operator delete(v48);
    goto LABEL_79;
  }
  float64x2_t v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(void *)v26 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v138);
  unint64_t v23 = *(void *)__sz;
  unint64_t v24 = *(void *)&__sz[8];
  unint64_t v4 = *(int **)&__sz[16];
  char v5 = __sz[39];
  memset(&__sz[16], 0, 24);
  if ((v139[7] & 0x80000000) != 0) {
    operator delete((void *)v138);
  }
  int v25 = 0;
LABEL_81:
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v136.__type_name;
  if (v136.__type_name
    && atomic_fetch_add_explicit((atomic_uint *volatile)(v136.__type_name + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(void *)type_name + 8))(type_name);
  }
  if (!v25) {
    goto LABEL_90;
  }
  if (!DWORD2(v122))
  {
    uint64_t v55 = v122;
    if (*((void *)&v123 + 1)) {
      goto LABEL_202;
    }
    uint64_t v56 = v124;
    if (v124)
    {
      unint64_t v57 = atomic_load(v124 - 2);
      if (v57 != 1) {
        goto LABEL_202;
      }
      uint64_t v56 = v124;
      uint64_t v58 = *(v124 - 1);
    }
    else
    {
      uint64_t v58 = 0;
    }
    if ((void)v122 != v58)
    {
      uint64_t v63 = &v56[2 * v122];
      *uint64_t v63 = v23;
      v63[1] = v24;
LABEL_104:
      *(void *)&long long v122 = v122 + 1;
      goto LABEL_152;
    }
LABEL_202:
    uint64_t v108 = v124;
    uint64_t v109 = 1;
    do
    {
      unint64_t v110 = v109;
      v109 *= 2;
    }
    while (v110 < (uint64_t)v122 + 1);
    std::vector<unsigned int> v111 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v122, v110);
    std::string::size_type v112 = v111;
    if (v55)
    {
      uint64_t v113 = 16 * v55;
      uint64_t v114 = v111;
      do
      {
        long long v115 = *(_OWORD *)v108;
        v108 += 2;
        *(_OWORD *)uint64_t v114 = v115;
        v114 += 2;
        v113 -= 16;
      }
      while (v113);
    }
    uint64_t v116 = &v111[2 * v55];
    unint64_t *v116 = v23;
    v116[1] = v24;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v122);
    std::string::size_type v124 = v112;
    goto LABEL_104;
  }
  *(void *)__sz = "vt/array.h";
  *(void *)&__sz[8] = "emplace_back";
  *(void *)&__sz[16] = 433;
  *(void *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::empl"
                         "ace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, Args = <const pxrInternal_"
                         "_aapl__pxrReserved__::GfVec2d &>]";
  __sz[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_152:
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(&v119, v122);
  uint8x8_t v82 = (float32x2_t *)v119;
  if ((void)v122)
  {
    int v83 = (float64x2_t *)v124;
    uint64_t v84 = 16 * v122;
    do
    {
      float64x2_t v85 = *v83++;
      *v82++ = vcvt_f32_f64(v85);
      v84 -= 16;
    }
    while (v84);
    uint8x8_t v82 = (float32x2_t *)v119;
  }
  if (!IsPrimvar) {
    goto LABEL_170;
  }
  memset(__sz, 0, 40);
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v87 = Indices;
  if (Indices)
  {
    long long v138 = 0uLL;
    *(void *)BOOL v139 = 0;
    std::vector<int>::resize((std::vector<unsigned int> *)&v138, *(std::vector<unsigned int>::size_type *)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    uint64_t v88 = *(int **)&__sz[32];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    uint64_t v89 = *(void *)&__sz[32] + 4 * *(void *)__sz;
    if (v88 != (int *)v89)
    {
      uint64_t v90 = (_DWORD *)v138;
      do
      {
        int v91 = *v88++;
        *v90++ = v91;
      }
      while (v88 != (int *)v89);
    }
    if (!a3)
    {
      v92 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v92 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v92);
      }
    }
    uint64_t v93 = REGeomModelDescriptorAddIndexedAttributeVector2F();
    if ((void)v138)
    {
      *((void *)&v138 + 1) = v138;
      operator delete((void *)v138);
    }
  }
  else
  {
    uint64_t v93 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v87 & 1) == 0)
  {
LABEL_170:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v13 == 4) {
      char v95 = 1;
    }
    else {
      char v95 = IsArray;
    }
    if ((v95 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v13)
        ? (int v97 = IsScalar)
        : (int v97 = 0),
          v97 == 1))
    {
      if (!a3)
      {
        uint8x8_t v98 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v98 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v98 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v98);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD250](a1, a3, v13, v122, v82))
      {
        uint64_t v93 = 1;
        goto LABEL_187;
      }
    }
    goto LABEL_186;
  }
LABEL_187:
  if (v119)
  {
    uint64_t v120 = v119;
    operator delete(v119);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v122);
  if ((v129 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v129 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v128 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v128 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
  if (v126) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v126);
  }
  return v93;
}

void sub_23F5D595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v47 = a34;
  if (a34 && atomic_fetch_add_explicit((atomic_uint *volatile)(a34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  if (__p) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v96, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v96);
  }
  else
  {
    int v96 = 3;
    uint64_t v97 = 0;
    unint64_t v4 = &v96;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    std::vector<unsigned int>::size_type v12 = *a4;
    __sz[0] = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v11);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  char v95 = 0;
  long long v93 = 0u;
  long long v94 = 0u;
  uint64_t v90 = 0;
  int v91 = 0;
  uint64_t v92 = 0;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((uint64_t)__sz, a2);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v93);
        long long v93 = *(_OWORD *)&__sz[1];
        long long v94 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        char v95 = v88;
        uint64_t v88 = 0;
        if (v13) {
          uint64_t v13 = v13;
        }
        else {
          uint64_t v13 = 4 * ((unint64_t)v93 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_84;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_117:
    uint64_t v61 = 0;
    goto LABEL_118;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v106);
    unint64_t v4 = (int *)__sz[2];
    char v5 = HIBYTE(__sz[4]);
    memset(&__sz[2], 0, 24);
    if (SHIBYTE(v106.__end_cap_.__value_) < 0) {
      operator delete(v106.__begin_);
    }
LABEL_69:
    WORD2(v106.__begin_) = 0;
    LODWORD(v106.__begin_) = 0;
    if (DWORD2(v93))
    {
      __sz[0] = (std::vector<unsigned int>::size_type)"vt/array.h";
      __sz[1] = (std::vector<unsigned int>::size_type)"emplace_back";
      __sz[2] = 433;
      __sz[3] = (std::vector<unsigned int>::size_type)"void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__"
                                                      "pxrReserved__::GfVec3h>::emplace_back(Args &&...) [T = pxrInternal"
                                                      "__aapl__pxrReserved__::GfVec3h, Args = <pxrInternal__aapl__pxrRese"
                                                      "rved__::GfVec3h>]";
      LOBYTE(__sz[4]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_78:
      if (v5 < 0) {
        operator delete(v4);
      }
      goto LABEL_84;
    }
    uint64_t v43 = v93;
    if (*((void *)&v94 + 1)) {
      goto LABEL_133;
    }
    unint64_t v44 = v95;
    if (v95)
    {
      unint64_t v45 = atomic_load(v95 - 2);
      if (v45 != 1) {
        goto LABEL_133;
      }
      unint64_t v44 = v95;
      uint64_t v46 = *(v95 - 1);
    }
    else
    {
      uint64_t v46 = 0;
    }
    if ((void)v93 != v46)
    {
      uint64_t v47 = (uint64_t)v44 + 6 * v93;
      *(_DWORD *)uint64_t v47 = v106.__begin_;
      *(_WORD *)(v47 + 4) = WORD2(v106.__begin_);
LABEL_77:
      *(void *)&long long v93 = v93 + 1;
      goto LABEL_78;
    }
LABEL_133:
    long long v69 = v95;
    uint64_t v70 = 1;
    do
    {
      unint64_t v71 = v70;
      v70 *= 2;
    }
    while (v71 < (uint64_t)v93 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)&v93, v71);
    uint64_t v73 = New;
    if (v43)
    {
      uint64_t v74 = 6 * v43;
      uint64_t v75 = New;
      do
      {
        int v76 = *(_DWORD *)v69;
        *((_WORD *)v75 + 2) = *((_WORD *)v69 + 2);
        *(_DWORD *)uint64_t v75 = v76;
        uint64_t v75 = (unint64_t *)((char *)v75 + 6);
        long long v69 = (unint64_t *)((char *)v69 + 6);
        v74 -= 6;
      }
      while (v74);
    }
    uint64_t v77 = (char *)New + 6 * v43;
    *(_DWORD *)uint64_t v77 = v106.__begin_;
    *((_WORD *)v77 + 2) = WORD2(v106.__begin_);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v93);
    char v95 = v73;
    goto LABEL_77;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v102, a2);
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v102);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v14))
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v102);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v17);
  }
  float64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v102);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v15);
  double v101 = v18;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2))
  {
    uint64_t v109 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v108))
      {
        uint64_t v19 = (unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v108);
        unint64_t v20 = *v19 | ((unint64_t)*((unsigned __int16 *)v19 + 2) << 32);
        int v21 = 1;
LABEL_59:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v108);
        goto LABEL_60;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v108);
      {
        float64x2_t v26 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v108);
        float v27 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v107, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v107.__r_.__value_.__l.__size_)
        {
          double v28 = (unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>(v27);
          unint64_t v20 = *v28 | ((unint64_t)*((unsigned __int16 *)v28 + 2) << 32);
          int v21 = 1;
        }
        else
        {
          uint64_t v68 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v68 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v68);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v106);
          unint64_t v20 = LODWORD(__sz[0]) | ((unint64_t)WORD2(__sz[0]) << 32);
          unint64_t v4 = (int *)__sz[2];
          char v5 = HIBYTE(__sz[4]);
          memset(&__sz[2], 0, 24);
          if (SHIBYTE(v106.__end_cap_.__value_) < 0) {
            operator delete(v106.__begin_);
          }
          int v21 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v107);
        goto LABEL_59;
      }
      std::string::basic_string[abi:ne180100]<0>(&v106, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v106);
      unint64_t v20 = LODWORD(__sz[0]) | ((unint64_t)WORD2(__sz[0]) << 32);
      unint64_t v4 = (int *)__sz[2];
      char v5 = HIBYTE(__sz[4]);
      memset(&__sz[2], 0, 24);
      if ((SHIBYTE(v106.__end_cap_.__value_) & 0x80000000) == 0)
      {
LABEL_58:
        int v21 = 0;
        goto LABEL_59;
      }
      begistd::string::size_type n = v106.__begin_;
    }
    else
    {
      unint64_t v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
      }
      std::operator+<char>();
      uint64_t v29 = std::string::append(&v105, ") at the given time: ");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v104, v101);
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &v104;
      }
      else {
        uint64_t v31 = (std::string *)v104.__r_.__value_.__r.__words[0];
      }
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v104.__r_.__value_.__l.__size_;
      }
      unsigned int v33 = std::string::append(&v107, (const std::string::value_type *)v31, size);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v106.__end_cap_.__value_ = (unsigned int *)v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__begin_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v106);
      uint64_t v35 = WORD2(__sz[0]);
      uint64_t v36 = LODWORD(__sz[0]);
      unint64_t v4 = (int *)__sz[2];
      char v5 = HIBYTE(__sz[4]);
      memset(&__sz[2], 0, 24);
      if (SHIBYTE(v106.__end_cap_.__value_) < 0) {
        operator delete(v106.__begin_);
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      unint64_t v20 = v36 | (v35 << 32);
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      begistd::string::size_type n = (std::vector<unsigned int>::pointer)v105.__r_.__value_.__r.__words[0];
    }
    operator delete(begin);
    goto LABEL_58;
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(void *)v22 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v106);
  unint64_t v20 = LODWORD(__sz[0]) | ((unint64_t)WORD2(__sz[0]) << 32);
  unint64_t v4 = (int *)__sz[2];
  char v5 = HIBYTE(__sz[4]);
  memset(&__sz[2], 0, 24);
  if (SHIBYTE(v106.__end_cap_.__value_) < 0) {
    operator delete(v106.__begin_);
  }
  int v21 = 0;
LABEL_60:
  uint64_t v38 = v103;
  if (v103 && atomic_fetch_add_explicit((atomic_uint *volatile)(v103 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  if (!v21) {
    goto LABEL_69;
  }
  if (!DWORD2(v93))
  {
    uint64_t v39 = v93;
    if (*((void *)&v94 + 1)) {
      goto LABEL_139;
    }
    unint64_t v40 = v95;
    if (v95)
    {
      unint64_t v41 = atomic_load(v95 - 2);
      if (v41 != 1) {
        goto LABEL_139;
      }
      unint64_t v40 = v95;
      uint64_t v42 = *(v95 - 1);
    }
    else
    {
      uint64_t v42 = 0;
    }
    if ((void)v93 != v42)
    {
      uint64_t v48 = (uint64_t)v40 + 6 * v93;
      *(_WORD *)(v48 + 4) = WORD2(v20);
      *(_DWORD *)uint64_t v48 = v20;
LABEL_83:
      *(void *)&long long v93 = v93 + 1;
      goto LABEL_84;
    }
LABEL_139:
    uint64_t v78 = v95;
    uint64_t v79 = 1;
    do
    {
      unint64_t v80 = v79;
      v79 *= 2;
    }
    while (v80 < (uint64_t)v93 + 1);
    uint64_t v81 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)&v93, v80);
    uint8x8_t v82 = v81;
    if (v39)
    {
      uint64_t v83 = 6 * v39;
      uint64_t v84 = v81;
      do
      {
        int v85 = *(_DWORD *)v78;
        *((_WORD *)v84 + 2) = *((_WORD *)v78 + 2);
        *(_DWORD *)uint64_t v84 = v85;
        uint64_t v84 = (unint64_t *)((char *)v84 + 6);
        uint64_t v78 = (unint64_t *)((char *)v78 + 6);
        v83 -= 6;
      }
      while (v83);
    }
    BOOL v86 = (char *)v81 + 6 * v39;
    *((_WORD *)v86 + 2) = WORD2(v20);
    *(_DWORD *)BOOL v86 = v20;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v93);
    char v95 = v82;
    goto LABEL_83;
  }
  __sz[0] = (std::vector<unsigned int>::size_type)"vt/array.h";
  __sz[1] = (std::vector<unsigned int>::size_type)"emplace_back";
  __sz[2] = 433;
  __sz[3] = (std::vector<unsigned int>::size_type)"void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrR"
                                                  "eserved__::GfVec3h>::emplace_back(Args &&...) [T = pxrInternal__aapl__"
                                                  "pxrReserved__::GfVec3h, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3h &>]";
  LOBYTE(__sz[4]) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_84:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v90, v93);
  long long v50 = v90;
  if ((void)v93)
  {
    uint64_t v51 = (unsigned __int16 *)v95;
    uint64_t v52 = (unsigned __int16 *)v95 + 3 * v93;
    uint64_t v53 = MEMORY[0x263F90640];
    do
    {
      LODWORD(v49) = *(_DWORD *)(v53 + 4 * *v51);
      DWORD1(v49) = *(_DWORD *)(v53 + 4 * v51[1]);
      DWORD2(v49) = *(_DWORD *)(v53 + 4 * v51[2]);
      *v50++ = v49;
      v51 += 3;
    }
    while (v51 != v52);
    long long v50 = v90;
  }
  if (!IsPrimvar) {
    goto LABEL_101;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v55 = Indices;
  if (Indices)
  {
    memset(&v106, 0, sizeof(v106));
    std::vector<int>::resize(&v106, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    uint64_t v56 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v57 = __sz[4] + 4 * __sz[0];
    if (v56 != (unsigned int *)v57)
    {
      std::vector<unsigned int>::pointer v58 = v106.__begin_;
      do
      {
        unsigned int v59 = *v56++;
        *v58++ = v59;
      }
      while (v56 != (unsigned int *)v57);
    }
    if (!a3)
    {
      long long v60 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v60 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v60);
      }
    }
    uint64_t v61 = REGeomModelDescriptorAddIndexedAttributeVector3F();
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
  }
  else
  {
    uint64_t v61 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v55 & 1) == 0)
  {
LABEL_101:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v13 == 4) {
      char v63 = 1;
    }
    else {
      char v63 = IsArray;
    }
    if ((v63 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v13)
        ? (int v65 = IsScalar)
        : (int v65 = 0),
          v65 == 1))
    {
      if (!a3)
      {
        long long v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v66 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v66 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v66);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD260](a1, a3, v13, v93, v50))
      {
        uint64_t v61 = 1;
        goto LABEL_118;
      }
    }
    goto LABEL_117;
  }
LABEL_118:
  if (v90)
  {
    int v91 = v90;
    operator delete(v90);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v93);
  if ((v100 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
  if (v97) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v97);
  }
  return v61;
}

void sub_23F5D6710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v41 = a34;
  if (a34 && atomic_fetch_add_explicit((atomic_uint *volatile)(a34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  if (__p) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec2hEDv2_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v121, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v121);
  }
  else
  {
    int v121 = 3;
    uint64_t v122 = 0;
    unint64_t v4 = &v121;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v12 = *a4;
    *(void *)__sz = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)__sz &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v11);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__sz & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v120 = 0;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v115 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName)) {
      goto LABEL_186;
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
      *(_OWORD *)&__sz[8] = v134;
      *(void *)&__sz[24] = v135.__begin_;
      *(void *)&__sz[32] = v135.__end_;
      *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
      char value_high = HIBYTE(v135.__end_cap_.__value_);
      memset(&v135, 0, sizeof(v135));
      __sz[0] = 0;
      __sz[47] = value_high;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      goto LABEL_147;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v127, a2);
    long long v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v127);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v16))
    {
      int v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v127);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v25);
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v127);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v17);
    double v126 = v26;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      unint64_t v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v32 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
      *(_OWORD *)&__sz[8] = v134;
      *(void *)&__sz[24] = v135.__begin_;
      *(void *)&__sz[32] = v135.__end_;
      *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
      char v46 = HIBYTE(v135.__end_cap_.__value_);
      memset(&v135, 0, sizeof(v135));
      __sz[0] = 0;
      __sz[47] = v46;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      goto LABEL_144;
    }
    v132.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v132))
      {
        uint64_t v27 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v132);
        long long v28 = *(_OWORD *)(v27 + 16);
        long long v134 = *(_OWORD *)v27;
        *(_OWORD *)&v135.__begin_ = v28;
        uint64_t v29 = *(void *)(v27 + 32);
        if (v29)
        {
          end = (atomic_ullong *)v135.__end_;
          if (!v135.__end_) {
            end = (atomic_ullong *)(v29 - 16);
          }
          atomic_fetch_add_explicit(end, 1uLL, memory_order_relaxed);
        }
        __sz[0] = 1;
        *(_OWORD *)&__sz[8] = v134;
        *(_OWORD *)&__sz[24] = *(_OWORD *)&v135.__begin_;
        long long v134 = 0u;
        memset(&v135, 0, sizeof(v135));
        *(void *)&__sz[40] = v29;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
        goto LABEL_143;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v132);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v132))
        {
          long long v50 = &v132;
        }
        else
        {
          long long v50 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v132, &v134);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v134);
        }
        uint64_t v70 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v131, (const pxrInternal__aapl__pxrReserved__::VtValue *)v50);
        if (v131.__r_.__value_.__l.__size_)
        {
          uint64_t v71 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(v70);
          long long v72 = *(_OWORD *)(v71 + 16);
          long long v134 = *(_OWORD *)v71;
          *(_OWORD *)&v135.__begin_ = v72;
          uint64_t v73 = *(void *)(v71 + 32);
          if (v73)
          {
            uint64_t v74 = (atomic_ullong *)v135.__end_;
            if (!v135.__end_) {
              uint64_t v74 = (atomic_ullong *)(v73 - 16);
            }
            atomic_fetch_add_explicit(v74, 1uLL, memory_order_relaxed);
          }
          __sz[0] = 1;
          *(_OWORD *)&__sz[8] = v134;
          *(_OWORD *)&__sz[24] = *(_OWORD *)&v135.__begin_;
          long long v134 = 0u;
          memset(&v135, 0, sizeof(v135));
          *(void *)&__sz[40] = v73;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
        }
        else
        {
          uint64_t v75 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v75 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v75);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
          *(_OWORD *)&__sz[8] = v134;
          *(void *)&__sz[24] = v135.__begin_;
          *(void *)&__sz[32] = v135.__end_;
          *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
          char v76 = HIBYTE(v135.__end_cap_.__value_);
          memset(&v135, 0, sizeof(v135));
          __sz[0] = 0;
          __sz[47] = v76;
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v131);
        goto LABEL_143;
      }
      std::string::basic_string[abi:ne180100]<0>(&v133, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
      *(_OWORD *)&__sz[8] = v134;
      *(void *)&__sz[24] = v135.__begin_;
      *(void *)&__sz[32] = v135.__end_;
      *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
      char v68 = HIBYTE(v135.__end_cap_.__value_);
      memset(&v135, 0, sizeof(v135));
      __sz[0] = 0;
      __sz[47] = v68;
      if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_143:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v132);
LABEL_144:
        uint64_t v77 = v128;
        if (v128 && atomic_fetch_add_explicit((atomic_uint *volatile)(v128 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
        }
LABEL_147:
        if (__sz[0])
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v118);
          long long v118 = *(_OWORD *)&__sz[8];
          long long v119 = *(_OWORD *)&__sz[24];
          memset(&__sz[8], 0, 40);
          uint64_t v120 = *(unint64_t **)&__sz[40];
          if (v13) {
            uint64_t v13 = v13;
          }
          else {
            uint64_t v13 = 4 * ((unint64_t)v118 > 1);
          }
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,realityio::DetailedError>::~Result((uint64_t)__sz);
          goto LABEL_152;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_186:
        uint64_t v90 = 0;
        goto LABEL_187;
      }
      long long v67 = (void *)v133.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v38 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
      }
      std::operator+<char>();
      long long v60 = std::string::append(&v129, ") at the given time: ");
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v131.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v130, v126);
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v62 = &v130;
      }
      else {
        uint64_t v62 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v130.__r_.__value_.__l.__size_;
      }
      uint64_t v64 = std::string::append(&v131, (const std::string::value_type *)v62, size);
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v133.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
      *(_OWORD *)&__sz[8] = v134;
      *(void *)&__sz[24] = v135.__begin_;
      *(void *)&__sz[32] = v135.__end_;
      *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
      char v66 = HIBYTE(v135.__end_cap_.__value_);
      memset(&v135, 0, sizeof(v135));
      __sz[0] = 0;
      __sz[47] = v66;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      long long v67 = (void *)v129.__r_.__value_.__r.__words[0];
    }
    operator delete(v67);
    goto LABEL_143;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    double v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
    unint64_t v4 = *(int **)&__sz[16];
    char v5 = __sz[39];
    memset(&__sz[16], 0, 24);
    if (SHIBYTE(v135.__begin_) < 0) {
      operator delete((void *)v134);
    }
LABEL_90:
    if (DWORD2(v118))
    {
      *(void *)__sz = "vt/array.h";
      *(void *)&__sz[8] = "emplace_back";
      *(void *)&__sz[16] = 433;
      *(void *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::"
                             "emplace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2h, Args = <pxrInterna"
                             "l__aapl__pxrReserved__::GfVec2h>]";
      __sz[32] = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_99:
      if (v5 < 0) {
        operator delete(v4);
      }
      goto LABEL_152;
    }
    uint64_t v56 = v118;
    if (*((void *)&v119 + 1)) {
      goto LABEL_196;
    }
    std::vector<unsigned int>::size_type v57 = v120;
    if (v120)
    {
      unint64_t v58 = atomic_load(v120 - 2);
      if (v58 != 1) {
        goto LABEL_196;
      }
      std::vector<unsigned int>::size_type v57 = v120;
      uint64_t v59 = *(v120 - 1);
    }
    else
    {
      uint64_t v59 = 0;
    }
    if ((void)v118 != v59)
    {
      *((_DWORD *)v57 + v118) = 0;
LABEL_98:
      *(void *)&long long v118 = v118 + 1;
      goto LABEL_99;
    }
LABEL_196:
    uint64_t v97 = v120;
    uint64_t v98 = 1;
    do
    {
      unint64_t v99 = v98;
      v98 *= 2;
    }
    while (v99 < (uint64_t)v118 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v118, v99);
    double v101 = New;
    if (v56)
    {
      uint64_t v102 = 4 * v56;
      uint64_t v103 = New;
      do
      {
        int v104 = *(_DWORD *)v97;
        uint64_t v97 = (unint64_t *)((char *)v97 + 4);
        *(_DWORD *)uint64_t v103 = v104;
        uint64_t v103 = (unint64_t *)((char *)v103 + 4);
        v102 -= 4;
      }
      while (v102);
    }
    *((_DWORD *)New + v56) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v118);
    uint64_t v120 = v101;
    goto LABEL_98;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v132, a2);
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v132);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v14))
  {
    unint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v132);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v20);
  }
  float64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v132);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v15);
  double v127 = v21;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2))
  {
    v130.__r_.__value_.__l.__size_ = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        int v22 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
        int v23 = 1;
LABEL_80:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
        goto LABEL_81;
      }
      long long v34 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
      {
        uint64_t v36 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
        char v37 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v133, (const pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        if (v133.__r_.__value_.__l.__size_)
        {
          int v22 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>(v37);
          int v23 = 1;
        }
        else
        {
          long long v69 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v69 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v69);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
          int v22 = *(_DWORD *)__sz;
          unint64_t v4 = *(int **)&__sz[16];
          char v5 = __sz[39];
          memset(&__sz[16], 0, 24);
          if (SHIBYTE(v135.__begin_) < 0) {
            operator delete((void *)v134);
          }
          int v23 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v133);
        goto LABEL_80;
      }
      std::string::basic_string[abi:ne180100]<0>(&v134, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
      int v22 = *(_DWORD *)__sz;
      unint64_t v4 = *(int **)&__sz[16];
      char v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if ((SHIBYTE(v135.__begin_) & 0x80000000) == 0)
      {
LABEL_79:
        int v23 = 0;
        goto LABEL_80;
      }
      unint64_t v45 = (void *)v134;
    }
    else
    {
      uint64_t v31 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
      }
      std::operator+<char>();
      uint64_t v39 = std::string::append(&v131, ") at the given time: ");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v133.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v129, v127);
      if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v41 = &v129;
      }
      else {
        uint64_t v41 = (std::string *)v129.__r_.__value_.__r.__words[0];
      }
      if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = v129.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = std::string::append(&v133, (const std::string::value_type *)v41, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v135.__begin_ = (std::vector<unsigned int>::pointer)v43->__r_.__value_.__r.__words[2];
      long long v134 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
      int v22 = *(_DWORD *)__sz;
      unint64_t v4 = *(int **)&__sz[16];
      char v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if (SHIBYTE(v135.__begin_) < 0) {
        operator delete((void *)v134);
      }
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v129.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      unint64_t v45 = (void *)v131.__r_.__value_.__r.__words[0];
    }
    operator delete(v45);
    goto LABEL_79;
  }
  unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(void *)v24 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
  int v22 = *(_DWORD *)__sz;
  unint64_t v4 = *(int **)&__sz[16];
  char v5 = __sz[39];
  memset(&__sz[16], 0, 24);
  if (SHIBYTE(v135.__begin_) < 0) {
    operator delete((void *)v134);
  }
  int v23 = 0;
LABEL_81:
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v132.__type_name;
  if (v132.__type_name
    && atomic_fetch_add_explicit((atomic_uint *volatile)(v132.__type_name + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(void *)type_name + 8))(type_name);
  }
  if (!v23) {
    goto LABEL_90;
  }
  if (!DWORD2(v118))
  {
    uint64_t v52 = v118;
    if (*((void *)&v119 + 1)) {
      goto LABEL_202;
    }
    uint64_t v53 = v120;
    if (v120)
    {
      unint64_t v54 = atomic_load(v120 - 2);
      if (v54 != 1) {
        goto LABEL_202;
      }
      uint64_t v53 = v120;
      uint64_t v55 = *(v120 - 1);
    }
    else
    {
      uint64_t v55 = 0;
    }
    if ((void)v118 != v55)
    {
      *((_DWORD *)v53 + v118) = v22;
LABEL_104:
      *(void *)&long long v118 = v118 + 1;
      goto LABEL_152;
    }
LABEL_202:
    std::string v105 = v120;
    uint64_t v106 = 1;
    do
    {
      unint64_t v107 = v106;
      v106 *= 2;
    }
    while (v107 < (uint64_t)v118 + 1);
    uint64_t v108 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v118, v107);
    uint64_t v109 = v108;
    if (v52)
    {
      uint64_t v110 = 4 * v52;
      std::vector<unsigned int> v111 = v108;
      do
      {
        int v112 = *(_DWORD *)v105;
        std::string v105 = (unint64_t *)((char *)v105 + 4);
        *(_DWORD *)std::vector<unsigned int> v111 = v112;
        std::vector<unsigned int> v111 = (unint64_t *)((char *)v111 + 4);
        v110 -= 4;
      }
      while (v110);
    }
    *((_DWORD *)v108 + v52) = v22;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v118);
    uint64_t v120 = v109;
    goto LABEL_104;
  }
  *(void *)__sz = "vt/array.h";
  *(void *)&__sz[8] = "emplace_back";
  *(void *)&__sz[16] = 433;
  *(void *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::empl"
                         "ace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2h, Args = <const pxrInternal_"
                         "_aapl__pxrReserved__::GfVec2h &>]";
  __sz[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_152:
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(&v115, v118);
  uint64_t v78 = v115;
  if ((void)v118)
  {
    uint64_t v79 = (unsigned __int16 *)v120;
    unint64_t v80 = (unsigned __int16 *)v120 + 2 * v118;
    uint64_t v81 = MEMORY[0x263F90640];
    do
    {
      LODWORD(v82) = *(_DWORD *)(v81 + 4 * *v79);
      HIDWORD(v82) = *(_DWORD *)(v81 + 4 * v79[1]);
      *v78++ = v82;
      v79 += 2;
    }
    while (v79 != v80);
    uint64_t v78 = v115;
  }
  if (!IsPrimvar) {
    goto LABEL_170;
  }
  memset(__sz, 0, 40);
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v84 = Indices;
  if (Indices)
  {
    long long v134 = 0uLL;
    v135.__begin_ = 0;
    std::vector<int>::resize((std::vector<unsigned int> *)&v134, *(std::vector<unsigned int>::size_type *)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    int v85 = *(int **)&__sz[32];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    uint64_t v86 = *(void *)&__sz[32] + 4 * *(void *)__sz;
    if (v85 != (int *)v86)
    {
      char v87 = (_DWORD *)v134;
      do
      {
        int v88 = *v85++;
        *v87++ = v88;
      }
      while (v85 != (int *)v86);
    }
    if (!a3)
    {
      uint64_t v89 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v89 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v89);
      }
    }
    uint64_t v90 = REGeomModelDescriptorAddIndexedAttributeVector2F();
    if ((void)v134)
    {
      *((void *)&v134 + 1) = v134;
      operator delete((void *)v134);
    }
  }
  else
  {
    uint64_t v90 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v84 & 1) == 0)
  {
LABEL_170:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v13 == 4) {
      char v92 = 1;
    }
    else {
      char v92 = IsArray;
    }
    if ((v92 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v13)
        ? (int v94 = IsScalar)
        : (int v94 = 0),
          v94 == 1))
    {
      if (!a3)
      {
        char v95 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v95 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v95 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v95);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD250](a1, a3, v13, v118, v78))
      {
        uint64_t v90 = 1;
        goto LABEL_187;
      }
    }
    goto LABEL_186;
  }
LABEL_187:
  if (v115)
  {
    uint64_t v116 = v115;
    operator delete(v115);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v118);
  if ((v125 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v125 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v124 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v124 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v123);
  if (v122) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v122);
  }
  return v90;
}

void sub_23F5D78E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v47 = a34;
  if (a34 && atomic_fetch_add_explicit((atomic_uint *volatile)(a34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  if (__p) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v61, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v61);
  }
  else
  {
    int v61 = 3;
    uint64_t v62 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    std::vector<unsigned int>::size_type v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v11 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v60 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v58);
        long long v58 = *(_OWORD *)&__sz[1];
        long long v59 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        long long v60 = v53;
        uint64_t v53 = 0;
        if (v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = 4 * ((unint64_t)v58 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_41;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_75:
    uint64_t v38 = 0;
    goto LABEL_76;
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    long long v69 = 0uLL;
    if (DWORD2(v58))
    {
      v66.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v66.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v66.__end_cap_.__value_ = (unsigned int *)433;
      long long v67 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::emplace_back(Args"
            " &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4f, Args = <pxrInternal__aapl__pxrReserved__::GfVec4f>]";
      char v68 = 0;
      goto LABEL_93;
    }
    uint64_t v12 = (std::vector<unsigned int>::size_type *)&v69;
    uint64_t v13 = v58;
    if (!*((void *)&v59 + 1))
    {
      unint64_t v14 = v60;
      if (v60)
      {
        unint64_t v25 = atomic_load(v60 - 2);
        if (v25 != 1) {
          goto LABEL_85;
        }
        unint64_t v14 = v60;
        uint64_t v26 = *(v60 - 1);
      }
      else
      {
        uint64_t v26 = 0;
      }
      if ((void)v58 != v26) {
        goto LABEL_36;
      }
    }
LABEL_85:
    unint64_t v45 = v60;
    uint64_t v46 = 1;
    do
    {
      unint64_t v47 = v46;
      v46 *= 2;
    }
    while (v47 < (uint64_t)v58 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v58, v47);
    double v21 = New;
    if (v13)
    {
      uint64_t v49 = 16 * v13;
      long long v50 = New;
      do
      {
        long long v51 = *(_OWORD *)v45;
        v45 += 2;
        *(_OWORD *)long long v50 = v51;
        v50 += 2;
        v49 -= 16;
      }
      while (v49);
    }
    *(_OWORD *)&New[2 * v13] = v69;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v58);
    goto LABEL_91;
  }
  if (DWORD2(v58))
  {
    v66.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v66.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v66.__end_cap_.__value_ = (unsigned int *)433;
    long long v67 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::emplace_back(Args &"
          "&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec4f &>]";
    char v68 = 0;
LABEL_93:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_38;
  }
  uint64_t v12 = &__sz[1];
  uint64_t v13 = v58;
  if (*((void *)&v59 + 1)) {
    goto LABEL_23;
  }
  unint64_t v14 = v60;
  if (v60)
  {
    unint64_t v15 = atomic_load(v60 - 2);
    if (v15 != 1) {
      goto LABEL_23;
    }
    unint64_t v14 = v60;
    uint64_t v16 = *(v60 - 1);
  }
  else
  {
    uint64_t v16 = 0;
  }
  if ((void)v58 == v16)
  {
LABEL_23:
    uint64_t v17 = v60;
    uint64_t v18 = 1;
    do
    {
      unint64_t v19 = v18;
      v18 *= 2;
    }
    while (v19 < (uint64_t)v58 + 1);
    unint64_t v20 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v58, v19);
    double v21 = v20;
    if (v13)
    {
      uint64_t v22 = 16 * v13;
      int v23 = v20;
      do
      {
        long long v24 = *(_OWORD *)v17;
        v17 += 2;
        *(_OWORD *)int v23 = v24;
        v23 += 2;
        v22 -= 16;
      }
      while (v22);
    }
    *(_OWORD *)&v20[2 * v13] = *(_OWORD *)&__sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v58);
LABEL_91:
    long long v60 = v21;
    goto LABEL_37;
  }
LABEL_36:
  *(_OWORD *)&v14[2 * v13] = *(_OWORD *)v12;
LABEL_37:
  *(void *)&long long v58 = v58 + 1;
LABEL_38:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v53) < 0) {
    operator delete((void *)__sz[3]);
  }
LABEL_41:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v55, v58);
  uint64_t v27 = v55;
  if ((void)v58)
  {
    long long v28 = v60;
    uint64_t v29 = 16 * v58;
    do
    {
      long long v30 = *(_OWORD *)v28;
      v28 += 2;
      *v27++ = v30;
      v29 -= 16;
    }
    while (v29);
    uint64_t v27 = v55;
  }
  if (!IsPrimvar) {
    goto LABEL_59;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v32 = Indices;
  if (Indices)
  {
    memset(&v66, 0, sizeof(v66));
    std::vector<int>::resize(&v66, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    unsigned int v33 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v34 = __sz[4] + 4 * __sz[0];
    if (v33 != (unsigned int *)v34)
    {
      begistd::string::size_type n = v66.__begin_;
      do
      {
        unsigned int v36 = *v33++;
        *begin++ = v36;
      }
      while (v33 != (unsigned int *)v34);
    }
    if (!a3)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
    }
    uint64_t v38 = REGeomModelDescriptorAddIndexedAttributeVector4F();
    if (v66.__begin_)
    {
      v66.__end_ = v66.__begin_;
      operator delete(v66.__begin_);
    }
  }
  else
  {
    uint64_t v38 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v32 & 1) == 0)
  {
LABEL_59:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v11 == 4) {
      char v40 = 1;
    }
    else {
      char v40 = IsArray;
    }
    if ((v40 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v11)
        ? (int v42 = IsScalar)
        : (int v42 = 0),
          v42 == 1))
    {
      if (!a3)
      {
        uint64_t v43 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v43 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v43 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v43);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD270](a1, a3, v11, v58, v27))
      {
        uint64_t v38 = 1;
        goto LABEL_76;
      }
    }
    goto LABEL_75;
  }
LABEL_76:
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v58);
  if ((v65 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v64 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  if (v62) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
  }
  return v38;
}

void sub_23F5D81AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (!(_BYTE)a11 && a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a30);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v135, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v135);
  }
  else
  {
    int v135 = 3;
    uint64_t v136 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v138 = 0;
    uint64_t v139 = 0;
    uint64_t v11 = *a4;
    *(void *)__sz = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)__sz &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v12 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v10);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__sz & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v134 = 0;
  long long v132 = 0u;
  long long v133 = 0u;
  std::string v129 = 0;
  std::string v130 = 0;
  uint64_t v131 = 0;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName)) {
      goto LABEL_186;
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v148, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v147);
      *(_OWORD *)&__sz[8] = v148;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v149;
      *(void *)&__sz[39] = *(void *)&v149[15];
      char v36 = v149[23];
      memset(v149, 0, sizeof(v149));
      __sz[0] = 0;
      __sz[47] = v36;
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      goto LABEL_147;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v141, a2);
    unint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v141);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v15))
    {
      long long v28 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v141);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v28);
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v141);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v16);
    std::string __p = v29;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      uint64_t v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v35 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v148, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v147);
      *(_OWORD *)&__sz[8] = v148;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v149;
      *(void *)&__sz[39] = *(void *)&v149[15];
      char v52 = v149[23];
      memset(v149, 0, sizeof(v149));
      __sz[0] = 0;
      __sz[47] = v52;
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      goto LABEL_144;
    }
    v146.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146))
      {
        uint64_t v30 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
        long long v31 = *(_OWORD *)(v30 + 16);
        long long v148 = *(_OWORD *)v30;
        *(_OWORD *)uint64_t v149 = v31;
        uint64_t v32 = *(void *)(v30 + 32);
        if (v32)
        {
          unsigned int v33 = *(atomic_ullong **)&v149[8];
          if (!*(void *)&v149[8]) {
            unsigned int v33 = (atomic_ullong *)(v32 - 16);
          }
          atomic_fetch_add_explicit(v33, 1uLL, memory_order_relaxed);
        }
        __sz[0] = 1;
        *(_OWORD *)&__sz[8] = v148;
        *(_OWORD *)&__sz[24] = *(_OWORD *)v149;
        long long v148 = 0u;
        memset(v149, 0, sizeof(v149));
        *(void *)&__sz[40] = v32;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v148);
        goto LABEL_143;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v146))
        {
          uint64_t v56 = &v146;
        }
        else
        {
          uint64_t v56 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v146, &v148);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v148);
        }
        uint64_t v79 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v145, (const pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        if (v145.__r_.__value_.__l.__size_)
        {
          uint64_t v80 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(v79);
          long long v81 = *(_OWORD *)(v80 + 16);
          long long v148 = *(_OWORD *)v80;
          *(_OWORD *)uint64_t v149 = v81;
          uint64_t v82 = *(void *)(v80 + 32);
          if (v82)
          {
            uint64_t v83 = *(atomic_ullong **)&v149[8];
            if (!*(void *)&v149[8]) {
              uint64_t v83 = (atomic_ullong *)(v82 - 16);
            }
            atomic_fetch_add_explicit(v83, 1uLL, memory_order_relaxed);
          }
          __sz[0] = 1;
          *(_OWORD *)&__sz[8] = v148;
          *(_OWORD *)&__sz[24] = *(_OWORD *)v149;
          long long v148 = 0u;
          memset(v149, 0, sizeof(v149));
          *(void *)&__sz[40] = v82;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v148);
        }
        else
        {
          char v84 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v84 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v84);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v148, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v147);
          *(_OWORD *)&__sz[8] = v148;
          *(_OWORD *)&__sz[24] = *(_OWORD *)v149;
          *(void *)&__sz[39] = *(void *)&v149[15];
          char v86 = v149[23];
          memset(v149, 0, sizeof(v149));
          __sz[0] = 0;
          __sz[47] = v86;
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v147.__r_.__value_.__l.__data_);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v145);
        goto LABEL_143;
      }
      std::string::basic_string[abi:ne180100]<0>(&v147, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v148, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v147);
      *(_OWORD *)&__sz[8] = v148;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v149;
      *(void *)&__sz[39] = *(void *)&v149[15];
      char v77 = v149[23];
      memset(v149, 0, sizeof(v149));
      __sz[0] = 0;
      __sz[47] = v77;
      if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_143:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v146);
LABEL_144:
        uint64_t v87 = v142;
        if (v142 && atomic_fetch_add_explicit((atomic_uint *volatile)(v142 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
        }
LABEL_147:
        if (__sz[0])
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v132);
          long long v132 = *(_OWORD *)&__sz[8];
          long long v133 = *(_OWORD *)&__sz[24];
          memset(&__sz[8], 0, 40);
          long long v134 = *(unint64_t **)&__sz[40];
          if (v12) {
            uint64_t v12 = v12;
          }
          else {
            uint64_t v12 = 4 * ((unint64_t)v132 > 1);
          }
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,realityio::DetailedError>::~Result((uint64_t)__sz);
          goto LABEL_152;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_186:
        uint64_t v100 = 0;
        goto LABEL_187;
      }
      char v76 = (void *)v147.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v43 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v43 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v43);
      }
      std::operator+<char>();
      long long v69 = std::string::append(&v143, ") at the given time: ");
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v144, *(double *)&__p);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v71 = &v144;
      }
      else {
        uint64_t v71 = (std::string *)v144.__r_.__value_.__r.__words[0];
      }
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v144.__r_.__value_.__l.__size_;
      }
      uint64_t v73 = std::string::append(&v145, (const std::string::value_type *)v71, size);
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v148, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v147);
      *(_OWORD *)&__sz[8] = v148;
      *(_OWORD *)&__sz[24] = *(_OWORD *)v149;
      *(void *)&__sz[39] = *(void *)&v149[15];
      char v75 = v149[23];
      memset(v149, 0, sizeof(v149));
      __sz[0] = 0;
      __sz[47] = v75;
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      char v76 = (void *)v143.__r_.__value_.__r.__words[0];
    }
    operator delete(v76);
    goto LABEL_143;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(void *)v17 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v148);
    uint64_t v27 = *(void **)&__sz[16];
    char v4 = __sz[39];
    memset(&__sz[16], 0, 24);
    std::string __p = v27;
    if ((v149[7] & 0x80000000) != 0) {
      operator delete((void *)v148);
    }
LABEL_90:
    long long v148 = 0u;
    *(_OWORD *)uint64_t v149 = 0u;
    if (DWORD2(v132))
    {
      *(void *)__sz = "vt/array.h";
      *(void *)&__sz[8] = "emplace_back";
      *(void *)&__sz[16] = 433;
      *(void *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::"
                             "emplace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4d, Args = <pxrInterna"
                             "l__aapl__pxrReserved__::GfVec4d>]";
      __sz[32] = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_99:
      if (v4 < 0) {
        operator delete(__p);
      }
      goto LABEL_152;
    }
    uint64_t v63 = v132;
    if (*((void *)&v133 + 1)) {
      goto LABEL_196;
    }
    uint64_t v64 = v134;
    if (v134)
    {
      unint64_t v65 = atomic_load(v134 - 2);
      if (v65 != 1) {
        goto LABEL_196;
      }
      uint64_t v64 = v134;
      uint64_t v66 = *(v134 - 1);
    }
    else
    {
      uint64_t v66 = 0;
    }
    if ((void)v132 != v66)
    {
      long long v67 = &v64[4 * v132];
      *(_OWORD *)long long v67 = v148;
      *((_OWORD *)v67 + 1) = *(_OWORD *)v149;
LABEL_98:
      *(void *)&long long v132 = v132 + 1;
      goto LABEL_99;
    }
LABEL_196:
    unint64_t v107 = v134;
    uint64_t v108 = 1;
    do
    {
      unint64_t v109 = v108;
      v108 *= 2;
    }
    while (v109 < (uint64_t)v132 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v132, v109);
    std::vector<unsigned int> v111 = New;
    if (v63)
    {
      uint64_t v112 = 32 * v63;
      uint64_t v113 = New;
      do
      {
        long long v114 = *(_OWORD *)v107;
        long long v115 = *((_OWORD *)v107 + 1);
        v107 += 4;
        *(_OWORD *)uint64_t v113 = v114;
        *((_OWORD *)v113 + 1) = v115;
        v113 += 4;
        v112 -= 32;
      }
      while (v112);
    }
    uint64_t v116 = &New[4 * v63];
    *(_OWORD *)uint64_t v116 = v148;
    *((_OWORD *)v116 + 1) = *(_OWORD *)v149;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v132);
    long long v134 = v111;
    goto LABEL_98;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v146, a2);
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v146);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v13))
  {
    unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v146);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v19);
  }
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v146);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v14);
  double v141 = v20;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2))
  {
    v144.__r_.__value_.__l.__size_ = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v144))
      {
        uint64_t v21 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v144);
        unint64_t v22 = *(void *)v21;
        unint64_t v23 = *(void *)(v21 + 8);
        unint64_t v24 = *(void *)(v21 + 24);
        std::string __p = *(void **)(v21 + 16);
        int v25 = 1;
LABEL_80:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v144);
        goto LABEL_81;
      }
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v144);
      {
        char v40 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v144);
        uint64_t v41 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v147, (const pxrInternal__aapl__pxrReserved__::VtValue *)v40);
        if (v147.__r_.__value_.__l.__size_)
        {
          uint64_t v42 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>(v41);
          unint64_t v22 = *(void *)v42;
          unint64_t v23 = *(void *)(v42 + 8);
          unint64_t v24 = *(void *)(v42 + 24);
          std::string __p = *(void **)(v42 + 16);
          int v25 = 1;
        }
        else
        {
          uint64_t v78 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v78 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v78);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v148);
          unint64_t v22 = *(void *)__sz;
          unint64_t v23 = *(void *)&__sz[8];
          int v85 = *(void **)&__sz[16];
          unint64_t v24 = *(void *)&__sz[24];
          char v4 = __sz[39];
          memset(&__sz[16], 0, 24);
          std::string __p = v85;
          if ((v149[7] & 0x80000000) != 0) {
            operator delete((void *)v148);
          }
          int v25 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v147);
        goto LABEL_80;
      }
      std::string::basic_string[abi:ne180100]<0>(&v148, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v148);
      unint64_t v22 = *(void *)__sz;
      unint64_t v23 = *(void *)&__sz[8];
      uint64_t v57 = *(void **)&__sz[16];
      unint64_t v24 = *(void *)&__sz[24];
      char v4 = __sz[39];
      memset(&__sz[16], 0, 24);
      std::string __p = v57;
      if ((v149[7] & 0x80000000) == 0)
      {
LABEL_79:
        int v25 = 0;
        goto LABEL_80;
      }
      long long v51 = (void *)v148;
    }
    else
    {
      std::vector<unsigned int>::size_type v34 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v34 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v34);
      }
      std::operator+<char>();
      long long v44 = std::string::append(&v145, ") at the given time: ");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v143, v141);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v46 = &v143;
      }
      else {
        uint64_t v46 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v47 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v47 = v143.__r_.__value_.__l.__size_;
      }
      uint64_t v48 = std::string::append(&v147, (const std::string::value_type *)v46, v47);
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      *(void *)uint64_t v149 = *((void *)&v48->__r_.__value_.__l + 2);
      long long v148 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v148);
      unint64_t v22 = *(void *)__sz;
      unint64_t v23 = *(void *)&__sz[8];
      long long v50 = *(void **)&__sz[16];
      unint64_t v24 = *(void *)&__sz[24];
      char v4 = __sz[39];
      memset(&__sz[16], 0, 24);
      std::string __p = v50;
      if ((v149[7] & 0x80000000) != 0) {
        operator delete((void *)v148);
      }
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v143.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      long long v51 = (void *)v145.__r_.__value_.__r.__words[0];
    }
    operator delete(v51);
    goto LABEL_79;
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(void *)v26 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v148);
  unint64_t v22 = *(void *)__sz;
  unint64_t v23 = *(void *)&__sz[8];
  char v37 = *(void **)&__sz[16];
  unint64_t v24 = *(void *)&__sz[24];
  char v4 = __sz[39];
  memset(&__sz[16], 0, 24);
  std::string __p = v37;
  if ((v149[7] & 0x80000000) != 0) {
    operator delete((void *)v148);
  }
  int v25 = 0;
LABEL_81:
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v146.__type_name;
  if (v146.__type_name
    && atomic_fetch_add_explicit((atomic_uint *volatile)(v146.__type_name + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(void *)type_name + 8))(type_name);
  }
  if (!v25) {
    goto LABEL_90;
  }
  if (!DWORD2(v132))
  {
    uint64_t v59 = v132;
    if (*((void *)&v133 + 1)) {
      goto LABEL_202;
    }
    long long v60 = v134;
    if (v134)
    {
      unint64_t v61 = atomic_load(v134 - 2);
      if (v61 != 1) {
        goto LABEL_202;
      }
      long long v60 = v134;
      uint64_t v62 = *(v134 - 1);
    }
    else
    {
      uint64_t v62 = 0;
    }
    if ((void)v132 != v62)
    {
      char v68 = &v60[4 * v132];
      unint64_t *v68 = v22;
      v68[1] = v23;
      v68[2] = (unint64_t)__p;
      v68[3] = v24;
LABEL_104:
      *(void *)&long long v132 = v132 + 1;
      goto LABEL_152;
    }
LABEL_202:
    uint64_t v117 = v134;
    uint64_t v118 = 1;
    do
    {
      unint64_t v119 = v118;
      v118 *= 2;
    }
    while (v119 < (uint64_t)v132 + 1);
    uint64_t v120 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v132, v119);
    int v121 = v120;
    if (v59)
    {
      uint64_t v122 = 32 * v59;
      uint64_t v123 = v120;
      do
      {
        long long v124 = *(_OWORD *)v117;
        long long v125 = *((_OWORD *)v117 + 1);
        v117 += 4;
        *(_OWORD *)uint64_t v123 = v124;
        *((_OWORD *)v123 + 1) = v125;
        v123 += 4;
        v122 -= 32;
      }
      while (v122);
    }
    double v126 = &v120[4 * v59];
    *double v126 = v22;
    v126[1] = v23;
    v126[2] = (unint64_t)__p;
    v126[3] = v24;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v132);
    long long v134 = v121;
    goto LABEL_104;
  }
  *(void *)__sz = "vt/array.h";
  *(void *)&__sz[8] = "emplace_back";
  *(void *)&__sz[16] = 433;
  *(void *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::empl"
                         "ace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4d, Args = <const pxrInternal_"
                         "_aapl__pxrReserved__::GfVec4d &>]";
  __sz[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_152:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v129, v132);
  int v88 = (float32x4_t *)v129;
  if ((void)v132)
  {
    uint64_t v89 = (float64x2_t *)v134;
    uint64_t v90 = 32 * v132;
    do
    {
      float64x2_t v92 = *v89;
      float64x2_t v91 = v89[1];
      v89 += 2;
      *v88++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v92), v91);
      v90 -= 32;
    }
    while (v90);
    int v88 = (float32x4_t *)v129;
  }
  if (!IsPrimvar) {
    goto LABEL_170;
  }
  memset(__sz, 0, 40);
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v94 = Indices;
  if (Indices)
  {
    long long v148 = 0uLL;
    *(void *)uint64_t v149 = 0;
    std::vector<int>::resize((std::vector<unsigned int> *)&v148, *(std::vector<unsigned int>::size_type *)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    char v95 = *(int **)&__sz[32];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    uint64_t v96 = *(void *)&__sz[32] + 4 * *(void *)__sz;
    if (v95 != (int *)v96)
    {
      uint64_t v97 = (_DWORD *)v148;
      do
      {
        int v98 = *v95++;
        *v97++ = v98;
      }
      while (v95 != (int *)v96);
    }
    if (!a3)
    {
      unint64_t v99 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v99 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v99);
      }
    }
    uint64_t v100 = REGeomModelDescriptorAddIndexedAttributeVector4F();
    if ((void)v148)
    {
      *((void *)&v148 + 1) = v148;
      operator delete((void *)v148);
    }
  }
  else
  {
    uint64_t v100 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v94 & 1) == 0)
  {
LABEL_170:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v12 == 4) {
      char v102 = 1;
    }
    else {
      char v102 = IsArray;
    }
    if ((v102 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v12)
        ? (int v104 = IsScalar)
        : (int v104 = 0),
          v104 == 1))
    {
      if (!a3)
      {
        std::string v105 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v105 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v105 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v105);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD270](a1, a3, v12, v132, v88))
      {
        uint64_t v100 = 1;
        goto LABEL_187;
      }
    }
    goto LABEL_186;
  }
LABEL_187:
  if (v129)
  {
    std::string v130 = v129;
    operator delete(v129);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v132);
  if ((v139 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v138 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
  if (v136) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v136);
  }
  return v100;
}

void sub_23F5D9328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v47 = a34;
  if (a34 && atomic_fetch_add_explicit((atomic_uint *volatile)(a34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  if (__p) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio39convertAndAddAttributeToModelDescriptorIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fEEbP21REGeomModelDescriptorRKNS1_12UsdAttributeEPKcRKNS1_7TfTokenEb(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v121, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v121);
  }
  else
  {
    int v121 = 3;
    uint64_t v122 = 0;
    char v4 = &v121;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v12 = *a4;
    *(void *)__sz = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)__sz &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v13 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v11);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__sz & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v120 = 0;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v115 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName)) {
      goto LABEL_186;
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
      *(_OWORD *)&__sz[8] = v134;
      *(void *)&__sz[24] = v135.__begin_;
      *(void *)&__sz[32] = v135.__end_;
      *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
      char value_high = HIBYTE(v135.__end_cap_.__value_);
      memset(&v135, 0, sizeof(v135));
      __sz[0] = 0;
      __sz[47] = value_high;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      goto LABEL_147;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v127, a2);
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v127);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v16))
    {
      int v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v127);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v25);
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v127);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v17);
    double v126 = v26;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
    {
      uint64_t v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v32 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
      *(_OWORD *)&__sz[8] = v134;
      *(void *)&__sz[24] = v135.__begin_;
      *(void *)&__sz[32] = v135.__end_;
      *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
      char v46 = HIBYTE(v135.__end_cap_.__value_);
      memset(&v135, 0, sizeof(v135));
      __sz[0] = 0;
      __sz[47] = v46;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      goto LABEL_144;
    }
    v132.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v132))
      {
        uint64_t v27 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v132);
        long long v28 = *(_OWORD *)(v27 + 16);
        long long v134 = *(_OWORD *)v27;
        *(_OWORD *)&v135.__begin_ = v28;
        uint64_t v29 = *(void *)(v27 + 32);
        if (v29)
        {
          end = (atomic_ullong *)v135.__end_;
          if (!v135.__end_) {
            end = (atomic_ullong *)(v29 - 16);
          }
          atomic_fetch_add_explicit(end, 1uLL, memory_order_relaxed);
        }
        __sz[0] = 1;
        *(_OWORD *)&__sz[8] = v134;
        *(_OWORD *)&__sz[24] = *(_OWORD *)&v135.__begin_;
        long long v134 = 0u;
        memset(&v135, 0, sizeof(v135));
        *(void *)&__sz[40] = v29;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
        goto LABEL_143;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v132);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v132))
        {
          long long v50 = &v132;
        }
        else
        {
          long long v50 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v132, &v134);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v134);
        }
        long long v70 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v131, (const pxrInternal__aapl__pxrReserved__::VtValue *)v50);
        if (v131.__r_.__value_.__l.__size_)
        {
          uint64_t v71 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(v70);
          long long v72 = *(_OWORD *)(v71 + 16);
          long long v134 = *(_OWORD *)v71;
          *(_OWORD *)&v135.__begin_ = v72;
          uint64_t v73 = *(void *)(v71 + 32);
          if (v73)
          {
            long long v74 = (atomic_ullong *)v135.__end_;
            if (!v135.__end_) {
              long long v74 = (atomic_ullong *)(v73 - 16);
            }
            atomic_fetch_add_explicit(v74, 1uLL, memory_order_relaxed);
          }
          __sz[0] = 1;
          *(_OWORD *)&__sz[8] = v134;
          *(_OWORD *)&__sz[24] = *(_OWORD *)&v135.__begin_;
          long long v134 = 0u;
          memset(&v135, 0, sizeof(v135));
          *(void *)&__sz[40] = v73;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v134);
        }
        else
        {
          char v75 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v75 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v75);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
          *(_OWORD *)&__sz[8] = v134;
          *(void *)&__sz[24] = v135.__begin_;
          *(void *)&__sz[32] = v135.__end_;
          *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
          char v76 = HIBYTE(v135.__end_cap_.__value_);
          memset(&v135, 0, sizeof(v135));
          __sz[0] = 0;
          __sz[47] = v76;
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v131);
        goto LABEL_143;
      }
      std::string::basic_string[abi:ne180100]<0>(&v133, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
      *(_OWORD *)&__sz[8] = v134;
      *(void *)&__sz[24] = v135.__begin_;
      *(void *)&__sz[32] = v135.__end_;
      *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
      char v68 = HIBYTE(v135.__end_cap_.__value_);
      memset(&v135, 0, sizeof(v135));
      __sz[0] = 0;
      __sz[47] = v68;
      if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_143:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v132);
LABEL_144:
        uint64_t v77 = v128;
        if (v128 && atomic_fetch_add_explicit((atomic_uint *volatile)(v128 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
        }
LABEL_147:
        if (__sz[0])
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v118);
          long long v118 = *(_OWORD *)&__sz[8];
          long long v119 = *(_OWORD *)&__sz[24];
          memset(&__sz[8], 0, 40);
          uint64_t v120 = *(void **)&__sz[40];
          if (v13) {
            uint64_t v13 = v13;
          }
          else {
            uint64_t v13 = 4 * ((unint64_t)v118 > 1);
          }
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,realityio::DetailedError>::~Result((uint64_t)__sz);
          goto LABEL_152;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,realityio::DetailedError>::~Result((uint64_t)__sz);
LABEL_186:
        uint64_t v90 = 0;
        goto LABEL_187;
      }
      long long v67 = (void *)v133.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v38 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
      }
      std::operator+<char>();
      long long v60 = std::string::append(&v129, ") at the given time: ");
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v131.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v130, v126);
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v62 = &v130;
      }
      else {
        uint64_t v62 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v130.__r_.__value_.__l.__size_;
      }
      uint64_t v64 = std::string::append(&v131, (const std::string::value_type *)v62, size);
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v133.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v134, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v133);
      *(_OWORD *)&__sz[8] = v134;
      *(void *)&__sz[24] = v135.__begin_;
      *(void *)&__sz[32] = v135.__end_;
      *(void *)&__sz[39] = *(std::vector<unsigned int>::pointer *)((char *)&v135.__end_ + 7);
      char v66 = HIBYTE(v135.__end_cap_.__value_);
      memset(&v135, 0, sizeof(v135));
      __sz[0] = 0;
      __sz[47] = v66;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      long long v67 = (void *)v129.__r_.__value_.__r.__words[0];
    }
    operator delete(v67);
    goto LABEL_143;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
    if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
    char v4 = *(int **)&__sz[16];
    char v5 = __sz[39];
    memset(&__sz[16], 0, 24);
    if (SHIBYTE(v135.__begin_) < 0) {
      operator delete((void *)v134);
    }
LABEL_90:
    if (DWORD2(v118))
    {
      *(void *)__sz = "vt/array.h";
      *(void *)&__sz[8] = "emplace_back";
      *(void *)&__sz[16] = 433;
      *(void *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::"
                             "emplace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4h, Args = <pxrInterna"
                             "l__aapl__pxrReserved__::GfVec4h>]";
      __sz[32] = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_99:
      if (v5 < 0) {
        operator delete(v4);
      }
      goto LABEL_152;
    }
    uint64_t v56 = v118;
    if (*((void *)&v119 + 1)) {
      goto LABEL_196;
    }
    uint64_t v57 = v120;
    if (v120)
    {
      unint64_t v58 = atomic_load(v120 - 2);
      if (v58 != 1) {
        goto LABEL_196;
      }
      uint64_t v57 = v120;
      uint64_t v59 = *(v120 - 1);
    }
    else
    {
      uint64_t v59 = 0;
    }
    if ((void)v118 != v59)
    {
      v57[(void)v118] = 0;
LABEL_98:
      *(void *)&long long v118 = v118 + 1;
      goto LABEL_99;
    }
LABEL_196:
    uint64_t v97 = v120;
    uint64_t v98 = 1;
    do
    {
      unint64_t v99 = v98;
      v98 *= 2;
    }
    while (v99 < (uint64_t)v118 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v118, v99);
    double v101 = New;
    if (v56)
    {
      uint64_t v102 = 8 * v56;
      uint64_t v103 = New;
      do
      {
        uint64_t v104 = *v97++;
        *v103++ = v104;
        v102 -= 8;
      }
      while (v102);
    }
    New[v56] = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v118);
    uint64_t v120 = v101;
    goto LABEL_98;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v132, a2);
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v132);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v14))
  {
    double v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v132);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v20);
  }
  unint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v132);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v15);
  double v127 = v21;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2))
  {
    v130.__r_.__value_.__l.__size_ = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        uint64_t v22 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
        int v23 = 1;
LABEL_80:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
        goto LABEL_81;
      }
      std::vector<unsigned int>::size_type v34 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
      {
        char v36 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
        char v37 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v133, (const pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        if (v133.__r_.__value_.__l.__size_)
        {
          uint64_t v22 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>(v37);
          int v23 = 1;
        }
        else
        {
          long long v69 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
          if ((*(void *)v69 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v69);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
          uint64_t v22 = *(void *)__sz;
          char v4 = *(int **)&__sz[16];
          char v5 = __sz[39];
          memset(&__sz[16], 0, 24);
          if (SHIBYTE(v135.__begin_) < 0) {
            operator delete((void *)v134);
          }
          int v23 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v133);
        goto LABEL_80;
      }
      std::string::basic_string[abi:ne180100]<0>(&v134, "Value is not of the given type");
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
      uint64_t v22 = *(void *)__sz;
      char v4 = *(int **)&__sz[16];
      char v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if ((SHIBYTE(v135.__begin_) & 0x80000000) == 0)
      {
LABEL_79:
        int v23 = 0;
        goto LABEL_80;
      }
      long long v45 = (void *)v134;
    }
    else
    {
      long long v31 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
      }
      std::operator+<char>();
      uint64_t v39 = std::string::append(&v131, ") at the given time: ");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v133.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v129, v127);
      if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v41 = &v129;
      }
      else {
        uint64_t v41 = (std::string *)v129.__r_.__value_.__r.__words[0];
      }
      if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = v129.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = std::string::append(&v133, (const std::string::value_type *)v41, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v135.__begin_ = (std::vector<unsigned int>::pointer)v43->__r_.__value_.__r.__words[2];
      long long v134 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
      uint64_t v22 = *(void *)__sz;
      char v4 = *(int **)&__sz[16];
      char v5 = __sz[39];
      memset(&__sz[16], 0, 24);
      if (SHIBYTE(v135.__begin_) < 0) {
        operator delete((void *)v134);
      }
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v129.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      long long v45 = (void *)v131.__r_.__value_.__r.__words[0];
    }
    operator delete(v45);
    goto LABEL_79;
  }
  unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
  if ((*(void *)v24 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(__sz, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v134);
  uint64_t v22 = *(void *)__sz;
  char v4 = *(int **)&__sz[16];
  char v5 = __sz[39];
  memset(&__sz[16], 0, 24);
  if (SHIBYTE(v135.__begin_) < 0) {
    operator delete((void *)v134);
  }
  int v23 = 0;
LABEL_81:
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v132.__type_name;
  if (v132.__type_name
    && atomic_fetch_add_explicit((atomic_uint *volatile)(v132.__type_name + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(void *)type_name + 8))(type_name);
  }
  if (!v23) {
    goto LABEL_90;
  }
  if (!DWORD2(v118))
  {
    uint64_t v52 = v118;
    if (*((void *)&v119 + 1)) {
      goto LABEL_202;
    }
    uint64_t v53 = v120;
    if (v120)
    {
      unint64_t v54 = atomic_load(v120 - 2);
      if (v54 != 1) {
        goto LABEL_202;
      }
      uint64_t v53 = v120;
      uint64_t v55 = *(v120 - 1);
    }
    else
    {
      uint64_t v55 = 0;
    }
    if ((void)v118 != v55)
    {
      v53[(void)v118] = v22;
LABEL_104:
      *(void *)&long long v118 = v118 + 1;
      goto LABEL_152;
    }
LABEL_202:
    std::string v105 = v120;
    uint64_t v106 = 1;
    do
    {
      unint64_t v107 = v106;
      v106 *= 2;
    }
    while (v107 < (uint64_t)v118 + 1);
    uint64_t v108 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v118, v107);
    unint64_t v109 = v108;
    if (v52)
    {
      uint64_t v110 = 8 * v52;
      std::vector<unsigned int> v111 = v108;
      do
      {
        uint64_t v112 = *v105++;
        *v111++ = v112;
        v110 -= 8;
      }
      while (v110);
    }
    v108[v52] = v22;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v118);
    uint64_t v120 = v109;
    goto LABEL_104;
  }
  *(void *)__sz = "vt/array.h";
  *(void *)&__sz[8] = "emplace_back";
  *(void *)&__sz[16] = 433;
  *(void *)&__sz[24] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::empl"
                         "ace_back(Args &&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4h, Args = <const pxrInternal_"
                         "_aapl__pxrReserved__::GfVec4h &>]";
  __sz[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
LABEL_152:
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&v115, v118);
  uint64_t v78 = v115;
  if ((void)v118)
  {
    uint64_t v79 = (unsigned __int16 *)v120;
    uint64_t v80 = (unsigned __int16 *)&v120[v118];
    uint64_t v81 = MEMORY[0x263F90640];
    do
    {
      LODWORD(v82) = *(_DWORD *)(v81 + 4 * *v79);
      DWORD1(v82) = *(_DWORD *)(v81 + 4 * v79[1]);
      DWORD2(v82) = *(_DWORD *)(v81 + 4 * v79[2]);
      HIDWORD(v82) = *(_DWORD *)(v81 + 4 * v79[3]);
      *v78++ = v82;
      v79 += 4;
    }
    while (v79 != v80);
    uint64_t v78 = v115;
  }
  if (!IsPrimvar) {
    goto LABEL_170;
  }
  memset(__sz, 0, 40);
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v84 = Indices;
  if (Indices)
  {
    long long v134 = 0uLL;
    v135.__begin_ = 0;
    std::vector<int>::resize((std::vector<unsigned int> *)&v134, *(std::vector<unsigned int>::size_type *)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    int v85 = *(int **)&__sz[32];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    uint64_t v86 = *(void *)&__sz[32] + 4 * *(void *)__sz;
    if (v85 != (int *)v86)
    {
      uint64_t v87 = (_DWORD *)v134;
      do
      {
        int v88 = *v85++;
        *v87++ = v88;
      }
      while (v85 != (int *)v86);
    }
    if (!a3)
    {
      uint64_t v89 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)v89 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v89);
      }
    }
    uint64_t v90 = REGeomModelDescriptorAddIndexedAttributeVector4F();
    if ((void)v134)
    {
      *((void *)&v134 + 1) = v134;
      operator delete((void *)v134);
    }
  }
  else
  {
    uint64_t v90 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v84 & 1) == 0)
  {
LABEL_170:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v13 == 4) {
      char v92 = 1;
    }
    else {
      char v92 = IsArray;
    }
    if ((v92 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v13)
        ? (int v94 = IsScalar)
        : (int v94 = 0),
          v94 == 1))
    {
      if (!a3)
      {
        char v95 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v95 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v95 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v95);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD270](a1, a3, v13, v118, v78))
      {
        uint64_t v90 = 1;
        goto LABEL_187;
      }
    }
    goto LABEL_186;
  }
LABEL_187:
  if (v115)
  {
    uint64_t v116 = v115;
    operator delete(v115);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v118);
  if ((v125 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v125 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v124 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v124 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v123);
  if (v122) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v122);
  }
  return v90;
}

void sub_23F5DA5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v47 = a34;
  if (a34 && atomic_fetch_add_explicit((atomic_uint *volatile)(a34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  if (__p) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a26);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<int,int>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v45, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v45);
  }
  else
  {
    int v45 = 3;
    uint64_t v46 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    std::vector<unsigned int>::size_type v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v11 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v42);
        long long v42 = *(_OWORD *)&__sz[1];
        long long v43 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        long long v44 = v40;
        long long v40 = 0;
        if (v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = 4 * ((unint64_t)v42 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_29;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_59:
    uint64_t v24 = 0;
    goto LABEL_60;
  }
  realityio::getAttributeValue<int>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    LODWORD(v50.__begin_) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back<int>((uint64_t)&v42, &v50);
    goto LABEL_26;
  }
  if (DWORD2(v42))
  {
    v50.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v50.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v50.__end_cap_.__value_ = (unsigned int *)433;
    long long v51 = "void pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back(Args &&...) [T = int, Args = <const int &>]";
    char v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_26;
  }
  uint64_t v12 = v42;
  if (*((void *)&v43 + 1)) {
    goto LABEL_67;
  }
  uint64_t v13 = v44;
  if (v44)
  {
    unint64_t v14 = atomic_load(v44 - 2);
    if (v14 != 1) {
      goto LABEL_67;
    }
    uint64_t v13 = v44;
    uint64_t v15 = *(v44 - 1);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if ((void)v42 == v15)
  {
LABEL_67:
    long long v31 = v44;
    uint64_t v32 = 1;
    do
    {
      unint64_t v33 = v32;
      v32 *= 2;
    }
    while (v33 < (uint64_t)v42 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)&v42, v33);
    uint64_t v35 = New;
    if (v12)
    {
      uint64_t v36 = 4 * v12;
      char v37 = New;
      do
      {
        int v38 = *(_DWORD *)v31;
        long long v31 = (unint64_t *)((char *)v31 + 4);
        *(_DWORD *)char v37 = v38;
        char v37 = (unint64_t *)((char *)v37 + 4);
        v36 -= 4;
      }
      while (v36);
    }
    *((_DWORD *)New + v12) = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v42);
    long long v44 = v35;
    goto LABEL_24;
  }
  *((_DWORD *)v13 + v42) = __sz[1];
LABEL_24:
  *(void *)&long long v42 = v42 + 1;
LABEL_26:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v40) < 0) {
    operator delete((void *)__sz[3]);
  }
LABEL_29:
  uint64_t v16 = v44;
  if (!IsPrimvar) {
    goto LABEL_43;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v18 = Indices;
  if (Indices)
  {
    memset(&v50, 0, sizeof(v50));
    std::vector<int>::resize(&v50, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    unint64_t v19 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v20 = __sz[4] + 4 * __sz[0];
    if (v19 != (unsigned int *)v20)
    {
      begistd::string::size_type n = v50.__begin_;
      do
      {
        unsigned int v22 = *v19++;
        *begin++ = v22;
      }
      while (v19 != (unsigned int *)v20);
    }
    if (!a3)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
    }
    uint64_t v24 = REGeomModelDescriptorAddIndexedAttributeInt32();
    if (v50.__begin_)
    {
      v50.__end_ = v50.__begin_;
      operator delete(v50.__begin_);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v18 & 1) == 0)
  {
LABEL_43:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v11 == 4) {
      char v26 = 1;
    }
    else {
      char v26 = IsArray;
    }
    if ((v26 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v11)
        ? (int v28 = IsScalar)
        : (int v28 = 0),
          v28 == 1))
    {
      if (!a3)
      {
        uint64_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v29 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v29 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD200](a1, a3, v11, v42, v16))
      {
        uint64_t v24 = 1;
        goto LABEL_60;
      }
    }
    goto LABEL_59;
  }
LABEL_60:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v42);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
  if (v46) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
  }
  return v24;
}

void sub_23F5DAD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<unsigned int,unsigned int>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v56, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v56);
  }
  else
  {
    int v56 = 3;
    uint64_t v57 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    std::vector<unsigned int>::size_type v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v11 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
        long long v53 = *(_OWORD *)&__sz[1];
        long long v54 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        uint64_t v55 = v51;
        long long v51 = 0;
        if (v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = 4 * ((unint64_t)v53 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_36;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_66:
    uint64_t v28 = 0;
    goto LABEL_67;
  }
  realityio::getAttributeValue<unsigned int>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    if (DWORD2(v53))
    {
      v61.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v61.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v61.__end_cap_.__value_ = (unsigned int *)433;
      uint64_t v62 = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::emplace_back(Args &&...) [T = unsigned int, Ar"
            "gs = <unsigned int>]";
      char v63 = 0;
      goto LABEL_88;
    }
    uint64_t v16 = v53;
    if (!*((void *)&v54 + 1))
    {
      uint64_t v17 = v55;
      if (!v55)
      {
        uint64_t v19 = 0;
LABEL_30:
        if ((void)v53 != v19)
        {
          *((_DWORD *)v17 + v53) = 0;
          goto LABEL_32;
        }
        goto LABEL_80;
      }
      unint64_t v18 = atomic_load(v55 - 2);
      if (v18 == 1)
      {
        uint64_t v17 = v55;
        uint64_t v19 = *(v55 - 1);
        goto LABEL_30;
      }
    }
LABEL_80:
    long long v43 = v55;
    uint64_t v44 = 1;
    do
    {
      unint64_t v45 = v44;
      v44 *= 2;
    }
    while (v45 < (uint64_t)v53 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v53, v45);
    uint64_t v39 = New;
    if (v16)
    {
      uint64_t v47 = 4 * v16;
      uint64_t v48 = New;
      do
      {
        int v49 = *(_DWORD *)v43;
        long long v43 = (unint64_t *)((char *)v43 + 4);
        *(_DWORD *)uint64_t v48 = v49;
        uint64_t v48 = (unint64_t *)((char *)v48 + 4);
        v47 -= 4;
      }
      while (v47);
    }
    *((_DWORD *)New + v16) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
    goto LABEL_86;
  }
  if (DWORD2(v53))
  {
    v61.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v61.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v61.__end_cap_.__value_ = (unsigned int *)433;
    uint64_t v62 = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::emplace_back(Args &&...) [T = unsigned int, Args"
          " = <const unsigned int &>]";
    char v63 = 0;
LABEL_88:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_33;
  }
  uint64_t v12 = v53;
  if (*((void *)&v54 + 1)) {
    goto LABEL_74;
  }
  uint64_t v13 = v55;
  if (v55)
  {
    unint64_t v14 = atomic_load(v55 - 2);
    if (v14 != 1) {
      goto LABEL_74;
    }
    uint64_t v13 = v55;
    uint64_t v15 = *(v55 - 1);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if ((void)v53 == v15)
  {
LABEL_74:
    uint64_t v35 = v55;
    uint64_t v36 = 1;
    do
    {
      unint64_t v37 = v36;
      v36 *= 2;
    }
    while (v37 < (uint64_t)v53 + 1);
    int v38 = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v53, v37);
    uint64_t v39 = v38;
    if (v12)
    {
      uint64_t v40 = 4 * v12;
      uint64_t v41 = v38;
      do
      {
        int v42 = *(_DWORD *)v35;
        uint64_t v35 = (unint64_t *)((char *)v35 + 4);
        *(_DWORD *)uint64_t v41 = v42;
        uint64_t v41 = (unint64_t *)((char *)v41 + 4);
        v40 -= 4;
      }
      while (v40);
    }
    *((_DWORD *)v38 + v12) = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
LABEL_86:
    uint64_t v55 = v39;
    goto LABEL_32;
  }
  *((_DWORD *)v13 + v53) = __sz[1];
LABEL_32:
  *(void *)&long long v53 = v53 + 1;
LABEL_33:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v51) < 0) {
    operator delete((void *)__sz[3]);
  }
LABEL_36:
  std::vector<unsigned int>::size_type v20 = v55;
  if (!IsPrimvar) {
    goto LABEL_50;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v22 = Indices;
  if (Indices)
  {
    memset(&v61, 0, sizeof(v61));
    std::vector<int>::resize(&v61, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    int v23 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v24 = __sz[4] + 4 * __sz[0];
    if (v23 != (unsigned int *)v24)
    {
      begistd::string::size_type n = v61.__begin_;
      do
      {
        unsigned int v26 = *v23++;
        *begin++ = v26;
      }
      while (v23 != (unsigned int *)v24);
    }
    if (!a3)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
    }
    uint64_t v28 = REGeomModelDescriptorAddIndexedAttributeUInt32();
    if (v61.__begin_)
    {
      v61.__end_ = v61.__begin_;
      operator delete(v61.__begin_);
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v22 & 1) == 0)
  {
LABEL_50:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v11 == 4) {
      char v30 = 1;
    }
    else {
      char v30 = IsArray;
    }
    if ((v30 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v11)
        ? (int v32 = IsScalar)
        : (int v32 = 0),
          v32 == 1))
    {
      if (!a3)
      {
        unint64_t v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v33 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v33 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD230](a1, a3, v11, v53, v20))
      {
        uint64_t v28 = 1;
        goto LABEL_67;
      }
    }
    goto LABEL_66;
  }
LABEL_67:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
  if (v57) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
  }
  return v28;
}

void sub_23F5DB3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<unsigned char,unsigned char>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v56, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v56);
  }
  else
  {
    int v56 = 3;
    uint64_t v57 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    std::vector<unsigned int>::size_type v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v11 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
        long long v53 = *(_OWORD *)&__sz[1];
        long long v54 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        uint64_t v55 = v51;
        long long v51 = 0;
        if (v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = 4 * ((unint64_t)v53 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_36;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_66:
    uint64_t v28 = 0;
    goto LABEL_67;
  }
  realityio::getAttributeValue<unsigned char>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    if (DWORD2(v53))
    {
      v61.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v61.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v61.__end_cap_.__value_ = (unsigned int *)433;
      uint64_t v62 = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::emplace_back(Args &&...) [T = unsigned char, "
            "Args = <unsigned char>]";
      char v63 = 0;
      goto LABEL_88;
    }
    uint64_t v16 = v53;
    if (!*((void *)&v54 + 1))
    {
      uint64_t v17 = v55;
      if (!v55)
      {
        uint64_t v19 = 0;
LABEL_30:
        if ((void)v53 != v19)
        {
          *((unsigned char *)v17 + v53) = 0;
          goto LABEL_32;
        }
        goto LABEL_80;
      }
      unint64_t v18 = atomic_load(v55 - 2);
      if (v18 == 1)
      {
        uint64_t v17 = v55;
        uint64_t v19 = *(v55 - 1);
        goto LABEL_30;
      }
    }
LABEL_80:
    long long v43 = v55;
    uint64_t v44 = 1;
    do
    {
      unint64_t v45 = v44;
      v44 *= 2;
    }
    while (v45 < (uint64_t)v53 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v53, v45);
    uint64_t v39 = New;
    if (v16)
    {
      uint64_t v47 = v16;
      uint64_t v48 = New;
      do
      {
        char v49 = *(unsigned char *)v43;
        long long v43 = (unint64_t *)((char *)v43 + 1);
        *(unsigned char *)uint64_t v48 = v49;
        uint64_t v48 = (unint64_t *)((char *)v48 + 1);
        --v47;
      }
      while (v47);
    }
    *((unsigned char *)New + v16) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
    goto LABEL_86;
  }
  if (DWORD2(v53))
  {
    v61.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v61.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v61.__end_cap_.__value_ = (unsigned int *)433;
    uint64_t v62 = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::emplace_back(Args &&...) [T = unsigned char, Ar"
          "gs = <const unsigned char &>]";
    char v63 = 0;
LABEL_88:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_33;
  }
  uint64_t v12 = v53;
  if (*((void *)&v54 + 1)) {
    goto LABEL_74;
  }
  uint64_t v13 = v55;
  if (v55)
  {
    unint64_t v14 = atomic_load(v55 - 2);
    if (v14 != 1) {
      goto LABEL_74;
    }
    uint64_t v13 = v55;
    uint64_t v15 = *(v55 - 1);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if ((void)v53 == v15)
  {
LABEL_74:
    uint64_t v35 = v55;
    uint64_t v36 = 1;
    do
    {
      unint64_t v37 = v36;
      v36 *= 2;
    }
    while (v37 < (uint64_t)v53 + 1);
    int v38 = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v53, v37);
    uint64_t v39 = v38;
    if (v12)
    {
      uint64_t v40 = v12;
      uint64_t v41 = v38;
      do
      {
        char v42 = *(unsigned char *)v35;
        uint64_t v35 = (unint64_t *)((char *)v35 + 1);
        *(unsigned char *)uint64_t v41 = v42;
        uint64_t v41 = (unint64_t *)((char *)v41 + 1);
        --v40;
      }
      while (v40);
    }
    *((unsigned char *)v38 + v12) = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
LABEL_86:
    uint64_t v55 = v39;
    goto LABEL_32;
  }
  *((unsigned char *)v13 + v53) = __sz[1];
LABEL_32:
  *(void *)&long long v53 = v53 + 1;
LABEL_33:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v51) < 0) {
    operator delete((void *)__sz[3]);
  }
LABEL_36:
  std::vector<unsigned int>::size_type v20 = v55;
  if (!IsPrimvar) {
    goto LABEL_50;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v22 = Indices;
  if (Indices)
  {
    memset(&v61, 0, sizeof(v61));
    std::vector<int>::resize(&v61, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    int v23 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v24 = __sz[4] + 4 * __sz[0];
    if (v23 != (unsigned int *)v24)
    {
      begistd::string::size_type n = v61.__begin_;
      do
      {
        unsigned int v26 = *v23++;
        *begin++ = v26;
      }
      while (v23 != (unsigned int *)v24);
    }
    if (!a3)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
    }
    uint64_t v28 = REGeomModelDescriptorAddIndexedAttributeUInt8();
    if (v61.__begin_)
    {
      v61.__end_ = v61.__begin_;
      operator delete(v61.__begin_);
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v22 & 1) == 0)
  {
LABEL_50:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v11 == 4) {
      char v30 = 1;
    }
    else {
      char v30 = IsArray;
    }
    if ((v30 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v11)
        ? (int v32 = IsScalar)
        : (int v32 = 0),
          v32 == 1))
    {
      if (!a3)
      {
        unint64_t v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v33 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v33 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD240](a1, a3, v11, v53, v20))
      {
        uint64_t v28 = 1;
        goto LABEL_67;
      }
    }
    goto LABEL_66;
  }
LABEL_67:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
  if (v57) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
  }
  return v28;
}

void sub_23F5DBA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<float,float>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v45, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v45);
  }
  else
  {
    int v45 = 3;
    uint64_t v46 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    std::vector<unsigned int>::size_type v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v11 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v42);
        long long v42 = *(_OWORD *)&__sz[1];
        long long v43 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        uint64_t v44 = v40;
        uint64_t v40 = 0;
        if (v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = 4 * ((unint64_t)v42 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_29;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_59:
    uint64_t v24 = 0;
    goto LABEL_60;
  }
  realityio::getAttributeValue<float>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    LODWORD(v50.__begin_) = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back<float>((uint64_t)&v42, &v50);
    goto LABEL_26;
  }
  if (DWORD2(v42))
  {
    v50.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v50.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v50.__end_cap_.__value_ = (unsigned int *)433;
    long long v51 = "void pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back(Args &&...) [T = float, Args = <const float &>]";
    char v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_26;
  }
  uint64_t v12 = v42;
  if (*((void *)&v43 + 1)) {
    goto LABEL_67;
  }
  uint64_t v13 = v44;
  if (v44)
  {
    unint64_t v14 = atomic_load(v44 - 2);
    if (v14 != 1) {
      goto LABEL_67;
    }
    uint64_t v13 = v44;
    uint64_t v15 = *(v44 - 1);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if ((void)v42 == v15)
  {
LABEL_67:
    long long v31 = v44;
    uint64_t v32 = 1;
    do
    {
      unint64_t v33 = v32;
      v32 *= 2;
    }
    while (v33 < (uint64_t)v42 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)&v42, v33);
    uint64_t v35 = New;
    if (v12)
    {
      uint64_t v36 = 4 * v12;
      unint64_t v37 = New;
      do
      {
        int v38 = *(_DWORD *)v31;
        long long v31 = (unint64_t *)((char *)v31 + 4);
        *(_DWORD *)unint64_t v37 = v38;
        unint64_t v37 = (unint64_t *)((char *)v37 + 4);
        v36 -= 4;
      }
      while (v36);
    }
    *((_DWORD *)New + v12) = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v42);
    uint64_t v44 = v35;
    goto LABEL_24;
  }
  *((_DWORD *)v13 + v42) = __sz[1];
LABEL_24:
  *(void *)&long long v42 = v42 + 1;
LABEL_26:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v40) < 0) {
    operator delete((void *)__sz[3]);
  }
LABEL_29:
  uint64_t v16 = v44;
  if (!IsPrimvar) {
    goto LABEL_43;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v18 = Indices;
  if (Indices)
  {
    memset(&v50, 0, sizeof(v50));
    std::vector<int>::resize(&v50, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    uint64_t v19 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v20 = __sz[4] + 4 * __sz[0];
    if (v19 != (unsigned int *)v20)
    {
      begistd::string::size_type n = v50.__begin_;
      do
      {
        unsigned int v22 = *v19++;
        *begin++ = v22;
      }
      while (v19 != (unsigned int *)v20);
    }
    if (!a3)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
    }
    uint64_t v24 = REGeomModelDescriptorAddIndexedAttributeFloat();
    if (v50.__begin_)
    {
      v50.__end_ = v50.__begin_;
      operator delete(v50.__begin_);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v18 & 1) == 0)
  {
LABEL_43:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v11 == 4) {
      char v26 = 1;
    }
    else {
      char v26 = IsArray;
    }
    if ((v26 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v11)
        ? (int v28 = IsScalar)
        : (int v28 = 0),
          v28 == 1))
    {
      if (!a3)
      {
        uint64_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v29 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v29 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD1F0](a1, a3, v11, v42, v16))
      {
        uint64_t v24 = 1;
        goto LABEL_60;
      }
    }
    goto LABEL_59;
  }
LABEL_60:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v42);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
  if (v46) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
  }
  return v24;
}

void sub_23F5DC00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::convertAndAddAttributeToModelDescriptor<double,double>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, unint64_t a3, std::vector<unsigned int>::size_type *a4)
{
  int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
  if (IsPrimvar)
  {
    MEMORY[0x2455CEC30](&v56, a2);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)__sz, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v56);
  }
  else
  {
    int v56 = 3;
    uint64_t v57 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    std::vector<unsigned int>::size_type v10 = *a4;
    __sz[0] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      __sz[0] &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v11 = realityio::meshAttributeRateForInterpolation((realityio *)__sz, v9);
  if ((__sz[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__sz[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a2, (uint64_t)__sz);
      if (LOBYTE(__sz[0]))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
        long long v53 = *(_OWORD *)&__sz[1];
        long long v54 = *(_OWORD *)&__sz[3];
        memset(&__sz[1], 0, 32);
        uint64_t v55 = v51;
        long long v51 = 0;
        if (v11) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = 4 * ((unint64_t)v53 > 1);
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)__sz);
        goto LABEL_36;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)__sz);
    }
LABEL_66:
    uint64_t v28 = 0;
    goto LABEL_67;
  }
  realityio::getAttributeValue<double>(a2, (uint64_t)__sz);
  if (!LOBYTE(__sz[0]))
  {
    if (DWORD2(v53))
    {
      v61.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
      v61.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
      v61.__end_cap_.__value_ = (unsigned int *)433;
      uint64_t v62 = "void pxrInternal__aapl__pxrReserved__::VtArray<double>::emplace_back(Args &&...) [T = double, Args = <double>]";
      char v63 = 0;
      goto LABEL_88;
    }
    uint64_t v16 = v53;
    if (!*((void *)&v54 + 1))
    {
      uint64_t v17 = v55;
      if (!v55)
      {
        uint64_t v19 = 0;
LABEL_30:
        if ((void)v53 != v19)
        {
          v17[(void)v53] = 0;
          goto LABEL_32;
        }
        goto LABEL_80;
      }
      unint64_t v18 = atomic_load(v55 - 2);
      if (v18 == 1)
      {
        uint64_t v17 = v55;
        uint64_t v19 = *(v55 - 1);
        goto LABEL_30;
      }
    }
LABEL_80:
    long long v43 = v55;
    uint64_t v44 = 1;
    do
    {
      unint64_t v45 = v44;
      v44 *= 2;
    }
    while (v45 < (uint64_t)v53 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v53, v45);
    uint64_t v39 = New;
    if (v16)
    {
      uint64_t v47 = 8 * v16;
      uint64_t v48 = New;
      do
      {
        uint64_t v49 = *v43++;
        *v48++ = v49;
        v47 -= 8;
      }
      while (v47);
    }
    New[v16] = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
    goto LABEL_86;
  }
  if (DWORD2(v53))
  {
    v61.__begin_ = (std::vector<unsigned int>::pointer)"vt/array.h";
    v61.__end_ = (std::vector<unsigned int>::pointer)"emplace_back";
    v61.__end_cap_.__value_ = (unsigned int *)433;
    uint64_t v62 = "void pxrInternal__aapl__pxrReserved__::VtArray<double>::emplace_back(Args &&...) [T = double, Args = <const double &>]";
    char v63 = 0;
LABEL_88:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    goto LABEL_33;
  }
  uint64_t v12 = v53;
  if (*((void *)&v54 + 1)) {
    goto LABEL_74;
  }
  uint64_t v13 = v55;
  if (v55)
  {
    unint64_t v14 = atomic_load(v55 - 2);
    if (v14 != 1) {
      goto LABEL_74;
    }
    uint64_t v13 = v55;
    uint64_t v15 = *(v55 - 1);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if ((void)v53 == v15)
  {
LABEL_74:
    uint64_t v35 = v55;
    uint64_t v36 = 1;
    do
    {
      unint64_t v37 = v36;
      v36 *= 2;
    }
    while (v37 < (uint64_t)v53 + 1);
    int v38 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v53, v37);
    uint64_t v39 = v38;
    if (v12)
    {
      uint64_t v40 = 8 * v12;
      uint64_t v41 = v38;
      do
      {
        uint64_t v42 = *v35++;
        *v41++ = v42;
        v40 -= 8;
      }
      while (v40);
    }
    v38[v12] = __sz[1];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
LABEL_86:
    uint64_t v55 = v39;
    goto LABEL_32;
  }
  v13[(void)v53] = __sz[1];
LABEL_32:
  *(void *)&long long v53 = v53 + 1;
LABEL_33:
  if (!LOBYTE(__sz[0]) && SHIBYTE(v51) < 0) {
    operator delete((void *)__sz[3]);
  }
LABEL_36:
  std::vector<unsigned int>::size_type v20 = v55;
  if (!IsPrimvar) {
    goto LABEL_50;
  }
  memset(__sz, 0, sizeof(__sz));
  int Indices = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  char v22 = Indices;
  if (Indices)
  {
    memset(&v61, 0, sizeof(v61));
    std::vector<int>::resize(&v61, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    int v23 = (unsigned int *)__sz[4];
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    std::vector<unsigned int>::size_type v24 = __sz[4] + 4 * __sz[0];
    if (v23 != (unsigned int *)v24)
    {
      begistd::string::size_type n = v61.__begin_;
      do
      {
        unsigned int v26 = *v23++;
        *begin++ = v26;
      }
      while (v23 != (unsigned int *)v24);
    }
    if (!a3)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
    }
    uint64_t v28 = REGeomModelDescriptorAddIndexedAttributeDouble();
    if (v61.__begin_)
    {
      v61.__end_ = v61.__begin_;
      operator delete(v61.__begin_);
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  if ((v22 & 1) == 0)
  {
LABEL_50:
    char IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    if (v11 == 4) {
      char v30 = 1;
    }
    else {
      char v30 = IsArray;
    }
    if ((v30 & 1) != 0
      || ((int IsScalar = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName),
           !v11)
        ? (int v32 = IsScalar)
        : (int v32 = 0),
          v32 == 1))
    {
      if (!a3)
      {
        unint64_t v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a2);
        a3 = (*(void *)v33 & 0xFFFFFFFFFFFFFFF8) != 0
           ? (*(void *)v33 & 0xFFFFFFFFFFFFFFF8) + 16
           : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
        if (*(char *)(a3 + 23) < 0) {
          a3 = *(void *)a3;
        }
      }
      if (MEMORY[0x2455CD1E0](a1, a3, v11, v53, v20))
      {
        uint64_t v28 = 1;
        goto LABEL_67;
      }
    }
    goto LABEL_66;
  }
LABEL_67:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
  if (v57) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
  }
  return v28;
}

void sub_23F5DC6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!(_BYTE)a11 && a19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a27);
  _Unwind_Resume(a1);
}

void realityio::addSkeletonJointBindingsToModelDescriptor(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a2, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a3, const pxrInternal__aapl__pxrReserved__::UsdPrim *a4)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a3 + 1);
  if (v4
    && (*(unsigned char *)(v4 + 57) & 8) == 0
    && (*(unsigned int (**)(const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *))(*(void *)a3 + 32))(a3)
    && realityio::isValidSkeleton(a3, v9))
  {
    unsigned int __sz = REGeomModelDescriptorGetVertexCount();
    MEMORY[0x2455CE910](v79);
    pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find();
    uint64_t v76 = 0;
    long long v75 = 0u;
    long long v74 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((uint64_t *)&v71, (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v79, a3);
    if (v71)
    {
      MEMORY[0x2455CF1C0](v68);
      if (v78
        && (*(unsigned char *)(v78 + 57) & 8) == 0
        && (std::vector<unsigned int>::size_type v10 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t *))(v77 + 32))(&v77),
            v10))
      {
        uint64_t UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v10);
        uint64_t v12 = UsdPrimDefaultPredicate[1].i64[0];
        v13.i64[0] = -8193;
        v13.i64[0] = vandq_s8(*UsdPrimDefaultPredicate, v13).u64[0];
        v13.i64[1] = vorrq_s8(*UsdPrimDefaultPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
        int8x16_t v66 = v13;
        uint64_t v67 = v12;
        pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate();
        pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery(&v61, (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v79, a4);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::operator=((uint64_t)v68, (uint64_t)&v61);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&v61);
      }
      else
      {
        long long v55 = v74;
        long long v56 = v75;
        *(void *)&long long v57 = v76;
        if (v76)
        {
          unint64_t v14 = (atomic_ullong *)(v76 - 16);
          if (*((void *)&v56 + 1)) {
            unint64_t v14 = (atomic_ullong *)*((void *)&v56 + 1);
          }
          atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr((uint64_t *)&v43, a2);
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr((uint64_t *)&v39, a2);
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr((uint64_t *)&v36, a2);
        *(void *)&long long v49 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        LODWORD(v33) = 3;
        *((void *)&v33 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *((void *)&v34 + 1) = 0;
        LODWORD(v3std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 3;
        *((void *)&v30 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *((void *)&v31 + 1) = 0;
        LODWORD(v59.__begin_) = 4;
        v59.__end_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v60 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery();
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::operator=((uint64_t)v68, (uint64_t)&v61);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&v61);
        if ((v60 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59.__end_cap_);
        if (v59.__end_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v59.__end_);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
        if ((BYTE8(v34) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v34 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
        if (*((void *)&v33 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v33 + 1));
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v47);
        if ((BYTE8(v37) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
        if (*((void *)&v36 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v36 + 1));
        }
        if ((v41 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
        if (*((void *)&v39 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v39 + 1));
        }
        if ((v46 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
        if (v44) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v55);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v68))
      {
        long long v15 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
        long long v55 = *MEMORY[0x263EF89A8];
        long long v56 = v15;
        long long v16 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
        long long v57 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
        long long v58 = v16;
        memset(&v59, 0, sizeof(v59));
        memset(&v54, 0, sizeof(v54));
        __dst = 0;
        char v52 = 0;
        uint64_t v53 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform();
        MEMORY[0x2455CE5D0](&v47, &v61);
        long long v55 = v47;
        long long v56 = v48;
        long long v57 = v49;
        long long v58 = v50;
        unsigned int v17 = v69;
        std::vector<int>::resize(&v59, __sz);
        begistd::string::size_type n = v59.__begin_;
        std::vector<unsigned int>::pointer end = v59.__end_;
        if (v59.__begin_ != v59.__end_)
        {
          unsigned int v20 = v17;
          do
          {
            *begin++ = v20;
            v20 += v17;
          }
          while (begin != end);
        }
        double v21 = v70;
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder((uint64_t *)&v43, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v71);
        unint64_t v22 = v43;
        LODWORD(v61) = 3;
        uint64_t v62 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        LODWORD(v47) = 3;
        *((void *)&v47 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *((void *)&v48 + 1) = 0;
        *(void *)&long long v49 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasJointInfluences((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)v68))
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=();
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=();
          Elementuint64_t Size = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v61);
        }
        else
        {
          Elementuint64_t Size = 0;
        }
        if (v22
          && (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
           || ElementSize == pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v47)))
        {
          pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray((uint64_t)&v39, v22);
          for (uint64_t i = 0; i != v22; ++i)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39);
            *(_DWORD *)(v42 + 4 * i) = i;
          }
          uint64_t v38 = 0;
          long long v36 = 0u;
          long long v37 = 0u;
          if (v21) {
            pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap<pxrInternal__aapl__pxrReserved__::VtArray<int>>(v21, (uint64_t)&v39, (unint64_t *)&v36);
          }
          else {
            pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)&v36, &v39);
          }
          uint64_t v35 = 0;
          long long v33 = 0u;
          long long v34 = 0u;
          if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()) {
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
          }
          __src = 0;
          long long v30 = 0u;
          long long v31 = 0u;
          if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()) {
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
          }
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a3, buf);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
          REGeomModelDescriptorAddSkinningData();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
          int v25 = (realityio *)MEMORY[0x2455CD270](a1, "skinnedAnimationGeometryBindTransform", 4, 4, &v55);
          if ((v25 & 1) == 0)
          {
            unsigned int v26 = *(NSObject **)(realityio::logObjects(v25) + 24);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a4, &__sz_4);
              uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__sz_4);
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = Text;
              _os_log_impl(&dword_23F4EA000, v26, OS_LOG_TYPE_DEFAULT, "Did not add bind transforms for (Prim \"%s\")", buf, 0xCu);
              pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__sz_4);
            }
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v33);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v36);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v39);
        }
        if ((v49 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v48) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
        if (*((void *)&v47 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v47 + 1));
        }
        if ((v65 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v64 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
        if (v62) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v43);
        if (__dst)
        {
          char v52 = __dst;
          operator delete(__dst);
        }
        if (v54.__begin_)
        {
          v54.__end_ = v54.__begin_;
          operator delete(v54.__begin_);
        }
        if (v59.__begin_)
        {
          v59.__end_ = v59.__begin_;
          operator delete(v59.__begin_);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)v68);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v73);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(&v72);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr(&v71);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v74);
    MEMORY[0x2455CE7D0](&v77);
    if (v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
    }
  }
}

void sub_23F5DD234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v71 = *(void *)(v69 - 128);
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a15);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a27);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a33);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a43);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&a69);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a38);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&STACK[0x390]);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::~UsdSkelSkeletonQuery((atomic_uint **)&STACK[0x520]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)(v69 - 208));
  MEMORY[0x2455CE7D0](v69 - 168);
  long long v72 = *(std::__shared_weak_count **)(v69 - 136);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::isValidSkeleton(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(&v11, this);
  uint64_t v20 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
    && (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)v19) & 1) != 0
    && (uint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v19)) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr(&v7, this);
    uint64_t v18 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
      && pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v17) == NumElements
      && (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v17) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(v6, this);
      uint64_t v16 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
        && pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v15) == NumElements)
      {
        uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      }
      else
      {
        uint64_t v4 = 0;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v6);
    }
    else
    {
      uint64_t v4 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    if (v8) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  return v4;
}

void sub_23F5DD670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 - 56));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 - 40));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, (int *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20);
  if (a2 != a1)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
    *(void *)(a2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=();
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v9 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v8;
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 160, (int *)(a2 + 160));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 164);
  if (a2 != a1)
  {
    uint64_t v10 = *(void *)(a1 + 168);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = 0;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  uint64_t v11 = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  uint64_t v12 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v11;
  if (v12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 192, (int *)(a2 + 192));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 196);
  if (a2 != a1)
  {
    uint64_t v13 = *(void *)(a1 + 200);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 20std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 200);
    *(void *)(a2 + 20std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  uint64_t v14 = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = 0;
  uint64_t v15 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v14;
  if (v15) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 224, (int *)(a2 + 224));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 228);
  if (a2 != a1)
  {
    uint64_t v16 = *(void *)(a1 + 232);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a2 + 232) = 0;
  }
  *(_DWORD *)(a1 + 24std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a2 + 240);
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a2 + 248) = 0;
  uint64_t v18 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = v17;
  if (v18) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 256, (int *)(a2 + 256));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 260);
  if (a2 != a1)
  {
    uint64_t v19 = *(void *)(a1 + 264);
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a2 + 264) = 0;
  }
  long long v20 = *(_OWORD *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 28std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  long long v22 = *(_OWORD *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  int v23 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__optional_storage_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>>(a1 + 304, a2 + 304);
  std::__optional_storage_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>>(a1 + 352, a2 + 352);
  return a1;
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap<pxrInternal__aapl__pxrReserved__::VtArray<int>>(unint64_t *a1, uint64_t a2, unint64_t *a3)
{
  if (a3)
  {
    unint64_t v6 = *a1;
    if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsIdentity((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)a1)
      && *(void *)a2 == v6)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)a3, (long long *)a2);
    }
    else
    {
      unint64_t v7 = *a3;
      int v18 = 0;
      v16[0] = &v18;
      pxrInternal__aapl__pxrReserved__::VtArray<int>::resize<pxrInternal__aapl__pxrReserved__::VtArray<int>::assign(unsigned long,int const&)::_Filler>(a3, v6, v16);
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      if (v6 > v7) {
        bzero((void *)(a3[4] + 4 * v7), 4 * (v6 - v7));
      }
      if ((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)a1) & 1) == 0)
      {
        if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_IsOrdered((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)a1))
        {
          if (v6 - a1[1] >= *(void *)a2) {
            unint64_t v8 = *(void *)a2;
          }
          else {
            unint64_t v8 = v6 - a1[1];
          }
          uint64_t v9 = *(const void **)(a2 + 32);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
          if (v8) {
            memmove((void *)(a3[4] + 4 * a1[1]), v9, 4 * v8);
          }
        }
        else
        {
          uint64_t v10 = *(_DWORD **)(a2 + 32);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
          unint64_t v11 = *(void *)a2;
          if (a1[2] < *(void *)a2) {
            unint64_t v11 = a1[2];
          }
          if (v11)
          {
            unint64_t v12 = a3[4];
            uint64_t v13 = (unsigned int *)a1[6];
            do
            {
              unsigned int v15 = *v13++;
              unint64_t v14 = v15;
              if ((v15 & 0x80000000) == 0 && *a3 > v14) {
                *(_DWORD *)(v12 + 4 * v14) = *v10;
              }
              ++v10;
              --v11;
            }
            while (v11);
          }
        }
      }
    }
  }
  else
  {
    v16[0] = "usdSkel/animMapper.h";
    v16[1] = "Remap";
    void v16[2] = (_DWORD *)204;
    uint64_t v16[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const "
             "typename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<int>]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v8);
  }
  return a1;
}

void sub_23F5DDC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  uint64_t v2 = *((void *)this + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
}

void realityio::makeValueLookupByIndex(void *a1, std::vector<unsigned int>::size_type __sz, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, std::vector<unsigned int> *a8)
{
  memset(&v26, 0, sizeof(v26));
  uint64_t v10 = a8;
  if (!a8)
  {
    switch(a7)
    {
      case 0:
        std::vector<unsigned int>::value_type __x = 0;
        std::vector<unsigned int>::resize(&v26, 1uLL, &__x);
        break;
      case 1:
        int v19 = __sz;
        uint64_t v20 = __sz;
        std::vector<int>::resize(&v26, __sz);
        if (v19)
        {
          uint64_t v21 = 0;
          begistd::string::size_type n = v26.__begin_;
          do
          {
            begin[v21] = v21;
            ++v21;
          }
          while (v20 != v21);
        }
        break;
      case 2:
        uint64_t v11 = a4 - a3;
        std::vector<unsigned int>::size_type v12 = ((unint64_t)(a4 - a3) >> 2);
        std::vector<int>::resize(&v26, v12);
        if ((v11 & 0x3FFFFFFFCLL) != 0)
        {
          uint64_t v13 = 0;
          std::vector<unsigned int>::pointer v14 = v26.__begin_;
          do
          {
            v14[v13] = v13;
            ++v13;
          }
          while (v12 != v13);
        }
        break;
      case 3:
        uint64_t v15 = a6 - a5;
        std::vector<unsigned int>::size_type v16 = ((unint64_t)(a6 - a5) >> 2);
        std::vector<int>::resize(&v26, v16);
        if ((v15 & 0x3FFFFFFFCLL) != 0)
        {
          uint64_t v17 = 0;
          std::vector<unsigned int>::pointer v18 = v26.__begin_;
          do
          {
            v18[v17] = v17;
            ++v17;
          }
          while (v16 != v17);
        }
        break;
      default:
        break;
    }
    uint64_t v10 = &v26;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned int>::pointer v23 = v10->__begin_;
  std::vector<unsigned int>::size_type v24 = &v26;
  if (a8) {
    std::vector<unsigned int>::size_type v24 = a8;
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v23, (uint64_t)v24->__end_, v24->__end_ - v23);
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
}

void sub_23F5DDE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void realityio::makeFaceVertexIndexList(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type a2, uint64_t *a3, uint64_t *a4, int a5, void **a6)
{
  long long v6 = a6;
  long long v30 = 0;
  long long v31 = 0;
  uint64_t v32 = 0;
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  if (!a6)
  {
    realityio::makeValueLookupByIndex(&__p, a2, *a3, v11, *a4, a4[1], a5, 0);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v30, (char *)__p, (uint64_t)v29, (v29 - (unsigned char *)__p) >> 2);
    if (__p)
    {
      uint64_t v29 = __p;
      operator delete(__p);
    }
    long long v6 = &v30;
  }
  uint64_t v14 = *a4;
  uint64_t v13 = a4[1];
  std::vector<unsigned int>::size_type v15 = (v13 - *a4) >> 2;
  LODWORD(__p) = 0;
  std::vector<unsigned int>::vector(this, v15, (const std::vector<unsigned int>::value_type *)&__p);
  if (a5 == 1)
  {
    if (v13 != v14)
    {
      uint64_t v24 = 0;
      uint64_t v25 = *a4;
      std::vector<unsigned int> v26 = (char *)*v6;
      begistd::string::size_type n = this->__begin_;
      do
      {
        begin[v24] = *(_DWORD *)&v26[4 * *(unsigned int *)(v25 + 4 * v24)];
        ++v24;
      }
      while (v15 > v24);
    }
  }
  else if (a5 == 3)
  {
    if (v6 != (void **)this) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)this, (char *)*v6, (uint64_t)v6[1], ((unsigned char *)v6[1] - (unsigned char *)*v6) >> 2);
    }
  }
  else if (a5 == 2 && ((v11 - v12) & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = *a3;
    std::vector<unsigned int>::pointer v19 = this->__begin_;
    do
    {
      unint64_t v20 = *(unsigned int *)(v18 + 4 * v16);
      if (v17 < v20)
      {
        uint64_t v21 = (char *)*v6;
        unint64_t v22 = v20 - v17;
        std::vector<unsigned int>::pointer v23 = &v19[v17];
        do
        {
          *v23++ = *(_DWORD *)&v21[4 * v16];
          --v22;
        }
        while (v22);
        unint64_t v17 = v20;
      }
      ++v16;
    }
    while (v16 != ((unint64_t)(v11 - v12) >> 2));
  }
  if (v30)
  {
    long long v31 = v30;
    operator delete(v30);
  }
}

void sub_23F5DE008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::vector<unsigned int>::size_type v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::isCatmullClarkSurface(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr(&v9, this);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9, (uint64_t)v5);
  if (v5[0])
  {
    unint64_t v2 = atomic_load(MEMORY[0x263F90538]);
    if (!v2) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    BOOL v3 = (v6 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v2 + 96) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    BOOL v3 = 0;
    if (v8 < 0) {
      operator delete(__p);
    }
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  }
  return v3;
}

void sub_23F5DE138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v1std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5DE2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::getBoundSubsetsAndCoverage(uint64_t a1, void **a2, BOOL *a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v35, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v5);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  char IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  if (v36) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
  }
  if ((IsA & 1) == 0) {
    return 0;
  }
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v53[3] = 0;
  v53[0] = MEMORY[0x263F907A0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets((uint64_t *)&v51, v7);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v35 = (void **)(MEMORY[0x263F90690] + 16);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(&v47, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v35);
  MEMORY[0x2455CE7A0](&v35);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v47)
    && (void)v51 != *((void *)&v51 + 1))
  {
    uint64_t v55 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v54);
    *a3 = 0;
    std::string __p = 0;
    unint64_t v45 = 0;
    uint64_t v46 = 0;
    if (!NumElements)
    {
LABEL_20:
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)*((void *)&v51 + 1);
      long long v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v51;
      if ((void)v51 != *((void *)&v51 + 1))
      {
        uint64_t v17 = 0;
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(&v40, v15);
          realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v40, (uint64_t)&v35);
          if ((_BYTE)v35)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36);
            uint64_t v18 = v39;
            pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36);
            std::vector<unsigned int>::pointer v19 = &v39[v36];
            if (v18 == v19)
            {
LABEL_29:
              char v25 = 1;
              goto LABEL_31;
            }
            unint64_t v20 = __p;
            while (1)
            {
              unint64_t v21 = *v18;
              if ((v21 & 0x80000000) != 0) {
                break;
              }
              if (NumElements <= v21) {
                break;
              }
              unint64_t v22 = v21 >> 6;
              uint64_t v23 = 1 << v21;
              uint64_t v24 = v20[v22];
              if ((v24 & v23) != 0) {
                break;
              }
              v20[v22] = v24 | v23;
              ++v17;
              if (++v18 == v19) {
                goto LABEL_29;
              }
            }
          }
          char v25 = 0;
LABEL_31:
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&v35);
          if ((v43 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
          if (v41) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
          }
          if ((v25 & 1) == 0)
          {
            uint64_t v12 = 0;
            goto LABEL_48;
          }
          long long v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)v15 + 24);
          if (v15 == v16) {
            goto LABEL_39;
          }
        }
      }
      uint64_t v17 = 0;
LABEL_39:
      *a3 = v17 == NumElements;
      std::vector<unsigned int> v26 = (char *)*a2;
      if (*a2)
      {
        uint64_t v27 = (char *)a2[1];
        uint64_t v28 = *a2;
        if (v27 != v26)
        {
          uint64_t v29 = v27 - 24;
          long long v30 = v27 - 24;
          long long v31 = v27 - 24;
          do
          {
            uint64_t v32 = *(void (***)(char *))v31;
            v31 -= 24;
            (*v32)(v30);
            v29 -= 24;
            BOOL v33 = v30 == v26;
            long long v30 = v31;
          }
          while (!v33);
          uint64_t v28 = *a2;
        }
        a2[1] = v26;
        operator delete(v28);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      *(_OWORD *)a2 = v51;
      a2[2] = v52;
      char v52 = 0;
      long long v51 = 0uLL;
      uint64_t v12 = 1;
LABEL_48:
      if (__p) {
        operator delete(__p);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v54);
      goto LABEL_51;
    }
    std::vector<BOOL>::__vallocate[abi:ne180100](&__p, NumElements);
    unint64_t v9 = v45;
    unint64_t v10 = v45 + NumElements;
    v45 += NumElements;
    if (v9)
    {
      unint64_t v11 = v10 - 1;
      if (((v10 - 1) ^ (v9 - 1)) < 0x40)
      {
LABEL_19:
        uint64_t v35 = (void **)((char *)__p + 8 * (v9 >> 6));
        LODWORD(v36) = v9 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v35, NumElements);
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v11 = v10 - 1;
    }
    unint64_t v13 = v11 >> 6;
    if (v10 >= 0x41) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0;
    }
    *((void *)__p + v14) = 0;
    goto LABEL_19;
  }
  uint64_t v12 = 0;
LABEL_51:
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
  if (v48) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
  }
  uint64_t v35 = (void **)&v51;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v35);
  MEMORY[0x2455CF4B0](v53);
  return v12;
}

void sub_23F5DE794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v27 - 112));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a23);
  a23 = &a27;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  MEMORY[0x2455CF4B0](v27 - 144);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v1std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5DE9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::addOpenSubdivDataToModelDescriptor(uint64_t a1, realityio *this)
{
  uint64_t result = realityio::isCatmullClarkSurface(this, this);
  if (result)
  {
    VertexCFIndex Count = REGeomModelDescriptorGetVertexCount();
    REGeomModelDescriptorSetSurfaceType();
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseIndicesAttr(&v55, this);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseLengthsAttr(&v51, this);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseSharpnessesAttr(&v47, this);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55, (uint64_t)v44);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v51, (uint64_t)v41);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v47, (uint64_t)&v36);
    if (v44[0] && v41[0] && (_BYTE)v36 && v37 && v37 == v42[0])
    {
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v42);
      uint64_t v6 = v43;
      unint64_t v7 = v42[0];
      if (v42[0])
      {
        uint64_t v8 = 0;
        unsigned int v9 = 0;
        int v10 = 0;
        unsigned int v11 = 1;
        while (1)
        {
          int v12 = *(_DWORD *)(v43 + 4 * v8);
          if (v12 < 2) {
            break;
          }
          v10 += v12;
          unsigned int v9 = v9 + v12 - 1;
          uint64_t v8 = v11;
          if (v42[0] <= (unint64_t)v11++) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        int v10 = 0;
        unsigned int v9 = 0;
LABEL_13:
        if (v45[0] == v10)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v45);
          uint64_t v14 = v46;
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37);
          uint64_t v15 = v40;
          std::vector<unsigned int>::vector(&v35, 2 * v9);
          std::vector<float>::vector(&__p, v9);
          if (v7)
          {
            unint64_t v16 = 0;
            int v17 = 0;
            int v18 = 0;
            int v19 = 0;
            int v20 = 0;
            while (1)
            {
              int v21 = *(_DWORD *)(v6 + 4 * v16);
              int v22 = v21 - 1;
              if (v21 != 1)
              {
                int v23 = *(_DWORD *)(v15 + 4 * v16);
                begistd::string::size_type n = v35.__begin_;
                int v25 = v22 + v18;
                std::vector<unsigned int> v26 = __p;
                while (1)
                {
                  unsigned int v27 = v14[v19];
                  int v21 = v27 < VertexCount;
                  if (v27 >= VertexCount) {
                    break;
                  }
                  begin[v17] = v27;
                  begin[v17 + 1] = v14[++v19];
                  v26[v18++] = v23;
                  v17 += 2;
                  if (!--v22)
                  {
                    int v18 = v25;
                    break;
                  }
                }
              }
              if (v14[v19] >= VertexCount) {
                break;
              }
              ++v19;
              unint64_t v16 = (v20 + 1);
              if (v7 > v16) {
                char v28 = v21;
              }
              else {
                char v28 = 0;
              }
              ++v20;
              if ((v28 & 1) == 0)
              {
                if (!v21) {
                  break;
                }
                goto LABEL_27;
              }
            }
          }
          else
          {
LABEL_27:
            MEMORY[0x2455CD230](a1, "osdEdgeCreaseIndices", 4, (unint64_t)((char *)v35.__end_ - (char *)v35.__begin_) >> 2);
            MEMORY[0x2455CD1F0](a1, "osdEdgeCreaseWeights", 4, (unint64_t)(v34 - (unsigned char *)__p) >> 2);
          }
          if (__p)
          {
            long long v34 = __p;
            operator delete(__p);
          }
          if (v35.__begin_)
          {
            v35.__end_ = v35.__begin_;
            operator delete(v35.__begin_);
          }
        }
      }
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)&v36);
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v41);
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v44);
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    }
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
    if (v52) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v52);
    }
    if ((v58 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
    if (v56) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerIndicesAttr(&v36, this);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerSharpnessesAttr(&v55, this);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, (uint64_t)v44);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55, (uint64_t)v41);
    if (v44[0] && v41[0] && v45[0] && v45[0] == v42[0])
    {
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v45);
      if (v45[0])
      {
        uint64_t v29 = v45[0];
        long long v30 = v46;
        while (1)
        {
          unsigned int v31 = *v30++;
          if (v31 >= VertexCount) {
            break;
          }
          if (!--v29) {
            goto LABEL_52;
          }
        }
      }
      else
      {
LABEL_52:
        MEMORY[0x2455CD230](a1, "osdVertexCreaseIndices", 4);
        uint64_t v32 = v42[0];
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v42);
        MEMORY[0x2455CD1F0](a1, "osdVertexCreaseWeights", 4, v32, v43);
      }
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v41);
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v44);
    if ((v58 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
    if (v56) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56);
    }
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
    uint64_t result = v37;
    if (v37) {
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
    }
  }
  return result;
}

void sub_23F5DEED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)&a15);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&a21);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&a27);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v27 - 176));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v27 - 144));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_23F5DEFBC()
{
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v1std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5DF154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v1std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5DF344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v20 = &v3[16 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 4)
  {
    bzero(v4, 16 * v6);
    int v20 = &v4[16 * v6];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 >> 60) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 3;
  if (v9 >> 3 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v7, v11);
  long long v13 = &v12[16 * v5];
  long long v15 = &v12[16 * v14];
  bzero(v13, 16 * v6);
  unint64_t v16 = &v13[16 * v6];
  int v18 = (char *)*a1;
  int v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      long long v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v13 - 1) = v19;
      v13 -= 16;
    }
    while (v17 != v18);
    int v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

__n128 realityio::getGeomPrimitiveOrientation(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  long long v11 = xmmword_23F7BDF00;
  uint64_t IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (IsValid)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(IsValid);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((IsA & 1) != 0
      || (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)IsA),
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
          uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(),
          (v5 & 1) != 0)
      || (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v5),
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
          pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()))
    {
      MEMORY[0x2455CF810](&v13, "axis");
      MEMORY[0x2455CF810](&v12, "Z");
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, (uint64_t)v15);
      if (v15[0]) {
        unint64_t v6 = v16;
      }
      else {
        unint64_t v6 = v12;
      }
      uint64_t v14 = v6;
      if ((v6 & 7) != 0)
      {
        uint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
          uint64_t v14 = v7;
        }
      }
      if (v15[0])
      {
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else if (v18 < 0)
      {
        operator delete(__p);
      }
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
      {
        int8x16_t v8 = (int8x16_t)xmmword_23F7C6090;
      }
      else
      {
        if (pxrInternal__aapl__pxrReserved__::TfToken::operator==()) {
          unsigned int v9 = -1;
        }
        else {
          unsigned int v9 = 0;
        }
        int8x16_t v8 = vbslq_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_23F7C60A0, (int8x16_t)xmmword_23F7BDF00);
      }
      long long v11 = (__int128)v8;
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  return (__n128)v11;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCylinder>(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

pxrInternal__aapl__pxrReserved__::UsdGeomGprim *realityio::createGeomModelDescriptorWithPrimitivePrim@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, __int16 a3@<W3>, __int16 a4@<W4>, __int16 a5@<W5>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (!result) {
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(result);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (!result) {
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(result);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (IsA)
  {
    unint64_t v13 = atomic_load(MEMORY[0x263F90538]);
    if (!v13) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    realityio::getAttributeValue<float>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 1008), (uint64_t)v60);
    if (v60[0])
    {
      float v14 = *(float *)&v60[8];
    }
    else
    {
      float v14 = 2.0;
      if (SHIBYTE(v61) < 0) {
        operator delete(*(void **)&v60[24]);
      }
    }
    memset(v60, 0, 28);
    REGeomBuildBoxDefaultOptions();
    *(float *)&v60[12] = v14;
    *(float *)&v60[16] = v14;
    *(float *)&v60[20] = v14;
    v59[0] = *(_OWORD *)v60;
    *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)&v60[12];
    uint64_t v20 = REGeomModelDescriptorCreateFromBoxOptions();
LABEL_36:
    uint64_t v33 = v20;
    goto LABEL_37;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  long long v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (v15)
  {
    REGeomBuildSphereDefaultOptions();
    unint64_t v16 = atomic_load(MEMORY[0x263F90538]);
    if (!v16) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    realityio::getAttributeValue<float>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 920), (uint64_t)v60);
    if (!v60[0] && SHIBYTE(v61) < 0) {
      operator delete(*(void **)&v60[24]);
    }
    uint64_t v20 = REGeomModelDescriptorCreateFromSphereOptions();
    goto LABEL_36;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(v15);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  int v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (v17)
  {
    char v18 = (unint64_t *)MEMORY[0x263F90538];
    unint64_t v19 = atomic_load(MEMORY[0x263F90538]);
    if (!v19) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    realityio::getAttributeValue<float>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v19 + 920), (uint64_t)v60);
    if (!v60[0] && SHIBYTE(v61) < 0) {
      operator delete(*(void **)&v60[24]);
    }
    unint64_t v32 = atomic_load(v18);
    if (!v32) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    realityio::getAttributeValue<float>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v32 + 408), (uint64_t)v60);
    if (!v60[0] && SHIBYTE(v61) < 0) {
      operator delete(*(void **)&v60[24]);
    }
    REGeomBuildConeDefaultOptions();
    uint64_t v20 = REGeomModelDescriptorCreateFromConeOptions();
    goto LABEL_36;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(v17);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
  {
    int v21 = (unint64_t *)MEMORY[0x263F90538];
    unint64_t v22 = atomic_load(MEMORY[0x263F90538]);
    if (!v22) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    *(_DWORD *)uint64_t v60 = 1056964608;
    float AttributeValueWithDefault = realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 920), (float *)v60, this);
    unint64_t v24 = atomic_load(v21);
    if (!v24) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    *(_DWORD *)uint64_t v60 = 1065353216;
    float v25 = realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v24 + 408), (float *)v60, this);
    memset(v60, 0, 20);
    REGeomBuildCapsuleDefaultOptions();
    float v26 = v25 + AttributeValueWithDefault * 2.0;
    *(float *)&v60[8] = AttributeValueWithDefault;
    *(float *)&v60[12] = v26;
    *(_WORD *)uint64_t v60 = a3;
    *(_WORD *)&v60[4] = a4;
    int v58 = *(_DWORD *)&v60[16];
    long long v57 = *(_OWORD *)v60;
    uint64_t v20 = REGeomModelDescriptorCreateFromCapsuleOptions();
    goto LABEL_36;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCylinder>(this))
  {
    uint64_t v27 = (unint64_t *)MEMORY[0x263F90538];
    unint64_t v28 = atomic_load(MEMORY[0x263F90538]);
    if (!v28) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    *(_DWORD *)uint64_t v60 = 1065353216;
    float v29 = realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v28 + 920), (float *)v60, this);
    unint64_t v30 = atomic_load(v27);
    if (!v30) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    *(_DWORD *)uint64_t v60 = 0x40000000;
    float v31 = realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v30 + 408), (float *)v60, this);
    memset(v60, 0, 24);
    REGeomBuildCylinderDefaultOptions();
    *(float *)&v60[8] = v29;
    *(float *)&v60[12] = v29;
    *(float *)&v60[4] = v31;
    *(_WORD *)uint64_t v60 = a5;
    uint64_t v56 = *(void *)&v60[16];
    long long v55 = *(_OWORD *)v60;
    uint64_t v20 = REGeomModelDescriptorCreateFromCylinderOptions();
    goto LABEL_36;
  }
  uint64_t v33 = 0;
LABEL_37:
  long long v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *(void *)uint64_t v60 = MEMORY[0x263F906B0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorAttr(&v51, v34);
  MEMORY[0x2455CE8E0](v60);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v51)
    && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v51))
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v51, (uint64_t)v60);
    if (v60[0])
    {
      long long v48 = *(_OWORD *)&v60[8];
      long long v49 = *(_OWORD *)&v60[24];
      uint64_t v50 = v61;
      if (v61)
      {
        std::vector<unsigned int> v35 = (atomic_ullong *)(v61 - 4);
        if (*((void *)&v49 + 1)) {
          std::vector<unsigned int> v35 = (atomic_ullong *)*((void *)&v49 + 1);
        }
        atomic_fetch_add_explicit(v35, 1uLL, memory_order_relaxed);
      }
      if ((void)v48 == 1)
      {
        std::string __p = 0;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48);
        unsigned int v43 = *v50;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48);
        unsigned int v42 = v50[1];
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48);
        __asm { FMOV            V0.4S, #1.0 }
        *(void *)&_Q0 = __PAIR64__(v42, v43);
        DWORD2(_Qstd::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v50[2];
        long long v44 = _Q0;
        _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE9push_backB8ne180100EOS1_(&__p, &v44);
        MEMORY[0x2455CD270](v33, "vertexColor", 0, 1, __p);
        if (__p)
        {
          uint64_t v46 = __p;
          operator delete(__p);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v48);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)v60);
  }
  if (v33)
  {
    *(void *)uint64_t v60 = v33;
    RERetain();
    uint64_t v41 = *a6;
    if (*a6 != v33)
    {
      *a6 = v33;
      *(void *)uint64_t v60 = v41;
    }
    realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v60);
    RERelease();
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if ((v54 & 7) != 0)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
  uint64_t result = v52;
  if (v52) {
    return (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v52);
  }
  return result;
}

void sub_23F5DFD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v25);
  _Unwind_Resume(a1);
}

float realityio::getAttributeValueWithDefaultValue<float>(const pxrInternal__aapl__pxrReserved__::TfToken *a1, float *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  realityio::getAttributeValue<float>(this, a1, (uint64_t)v6);
  if (v6[0]) {
    return v7;
  }
  float v4 = *a2;
  if (v9 < 0) {
    operator delete(__p);
  }
  return v4;
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE9push_backB8ne180100EOS1_(void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  float v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    float v14 = &v13[16 * v9];
    long long v15 = &v13[16 * v12];
    *(_OWORD *)float v14 = *a2;
    int8x16_t v8 = v14 + 16;
    int v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        long long v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    _OWORD *v7 = *a2;
    int8x16_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

pxrInternal__aapl__pxrReserved__::UsdGeomGprim *realityio::approximateGeomWithPrimitivePrim@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v9 = (int)a2;
  uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(result);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(result);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if (result)
      {
        *(_OWORD *)a6 = xmmword_23F7C60B0;
LABEL_14:
        *(void *)(a6 + 16) = 14;
        return result;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(result);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if (result)
      {
        uint64_t v13 = ((v9 - 2) * v9 + 2);
        int v14 = v9 * (v9 - 1);
LABEL_12:
        uint64_t v15 = (2 * v14);
        goto LABEL_13;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(result);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if (result)
      {
        uint64_t v13 = (a3 + 1);
        uint64_t v15 = (2 * a3 - 2);
LABEL_13:
        *(void *)a6 = v13;
        *(void *)(a6 + 8) = v15;
        goto LABEL_14;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(result);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if (result
        || (uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCylinder>(this),
            result))
      {
        uint64_t v13 = (2 * a4 * (a5 - 1) + 2);
        int v14 = a5 * a4;
        goto LABEL_12;
      }
    }
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  return result;
}

void *realityio::createModelDescriptorFromUsdGeomMesh@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  *(void *)uint64_t v158 = 0;
  int8x16_t v8 = (uint64_t *)((char *)this + 8);
  uint64_t v7 = *((void *)this + 1);
  if (!v7) {
    goto LABEL_23;
  }
  if ((*(unsigned char *)(v7 + 57) & 8) != 0)
  {
    uint64_t v7 = 0;
LABEL_23:
    *a6 = v7;
    *(void *)uint64_t v158 = 0;
    return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v158);
  }
  int v9 = (int)a3;
  if (((*(uint64_t (**)(realityio *))(*(void *)this + 32))(this) & 1) == 0)
  {
    uint64_t v7 = *(void *)v158;
    goto LABEL_23;
  }
  *(void *)uint64_t v175 = 0;
  v176 = 0;
  uint64_t v177 = 0;
  memset(&v174, 0, sizeof(v174));
  memset(&v173, 0, sizeof(v173));
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(&v167, this);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr((uint64_t *)&v165, this);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr((uint64_t *)&__x, this);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v167)
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v165)
    && (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__x) & 1) != 0)
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v167, (uint64_t)&HighVertexPerPolygon);
    if ((_BYTE)HighVertexPerPolygon)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v165, (uint64_t)&p_HighVertexPerPolygon);
      if ((_BYTE)p_HighVertexPerPolygon)
      {
        realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__x, (uint64_t)__sz);
        int v12 = v9;
        if (LOBYTE(__sz[0]) && pxrInternal__aapl__pxrReserved__::UsdGeomMesh::ValidateTopology())
        {
          std::vector<int>::resize(&v174, v179);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v179);
          uint64_t v13 = v184;
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v179);
          int v14 = &v184[v179];
          if (v13 != v14)
          {
            begistd::string::size_type n = v174.__begin_;
            do
            {
              unsigned int v16 = *v13++;
              *begin++ = v16;
            }
            while (v13 != v14);
          }
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(v175, v186);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v186);
          uint64_t v17 = v191;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v186);
          uint64_t v19 = v191 + 12 * v186;
          if (v17 != v19)
          {
            uint64_t v20 = *(char **)v175;
            do
            {
              *(void *)&long long v18 = *(void *)v17;
              DWORD2(v18) = *(_DWORD *)(v17 + 8);
              *(_OWORD *)uint64_t v20 = v18;
              v20 += 16;
              v17 += 12;
            }
            while (v17 != v19);
          }
          std::vector<int>::resize(&v173, __sz[1]);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__sz[1]);
          int v21 = v162;
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__sz[1]);
          unint64_t v22 = &v162[__sz[1]];
          if (v21 != v22)
          {
            std::vector<unsigned int>::pointer v23 = v173.__begin_;
            do
            {
              unsigned int v24 = *v21++;
              *v23++ = v24;
            }
            while (v21 != v22);
          }
          char v25 = 1;
        }
        else
        {
          char v25 = 0;
        }
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)__sz);
      }
      else
      {
        int v12 = v9;
        char v25 = 0;
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&p_HighVertexPerPolygon);
    }
    else
    {
      int v12 = v9;
      char v25 = 0;
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)&HighVertexPerPolygon);
  }
  else
  {
    int v12 = v9;
    char v25 = 0;
  }
  if ((v164 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__x.__end_cap_);
  if (__x.__end_) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__x.__end_);
  }
  if ((v166 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v166 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v165.__end_cap_);
  if (v165.__end_) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v165.__end_);
  }
  if ((v170 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v169);
  if (v168) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v168);
  }
  if ((v25 & 1) == 0)
  {
    *a6 = *(void *)v158;
LABEL_49:
    *(void *)uint64_t v158 = 0;
    goto LABEL_50;
  }
  HighVertexPerPolygostd::string::size_type n = REGeomModelDescriptorCreateHighVertexPerPolygon();
  if (HighVertexPerPolygon)
  {
    RERetain();
    uint64_t v27 = HighVertexPerPolygon;
  }
  else
  {
    uint64_t v27 = 0;
  }
  unint64_t v28 = *(void ***)v158;
  if (*(void *)v158 != v27)
  {
    *(void *)uint64_t v158 = v27;
    HighVertexPerPolygostd::string::size_type n = (uint64_t)v28;
  }
  float v29 = realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&HighVertexPerPolygon);
  if (!*(void *)v158)
  {
    *a6 = 0;
    goto LABEL_49;
  }
  long long v154 = (_DWORD *)((char *)this + 16);
  unint64_t v30 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v29, v8, (_DWORD *)this + 4);
  uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v30);
  if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
  }
  REGeomModelDescriptorSetName();
  if ((v189 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
  if (v186) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
  }
  RERelease();
  if (MEMORY[0x2455CD260](*(void *)v158, "vertexPosition", 1, (unint64_t)&v176[-*(void *)v175] >> 4))
  {
    int v152 = v12;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(&HighVertexPerPolygon, this);
    unint64_t v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
    if ((*(void *)v32 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
    }
    REGeomModelDescriptorAddAttributeAlias();
    if ((v189 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
    if (v186) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
    }
    if (v173.__begin_)
    {
      v173.__end_ = v173.__begin_;
      operator delete(v173.__begin_);
    }
    if (v174.__begin_)
    {
      v174.__end_ = v174.__begin_;
      operator delete(v174.__begin_);
    }
    if (*(void *)v175)
    {
      v176 = *(char **)v175;
      operator delete(*(void **)v175);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetOrientationAttr((uint64_t *)&p_HighVertexPerPolygon, this);
    unint64_t v33 = atomic_load(MEMORY[0x263F90538]);
    if (!v33) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon, (uint64_t)&HighVertexPerPolygon);
    if ((_BYTE)HighVertexPerPolygon) {
      unint64_t v34 = v186;
    }
    else {
      unint64_t v34 = *(void *)(v33 + 976);
    }
    if ((v34 & 7) == 0
      || (unint64_t v153 = v34 & 0xFFFFFFFFFFFFFFF8,
          (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) != 0))
    {
      unint64_t v153 = v34;
    }
    if ((_BYTE)HighVertexPerPolygon)
    {
      if ((v186 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else if (SHIBYTE(v191) < 0)
    {
      operator delete((void *)v189);
    }
    if ((v182 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v180);
    if (v179) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v179);
    }
    if (!atomic_load(MEMORY[0x263F90538])) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    REGeomModelDescriptorSetWindingOrder();
    *(_OWORD *)unsigned int __sz = 0u;
    long long v160 = 0u;
    float v161 = 1.0;
    uint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&HighVertexPerPolygon, v8, v154);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(v157, v36);
    if ((v189 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
    if (v186) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>((uint64_t)__sz, vcvtps_u32_f32((float)(unint64_t)((v157[1] - v157[0]) >> 5) / v161));
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(&HighVertexPerPolygon, this);
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
    if ((*(void *)v37 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyuint64_t String = (unsigned __int8 *)((*(void *)v37 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyuint64_t String = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, EmptyString, (uint64_t)EmptyString);
    if ((v189 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
    if (v186) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(&HighVertexPerPolygon, this);
    uint64_t v39 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
    if ((*(void *)v39 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v40 = (unsigned __int8 *)((*(void *)v39 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v40 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v39);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v40, (uint64_t)v40);
    if ((v189 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
    if (v186) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(&HighVertexPerPolygon, this);
    uint64_t v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
    if ((*(void *)v41 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unsigned int v42 = (unsigned __int8 *)((*(void *)v41 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unsigned int v42 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v42, (uint64_t)v42);
    if ((v189 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
    if (v186) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v170 = 0;
    uint64_t v167 = MEMORY[0x263F90778] + 16;
    MEMORY[0x2455CF810](&v165, "primvars:normals");
    LODWORD(p_HighVertexPerPolygon) = 3;
    std::vector<unsigned int>::size_type v179 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    unint64_t v182 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v167, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v165))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(&HighVertexPerPolygon, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v167, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v165);
      LODWORD(p_HighVertexPerPolygon) = HighVertexPerPolygon;
      unint64_t v43 = v186;
      if (v186) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v186 + 48), 1uLL, memory_order_relaxed);
      }
      uint64_t v44 = v179;
      std::vector<unsigned int>::size_type v179 = v43;
      if (v44) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v180, &v187);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v181, &v188);
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v182, &v189);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon))
      {
        unint64_t v45 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon);
        if ((*(void *)v45 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v46 = (unsigned __int8 *)((*(void *)v45 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v46 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v45);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v46, (uint64_t)v46);
        unint64_t v47 = atomic_load(MEMORY[0x263F90538]);
        if (!v47) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
        }
        if (realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v158, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&p_HighVertexPerPolygon, (unint64_t)"vertexNormal", (std::vector<unsigned int>::size_type *)(v47 + 1224)))
        {
          long long v48 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
          if ((*(void *)v48 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
          }
          REGeomModelDescriptorAddAttributeAlias();
        }
      }
      if ((v190 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v190 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v189 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
      if (v186) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
      }
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(&HighVertexPerPolygon, this);
      LODWORD(p_HighVertexPerPolygon) = HighVertexPerPolygon;
      unint64_t v49 = v186;
      unint64_t v186 = 0;
      uint64_t v50 = v179;
      std::vector<unsigned int>::size_type v179 = v49;
      if (v50) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v180, &v187);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v181);
      if ((v182 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v182 = v189;
      unint64_t v189 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
      if (v186) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon))
      {
        uint64_t v51 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon);
        if ((*(void *)v51 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v52 = (unsigned __int8 *)((*(void *)v51 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v52 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v51);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v52, (uint64_t)v52);
        uint64_t v53 = *(void *)v158;
        pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation(&HighVertexPerPolygon, this);
        int v54 = realityio::addUsdAttributeToGeomModelDescriptor(v53, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&p_HighVertexPerPolygon, (unint64_t)"vertexNormal", (std::vector<unsigned int>::size_type *)&HighVertexPerPolygon);
        if ((HighVertexPerPolygon & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(HighVertexPerPolygon & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v54)
        {
          long long v55 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon);
          if ((*(void *)v55 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v55);
          }
          REGeomModelDescriptorAddAttributeAlias();
        }
      }
    }
    if ((v182 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v180);
    if (v179) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v179);
    }
    if (((uint64_t)v165.__begin_ & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v165.__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    LODWORD(HighVertexPerPolygon) = 3;
    unint64_t v186 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    unint64_t v189 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues((uint64_t *)&p_HighVertexPerPolygon, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v167);
    int v58 = p_HighVertexPerPolygon;
    for (std::vector<unsigned int>::size_type i = v179; v58 != (void **)i; v58 += 6)
    {
      if ((realityio::isTexCoord2((realityio *)v58, v56) & 1) != 0
        || realityio::isScalar2((realityio *)v58, v59))
      {
        if ((*(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v58) & 0xFFFFFFFFFFFFFFF8) == (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
        {
          LODWORD(HighVertexPerPolygon) = *(_DWORD *)v58;
          unint64_t v62 = (unint64_t)v58[1];
          if (v62) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 48), 1uLL, memory_order_relaxed);
          }
          uint64_t v63 = v186;
          unint64_t v186 = v62;
          if (v63) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v63);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v187, (_DWORD *)v58 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v188, (_DWORD *)v58 + 5);
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v189, v58 + 3);
          break;
        }
        if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon) & 1) == 0)
        {
          LODWORD(HighVertexPerPolygon) = *(_DWORD *)v58;
          unint64_t v60 = (unint64_t)v58[1];
          if (v60) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 48), 1uLL, memory_order_relaxed);
          }
          uint64_t v61 = v186;
          unint64_t v186 = v60;
          if (v61) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v61);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v187, (_DWORD *)v58 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v188, (_DWORD *)v58 + 5);
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v189, v58 + 3);
        }
      }
    }
    v165.__begin_ = (std::vector<unsigned int>::pointer)&p_HighVertexPerPolygon;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon))
    {
      uint64_t v64 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
      if ((*(void *)v64 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v65 = (unsigned __int8 *)((*(void *)v64 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v65 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v64);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v65, (uint64_t)v65);
      unint64_t v66 = atomic_load(MEMORY[0x263F90538]);
      if (!v66) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      if (realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v158, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&HighVertexPerPolygon, (unint64_t)"vertexUV", (std::vector<unsigned int>::size_type *)(v66 + 136)))
      {
        uint64_t v67 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
        if ((*(void *)v67 & 0xFFFFFFFFFFFFFFF8) == 0) {
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v67);
        }
        REGeomModelDescriptorAddAttributeAlias();
      }
    }
    if ((v189 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
    if (v186) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
    }
    char v68 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90538]);
    if (!v68) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    if ((*((void *)v68 + 106) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v69 = (unsigned __int8 *)((*((void *)v68 + 106) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v69 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v68);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v69, (uint64_t)v69);
    long long v70 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90538]);
    if (!v70) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    if ((*((void *)v70 + 107) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v71 = (unsigned __int8 *)((*((void *)v70 + 107) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v71 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v70);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v71, (uint64_t)v71);
    uint64_t v72 = *(void *)v158;
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar(&HighVertexPerPolygon, this);
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayOpacityPrimvar((uint64_t *)&p_HighVertexPerPolygon, this);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()) {
      int HasValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&HighVertexPerPolygon);
    }
    else {
      int HasValue = 0;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()) {
      int v74 = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&p_HighVertexPerPolygon);
    }
    else {
      int v74 = 0;
    }
    if (((HasValue | v74) & 1) == 0) {
      goto LABEL_304;
    }
    if (HasValue)
    {
      unint64_t v75 = atomic_load(MEMORY[0x263F90538]);
      if (!v75) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      int v76 = realityio::addUsdAttributeToGeomModelDescriptor(v72, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&HighVertexPerPolygon, 0, (std::vector<unsigned int>::size_type *)(v75 + 136));
    }
    else
    {
      int v76 = 0;
    }
    int v151 = v76;
    if (v74)
    {
      unint64_t v77 = atomic_load(MEMORY[0x263F90538]);
      if (!v77) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      int v78 = realityio::addUsdAttributeToGeomModelDescriptor(v72, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&p_HighVertexPerPolygon, 0, (std::vector<unsigned int>::size_type *)(v77 + 136));
    }
    else
    {
      int v78 = 0;
    }
    if ((v151 | v78) != 1) {
      goto LABEL_304;
    }
    if (v151)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)&v165, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&HighVertexPerPolygon);
      int v80 = realityio::meshAttributeRateForInterpolation((realityio *)&v165, v79);
      if (((uint64_t)v165.__begin_ & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v165.__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      int v80 = 255;
    }
    if (v78)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((uint64_t *)&v165, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&p_HighVertexPerPolygon);
      int v82 = realityio::meshAttributeRateForInterpolation((realityio *)&v165, v81);
      if (((uint64_t)v165.__begin_ & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v165.__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v151)
      {
        BOOL v83 = 1;
        int v149 = v82;
        if (v82 != v80 || (int v84 = v80, v82 == 2))
        {
LABEL_240:
          LODWORD(v88) = REGeomModelDescriptorGetIndexCount();
          FaceCFIndex Count = REGeomModelDescriptorGetFaceCount();
          VertexCFIndex Count = REGeomModelDescriptorGetVertexCount();
          uint64_t v87 = FaceCount;
          LODWORD(__x.__begin_) = 0;
          std::vector<unsigned int>::vector(&v165, FaceCount, (const std::vector<unsigned int>::value_type *)&__x);
          unint64_t v88 = v88;
          v175[0] = -1;
          std::vector<unsigned int>::vector(&__x, v88, v175);
          REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
          REGeomModelDescriptorGetIndices();
          uint64_t v89 = VertexCount;
          int v147 = v80;
          BOOL v148 = v83;
          unsigned int v90 = v149;
          if (v151) {
            unsigned int v90 = v80;
          }
          if (v83) {
            uint64_t v91 = 3;
          }
          else {
            uint64_t v91 = v90;
          }
          if (v91 != 1) {
            uint64_t v89 = 1;
          }
          if (v91 != 3) {
            unint64_t v88 = v89;
          }
          *(void *)uint64_t v175 = 0;
          v176 = 0;
          uint64_t v177 = 0;
          if (v88)
          {
            std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](v175, v88);
            char v92 = v176;
            memset_pattern16(v176, &xmmword_23F7BDF00, 16 * v88);
            v176 = &v92[16 * v88];
          }
          LODWORD(v173.__begin_) = 0;
          std::vector<unsigned int>::vector(&v174, FaceCount, (const std::vector<unsigned int>::value_type *)&v173);
          if (FaceCount)
          {
            unsigned int v93 = 0;
            std::vector<unsigned int>::pointer v94 = v165.__begin_;
            std::vector<unsigned int>::pointer v95 = v174.__begin_;
            do
            {
              int v96 = *v94++;
              v93 += v96;
              *v95++ = v93;
              --v87;
            }
            while (v87);
          }
          if (v78)
          {
            uint64_t v97 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_HighVertexPerPolygon);
            if ((*(void *)v97 & 0xFFFFFFFFFFFFFFF8) == 0) {
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v97);
            }
            if (REGeomModelDescriptorGetAttributeIndex() == -1) {
              goto LABEL_296;
            }
            AttributeValueCFIndex Count = REGeomModelDescriptorGetAttributeValueCount();
            std::vector<float>::vector(&v173, AttributeValueCount);
            memset(&v172, 0, sizeof(v172));
            REGeomModelDescriptorGetAttributeValuesFloat();
            if (REGeomModelDescriptorIsAttributeIndexed())
            {
              AttributeIndexCFIndex Count = REGeomModelDescriptorGetAttributeIndexCount();
              std::vector<int>::resize(&v172, AttributeIndexCount);
              REGeomModelDescriptorGetAttributeIndices();
              uint64_t v100 = &v172;
            }
            else
            {
              uint64_t v100 = 0;
            }
            if (v148) {
              realityio::makeFaceVertexIndexList(&__p, VertexCount, (uint64_t *)&v174, (uint64_t *)&__x, v149, (void **)&v100->__begin_);
            }
            else {
              realityio::makeValueLookupByIndex(&__p, VertexCount, (uint64_t)v174.__begin_, (uint64_t)v174.__end_, (uint64_t)__x.__begin_, (uint64_t)__x.__end_, v149, v100);
            }
            if (v88)
            {
              for (uint64_t j = 0; j != v88; ++j)
                *(_DWORD *)(*(void *)v175 + 1 * j + 12) = v173.__begin_[__p.__begin_[j]];
            }
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            if (v172.__begin_)
            {
              v172.__end_ = v172.__begin_;
              operator delete(v172.__begin_);
            }
            if (v173.__begin_)
            {
              v173.__end_ = v173.__begin_;
              operator delete(v173.__begin_);
            }
          }
          if (v151)
          {
            uint64_t v102 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&HighVertexPerPolygon);
            if ((*(void *)v102 & 0xFFFFFFFFFFFFFFF8) == 0) {
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v102);
            }
            if (REGeomModelDescriptorGetAttributeIndex() == -1) {
              goto LABEL_296;
            }
            unsigned int v103 = REGeomModelDescriptorGetAttributeValueCount();
            _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(&v173, v103);
            memset(&v172, 0, sizeof(v172));
            REGeomModelDescriptorGetAttributeValuesVector3F();
            if (REGeomModelDescriptorIsAttributeIndexed())
            {
              unsigned int v104 = REGeomModelDescriptorGetAttributeIndexCount();
              std::vector<int>::resize(&v172, v104);
              REGeomModelDescriptorGetAttributeIndices();
              std::string v105 = &v172;
            }
            else
            {
              std::string v105 = 0;
            }
            if (v148) {
              realityio::makeFaceVertexIndexList(&__p, VertexCount, (uint64_t *)&v174, (uint64_t *)&__x, v147, (void **)&v105->__begin_);
            }
            else {
              realityio::makeValueLookupByIndex(&__p, VertexCount, (uint64_t)v174.__begin_, (uint64_t)v174.__end_, (uint64_t)__x.__begin_, (uint64_t)__x.__end_, v147, v105);
            }
            if (v88)
            {
              for (uint64_t k = 0; k != v88; ++k)
              {
                unint64_t v107 = &v173.__begin_[4 * __p.__begin_[k]];
                long long v108 = *(_OWORD *)(*(void *)v175 + 16 * k);
                LODWORD(v108) = *v107;
                *(_OWORD *)(*(void *)v175 + 16 * k) = v108;
                long long v109 = *(_OWORD *)(*(void *)v175 + 16 * k);
                DWORD1(v109) = v107[1];
                *(_OWORD *)(*(void *)v175 + 16 * k) = v109;
                long long v110 = *(_OWORD *)(*(void *)v175 + 16 * k);
                DWORD2(v11std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v107[2];
                *(_OWORD *)(*(void *)v175 + 16 * k) = v110;
              }
            }
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            if (v172.__begin_)
            {
              v172.__end_ = v172.__begin_;
              operator delete(v172.__begin_);
            }
            if (v173.__begin_)
            {
              v173.__end_ = v173.__begin_;
              operator delete(v173.__begin_);
            }
          }
          MEMORY[0x2455CD270](v72, "vertexColor", v91, (unint64_t)&v176[-*(void *)v175] >> 4);
LABEL_296:
          if (v174.__begin_)
          {
            v174.__end_ = v174.__begin_;
            operator delete(v174.__begin_);
          }
          if (*(void *)v175)
          {
            v176 = *(char **)v175;
            operator delete(*(void **)v175);
          }
          if (__x.__begin_)
          {
            __x.__end_ = __x.__begin_;
            operator delete(__x.__begin_);
          }
          if (v165.__begin_)
          {
            v165.__end_ = v165.__begin_;
            operator delete(v165.__begin_);
          }
LABEL_304:
          if ((v183 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v183 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v182 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v180);
          if (v179) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v179);
          }
          if ((v190 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v190 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v189 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
          if (v186) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&HighVertexPerPolygon, v8, v154);
          pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find();
          if (!v179 || (*(unsigned char *)(v179 + 57) & 8) != 0) {
            int v111 = 0;
          }
          else {
            int v111 = ((uint64_t (*)(void ***))p_HighVertexPerPolygon[4])(&p_HighVertexPerPolygon);
          }
          MEMORY[0x2455CE7D0](&p_HighVertexPerPolygon);
          if ((v189 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
          if (v186) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
          }
          if (v111)
          {
            uint64_t v113 = (unint64_t *)MEMORY[0x263F90540];
            long long v114 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90540]);
            if (!v114) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
            }
            if ((*((void *)v114 + 6) & 0xFFFFFFFFFFFFFFF8) != 0) {
              long long v115 = (unsigned __int8 *)((*((void *)v114 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              long long v115 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v114);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v115, (uint64_t)v115);
            uint64_t v116 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v113);
            if (!v116) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
            }
            if ((*((void *)v116 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
              uint64_t v117 = (unsigned __int8 *)((*((void *)v116 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              uint64_t v117 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v116);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v117, (uint64_t)v117);
            long long v118 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v113);
            if (!v118) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
            }
            if ((*((void *)v118 + 20) & 0xFFFFFFFFFFFFFFF8) != 0) {
              long long v119 = (unsigned __int8 *)((*((void *)v118 + 20) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              long long v119 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v118);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v119, (uint64_t)v119);
            uint64_t v120 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v113);
            if (!v120) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
            }
            if ((*((void *)v120 + 23) & 0xFFFFFFFFFFFFFFF8) != 0) {
              int v121 = (unsigned __int8 *)((*((void *)v120 + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              int v121 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v120);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v121, (uint64_t)v121);
            uint64_t v122 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v113);
            if (!v122) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
            }
            if ((*((void *)v122 + 14) & 0xFFFFFFFFFFFFFFF8) != 0) {
              uint64_t v123 = (unsigned __int8 *)((*((void *)v122 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              uint64_t v123 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v122);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v123, (uint64_t)v123);
            uint64_t v124 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v113);
            if (!v124) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
            }
            if ((*((void *)v124 + 11) & 0xFFFFFFFFFFFFFFF8) != 0) {
              uint64_t v125 = (unsigned __int8 *)((*((void *)v124 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              uint64_t v125 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v124);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v125, (uint64_t)v125);
            double v126 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v113);
            if (!v126) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
            }
            if ((*((void *)v126 + 12) & 0xFFFFFFFFFFFFFFF8) != 0) {
              double v127 = (unsigned __int8 *)((*((void *)v126 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              double v127 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v126);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v127, (uint64_t)v127);
            uint64_t v128 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v113);
            if (!v128) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
            }
            if ((*((void *)v128 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
              std::string v129 = (unsigned __int8 *)((*((void *)v128 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              std::string v129 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v128);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v129, (uint64_t)v129);
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&p_HighVertexPerPolygon, v8, v154);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            unint64_t v189 = 0;
            HighVertexPerPolygostd::string::size_type n = MEMORY[0x263F90768] + 16;
            if ((v182 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v180);
            if (v179) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v179);
            }
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((uint64_t *)&v165, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&HighVertexPerPolygon);
            uint64_t v130 = *(void *)v158;
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&p_HighVertexPerPolygon, v8, v154);
            realityio::addSkeletonJointBindingsToModelDescriptor(v130, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&HighVertexPerPolygon, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v165, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&p_HighVertexPerPolygon);
            if ((v182 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v180);
            if (v179) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v179);
            }
            MEMORY[0x2455CEDD0](&v165);
            MEMORY[0x2455CF050](&HighVertexPerPolygon);
          }
          if (v152)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues(&HighVertexPerPolygon, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v167);
            std::string v131 = (pxrInternal__aapl__pxrReserved__::UsdObject *)HighVertexPerPolygon;
            unint64_t v132 = v186;
            while (v131 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v132)
            {
              if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
                && ((realityio::isTexCoord2(v131, v133) & 1) != 0 || realityio::isTexCoord3(v131, v134)))
              {
                std::vector<unsigned int> v135 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v131);
                uint64_t v136 = (unsigned __int8 *)((*(void *)v135 & 0xFFFFFFFFFFFFFFF8) != 0
                                         ? (*(void *)v135 & 0xFFFFFFFFFFFFFFF8) + 16
                                         : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v135));
                if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__sz, v136))
                {
                  unint64_t v137 = atomic_load(MEMORY[0x263F90538]);
                  if (!v137) {
                    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                  }
                  realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v158, v131, 0, (std::vector<unsigned int>::size_type *)(v137 + 136));
                  uint64_t v138 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v131);
                  if ((*(void *)v138 & 0xFFFFFFFFFFFFFFF8) != 0) {
                    uint64_t v139 = (unsigned __int8 *)((*(void *)v138 & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  else {
                    uint64_t v139 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v138);
                  }
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v139, (uint64_t)v139);
                }
              }
              std::string v131 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v131 + 48);
            }
            p_HighVertexPerPolygostd::string::size_type n = (void **)&HighVertexPerPolygon;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&p_HighVertexPerPolygon);
          }
          if ((realityio::isCatmullClarkSurface(this, v112) & a5) == 1) {
            realityio::addOpenSubdivDataToModelDescriptor(*(uint64_t *)v158, this);
          }
          if (a4)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues(&HighVertexPerPolygon, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v167);
            uint64_t v140 = (pxrInternal__aapl__pxrReserved__::UsdObject *)HighVertexPerPolygon;
            unint64_t v141 = v186;
            while (v140 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v141)
            {
              if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar())
              {
                uint64_t v142 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v140);
                std::string v143 = (unsigned __int8 *)((*(void *)v142 & 0xFFFFFFFFFFFFFFF8) != 0
                                         ? (*(void *)v142 & 0xFFFFFFFFFFFFFFF8) + 16
                                         : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v142));
                if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__sz, v143))
                {
                  unint64_t v144 = atomic_load(MEMORY[0x263F90538]);
                  if (!v144) {
                    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                  }
                  realityio::addUsdAttributeToGeomModelDescriptor(*(uint64_t *)v158, v140, 0, (std::vector<unsigned int>::size_type *)(v144 + 136));
                  std::string v145 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v140);
                  if ((*(void *)v145 & 0xFFFFFFFFFFFFFFF8) != 0) {
                    std::type_info v146 = (unsigned __int8 *)((*(void *)v145 & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  else {
                    std::type_info v146 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v145);
                  }
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__sz, v146, (uint64_t)v146);
                }
              }
              uint64_t v140 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v140 + 48);
            }
            p_HighVertexPerPolygostd::string::size_type n = (void **)&HighVertexPerPolygon;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&p_HighVertexPerPolygon);
          }
          *a6 = *(void *)v158;
          *(void *)uint64_t v158 = 0;
          MEMORY[0x2455CF0D0](&v167);
          HighVertexPerPolygostd::string::size_type n = (uint64_t)v157;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&HighVertexPerPolygon);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__sz);
          if ((v153 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v158);
        }
      }
      else
      {
        int v84 = v82;
        if (v82 == 2)
        {
          BOOL v83 = 1;
LABEL_239:
          int v149 = v84;
          goto LABEL_240;
        }
      }
    }
    else
    {
      int v84 = 255;
    }
    BOOL v83 = (v80 & 0xFE) == 2 || v84 == 3;
    goto LABEL_239;
  }
  *a6 = 0;
LABEL_50:
  if (v173.__begin_)
  {
    v173.__end_ = v173.__begin_;
    operator delete(v173.__begin_);
  }
  if (v174.__begin_)
  {
    v174.__end_ = v174.__begin_;
    operator delete(v174.__begin_);
  }
  if (*(void *)v175)
  {
    v176 = *(char **)v175;
    operator delete(*(void **)v175);
  }
  return realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(v158);
}

void sub_23F5E1BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  if (__p)
  {
    a45 = (uint64_t)__p;
    operator delete(__p);
  }
  unint64_t v47 = *(void **)(v45 - 256);
  if (v47)
  {
    *(void *)(v45 - 248) = v47;
    operator delete(v47);
  }
  long long v48 = *(void **)(v45 - 232);
  if (v48)
  {
    *(void *)(v45 - 224) = v48;
    operator delete(v48);
  }
  unint64_t v49 = *(void **)(v45 - 208);
  if (v49)
  {
    *(void *)(v45 - 20std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v49;
    operator delete(v49);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v45 - 184));
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v45 - 136));
  MEMORY[0x2455CF0D0](&a37);
  a37 = &a17;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a21);
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&a20);
  _Unwind_Resume(a1);
}

void realityio::approximateGeomFromUsdGeomMesh(realityio *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(&v7, this);
  uint64_t v6 = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
}

uint64_t realityio::addAttributeFromUsdSkelBlendShape(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v86 = *(std::string *)a2;
  }
  std::string::append(&v86, "|blendTargetPosDeltas");
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(&v82, a3);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82) & 1) == 0)
  {
    uint64_t v9 = 0;
    goto LABEL_97;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(&v78, a3);
  if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v78))
  {
    Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v82);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    long long v5 = (unint64_t *)MEMORY[0x263F90560];
    if (!atomic_load(MEMORY[0x263F90560])) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_15;
    }
    if (!atomic_load(v5)) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_15;
    }
    if (!atomic_load(v5)) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_15:
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82, (uint64_t)v102);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v78, (uint64_t)v98);
      uint64_t v9 = 0;
      if (v102[0] && v98[0])
      {
        long long v95 = v103;
        long long v96 = v104;
        uint64_t v97 = v105;
        if (v105)
        {
          uint64_t v10 = (atomic_ullong *)&v105[-1];
          if (*((void *)&v96 + 1)) {
            uint64_t v10 = (atomic_ullong *)*((void *)&v96 + 1);
          }
          atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
        }
        long long v92 = v99;
        long long v93 = v100;
        uint64_t v94 = v101;
        if (v101)
        {
          uint64_t v11 = (atomic_ullong *)(v101 - 16);
          if (*((void *)&v93 + 1)) {
            uint64_t v11 = (atomic_ullong *)*((void *)&v93 + 1);
          }
          atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
        }
        unint64_t v12 = v92;
        VertexCFIndex Count = REGeomModelDescriptorGetVertexCount();
        uint64_t v9 = 0;
        if (v12 <= VertexCount && (void)v95 == v12)
        {
          std::vector<unsigned int> __p = 0;
          unsigned int v90 = 0;
          unint64_t v91 = 0;
          memset(&v88, 0, sizeof(v88));
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, v12 + 1);
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&__p, v95);
          uint64_t v15 = __p;
          if ((void)v95)
          {
            unsigned int v16 = v97;
            uint64_t v17 = 12 * v95;
            do
            {
              *(float64_t *)&long long v14 = v16->f64[0];
              DWORD2(v14) = LODWORD(v16->f64[1]);
              *v15++ = v14;
              unsigned int v16 = (float64x2_t *)((char *)v16 + 12);
              v17 -= 12;
            }
            while (v17);
            uint64_t v15 = __p;
          }
          long long v18 = v90;
          uint64_t v19 = v90 - v15;
          std::vector<unsigned int>::value_type __x = v19;
          if ((unint64_t)v90 >= v91)
          {
            if ((unint64_t)(v19 + 1) >> 60) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v40 = v91 - (void)v15;
            uint64_t v41 = v40 >> 3;
            if (v40 >> 3 <= (unint64_t)(v19 + 1)) {
              uint64_t v41 = v19 + 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v41;
            }
            if (v42) {
              unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v91, v42);
            }
            else {
              unint64_t v43 = 0;
            }
            uint64_t v44 = &v43[16 * v19];
            uint64_t v45 = &v43[16 * v42];
            *(_OWORD *)uint64_t v44 = 0u;
            uint64_t v20 = v44 + 16;
            unint64_t v47 = (char *)__p;
            uint64_t v46 = (char *)v90;
            if (v90 != __p)
            {
              do
              {
                long long v48 = *((_OWORD *)v46 - 1);
                v46 -= 16;
                *((_OWORD *)v44 - 1) = v48;
                v44 -= 16;
              }
              while (v46 != v47);
              uint64_t v46 = (char *)__p;
            }
            std::vector<unsigned int> __p = v44;
            unsigned int v90 = v20;
            unint64_t v91 = (unint64_t)v45;
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *unsigned int v90 = 0u;
            uint64_t v20 = v18 + 1;
          }
          unsigned int v90 = v20;
          std::vector<unsigned int>::resize(&v88, VertexCount, &__x);
          unint64_t v49 = v92;
          if ((void)v92)
          {
            uint64_t v50 = 0;
            uint64_t v51 = v94;
            unsigned int v52 = 1;
            begistd::string::size_type n = v88.__begin_;
            while (1)
            {
              uint64_t v9 = 0;
              uint64_t v54 = *(unsigned int *)(v51 + 4 * v50);
              if ((v54 & 0x80000000) != 0 || v54 >= VertexCount) {
                break;
              }
              unsigned int v55 = v52 - 1;
              uint64_t v50 = v52;
              BOOL v56 = v49 > v52++;
              begin[v54] = v55;
              if (!v56) {
                goto LABEL_86;
              }
            }
          }
          else
          {
LABEL_86:
            uint64_t v9 = REGeomModelDescriptorAddIndexedAttributeVector3F();
          }
          if (v88.__begin_)
          {
            v88.__end_ = v88.__begin_;
            operator delete(v88.__begin_);
          }
          if (__p)
          {
            unsigned int v90 = __p;
            operator delete(__p);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v92);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v95);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v98);
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)v102);
      goto LABEL_93;
    }
    if (!atomic_load(v5)) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_49;
    }
    if (!atomic_load(v5)) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_49;
    }
    if (!atomic_load(v5)) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_49:
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((uint64_t)v102, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v82);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v78, (uint64_t)v98);
      uint64_t v9 = 0;
      if (v102[0] && v98[0])
      {
        long long v95 = v103;
        long long v96 = v104;
        uint64_t v97 = v105;
        if (v105)
        {
          unint64_t v28 = (atomic_ullong *)&v105[-1];
          if (*((void *)&v96 + 1)) {
            unint64_t v28 = (atomic_ullong *)*((void *)&v96 + 1);
          }
          atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
        }
        long long v92 = v99;
        long long v93 = v100;
        uint64_t v94 = v101;
        if (v101)
        {
          float v29 = (atomic_ullong *)(v101 - 16);
          if (*((void *)&v93 + 1)) {
            float v29 = (atomic_ullong *)*((void *)&v93 + 1);
          }
          atomic_fetch_add_explicit(v29, 1uLL, memory_order_relaxed);
        }
        unint64_t v30 = v92;
        unsigned int v31 = REGeomModelDescriptorGetVertexCount();
        uint64_t v9 = 0;
        if (v30 <= v31 && (void)v95 == v30)
        {
          std::vector<unsigned int> __p = 0;
          unsigned int v90 = 0;
          unint64_t v91 = 0;
          memset(&v88, 0, sizeof(v88));
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, v30 + 1);
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&__p, v95);
          unint64_t v32 = (float64x2_t *)__p;
          if ((void)v95)
          {
            unint64_t v33 = v97;
            unint64_t v34 = (float64x2_t *)((char *)v97 + 24 * v95);
            do
            {
              float64x2_t v35 = *v33;
              *(float32x2_t *)&v35.f64[0] = vcvt_f32_f64(*v33);
              float v36 = v33[1].f64[0];
              *(float *)&v35.f64[1] = v36;
              *v32++ = v35;
              unint64_t v33 = (float64x2_t *)((char *)v33 + 24);
            }
            while (v33 != v34);
            unint64_t v32 = (float64x2_t *)__p;
          }
          uint64_t v37 = v90;
          uint64_t v38 = ((char *)v90 - (char *)v32) >> 4;
          std::vector<unsigned int>::value_type __x = v38;
          if ((unint64_t)v90 >= v91)
          {
            if ((unint64_t)(v38 + 1) >> 60) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v61 = v91 - (void)v32;
            uint64_t v62 = v61 >> 3;
            if (v61 >> 3 <= (unint64_t)(v38 + 1)) {
              uint64_t v62 = v38 + 1;
            }
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v62;
            }
            if (v63) {
              uint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v91, v63);
            }
            else {
              uint64_t v64 = 0;
            }
            uint64_t v65 = &v64[16 * v38];
            unint64_t v66 = &v64[16 * v63];
            *(_OWORD *)uint64_t v65 = 0u;
            uint64_t v39 = v65 + 16;
            char v68 = (char *)__p;
            uint64_t v67 = (char *)v90;
            if (v90 != __p)
            {
              do
              {
                long long v69 = *((_OWORD *)v67 - 1);
                v67 -= 16;
                *((_OWORD *)v65 - 1) = v69;
                v65 -= 16;
              }
              while (v67 != v68);
              uint64_t v67 = (char *)__p;
            }
            std::vector<unsigned int> __p = v65;
            unsigned int v90 = v39;
            unint64_t v91 = (unint64_t)v66;
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *unsigned int v90 = 0u;
            uint64_t v39 = v37 + 1;
          }
          unsigned int v90 = v39;
          std::vector<unsigned int>::resize(&v88, v31, &__x);
          unint64_t v70 = v92;
          if ((void)v92)
          {
            uint64_t v71 = 0;
            uint64_t v72 = v94;
            unsigned int v73 = 1;
            std::vector<unsigned int>::pointer v74 = v88.__begin_;
            while (1)
            {
              uint64_t v9 = 0;
              uint64_t v75 = *(unsigned int *)(v72 + 4 * v71);
              if ((v75 & 0x80000000) != 0 || v75 >= v31) {
                break;
              }
              unsigned int v76 = v73 - 1;
              uint64_t v71 = v73;
              BOOL v56 = v70 > v73++;
              v74[v75] = v76;
              if (!v56) {
                goto LABEL_133;
              }
            }
          }
          else
          {
LABEL_133:
            uint64_t v9 = REGeomModelDescriptorAddIndexedAttributeVector3F();
          }
          if (v88.__begin_)
          {
            v88.__end_ = v88.__begin_;
            operator delete(v88.__begin_);
          }
          if (__p)
          {
            unsigned int v90 = __p;
            operator delete(__p);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v92);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v95);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v98);
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result((uint64_t)v102);
      goto LABEL_93;
    }
    if (!atomic_load(v5)) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
    {
      if (!atomic_load(v5)) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
      {
        if (!atomic_load(v5)) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          uint64_t v9 = 0;
          goto LABEL_93;
        }
      }
    }
    uint64_t v24 = _ZN9realityio29addIndexedBlendShapeAttributeIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS1_12UsdAttributeESH_(*a1, (int)&v86, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v82, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v78);
  }
  else
  {
    uint64_t v21 = *a1;
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v22 = &v86;
    }
    else {
      unint64_t v22 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    unint64_t v23 = atomic_load(MEMORY[0x263F90538]);
    if (!v23) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
    }
    uint64_t v24 = realityio::addUsdAttributeToGeomModelDescriptor(v21, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v82, (unint64_t)v22, (std::vector<unsigned int>::size_type *)(v23 + 1224));
  }
  uint64_t v9 = v24;
LABEL_93:
  if ((v81 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
  if (v79) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v79);
  }
LABEL_97:
  if ((v85 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v84);
  if (v83) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v83);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  return v9;
}