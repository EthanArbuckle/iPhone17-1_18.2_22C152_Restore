uint64_t realityio::DirtyStageSubscription::DirtyStageSubscription(uint64_t a1, void **a2)
{
  *(void *)a1 = &unk_26F32F6D0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>((void *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(unsigned char *)(a1 + 32) = realityio::DirtyStageSubscription::_isEmpty((realityio::DirtyStageSubscription *)a1);
  return a1;
}

uint64_t realityio::DirtyStageSubscription::_isEmpty(realityio::DirtyStageSubscription *this)
{
  v1 = (uint64_t *)*((void *)this + 1);
  v2 = (uint64_t *)*((void *)this + 2);
  if (v1 == v2) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *v1;
    v3 = (std::__shared_weak_count *)v1[1];
    if (!v3) {
      break;
    }
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    int v5 = *(unsigned __int8 *)(v4 + 56);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (!v5) {
      return 0;
    }
LABEL_6:
    v1 += 2;
    if (v1 == v2) {
      return 1;
    }
  }
  if (*(unsigned char *)(v4 + 56)) {
    goto LABEL_6;
  }
  return 0;
}

void realityio::DirtyStageSubscription::getExplicitPrimTypes(realityio::DirtyStageSubscription *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = 0;
  long long v3 = 0uLL;
  long long v14 = 0u;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *((void *)this + 2);
  if (v4 == v5)
  {
    uint64_t v9 = 0;
LABEL_13:
    *(_OWORD *)a2 = v3;
    *(void *)(a2 + 16) = v9;
    uint64_t v15 = 0;
    long long v14 = 0uLL;
  }
  else
  {
    while (1)
    {
      v6 = *(realityio::DirtyStageDescriptor **)v4;
      v7 = *(std::__shared_weak_count **)(v4 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v12 = 0uLL;
      uint64_t v13 = 0;
      realityio::DirtyStageDescriptor::getExplicitPrimTypes(v6, (uint64_t)&v10);
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v12);
      long long v12 = v10;
      uint64_t v13 = v11;
      uint64_t v11 = 0;
      long long v10 = 0uLL;
      v16 = (void **)&v10;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v16);
      long long v8 = v12;
      if ((void)v12 == *((void *)&v12 + 1))
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
      }
      else
      {
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>((uint64_t *)&v14, *((void **)&v14 + 1), (uint64_t *)v12, *((uint64_t **)&v12 + 1), (uint64_t)(*((void *)&v12 + 1) - v12) >> 3);
      }
      *(void *)&long long v10 = &v12;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if ((void)v8 == *((void *)&v8 + 1)) {
        break;
      }
      v4 += 16;
      if (v4 == v5)
      {
        long long v3 = v14;
        uint64_t v9 = v15;
        goto LABEL_13;
      }
    }
  }
  *(void *)&long long v12 = &v14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_23F4EB764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a9 = &a13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  a13 = (void **)&a17;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageSubscription::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v33[4] = *MEMORY[0x263EF8340];
  if (!*(void *)(a7 + 24) || !*(void *)(a8 + 24) || !*(void *)(a9 + 24) || !*(void *)(a10 + 24)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v26, this, a2);
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v26);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  if (v27) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
  }
  if ((IsValid & 1) == 0) {
    return 0;
  }
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v19 == v18) {
    return 1;
  }
  do
  {
    v20 = *(void **)v19;
    v21 = *(std::__shared_weak_count **)(v19 + 8);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v33, a7);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v32, a8);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v31, a9);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v30, a10);
    uint64_t v22 = realityio::DirtyStageDescriptor::validate(v20, a2, a3, this, a5, a6, (uint64_t)v33, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v30);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v31);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v32);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v33);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    v19 += 16;
    if (v19 == v18) {
      char v23 = 1;
    }
    else {
      char v23 = v22;
    }
  }
  while ((v23 & 1) == 0);
  return v22;
}

void sub_23F4EB98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  if (*(_DWORD *)this > 4u || ((1 << *(_DWORD *)this) & 0x1A) == 0) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    return 0;
  }
  if (*(_DWORD *)this == 1) {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(this);
  if (*(_DWORD *)this != 3 || result != 1) {
    return *(_DWORD *)this == 4 && result == 8;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

uint64_t realityio::DirtyStageSubscription::numberOfStageMetadataOnlyPredicates(realityio::DirtyStageSubscription *this)
{
  v1 = (uint64_t *)*((void *)this + 1);
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v5 = *v1;
    uint64_t v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      int v6 = *(unsigned __int8 *)(v5 + 57);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    else
    {
      int v6 = *(unsigned __int8 *)(v5 + 57);
    }
    uint64_t v3 = (v3 + v6);
    v1 += 2;
  }
  while (v1 != v2);
  return v3;
}

const void **realityio::DirtyStageSubscription::description@<X0>(realityio::DirtyStageSubscription *this@<X0>, CFStringRef *a2@<X8>)
{
  CFTypeRef cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v6 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2); v6 != i; v6 += 16)
  {
    long long v8 = *(uint64_t ***)v6;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 8);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    realityio::DirtyStageDescriptor::description(v8, (CFStringRef *)&value);
    CFArrayAppendValue(Mutable, value);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  CFStringRef v10 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  CFTypeRef cf = v10;
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, @"<DirtyStageSubscription: %p { dirtyStageContainsAnyOf: (%lu) [ %@ ] } >", this, (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4, v10);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F4EBC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *realityio::MutableDirtyPropertyTable::addProperty(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = (realityio::MutableDirtyPropertyTable *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this, a2);
  if (this + 1 == (uint64_t **)v6)
  {
    uint64_t v10 = *(void *)a3;
    uint64_t v14 = v10;
    if ((v10 & 7) != 0)
    {
      uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v14 = (uint64_t)v11;
      }
    }
    uint64_t v13 = a2;
    long long v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(this, a2, (uint64_t)&std::piecewise_construct, &v13);
    uint64_t result = (uint64_t *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__assign_unique<pxrInternal__aapl__pxrReserved__::TfToken const*>((uint64_t **)v12 + 5, &v14, &v15);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    v7 = v6;
    long long v8 = (uint64_t **)((char *)v6 + 40);
    uint64_t result = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v6 + 40, (uint64_t *)a3);
    if ((uint64_t *)((char *)v7 + 48) == result)
    {
      return std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v8, (uint64_t *)a3, (uint64_t *)a3);
    }
  }
  return result;
}

uint64_t realityio::MutableDirtyPropertyTable::anyMatch(realityio::MutableDirtyPropertyTable *this, const realityio::UsdStageDelta *a2)
{
  if (!*((void *)this + 2)) {
    return 0;
  }
  uint64_t v2 = (char *)*((void *)a2 + 2);
  uint64_t v3 = (char *)a2 + 24;
  if (v2 == (char *)a2 + 24) {
    return 0;
  }
  uint64_t v5 = (char *)this + 8;
  while (1)
  {
    uint64_t v6 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this, (void *)v2 + 6);
    if (v5 != v6)
    {
      v7 = (char *)*((void *)v2 + 8);
      if (v7 != v2 + 72) {
        break;
      }
    }
LABEL_14:
    uint64_t v13 = (char *)*((void *)v2 + 1);
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = *(char **)v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        uint64_t v14 = (char *)*((void *)v2 + 2);
        BOOL v12 = *(void *)v14 == (void)v2;
        uint64_t v2 = v14;
      }
      while (!v12);
    }
    uint64_t v2 = v14;
    if (v14 == v3) {
      return 0;
    }
  }
  uint64_t v8 = (uint64_t)(v6 + 40);
  uint64_t v9 = v6 + 48;
  while (v9 == std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v8, (uint64_t *)v7 + 4))
  {
    uint64_t v10 = (char *)*((void *)v7 + 1);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (char *)*((void *)v7 + 2);
        BOOL v12 = *(void *)v11 == (void)v7;
        v7 = v11;
      }
      while (!v12);
    }
    v7 = v11;
    if (v11 == v2 + 72) {
      goto LABEL_14;
    }
  }
  return 1;
}

void realityio::DirtyStageSubscription::~DirtyStageSubscription(realityio::DirtyStageSubscription *this)
{
  *(void *)this = &unk_26F32F6D0;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26F32F6D0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2455D2BD0](this, 0x10A1C407F0BD61ELL);
}

void __clang_call_terminate(void *a1)
{
}

void std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(uint64_t a1)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = (atomic_uint *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    if ((atomic_fetch_add(Ptr + 2, 0xFFFFFFFF) & 0x7FFFFFFF) == 1) {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_Destroy((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)Ptr);
    }
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Sdf_PathNode *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_Destroy(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  switch(*((unsigned char *)this + 14))
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::~Sdf_PathNode(this);
      goto LABEL_5;
    case 1:
      uint64_t v1 = MEMORY[0x2455CEE10]();
      goto LABEL_5;
    case 2:
      uint64_t v1 = MEMORY[0x2455CF4F0]();
LABEL_5:
      return (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)MEMORY[0x270FA37B0](v1);
    case 3:
      uint64_t v2 = MEMORY[0x2455CF330]();
      goto LABEL_14;
    case 4:
      uint64_t v2 = MEMORY[0x2455CF0B0]();
      goto LABEL_14;
    case 5:
      uint64_t v2 = MEMORY[0x2455CF0A0]();
      goto LABEL_14;
    case 6:
      uint64_t v2 = MEMORY[0x2455CF5A0]();
      goto LABEL_14;
    case 7:
      uint64_t v2 = MEMORY[0x2455CF1F0]();
      goto LABEL_14;
    case 8:
      uint64_t v2 = MEMORY[0x2455CF270]();
LABEL_14:
      this = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)MEMORY[0x270FA37B8](v2);
      break;
    default:
      return this;
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathNode::~Sdf_PathNode(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0) {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(this);
  }

  boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~intrusive_ptr((atomic_uint **)this);
}

atomic_uint **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~intrusive_ptr(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (v2 && (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) & 0x7FFFFFFF) == 1) {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_Destroy((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)v2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(uint64_t result)
{
  unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 48), 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
  if (result && add_explicit == 1)
  {
    MEMORY[0x2455CE920]();
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    uint64_t v1 = (void *)result;
    __dmb(9u);
    uint64_t v2 = *(void **)(result + 128);
    if (v2)
    {
      v1[17] = v2;
      operator delete(v2);
    }
    uint64_t v3 = (void *)v1[13];
    if (v3)
    {
      v1[14] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v1[10];
    if (v4)
    {
      v1[11] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v1[7];
    if (v5)
    {
      v1[8] = v5;
      operator delete(v5);
    }
    uint64_t v6 = (void *)v1[4];
    if (v6)
    {
      v1[5] = v6;
      operator delete(v6);
    }
    v7 = (void *)v1[1];
    if (v7)
    {
      v1[2] = v7;
      operator delete(v7);
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F4EC2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265071830, MEMORY[0x263F8C060]);
}

void sub_23F4EC3F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      uint64_t v19 = v12 - (void)a2;
      if (a5 <= (uint64_t)(v12 - (void)a2) >> 3)
      {
        v20 = &a3[a5];
      }
      else
      {
        v20 = &a3[v19 >> 3];
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_at_end<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>((uint64_t)a1, v20, a4);
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      if (v20 != v7)
      {
        v21 = v5;
        do
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(v21++, v7++);
        while (v7 != v20);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61) {
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
      uint64_t v16 = v10 - v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v27[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[8 * v15];
      v27[0] = v18;
      v27[1] = v22;
      v27[3] = &v18[8 * v17];
      uint64_t v23 = 8 * a5;
      v24 = &v22[a5];
      do
      {
        uint64_t v25 = *v7;
        *uint64_t v22 = *v7;
        if ((v25 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v22 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v22;
        ++v7;
        v23 -= 8;
      }
      while (v23);
      v27[2] = v24;
      uint64_t v5 = (void *)std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_23F4EC8AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_at_end<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  for (uint64_t i = *(uint64_t **)(result + 8); a2 != a3; ++i)
  {
    uint64_t v4 = *a2;
    *uint64_t i = *a2;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *i &= 0xFFFFFFFFFFFFFFF8;
    }
    ++a2;
  }
  *(void *)(result + 8) = i;
  return result;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  char v8 = (void *)v6;
  if (v7 < a3)
  {
    uint64_t v9 = (void *)v7;
    char v8 = *(void **)(a1 + 8);
    do
    {
      *v8++ = *v9;
      *v9++ = 0;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,0>(a2, v7, v6);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__swap_out_circular_buffer(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    unint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      uint64_t v8 = *--v7;
      *(void *)(v6 - 8) = v8;
      v6 -= 8;
      void *v7 = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = (void *)a1[1];
  uint64_t v10 = (void *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *a3;
      *a3++ = 0;
    }
    while (a3 != v9);
    uint64_t v6 = a2[1];
  }
  a2[2] = v10;
  uint64_t v11 = (void *)*a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v3 = a2;
    do
    {
      if (v3 != a3)
      {
        uint64_t v4 = *(void *)(a3 - 8);
        if ((v4 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)(a3 - 8) = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = 0;
      }
      v3 -= 8;
      a3 -= 8;
    }
    while (v3 != a1);
  }
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::TfToken::operator=(void *result, void *a2)
{
  if (a2 != result)
  {
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *uint64_t result = *a2;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    v3 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      uint64_t v3 = *(void *)(a1 + 16);
    }
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    int v6 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v3 + 4, a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::operator<(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
    || (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0)
  {
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0) {
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    }
    return 0;
  }

  return MEMORY[0x270FA3B20](a1, a2);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, _DWORD **a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  unint64_t v7 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, v7);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 9, v7 + 1);
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 5) = v6 + 12;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()+ 8), 1u, memory_order_relaxed);
  }
  return a1;
}

{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL()) {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
  }
  return a1;
}

{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,0>(uint64_t a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(a1, *a2);
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(a1, a2[1]);
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__assign_unique<pxrInternal__aapl__pxrReserved__::TfToken const*>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v10 = result;
    uint64_t v11 = v8;
    uint64_t v12 = v8;
    if (v8)
    {
      uint64_t v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__node_assign_unique(v5, a2, v8);
        if (v9)
        {
          int v8 = v11;
          uint64_t v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          uint64_t v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          int v8 = v12;
        }
        ++a2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v5, a2, a2);
    ++a2;
  }
  return result;
}

void sub_23F4ED604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__node_assign_unique(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v9, a2);
  if (*v6) {
    return *v6;
  }
  uint64_t v7 = v6;
  pxrInternal__aapl__pxrReserved__::TfToken::operator=(a3 + 4, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v7, a3);
  return a3;
}

void *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v8 = v4;
        uint64_t v9 = v4 + 4;
        if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7, a3, v4 + 4))break; {
        uint64_t v4 = (void *)*v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (*a2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v3) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v4 == 0;
    }
    return !v6;
  }
  else
  {
    if (v3 == v4) {
      return 0;
    }
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(v9 + 8);
    if (v10 < v11) {
      return 1;
    }
    if (v10 != v11)
    {
      return 0;
    }
    else
    {
      unint64_t v14 = *(const void **)(v9 + 16);
      unint64_t v12 = v9 + 16;
      uint64_t v13 = v14;
      int v15 = *(char *)(v12 + 23);
      uint64_t v18 = *(const void **)(v8 + 16);
      unint64_t v16 = v8 + 16;
      unint64_t v17 = v18;
      int v19 = *(char *)(v16 + 23);
      if (v19 >= 0) {
        size_t v20 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        size_t v20 = *(void *)(v16 + 8);
      }
      if (v19 >= 0) {
        v21 = (const void *)v16;
      }
      else {
        v21 = v17;
      }
      if (v15 >= 0) {
        size_t v22 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        size_t v22 = *(void *)(v12 + 8);
      }
      if (v15 >= 0) {
        uint64_t v23 = (const void *)v12;
      }
      else {
        uint64_t v23 = v13;
      }
      if (v22 >= v20) {
        size_t v24 = v20;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v21, v23, v24);
      if (v25) {
        return v25 < 0;
      }
      else {
        return v20 < v22;
      }
    }
  }
}

void *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x28uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *a2;
  result[4] = *a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  BOOL v6 = (void *)(a1 + 8);
  do
  {
    int v7 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v5, v3 + 4, a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      BOOL v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v5, a2, v6 + 4))
  {
    return v2;
  }
  return v6;
}

uint64_t realityio::mtlx::NeoDataSource::primFromPath(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v5, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, a2 + 1);
  (*(void (**)(uint64_t, int *))(*(void *)a1 + 8))(a1, &v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  return a1;
}

void sub_23F4EDAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::mtlx::NeoDataSource::gatherSources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[0] = 0;
  v11[1] = 0;
  unint64_t v10 = v11;
  (*(void (**)(uint64_t, void, void ***))(*(void *)a1 + 160))(a1, *(unsigned int *)(a2 + 8), &v10);
  int v5 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)a1 + 16))(&v9, a1, *((unsigned int *)v5 + 7));
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(a3, (unsigned int *)&v9, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      int v6 = v5[1];
      if (v6)
      {
        do
        {
          int v7 = (void **)v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void **)v5[2];
          BOOL v8 = *v7 == v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != v11);
  }
  std::__tree<unsigned int>::destroy((uint64_t)&v10, v11[0]);
}

void sub_23F4EDC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void realityio::mtlx::NeoShadeNodeGraph::GetInputs(realityio::mtlx::NeoShadeNodeGraph *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr, void, void, uint64_t))(**(void **)this + 136))(&v10, *(void *)this, *((unsigned int *)this + 2), 1);
  uint64_t v3 = v10;
  for (uint64_t i = v11; v3 != i; v3 += 24)
  {
    int v5 = *(void ***)v3;
    int v8 = *(_DWORD *)(v3 + 8);
    int v7 = v5;
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v9 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a2, (uint64_t *)&v7);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  int v7 = (void **)&v10;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_23F4EDD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100](char **a1, uint64_t *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v27 = result;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(result, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    int v15 = &v14[24 * v10];
    unint64_t v16 = &v14[24 * v13];
    uint64_t v26 = v16;
    uint64_t v17 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *(void *)int v15 = v17;
    *((void *)v15 + 2) = a2[2];
    a2[2] = 0;
    uint64_t v9 = v15 + 24;
    v25.i64[1] = (uint64_t)(v15 + 24);
    int v19 = *a1;
    unint64_t v18 = (unint64_t)a1[1];
    if ((char *)v18 == *a1)
    {
      int64x2_t v22 = vdupq_n_s64(v18);
    }
    else
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 24);
        v18 -= 24;
        int v21 = *(_DWORD *)(v18 + 8);
        *((void *)v15 - 3) = v20;
        v15 -= 24;
        *((_DWORD *)v15 + 2) = v21;
        *((void *)v15 + 2) = *(void *)(v18 + 16);
        *(void *)(v18 + 16) = 0;
      }
      while ((char *)v18 != v19);
      int64x2_t v22 = *(int64x2_t *)a1;
      uint64_t v9 = (char *)v25.i64[1];
      unint64_t v16 = v26;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v25 = v22;
    uint64_t v23 = a1[2];
    a1[2] = v16;
    uint64_t v26 = v23;
    uint64_t v24 = v22.i64[0];
    uint64_t result = std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    uint64_t v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v7 = v8;
    *(void *)(v7 + 16) = a2[2];
    a2[2] = 0;
    uint64_t v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
  return result;
}

void realityio::mtlx::NeoShadeNodeGraph::GetOutputs(realityio::mtlx::NeoShadeNodeGraph *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr, void, void, void))(**(void **)this + 136))(&v10, *(void *)this, *((unsigned int *)this + 2), 0);
  uint64_t v3 = v10;
  for (uint64_t i = v11; v3 != i; v3 += 24)
  {
    unint64_t v5 = *(void ***)v3;
    int v8 = *(_DWORD *)(v3 + 8);
    unint64_t v7 = v5;
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v9 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a2, (uint64_t *)&v7);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  unint64_t v7 = (void **)&v10;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_23F4EE034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void realityio::mtlx::NeoShadeConnectable::GetInputs(realityio::mtlx::NeoShadeConnectable *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr, void, void, uint64_t))(**(void **)this + 136))(&v10, *(void *)this, *((unsigned int *)this + 2), 1);
  uint64_t v3 = v10;
  for (uint64_t i = v11; v3 != i; v3 += 24)
  {
    unint64_t v5 = *(void ***)v3;
    int v8 = *(_DWORD *)(v3 + 8);
    unint64_t v7 = v5;
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v9 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a2, (uint64_t *)&v7);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  unint64_t v7 = (void **)&v10;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_23F4EE17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void realityio::mtlx::NeoShadeOutput::GetValueProducingAttributes(realityio::mtlx::NeoShadeOutput *this@<X0>, uint64_t a2@<X8>)
{
  v28[1] = *MEMORY[0x263EF8340];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v24 = 0;
  int64x2_t v25 = 0;
  uint64_t v26 = 0;
  int v21 = 0;
  int64x2_t v22 = 0;
  unint64_t v23 = 0;
  (*(void (**)(void **__return_ptr))(**(void **)this + 24))(&v20);
  while (1)
  {
    uint64_t v4 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    if (!v4) {
      break;
    }
    unint64_t v5 = (void **)v21;
    uint64_t v6 = v22;
    if (v21 != (char **)v22)
    {
      while (*v5 != v20)
      {
        if (++v5 == v22)
        {
          unint64_t v5 = v22;
          break;
        }
      }
    }
    if (v5 != v22)
    {
      int v15 = *(id *)(realityio::logObjects(v4) + 48);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
        if (*(char *)(String + 23) >= 0) {
          uint64_t v17 = String;
        }
        else {
          uint64_t v17 = *(void *)String;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v17;
        _os_log_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_DEFAULT, "Loop detected in shader: '%s'", buf, 0xCu);
      }

      break;
    }
    if ((unint64_t)v22 >= v23)
    {
      unint64_t v7 = (void **)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v21, &v20);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v22, &v20);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 1, (_DWORD *)&v20 + 1);
      unint64_t v7 = v6 + 1;
    }
    int64x2_t v22 = v7;
    uint64_t v8 = *(void *)this;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v19, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
    realityio::mtlx::NeoDataSource::primFromPath(v8, &v19);
    int v10 = v9;
    NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
    *(void *)buf = v8;
    *(_DWORD *)&buf[8] = v10;
    uint64_t v12 = *NameToken;
    v28[0] = v12;
    if ((v12 & 7) != 0)
    {
      unint64_t v13 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
        v28[0] = v13;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
    if (!(*(unsigned int (**)(void, void, void *, char **))(**(void **)buf + 88))(*(void *)buf, *(unsigned int *)&buf[8], v28, &v24)|| (unint64_t v14 = v24, v24 == v25))
    {
      uint64_t v18 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v20, (int *)&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v20 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
    }
    else
    {
      if (&v24 != (char **)a2)
      {
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(a2, v24, v25, (v25 - v24) >> 3);
        unint64_t v14 = v24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v20, v14);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v20 + 4, (_DWORD *)v14 + 1);
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::resize((uint64_t *)&v24, 0);
    }
    if ((v28[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  *(void *)buf = &v21;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  int v21 = &v24;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
}

void sub_23F4EE514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void ***a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void ***a19)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a12);
  a19 = (void ***)&a13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a13 = &a16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = (v3 - *result) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      for (uint64_t i = *result + 8 * a2;
            v3 != i;
            uint64_t result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v3))
      {
        v3 -= 8;
      }
      v2[1] = i;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (uint64_t *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__append(result, v5);
  }
  return result;
}

realityio::mtlx::USDDataSource *realityio::mtlx::USDDataSource::USDDataSource(realityio::mtlx::USDDataSource *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  *(void *)this = &unk_26F32F700;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 6) = 0;
  realityio::mtlx::USDDataSource::findPrimIndex(this, a2);
  return this;
}

void sub_23F4EE6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(v2, *v3);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t realityio::mtlx::USDDataSource::findPrimIndex(realityio::mtlx::USDDataSource *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v14);
  unint64_t v4 = (uint64_t **)((char *)this + 32);
  unint64_t v5 = (unsigned int *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 32, &v14);
  uint64_t v6 = v5;
  if ((unsigned int *)((char *)this + 40) == v5)
  {
    uint64_t v9 = *((void *)this + 1);
    unint64_t v8 = *((void *)this + 2);
    if (v8 >= *((void *)this + 3))
    {
      uint64_t v10 = std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdPrim const&>((uint64_t *)this + 1, (uint64_t)a2);
    }
    else
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)this + 24, *((void *)this + 2), (uint64_t)a2);
      uint64_t v10 = v8 + 32;
      *((void *)this + 2) = v8 + 32;
    }
    *((void *)this + 2) = v10;
    uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 32, &v17, &v14);
    unint64_t v7 = (v8 - v9) >> 5;
    if (!*v11)
    {
      uint64_t v12 = (uint64_t *)operator new(0x28uLL);
      v15[1] = v6;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v12 + 7, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v12 + 8, (_DWORD *)&v14 + 1);
      *((_DWORD *)v12 + 9) = v7;
      char v16 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v4, v17, v11, v12);
      v15[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)v15, 0);
    }
  }
  else
  {
    unint64_t v7 = v5[9];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  return v7;
}

void sub_23F4EE83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 16) = v3;
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdObject::GetPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)this + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*(_DWORD *)this == 1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, v4);
      unint64_t v5 = a2 + 1;
      uint64_t v6 = (_DWORD *)((char *)this + 20);
LABEL_7:
      return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v5, v6);
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)this + 24);
    uint64_t v10 = v4;
LABEL_15:
    return (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v10, v9);
  }
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    if (*(_DWORD *)this == 1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, (_DWORD *)(v7 + 16));
      unint64_t v5 = a2 + 1;
      uint64_t v6 = (_DWORD *)(v7 + 20);
      goto LABEL_7;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)this + 24);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16);
    goto LABEL_15;
  }
  *(void *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();

  return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
}

_DWORD *realityio::mtlx::USDDataSource::getPrim@<X0>(realityio::mtlx::USDDataSource *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1) + 32 * a2;
  *(_DWORD *)a3 = *(_DWORD *)v4;
  uint64_t v5 = *(void *)(v4 + 8);
  *(void *)(a3 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 16), (_DWORD *)(v4 + 16));
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 20), (_DWORD *)(v4 + 20));
  uint64_t v7 = *(void *)(v4 + 24);
  *(void *)(a3 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t realityio::mtlx::USDDataSource::getAttr(realityio::mtlx::USDDataSource *this, realityio::mtlx::USDDataSource *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  realityio::mtlx::USDDataSource::getPrim(a2, a3, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, a4);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  uint64_t result = v7;
  if (v7) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  return result;
}

void sub_23F4EEA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::getPath@<X0>(realityio::mtlx::USDDataSource *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  realityio::mtlx::USDDataSource::getPrim(this, a2, (uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5, a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  uint64_t result = v6;
  if (v6) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return result;
}

void sub_23F4EEB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::getPath@<X0>(realityio::mtlx::USDDataSource *this@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, _DWORD *a4@<X8>)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v6, this, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6, a4);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  uint64_t result = v7;
  if (v7) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  return result;
}

void sub_23F4EEBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

uint64_t realityio::mtlx::USDDataSource::hasValue(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v5, this, a2, a3);
  uint64_t HasValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v5);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return HasValue;
}

void sub_23F4EECAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::getBaseName(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v10, this, a2, a3);
  if (a4)
  {
    MEMORY[0x2455CEB30](&v6, v10);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v6);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    MEMORY[0x2455CEC60](&v6, v10);
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v6);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  uint64_t result = v11;
  if (v11) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  return result;
}

void sub_23F4EEDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

uint64_t realityio::mtlx::USDDataSource::getTypeName(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v11, this, a2, a3);
  if (a4)
  {
    MEMORY[0x2455CEB30](&v7, v11);
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    MEMORY[0x2455CEC60](&v7, v11);
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  return TypeName;
}

void sub_23F4EEFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t realityio::mtlx::USDDataSource::getInputValue(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v10, this, a2, a3);
  MEMORY[0x2455CEB30](&v6, v10);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get();
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  return v4;
}

void sub_23F4EF0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void realityio::mtlx::USDDataSource::getInputValue(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v5, this, a2, a3);
  MEMORY[0x2455CEB30](&v4, v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_23F4EF1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void realityio::mtlx::USDDataSource::getInputValue(realityio::mtlx::USDDataSource *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v4, a1, a2, a3);
  MEMORY[0x2455CEB30](&v3, v4);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>();
}

void sub_23F4EF2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t realityio::mtlx::USDDataSource::getRawConnectedSourcePaths(realityio::mtlx::USDDataSource *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v13, a1, a2, a3);
  if (a4)
  {
    MEMORY[0x2455CEB30](&v9, v13);
    int v5 = MEMORY[0x2455D0E10](&v9);
    char v6 = v5;
    if (v5) {
      LOBYTE(a4) = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    MEMORY[0x2455CEC60](&v9, v13);
    int v7 = MEMORY[0x2455D0FB0](&v9);
    char v6 = v7;
    if (v7) {
      LOBYTE(a4) = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  }
  if ((v6 & 1) == 0) {
    LOBYTE(a4) = 0;
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  }
  return a4 & 1;
}

void sub_23F4EF464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getAttributeConnections(realityio::mtlx::USDDataSource *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v5, a1, a2, a3);
  uint64_t Connections = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return Connections;
}

void sub_23F4EF530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::surfaceOutput@<X0>(realityio::mtlx::USDDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  realityio::mtlx::USDDataSource::getPrim(this, a3, (uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v15[0] = MEMORY[0x263F90740] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput(&v16, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v15, a2);
  MEMORY[0x2455CEF40](v15);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v11, &v17, &v18);
  int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v11);
  uint64_t v8 = *(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v16);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  *(void *)a4 = this;
  *(_DWORD *)(a4 + 8) = PrimIndex;
  *(void *)(a4 + 16) = v8;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)(a4 + 16) = v9;
    }
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  uint64_t result = v17;
  if (v17) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  }
  return result;
}

void sub_23F4EF700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getAttrValue(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v6, this, a2, a3);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  return v4;
}

void sub_23F4EF7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void realityio::mtlx::USDDataSource::getAttrToken(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v4, this, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_23F4EF884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::getAttrRoleName(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v4, this, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v4);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  uint64_t result = v5;
  if (v5) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return result;
}

void sub_23F4EF91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::getAttrColorSpace(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v4, this, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v4);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  uint64_t result = v5;
  if (v5) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return result;
}

void sub_23F4EF9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::nodeGraphGetList@<X0>(realityio::mtlx::USDDataSource *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, int64x2_t *a4@<X8>)
{
  realityio::mtlx::USDDataSource::getPrim(this, a2, (uint64_t)&v57);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v56[0] = MEMORY[0x263F90760] + 16;
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58.i64[1]);
  if (v58.i64[0]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58.i64[0]);
  }
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v56);
    uint64_t v7 = v54;
    for (uint64_t i = v55; v7 != i; v7 += 32)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v50, (uint64_t *)(v7 + 8), (_DWORD *)(v7 + 16));
      int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v50);
      uint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v7);
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v12 = a4->u64[1];
      unint64_t v11 = a4[1].u64[0];
      if (v12 >= v11)
      {
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a4->i64[0]) >> 3);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - a4->i64[0]) >> 3);
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x555555555555555) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v15;
        }
        v60 = a4 + 1;
        int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)a4[1].i64, v17);
        uint64_t v20 = &v18[24 * v14];
        *(void *)uint64_t v20 = this;
        *((_DWORD *)v20 + 2) = PrimIndex;
        *((void *)v20 + 2) = v10;
        uint64_t v22 = a4->i64[0];
        unint64_t v21 = a4->u64[1];
        if (v21 == a4->i64[0])
        {
          int64x2_t v26 = vdupq_n_s64(v21);
          unint64_t v23 = &v18[24 * v14];
        }
        else
        {
          unint64_t v23 = &v18[24 * v14];
          do
          {
            uint64_t v24 = *(void *)(v21 - 24);
            v21 -= 24;
            int v25 = *(_DWORD *)(v21 + 8);
            *((void *)v23 - 3) = v24;
            v23 -= 24;
            *((_DWORD *)v23 + 2) = v25;
            *((void *)v23 + 2) = *(void *)(v21 + 16);
            *(void *)(v21 + 16) = 0;
          }
          while (v21 != v22);
          int64x2_t v26 = *a4;
        }
        uint64_t v13 = v20 + 24;
        a4->i64[0] = (uint64_t)v23;
        a4->i64[1] = (uint64_t)(v20 + 24);
        int64x2_t v58 = v26;
        uint64_t v27 = a4[1].i64[0];
        a4[1].i64[0] = (uint64_t)&v18[24 * v19];
        uint64_t v59 = v27;
        v57 = (void **)v26.i64[0];
        std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v57);
      }
      else
      {
        *(void *)unint64_t v12 = this;
        *(_DWORD *)(v12 + 8) = PrimIndex;
        uint64_t v13 = (char *)(v12 + 24);
        *(void *)(v12 + 16) = v10;
      }
      a4->i64[1] = (uint64_t)v13;
      if ((v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
      if (v51) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v51);
      }
    }
    v57 = (void **)&v54;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v57);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v56);
    uint64_t v28 = v54;
    for (uint64_t j = v55; v28 != j; v28 += 32)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v50, (uint64_t *)(v28 + 8), (_DWORD *)(v28 + 16));
      int v30 = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v50);
      uint64_t v31 = *(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v28);
      if ((v31 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v33 = a4->u64[1];
      unint64_t v32 = a4[1].u64[0];
      if (v33 >= v32)
      {
        unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - a4->i64[0]) >> 3);
        unint64_t v36 = v35 + 1;
        if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - a4->i64[0]) >> 3);
        if (2 * v37 > v36) {
          unint64_t v36 = 2 * v37;
        }
        if (v37 >= 0x555555555555555) {
          unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v38 = v36;
        }
        v60 = a4 + 1;
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)a4[1].i64, v38);
        v41 = &v39[24 * v35];
        *(void *)v41 = this;
        *((_DWORD *)v41 + 2) = v30;
        *((void *)v41 + 2) = v31;
        uint64_t v43 = a4->i64[0];
        unint64_t v42 = a4->u64[1];
        if (v42 == a4->i64[0])
        {
          int64x2_t v47 = vdupq_n_s64(v42);
          v44 = &v39[24 * v35];
        }
        else
        {
          v44 = &v39[24 * v35];
          do
          {
            uint64_t v45 = *(void *)(v42 - 24);
            v42 -= 24;
            int v46 = *(_DWORD *)(v42 + 8);
            *((void *)v44 - 3) = v45;
            v44 -= 24;
            *((_DWORD *)v44 + 2) = v46;
            *((void *)v44 + 2) = *(void *)(v42 + 16);
            *(void *)(v42 + 16) = 0;
          }
          while (v42 != v43);
          int64x2_t v47 = *a4;
        }
        v34 = v41 + 24;
        a4->i64[0] = (uint64_t)v44;
        a4->i64[1] = (uint64_t)(v41 + 24);
        int64x2_t v58 = v47;
        uint64_t v48 = a4[1].i64[0];
        a4[1].i64[0] = (uint64_t)&v39[24 * v40];
        uint64_t v59 = v48;
        v57 = (void **)v47.i64[0];
        std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v57);
      }
      else
      {
        *(void *)unint64_t v33 = this;
        *(_DWORD *)(v33 + 8) = v30;
        v34 = (char *)(v33 + 24);
        *(void *)(v33 + 16) = v31;
      }
      a4->i64[1] = (uint64_t)v34;
      if ((v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
      if (v51) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v51);
      }
    }
    v57 = (void **)&v54;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v57);
  }
  return MEMORY[0x2455CF040](v56);
}

void sub_23F4EFE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x2455CF040](va1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::nodeGraphGetInput@<X0>(realityio::mtlx::USDDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  realityio::mtlx::USDDataSource::getPrim(this, a3, (uint64_t)&v15);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v19[0] = MEMORY[0x263F90760] + 16;
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInput(&v15, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v19, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v11, &v16, &v17);
  int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v11);
  uint64_t v8 = *(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v15);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  *(void *)a4 = this;
  *(_DWORD *)(a4 + 8) = PrimIndex;
  *(void *)(a4 + 16) = v8;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)(a4 + 16) = v9;
    }
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  }
  return MEMORY[0x2455CF040](v19);
}

void sub_23F4F00D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va);
  MEMORY[0x2455CF040](va1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::nodeGraphGetOutput@<X0>(realityio::mtlx::USDDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  realityio::mtlx::USDDataSource::getPrim(this, a3, (uint64_t)&v15);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v19[0] = MEMORY[0x263F90760] + 16;
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(&v15, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v19, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v11, &v16, &v17);
  int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v11);
  uint64_t v8 = *(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v15);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  *(void *)a4 = this;
  *(_DWORD *)(a4 + 8) = PrimIndex;
  *(void *)(a4 + 16) = v8;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)(a4 + 16) = v9;
    }
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  }
  return MEMORY[0x2455CF040](v19);
}

void sub_23F4F02DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)va);
  MEMORY[0x2455CF040](va1);
  _Unwind_Resume(a1);
}

unint64_t realityio::mtlx::USDDataSource::getIndex(pxrInternal__aapl__pxrReserved__::UsdObject **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdObject **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(a1 + 4), a2);
  if (a1 + 5 != v4) {
    return *((unsigned int *)v4 + 9);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v13, a1[1]);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v13);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v17, v6, a2);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  if (v18) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  }
  uint64_t v7 = v14;
  if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v11, a1[1]);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v11);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v13, v8, a2);
  unint64_t PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex((realityio::mtlx::USDDataSource *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  }
  uint64_t v9 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return PrimIndex;
}

void sub_23F4F04BC(_Unwind_Exception *a1, uint64_t a2, atomic_uint *a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  if (a3)
  {
    if (atomic_fetch_add_explicit(a3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a3 + 8))(a3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         uint64_t result = *a1,
         v4)
      ? (BOOL v6 = result == 0)
      : (BOOL v6 = 1),
        v6))
  {
    uint64_t v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

pxrInternal__aapl__pxrReserved__ *realityio::mtlx::USDDataSource::gatherSources(realityio::mtlx::USDDataSource *a1, unsigned int a2, uint64_t *a3)
{
  realityio::mtlx::USDDataSource::getPrim(a1, a2, (uint64_t)v38);
  BOOL v6 = v39;
  if (!v39 || (*((unsigned char *)v39 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v39, v5);
  }
  uint64_t v7 = (void *)*((void *)v6 + 3);
  unint64_t v8 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v33 = MEMORY[0x263F906F0] + 16;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v33);
    realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeInput>(&v29, a1, v23, v24);
    std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(a3, &v29);
    std::__tree<unsigned int>::destroy((uint64_t)&v29, v30);
    uint64_t v18 = (void **)&v23;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v18);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v33);
    realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(&v29, a1, v23, v24);
    std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(a3, &v29);
    std::__tree<unsigned int>::destroy((uint64_t)&v29, v30);
    uint64_t v18 = (void **)&v23;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v18);
    MEMORY[0x2455CECB0](&v33);
  }
  else
  {
    uint64_t v9 = v39;
    if (!v39 || (*((unsigned char *)v39 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v39, v5);
    }
    uint64_t v10 = (void *)*((void *)v9 + 3);
    unint64_t v11 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v11) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v11 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v33 = MEMORY[0x263F90760] + 16;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v33);
      realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeInput>(&v29, a1, v23, v24);
      std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(a3, &v29);
      std::__tree<unsigned int>::destroy((uint64_t)&v29, v30);
      uint64_t v18 = (void **)&v23;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v18);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v33);
      realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(&v29, a1, v23, v24);
      std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(a3, &v29);
      std::__tree<unsigned int>::destroy((uint64_t)&v29, v30);
      uint64_t v18 = (void **)&v23;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v18);
      MEMORY[0x2455CF040](&v33);
    }
    else
    {
      uint64_t v12 = v39;
      if (!v39 || (*((unsigned char *)v39 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v39, v5);
      }
      uint64_t v13 = (void *)*((void *)v12 + 3);
      uint64_t v14 = (void *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v14) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*v13 & 0xFFFFFFFFFFFFFFF8) == (*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v37[0] = MEMORY[0x263F90740] + 16;
        LODWORD(v29) = 1;
        int v30 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v32 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v36 = 0;
        uint64_t v33 = MEMORY[0x263F90790] + 16;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
        uint64_t v28 = 0;
        int v27 = 0;
        unint64_t v15 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v15) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput((uint64_t *)&v29, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v15 + 96));
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v29)
          && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v23, &v34, &v35);
          LODWORD(v18) = realityio::mtlx::USDDataSource::findPrimIndex(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)a3, (unsigned int *)&v18, &v18);
          if ((v26 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
          if (v24) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
          }
        }
        unint64_t v16 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v16) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput(&v23, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 24));
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v23)
          && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v18, &v34, &v35);
          unsigned int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)a3, &PrimIndex, &PrimIndex);
          if ((v21 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
          if (v19) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
          }
        }
        if ((v26 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
        if (v24) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
        }
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
        if (v30) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v30);
        }
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CF2C0](&v33);
        MEMORY[0x2455CEF40](v37);
      }
    }
  }
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  uint64_t result = v39;
  if (v39) {
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v39);
  }
  return result;
}

void sub_23F4F0BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)va1);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF2C0](va2);
  MEMORY[0x2455CEF40](v6 - 120);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v6 - 96));
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeInput>(uint64_t **result, realityio::mtlx::USDDataSource *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = result;
  result[2] = 0;
  result[1] = 0;
  *uint64_t result = (uint64_t *)(result + 1);
  if (a3 != a4)
  {
    uint64_t v5 = a3;
    do
    {
      int v19 = 1;
      uint64_t v20 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v22 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v26 = 0;
      uint64_t v23 = MEMORY[0x263F90790] + 16;
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
      if (v20) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
      }
      uint64_t v18 = 0;
      int v17 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v19, &v24, &v25);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19, &v16);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&PrimIndex, (uint64_t *)(v5 + 8), (_DWORD *)(v5 + 16));
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&PrimIndex, &v14);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
        uint64_t v7 = v15;
        uint64_t v6 = v16;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
        if ((v13 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
        if (v11) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
        if (v6 != v7)
        {
          unsigned int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v9, &PrimIndex, &PrimIndex);
        }
        if ((v22 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        if (v20) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
        }
      }
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t result = (uint64_t **)MEMORY[0x2455CF2C0](&v23);
      v5 += 32;
    }
    while (v5 != a4);
  }
  return result;
}

void sub_23F4F0F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF2C0](v16 - 120);
  std::__tree<unsigned int>::destroy(a3, *(void **)(a3 + 8));
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(uint64_t **result, realityio::mtlx::USDDataSource *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = result;
  result[2] = 0;
  result[1] = 0;
  *uint64_t result = (uint64_t *)(result + 1);
  if (a3 != a4)
  {
    uint64_t v5 = a3;
    do
    {
      int v19 = 1;
      uint64_t v20 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v22 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v26 = 0;
      uint64_t v23 = MEMORY[0x263F90790] + 16;
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
      if (v20) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
      }
      uint64_t v18 = 0;
      int v17 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v19, &v24, &v25);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19, &v16);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&PrimIndex, (uint64_t *)(v5 + 8), (_DWORD *)(v5 + 16));
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&PrimIndex, &v14);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
        uint64_t v7 = v15;
        uint64_t v6 = v16;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
        if ((v13 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
        if (v11) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
        if (v6 != v7)
        {
          unsigned int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v9, &PrimIndex, &PrimIndex);
        }
        if ((v22 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        if (v20) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
        }
      }
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t result = (uint64_t **)MEMORY[0x2455CF2C0](&v23);
      v5 += 32;
    }
    while (v5 != a4);
  }
  return result;
}

void sub_23F4F1298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF2C0](v16 - 120);
  std::__tree<unsigned int>::destroy(a3, *(void **)(a3 + 8));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::shaderUsesSecondUV(realityio::mtlx::USDDataSource *a1, uint64_t a2)
{
  realityio::mtlx::USDDataSource::getPrim(a1, *(_DWORD *)(a2 + 8), (uint64_t)&v18);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v22[0] = MEMORY[0x263F906F0] + 16;
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  if (v19) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
  }
  uint64_t v17 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v18, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v22);
  char IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v18);
  if (IsValid) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsValid);
  unint64_t v4 = *(unsigned __int8 *)(EmptyString + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = *(void *)(EmptyString + 8);
  }
  if (v4 >= 0xB)
  {
    if (v5 < 0) {
      Emptyuint64_t String = *(void *)EmptyString;
    }
    if (!strncmp((const char *)EmptyString, "ND_texcoord", 0xBuLL))
    {
      unint64_t v6 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v6) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v12, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 56));
      int v11 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12)
        && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
      {
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v14);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v15);
        uint64_t v10 = v16;
        if ((v16 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v10 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
      }
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
      if (v13) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
      }
    }
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  if (v19) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](v22);
  return 0;
}

void sub_23F4F160C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va2);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](v2 - 56);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::primIsValid(realityio::mtlx::USDDataSource *this, unsigned int a2)
{
  realityio::mtlx::USDDataSource::getPrim(this, a2, (uint64_t)&v4);
  uint64_t IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return IsValid;
}

void sub_23F4F1700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::attrIsValid(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v5, this, a2, a3);
  uint64_t IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return IsValid;
}

void sub_23F4F1798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::USDDataSource::primType(realityio::mtlx::USDDataSource *this, unsigned int a2)
{
  realityio::mtlx::USDDataSource::getPrim(this, a2, (uint64_t)&v10);
  uint64_t v3 = v11;
  if (!v11 || (*((unsigned char *)v11 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v11, v2);
  }
  uint64_t v4 = **((void **)v3 + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v11);
  }
  uint64_t v5 = (void *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v6 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) == (*v5 & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t result = 0;
  }
  else
  {
    unint64_t v7 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if (v6 == (atomic_uint *)(*(void *)(v7 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v8 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v8) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if (v6 == (atomic_uint *)(*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8)) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 3;
      }
    }
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_23F4F18FC(_Unwind_Exception *exception_object)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::USDDataSource::getShadeInputs(realityio::mtlx::USDDataSource *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  realityio::mtlx::USDDataSource::getPrim(a1, a2[2], (uint64_t)&v18);
  int v5 = (*(uint64_t (**)(void, void))(**(void **)a2 + 192))(*(void *)a2, a2[2]);
  if (v5 == 1)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v14 = (realityio::mtlx::USDDataSource *)(MEMORY[0x263F90760] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v14);
    MEMORY[0x2455CF040](&v14);
  }
  else if (v5)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v14 = (realityio::mtlx::USDDataSource *)(MEMORY[0x263F906F0] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v14);
    MEMORY[0x2455CECB0](&v14);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v14 = (realityio::mtlx::USDDataSource *)(MEMORY[0x263F90740] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v14);
    MEMORY[0x2455CEF40](&v14);
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  if (v19) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v12 = v24;
  if (v23 != v24)
  {
    uint64_t v6 = v23 + 16;
    do
    {
      uint64_t v7 = v6 - 16;
      LODWORD(v18) = *(_DWORD *)(v6 - 16);
      uint64_t v8 = *(void *)(v6 - 8);
      uint64_t v19 = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, (_DWORD *)v6);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, (_DWORD *)(v6 + 4));
      uint64_t v9 = *(void *)(v6 + 8);
      uint64_t v22 = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v22 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v14, &v19, &v20);
      int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
      uint64_t v11 = *(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v18);
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
      if (v15) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
      }
      uint64_t v14 = a1;
      LODWORD(v15) = PrimIndex;
      uint64_t v16 = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v16 &= 0xFFFFFFFFFFFFFFF8;
      }
      std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a3, (uint64_t *)&v14);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
      if (v19) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
      }
      v6 += 32;
    }
    while (v7 + 32 != v12);
  }
  uint64_t v18 = (void **)&v23;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void realityio::mtlx::USDDataSource::getShadeOutputs(realityio::mtlx::USDDataSource *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  realityio::mtlx::USDDataSource::getPrim(a1, a2[2], (uint64_t)v20);
  int v4 = (*(uint64_t (**)(void, void))(**(void **)a2 + 192))(*(void *)a2, a2[2]);
  if (v4 == 1)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v31 = (void **)(MEMORY[0x263F90760] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v31);
    MEMORY[0x2455CF040](&v31);
  }
  else if (v4)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v31 = (void **)(MEMORY[0x263F906F0] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v31);
    MEMORY[0x2455CECB0](&v31);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v36[0] = MEMORY[0x263F90740] + 16;
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v24 = 0;
    unint64_t v5 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v5) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput((uint64_t *)&v31, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 96));
    if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
    {
      unint64_t v6 = v25;
      if (v25 >= v26)
      {
        uint64_t v7 = std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__emplace_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(&v24, (uint64_t)&v31);
      }
      else
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)&v26, v25, (uint64_t)&v31);
        uint64_t v7 = v6 + 32;
      }
      unint64_t v25 = v7;
    }
    unint64_t v8 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput((uint64_t *)&v27, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 24));
    if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
    {
      unint64_t v9 = v25;
      if (v25 >= v26)
      {
        uint64_t v10 = std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__emplace_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(&v24, (uint64_t)&v27);
      }
      else
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)&v26, v25, (uint64_t)&v27);
        uint64_t v10 = v9 + 32;
      }
      unint64_t v25 = v10;
    }
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
    if (v28) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
    }
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    if (v32) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
    }
    MEMORY[0x2455CEF40](v36);
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  if (v21) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v11 = v25;
  if (v24 != v25)
  {
    uint64_t v12 = v24 + 16;
    do
    {
      uint64_t v13 = v12 - 16;
      LODWORD(v31) = *(_DWORD *)(v12 - 16);
      uint64_t v14 = *(void *)(v12 - 8);
      uint64_t v32 = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, (_DWORD *)v12);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v34, (_DWORD *)(v12 + 4));
      uint64_t v15 = *(void *)(v12 + 8);
      uint64_t v35 = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v35 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v27, &v32, &v33);
      int PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27);
      uint64_t v17 = *(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v31);
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
      if (v28) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
      }
      int v27 = a1;
      LODWORD(v28) = PrimIndex;
      uint64_t v29 = v17;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v29 &= 0xFFFFFFFFFFFFFFF8;
      }
      std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a3, (uint64_t *)&v27);
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
      if (v32) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
      }
      v12 += 32;
    }
    while (v13 + 32 != v11);
  }
  uint64_t v31 = (void **)&v24;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v31);
}

void sub_23F4F2220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a19);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a23);
  a23 = (void **)&a16;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&a23);
  MEMORY[0x2455CEF40](v23 - 112);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a12);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::assignGamut(realityio::mtlx::USDDataSource *a1, const void **a2, unsigned char *a3, uint64_t a4)
{
  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v7, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)*(unsigned int *)(a4 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a4 + 16));
  realityio::assignGamutFromAttribute(a2, a3, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v7);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  uint64_t result = v8;
  if (v8) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return result;
}

void sub_23F4F23C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(uint64_t a1, _DWORD *a2)
{
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==() & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v5, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(uint64_t a1, int *a2)
{
  int v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 8;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = 1;
  uint64_t v5 = *a2;
  *(void *)(a1 + 8) = *a2;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (void *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), a3 + 1);
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && *(void *)(v7 + 16) == *v6) {
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  return a1;
}

void sub_23F4F2758(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v2);
  uint64_t v5 = *(void *)(v1 + 8);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  _Unwind_Resume(a1);
}

const char *FunctionLite::substringFromPreviousDelim(const char *this, const char *a2, const char *a3)
{
  if (a2)
  {
    if (a2 == this)
    {
      return a2 + 1;
    }
    else
    {
      uint64_t v3 = a2 - 1;
      if (a2 - 1 > this)
      {
        while (*(unsigned __int8 *)v3 != a3)
        {
          if (--v3 == this) {
            goto LABEL_10;
          }
        }
        this = v3;
      }
LABEL_10:
      ++this;
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetName(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  if (*(_DWORD *)this != 1) {
    return (uint64_t)this + 24;
  }
  PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(this);

  return pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
}

char *pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v2 = (char *)this + 16;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (v3) {
    return v2;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    return (char *)(v4 + 16);
  }

  return (char *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", v2, (const char *)0x2F);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__emplace_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(v3);
  }
  return result;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__emplace_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v11 = v8;
  uint64_t v12 = &v8[32 * v3];
  uint64_t v14 = &v8[32 * v7];
  std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::~__split_buffer(&v11);
  return v9;
}

void sub_23F4F29E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a2 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a2 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

_DWORD *std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void **std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 32;
      uint64_t result = std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100](v4, v1 - 32);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  char v14 = &v10[8 * v4];
  long long v16 = &v10[8 * v9];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 1, a2 + 1);
  long long v15 = v14 + 8;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v13);
  return v11;
}

void sub_23F4F2FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 4), (_DWORD *)(v9 - 4));
      uint64_t v7 = *((void *)&v15 + 1) - 8;
      *((void *)&v15 + 1) -= 8;
      v9 -= 8;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](v3, v1);
      v1 += 8;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 8;
      uint64_t result = std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](v4, v1 - 8);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::__tree<unsigned int>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<unsigned int>::destroy(a1, *a2);
    std::__tree<unsigned int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = v5 & (v6 - 1);
    }
    uint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t v9 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(void *)a2) {
              return v9;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, v5, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  uint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    void *v17 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v20[0];
    }
  }
  uint64_t v9 = (void *)v20[0];
  v20[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v20, 0);
  return v9;
}

void sub_23F4F34AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::SdfPath>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x18uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *uint64_t v8 = 0;
  v8[1] = a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 4, a3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 5, a3 + 1);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      float v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *float v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            float v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          float v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v3 = (char *)v1[1];
    int8x8_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        if ((v5 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v3 -= 24;
      }
      while (v3 != v2);
      int8x8_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v4 = v3 - 24;
    *(void *)(a1 + 16) = v3 - 24;
    uint64_t v5 = *(void *)(v3 - 8);
    if ((v5 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      uint64_t v3 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v3 = v4;
    }
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vdeallocate((void **)a1);
    if (a4 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)&v19, a2, v15, (uint64_t)v9);
    uint64_t result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v8, v15, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)&v20, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 8;
      uint64_t result = std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_23F4F3A68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23F4F3A70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 8;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_DWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, v6);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, v6 + 1);
      v6 += 2;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 8;
      uint64_t result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a4, v5);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a4 + 4, v5 + 1);
    a4 += 8;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void **std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    return (void **)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v19 = v4;
    if (v12) {
      BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v12);
    }
    else {
      BOOL v13 = 0;
    }
    unint64_t v15 = v13;
    uint64_t v16 = &v13[8 * v10];
    uint64_t v17 = v16;
    uint64_t v18 = &v13[8 * v12];
    std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end((uint64_t)&v15, a2);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(a1, &v15);
    return std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v15);
  }
}

void sub_23F4F3DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    uint64_t v5 = result;
    uint64_t v6 = &result[a2];
    do
    {
      *v5++ = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v4 -= 8;
    }
    while (v4);
    uint64_t result = v6;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void *std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 16);
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    uint64_t v5 = result;
    uint64_t v6 = &result[a2];
    do
    {
      *v5++ = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v4 -= 8;
    }
    while (v4);
    uint64_t result = v6;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned int>,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned int>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F4F3FD4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40EEEF142ELL);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    int v6 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v3 + 28), a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (void *)((char *)v5 + 28))) {
    return v2;
  }
  return v5;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdPrim const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  unint64_t v12 = &v8[32 * v3];
  unint64_t v14 = &v8[32 * v7];
  std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  BOOL v13 = v12 + 32;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::~__split_buffer(&v11);
  return v9;
}

void sub_23F4F4150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 32;
      uint64_t result = std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100](v4, v1 - 32);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (void *)((char *)v4 + 28);
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, (void *)((char *)v4 + 28))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned int>,0>((uint64_t)v2 + 28);
    }
    operator delete(v2);
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(uint64_t *result, void *a2)
{
  uint64_t v3 = a2 + 1;
  uint64_t v2 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t **)(result + 1);
    do
    {
      uint64_t v7 = *v6;
      if (*v6)
      {
        unsigned int v8 = *((_DWORD *)v2 + 7);
        uint64_t v9 = v6;
        while (1)
        {
          while (1)
          {
            uint64_t v10 = (uint64_t **)v7;
            unsigned int v11 = *((_DWORD *)v7 + 7);
            if (v8 >= v11) {
              break;
            }
            uint64_t v7 = *v10;
            uint64_t v9 = v10;
            if (!*v10)
            {
              unint64_t v12 = 0;
              uint64_t v9 = v10;
              goto LABEL_13;
            }
          }
          if (v11 >= v8) {
            break;
          }
          uint64_t v9 = v10 + 1;
          uint64_t v7 = v10[1];
          if (!v7)
          {
            unint64_t v12 = 0;
            goto LABEL_13;
          }
        }
        unint64_t v12 = v10;
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v10 = v6;
        uint64_t v9 = v6;
      }
LABEL_13:
      BOOL v13 = (void *)v2[1];
      char v14 = v13;
      long long v15 = v2;
      if (v13)
      {
        do
        {
          long long v16 = v14;
          char v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          long long v16 = (void *)v15[2];
          BOOL v17 = *v16 == (void)v15;
          long long v15 = v16;
        }
        while (!v17);
      }
      if (!v12)
      {
        uint64_t v18 = v2;
        if (v13)
        {
          do
          {
            uint64_t v19 = v13;
            BOOL v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v19 = (void *)v18[2];
            BOOL v17 = *v19 == (void)v18;
            uint64_t v18 = v19;
          }
          while (!v17);
        }
        if ((void *)*a2 == v2) {
          *a2 = v19;
        }
        char v20 = (uint64_t *)a2[1];
        --a2[2];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v20, v2);
        uint64_t result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v5, (uint64_t)v10, v9, v2);
      }
      uint64_t v2 = v16;
    }
    while (v16 != v3);
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    void *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    char v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        char v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        uint64_t *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    BOOL v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    BOOL v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *BOOL v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  long long v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    long long v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    BOOL v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      BOOL v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  long long v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    long long v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    uint64_t *v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    void v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    long long v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  uint64_t *v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t realityio::SkeletalAnimationAssetBuilder::kOutputName(realityio::SkeletalAnimationAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::SkeletalAnimationAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23F4F4C4C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(realityio::SkeletalAnimationAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(void)::kOutputLibraryName;
}

void sub_23F4F4D04(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(realityio::SkeletalAnimationAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(void)::kOutputBlendShapeName;
}

void sub_23F4F4DBC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::SkeletalAnimationAssetBuilder *realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(realityio::SkeletalAnimationAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "SkeletalAnimationAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSkeletalAnimationAssetBuilderIdentifier);
  realityio::generateSkeletalAnimationDirtyStageSubscription(&v5);
  v12[0] = &unk_26F32F9C0;
  void v12[3] = v12;
  v11[0] = &unk_26F32FAA0;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F32F820;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 18) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 65) = 0;
  *((void *)this + 63) = (char *)this + 512;
  *((void *)this + 64) = 0;
  *((void *)this + 62) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::SkeletalAnimationAssetBuilder *)((char *)this + 528));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23F4F4FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(v26, *((void **)v24 + 64));
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT(v25);
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT(v27);
  realityio::DynamicBuilder::~DynamicBuilder(v24);
  _Unwind_Resume(a1);
}

realityio::Builder *realityio::DynamicBuilder::DynamicBuilder(realityio::Builder *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  BOOL v13 = realityio::Builder::Builder(a1, a2);
  *(void *)BOOL v13 = &unk_26F32F8B0;
  MEMORY[0x2455CF830]((char *)v13 + 184, a4);
  MEMORY[0x2455CF830]((char *)a1 + 192, a3);
  uint64_t v14 = a5[1];
  *((void *)a1 + 25) = *a5;
  *((void *)a1 + 26) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__value_func[abi:ne180100]((uint64_t)a1 + 216, a6);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__value_func[abi:ne180100]((uint64_t)a1 + 248, a7);
  return a1;
}

void sub_23F4F5128(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v4);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if ((*v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::Builder::~Builder(v1);
  _Unwind_Resume(a1);
}

void realityio::DynamicBuilder::~DynamicBuilder(realityio::DynamicBuilder *this)
{
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::run(realityio::SkeletalAnimationAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  v98 = a2;
  uint64_t v3 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v94, v4, v3);
  MEMORY[0x2455CE910](v92);
  uint64_t v5 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v89 = MEMORY[0x263F90748] + 16;
  uint64_t v6 = *(id *)(realityio::logObjects(v5) + 24);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_INFO, "Saving skeletal animation asset reference", buf, 2u);
  }

  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v88, 2030, (uint64_t)this);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v94))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v94);
    unsigned int v7 = *(atomic_uint **)&buf[8];
    if (*(void *)&buf[8])
    {
      if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&buf[8])
                    + 14))
        unsigned int v7 = *(atomic_uint **)buf;
      else {
        unsigned int v7 = 0;
      }
    }
    v87 = v7;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v87);
    uint64_t v8 = *(void *)&buf[8];
    if (*(void *)&buf[8]
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    unsigned int v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v87);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v9);
    if (v10 != 0.0)
    {
      double v86 = 1.0 / v10;
      uint64_t v11 = (std::__shared_weak_count *)((char *)this + 504);
      std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 504, *((void **)this + 64));
      *((void *)this + 65) = 0;
      *((void *)this + 63) = (char *)this + 512;
      *((void *)this + 64) = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v85[3] = 0;
      v85[0] = MEMORY[0x263F90778] + 16;
      unint64_t v12 = atomic_load(&realityio::tokens::AnimationBuilderTokens);
      if (!v12) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v85, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 8));
      int v80 = *(_DWORD *)buf;
      uint64_t v81 = *(void *)&buf[8];
      if (*(void *)&buf[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v82, &v73);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v83, (_DWORD *)&v73 + 1);
      uint64_t v84 = *((void *)&v73 + 1);
      if ((BYTE8(v73) & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v84 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v74 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((BYTE8(v73) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
      if (*(void *)&buf[8]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
      }
      unint64_t v13 = atomic_load(&realityio::tokens::AnimationBuilderTokens);
      if (!v13) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v85, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 16));
      int v75 = *(_DWORD *)buf;
      uint64_t v76 = *(void *)&buf[8];
      if (*(void *)&buf[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v77, &v73);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v78, (_DWORD *)&v73 + 1);
      uint64_t v79 = *((void *)&v73 + 1);
      if ((BYTE8(v73) & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v79 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v74 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((BYTE8(v73) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
      if (*(void *)&buf[8]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v80)
        && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v75))
      {
        uint64_t v74 = 0;
        *(_OWORD *)buf = 0u;
        long long v73 = 0u;
        memset(v71, 0, 40);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>();
      }
      if (buf[0])
      {
        uint64_t v14 = (realityio::SkeletalAnimationAssetBuilder *)realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::operator=((uint64_t)this + 280, (uint64_t)&buf[8]);
        uint64_t v15 = *((void *)this + 2);
        uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 3);
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v16 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputName(v14);
        std::mutex::lock((std::mutex *)(v15 + 64));
        BOOL v17 = operator new(0x28uLL);
        v17[1] = 0;
        v17[2] = 0;
        void *v17 = &unk_26F32FCF0;
        v17[3] = &unk_26F32FD40;
        v17[4] = (char *)this + 280;
        *(void *)&v71[0] = v16;
        uint64_t v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v15 + 40), v16, (uint64_t)&std::piecewise_construct, (long long **)v71);
        uint64_t v19 = (std::__shared_weak_count *)v18[8];
        v18[7] = (uint64_t)(v17 + 3);
        v18[8] = (uint64_t)v17;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v15, (unsigned __int8 *)v16, (uint64_t)v16);
        std::mutex::unlock((std::mutex *)(v15 + 64));
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      else
      {
        memset(v71, 0, 120);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        memset((char *)v71 + 8, 0, 112);
        realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::operator=((uint64_t)this + 280, (uint64_t)v71);
        realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)v71);
      }
      double v20 = v86;
      int v21 = *((_DWORD *)this + 44);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v124, &v90, &v91);
      pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery((uint64_t *)&v123, (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v92, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v124);
      if ((v124[24] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v124[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v124[16]);
      if (*(void *)&v124[8]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v124[8]);
      }
      v122 = 0;
      long long v120 = 0u;
      long long v121 = 0u;
      v118 = 0;
      v117 = 0;
      uint64_t v119 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder((uint64_t *)v124, (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v123);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v120);
      long long v120 = *(_OWORD *)v124;
      long long v121 = *(_OWORD *)&v124[16];
      memset(v124, 0, sizeof(v124));
      v122 = (void *)v125;
      *(void *)&long long v125 = 0;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v124);
      std::vector<char const*>::resize((uint64_t)&v117, v120);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v120);
      uint64_t v22 = v122;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v120);
      uint64_t v23 = &v122[v120];
      if (v22 != v23)
      {
        uint64_t v24 = (const char **)v117;
        do
        {
          unint64_t v25 = *v22 & 0xFFFFFFFFFFFFFFF8;
          if (v25)
          {
            uint64_t v26 = (const char *)(v25 + 16);
            if (*(char *)(v25 + 39) < 0) {
              uint64_t v26 = *(const char **)v26;
            }
          }
          else
          {
            uint64_t v26 = "";
          }
          *v24++ = v26;
          ++v22;
        }
        while (v22 != v23);
      }
      v115 = 0;
      v114 = 0;
      uint64_t v116 = 0;
      BlendShapeWeightTimeSamples = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamples();
      if (v115 == v114)
      {
        unint64_t v38 = *(id *)(realityio::logObjects(BlendShapeWeightTimeSamples) + 24);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v89, __p);
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
          *(_DWORD *)v124 = 136315138;
          *(void *)&v124[4] = Text;
          _os_log_impl(&dword_23F4EA000, v38, OS_LOG_TYPE_DEFAULT, "EntitySkeletalAnimationBuilder stopping operation to read animation because no animation found in %s.", v124, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        }

        uint64_t v40 = std::system_category();
        LOBYTE(v71[0]) = 0;
        *((void *)&v71[0] + 1) = 0;
        *(void *)&v71[1] = v40;
      }
      else
      {
        int v70 = v21;
        double v28 = *(double *)v114;
        LODWORD(v11) = vcvtpd_u64_f64(*(v115 - 1) - *(double *)v114 + 1.0);
        if (v11 == 1) {
          double v29 = *(double *)v114 + 1.0;
        }
        else {
          double v29 = *(v115 - 1);
        }
        v113 = 0;
        memset(v112, 0, sizeof(v112));
        int64x2_t v110 = 0uLL;
        v111[0] = 0;
        if (v11)
        {
          *(void *)&long long v125 = v111;
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((unint64_t)v11);
          *(void *)v124 = v30;
          *(void *)&v124[8] = v30;
          uint64_t v32 = &v30[24 * v31];
          *(void *)&v124[16] = v30;
          *(void *)&v124[24] = v32;
          int v33 = (void *)v110.i64[1];
          int v34 = (void *)v110.i64[0];
          if (v110.i64[1] == v110.i64[0])
          {
            int64x2_t v37 = vdupq_n_s64(v110.u64[1]);
            uint64_t v35 = v30;
          }
          else
          {
            uint64_t v35 = v30;
            do
            {
              *((void *)v35 - 3) = 0;
              *((void *)v35 - 2) = 0;
              v35 -= 24;
              *((void *)v35 + 2) = 0;
              long long v36 = *(_OWORD *)(v33 - 3);
              v33 -= 3;
              *(_OWORD *)uint64_t v35 = v36;
              *((void *)v35 + 2) = v33[2];
              *int v33 = 0;
              v33[1] = 0;
              v33[2] = 0;
            }
            while (v33 != v34);
            int64x2_t v37 = v110;
            uint64_t v32 = *(char **)&v124[24];
            uint64_t v30 = *(char **)&v124[16];
          }
          v110.i64[0] = (uint64_t)v35;
          v110.i64[1] = (uint64_t)v30;
          *(int64x2_t *)&v124[8] = v37;
          uint64_t v41 = v111[0];
          v111[0] = v32;
          *(void *)&v124[24] = v41;
          *(void *)v124 = v37.i64[0];
          std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v124);
          uint64_t v42 = 0;
          while (1)
          {
            uint64_t v43 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights();
            if (!v43) {
              break;
            }
            pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v112);
            v44 = v113;
            pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v112);
            double v102 = 0.0;
            __p[0] = 0;
            __p[1] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v44, (uint64_t)v113 + 4 * v112[0], ((unsigned char *)v113 + 4 * v112[0] - (unsigned char *)v44) >> 2);
            uint64_t v45 = v110.i64[1];
            if (v110.i64[1] >= v111[0])
            {
              unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((v110.i64[1] - v110.i64[0]) >> 3);
              unint64_t v47 = v46 + 1;
              if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<char const*>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((v111[0] - v110.i64[0]) >> 3) > v47) {
                unint64_t v47 = 0x5555555555555556 * ((v111[0] - v110.i64[0]) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v111[0] - v110.i64[0]) >> 3) >= 0x555555555555555) {
                unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v48 = v47;
              }
              *(void *)&long long v125 = v111;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v48);
              v50 = (double *)&v49[24 * v46];
              *(void *)v124 = v49;
              *(void *)&v124[8] = v50;
              *(void *)&v124[24] = &v49[24 * v51];
              double *v50 = 0.0;
              v50[1] = 0.0;
              v50[2] = 0.0;
              *(_OWORD *)v50 = *(_OWORD *)__p;
              v50[2] = v102;
              __p[1] = 0;
              __p[0] = 0;
              double v102 = 0.0;
              uint64_t v52 = v50 + 3;
              *(void *)&v124[16] = v50 + 3;
              uint64_t v53 = (void *)v110.i64[1];
              uint64_t v54 = (void *)v110.i64[0];
              uint64_t v55 = *(void *)&v124[8];
              if (v110.i64[1] == v110.i64[0])
              {
                int64x2_t v57 = vdupq_n_s64(v110.u64[1]);
              }
              else
              {
                do
                {
                  *(void *)(v55 - 24) = 0;
                  *(void *)(v55 - 16) = 0;
                  v55 -= 24;
                  *(void *)(v55 + 16) = 0;
                  long long v56 = *(_OWORD *)(v53 - 3);
                  v53 -= 3;
                  *(_OWORD *)uint64_t v55 = v56;
                  *(void *)(v55 + 16) = v53[2];
                  *uint64_t v53 = 0;
                  v53[1] = 0;
                  v53[2] = 0;
                }
                while (v53 != v54);
                int64x2_t v57 = v110;
                uint64_t v52 = *(void **)&v124[16];
              }
              v110.i64[0] = v55;
              v110.i64[1] = (uint64_t)v52;
              *(int64x2_t *)&v124[8] = v57;
              uint64_t v58 = v111[0];
              v111[0] = *(void *)&v124[24];
              *(void *)&v124[24] = v58;
              *(void *)v124 = v57.i64[0];
              std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v124);
              v110.i64[1] = (uint64_t)v52;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              *(void *)v110.i64[1] = 0;
              *(void *)(v45 + 8) = 0;
              *(void *)(v45 + 16) = 0;
              *(_OWORD *)uint64_t v45 = *(_OWORD *)__p;
              *(double *)(v45 + 16) = v102;
              v110.i64[1] = v45 + 24;
            }
            if ((std::__shared_weak_count *)++v42 == v11) {
              goto LABEL_88;
            }
          }
          uint64_t v59 = *(NSObject **)(realityio::logObjects(v43) + 24);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v124 = 0;
            _os_log_impl(&dword_23F4EA000, v59, OS_LOG_TYPE_DEFAULT, "EntityBlendShapesAnimationBuilder stopping operation to read animation because UsdSkelAnimQuery.ComputeBlendShapeWeights call failed.", v124, 2u);
          }
          v60 = std::system_category();
          LOBYTE(v71[0]) = 0;
          *((void *)&v71[0] + 1) = 0;
          *(void *)&v71[1] = v60;
        }
        else
        {
LABEL_88:
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v89, &v99);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v99);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p + 1, &v100);
          LODWORD(__p[1]) = v70;
          double v102 = v20 * v28;
          double v103 = v20 * v29;
          double v104 = v20;
          long long v105 = v120;
          long long v106 = v121;
          long long v120 = 0u;
          long long v121 = 0u;
          v107 = v122;
          v122 = 0;
          int64x2_t v108 = v110;
          uint64_t v109 = v111[0];
          int64x2_t v110 = 0uLL;
          v111[0] = 0;
          realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::BlendShapeAnimationAssetDataT((uint64_t)v124, (uint64_t)__p);
          LOBYTE(v71[0]) = 1;
          realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::BlendShapeAnimationAssetDataT((uint64_t)v71 + 8, (uint64_t)v124);
          realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)v124);
          realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
        }
        *(void *)v124 = &v110;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v112);
      }
      if (v114)
      {
        v115 = (double *)v114;
        operator delete(v114);
      }
      if (v117)
      {
        v118 = v117;
        operator delete(v117);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v120);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(&v123);
      if (LOBYTE(v71[0]))
      {
        v61 = (char *)this + 400;
        v62 = (realityio::SkeletalAnimationAssetBuilder *)realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::operator=((uint64_t)this + 400, (uint64_t)v71 + 8);
        uint64_t v64 = *((void *)this + 2);
        v63 = (std::__shared_weak_count *)*((void *)this + 3);
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v65 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v62);
        std::mutex::lock((std::mutex *)(v64 + 64));
        v66 = operator new(0x28uLL);
        v66[1] = 0;
        v66[2] = 0;
        void *v66 = &unk_26F32FD70;
        v66[3] = &unk_26F32FDC0;
        v66[4] = v61;
        *(void *)v124 = v65;
        v67 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v64 + 40), v65, (uint64_t)&std::piecewise_construct, (long long **)v124);
        v68 = (std::__shared_weak_count *)v67[8];
        v67[7] = (uint64_t)(v66 + 3);
        v67[8] = (uint64_t)v66;
        if (v68) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v64, (unsigned __int8 *)v65, (uint64_t)v65);
        std::mutex::unlock((std::mutex *)(v64 + 64));
        if (v63) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
      }
      else
      {
        uint64_t v129 = 0;
        long long v127 = 0u;
        long long v128 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        memset(v124, 0, sizeof(v124));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v129 = 0;
        long long v127 = 0u;
        long long v128 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        *(_OWORD *)&v124[16] = 0u;
        realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::operator=((uint64_t)this + 400, (uint64_t)v124);
        realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)v124);
      }
      if (LOBYTE(v71[0])) {
        realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)((char *)v71 + 8));
      }
      if (buf[0]) {
        realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)&buf[8]);
      }
      if ((v79 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
      if (v76) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v76);
      }
      if ((v84 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
      if (v81) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81);
      }
      MEMORY[0x2455CF0D0](v85);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v87);
  }
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v88);
  MEMORY[0x2455CEF60](&v89);
  if (v93) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
  if ((v97 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
  uint64_t result = v95;
  if (v95) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v95);
  }
  return result;
}

void sub_23F4F6110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,atomic_uint *a61,__int16 a62,uint64_t a63)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v69 - 240));
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&a15);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a31);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a48);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a52);
  MEMORY[0x2455CF0D0](&a56);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a61);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a62);
  MEMORY[0x2455CEF60](&a64);
  if (a68) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a68);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a69);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", v2, (const char *)0x2F);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return realityio::Outputs::storeValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v3);
  }
  return result;
}

void realityio::Outputs::storeValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  unsigned int v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F32FC60;
  uint64_t v8 = *a3;
  void v7[3] = &unk_26F32FCB0;
  v7[4] = v8;
  uint64_t v11 = a2;
  unsigned int v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  double v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F4F65A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

atomic_uint **anonymous namespace'::makeSampledSkeletalPoseAnimationData(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdSkelCache *a2, const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a3, double a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&buf, (uint64_t *)a3 + 1, (_DWORD *)a3 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery((uint64_t *)&v36, a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&buf);
  if ((BYTE8(v38) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v38 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  if (*((void *)&buf + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
  }
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder((uint64_t *)&buf, (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v36);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v33);
  long long v33 = buf;
  long long v34 = v38;
  long long buf = 0u;
  long long v38 = 0u;
  uint64_t v35 = v39;
  v39 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&buf);
  std::vector<char const*>::resize((uint64_t)&v30, v33);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v33);
  uint64_t v6 = v35;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v33);
  unsigned int v7 = &v35[v33];
  if (v6 != v7)
  {
    uint64_t v8 = (const char **)v30;
    do
    {
      unint64_t v9 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        double v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0) {
          double v10 = *(const char **)v10;
        }
      }
      else
      {
        double v10 = "";
      }
      *v8++ = v10;
      ++v6;
    }
    while (v6 != v7);
  }
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, 40);
  memset(v27, 0, 40);
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  JointTransformTimeSamples = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamples();
  unint64_t v12 = *(id *)(realityio::logObjects(JointTransformTimeSamples) + 24);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a3, &v17);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = Text;
    _os_log_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_DEFAULT, "EntitySkeletalAnimationBuilder stopping operation to read animation because no animation found in %s.", (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  }

  uint64_t v14 = std::system_category();
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v14;
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    unint64_t v25 = v24;
    operator delete(v24);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v27);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v28);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v29);
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v33);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(&v36);
}

void sub_23F4F6D90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::operator=(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  if (a1 != a2)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)(a1 + 32));
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(void *)(a1 + 80) = v6;
    operator delete(v6);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  unsigned int v7 = *(void **)(a1 + 96);
  if (v7)
  {
    *(void *)(a1 + 104) = v7;
    operator delete(v7);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return a1;
}

uint64_t realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::operator=(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  if (a1 != a2)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)(a1 + 40));
    long long v5 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a2 + 72) = 0;
  }
  uint64_t v6 = (void **)(a1 + 80);
  if (*(void *)(a1 + 80))
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 80));
    operator delete(*v6);
    void *v6 = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return a1;
}

void realityio::SkeletalAnimationAssetBuilder::clear(realityio::SkeletalAnimationAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3 = (std::mutex *)*((void *)this + 2);
  long long v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>(v3, v5, (uint64_t)v32);
  int v7 = v32[0].__r_.__value_.__s.__data_[0];
  if (!v32[0].__r_.__value_.__s.__data_[0])
  {
    long long v33 = *(_OWORD *)&v32[0].__r_.__value_.__r.__words[1];
    uint64_t v6 = (realityio::SkeletalAnimationAssetBuilder *)&v34;
    if (SHIBYTE(v32[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v34, v32[1].__r_.__value_.__l.__data_, v32[1].__r_.__value_.__l.__size_);
      std::string::pointer data = (std::string::pointer)v34.__r_.__value_.__r.__words[0];
      char v31 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      if (!v32[0].__r_.__value_.__s.__data_[0] && SHIBYTE(v32[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32[1].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v34 = v32[1];
      std::string::pointer data = v32[1].__r_.__value_.__l.__data_;
      char v31 = HIBYTE(v32[1].__r_.__value_.__r.__words[2]);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v7)
  {
    uint64_t v9 = *((void *)this + 2);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v10 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputName(v6);
    std::mutex::lock((std::mutex *)(v9 + 64));
    if (v9 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v9 + 40, v10))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v9 + 40), v10); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v9, (unsigned __int8 *)v10);
    }
    std::mutex::unlock((std::mutex *)(v9 + 64));
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v11 = (std::mutex *)*((void *)this + 2);
  unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v6);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v11, v13, (uint64_t)v32);
  int v15 = v32[0].__r_.__value_.__s.__data_[0];
  if (!v32[0].__r_.__value_.__s.__data_[0])
  {
    long long v33 = *(_OWORD *)&v32[0].__r_.__value_.__r.__words[1];
    uint64_t v14 = (realityio::SkeletalAnimationAssetBuilder *)&v34;
    if (SHIBYTE(v32[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v34, v32[1].__r_.__value_.__l.__data_, v32[1].__r_.__value_.__l.__size_);
      std::string::pointer v28 = (std::string::pointer)v34.__r_.__value_.__r.__words[0];
      char v30 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      if (!v32[0].__r_.__value_.__s.__data_[0] && SHIBYTE(v32[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32[1].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v34 = v32[1];
      std::string::pointer v28 = v32[1].__r_.__value_.__l.__data_;
      char v30 = HIBYTE(v32[1].__r_.__value_.__r.__words[2]);
    }
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v15)
  {
    uint64_t v17 = *((void *)this + 2);
    long long v16 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v14);
    std::mutex::lock((std::mutex *)(v17 + 64));
    if (v17 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v17 + 40, v18))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v17 + 40), v18); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v17, (unsigned __int8 *)v18);
    }
    std::mutex::unlock((std::mutex *)(v17 + 64));
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  uint64_t v19 = (std::mutex *)*((void *)this + 2);
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v21 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v14);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v19, v21, (uint64_t)v32);
  int v23 = v32[0].__r_.__value_.__s.__data_[0];
  if (!v32[0].__r_.__value_.__s.__data_[0])
  {
    long long v33 = *(_OWORD *)&v32[0].__r_.__value_.__r.__words[1];
    uint64_t v22 = (realityio::SkeletalAnimationAssetBuilder *)&v34;
    if (SHIBYTE(v32[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v34, v32[1].__r_.__value_.__l.__data_, v32[1].__r_.__value_.__l.__size_);
      std::string::pointer v27 = (std::string::pointer)v34.__r_.__value_.__r.__words[0];
      LOBYTE(v19) = *((unsigned char *)&v34.__r_.__value_.__s + 23);
      if (!v32[0].__r_.__value_.__s.__data_[0] && SHIBYTE(v32[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32[1].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v34 = v32[1];
      std::string::pointer v27 = v32[1].__r_.__value_.__l.__data_;
      LOBYTE(v19) = *((unsigned char *)&v32[1].__r_.__value_.__s + 23);
    }
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v23)
  {
    uint64_t v25 = *((void *)this + 2);
    uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v22);
    std::mutex::lock((std::mutex *)(v25 + 64));
    if (v25 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v25 + 40, v26))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v25 + 40), v26); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v25, (unsigned __int8 *)v26);
    }
    std::mutex::unlock((std::mutex *)(v25 + 64));
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 504, *((void **)this + 64));
  *((void *)this + 65) = 0;
  *((void *)this + 63) = (char *)this + 512;
  *((void *)this + 64) = 0;
  memset(v32, 0, sizeof(v32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  memset(&v32[0].__r_.__value_.__r.__words[1], 0, 112);
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::operator=((uint64_t)this + 280, (uint64_t)v32);
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)v32);
  if (!v23 && (v19 & 0x80) != 0) {
    operator delete(v27);
  }
  if (!v15 && v30 < 0) {
    operator delete(v28);
  }
  if (!v7 && v31 < 0) {
    operator delete(data);
  }
}

void sub_23F4F74E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a14 && a22 < 0) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (!v22 && a12 < 0) {
    operator delete(a10);
  }
  if (!v24 && a13 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::createTimelineDefinitionRef(std::vector<std::string>::size_type *a1, uint64_t a2, uint64_t a3)
{
  if (!a1[4]) {
    return 0;
  }
  uint64_t v4 = a1[13] - a1[12];
  if (!v4) {
    return 0;
  }
  v67 = 0;
  v68 = 0;
  uint64_t v69 = 0;
  memset(&v66, 0, sizeof(v66));
  v63 = 0;
  uint64_t v64 = 0;
  v65 = 0;
  std::vector<RESRT const*>::reserve((void **)&v67, v4 >> 3);
  uint64_t v6 = (void *)a1[12];
  int v7 = (void *)a1[13];
  if (v6 != v7)
  {
    uint64_t v8 = v68;
    do
    {
      uint64_t v9 = a1[9] + 48 * *v6;
      if (v8 >= v69)
      {
        uint64_t v10 = v8 - v67;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = ((char *)v69 - (char *)v67) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if ((unint64_t)((char *)v69 - (char *)v67) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v69, v12);
        }
        else {
          unint64_t v13 = 0;
        }
        uint64_t v14 = (uint64_t *)&v13[8 * v10];
        *uint64_t v14 = v9;
        uint64_t v8 = v14 + 1;
        long long v16 = (char *)v67;
        int v15 = (char *)v68;
        if (v68 != v67)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *--uint64_t v14 = v17;
          }
          while (v15 != v16);
          int v15 = (char *)v67;
        }
        v67 = v14;
        v68 = v8;
        uint64_t v69 = (uint64_t *)&v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *v8++ = v9;
      }
      v68 = v8;
      ++v6;
    }
    while (v6 != v7);
  }
  std::vector<std::string>::reserve(&v66, a1[4]);
  std::vector<RESRT const*>::reserve((void **)&v63, a1[4]);
  std::vector<std::string>::size_type v18 = a1[4];
  if (v18)
  {
    uint64_t v19 = (void *)a1[8];
    uint64_t v20 = &v19[v18];
    do
    {
      unint64_t v21 = *v19 & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        if (*(char *)(v21 + 39) < 0)
        {
          int v22 = *(char **)(v21 + 16);
          if (*(void *)(v21 + 24) > 1uLL)
          {
LABEL_30:
            if (*v22 == 47) {
              ++v22;
            }
          }
        }
        else
        {
          int v22 = (char *)(v21 + 16);
          if (*(unsigned __int8 *)(v21 + 39) >= 2u) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        int v22 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v61, v22);
      std::vector<std::string>::pointer end = v66.__end_;
      if (v66.__end_ >= v66.__end_cap_.__value_)
      {
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v27) {
          unint64_t v27 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v27;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
        if (v28) {
          double v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)&v66.__end_cap_, v28);
        }
        else {
          double v29 = 0;
        }
        char v30 = v29 + v26;
        __v.__first_ = v29;
        __v.__begin_ = v30;
        __v.__end_cap_.__value_ = &v29[v28];
        long long v31 = v61;
        v30->__r_.__value_.__r.__words[2] = v62;
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
        int64_t v62 = 0;
        long long v61 = 0uLL;
        __v.__end_ = v30 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
        uint64_t v25 = v66.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v66.__end_ = v25;
        if (SHIBYTE(v62) < 0)
        {
          operator delete((void *)v61);
          uint64_t v25 = v66.__end_;
        }
      }
      else
      {
        long long v24 = v61;
        v66.__end_->__r_.__value_.__r.__words[2] = v62;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v24;
        uint64_t v25 = end + 1;
        v66.__end_ = end + 1;
      }
      uint64_t v32 = (std::string::__raw *)&v25[-1];
      if (SHIBYTE(v25[-1].__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v32 = (std::string::__raw *)v32->__words[0];
      }
      long long v33 = v64;
      if (v64 >= v65)
      {
        uint64_t v35 = (v64 - v63) >> 3;
        if ((unint64_t)(v35 + 1) >> 61) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v36 = (v65 - v63) >> 2;
        if (v36 <= v35 + 1) {
          unint64_t v36 = v35 + 1;
        }
        if ((unint64_t)(v65 - v63) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37) {
          long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v65, v37);
        }
        else {
          long long v38 = 0;
        }
        v39 = (std::string::__raw **)&v38[8 * v35];
        void *v39 = v32;
        std::string v34 = (char *)(v39 + 1);
        uint64_t v41 = v63;
        uint64_t v40 = v64;
        if (v64 != v63)
        {
          do
          {
            uint64_t v42 = (std::string::__raw *)*((void *)v40 - 1);
            v40 -= 8;
            *--v39 = v42;
          }
          while (v40 != v41);
          uint64_t v40 = v63;
        }
        v63 = (char *)v39;
        uint64_t v64 = v34;
        v65 = &v38[8 * v37];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *(void *)uint64_t v64 = v32;
        std::string v34 = v33 + 8;
      }
      uint64_t v64 = v34;
      ++v19;
    }
    while (v19 != v20);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"[", 1);
  uint64_t v43 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"]", 1);
  std::stringbuf::str();
  uint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(String, (const void **)&v61, (uint64_t)&v55);
  std::string::basic_string[abi:ne180100]<0>(&v52, "SkeletalPose.SkeletalPoses");
  if (v62 >= 0) {
    uint64_t v45 = (const std::string::value_type *)&v61;
  }
  else {
    uint64_t v45 = (const std::string::value_type *)v61;
  }
  if (v62 >= 0) {
    std::string::size_type v46 = HIBYTE(v62);
  }
  else {
    std::string::size_type v46 = *((void *)&v61 + 1);
  }
  unint64_t v47 = std::string::append(&v52, v45, v46);
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  std::string::size_type v54 = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  uint64_t SampledSkeletalPoseAnimation = RETimelineDefinitionCreateSampledSkeletalPoseAnimation();
  RETimelineDefinitionSetFillMode();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetAdditive();
  RETimelineDefinitionSetFrameInterval();
  RETimelineDefinitionSetStartTime();
  RETimelineDefinitionSetEndTime();
  if (a3) {
    RETimelineDefinitionSetSkeleton();
  }
  RETimelineDefinitionSetSkeletalPoses();
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x263F8C2B8];
  v50 = *(std::string **)(MEMORY[0x263F8C2B8] + 72);
  *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x263F8C2B8] + 64);
  __v.__end_ = v50;
  __v.__end_cap_.__value_ = (std::string *)(MEMORY[0x263F8C318] + 16);
  if (v59 < 0) {
    operator delete(v58);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&v60);
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  return SampledSkeletalPoseAnimation;
}

void sub_23F4F7CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, uint64_t a11, void *__pa, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::__split_buffer<std::string> *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  if (SHIBYTE(a14) < 0) {
    operator delete(__pa);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v28 - 169) < 0) {
    operator delete(*(void **)(v28 - 192));
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  char v30 = *(void **)(v28 - 168);
  if (v30)
  {
    *(void *)(v28 - 160) = v30;
    operator delete(v30);
  }
  *(void *)(v28 - 168) = v28 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 168));
  long long v31 = *(void **)(v28 - 120);
  if (v31)
  {
    *(void *)(v28 - 112) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void std::vector<RESRT const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_23F4F7F0C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  int64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_23F4F81D0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](v1);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](a1 + 128);
  return a1;
}

uint64_t realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::createTimelineDefinitionRef(realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *this)
{
  std::vector<std::string>::size_type v1 = *((void *)this + 5);
  if (!v1) {
    return 0;
  }
  memset(&v68, 0, sizeof(v68));
  std::vector<std::string>::reserve(&v68, v1);
  uint64_t v3 = *((void *)this + 5);
  std::string::size_type v54 = this;
  if (v3)
  {
    uint64_t v4 = (void *)*((void *)this + 9);
    uint64_t v5 = 8 * v3;
    while (1)
    {
      unint64_t v6 = *v4 & 0xFFFFFFFFFFFFFFF8;
      if (v6)
      {
        if (*(char *)(v6 + 39) < 0)
        {
          uint64_t v7 = *(char **)(v6 + 16);
          if (*(void *)(v6 + 24) > 1uLL)
          {
LABEL_10:
            if (*v7 == 47) {
              ++v7;
            }
          }
        }
        else
        {
          uint64_t v7 = (char *)(v6 + 16);
          if (*(unsigned __int8 *)(v6 + 39) >= 2u) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        uint64_t v7 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v66, v7);
      std::vector<std::string>::pointer end = v68.__end_;
      if (v68.__end_ >= v68.__end_cap_.__value_)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v68.__end_ - (char *)v68.__begin_) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3) > v11) {
          unint64_t v11 = 0x5555555555555556 * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v11;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v68.__end_cap_;
        if (v12) {
          uint64_t v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)&v68.__end_cap_, v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = v13 + v10;
        __v.__first_ = v13;
        __v.__begin_ = v14;
        __v.__end_cap_.__value_ = &v13[v12];
        long long v15 = v66;
        v14->__r_.__value_.__r.__words[2] = v67;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        std::string::size_type v67 = 0;
        long long v66 = 0uLL;
        __v.__end_ = v14 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v68, &__v);
        long long v16 = v68.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v68.__end_ = v16;
        if (SHIBYTE(v67) < 0) {
          operator delete((void *)v66);
        }
      }
      else
      {
        long long v9 = v66;
        v68.__end_->__r_.__value_.__r.__words[2] = v67;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
        v68.__end_ = end + 1;
      }
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        unint64_t v17 = *((void *)this + 5);
        goto LABEL_29;
      }
    }
  }
  unint64_t v17 = 0;
LABEL_29:
  long long v66 = 0uLL;
  std::string::size_type v67 = 0;
  std::vector<RESRT const*>::reserve((void **)&v66, v17);
  std::vector<std::string>::pointer begin = v68.__begin_;
  for (std::vector<std::string>::pointer i = v68.__end_; begin != i; ++begin)
  {
    std::vector<std::string>::pointer v21 = begin;
    if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0) {
      std::vector<std::string>::pointer v21 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
    }
    uint64_t v22 = *((void *)&v66 + 1);
    if (*((void *)&v66 + 1) >= v67)
    {
      uint64_t v24 = (uint64_t)(*((void *)&v66 + 1) - v66) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        std::vector<char const*>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = (uint64_t)(v67 - v66) >> 2;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if (v67 - (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26) {
        unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v67, v26);
      }
      else {
        unint64_t v27 = 0;
      }
      uint64_t v28 = (std::vector<std::string>::pointer *)&v27[8 * v24];
      *uint64_t v28 = v21;
      int v23 = v28 + 1;
      double v29 = (char *)*((void *)&v66 + 1);
      char v30 = (char *)v66;
      if (*((void *)&v66 + 1) != (void)v66)
      {
        do
        {
          long long v31 = (std::string *)*((void *)v29 - 1);
          v29 -= 8;
          *--uint64_t v28 = v31;
        }
        while (v29 != v30);
        double v29 = (char *)v66;
      }
      *(void *)&long long v66 = v28;
      *((void *)&v66 + 1) = v23;
      std::string::size_type v67 = (std::string::size_type)&v27[8 * v26];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      **((void **)&v66 + 1) = v21;
      int v23 = (void *)(v22 + 8);
    }
    *((void *)&v66 + 1) = v23;
  }
  uint64_t v32 = (uint64_t *)*((void *)this + 10);
  long long v33 = (uint64_t *)*((void *)this + 11);
  if (v32 == v33)
  {
    std::string v34 = 0;
  }
  else
  {
    std::string v34 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    do
    {
      uint64_t v37 = *v32;
      if (v35 >= v36)
      {
        uint64_t v39 = (v35 - v34) >> 3;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        if ((v36 - v34) >> 2 > v40) {
          unint64_t v40 = (v36 - v34) >> 2;
        }
        if ((unint64_t)(v36 - v34) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41)
        {
          if (v41 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v42 = (char *)operator new(8 * v41);
        }
        else
        {
          uint64_t v42 = 0;
        }
        uint64_t v43 = &v42[8 * v39];
        *(void *)uint64_t v43 = v37;
        long long v38 = v43 + 8;
        while (v35 != v34)
        {
          uint64_t v44 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v43 - 1) = v44;
          v43 -= 8;
        }
        unint64_t v36 = &v42[8 * v41];
        if (v34) {
          operator delete(v34);
        }
        std::string v34 = v43;
      }
      else
      {
        *(void *)uint64_t v35 = v37;
        long long v38 = v35 + 8;
      }
      v32 += 3;
      uint64_t v35 = v38;
    }
    while (v32 != v33);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"[", 1);
  uint64_t v45 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"]", 1);
  std::stringbuf::str();
  uint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v54);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(String, (const void **)v60, (uint64_t)&v58);
  std::string::basic_string[abi:ne180100]<0>(&v55, "BlendShapeWeights.blendWeights");
  if ((v61 & 0x80u) == 0) {
    unint64_t v47 = v60;
  }
  else {
    unint64_t v47 = (void **)v60[0];
  }
  if ((v61 & 0x80u) == 0) {
    std::string::size_type v48 = v61;
  }
  else {
    std::string::size_type v48 = (std::string::size_type)v60[1];
  }
  v49 = std::string::append(&v55, (const std::string::value_type *)v47, v48);
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  std::string::size_type v57 = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  uint64_t SampledBlendShapeWeightsAnimation = RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation();
  RETimelineDefinitionSetFillMode();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetAdditive();
  RETimelineDefinitionSetFrameInterval();
  RETimelineDefinitionSetStartTime();
  RETimelineDefinitionSetEndTime();
  if (RETimelineDefinitionSetBlendShapeWeightsData()) {
    uint64_t v18 = SampledBlendShapeWeightsAnimation;
  }
  else {
    uint64_t v18 = 0;
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(__p[0]);
  }
  if (v59 < 0) {
    operator delete(v58);
  }
  if ((char)v61 < 0) {
    operator delete(v60[0]);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x263F8C2B8];
  std::string v52 = *(std::string **)(MEMORY[0x263F8C2B8] + 72);
  *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x263F8C2B8] + 64);
  __v.__end_ = v52;
  __v.__end_cap_.__value_ = (std::string *)(MEMORY[0x263F8C318] + 16);
  if (v64 < 0) {
    operator delete(v63);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&v65);
  if (v34) {
    operator delete(v34);
  }
  if ((void)v66)
  {
    *((void *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return v18;
}

void sub_23F4F8A9C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *__pa, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, void *a19, std::__split_buffer<std::string> *a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  if (SHIBYTE(a12) < 0) {
    operator delete(__pa);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  if (v31) {
    operator delete(v31);
  }
  std::string v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(void *)(v32 - 136) = v34;
    operator delete(v34);
  }
  *(void *)(v32 - 144) = v32 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 144));
  _Unwind_Resume(a1);
}

void realityio::SkeletalAnimationAssetBuilder::~SkeletalAnimationAssetBuilder(void **this)
{
  realityio::SkeletalAnimationAssetBuilder::~SkeletalAnimationAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F32F820;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 72));
  if (*((char *)this + 575) < 0) {
    operator delete(this[69]);
  }
  if (*((char *)this + 551) < 0) {
    operator delete(this[66]);
  }
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)(this + 63), this[64]);
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)(this + 50));
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)(this + 35));
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  uint64_t v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

const void **realityio::DynamicBuilder::description@<X0>(realityio::DynamicBuilder *this@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  unint64_t v4 = *((void *)this + 24) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    uint64_t v5 = (const char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0) {
      uint64_t v5 = *(const char **)v5;
    }
  }
  else
  {
    uint64_t v5 = "";
  }
  unint64_t v6 = *((void *)this + 23) & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    uint64_t v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0) {
      uint64_t v7 = *(const char **)v7;
    }
  }
  else
  {
    uint64_t v7 = "";
  }
  realityio::DirtyStageSubscription::description(*((realityio::DirtyStageSubscription **)this + 25), (CFStringRef *)&v9);
  *a2 = CFStringCreateWithFormat(0, 0, @"<%s: %p { identifier: %s, dirtyStageSubscription: %@ }>", v5, this, v7, v9);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v9);
}

void sub_23F4F8C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v6);
  _Unwind_Resume(a1);
}

uint64_t realityio::DynamicBuilder::identifier@<X0>(uint64_t this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *(atomic_uint **)(this + 184);
  *a2 = v2;
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return this;
}

uint64_t realityio::DynamicBuilder::dirtyStageSubscription@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 208);
  *a2 = *(void *)(this + 200);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t realityio::DynamicBuilder::inputsDescriptor(realityio::DynamicBuilder *this)
{
  uint64_t v1 = *((void *)this + 30);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t realityio::DynamicBuilder::outputsDescriptor(realityio::DynamicBuilder *this)
{
  uint64_t v1 = *((void *)this + 34);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t realityio::Builder::supportsConcurrentExecution(realityio::Builder *this)
{
  return 0;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

realityio::Builder *realityio::Builder::Builder(realityio::Builder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  *(void *)this = &unk_26F32F910;
  size_t v4 = (_DWORD *)((char *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 2, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, (_DWORD *)a2 + 1);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 21) = 0;
  int v5 = realityio::Builder::sCreationOrderIndex;
  *((_DWORD *)this + 44) = realityio::Builder::sCreationOrderIndex;
  *((_OWORD *)this + 4) = 0u;
  realityio::Builder::sCreationOrderIndex = v5 + 1;
  unint64_t v6 = (char *)operator new(0xA0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_26F32F970;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *((_DWORD *)v6 + 14) = 1065353216;
  *((void *)v6 + 9) = 0;
  *((void *)v6 + 8) = v6 + 72;
  *((void *)v6 + 10) = 0;
  *((void *)v6 + 11) = 850045863;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((void *)this + 2) = v6 + 24;
  *((void *)this + 3) = v6;
  *((void *)this + 20) = atomic_fetch_add(&realityio::Builder::Builder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::sNextUniqueIdentifier, 1uLL);
  return this;
}

void sub_23F4F8FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v14 = v13;
  a10 = (void **)(v10 + 88);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v14;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<unsigned int>::destroy(v12, *(void **)(v10 + 48));
  long long v16 = *(std::__shared_weak_count **)(v10 + 24);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v11);
  _Unwind_Resume(a1);
}

void realityio::Builder::~Builder(realityio::Builder *this)
{
  *(void *)this = &unk_26F32F910;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy((uint64_t)this + 136, *((void **)this + 18));
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  size_t v4 = (void **)((char *)this + 88);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v4);
  size_t v4 = (void **)((char *)this + 64);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<unsigned int>::destroy((uint64_t)this + 40, *((void **)this + 6));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

void std::__shared_ptr_emplace<realityio::Outputs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32F970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::Outputs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32F970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::Outputs>::__on_zero_shared(uint64_t a1)
{
}

void realityio::Outputs::~Outputs(std::mutex *this)
{
  std::mutex::~mutex(this + 1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::destroy((uint64_t)&this->__m_.__opaque[32], *(void **)&this->__m_.__opaque[40]);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    size_t v4 = v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        size_t v4 = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v4 - 1);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *realityio::WrappedRERef<REAsset *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT(realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *this)
{
  uint64_t v2 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)this + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      int v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v3 = a1 + 3;
    uint64_t v2 = (atomic_ullong *)a1[3];
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        unint64_t v6 = *(void (**)(void))(*v3 + 8);
        if (v6) {
          v6();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v4 = (void *)a1[4];
      if (*a1)
      {
        uint64_t v5 = 8 * *a1;
        do
        {
          if ((*v4 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
        uint64_t v4 = (void *)a1[4];
      }
      operator delete(v4 - 2);
    }
    void *v3 = 0;
    v3[1] = 0;
  }
}

void realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT(realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

realityio::internal::AriadneSignpostScopeGuard *realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard(realityio::internal::AriadneSignpostScopeGuard *this, int a2, uint64_t a3)
{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = a3;
  if (realityio::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  return this;
}

void std::vector<char const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<char const*>::__append((void **)a1, a2 - v2);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = (_DWORD *)((char *)this + 16);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, v4);
    unint64_t v6 = a2 + 1;
    uint64_t v7 = (_DWORD *)((char *)this + 20);
  }
  else
  {
    uint64_t v8 = *((void *)this + 1);
    if (v8)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, (_DWORD *)(v8 + 16));
      uint64_t v7 = (_DWORD *)(v8 + 20);
    }
    else
    {
      long long v9 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v5);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, v9);
      uint64_t v7 = v9 + 1;
    }
    unint64_t v6 = a2 + 1;
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6, v7);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<char const*>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    long long v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    long long v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<char const*>::__throw_length_error[abi:ne180100]()
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::TfToken]");
      Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)this, *((uint64_t **)this + 4), *(void *)this, *(void *)this);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(this);
      *((void *)this + 4) = Copy;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew(a1, a3);
  if (a4)
  {
    uint64_t v7 = 8 * a4;
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *a2;
      *uint64_t v8 = *a2;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++a2;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F4F9BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto(pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *this)
{
  int v2 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      int v3 = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = v3 - 1;
    }
    while (v3);
  }
  *(void *)this = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load(MEMORY[0x263F90520]);
  if (v2)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    *(void *)a1 = v4;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      int v3 = 2;
    }
    else
    {
      int v3 = 0;
    }
  }
  else
  {
    int v3 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3h]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 6 * v5;
        uint64_t v9 = New;
        do
        {
          int v10 = *v4;
          *((_WORD *)v9 + 2) = *((_WORD *)v4 + 2);
          *(_DWORD *)uint64_t v9 = v10;
          uint64_t v9 = (void *)((char *)v9 + 6);
          uint64_t v4 = (int *)((char *)v4 + 6);
          v8 -= 6;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    unint64_t v3 = (void *)(a1 + 24);
    unsigned __int8 v2 = *(atomic_ullong **)(a1 + 24);
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v4 = *(void (**)(void))(*v3 + 8);
        if (v4) {
          v4();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete((void *)(*(void *)(a1 + 32) - 16));
    }
    void *v3 = 0;
    v3[1] = 0;
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x2AAAAAAAAAAAAAA7) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 6 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F4F9EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatf]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        uint64_t v9 = New;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F4F9FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
      uint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 12 * v5;
        uint64_t v9 = New;
        do
        {
          uint64_t v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *uint64_t v9 = v10;
          uint64_t v9 = (void *)((char *)v9 + 12);
          uint64_t v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1555555555555553) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 12 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F4FA13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::SkeletalAnimationAssetDataT(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return a1;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(atomic_uint **a1)
{
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef(uint64_t a1, atomic_uint *a2)
{
  if (a2)
  {
    atomic_uint v3 = a2[2];
    if (v3 < 0)
    {
      if (v3 == -2
        || (atomic_uint v5 = a2[2],
            atomic_compare_exchange_strong_explicit(a2 + 2, (unsigned int *)&v5, v3 + 1, memory_order_release, memory_order_relaxed), v5 != v3))
      {
        if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0) {
          return;
        }
      }
      else if (v3 != -1)
      {
        return;
      }
    }
    else if (atomic_fetch_add_explicit(a2 + 2, 0xFFFFFFFF, memory_order_release) != 1)
    {
      return;
    }
    uint64_t v4 = *(void (**)(atomic_uint *))(*(void *)a2 + 8);
    v4(a2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique() [T = float]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)this, *(void *)this);
      uint64_t v7 = New;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        uint64_t v9 = New;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F4FA4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23F4FA52C(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::BlendShapeAnimationAssetDataT(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  long long v5 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return a1;
}

void realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard(realityio::internal::AriadneSignpostScopeGuard *this)
{
  if (realityio::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    size_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      size_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  int v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  int v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    int v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      int v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t result = (uint64_t *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1, a2, (uint64_t)&__p);
  int v3 = (void **)__p;
  __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v4 + v7 + v8 + a3;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v6 + v9 + v17;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v30 + v28 + v39 + v29;
        uint64_t v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    int8x8_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x2455D2BD0);
}

atomic_uint **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(atomic_uint **a1)
{
  return a1;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::WrappedRERef<REAsset *>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::WrappedRERef<REAsset *>>,0>(uint64_t a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26F32F9C0;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F32F9C0;
}

char *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  unint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputsDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FA40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputsDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FA40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::InputsDescriptor>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::~__hash_table(a1 + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int8x8_t v3 = *(char **)v2;
      uint8x8_t v5 = (void **)(v2 + 24);
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v5);
      uint64_t v4 = *((void *)v2 + 2);
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26F32FAA0;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F32FAA0;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::SkeletalAnimationAssetBuilder::kOutputName((realityio::SkeletalAnimationAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v18) = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 200), (int *)&v18, &v20);
  uint64_t v6 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v20);
  uint64_t v7 = (realityio::SkeletalAnimationAssetBuilder *)v21;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v8 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v16) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v8, (std::string::size_type *)(v9 + 208), (int *)&v16, &v18);
  uint64_t v10 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v18);
  unint64_t v11 = (realityio::SkeletalAnimationAssetBuilder *)v19;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v12 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v11);
  unint64_t v13 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v15 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v12, (std::string::size_type *)(v13 + 240), &v15, &v16);
  unint64_t v14 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F4FBAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::OutputsDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::OutputsDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FB20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::OutputsDescriptor>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::~__hash_table(a1 + 64);

  return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      uint64_t v5 = v2[2];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

std::string *std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, std::string::size_type *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (std::string *)operator new(0x40uLL);
  unint64_t result = std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_23F4FBDD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(std::string *a1, uint64_t a2, std::string::size_type *a3, int *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F32FB70;
  std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_23F4FBE48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::OutputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FB70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::OutputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FB70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::OutputDescriptor>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>(int a1, std::string *this, uint64_t a3, std::string::size_type *a4, int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  realityio::OutputDescriptor::OutputDescriptor(this, (long long *)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F4FBF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

std::string *realityio::OutputDescriptor::OutputDescriptor(std::string *this, long long *a2, std::string::size_type *a3, int a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *a3;
  this[1].__r_.__value_.__r.__words[0] = *a3;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    this[1].__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a4;
  return this;
}

void realityio::OutputDescriptor::~OutputDescriptor(realityio::OutputDescriptor *this)
{
  uint64_t v1 = *((void *)this + 3);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>::New()
{
}

void sub_23F4FC190(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40BE89B05DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    int v2 = *(_DWORD *)(result + 8);
    if (v2 < 0)
    {
      if (v2 == -1) {
        return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
      }
      int v3 = *(_DWORD *)(result + 8);
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 8), (unsigned int *)&v3, v2 - 1, memory_order_relaxed, memory_order_relaxed);
      if (v3 != v2) {
        return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
      }
    }
    else
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F4FC298(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C408C7DC519);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    int v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        long long v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 24 * *a1;
        do
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          v5 += 24;
          v6 -= 24;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_26F32FBD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F32FBD0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (**(void **)(a1 + 8))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 64);
    do
    {
      uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 16);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique(v6);
      double v7 = *(double *)(*((void *)v6 + 4) + v2);
      std::string::size_type v8 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 16);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique(v8);
      if (*(double *)(*((void *)v8 + 4) + v2 + 8) >= v7)
      {
        unint64_t v9 = *(const pxrInternal__aapl__pxrReserved__::UsdSkelCache **)(a1 + 32);
        uint64_t v10 = *(const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation **)(a1 + 40);
        double v11 = **(double **)(a1 + 48);
        uint64_t ServiceLocator = REEngineGetServiceLocator();
        MEMORY[0x2455CDC30](ServiceLocator);
        if (LOBYTE(__p[0]))
        {
          realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::createTimelineDefinitionRef((std::vector<std::string>::size_type *)&__p[1], 0, 0);
          uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
          RERelease();
          if (LOBYTE(__p[0])) {
            realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)&__p[1]);
          }
        }
        else
        {
          uint64_t TimelineAsset = 0;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 56), &v30);
        uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
        int v15 = (char *)String;
        if (*(char *)(String + 23) >= 0) {
          size_t v16 = *(unsigned __int8 *)(String + 23);
        }
        else {
          size_t v16 = *(void *)(String + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v31, v16 + 10);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v17 = &v31;
        }
        else {
          uint64_t v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        if (v16)
        {
          if (v15[23] >= 0) {
            std::string::size_type v18 = v15;
          }
          else {
            std::string::size_type v18 = *(char **)v15;
          }
          memmove(v17, v18, v16);
        }
        strcpy((char *)v17 + v16, "_timeline_");
        uint64_t v19 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique(v19);
        uint64_t v20 = *((void *)v19 + 4) + v3;
        int v21 = *(char *)(v20 + 23);
        if (v21 >= 0) {
          uint64_t v22 = (const std::string::value_type *)(*((void *)v19 + 4) + v3);
        }
        else {
          uint64_t v22 = *(const std::string::value_type **)v20;
        }
        if (v21 >= 0) {
          std::string::size_type v23 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          std::string::size_type v23 = *(void *)(v20 + 8);
        }
        unint64_t v24 = std::string::append(&v31, v22, v23);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        int64_t v33 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
        if (v33 >= 0) {
          uint64_t v26 = __p;
        }
        else {
          uint64_t v26 = (void **)__p[0];
        }
        realityio::Builder::addAsset((uint64_t *)v5, TimelineAsset, (uint64_t)v26);
        uint64_t v30 = TimelineAsset;
        if (TimelineAsset) {
          RERetain();
        }
        uint64_t v27 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique(v27);
        v31.__r_.__value_.__r.__words[0] = *((void *)v27 + 4) + v3;
        uint64_t v28 = std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 504), (const void **)v31.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v31);
        uint64_t v29 = v28[7];
        if (v29 != v30)
        {
          v28[7] = v30;
          uint64_t v30 = v29;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v30);
        RERelease();
        if (SHIBYTE(v33) < 0) {
          operator delete(__p[0]);
        }
      }
      ++v4;
      v3 += 24;
      v2 += 16;
    }
    while (**(void **)(a1 + 8) > v4);
  }
}

void sub_23F4FC728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t *realityio::Builder::addAsset(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v4 = result;
    uint64_t v5 = a2;
    RERetain();
    realityio::Builder::addAsset(v4, &v5, a3);
    return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  }
  return result;
}

void sub_23F4FC84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfTimeCode]");
      unint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_AllocateNew((uint64_t)this, *(void *)this);
      double v7 = New;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        unint64_t v9 = New;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F4FC980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique() [T = std::string]");
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)this, *(void *)this);
      std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v4, v4 + 24 * v5, (uint64_t)New);
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(this);
      *((void *)this + 4) = New;
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 24 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F4FCB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (std::string *)(a3 + v6);
      int v8 = (long long *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v6 += 24;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_23F4FCBD8(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_23F4FCC04(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v8 = (void *)v4;
        long long v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_23F4FCDE0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::WrappedRERef<REAsset *>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FC60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FC60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_23F4FCFFC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_23F4FD2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_23F4FD374(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FCF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FCF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F32FD70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    unint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F4FD5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void *realityio::DetailedError::DetailedError(void *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *a1 = a2;
  a1[1] = a3;
  uint64_t v5 = (std::string *)(a1 + 2);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    unint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F4FD750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::string>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2455D28C0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      long long v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x2455D28D0](v13);
  return a1;
}

void sub_23F4FDAE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x2455D28D0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x23F4FDAC4);
}

void sub_23F4FDB38(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_23F4FDCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t realityio::TextMeshAssetBuilder::kOutputName(realityio::TextMeshAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::TextMeshAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23F4FDE00(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TextMeshAssetBuilder *realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(realityio::TextMeshAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "TextMeshAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTextMeshAssetBuilderIdentifier);
  realityio::generateTextPrimDirtyStageSubscription(&v5);
  v12[0] = &unk_26F32FED0;
  void v12[3] = v12;
  v11[0] = &unk_26F32FF50;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F32FE58;
  *((void *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::TextMeshAssetBuilder *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23F4FDFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v26 = v25;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v26);
  realityio::DynamicBuilder::~DynamicBuilder(v24);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextMeshAssetBuilder::run(realityio::TextMeshAssetBuilder *this, realityio::Inputs *a2)
{
  v28[4] = *(long long **)MEMORY[0x263EF8340];
  uint64_t v27 = a2;
  uint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v23, v5, v4);
  uint64_t v6 = *((void *)a2 + 6);
  size_t v7 = (long long *)operator new(0x20uLL);
  *(void *)size_t v7 = &unk_26F32FFD0;
  *((void *)v7 + 1) = &v23;
  *((void *)v7 + 2) = &v27;
  *((void *)v7 + 3) = this;
  v28[3] = v7;
  (*(void (**)(uint64_t, long long **))(*(void *)v6 + 16))(v6, v28);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v28);
  uint64_t v8 = *((void *)v27 + 5);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v23, &v22);
  int v9 = (long long **)((char *)this + 280);
  v28[0] = (long long *)realityio::ImportSession::deduplicateMeshAsset(v8, (uint64_t)&v22, *((void *)this + 35), 0);
  realityio::WrappedRERef<REAsset *>::operator=((void *)this + 35, (uint64_t *)v28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  uint64_t v21 = *((void *)this + 35);
  if (v21) {
    RERetain();
  }
  realityio::Builder::addAsset((uint64_t *)this, &v21, 0);
  char v10 = (realityio::TextMeshAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v21);
  uint64_t v12 = *((void *)this + 2);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v13 = (long long *)realityio::TextMeshAssetBuilder::kOutputName(v10);
  std::mutex::lock((std::mutex *)(v12 + 64));
  uint64_t v14 = *v9;
  uint64_t v15 = operator new(0x28uLL);
  uint64_t v16 = v15;
  v15[1] = 0;
  void v15[2] = 0;
  *uint64_t v15 = &unk_26F330050;
  long long v17 = v15 + 3;
  v28[0] = v14;
  if (v14)
  {
    RERetain();
    v16[3] = &unk_26F3300A0;
    v16[4] = v14;
    RERetain();
  }
  else
  {
    void v15[3] = &unk_26F3300A0;
    v15[4] = 0;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v28);
  v28[0] = v13;
  char v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v12 + 40), (const void **)v13, (uint64_t)&std::piecewise_construct, v28);
  unint64_t v19 = (std::__shared_weak_count *)v18[8];
  v18[7] = (uint64_t)v17;
  v18[8] = (uint64_t)v16;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v12, (unsigned __int8 *)v13, (uint64_t)v13);
  std::mutex::unlock((std::mutex *)(v12 + 64));
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  uint64_t result = v24;
  if (v24) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  }
  return result;
}

void sub_23F4FE2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va1);
  std::__shared_weak_count::~__shared_weak_count(v5);
  operator delete(v7);
  std::mutex::unlock(v4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t *realityio::WrappedRERef<REAsset *>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      RERelease();
      uint64_t v4 = *a2;
    }
    *a1 = v4;
    if (v4) {
      RERetain();
    }
  }
  return a1;
}

uint64_t realityio::TextMeshAssetBuilder::clear(realityio::TextMeshAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v5 = (std::mutex *)*((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (const void **)realityio::TextMeshAssetBuilder::kOutputName(this);
  realityio::Outputs::getValue<realityio::WrappedRERef<REAsset *>>(v5, v6, v19);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v19[0].__r_.__value_.__s.__data_[0])
  {
    size_t v7 = (realityio::ImportSession *)*((void *)a2 + 5);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v14, v8, (realityio::Inputs *)((char *)a2 + 32));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v14, &v18);
    realityio::ImportSession::clearMeshAsset(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    int v9 = v15;
    if (v15) {
      int v9 = (realityio::TextMeshAssetBuilder *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v15);
    }
    uint64_t v11 = *((void *)this + 2);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (const void **)realityio::TextMeshAssetBuilder::kOutputName(v9);
    std::mutex::lock((std::mutex *)(v11 + 64));
    if (v11 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v11 + 40, v12))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v11 + 40), v12); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v11, (unsigned __int8 *)v12);
    }
    std::mutex::unlock((std::mutex *)(v11 + 64));
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v19);
}

void sub_23F4FE564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  std::mutex::unlock(v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_23F4FE5C8()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x23F4FE5C0);
}

uint64_t realityio::Outputs::getValue<realityio::WrappedRERef<REAsset *>>@<X0>(std::mutex *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  realityio::Outputs::getRawValue<realityio::WrappedRERef<REAsset *>>(a1, a2, (uint64_t)v9);
  if (v9[0])
  {
    *(void *)&long long v7 = v10;
    if ((void)v10)
    {
      RERetain();
      std::string::size_type v4 = v7;
      RERetain();
    }
    else
    {
      std::string::size_type v4 = 0;
    }
    a3->__r_.__value_.__s.__data_[0] = 1;
    a3->__r_.__value_.__l.__size_ = v4;
    uint64_t v6 = 0;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v7);
  }
  else
  {
    long long v7 = v10;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v8, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    }
    else {
      std::string v8 = v11;
    }
    a3->__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&a3->__r_.__value_.__r.__words[1] = v7;
    a3[1] = v8;
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v9);
}

void sub_23F4FE6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::TextMeshAssetBuilder::~TextMeshAssetBuilder(void **this)
{
  realityio::TextMeshAssetBuilder::~TextMeshAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F32FE58;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 42));
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 35);
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  uint64_t v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string::size_type v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

void *realityio::WrappedRERef<REAsset *>::operator=(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2 != *a1)
  {
    if (*a1)
    {
      RERelease();
      uint64_t v3 = *a2;
    }
    *a1 = v3;
    if (v3) {
      RERetain();
    }
  }
  return a1;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F32FED0;
  return result;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F32FED0;
}

char *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F32FF50;
  return result;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F32FF50;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::TextMeshAssetBuilder::kOutputName((realityio::TextMeshAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 288), &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F4FEB1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F32FFD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F32FFD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  realityio::textInformationFromPrim(*(realityio **)(a1 + 8), (uint64_t)&v12);
  realityio::Inputs::assetManager(**(realityio::Inputs ***)(a1 + 16));
  long long v8 = 0u;
  REStatic3DTextDefaultOptions();
  *(float *)&unsigned int v3 = v16;
  *(float *)&unsigned int v4 = v18;
  *(void *)&long long v8 = __PAIR64__(v4, v3);
  uint64_t v9 = 0;
  float32x2_t v10 = vcvt_f32_f64(v17);
  uint64_t v11 = v23;
  BYTE1(v11) = v22;
  BYTE2(v11) = v24;
  uint64_t v5 = REAssetManagerMeshMemoryAssetCreate3DTextWithOptions();
  uint64_t v7 = v5;
  if (v5) {
    RERetain();
  }
  uint64_t v6 = *(void *)(v2 + 280);
  if (v6 != v5)
  {
    *(void *)(v2 + 280) = v5;
    uint64_t v7 = v6;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v7);
  RERelease();
  REAssetDisableNetworkSyncing();
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
}

void sub_23F4FEDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if ((a39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REAsset *>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REAsset *>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330050;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REAsset *>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F3300A0;
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(a1 + 32));
}

uint64_t realityio::InputOutputWrapperObject<realityio::WrappedRERef<REAsset *>>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void realityio::Outputs::getRawValue<realityio::WrappedRERef<REAsset *>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    if (v8) {
      RERetain();
    }
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
    *(void *)&long long v15 = 0;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v15);
  }
  std::mutex::unlock(v6);
}

void sub_23F4FF06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType::~GeomSubsetBuilderTokens_StaticTokenType(realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType *this)
{
  uint64_t v5 = (void **)((char *)this + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void realityio::generateGeomSubsetDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40040, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40040))
  {
    operator new();
  }
  uint64_t v3 = *(void *)algn_268C40038;
  *a1 = qword_268C40030;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F4FF558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  MEMORY[0x2455D2BD0](v27, 0x10A1C40F82F910ELL);
  *(void *)(v29 - 176) = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 176));
  MEMORY[0x2455D2BD0](v26, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v28, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40040);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>(v4, a2, &a2[2 * a3], (void *)a1[1]);
  }
  return a1;
}

void sub_23F4FF890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>(v4, a2, &a2[2 * a3], (void *)a1[1]);
  }
  return a1;
}

void sub_23F4FF92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>(v4, a2, &a2[2 * a3], (void *)a1[1]);
  }
  return a1;
}

void sub_23F4FF9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F4FFC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v12, 0x60C408C7DC519);
      _Unwind_Resume(a1);
    }
  }
}

void std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F4FFD68(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::AnyValueDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueDirtyPropertyDescriptor,realityio::AnyValueDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueDirtyPropertyDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::AnyValueDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueDirtyPropertyDescriptor,realityio::AnyValueDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueDirtyPropertyDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::AnyValueDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueDirtyPropertyDescriptor,realityio::AnyValueDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueDirtyPropertyDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F4FFFDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::TypeNameDirtyPrimDescriptor *,std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::TypeNameDirtyPrimDescriptor,realityio::TypeNameDirtyPrimDescriptor>,std::allocator<realityio::TypeNameDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::TypeNameDirtyPrimDescriptor *,std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::TypeNameDirtyPrimDescriptor,realityio::TypeNameDirtyPrimDescriptor>,std::allocator<realityio::TypeNameDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::TypeNameDirtyPrimDescriptor *,std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::TypeNameDirtyPrimDescriptor,realityio::TypeNameDirtyPrimDescriptor>,std::allocator<realityio::TypeNameDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> const*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F5001F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::DirtyStageDescriptor *,std::shared_ptr<realityio::DirtyStageDescriptor>::__shared_ptr_default_delete<realityio::DirtyStageDescriptor,realityio::DirtyStageDescriptor>,std::allocator<realityio::DirtyStageDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyStageDescriptor *,std::shared_ptr<realityio::DirtyStageDescriptor>::__shared_ptr_default_delete<realityio::DirtyStageDescriptor,realityio::DirtyStageDescriptor>,std::allocator<realityio::DirtyStageDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyStageDescriptor *,std::shared_ptr<realityio::DirtyStageDescriptor>::__shared_ptr_default_delete<realityio::DirtyStageDescriptor,realityio::DirtyStageDescriptor>,std::allocator<realityio::DirtyStageDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F500344(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::DirtyStageSubscription *,std::shared_ptr<realityio::DirtyStageSubscription>::__shared_ptr_default_delete<realityio::DirtyStageSubscription,realityio::DirtyStageSubscription>,std::allocator<realityio::DirtyStageSubscription>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyStageSubscription *,std::shared_ptr<realityio::DirtyStageSubscription>::__shared_ptr_default_delete<realityio::DirtyStageSubscription,realityio::DirtyStageSubscription>,std::allocator<realityio::DirtyStageSubscription>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyStageSubscription *,std::shared_ptr<realityio::DirtyStageSubscription>::__shared_ptr_default_delete<realityio::DirtyStageSubscription,realityio::DirtyStageSubscription>,std::allocator<realityio::DirtyStageSubscription>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

realityio::StageUpAxisBuilder *realityio::StageUpAxisBuilder::StageUpAxisBuilder(realityio::StageUpAxisBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "StageUpAxisBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kStageUpAxisBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40058, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40058))
  {
    operator new();
  }
  uint64_t v4 = (std::__shared_weak_count *)unk_268C40050;
  v6[0] = _MergedGlobals_0;
  v6[1] = unk_268C40050;
  if (unk_268C40050) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C40050 + 8), 1uLL, memory_order_relaxed);
  }
  realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, v6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F3302B0;
  return this;
}

void sub_23F500734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  unint64_t v39 = *(std::__shared_weak_count **)(v37 - 72);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  *(void *)(v37 - 104) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 104));
  a25 = &a32;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  unint64_t v40 = *(std::__shared_weak_count **)(v37 - 88);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if ((a28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455D2BD0](v36, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40058);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::StageUpAxisBuilder::run(realityio::StageUpAxisBuilder *this, realityio::Inputs *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)long long buf = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v17, (uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis();
  uint64_t v3 = v18;
  if (v18 && atomic_fetch_add_explicit(v18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)buf);
  uint64_t v5 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v4);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v5, (uint64_t)&v17);
  if ((_BYTE)v17)
  {
    uint64_t v6 = (realityio *)v18;
    uint64_t v16 = v18;
    if (v18)
    {
      RERetain();
      unint64_t v7 = atomic_load(MEMORY[0x263F90538]);
      if (!v7) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      float v8 = -0.7854;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v7 + 1352) & 0xFFFFFFFFFFFFFFF8)) {
        float v8 = 0.0;
      }
      __float2 v9 = __sincosf_stret(v8);
      float32x4_t v10 = vmulq_n_f32((float32x4_t)xmmword_23F7B8AF0, v9.__sinval);
      v10.i32[3] = LODWORD(v9.__cosval);
      float32x4_t v15 = v10;
      uint64_t v11 = *((void *)a2 + 6);
      std::string v12 = operator new(0x20uLL);
      *std::string v12 = &unk_26F3303A0;
      v12[1] = &v16;
      v12[2] = &v15;
      void v12[3] = &v19;
      uint64_t v21 = v12;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 16))(v11, buf);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  char v13 = *(NSObject **)(realityio::logObjects(v6) + 24);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_DEFAULT, "Stopping operation to set up axis transform because entity no longer exists", buf, 2u);
  }
LABEL_13:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v16);
  uint64_t result = realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v17);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_23F500B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::StageUpAxisBuilder::clear(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

void realityio::StageUpAxisBuilder::~StageUpAxisBuilder(realityio::StageUpAxisBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void *std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::shared_ptr<realityio::DirtyMetadataDescriptor const> const*,std::shared_ptr<realityio::DirtyMetadataDescriptor const> const*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>(v4, a2, &a2[2 * a3], (void *)a1[1]);
  }
  return a1;
}

void sub_23F500CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F500D30(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((*v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455D2BD0](v1, 0x1060C40E5A1EACFLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::DirtyMetadataDescriptor *,std::shared_ptr<realityio::DirtyMetadataDescriptor>::__shared_ptr_default_delete<realityio::DirtyMetadataDescriptor,realityio::DirtyMetadataDescriptor>,std::allocator<realityio::DirtyMetadataDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_pointer<realityio::DirtyMetadataDescriptor *,std::shared_ptr<realityio::DirtyMetadataDescriptor>::__shared_ptr_default_delete<realityio::DirtyMetadataDescriptor,realityio::DirtyMetadataDescriptor>,std::allocator<realityio::DirtyMetadataDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyMetadataDescriptor *,std::shared_ptr<realityio::DirtyMetadataDescriptor>::__shared_ptr_default_delete<realityio::DirtyMetadataDescriptor,realityio::DirtyMetadataDescriptor>,std::allocator<realityio::DirtyMetadataDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::shared_ptr<realityio::DirtyMetadataDescriptor const> const*,std::shared_ptr<realityio::DirtyMetadataDescriptor const> const*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(v3 + 16), &v7);
    uint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    unint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      unint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_23F50101C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = atomic_load(a1);
  if (!result) {
    operator new();
  }
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
  return result;
}

void realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    uint64_t v43 = std::__shared_weak_count::lock(v6);
    if (v43) {
      uint64_t v42 = *(void *)(a1 + 16);
    }
  }
  MEMORY[0x2455CF830](&v44, a2);
  unint64_t v7 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a1 + 8), &v42);
  if (v7 == v8)
  {
    std::operator+<char>();
    uint64_t v20 = std::string::append(&v39, ") at prim path (");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v23 = *(char *)(String + 23);
    if (v23 >= 0) {
      char v24 = (const std::string::value_type *)String;
    }
    else {
      char v24 = *(const std::string::value_type **)String;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v25 = *(void *)(String + 8);
    }
    uint64_t v26 = std::string::append(&v40, v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v41, ")");
    goto LABEL_22;
  }
  uint64_t v9 = 1;
  uint64_t v10 = v7;
  do
  {
    uint64_t v10 = (void *)*v10;
    --v9;
  }
  while (v10 != v8);
  if (v9)
  {
    std::operator+<char>();
    uint64_t v11 = std::string::append(&v39, ") at prim path (");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v14 = *(char *)(v13 + 23);
    if (v14 >= 0) {
      float32x4_t v15 = (const std::string::value_type *)v13;
    }
    else {
      float32x4_t v15 = *(const std::string::value_type **)v13;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(v13 + 8);
    }
    uint64_t v17 = std::string::append(&v40, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v41, ") because more than one connected builder produced the same output type");
LABEL_22:
    long long v28 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v28;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v37, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    std::string::size_type v29 = v38.__r_.__value_.__r.__words[0];
    *(void *)(a3 + 24) = *((void *)&v37.__r_.__value_.__l + 2);
    *(void *)(a3 + 32) = v29;
    *(void *)(a3 + 39) = *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 7);
    LOBYTE(v29) = v38.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
    v37.__r_.__value_.__r.__words[2] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v29;
    if (v36.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    goto LABEL_44;
  }
  uint64_t v30 = v7[5];
  uint64_t v32 = *(std::mutex **)(v30 + 16);
  std::string v31 = *(std::__shared_weak_count **)(v30 + 24);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v7[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyuint64_t String = (const void **)((v7[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
  }
  realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>(v32, EmptyString, &v37);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v37.__r_.__value_.__s.__data_[0])
  {
    std::string::size_type size = v37.__r_.__value_.__l.__size_;
    v37.__r_.__value_.__l.__size_ = 0;
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = size;
    __p[0] = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v36, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    }
    else {
      std::string v36 = v38;
    }
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)__p;
    *(std::string *)(a3 + 24) = v36;
  }
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v37);
LABEL_44:
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
}

void sub_23F50147C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a14);
  uint64_t v33 = *(void *)(v31 - 40);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v31 - 48);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>@<X0>(std::mutex *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  realityio::Outputs::getRawValue<realityio::WrappedRERef<REEntity *>>(a1, a2, (uint64_t)v9);
  if (v9[0])
  {
    *(void *)&long long v7 = v10;
    if ((void)v10)
    {
      RERetain();
      std::string::size_type v4 = v7;
      RERetain();
    }
    else
    {
      std::string::size_type v4 = 0;
    }
    a3->__r_.__value_.__s.__data_[0] = 1;
    a3->__r_.__value_.__l.__size_ = v4;
    uint64_t v6 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v6);
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  }
  else
  {
    long long v7 = v10;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v8, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    }
    else {
      std::string v8 = v11;
    }
    a3->__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&a3->__r_.__value_.__r.__words[1] = v7;
    a3[1] = v8;
  }
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v9);
}

void sub_23F501628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(void *a1, void *a2)
{
  unint64_t result = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::find<realityio::BuilderAndIOName>(a1, a2);
  if (result)
  {
    std::string::size_type v4 = result;
    do
      std::string::size_type v4 = (void *)*v4;
    while (v4 && v4[2] == *a2 && (v4[4] & 0xFFFFFFFFFFFFFFF8) == (a2[2] & 0xFFFFFFFFFFFFFFF8));
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::find<realityio::BuilderAndIOName>(void *a1, void *a2)
{
  unint64_t v4 = realityio::BuilderAndIOName::Hash::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t i = *(void **)(*a1 + 8 * v7);
  if (i)
  {
    for (uint64_t i = (void *)*i; i; uint64_t i = (void *)*i)
    {
      unint64_t v9 = i[1];
      if (v4 == v9)
      {
        if (i[2] == *a2 && (i[4] & 0xFFFFFFFFFFFFFFF8) == (a2[2] & 0xFFFFFFFFFFFFFFF8)) {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v5) {
            v9 %= *(void *)&v5;
          }
        }
        else
        {
          v9 &= *(void *)&v5 - 1;
        }
        if (v9 != v7) {
          return 0;
        }
      }
    }
  }
  return i;
}

unint64_t realityio::BuilderAndIOName::Hash::operator()(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2);
  return (bswap64(0x9E3779B97F4A7C55 * (a2[2] & 0xFFFFFFFFFFFFFFF8))
        + 0x77FA823ACE0B5A40 * (v3 ^ (v3 >> 47))
        + ((0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47))) >> 2)
        - 0x61C8864680B583E9) ^ (0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47)));
}

void realityio::Outputs::getRawValue<realityio::WrappedRERef<REEntity *>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint8x8_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    unint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    if (v8) {
      RERetain();
    }
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
    *(void *)&long long v15 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v15);
  }
  std::mutex::unlock(v6);
}

void sub_23F501964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void *realityio::WrappedRERef<REEntity *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>::New()
{
}

void sub_23F501AB0(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40828F5A6DLL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTokensType::~UsdGeomTokensType(pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *this)
{
  v202 = (void **)((char *)this + 1608);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v202);
  uint64_t v2 = *((void *)this + 200);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 199);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 198);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 197);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 196);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 195);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 194);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 193);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 192);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 191);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 190);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 189);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 188);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 187);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 186);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 185);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 184);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 183);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 182);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 181);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 180);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 179);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 178);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 177);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 176);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 175);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 174);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 173);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 172);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 171);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 170);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 169);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *((void *)this + 168);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *((void *)this + 167);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *((void *)this + 166);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *((void *)this + 165);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *((void *)this + 164);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *((void *)this + 163);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *((void *)this + 162);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *((void *)this + 161);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *((void *)this + 160);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *((void *)this + 159);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *((void *)this + 158);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = *((void *)this + 157);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v46 = *((void *)this + 156);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v47 = *((void *)this + 155);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v48 = *((void *)this + 154);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v49 = *((void *)this + 153);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = *((void *)this + 152);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v51 = *((void *)this + 151);
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v52 = *((void *)this + 150);
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v53 = *((void *)this + 149);
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v54 = *((void *)this + 148);
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = *((void *)this + 147);
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v56 = *((void *)this + 146);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v57 = *((void *)this + 145);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v58 = *((void *)this + 144);
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v59 = *((void *)this + 143);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = *((void *)this + 142);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v61 = *((void *)this + 141);
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v62 = *((void *)this + 140);
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v63 = *((void *)this + 139);
  if ((v63 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v64 = *((void *)this + 138);
  if ((v64 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v65 = *((void *)this + 137);
  if ((v65 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v66 = *((void *)this + 136);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v67 = *((void *)this + 135);
  if ((v67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v68 = *((void *)this + 134);
  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v69 = *((void *)this + 133);
  if ((v69 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v70 = *((void *)this + 132);
  if ((v70 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v71 = *((void *)this + 131);
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v72 = *((void *)this + 130);
  if ((v72 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v73 = *((void *)this + 129);
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v74 = *((void *)this + 128);
  if ((v74 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v75 = *((void *)this + 127);
  if ((v75 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v76 = *((void *)this + 126);
  if ((v76 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v77 = *((void *)this + 125);
  if ((v77 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v78 = *((void *)this + 124);
  if ((v78 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v79 = *((void *)this + 123);
  if ((v79 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v80 = *((void *)this + 122);
  if ((v80 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v81 = *((void *)this + 121);
  if ((v81 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v82 = *((void *)this + 120);
  if ((v82 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v83 = *((void *)this + 119);
  if ((v83 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v84 = *((void *)this + 118);
  if ((v84 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v85 = *((void *)this + 117);
  if ((v85 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v86 = *((void *)this + 116);
  if ((v86 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v87 = *((void *)this + 115);
  if ((v87 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v88 = *((void *)this + 114);
  if ((v88 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v89 = *((void *)this + 113);
  if ((v89 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v90 = *((void *)this + 112);
  if ((v90 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v91 = *((void *)this + 111);
  if ((v91 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v92 = *((void *)this + 110);
  if ((v92 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v93 = *((void *)this + 109);
  if ((v93 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v94 = *((void *)this + 108);
  if ((v94 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v95 = *((void *)this + 107);
  if ((v95 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v96 = *((void *)this + 106);
  if ((v96 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v97 = *((void *)this + 105);
  if ((v97 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v98 = *((void *)this + 104);
  if ((v98 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v99 = *((void *)this + 103);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v100 = *((void *)this + 102);
  if ((v100 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v101 = *((void *)this + 101);
  if ((v101 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v102 = *((void *)this + 100);
  if ((v102 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v103 = *((void *)this + 99);
  if ((v103 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v104 = *((void *)this + 98);
  if ((v104 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v104 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v105 = *((void *)this + 97);
  if ((v105 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v106 = *((void *)this + 96);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v107 = *((void *)this + 95);
  if ((v107 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v108 = *((void *)this + 94);
  if ((v108 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v109 = *((void *)this + 93);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v110 = *((void *)this + 92);
  if ((v110 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v111 = *((void *)this + 91);
  if ((v111 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v112 = *((void *)this + 90);
  if ((v112 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v112 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v113 = *((void *)this + 89);
  if ((v113 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v114 = *((void *)this + 88);
  if ((v114 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v114 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v115 = *((void *)this + 87);
  if ((v115 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v116 = *((void *)this + 86);
  if ((v116 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v116 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v117 = *((void *)this + 85);
  if ((v117 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v118 = *((void *)this + 84);
  if ((v118 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v118 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v119 = *((void *)this + 83);
  if ((v119 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v120 = *((void *)this + 82);
  if ((v120 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v121 = *((void *)this + 81);
  if ((v121 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v121 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v122 = *((void *)this + 80);
  if ((v122 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v122 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v123 = *((void *)this + 79);
  if ((v123 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v124 = *((void *)this + 78);
  if ((v124 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v124 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v125 = *((void *)this + 77);
  if ((v125 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v125 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v126 = *((void *)this + 76);
  if ((v126 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v126 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v127 = *((void *)this + 75);
  if ((v127 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v127 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v128 = *((void *)this + 74);
  if ((v128 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v128 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v129 = *((void *)this + 73);
  if ((v129 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v129 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v130 = *((void *)this + 72);
  if ((v130 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v130 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v131 = *((void *)this + 71);
  if ((v131 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v132 = *((void *)this + 70);
  if ((v132 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v133 = *((void *)this + 69);
  if ((v133 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v133 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v134 = *((void *)this + 68);
  if ((v134 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v134 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v135 = *((void *)this + 67);
  if ((v135 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v135 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v136 = *((void *)this + 66);
  if ((v136 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v136 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v137 = *((void *)this + 65);
  if ((v137 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v137 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v138 = *((void *)this + 64);
  if ((v138 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v139 = *((void *)this + 63);
  if ((v139 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v140 = *((void *)this + 62);
  if ((v140 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v141 = *((void *)this + 61);
  if ((v141 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v142 = *((void *)this + 60);
  if ((v142 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v143 = *((void *)this + 59);
  if ((v143 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v144 = *((void *)this + 58);
  if ((v144 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v145 = *((void *)this + 57);
  if ((v145 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v145 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v146 = *((void *)this + 56);
  if ((v146 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v147 = *((void *)this + 55);
  if ((v147 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v148 = *((void *)this + 54);
  if ((v148 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v149 = *((void *)this + 53);
  if ((v149 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v150 = *((void *)this + 52);
  if ((v150 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v151 = *((void *)this + 51);
  if ((v151 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v152 = *((void *)this + 50);
  if ((v152 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v153 = *((void *)this + 49);
  if ((v153 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v154 = *((void *)this + 48);
  if ((v154 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v155 = *((void *)this + 47);
  if ((v155 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v156 = *((void *)this + 46);
  if ((v156 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v157 = *((void *)this + 45);
  if ((v157 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v158 = *((void *)this + 44);
  if ((v158 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v158 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v159 = *((void *)this + 43);
  if ((v159 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v159 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v160 = *((void *)this + 42);
  if ((v160 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v161 = *((void *)this + 41);
  if ((v161 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v161 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v162 = *((void *)this + 40);
  if ((v162 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v163 = *((void *)this + 39);
  if ((v163 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v163 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v164 = *((void *)this + 38);
  if ((v164 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v165 = *((void *)this + 37);
  if ((v165 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v165 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v166 = *((void *)this + 36);
  if ((v166 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v166 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v167 = *((void *)this + 35);
  if ((v167 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v168 = *((void *)this + 34);
  if ((v168 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v168 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v169 = *((void *)this + 33);
  if ((v169 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v169 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v170 = *((void *)this + 32);
  if ((v170 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v171 = *((void *)this + 31);
  if ((v171 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v171 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v172 = *((void *)this + 30);
  if ((v172 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v172 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v173 = *((void *)this + 29);
  if ((v173 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v173 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v174 = *((void *)this + 28);
  if ((v174 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v175 = *((void *)this + 27);
  if ((v175 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v175 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v176 = *((void *)this + 26);
  if ((v176 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v177 = *((void *)this + 25);
  if ((v177 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v178 = *((void *)this + 24);
  if ((v178 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v178 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v179 = *((void *)this + 23);
  if ((v179 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v180 = *((void *)this + 22);
  if ((v180 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v181 = *((void *)this + 21);
  if ((v181 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v181 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v182 = *((void *)this + 20);
  if ((v182 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v183 = *((void *)this + 19);
  if ((v183 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v183 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v184 = *((void *)this + 18);
  if ((v184 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v185 = *((void *)this + 17);
  if ((v185 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v186 = *((void *)this + 16);
  if ((v186 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v187 = *((void *)this + 15);
  if ((v187 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v188 = *((void *)this + 14);
  if ((v188 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v188 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v189 = *((void *)this + 13);
  if ((v189 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v190 = *((void *)this + 12);
  if ((v190 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v190 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v191 = *((void *)this + 11);
  if ((v191 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v191 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v192 = *((void *)this + 10);
  if ((v192 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v193 = *((void *)this + 9);
  if ((v193 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v193 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v194 = *((void *)this + 8);
  if ((v194 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v194 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v195 = *((void *)this + 7);
  if ((v195 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v195 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v196 = *((void *)this + 6);
  if ((v196 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v196 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v197 = *((void *)this + 5);
  if ((v197 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v197 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v198 = *((void *)this + 4);
  if ((v198 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v199 = *((void *)this + 3);
  if ((v199 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v199 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v200 = *((void *)this + 2);
  if ((v200 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v201 = *((void *)this + 1);
  if ((v201 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v201 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F3303A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3303A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  v10[4] = *MEMORY[0x263EF8340];
  RETransformComponentGetComponentType();
  uint64_t v2 = *(void *)(a1 + 16);
  v10[0] = &unk_26F330410;
  v10[1] = v2;
  v10[3] = v10;
  uint64_t v3 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v10, v3);
  RENetworkMarkComponentDirty();
  uint64_t v4 = (realityio *)std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v10);
  uint64_t v5 = *(NSObject **)(realityio::logObjects(v4) + 24);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    unint64_t v6 = **(void **)(a1 + 24) & 0xFFFFFFFFFFFFFFF8;
    if (v6)
    {
      uint64_t v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
    }
    else
    {
      uint64_t v7 = "";
    }
    int v8 = 136315138;
    uint64_t v9 = v7;
    _os_log_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_INFO, "Updating root entity orientation based on upAxis: %s", (uint8_t *)&v8, 0xCu);
  }
}

void sub_23F502FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::function<void ()(REComponent *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void _ZNSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F330410;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F330410;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return RETransformComponentSetLocalOrientation();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio18StageUpAxisBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio18StageUpAxisBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void *std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t realityio::SpatialAudioComponentBuilder::kOutputName(realityio::SpatialAudioComponentBuilder *this)
{
  {
    operator new();
  }
  return realityio::SpatialAudioComponentBuilder::kOutputName(void)::kOutputName;
}

void sub_23F503264(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::SpatialAudioComponentBuilder *realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(realityio::SpatialAudioComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__src, "SpatialAudioComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSpatialAudioComponentBuilderIdentifier);
  realityio::generateSpatialAudioDirtyStageSubscription(&v5);
  v10[0] = &unk_26F3305C0;
  v10[3] = v10;
  v9[0] = &unk_26F3306D0;
  v9[3] = v9;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)__src, (uint64_t)__p, &v5, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(ComponentType) < 0) {
    operator delete(__src[0]);
  }
  *(void *)this = &unk_26F3304C8;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  __src[0] = (void *)REAudioPlayerComponentGetComponentType();
  __src[1] = (void *)REAudioAnimationComponentGetComponentType();
  uint64_t ComponentType = REAnimationComponentGetComponentType();
  std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>((char *)this + 288, (char *)__src, (uint64_t)&v13, 3uLL);
  return this;
}

void sub_23F503420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a18);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a22);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::SpatialAudioComponentBuilder::run(realityio::SpatialAudioComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v3 = realityio::EntityBuilder::kInputName(this);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v3, (uint64_t)v29);
  if (v29[0])
  {
    uint64_t v28 = v30;
    if (v30)
    {
      RERetain();
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v24, v4, (realityio::Inputs *)((char *)a2 + 32));
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v5);
      if (v6 != 0.0)
      {
        pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v5);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
        unint64_t v7 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
        if (!v7) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 128), (uint64_t)buf);
        if (!buf[0] && v39 < 0) {
          operator delete((void *)v38);
        }
        unint64_t v14 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
        if (!v14) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 8), (uint64_t)buf);
        if (!buf[0] && v39 < 0) {
          operator delete((void *)v38);
        }
        realityio::SpatialAudioFileAssetBuilder::kOutputName(v15);
        BOOL hasValueForKey = realityio::Inputs::hasValueForKey((uint64_t)a2);
        if (hasValueForKey)
        {
          uint64_t v17 = realityio::SpatialAudioFileAssetBuilder::kOutputName((realityio::SpatialAudioFileAssetBuilder *)hasValueForKey);
          realityio::Inputs::_getValue<REAsset *>((uint64_t)a2, v17, (uint64_t)buf);
          if (buf[0])
          {
            uint64_t v23 = *(void *)&v36[4];
            if (*(void *)&v36[4])
            {
              realityio::Inputs::prim(a2, &v31);
              unint64_t v19 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
              if (v19)
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v22, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v31, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v19 + 104));
                if ((v34 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
                if (v32) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
                }
                pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
              }
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
          }
          else
          {
            uint64_t v23 = 0;
          }
          uint64_t v21 = *(NSObject **)(realityio::logObjects(v18) + 24);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v31) = 0;
            _os_log_error_impl(&dword_23F4EA000, v21, OS_LOG_TYPE_ERROR, "Stopping operation to set spatial audio component because audio file asset does not exist", (uint8_t *)&v31, 2u);
          }
          if (!buf[0] && v39 < 0) {
            operator delete((void *)v38);
          }
        }
        else
        {
          uint64_t v20 = *(NSObject **)(realityio::logObjects((realityio *)hasValueForKey) + 24);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_23F4EA000, v20, OS_LOG_TYPE_ERROR, "Stopping operation to set spatial audio component because audio file asset does not exist", buf, 2u);
          }
        }
      }
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
      if (v25) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  char v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)buf, v8, (realityio::Inputs *)((char *)a2 + 32));
  PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)buf);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  uint64_t v10 = *(realityio **)&v36[4];
  if (*(void *)&v36[4]) {
    uint64_t v10 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v36[4]);
  }
  uint64_t v11 = *(id *)(realityio::logObjects(v10) + 24);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v36 = Text;
    _os_log_error_impl(&dword_23F4EA000, v11, OS_LOG_TYPE_ERROR, "Unable to create audio entity at path (%s) because the parent entity does not exist.\n", buf, 0xCu);
  }

LABEL_15:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v28);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v29);
}

void sub_23F503D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,__int16 a35,char a36,char a37)
{
}

BOOL realityio::Inputs::hasValueForKey(uint64_t a1)
{
  MEMORY[0x2455CF830](&v8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v2);
    if (v10) {
      uint64_t v9 = *(void *)(a1 + 16);
    }
  }
  unint64_t v11 = v8;
  if ((v8 & 7) != 0)
  {
    unint64_t v3 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v11 = v3;
    }
  }
  uint64_t v4 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a1 + 8), &v9);
  double v6 = v5;
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v4 != v6;
}

void sub_23F503FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void realityio::getAttributeValue<double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        uint64_t v6 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(unsigned char *)a3 = 1;
        *(void *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C240], v11))
      {
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          uint64_t v14 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>(v13);
          *(unsigned char *)a3 = 1;
          *(void *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      uint64_t v22 = __p[0];
    }
    else
    {
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      uint64_t v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v26;
      }
      else {
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      unint64_t v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      uint64_t v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F504428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t createSampledAttributeAnimationTimelineAsset(uint64_t a1, void *a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  uint64_t v8 = a1;
  if (a2[1] == *a2)
  {
    uint64_t AudioAnimation = RETimelineDefinitionCreateAudioAnimation();
  }
  else
  {
    uint64_t AudioAnimation = RETimelineDefinitionCreateSampledFloatAnimation();
    RETimelineDefinitionSetFloatValues();
    RETimelineDefinitionSetFrameInterval();
  }
  RETimelineDefinitionSetFillMode();
  RETimelineDefinitionSetStartTime();
  RETimelineDefinitionSetEndTime();
  RETimelineDefinitionSetTargetPath();
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26F330540;
  v4[1] = &v8;
  v4[2] = &v7;
  v4[3] = &AudioAnimation;
  v9[3] = v4;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v9);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v9);
  RERelease();
  return v7;
}

void sub_23F50462C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t realityio::SpatialAudioComponentBuilder::deleteAnimationData(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 280);
  if (v1)
  {
    uint64_t v2 = this;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1 + 2);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1 + 1);
    uint64_t v3 = realityio::WrappedRERef<REEntity *>::~WrappedRERef(v1);
    this = MEMORY[0x2455D2BD0](v3, 0x1020C403044AE7CLL);
    *(void *)(v2 + 280) = 0;
  }
  return this;
}

void realityio::Outputs::storeValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *&>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F330750;
  uint64_t v8 = *a3;
  void v7[3] = &unk_26F3307A0;
  v7[4] = v8;
  unint64_t v11 = a2;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  uint64_t v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F504794(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *realityio::SpatialAudioComponentBuilder::clear(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v4 = a2;
  v5[0] = &unk_26F330950;
  v5[1] = &v4;
  v5[2] = a1;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F504870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::SpatialAudioComponentBuilder::~SpatialAudioComponentBuilder(realityio::SpatialAudioComponentBuilder *this)
{
  realityio::SpatialAudioComponentBuilder::~SpatialAudioComponentBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26F3304C8;
  realityio::SpatialAudioComponentBuilder::deleteAnimationData((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

void std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F330540;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F330540;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t result = RETimelineDefinitionCreateTimelineAsset();
  **(void **)(a1 + 16) = result;
  return result;
}

uint64_t std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT::SpatialAudioComponentDataT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  *(void *)a1 = a2;
  if (a2) {
    RERetain();
  }
  *(void *)(a1 + 8) = a3;
  if (a3) {
    RERetain();
  }
  *(void *)(a1 + 16) = a4;
  if (a4) {
    RERetain();
  }
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  return a1;
}

void sub_23F504A90(_Unwind_Exception *a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F3305C0;
  return result;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3305C0;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v12, &v14);
  uint64_t v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  uint64_t v7 = (realityio::SpatialAudioFileAssetBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::SpatialAudioFileAssetBuilder::kOutputName(v7);
  uint64_t v9 = (uint64_t *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, v9, &v11, &v12);
  uint64_t v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F504D74(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::CurrentPrimInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_23F504E80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::CurrentPrimInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F330630;
  std::allocator<realityio::CurrentPrimInputDescriptor>::construct[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_23F504EF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330630;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<realityio::CurrentPrimInputDescriptor>::construct[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F50502C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F330680;
  return a1;
}

void sub_23F5050F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::InputDescriptor::InputDescriptor(uint64_t a1, long long *a2, uint64_t *a3, int a4)
{
  *(void *)a1 = &unk_26F3309E0;
  uint64_t v7 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = *a3;
  *(void *)(a1 + 32) = *a3;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 40) = a4;
  return a1;
}

void realityio::CurrentPrimInputDescriptor::~CurrentPrimInputDescriptor(realityio::CurrentPrimInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

void *realityio::CurrentPrimInputDescriptor::resolvedPrimPaths@<X0>(unsigned int *a1@<X2>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a2, a1, a1);
}

void sub_23F50522C(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void realityio::InputDescriptor::~InputDescriptor(realityio::InputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

{
  uint64_t v1;

  *(void *)this = &unk_26F3309E0;
  uint64_t v1 = *((void *)this + 4);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

double realityio::InputDescriptor::resolvedPrimPaths@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = v5 & (v6 - 1);
    }
    long long v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t v9 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(void *)a2) {
              return v9;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a1, v5, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  uint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    void *v17 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v20[0];
    }
  }
  uint64_t v9 = (void *)v20[0];
  v20[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v20, 0);
  return v9;
}

void sub_23F5055D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::SdfPath const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = operator new(0x18uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *long long v8 = 0;
  v8[1] = a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 4, a3);
  double result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 5, a3 + 1);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26F3306D0;
  return result;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3306D0;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::SpatialAudioComponentBuilder::kOutputName((realityio::SpatialAudioComponentBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 336), &v7, &v8);
  unint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F5057D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

char *std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](v7, v11);
    BOOL v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  float v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  size_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *float v12 = &v9[v17];
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F5059F8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40D3CE914ALL);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<double>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(unsigned char *)a3)
      {
        int v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v14 = *(void *)(a3 + 24);
          uint64_t v13 = a3 + 24;
          uint64_t v12 = v14;
          if (*(char *)(v13 + 23) >= 0) {
            uint64_t v12 = v13;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v12;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v15);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      uint64_t v11 = v21;
      *(void *)(a3 + 24) = *(void *)&buf[16];
      *(void *)(a3 + 32) = v11;
      *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
      LOBYTE(v11) = HIBYTE(v21);
      long long v21 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v11;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    uint64_t v10 = v21;
    *(void *)(a3 + 24) = *(void *)&buf[16];
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
    LOBYTE(v10) = HIBYTE(v21);
    long long v21 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v10;
    if ((v18[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F505C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (!*(unsigned char *)v5 && *(char *)(v5 + 47) < 0) {
    operator delete(*(void **)(v5 + 24));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      int v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<double>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F505E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::Inputs::_getValue<REAsset *>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
  {
    uint64_t v47 = std::__shared_weak_count::lock(v8);
    if (v47) {
      uint64_t v46 = *(void *)(a1 + 16);
    }
  }
  MEMORY[0x2455CF830](&v48, a2);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a1 + 8), &v46);
  if (v9 == v10)
  {
    std::operator+<char>();
    uint64_t v22 = std::string::append(&v43, ") at prim path (");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v25 = *(char *)(String + 23);
    if (v25 >= 0) {
      std::string v26 = (const std::string::value_type *)String;
    }
    else {
      std::string v26 = *(const std::string::value_type **)String;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(String + 8);
    }
    uint64_t v28 = std::string::append(&v44, v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    long long v21 = std::string::append(&v45, ")");
LABEL_22:
    long long v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v51, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
    uint64_t v31 = *(void *)&v51[24];
    *(void *)(a3 + 24) = *(void *)&v51[16];
    *(void *)(a3 + 32) = v31;
    *(void *)(a3 + 39) = *(void *)&v51[31];
    LOBYTE(v31) = v51[39];
    memset(&v51[16], 0, 24);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v31;
    if (v50.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v32 = (std::mutex *)v43.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v32);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  uint64_t v11 = 1;
  char v12 = v9;
  do
  {
    char v12 = (void *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    long long v13 = std::string::append(&v43, ") at prim path (");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      size_t v17 = (const std::string::value_type *)v15;
    }
    else {
      size_t v17 = *(const std::string::value_type **)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(v15 + 8);
    }
    uint64_t v19 = std::string::append(&v44, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    long long v21 = std::string::append(&v45, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  uint64_t v33 = v9[5];
  uint64_t v35 = *(std::mutex **)(v33 + 16);
  uint64_t v34 = *(std::__shared_weak_count **)(v33 + 24);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyuint64_t String = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  }
  realityio::Outputs::getRawValue<REAsset *>(v35, EmptyString, (uint64_t)v51);
  int v38 = v51[0];
  if (v51[0])
  {
    *(void *)&long long v37 = *(void *)&v51[8];
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)&v51[8];
    if ((v51[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)&v51[24], *(std::string::size_type *)&v51[32]);
      if (v51[0]) {
        BOOL v40 = 0;
      }
      else {
        BOOL v40 = v51[47] < 0;
      }
      int v39 = v40;
    }
    else
    {
      int v39 = 0;
      std::string v50 = *(std::string *)&v51[24];
    }
    long long v37 = *(_OWORD *)__p;
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
    uint64_t v35 = (std::mutex *)v50.__r_.__value_.__r.__words[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = v50.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v45.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v50.__r_.__value_.__r.__words[2] + 3);
    char v4 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if (v39)
    {
      long long v41 = *(_OWORD *)__p;
      operator delete(*(void **)&v51[24]);
      long long v37 = v41;
    }
  }
  if (v34)
  {
    long long v42 = v37;
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    long long v37 = v42;
  }
  if (v38)
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v37;
  }
  else
  {
    *(_OWORD *)uint64_t v51 = v37;
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v51[16], (const std::string::value_type *)v35, size);
      *(unsigned char *)a3 = 0;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)&v51[16];
      *(void *)(a3 + 40) = *(void *)&v51[32];
      long long v32 = v35;
      goto LABEL_30;
    }
    *(void *)&v51[16] = v35;
    *(void *)&v51[24] = size;
    *(_DWORD *)&v51[32] = v45.__r_.__value_.__l.__data_;
    *(_DWORD *)&v51[35] = *(_DWORD *)((char *)v45.__r_.__value_.__r.__words + 3);
    v51[39] = v4;
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v51[16];
    *(void *)(a3 + 40) = *(void *)&v51[32];
  }
LABEL_54:
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
}

void sub_23F50629C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33)
{
  operator delete(v33);
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

void realityio::Outputs::getRawValue<REAsset *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F50648C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType>>::_TryToCreateData()
{
}

void sub_23F506538(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4095517265);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::~UsdMediaTokensType(pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *this)
{
  uint64_t v22 = (void **)((char *)this + 168);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v2 = *((void *)this + 20);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 19);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 18);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 17);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 16);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 15);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 14);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 13);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 11);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 10);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 9);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 8);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 7);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 6);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 5);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 4);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 3);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 2);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 1);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 9) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C240]);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<double>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<double>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C240], v1, v2);
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<double>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<double>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::operator=(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    if (a2[1])
    {
      pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v8, (uint64_t)a1);
      uint64_t v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
        (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
      }
      else {
        *a1 = *a2;
      }
      a2[1] = 0;
      if (v9) {
        (*(void (**)(unsigned char *))(v9 + 32))(v8);
      }
    }
    else
    {
      uint64_t v5 = a1[1];
      if (v5) {
        BOOL v6 = (a1[1] & 3) == 3;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        (*(void (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned char v8[8];
  uint64_t v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    if (a2[1])
    {
      pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v8, (uint64_t)a1);
      uint64_t v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
        (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
      }
      else {
        *a1 = *a2;
      }
      if (v9) {
        (*(void (**)(unsigned char *))(v9 + 32))(v8);
      }
    }
    else
    {
      uint64_t v5 = a1[1];
      if (v5) {
        BOOL v6 = (a1[1] & 3) == 3;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        (*(void (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_23F506B6C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    BOOL v4 = (~(_BYTE)v3 & 3) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = v5;
    if (v5) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
    }
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::VtValue(pxrInternal__aapl__pxrReserved__::VtValue *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = 0;
  if (*((void *)a2 + 1))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v6, (uint64_t)this);
    uint64_t v4 = *((void *)a2 + 1);
    *((void *)this + 1) = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
      (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *, pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, this);
    }
    else {
      *(void *)this = *(void *)a2;
    }
    if (v7) {
      (*(void (**)(unsigned char *))(v7 + 32))(v6);
    }
  }
  return this;
}

void sub_23F506CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(char *))(a11 + 32))(&a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    BOOL v3 = (*((void *)this + 1) & 3) == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(this);
  }
  *((void *)this + 1) = 0;
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330750;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F3307D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3307D0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  REAudioAnimationComponentGetComponentType();
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26F330840;
  v4[1] = v2;
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 24);
  v4[4] = v3;
  v10[3] = v4;
  uint64_t v5 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v10, v5);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v10);
  REAudioPlayerComponentGetComponentType();
  uint64_t v6 = *(void *)(a1 + 24);
  v9[0] = &unk_26F3308C0;
  v9[1] = v2;
  v9[2] = v6;
  v9[3] = v9;
  uint64_t v7 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v9, v7);
  RENetworkMarkComponentDirty();
  return std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v9);
}

void sub_23F506FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::~__func()
{
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F330840;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F330840;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REAudioAnimationComponentSetAudioAsset();
  REAudioAnimationComponentSetMediaOffset();
  v4.n128_u32[0] = **(_DWORD **)(a1 + 32);

  return MEMORY[0x270F1C7A8](v3, v4);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target_type()
{
}

uint64_t *realityio::Builder::addComponent(uint64_t *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t Class = REComponentGetClass();
    return std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)v2 + 5, (unint64_t *)&Class, &Class);
  }
  return result;
}

uint64_t *std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::~__func()
{
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F3308C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3308C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  uint64_t v4 = **(void **)(a1 + 16);

  return MEMORY[0x270F1CAB8](v3, v4);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F330950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F330950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = **(void **)(a1 + 8);
  uint64_t v6 = realityio::SpatialAudioComponentBuilder::kOutputName((realityio::SpatialAudioComponentBuilder *)a1);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  unint64_t v7 = *(std::__shared_weak_count **)(v5 + 24);
  if (v7)
  {
    uint64_t v55 = std::__shared_weak_count::lock(v7);
    if (v55) {
      uint64_t v54 = *(void *)(v5 + 16);
    }
  }
  MEMORY[0x2455CF830](&v56, v6);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(v5 + 8), &v54);
  if (v8 == v9)
  {
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v51, ") at prim path (");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32));
    int v24 = *(char *)(String + 23);
    if (v24 >= 0) {
      int v25 = (const std::string::value_type *)String;
    }
    else {
      int v25 = *(const std::string::value_type **)String;
    }
    if (v24 >= 0) {
      std::string::size_type v26 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v26 = *(void *)(String + 8);
    }
    std::string::size_type v27 = std::string::append(&v52, v25, v26);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v53, ")");
    goto LABEL_22;
  }
  uint64_t v10 = 1;
  uint64_t v11 = v8;
  do
  {
    uint64_t v11 = (void *)*v11;
    --v10;
  }
  while (v11 != v9);
  if (v10)
  {
    std::operator+<char>();
    uint64_t v12 = std::string::append(&v51, ") at prim path (");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32));
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      uint64_t v16 = (const std::string::value_type *)v14;
    }
    else {
      uint64_t v16 = *(const std::string::value_type **)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v14 + 8);
    }
    int v18 = std::string::append(&v52, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v53, ") because more than one connected builder produced the same output type");
LABEL_22:
    long long v29 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v29;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v59, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    long long v30 = *(std::mutex **)&v59[16];
    std::string::value_type v2 = v60.__r_.__value_.__s.__data_[15];
    *(void *)&v59[16] = 0;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
    if (v58.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    goto LABEL_30;
  }
  uint64_t v42 = v8[5];
  long long v30 = *(std::mutex **)(v42 + 16);
  std::string v43 = *(std::__shared_weak_count **)(v42 + 24);
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v8[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyuint64_t String = (const void **)((v8[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  }
  realityio::Outputs::getRawValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*>(v30, EmptyString, (uint64_t)v59);
  int v46 = v59[0];
  if (v59[0])
  {
    *(void *)&long long v45 = *(void *)&v59[8];
    long long v50 = v45;
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)&v59[8];
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
      if (v59[0]) {
        BOOL v48 = 0;
      }
      else {
        BOOL v48 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      }
      int v47 = v48;
    }
    else
    {
      int v47 = 0;
      std::string v58 = v60;
    }
    long long v50 = *(_OWORD *)__p;
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
    long long v30 = (std::mutex *)v58.__r_.__value_.__r.__words[0];
    std::string::value_type v2 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    if (v47) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v46)
  {
    int v31 = 0;
  }
  else
  {
    *(_OWORD *)uint64_t v59 = v50;
    if ((v2 & 0x80) == 0)
    {
LABEL_30:
      int v31 = 1;
      goto LABEL_31;
    }
    std::string::__init_copy_ctor_external((std::string *)&v59[16], (const std::string::value_type *)v30, size);
    uint64_t v49 = *(std::mutex **)&v59[16];
    std::string::value_type v2 = v60.__r_.__value_.__s.__data_[15];
    operator delete(v30);
    int v31 = 1;
    long long v30 = v49;
  }
LABEL_31:
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v32 = (realityio::SpatialAudioComponentBuilder *)v55;
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if ((v31 & 1) == 0)
  {
    uint64_t v34 = v4[2];
    uint64_t v33 = (std::__shared_weak_count *)v4[3];
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = (const void **)realityio::SpatialAudioComponentBuilder::kOutputName(v32);
    std::mutex::lock((std::mutex *)(v34 + 64));
    if (v34 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v34 + 40, v35))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v34 + 40), v35); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v34, (unsigned __int8 *)v35);
    }
    std::mutex::unlock((std::mutex *)(v34 + 64));
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  uint64_t v36 = (realityio::EntityBuilder *)realityio::SpatialAudioComponentBuilder::deleteAnimationData((uint64_t)v4);
  uint64_t v37 = **(void **)(a1 + 8);
  uint64_t v38 = realityio::EntityBuilder::kInputName(v36);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v37, v38, (uint64_t)v59);
  if (v59[0])
  {
    __p[0] = *(void **)&v59[8];
    if (*(void *)&v59[8])
    {
      RERetain();
      if (__p[0])
      {
        uint64_t v40 = v4[36];
        uint64_t v39 = v4[37];
        while (v40 != v39)
        {
          REEntityRemoveComponentByClass();
          v40 += 8;
        }
      }
    }
  }
  else
  {
    __p[0] = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v59);
  if (v2 < 0) {
    int v41 = v31;
  }
  else {
    int v41 = 0;
  }
  if (v41 == 1) {
    operator delete(v30);
  }
}

void sub_23F5078DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,char a34)
{
  operator delete(v34);
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::getRawValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    unint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F507B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::asA<RIO_MTLX::Element>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v4, (void *)(a1 + 8));
  if (v4)
  {
    uint64_t v3 = v5;
    *a2 = v4;
    a2[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::PortElement>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::TypedElement>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::ValueElement>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Collection>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Document>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::GeomInfo>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::GeomProp>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::GeomPropDef>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Implementation>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Input>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Look>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::MaterialAssign>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Node>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Output>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::TargetDef>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Token>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::TypeDef>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Unit>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::UnitDef>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::UnitTypeDef>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    uint64_t v4 = v6;
    *a2 = v3;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void *RIO_MTLX::Element::NAME_ATTRIBUTE(RIO_MTLX::Element *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::NAME_ATTRIBUTE(void)::v, "name");
  }
  return RIO_MTLX::Element::NAME_ATTRIBUTE(void)::v;
}

void sub_23F508CA0(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(RIO_MTLX::Element *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(void)::v, "fileprefix");
  }
  return RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(void)::v;
}

void sub_23F508D20(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(RIO_MTLX::Element *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v, "geomprefix");
  }
  return RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v;
}

void sub_23F508DA0(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(RIO_MTLX::Element *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(void)::v, "colorspace");
  }
  return RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(void)::v;
}

void sub_23F508E20(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Element::INHERIT_ATTRIBUTE(RIO_MTLX::Element *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::INHERIT_ATTRIBUTE(void)::v, "inherit");
  }
  return RIO_MTLX::Element::INHERIT_ATTRIBUTE(void)::v;
}

void sub_23F508EA0(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(RIO_MTLX::Element *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(void)::v, "namespace");
  }
  return RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(void)::v;
}

void sub_23F508F20(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Element::DOC_ATTRIBUTE(RIO_MTLX::Element *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::DOC_ATTRIBUTE(void)::v, "doc");
  }
  return RIO_MTLX::Element::DOC_ATTRIBUTE(void)::v;
}

void sub_23F508FA0(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(RIO_MTLX::TypedElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(void)::v, "type");
  }
  return RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(void)::v;
}

void sub_23F509020(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v, "value");
  }
  return RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v;
}

void sub_23F5090A0(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(void)::v, "interfacename");
  }
  return RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(void)::v;
}

void sub_23F509120(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::ValueElement::UNIT_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_1, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_1))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40108, "unit");
    __cxa_guard_release(&_MergedGlobals_1);
  }
  return qword_268C40108;
}

void sub_23F5091A0(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::ValueElement::UNITTYPE_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40068))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40120, "unittype");
    __cxa_guard_release(&qword_268C40068);
  }
  return qword_268C40120;
}

void sub_23F509220(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE(void)::v, "uniform");
  }
  return RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE(void)::v;
}

void sub_23F5092A0(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Element::_creatorMap(RIO_MTLX::Element *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40070, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40070))
  {
    xmmword_268C402E8 = 0u;
    *(_OWORD *)&qword_268C402F8 = 0u;
    dword_268C40308 = 1065353216;
    __cxa_guard_release(&qword_268C40070);
  }
}

void RIO_MTLX::Element::setName(std::string *a1, std::string *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[9].__r_.__value_.__r.__words[2];
  if (!v4)
  {
    int v7 = 0;
    uint64_t v5 = 0;
LABEL_7:
    std::string::size_type size = 0;
    goto LABEL_8;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
  {
    int v7 = 0;
    goto LABEL_7;
  }
  std::string::size_type size = a1[9].__r_.__value_.__l.__size_;
  if (size)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(size + 96), (unsigned __int8 *)a2);
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
  }
LABEL_8:
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &v13);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  *(unsigned char *)(*(void *)(v13 + 272) + 80) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v7)
  {
    unint64_t v9 = (void *)(size + 96);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__erase_unique<std::string>(v9, (unsigned __int8 *)&a1[2]);
    std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v13, &a1->__r_.__value_.__l.__size_);
    std::string::size_type v14 = a2;
    long long v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v14);
    long long v11 = v13;
    long long v13 = 0uLL;
    std::string v12 = (std::__shared_weak_count *)*((void *)v10 + 6);
    *(_OWORD *)(v10 + 40) = v11;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
  }
  std::string::operator=(a1 + 2, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F509454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getDocument(RIO_MTLX::Element *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v4)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 30);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Document>((uint64_t)v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v4)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 30);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Document>((uint64_t)v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F509504(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getNamePath(RIO_MTLX::Element *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)a2)
  {
    RIO_MTLX::Element::getDocument(this, &__str);
    long long v17 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    int v18 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v17;
    if (v18)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (__str.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = (std::__shared_weak_count *)std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v21, (void *)this + 1);
  uint64_t v7 = v21;
  while (v7)
  {
    if (v7 == *(void *)a2) {
      break;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a3 + 8);
    }
    if (v8)
    {
      unint64_t v9 = (const void **)RIO_MTLX::NAME_PATH_SEPARATOR((RIO_MTLX *)v6);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v7 + 48), v9, (uint64_t)&v19);
      int v10 = *(char *)(a3 + 23);
      if (v10 >= 0) {
        long long v11 = (const std::string::value_type *)a3;
      }
      else {
        long long v11 = *(const std::string::value_type **)a3;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a3 + 8);
      }
      long long v13 = std::string::append(&v19, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
    }
    else if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v7 + 48), *(void *)(v7 + 56));
    }
    else
    {
      std::string __str = *(std::string *)(v7 + 48);
    }
    std::string::operator=((std::string *)a3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v8)
      {
LABEL_22:
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
      }
    }
    else if (v8)
    {
      goto LABEL_22;
    }
    uint64_t v15 = v21;
    uint64_t v6 = *(std::__shared_weak_count **)(v21 + 232);
    if (v6 && (uint64_t v6 = std::__shared_weak_count::lock(v6)) != 0) {
      uint64_t v7 = *(void *)(v15 + 224);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v16 = v22;
    uint64_t v21 = v7;
    long long v22 = v6;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      uint64_t v7 = v21;
    }
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_23F5096CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F5097B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getSelfNonConst(RIO_MTLX::Element *this@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v4, (void *)this + 1);
  uint64_t v3 = v5;
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void **RIO_MTLX::Element::registerChildElement(uint64_t *a1, long long *a2)
{
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, v10);
  uint64_t v4 = (std::__shared_weak_count *)v10[1];
  *(unsigned char *)(*((void *)v10[0] + 34) + 80) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  v10[0] = (long long *)(*(void *)a2 + 48);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 12), (unsigned __int8 *)v10[0], (uint64_t)&std::piecewise_construct, v10);
  uint64_t v7 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 6);
  *((void *)v5 + 5) = v7;
  *((void *)v5 + 6) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](a1 + 17, a2);
}

void **std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F5099C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::unregisterChildElement(RIO_MTLX::Element *a1, uint64_t a2)
{
  RIO_MTLX::Element::getDocument(a1, v11);
  uint64_t v4 = (std::__shared_weak_count *)v11[1];
  *(unsigned char *)(*(void *)(v11[0] + 272) + 80) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__erase_unique<std::string>((void *)a1 + 12, (unsigned __int8 *)(*(void *)a2 + 48));
  uint64_t v6 = *((void *)a1 + 17);
  unint64_t v5 = (long long *)*((void *)a1 + 18);
  if ((long long *)v6 != v5)
  {
    while (*(void *)v6 != *(void *)a2)
    {
      v6 += 16;
      if ((long long *)v6 == v5)
      {
        uint64_t v6 = *((void *)a1 + 18);
        break;
      }
    }
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *>((uint64_t)v11, (long long *)(v6 + 16), v5, v6);
  uint64_t v8 = v7;
  uint64_t v9 = *((void *)a1 + 18);
  if (v9 != v7)
  {
    do
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v9 - 8);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      v9 -= 16;
    }
    while (v9 != v8);
  }
  *((void *)a1 + 18) = v8;
}

uint64_t RIO_MTLX::Element::getChildIndex(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1 + 12, a2);
  if (v3)
  {
    uint64_t shared_weak_owners = v3[1].__shared_weak_owners_;
    uint64_t v3 = (std::__shared_weak_count *)v3[2].__vftable;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t shared_weak_owners = 0;
  }
  uint64_t v6 = (char *)a1[17];
  unint64_t v5 = (char *)a1[18];
  uint64_t v7 = v6;
  if (v6 != v5)
  {
    while (*(void *)v7 != shared_weak_owners)
    {
      v7 += 16;
      if (v7 == v5)
      {
        uint64_t v7 = v5;
        break;
      }
    }
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v7 == v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return ((unint64_t)(v7 - v6) >> 4);
  }
}

void RIO_MTLX::Element::setChildIndex(void *a1, unsigned __int8 *a2, int a3)
{
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1 + 12, a2);
  if (v5)
  {
    uint64_t v7 = *((void *)v5 + 5);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v5 + 6);
    uint64_t v61 = v7;
    uint64_t v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
  }
  uint64_t v10 = (long long *)a1[17];
  uint64_t v8 = (long long *)a1[18];
  uint64_t v9 = a1 + 17;
  uint64_t v11 = (uint64_t)v10;
  if (v10 != v8)
  {
    while (*(void *)v11 != v7)
    {
      v11 += 16;
      if ((long long *)v11 == v8)
      {
        uint64_t v11 = a1[18];
        break;
      }
    }
  }
  if ((long long *)v11 != v8)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *>((uint64_t)&v67, (long long *)(v11 + 16), v8, v11);
    unint64_t v13 = v12;
    for (uint64_t i = (char *)a1[18]; i != v13; i -= 16)
    {
      uint64_t v15 = (std::__shared_weak_count *)*((void *)i - 1);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    std::string v60 = a1;
    unint64_t v18 = a1[19];
    long long v17 = a1 + 19;
    unint64_t v16 = v18;
    *(v17 - 1) = v13;
    uint64_t v19 = *(v17 - 2);
    uint64_t v20 = (char *)(v19 + 16 * a3);
    if ((unint64_t)v13 >= v18)
    {
      unint64_t v24 = ((uint64_t)&v13[-v19] >> 4) + 1;
      if (v24 >> 60) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v16 - v19;
      if (v25 >> 3 > v24) {
        unint64_t v24 = v25 >> 3;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      uint64_t v66 = v17;
      if (v26)
      {
        std::string::size_type v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)v17, v26);
        uint64_t v28 = a3;
        uint64_t v30 = v29;
      }
      else
      {
        std::string::size_type v27 = 0;
        uint64_t v30 = 0;
        uint64_t v28 = a3;
      }
      int v41 = (long long *)&v27[16 * v28];
      uint64_t v63 = v27;
      *(void *)&long long v64 = v41;
      *((void *)&v64 + 1) = v41;
      uint64_t v65 = &v27[16 * v30];
      if (v30 == v28)
      {
        if (a3 < 1)
        {
          if (a3) {
            unint64_t v43 = 2 * v28;
          }
          else {
            unint64_t v43 = 1;
          }
          uint64_t v70 = v17;
          std::string v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)v17, v43);
          uint64_t v46 = v64;
          uint64_t v47 = *((void *)&v64 + 1) - v64;
          if (*((void *)&v64 + 1) == (void)v64)
          {
            int64x2_t v52 = vdupq_n_s64(v64);
            unint64_t v49 = (unint64_t)&v44[16 * (v43 >> 2)];
          }
          else
          {
            uint64_t v48 = v47 >> 4;
            unint64_t v49 = (unint64_t)&v44[16 * (v43 >> 2) + (v47 & 0xFFFFFFFFFFFFFFF0)];
            uint64_t v50 = 16 * v48;
            std::string v51 = &v44[16 * (v43 >> 2)];
            do
            {
              *(_OWORD *)std::string v51 = *(_OWORD *)v46;
              v51 += 16;
              *(void *)uint64_t v46 = 0;
              *(void *)(v46 + 8) = 0;
              v46 += 16;
              v50 -= 16;
            }
            while (v50);
            int64x2_t v52 = (int64x2_t)v64;
          }
          std::string v53 = v65;
          uint64_t v67 = v63;
          uint64_t v63 = v44;
          *(void *)&long long v64 = &v44[16 * (v43 >> 2)];
          int64x2_t v68 = v52;
          *((void *)&v64 + 1) = v49;
          uint64_t v65 = &v44[16 * v45];
          uint64_t v69 = v53;
          std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(&v67);
          int v41 = (long long *)*((void *)&v64 + 1);
        }
        else
        {
          if (v28 >= -1) {
            uint64_t v42 = v28 + 1;
          }
          else {
            uint64_t v42 = v28 + 2;
          }
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *>((uint64_t)&v67, v41, v41, (uint64_t)&v41[-(v42 >> 1)]);
          *(void *)&long long v64 = v64 - 16 * (v42 >> 1);
          *((void *)&v64 + 1) = v41;
          uint64_t v7 = v61;
          uint64_t v6 = v62;
        }
      }
      *(void *)int v41 = v7;
      *((void *)v41 + 1) = v6;
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        int v41 = (long long *)*((void *)&v64 + 1);
      }
      *((void *)&v64 + 1) = v41 + 1;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Element>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>>((uint64_t)v17, (uint64_t)v20, v20, *v9, (void *)*v9, v64, v64);
      *(void *)&long long v64 = v54;
      uint64_t v55 = (char *)v60[18];
      uint64_t v56 = (_OWORD *)*((void *)&v64 + 1);
      uint64_t v71 = *((void *)&v64 + 1);
      uint64_t v72 = (_OWORD *)*((void *)&v64 + 1);
      uint64_t v67 = v17;
      v68.i64[0] = (uint64_t)&v71;
      v68.i64[1] = (uint64_t)&v72;
      if (v55 != v20)
      {
        do
        {
          *v56++ = *(_OWORD *)v20;
          *(void *)uint64_t v20 = 0;
          *((void *)v20 + 1) = 0;
          v20 += 16;
        }
        while (v20 != v55);
        uint64_t v72 = v56;
      }
      LOBYTE(v69) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Element>>,std::shared_ptr<RIO_MTLX::Element>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v67);
      long long v57 = *(_OWORD *)(v60 + 17);
      std::string v58 = v65;
      v60[17] = v64;
      v60[18] = v56;
      long long v64 = v57;
      uint64_t v59 = (char *)v60[19];
      v60[19] = v58;
      uint64_t v65 = v59;
      uint64_t v63 = (void *)v57;
      std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(&v63);
    }
    else if (v20 == v13)
    {
      *(void *)unint64_t v13 = v7;
      *(void *)(v19 + 16 * a3 + 8) = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v60[18] = v13 + 16;
    }
    else
    {
      uint64_t v21 = v20 + 16;
      long long v22 = v13 - 16;
      long long v23 = v13;
      while (v22 < v13)
      {
        *(_OWORD *)long long v23 = *(_OWORD *)v22;
        v23 += 16;
        *(void *)long long v22 = 0;
        *((void *)v22 + 1) = 0;
        v22 += 16;
      }
      v60[18] = v23;
      if (v13 != v21)
      {
        int v31 = (std::__shared_weak_count **)&v10[((uint64_t)&v13[-v11] >> 4) - 1 + ((v11 - (uint64_t)v10) >> 4)] + 1;
        uint64_t v32 = v19 + 16 * a3 - 16;
        uint64_t v33 = 16 * ((v13 - v21) >> 4);
        do
        {
          uint64_t v34 = (void *)(v32 + v33);
          long long v35 = *(_OWORD *)(v32 + v33);
          void *v34 = 0;
          v34[1] = 0;
          uint64_t v36 = *v31;
          *(_OWORD *)(v31 - 1) = v35;
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
          v31 -= 2;
          v33 -= 16;
        }
        while (v33);
      }
      uint64_t v37 = &v61;
      if (v20 <= (char *)&v61)
      {
        uint64_t v37 = &v61 + 2 * (v60[18] > (unint64_t)&v61);
        uint64_t v7 = v61;
      }
      uint64_t v38 = v37[1];
      if (v38) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)uint64_t v20 = v7;
      uint64_t v39 = v19 + 16 * a3;
      uint64_t v40 = *(std::__shared_weak_count **)(v39 + 8);
      *(void *)(v39 + 8) = v38;
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
    }
    uint64_t v6 = v62;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F509F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::removeChild(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1 + 12, a2);
  if (v3)
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)v3 + 6);
    uint64_t v5 = *((void *)v3 + 5);
    uint64_t v6 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*a1 + 48))(a1, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_23F50A044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *RIO_MTLX::Element::setAttribute(uint64_t *a1, long long *a2, const std::string *a3)
{
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, v12);
  uint64_t v6 = (std::__shared_weak_count *)v12[1];
  *(unsigned char *)(*((void *)v12[0] + 34) + 80) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1 + 20, (unsigned __int8 *)a2))
  {
    uint64_t v7 = a1 + 25;
    unint64_t v8 = a1[26];
    if (v8 >= a1[27])
    {
      uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, a2);
      uint64_t v9 = v8 + 24;
    }
    a1[26] = v9;
  }
  v12[0] = a2;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 20), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v12);
  return std::string::operator=((std::string *)(v10 + 40), a3);
}

void RIO_MTLX::Element::removeAttribute(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1 + 20;
  uint64_t v5 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1 + 20, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, v12);
    uint64_t v7 = (std::__shared_weak_count *)v12[1];
    *(unsigned char *)(*(void *)(v12[0] + 272) + 80) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(v4, v6, (uint64_t)v12);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
    uint64_t v8 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(a1[25], a1[26], (unsigned __int8 **)a2);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)v12, (long long *)(v8 + 24), (long long *)a1[26], v8);
    uint64_t v10 = v9;
    uint64_t v11 = a1[26];
    if (v11 != v9)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
    }
    a1[26] = v10;
  }
}

void RIO_MTLX::Element::addChildOfCategory(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string **a4@<X8>)
{
  void (*v33)(long long *__return_ptr, uint64_t *, uint64_t);
  std::string **v34;
  std::string *v35;
  std::string **v36;
  std::string *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;
  long long v47;
  uint64_t v48;

  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8)) {
      goto LABEL_20;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    goto LABEL_20;
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v8 = *(void *)(a2 + 8);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
  if (v46 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if (v8)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v10 = (const void *)a2;
    }
    else {
      uint64_t v10 = *(const void **)a2;
    }
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)v9 + v8) = 49;
  RIO_MTLX::Element::createValidChildName(a1, (uint64_t)__p, (uint64_t)&v47);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v47;
  *(void *)(a3 + 16) = v48;
  HIBYTE(v48) = 0;
  LOBYTE(v47) = 0;
  if (v46 < 0) {
    operator delete(__p[0]);
  }
LABEL_20:
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), (unsigned __int8 *)a3);
  *a4 = 0;
  a4[1] = 0;
  uint64_t v36 = a4;
  RIO_MTLX::Element::_creatorMap((RIO_MTLX::Element *)v11);
  unint64_t v12 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_268C40300, a2);
  unint64_t v13 = *((void *)&xmmword_268C402E8 + 1);
  if (!*((void *)&xmmword_268C402E8 + 1)) {
    goto LABEL_36;
  }
  unint64_t v14 = v12;
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_268C402E8 + 8));
  v15.i16[0] = vaddlv_u8(v15);
  unint64_t v16 = v15.u32[0];
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v17 = v12;
    if (v12 >= *((void *)&xmmword_268C402E8 + 1)) {
      unint64_t v17 = v12 % *((void *)&xmmword_268C402E8 + 1);
    }
  }
  else
  {
    unint64_t v17 = (*((void *)&xmmword_268C402E8 + 1) - 1) & v12;
  }
  unint64_t v18 = *(unsigned __int8 ***)(xmmword_268C402E8 + 8 * v17);
  if (!v18 || (uint64_t v19 = *v18) == 0)
  {
LABEL_36:
    RIO_MTLX::Element::_creatorMap((RIO_MTLX::Element *)v12);
    long long v22 = 0;
    uint64_t v34 = v36;
    goto LABEL_37;
  }
  while (1)
  {
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 == v14) {
      break;
    }
    if (v16 > 1)
    {
      if (v20 >= v13) {
        v20 %= v13;
      }
    }
    else
    {
      v20 &= v13 - 1;
    }
    if (v20 != v17) {
      goto LABEL_36;
    }
LABEL_35:
    uint64_t v19 = *(unsigned __int8 **)v19;
    if (!v19) {
      goto LABEL_36;
    }
  }
  unint64_t v12 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_268C40308, v19 + 16, (unsigned __int8 *)a2);
  if ((v12 & 1) == 0) {
    goto LABEL_35;
  }
  RIO_MTLX::Element::_creatorMap((RIO_MTLX::Element *)v12);
  uint64_t v33 = (void (*)(long long *__return_ptr, uint64_t *, uint64_t))*((void *)v19 + 5);
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v43, (void *)(a1 + 8));
  uint64_t v34 = v36;
  v33(&v47, &v43, a3);
  long long v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  uint64_t v32 = (std::string *)v47;
  uint64_t v47 = 0uLL;
  *(_OWORD *)uint64_t v36 = __PAIR128__((unint64_t)v22, (unint64_t)v32);
  uint64_t v21 = (RIO_MTLX *)v44;
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v32) {
    goto LABEL_66;
  }
LABEL_37:
  long long v23 = RIO_MTLX::EMPTY_STRING(v21);
  RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>(a1, &v47);
  uint64_t v24 = v47;
  if (*((void *)&v47 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
  }
  if (!v24) {
    goto LABEL_61;
  }
  int v25 = *((char *)v23 + 23);
  uint64_t v26 = v23[1];
  if (v25 >= 0) {
    uint64_t v26 = *((unsigned __int8 *)v23 + 23);
  }
  if (!v26) {
    goto LABEL_56;
  }
  uint64_t v27 = *(unsigned __int8 *)(a1 + 47);
  if ((v27 & 0x80u) == 0) {
    uint64_t v28 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v28 = *(void *)(a1 + 32);
  }
  if (v28 != v26) {
    goto LABEL_61;
  }
  uint64_t v29 = (const void **)(a1 + 24);
  if (v25 >= 0) {
    uint64_t v30 = (unsigned __int8 *)v23;
  }
  else {
    uint64_t v30 = (unsigned __int8 *)*v23;
  }
  if ((v27 & 0x80) != 0)
  {
    if (memcmp(*v29, v30, *(void *)(a1 + 32))) {
      goto LABEL_61;
    }
LABEL_56:
    std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v41, (void *)(a1 + 8));
    std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>((uint64_t *)&v47, v41, v42, a3);
    int v31 = (std::__shared_weak_count *)*((void *)&v47 + 1);
    uint64_t v32 = (std::string *)v47;
    void *v34 = (std::string *)v47;
    v34[1] = (std::string *)v31;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    std::string::operator=(v32 + 1, (const std::string *)a2);
    long long v22 = v31;
    if (!v32) {
      goto LABEL_61;
    }
    goto LABEL_66;
  }
  if (!*(unsigned char *)(a1 + 47)) {
    goto LABEL_56;
  }
  while (*(unsigned __int8 *)v29 == *v30)
  {
    uint64_t v29 = (const void **)((char *)v29 + 1);
    ++v30;
    if (!--v27) {
      goto LABEL_56;
    }
  }
LABEL_61:
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v39, (void *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<RIO_MTLX::GenericElement,std::allocator<RIO_MTLX::GenericElement>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>(&v47, v39, v40, a3);
  long long v35 = (std::string *)v47;
  *(_OWORD *)uint64_t v34 = v47;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::string::operator=(v35 + 1, (const std::string *)a2);
  uint64_t v32 = *v34;
  long long v22 = (std::__shared_weak_count *)v34[1];
LABEL_66:
  uint64_t v37 = v32;
  uint64_t v38 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, std::string **))(*(void *)a1 + 40))(a1, &v37);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
}

void sub_23F50A5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(a11 + 8);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

__n128 RIO_MTLX::Element::createValidChildName@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::value_type v7 = __p.__r_.__value_.__s.__data_[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    do
    {
        p_p->__r_.__value_.__s.__data_[0] = 95;
      p_p = (std::string *)((char *)p_p + 1);
      --size;
    }
    while (size);
    std::string::value_type v7 = __p.__r_.__value_.__s.__data_[0];
    char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  *(_OWORD *)uint8x8_t v15 = *(_OWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1);
  *(void *)&v15[14] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(unsigned char *)a2 = v7;
    *(_OWORD *)(a2 + 1) = *(_OWORD *)v15;
    *(void *)(a2 + 15) = *(void *)&v15[14];
    *(unsigned char *)(a2 + 23) = v6;
    if (v10 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)a2 = v7;
    *(_OWORD *)(a2 + 1) = *(_OWORD *)v15;
    *(void *)(a2 + 15) = *(void *)&v15[14];
    *(unsigned char *)(a2 + 23) = v6;
  }
  uint64_t v11 = (void *)(a1 + 96);
  for (uint64_t i = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v11, (unsigned __int8 *)a2);
        i;
        uint64_t i = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v11, (unsigned __int8 *)a2))
  {
    RIO_MTLX::incrementName((std::string *)a2, v15);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)v15;
    *(void *)(a2 + 16) = *(void *)&v15[16];
  }
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  return result;
}

void sub_23F50A81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Node>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>((uint64_t *)&v5, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8), a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::GenericElement>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<RIO_MTLX::GenericElement,std::allocator<RIO_MTLX::GenericElement>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>(&v5, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8), a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void RIO_MTLX::Element::changeChildCategory(void *a1@<X0>, std::string **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int ChildIndex = RIO_MTLX::Element::getChildIndex(a1, (unsigned __int8 *)&(*a2)[2]);
  if (ChildIndex == -1)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    int v9 = ChildIndex;
    RIO_MTLX::Element::removeChild(a1, (unsigned __int8 *)&(*a2)[2]);
    int v10 = *a2;
    if (SHIBYTE((*a2)[2].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v14, v10[2].__r_.__value_.__l.__data_, v10[2].__r_.__value_.__l.__size_);
    }
    else {
      std::string v14 = v10[2];
    }
    RIO_MTLX::Element::addChildOfCategory((uint64_t)a1, a3, (uint64_t)&v14, (std::string **)a4);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    RIO_MTLX::Element::setChildIndex(a1, (unsigned __int8 *)&(*a2)[2], v9);
    uint64_t v11 = *(std::string **)a4;
    unint64_t v12 = a2[1];
    v13[0] = *a2;
    v13[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v12->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::copyContentFrom((uint64_t)v11, v13);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
    }
  }
}

void sub_23F50A9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v16 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::copyContentFrom(uint64_t a1, const std::string **a2)
{
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &v24);
  uint64_t v4 = v25;
  *(unsigned char *)(v24[11].__r_.__value_.__l.__size_ + 80) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::string::operator=((std::string *)(a1 + 72), *a2 + 3);
  long long v5 = *a2;
  char v6 = (const std::string *)a1;
  if (*a2 != (const std::string *)a1)
  {
    *(_DWORD *)(a1 + 192) = v5[8].__r_.__value_.__l.__data_;
    std::string::size_type size = v5[7].__r_.__value_.__l.__size_;
    uint64_t v8 = *(void *)(a1 + 168);
    if (v8)
    {
      for (uint64_t i = 0; i != v8; ++i)
        *(void *)(*(void *)(a1 + 160) + 8 * i) = 0;
      uint64_t v10 = *(void *)(a1 + 176);
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 184) = 0;
      if (v10) {
        BOOL v11 = size == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        unint64_t v12 = (void *)v10;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v10 + 16), (const std::string *)(size + 16));
          std::string::operator=((std::string *)(v10 + 40), (const std::string *)(size + 40));
          unint64_t v12 = *(void **)v10;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1 + 160, v10);
          std::string::size_type size = *(void *)size;
          if (!v12) {
            break;
          }
          uint64_t v10 = (uint64_t)v12;
        }
        while (size);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1 + 160, v12);
    }
    for (; size; std::string::size_type size = *(void *)size)
    {
      unint64_t v13 = (char *)operator new(0x40uLL);
      uint64_t v24 = (std::string *)v13;
      int v25 = (std::__shared_weak_count *)(a1 + 176);
      char v26 = 0;
      *(void *)unint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v13 + 16), (long long *)(size + 16));
      char v26 = 1;
      *((void *)v13 + 1) = std::__string_hash<char>::operator()[abi:ne180100](a1 + 184, (uint64_t)(v13 + 16));
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1 + 160, (uint64_t)v24);
      uint64_t v24 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v24, 0);
    }
    char v6 = (const std::string *)a1;
    if (*a2 != (const std::string *)a1)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 200), (std::string *)(*a2)[8].__r_.__value_.__l.__size_, (long long *)(*a2)[8].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)((*a2)[8].__r_.__value_.__r.__words[2] - (*a2)[8].__r_.__value_.__l.__size_) >> 3));
      char v6 = *a2;
    }
  }
  std::string v14 = (void *)v6[5].__r_.__value_.__r.__words[2];
  std::string::pointer data = v6[6].__r_.__value_.__l.__data_;
  while (v14 != (void *)data)
  {
    uint64_t v17 = *v14;
    uint64_t v16 = (std::__shared_weak_count *)v14[1];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), (unsigned __int8 *)(v17 + 48));
    if (v18)
    {
      uint64_t v19 = *((void *)v18 + 5);
      unint64_t v20 = (std::__shared_weak_count *)*((void *)v18 + 6);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v19) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    if (*(char *)(v17 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(v17 + 48), *(void *)(v17 + 56));
    }
    else {
      std::string v23 = *(std::string *)(v17 + 48);
    }
    RIO_MTLX::Element::addChildOfCategory(a1, v17 + 24, (uint64_t)&v23, &v24);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = v24;
    v22[0] = v17;
    v22[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::copyContentFrom(v21, v22);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
LABEL_40:
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    v14 += 2;
  }
}

void sub_23F50ACC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::traverseInheritance(RIO_MTLX::Element *this@<X0>, uint64_t a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v3, (void *)this + 1);
  RIO_MTLX::InheritanceIterator::InheritanceIterator(a2, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_23F50ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::traverseTree(RIO_MTLX::Element *this@<X0>, uint64_t a2@<X8>)
{
  RIO_MTLX::Element::getSelfNonConst(this, &v5);
  unint64_t v3 = v6;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = v6;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 40) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 40) = 0;
  }
}

void RIO_MTLX::Element::traverseGraph(RIO_MTLX::Element *this@<X0>, uint64_t a2@<X8>)
{
  RIO_MTLX::Element::getSelfNonConst(this, &v3);
  RIO_MTLX::GraphIterator::GraphIterator(a2, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_23F50AE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *RIO_MTLX::Element::getUpstreamEdge@<X0>(RIO_MTLX::Element *this@<X0>, void *a2@<X8>)
{
  double result = RIO_MTLX::NULL_EDGE(this);
  uint64_t v4 = *((void *)result + 1);
  *a2 = *(void *)result;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *((void *)result + 3);
  a2[2] = *((void *)result + 2);
  a2[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)result + 5);
  a2[4] = *((void *)result + 4);
  a2[5] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void RIO_MTLX::Element::clearContent(RIO_MTLX::Element *this)
{
  RIO_MTLX::Element::getDocument(this, v3);
  std::string::value_type v2 = (std::__shared_weak_count *)v3[1];
  *(unsigned char *)(*(void *)(v3[0] + 272) + 80) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 95) < 0)
  {
    **((unsigned char **)this + 9) = 0;
    *((void *)this + 10) = 0;
  }
  else
  {
    *((unsigned char *)this + 72) = 0;
    *((unsigned char *)this + 95) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)this + 160);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 25);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::clear((uint64_t)this + 96);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100]((uint64_t *)this + 17);
}

BOOL RIO_MTLX::Element::validate(uint64_t a1, std::string *a2)
{
  unsigned __int8 v37 = 1;
  char isValidName = RIO_MTLX::isValidName((char *)(a1 + 48));
  std::string::basic_string[abi:ne180100]<0>(__p, "Invalid element name");
  RIO_MTLX::Element::validateRequire(a1, isValidName, &v37, a2, (const void **)__p);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  RIO_MTLX::Element::INHERIT_ATTRIBUTE(v5);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)RIO_MTLX::Element::INHERIT_ATTRIBUTE(void)::v))
  {
    Inherituint64_t String = (std::string *)RIO_MTLX::Element::getInheritString((RIO_MTLX::Element *)a1);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(a1, InheritString, &v43);
    if (v43)
    {
      std::string::value_type v7 = (std::string *)RIO_MTLX::Element::getInheritString((RIO_MTLX::Element *)a1);
      RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(a1, v7, &v40);
      uint64_t v8 = *(unsigned __int8 *)(v40 + 47);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(v40 + 47);
      }
      else {
        uint64_t v9 = *(void *)(v40 + 32);
      }
      uint64_t v10 = *(unsigned __int8 *)(a1 + 47);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a1 + 32);
      }
      if (v9 == v10)
      {
        unint64_t v12 = (const void **)(v40 + 24);
        if (v11 >= 0) {
          unint64_t v13 = (unsigned __int8 *)(a1 + 24);
        }
        else {
          unint64_t v13 = *(unsigned __int8 **)(a1 + 24);
        }
        if ((v8 & 0x80) != 0)
        {
          char v21 = memcmp(*v12, v13, *(void *)(v40 + 32)) == 0;
        }
        else if (*(unsigned char *)(v40 + 47))
        {
          uint64_t v14 = v8 - 1;
          do
          {
            int v16 = *(unsigned __int8 *)v12;
            unint64_t v12 = (const void **)((char *)v12 + 1);
            int v15 = v16;
            int v18 = *v13++;
            int v17 = v18;
            BOOL v20 = v14-- != 0;
            char v21 = v15 == v17;
          }
          while (v15 == v17 && v20);
        }
        else
        {
          char v21 = 1;
        }
      }
      else
      {
        char v21 = 0;
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
    }
    else
    {
      char v21 = 0;
    }
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "Invalid element inheritance");
    RIO_MTLX::Element::validateRequire(a1, v21, &v37, a2, (const void **)v33);
    if (v34 < 0) {
      operator delete(v33[0]);
    }
  }
  long long v22 = *(uint64_t **)(a1 + 136);
  std::string v23 = *(uint64_t **)(a1 + 144);
  for (int i = v37; v22 != v23; v22 += 2)
  {
    uint64_t v25 = *v22;
    char v26 = (std::__shared_weak_count *)v22[1];
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v27 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v25 + 32))(v25, a2);
    if ((_BYTE)i) {
      int i = v27;
    }
    else {
      int i = 0;
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
  }
  RIO_MTLX::Element::traverseInheritance((RIO_MTLX::Element *)a1, (uint64_t)&v43);
  uint64_t v46 = 0;
  uint64_t v40 = v43;
  int v41 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v42, (uint64_t)&v45);
  v42[3] = v46;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v28);
  v38[0] = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v38[1] = *(void *)algn_268C3FE38;
  if (*(void *)algn_268C3FE38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C3FE38 + 8), 1uLL, memory_order_relaxed);
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v39, (uint64_t)&unk_268C3FE40);
  v39[3] = qword_268C3FE58;
  while (v40 != v38[0])
  {
    uint64_t v29 = v41;
    if (v41)
    {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v40);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v38);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v40);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v43);
  std::string::basic_string[abi:ne180100]<0>(&v31, "Cycle in element inheritance chain");
  if (v32 < 0) {
    operator delete(v31);
  }
  return i != 0;
}

void sub_23F50B2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::validateRequire(uint64_t a1, char a2, unsigned char *a3, std::string *a4, const void **a5)
{
  if (a2) {
    return;
  }
  *a3 = 0;
  if (!a4) {
    return;
  }
  if (*((char *)a5 + 23) >= 0) {
    size_t v8 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v8 = (size_t)a5[1];
  }
  uint64_t v9 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v8 + 2);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v9 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v10 = a5;
    }
    else {
      uint64_t v10 = *a5;
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, ": ");
  int v11 = (RIO_MTLX *)std::operator+<char>();
  unint64_t v12 = RIO_MTLX::EMPTY_STRING(v11);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 71);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v14 = *(void *)(a1 + 56);
  }
  uint64_t v15 = *((unsigned __int8 *)v12 + 23);
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = v12[1];
  }
  if (v14 != v15) {
    goto LABEL_29;
  }
  if (v16 >= 0) {
    int v17 = (unsigned __int8 *)v12;
  }
  else {
    int v17 = (unsigned __int8 *)*v12;
  }
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(a1 + 48), v17, *(void *)(a1 + 56)))
    {
LABEL_29:
      std::operator+<char>();
      uint64_t v19 = std::string::append(&v54, "\"");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      int64_t v56 = v19->__r_.__value_.__r.__words[2];
      long long v55 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (v56 >= 0) {
        char v21 = (const std::string::value_type *)&v55;
      }
      else {
        char v21 = (const std::string::value_type *)v55;
      }
      if (v56 >= 0) {
        std::string::size_type v22 = HIBYTE(v56);
      }
      else {
        std::string::size_type v22 = *((void *)&v55 + 1);
      }
      std::string::append(&v47, v21, v22);
      if (SHIBYTE(v56) < 0) {
        operator delete((void *)v55);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 71))
  {
    int v18 = (unsigned __int8 *)(a1 + 48);
    while (*v18 == *v17)
    {
      ++v18;
      ++v17;
      if (!--v13) {
        goto LABEL_39;
      }
    }
    goto LABEL_29;
  }
LABEL_39:
  std::string v23 = *(unsigned __int8 **)(a1 + 200);
  uint64_t v24 = *(unsigned __int8 **)(a1 + 208);
  if (v23 != v24)
  {
    uint64_t v25 = (void *)(a1 + 160);
    do
    {
      std::operator+<char>();
      char v26 = std::string::append(&v52, "=\"");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      uint64_t v28 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v25, v23);
      if (v28) {
        uint64_t v29 = (uint64_t *)(v28 + 40);
      }
      else {
        uint64_t v29 = RIO_MTLX::EMPTY_STRING(0);
      }
      int v30 = *((char *)v29 + 23);
      if (v30 >= 0) {
        int v31 = (const std::string::value_type *)v29;
      }
      else {
        int v31 = (const std::string::value_type *)*v29;
      }
      if (v30 >= 0) {
        std::string::size_type v32 = *((unsigned __int8 *)v29 + 23);
      }
      else {
        std::string::size_type v32 = v29[1];
      }
      uint64_t v33 = std::string::append(&v53, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      long long v35 = std::string::append(&v54, "\"");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      int64_t v56 = v35->__r_.__value_.__r.__words[2];
      long long v55 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (v56 >= 0) {
        unsigned __int8 v37 = (const std::string::value_type *)&v55;
      }
      else {
        unsigned __int8 v37 = (const std::string::value_type *)v55;
      }
      if (v56 >= 0) {
        std::string::size_type v38 = HIBYTE(v56);
      }
      else {
        std::string::size_type v38 = *((void *)&v55 + 1);
      }
      std::string::append(&v47, v37, v38);
      if (SHIBYTE(v56) < 0) {
        operator delete((void *)v55);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      v23 += 24;
    }
    while (v23 != v24);
  }
  std::string::append(&v47, ">");
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v39 = &v47;
  }
  else {
    uint64_t v39 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  int v41 = std::string::append(&v48, (const std::string::value_type *)v39, size);
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  uint64_t v43 = std::string::append(&v49, "\n");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  int64_t v51 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (v51 >= 0) {
    uint64_t v45 = __p;
  }
  else {
    uint64_t v45 = (void **)__p[0];
  }
  if (v51 >= 0) {
    std::string::size_type v46 = HIBYTE(v51);
  }
  else {
    std::string::size_type v46 = (std::string::size_type)__p[1];
  }
  std::string::append(a4, (const std::string::value_type *)v45, v46);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
}

void sub_23F50B768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  if (*(char *)(v45 - 121) < 0) {
    operator delete(*(void **)(v45 - 144));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::createStringResolver()
{
}

void sub_23F50BE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v43 = *(std::__shared_weak_count **)(v41 - 120);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  long long v44 = *(std::__shared_weak_count **)(v40 + 8);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *RIO_MTLX::Element::getActiveGeomPrefix(RIO_MTLX::Element *this)
{
  std::string::value_type v2 = (std::__shared_weak_count *)std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v10, (void *)this + 1);
  unint64_t v3 = v10;
  if (v10)
  {
    GeomPrefix = RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v;
    while (1)
    {
      RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE((RIO_MTLX::Element *)v2);
      uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v3 + 20, (unsigned __int8 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v);
      uint64_t v5 = v10;
      if (v4) {
        break;
      }
      std::string::value_type v2 = (std::__shared_weak_count *)*((void *)v10 + 29);
      if (v2 && (std::string::value_type v2 = std::__shared_weak_count::lock(v2)) != 0) {
        unint64_t v3 = (RIO_MTLX::Element *)*((void *)v5 + 28);
      }
      else {
        unint64_t v3 = 0;
      }
      uint64_t v6 = v11;
      uint64_t v10 = v3;
      int v11 = v2;
      if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        unint64_t v3 = v10;
      }
      if (!v3) {
        goto LABEL_11;
      }
    }
    GeomPrefix = RIO_MTLX::Element::getGeomPrefix(v10);
    int v7 = 0;
  }
  else
  {
LABEL_11:
    int v7 = 1;
  }
  size_t v8 = (RIO_MTLX *)v11;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v7) {
    return RIO_MTLX::EMPTY_STRING(v8);
  }
  return GeomPrefix;
}

void sub_23F50C164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::GeomElement::getActiveGeom(std::string *__return_ptr a1@<X8>, RIO_MTLX::GeomElement *this@<X0>)
{
  uint64_t v4 = (unsigned __int8 *)RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(this);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v4);
  if (v5)
  {
    RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v5);
    RIO_MTLX::Element::createStringResolver();
  }
  uint64_t v6 = RIO_MTLX::EMPTY_STRING(0);
  if (*((char *)v6 + 23) < 0)
  {
    size_t v8 = (const std::string::value_type *)*v6;
    std::string::size_type v9 = v6[1];
    std::string::__init_copy_ctor_external(a1, v8, v9);
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    a1->__r_.__value_.__r.__words[2] = v6[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_23F50C298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::ValueElement::getResolvedValueString(RIO_MTLX::ValueElement *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX::ValueElement *))(*(void *)a1 + 56))(a1);
  BOOL isResolvedType = RIO_MTLX::StringResolver::isResolvedType(v6);
  if (isResolvedType)
  {
    uint64_t v8 = *a2;
    if (!*a2)
    {
      std::string::size_type v9 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)isResolvedType);
      RIO_MTLX::Element::createStringResolver(&v19, a1, v9);
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v11 = v19;
      *(_OWORD *)a2 = v19;
      if (v10)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        uint64_t v8 = *a2;
      }
      else
      {
        uint64_t v8 = v11;
      }
    }
    Valueuint64_t String = RIO_MTLX::ValueElement::getValueString(a1);
    uint64_t v17 = (*(uint64_t (**)(RIO_MTLX::ValueElement *))(*(void *)a1 + 56))(a1);
    int v18 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v8 + 16);
    v18(v8, ValueString, v17);
  }
  else
  {
    unint64_t v12 = RIO_MTLX::ValueElement::getValueString(a1);
    if (*((char *)v12 + 23) < 0)
    {
      uint64_t v14 = (const std::string::value_type *)*v12;
      std::string::size_type v15 = v12[1];
      std::string::__init_copy_ctor_external(a3, v14, v15);
    }
    else
    {
      long long v13 = *(_OWORD *)v12;
      a3->__r_.__value_.__r.__words[2] = v12[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v13;
    }
  }
}

BOOL RIO_MTLX::StringResolver::isResolvedType(RIO_MTLX *a1)
{
  uint64_t v1 = a1;
  std::string::value_type v2 = (RIO_MTLX *)RIO_MTLX::FILENAME_TYPE_STRING(a1);
  uint64_t v3 = *((unsigned __int8 *)v1 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = *((unsigned __int8 *)v1 + 23);
  }
  else {
    uint64_t v4 = *((void *)v1 + 1);
  }
  uint64_t v5 = *((unsigned __int8 *)v2 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)v2 + 1);
  }
  if (v4 == v5)
  {
    if (v6 >= 0) {
      long long v7 = (unsigned __int8 *)v2;
    }
    else {
      long long v7 = *(unsigned __int8 **)v2;
    }
    if ((v3 & 0x80) != 0)
    {
      std::string::value_type v2 = (RIO_MTLX *)memcmp(*(const void **)v1, v7, *((void *)v1 + 1));
      if (!v2) {
        return 1;
      }
    }
    else
    {
      if (!*((unsigned char *)v1 + 23)) {
        return 1;
      }
      for (int i = v1; *(unsigned __int8 *)i == *v7; int i = (RIO_MTLX *)((char *)i + 1))
      {
        ++v7;
        if (!--v3) {
          return 1;
        }
      }
    }
  }
  std::string::size_type v9 = (unsigned __int8 *)RIO_MTLX::GEOMNAME_TYPE_STRING(v2);
  uint64_t v10 = *((unsigned __int8 *)v1 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *((unsigned __int8 *)v1 + 23);
  }
  else {
    uint64_t v11 = *((void *)v1 + 1);
  }
  uint64_t v12 = v9[23];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)v9 + 1);
  }
  if (v11 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = *(unsigned __int8 **)v9;
  }
  if ((v10 & 0x80) != 0) {
    return memcmp(*(const void **)v1, v14, *((void *)v1 + 1)) == 0;
  }
  if (!*((unsigned char *)v1 + 23)) {
    return 1;
  }
  uint64_t v15 = v10 - 1;
  do
  {
    int v17 = *(unsigned __int8 *)v1;
    uint64_t v1 = (RIO_MTLX *)((char *)v1 + 1);
    int v16 = v17;
    int v19 = *v14++;
    int v18 = v19;
    BOOL v21 = v15-- != 0;
    BOOL result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

uint64_t *RIO_MTLX::ValueElement::getValueString(RIO_MTLX::ValueElement *this)
{
  RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(this);
  std::string::value_type v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v);
  if (v2) {
    return (uint64_t *)(v2 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::ValueElement::getValue(RIO_MTLX::ValueElement *this@<X0>, uint64_t a2@<X8>)
{
  RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(this);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v))
  {
    Valueuint64_t String = RIO_MTLX::ValueElement::getValueString(this);
    uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::ValueElement *))(*(void *)this + 56))(this);
    RIO_MTLX::Value::createValueFromStrings((RIO_MTLX::Value *)ValueString, v5, (_OWORD *)a2);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
}

BOOL RIO_MTLX::ValueElement::validate(uint64_t a1, std::string *a2)
{
  v88[0] = 1;
  RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)a1);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(void)::v);
  if (v4)
  {
    RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v4);
    uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v);
    if (v4)
    {
      RIO_MTLX::ValueElement::getValue((RIO_MTLX::ValueElement *)a1, (uint64_t)&lpsrc);
      uint64_t v5 = lpsrc;
      std::string::basic_string[abi:ne180100]<0>(v86, "Invalid value");
      RIO_MTLX::Element::validateRequire(a1, v5 != 0, v88, a2, v86);
      if (v87 < 0) {
        operator delete((void *)v86[0]);
      }
      uint64_t v4 = (unsigned __int8 *)v69;
      if (v69) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v69);
      }
    }
  }
  RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE((RIO_MTLX::ValueElement *)v4);
  int v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(void)::v);
  if (v6)
  {
    long long v7 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v6);
    BOOL v8 = RIO_MTLX::Element::isA<RIO_MTLX::Input>(a1, (unsigned __int8 *)v7);
    if (v8)
    {
LABEL_9:
      char v9 = 1;
      goto LABEL_38;
    }
    uint64_t v10 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v8);
    std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
    if (lpsrc)
    {
      if (v11)
      {
        uint64_t v12 = v69;
        if (v69) {
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = 0;
LABEL_16:
    if (v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v11)
    {
      int v13 = *((char *)v10 + 23);
      uint64_t v14 = v10[1];
      if (v13 >= 0) {
        uint64_t v14 = *((unsigned __int8 *)v10 + 23);
      }
      if (!v14) {
        goto LABEL_9;
      }
      uint64_t v15 = *(unsigned __int8 *)(a1 + 47);
      uint64_t v16 = (v15 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 47) : *(void *)(a1 + 32);
      if (v16 == v14)
      {
        int v17 = (const void **)(a1 + 24);
        if (v13 >= 0) {
          int v18 = (unsigned __int8 *)v10;
        }
        else {
          int v18 = (unsigned __int8 *)*v10;
        }
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*v17, v18, *(void *)(a1 + 32))) {
            goto LABEL_9;
          }
        }
        else
        {
          if (!*(unsigned char *)(a1 + 47)) {
            goto LABEL_9;
          }
          while (*(unsigned __int8 *)v17 == *v18)
          {
            int v17 = (const void **)((char *)v17 + 1);
            ++v18;
            if (!--v15) {
              goto LABEL_9;
            }
          }
        }
      }
    }
    char v9 = 0;
LABEL_38:
    std::string::basic_string[abi:ne180100]<0>(v84, "Only input and token elements support interface names");
    RIO_MTLX::Element::validateRequire(a1, v9, v88, a2, v84);
    if (v85 < 0) {
      operator delete((void *)v84[0]);
    }
    RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::NodeGraph>(a1, &p_lpsrc);
    if (p_lpsrc)
    {
      RIO_MTLX::NodeGraph::getNodeDef((RIO_MTLX::NodeGraph *)p_lpsrc, &v80);
      int v19 = v80;
      if (v80)
      {
        InterfaceName = RIO_MTLX::ValueElement::getInterfaceName((RIO_MTLX::ValueElement *)a1);
        RIO_MTLX::InterfaceElement::getActiveValueElement(v19, (unsigned __int8 *)InterfaceName, &v78);
        uint64_t v21 = v78;
        std::string::basic_string[abi:ne180100]<0>(__p, "Interface name not found in referenced NodeDef");
        RIO_MTLX::Element::validateRequire(a1, v21 != 0, v88, a2, (const void **)__p);
        if (v77 < 0) {
          operator delete(__p[0]);
        }
        if (!v78) {
          goto LABEL_84;
        }
        std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (void *)(a1 + 8));
        if (lpsrc)
        {
          if (v22)
          {
            std::string v23 = v69;
            if (v69) {
              atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
            }
LABEL_52:
            uint64_t v24 = (RIO_MTLX::PortElement *)v69;
            if (v69) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v69);
            }
            if (v22
              && (uint64_t v25 = (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(v24),
                  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v22 + 20, v25)))
            {
              Channels = RIO_MTLX::PortElement::getChannels(v22);
              long long v27 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v78 + 56))(v78);
              uint64_t v28 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
              LOBYTE(Channels) = RIO_MTLX::PortElement::validChannelsString((uint64_t)Channels, v27, v28);
              std::string::basic_string[abi:ne180100]<0>(v74, "Invalid channels string for interface name");
              RIO_MTLX::Element::validateRequire(a1, (char)Channels, v88, a2, v74);
              if ((v75 & 0x80000000) == 0) {
                goto LABEL_82;
              }
              uint64_t v29 = v74;
            }
            else
            {
              int v30 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
              uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 56))(v78);
              uint64_t v32 = v30[23];
              if ((v32 & 0x80u) == 0) {
                uint64_t v33 = v30[23];
              }
              else {
                uint64_t v33 = *((void *)v30 + 1);
              }
              uint64_t v34 = *(unsigned __int8 *)(v31 + 23);
              int v35 = (char)v34;
              if ((v34 & 0x80u) != 0) {
                uint64_t v34 = *(void *)(v31 + 8);
              }
              if (v33 == v34)
              {
                if (v35 >= 0) {
                  long long v36 = (unsigned __int8 *)v31;
                }
                else {
                  long long v36 = *(unsigned __int8 **)v31;
                }
                if ((v32 & 0x80) != 0)
                {
                  char v44 = memcmp(*(const void **)v30, v36, *((void *)v30 + 1)) == 0;
                }
                else if (v30[23])
                {
                  uint64_t v37 = v32 - 1;
                  do
                  {
                    int v39 = *v30++;
                    int v38 = v39;
                    int v41 = *v36++;
                    int v40 = v41;
                    BOOL v43 = v37-- != 0;
                    char v44 = v38 == v40;
                  }
                  while (v38 == v40 && v43);
                }
                else
                {
                  char v44 = 1;
                }
              }
              else
              {
                char v44 = 0;
              }
              std::string::basic_string[abi:ne180100]<0>(v72, "Interface name refers to value element of a different type");
              RIO_MTLX::Element::validateRequire(a1, v44, v88, a2, v72);
              if ((v73 & 0x80000000) == 0) {
                goto LABEL_82;
              }
              uint64_t v29 = v72;
            }
            operator delete((void *)*v29);
LABEL_82:
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
LABEL_84:
            if (v79) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v79);
            }
            goto LABEL_86;
          }
        }
        else
        {
          std::string::size_type v22 = 0;
        }
        std::string v23 = 0;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v80 = 0;
      uint64_t v81 = 0;
    }
LABEL_86:
    if (v81) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v81);
    }
    int v6 = (unsigned __int8 *)v83;
    if (v83) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v83);
    }
  }
  RIO_MTLX::ValueElement::UNITTYPE_ATTRIBUTE((RIO_MTLX::ValueElement *)v6);
  uint64_t v45 = (RIO_MTLX::ValueElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)qword_268C40120);
  if (!v45) {
    goto LABEL_101;
  }
  RIO_MTLX::ValueElement::UNITTYPE_ATTRIBUTE(v45);
  uint64_t v45 = (RIO_MTLX::ValueElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)qword_268C40120);
  if (v45)
  {
    std::string::size_type v46 = (RIO_MTLX::ValueElement *)((char *)v45 + 40);
  }
  else
  {
    uint64_t v45 = (RIO_MTLX::ValueElement *)RIO_MTLX::EMPTY_STRING(0);
    std::string::size_type v46 = v45;
  }
  uint64_t v47 = *((unsigned __int8 *)v46 + 23);
  if ((v47 & 0x80u) != 0) {
    uint64_t v47 = *((void *)v46 + 1);
  }
  if (v47)
  {
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &p_lpsrc);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::UnitTypeDef>((uint64_t)p_lpsrc, (unsigned __int8 *)v46, &lpsrc);
    std::string v49 = (RIO_MTLX::UnitTypeDef *)lpsrc;
    std::string v48 = v69;
    lpsrc = 0;
    uint64_t v69 = 0;
    if (v83) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v83);
    }
    std::string::basic_string[abi:ne180100]<0>(v70, "Unit type definition does not exist in document");
    RIO_MTLX::Element::validateRequire(a1, v49 != 0, v88, a2, (const void **)v70);
    if (v71 < 0) {
      operator delete(v70[0]);
    }
  }
  else
  {
LABEL_101:
    std::string v48 = 0;
    std::string v49 = 0;
  }
  RIO_MTLX::ValueElement::UNIT_ATTRIBUTE(v45);
  uint64_t v50 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)qword_268C40108);
  if (v50)
  {
    if (v49)
    {
      RIO_MTLX::ValueElement::UNIT_ATTRIBUTE((RIO_MTLX::ValueElement *)v50);
      int64_t v51 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)qword_268C40108);
      if (v51) {
        std::string v52 = (uint64_t *)(v51 + 40);
      }
      else {
        std::string v52 = RIO_MTLX::EMPTY_STRING(0);
      }
      RIO_MTLX::UnitTypeDef::getUnitDefs(v49, (unint64_t *)&lpsrc);
      std::string v54 = (std::__shared_weak_count *)lpsrc;
      long long v55 = v69;
      if (lpsrc != v69)
      {
        while (1)
        {
          int64_t v56 = v54->__vftable;
          shared_owners = (std::__shared_weak_count *)v54->__shared_owners_;
          if (shared_owners) {
            atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v58 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v56[2].__on_zero_shared, (unsigned __int8 *)v52);
          uint64_t v59 = v58;
          if (!v58) {
            break;
          }
          uint64_t v60 = *((void *)v58 + 5);
          uint64_t v61 = (std::__shared_weak_count *)*((void *)v59 + 6);
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v60) {
            goto LABEL_125;
          }
          RIO_MTLX::Element::asA<RIO_MTLX::Unit>(v60, &p_lpsrc);
          if (v61) {
            goto LABEL_116;
          }
LABEL_117:
          uint64_t v62 = p_lpsrc;
          char v53 = p_lpsrc != 0;
          if (v83) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v83);
          }
          if (shared_owners) {
            std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
          }
          if (!v62)
          {
            std::string v54 = (std::__shared_weak_count *)((char *)v54 + 16);
            if (v54 != v55) {
              continue;
            }
          }
          goto LABEL_128;
        }
        uint64_t v61 = 0;
LABEL_125:
        p_lpsrc = 0;
        uint64_t v83 = 0;
        if (!v61) {
          goto LABEL_117;
        }
LABEL_116:
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        goto LABEL_117;
      }
      char v53 = 0;
LABEL_128:
      p_lpsrc = &lpsrc;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&p_lpsrc);
    }
    else
    {
      char v53 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "Unit definition does not exist in document");
    RIO_MTLX::Element::validateRequire(a1, v53, v88, a2, (const void **)v66);
    if (v67 < 0) {
      operator delete(v66[0]);
    }
  }
  BOOL v63 = RIO_MTLX::Element::validate(a1, a2);
  int v64 = v88[0];
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  return v64 && v63;
}

void sub_23F50CE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  std::string v48 = *(std::__shared_weak_count **)(v46 - 152);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIO_MTLX::Element::isA<RIO_MTLX::Input>(uint64_t a1, unsigned __int8 *a2)
{
  RIO_MTLX::Element::asA<RIO_MTLX::Input>(a1, &v12);
  uint64_t v4 = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (!v4) {
    return 0;
  }
  int v5 = (char)a2[23];
  uint64_t v6 = *((void *)a2 + 1);
  if (v5 >= 0) {
    uint64_t v6 = a2[23];
  }
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
  uint64_t v8 = (v7 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 47) : *(void *)(a1 + 32);
  if (v8 != v6) {
    return 0;
  }
  char v9 = (const void **)(a1 + 24);
  if (v5 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a2;
  }
  if ((v7 & 0x80) != 0) {
    return !memcmp(*v9, v10, *(void *)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      char v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v7) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

void RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v9, (void *)(a1 + 8));
  uint64_t shared_weak_owners = v9;
  if (v9)
  {
    do
    {
      RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>((uint64_t)shared_weak_owners, a2);
      BOOL v4 = *a2 == 0;
      if (*a2) {
        break;
      }
      int v5 = (std::__shared_weak_count *)a2[1];
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      uint64_t v6 = v9;
      uint64_t shared_weak_owners = (std::__shared_weak_count *)v9[9].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        uint64_t shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
        uint64_t v7 = shared_weak_owners;
        if (shared_weak_owners) {
          uint64_t shared_weak_owners = (std::__shared_weak_count *)v6[9].__shared_owners_;
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v8 = v10;
      char v9 = shared_weak_owners;
      uint64_t v10 = v7;
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        uint64_t shared_weak_owners = v9;
      }
    }
    while (shared_weak_owners);
  }
  else
  {
    BOOL v4 = 1;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v4)
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_23F50D134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *RIO_MTLX::ValueElement::getInterfaceName(RIO_MTLX::ValueElement *this)
{
  RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(this);
  std::string::value_type v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(void)::v);
  if (v2) {
    return (uint64_t *)(v2 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t *RIO_MTLX::PortElement::getChannels(RIO_MTLX::PortElement *this)
{
  std::string::value_type v2 = (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(this);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::StringResolver::resolve(RIO_MTLX *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8 = (RIO_MTLX *)RIO_MTLX::FILENAME_TYPE_STRING(a1);
  uint64_t v9 = a3[23];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a3[23];
  }
  else {
    uint64_t v10 = *((void *)a3 + 1);
  }
  uint64_t v11 = *((unsigned __int8 *)v8 + 23);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v8 + 1);
  }
  if (v10 != v11) {
    goto LABEL_17;
  }
  if (v12 >= 0) {
    int v13 = (unsigned __int8 *)v8;
  }
  else {
    int v13 = *(unsigned __int8 **)v8;
  }
  if ((v9 & 0x80) != 0)
  {
    uint64_t v8 = (RIO_MTLX *)memcmp(*(const void **)a3, v13, *((void *)a3 + 1));
    if (v8) {
      goto LABEL_17;
    }
LABEL_31:
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v41 = *(std::string *)a2;
    }
    RIO_MTLX::replaceSubstrings(&v41, (uint64_t)a1 + 56, (uint64_t)&v42);
    uint64_t v25 = (const std::string::value_type *)*((void *)a1 + 1);
    uint64_t v24 = (char *)a1 + 8;
    std::string v23 = v25;
    int v26 = v24[23];
    if (v26 >= 0) {
      long long v27 = v24;
    }
    else {
      long long v27 = v23;
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *((unsigned __int8 *)v24 + 23);
    }
    else {
      std::string::size_type v28 = *((void *)v24 + 1);
    }
    uint64_t v29 = std::string::insert(&v42, 0, v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a4->__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    uint64_t v31 = (void *)v41.__r_.__value_.__r.__words[0];
    goto LABEL_63;
  }
  if (!a3[23]) {
    goto LABEL_31;
  }
  uint64_t v14 = a3;
  while (*v14 == *v13)
  {
    ++v14;
    ++v13;
    if (!--v9) {
      goto LABEL_31;
    }
  }
LABEL_17:
  uint64_t v15 = (unsigned __int8 *)RIO_MTLX::GEOMNAME_TYPE_STRING(v8);
  uint64_t v16 = a3[23];
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = a3[23];
  }
  else {
    uint64_t v17 = *((void *)a3 + 1);
  }
  uint64_t v18 = v15[23];
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *((void *)v15 + 1);
  }
  if (v17 == v18)
  {
    if (v19 >= 0) {
      long long v20 = v15;
    }
    else {
      long long v20 = *(unsigned __int8 **)v15;
    }
    if ((v16 & 0x80) == 0)
    {
      if (a3[23])
      {
        while (*a3 == *v20)
        {
          ++a3;
          ++v20;
          if (!--v16) {
            goto LABEL_36;
          }
        }
        goto LABEL_34;
      }
      goto LABEL_36;
    }
    if (!memcmp(*(const void **)a3, v20, *((void *)a3 + 1)))
    {
LABEL_36:
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      RIO_MTLX::replaceSubstrings(&__p, (uint64_t)a1 + 96, (uint64_t)&v42);
      uint64_t v34 = (const std::string::value_type *)*((void *)a1 + 4);
      uint64_t v33 = (char *)a1 + 32;
      uint64_t v32 = v34;
      int v35 = v33[23];
      if (v35 >= 0) {
        long long v36 = v33;
      }
      else {
        long long v36 = v32;
      }
      if (v35 >= 0) {
        std::string::size_type v37 = *((unsigned __int8 *)v33 + 23);
      }
      else {
        std::string::size_type v37 = *((void *)v33 + 1);
      }
      int v38 = std::string::insert(&v42, 0, v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      uint64_t v31 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_63:
      operator delete(v31);
      return;
    }
  }
LABEL_34:
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v21 = *(const std::string::value_type **)a2;
    std::string::size_type v22 = *(void *)(a2 + 8);
    std::string::__init_copy_ctor_external(a4, v21, v22);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
}

void sub_23F50D4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::targetStringsMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2) {
    return 1;
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4) {
    return 1;
  }
  uint64_t v6 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)a1);
  RIO_MTLX::splitString((std::string *)a1, v6, (uint64_t)v32);
  uint64_t v8 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(v7);
  RIO_MTLX::splitString((std::string *)a2, v8, (uint64_t)v31);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v29, v32[0], v32[1]);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v27, (const void **)v31[0], (const void **)v31[1]);
  BOOL v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (uint64_t *)&v25;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = &v25;
  int v12 = (void **)v29;
  if (v29 != v30)
  {
    int v13 = v27;
    if (v27 != v28)
    {
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v33, (const void **)v12 + 4, (const void **)v13 + 4))
        {
          uint64_t v14 = (void **)v12[1];
          if (v14)
          {
            do
            {
              int v12 = v14;
              uint64_t v14 = (void **)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = v12;
              int v12 = (void **)v12[2];
            }
            while (*v12 != v15);
          }
        }
        else
        {
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v33, (const void **)v13 + 4, (const void **)v12 + 4))
          {
            uint64_t v16 = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v24, v11, (const void **)v12 + 4, (uint64_t)(v12 + 4));
            uint64_t v17 = (uint64_t *)v16[1];
            if (v17)
            {
              do
              {
                uint64_t v11 = v17;
                uint64_t v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                uint64_t v11 = (uint64_t *)v16[2];
                BOOL v18 = *v11 == (void)v16;
                uint64_t v16 = v11;
              }
              while (!v18);
            }
            int v19 = (void **)v12[1];
            if (v19)
            {
              do
              {
                int v12 = v19;
                int v19 = (void **)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                long long v20 = v12;
                int v12 = (void **)v12[2];
              }
              while (*v12 != v20);
            }
          }
          uint64_t v21 = v13[1];
          if (v21)
          {
            do
            {
              int v13 = (char **)v21;
              uint64_t v21 = *(char **)v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              std::string::size_type v22 = (char *)v13;
              int v13 = (char **)v13[2];
            }
            while (*v13 != v22);
          }
        }
      }
      while (v12 != (void **)v30 && v13 != v28);
      uint64_t v10 = v25;
      BOOL v9 = v26 != 0;
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v24, v10);
  std::__tree<std::string>::destroy((uint64_t)&v27, v28[0]);
  std::__tree<std::string>::destroy((uint64_t)&v29, v30[0]);
  uint64_t v29 = (char **)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v31[0] = (void **)v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v31);
  return v9;
}

void sub_23F50D754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void ***a15, char *a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a18 = (void **)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void RIO_MTLX::AttributeDef::CATEGORY(RIO_MTLX::AttributeDef *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40078, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40078))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40138, "attributedef");
    __cxa_guard_release(&qword_268C40078);
  }
}

void sub_23F50D830(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryAttributeDef(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::AttributeDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryAttributeDef(void)::v);
  }
  return &RIO_MTLX::registryAttributeDef(void)::v;
}

void sub_23F50D8A8(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Backdrop::CATEGORY(RIO_MTLX::Backdrop *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Backdrop::CATEGORY(void)::v, "backdrop");
  }
  return RIO_MTLX::Backdrop::CATEGORY(void)::v;
}

void sub_23F50D928(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryBackdrop(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Backdrop>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryBackdrop(void)::v);
  }
  return &RIO_MTLX::registryBackdrop(void)::v;
}

void sub_23F50D9A0(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Collection::CATEGORY(RIO_MTLX::Collection *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40080))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40150, "collection");
    __cxa_guard_release(&qword_268C40080);
  }
}

void sub_23F50DA2C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryCollection(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Collection>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryCollection(void)::v);
  }
  return &RIO_MTLX::registryCollection(void)::v;
}

void sub_23F50DAA4(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::CommentElement::CATEGORY(RIO_MTLX::CommentElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::CommentElement::CATEGORY(void)::v, "comment");
  }
  return RIO_MTLX::CommentElement::CATEGORY(void)::v;
}

void sub_23F50DB24(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryCommentElement(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::CommentElement>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryCommentElement(void)::v);
  }
  return &RIO_MTLX::registryCommentElement(void)::v;
}

void sub_23F50DB9C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Document::CATEGORY(RIO_MTLX::Document *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Document::CATEGORY(void)::v, "materialx");
  }
  return RIO_MTLX::Document::CATEGORY(void)::v;
}

void sub_23F50DC1C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryDocument(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Document>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryDocument(void)::v);
  }
  return &RIO_MTLX::registryDocument(void)::v;
}

void sub_23F50DC94(_Unwind_Exception *a1)
{
}

void RIO_MTLX::GenericElement::CATEGORY(RIO_MTLX::GenericElement *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40088, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40088))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40168, "generic");
    __cxa_guard_release(&qword_268C40088);
  }
}

void sub_23F50DD20(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryGenericElement(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::GenericElement>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryGenericElement(void)::v);
  }
  return &RIO_MTLX::registryGenericElement(void)::v;
}

void sub_23F50DD98(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::GeomInfo::CATEGORY(RIO_MTLX::GeomInfo *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GeomInfo::CATEGORY(void)::v, "geominfo");
  }
  return RIO_MTLX::GeomInfo::CATEGORY(void)::v;
}

void sub_23F50DE18(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryGeomInfo(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::GeomInfo>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryGeomInfo(void)::v);
  }
  return &RIO_MTLX::registryGeomInfo(void)::v;
}

void sub_23F50DE90(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::GeomProp::CATEGORY(RIO_MTLX::GeomProp *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GeomProp::CATEGORY(void)::v, "geomprop");
  }
  return RIO_MTLX::GeomProp::CATEGORY(void)::v;
}

void sub_23F50DF10(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryGeomProp(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::GeomProp>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryGeomProp(void)::v);
  }
  return &RIO_MTLX::registryGeomProp(void)::v;
}

void sub_23F50DF88(_Unwind_Exception *a1)
{
}

void RIO_MTLX::GeomPropDef::CATEGORY(RIO_MTLX::GeomPropDef *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40090, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40090))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40180, "geompropdef");
    __cxa_guard_release(&qword_268C40090);
  }
}

void sub_23F50E014(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryGeomPropDef(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::GeomPropDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryGeomPropDef(void)::v);
  }
  return &RIO_MTLX::registryGeomPropDef(void)::v;
}

void sub_23F50E08C(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Implementation::CATEGORY(RIO_MTLX::Implementation *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40098, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40098))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40198, "implementation");
    __cxa_guard_release(&qword_268C40098);
  }
}

void sub_23F50E118(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryImplementation(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Implementation>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryImplementation(void)::v);
  }
  return &RIO_MTLX::registryImplementation(void)::v;
}

void sub_23F50E190(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Input::CATEGORY(RIO_MTLX::Input *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Input::CATEGORY(void)::v, "input");
  }
  return RIO_MTLX::Input::CATEGORY(void)::v;
}

void sub_23F50E210(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryInput(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Input>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryInput(void)::v);
  }
  return &RIO_MTLX::registryInput(void)::v;
}

void sub_23F50E288(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Look::CATEGORY(RIO_MTLX::Look *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400A0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C401B0, "look");
    __cxa_guard_release(&qword_268C400A0);
  }
}

void sub_23F50E314(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryLook(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Look>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryLook(void)::v);
  }
  return &RIO_MTLX::registryLook(void)::v;
}

void sub_23F50E38C(_Unwind_Exception *a1)
{
}

void RIO_MTLX::LookGroup::CATEGORY(RIO_MTLX::LookGroup *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400A8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C401C8, "lookgroup");
    __cxa_guard_release(&qword_268C400A8);
  }
}

void sub_23F50E418(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryLookGroup(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::LookGroup>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryLookGroup(void)::v);
  }
  return &RIO_MTLX::registryLookGroup(void)::v;
}

void sub_23F50E490(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::MaterialAssign::CATEGORY(RIO_MTLX::MaterialAssign *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::MaterialAssign::CATEGORY(void)::v, "materialassign");
  }
  return RIO_MTLX::MaterialAssign::CATEGORY(void)::v;
}

void sub_23F50E510(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryMaterialAssign(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::MaterialAssign>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryMaterialAssign(void)::v);
  }
  return &RIO_MTLX::registryMaterialAssign(void)::v;
}

void sub_23F50E588(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Member::CATEGORY(RIO_MTLX::Member *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400B0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C401E0, "member");
    __cxa_guard_release(&qword_268C400B0);
  }
}

void sub_23F50E614(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryMember(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Member>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryMember(void)::v);
  }
  return &RIO_MTLX::registryMember(void)::v;
}

void sub_23F50E68C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Node::CATEGORY(RIO_MTLX::Node *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Node::CATEGORY(void)::v, "node");
  }
  return RIO_MTLX::Node::CATEGORY(void)::v;
}

void sub_23F50E70C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryNode(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Node>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryNode(void)::v);
  }
  return &RIO_MTLX::registryNode(void)::v;
}

void sub_23F50E784(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::NodeDef::CATEGORY(RIO_MTLX::NodeDef *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NodeDef::CATEGORY(void)::v, "nodedef");
  }
  return RIO_MTLX::NodeDef::CATEGORY(void)::v;
}

void sub_23F50E804(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryNodeDef(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::NodeDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryNodeDef(void)::v);
  }
  return &RIO_MTLX::registryNodeDef(void)::v;
}

void sub_23F50E87C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::NodeGraph::CATEGORY(RIO_MTLX::NodeGraph *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NodeGraph::CATEGORY(void)::v, "nodegraph");
  }
  return RIO_MTLX::NodeGraph::CATEGORY(void)::v;
}

void sub_23F50E8FC(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryNodeGraph(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::NodeGraph>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryNodeGraph(void)::v);
  }
  return &RIO_MTLX::registryNodeGraph(void)::v;
}

void sub_23F50E974(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Output::CATEGORY(RIO_MTLX::Output *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Output::CATEGORY(void)::v, "output");
  }
  return RIO_MTLX::Output::CATEGORY(void)::v;
}

void sub_23F50E9F4(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryOutput(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Output>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryOutput(void)::v);
  }
  return &RIO_MTLX::registryOutput(void)::v;
}

void sub_23F50EA6C(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Property::CATEGORY(RIO_MTLX::Property *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400B8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C401F8, "property");
    __cxa_guard_release(&qword_268C400B8);
  }
}

void sub_23F50EAF8(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryProperty(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Property>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryProperty(void)::v);
  }
  return &RIO_MTLX::registryProperty(void)::v;
}

void sub_23F50EB70(_Unwind_Exception *a1)
{
}

void RIO_MTLX::PropertyAssign::CATEGORY(RIO_MTLX::PropertyAssign *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400C0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40210, "propertyassign");
    __cxa_guard_release(&qword_268C400C0);
  }
}

void sub_23F50EBFC(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryPropertyAssign(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::PropertyAssign>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryPropertyAssign(void)::v);
  }
  return &RIO_MTLX::registryPropertyAssign(void)::v;
}

void sub_23F50EC74(_Unwind_Exception *a1)
{
}

void RIO_MTLX::PropertySet::CATEGORY(RIO_MTLX::PropertySet *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400C8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40228, "propertyset");
    __cxa_guard_release(&qword_268C400C8);
  }
}

void sub_23F50ED00(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryPropertySet(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::PropertySet>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryPropertySet(void)::v);
  }
  return &RIO_MTLX::registryPropertySet(void)::v;
}

void sub_23F50ED78(_Unwind_Exception *a1)
{
}

void RIO_MTLX::PropertySetAssign::CATEGORY(RIO_MTLX::PropertySetAssign *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400D0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40240, "propertysetassign");
    __cxa_guard_release(&qword_268C400D0);
  }
}

void sub_23F50EE04(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryPropertySetAssign(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::PropertySetAssign>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryPropertySetAssign(void)::v);
  }
  return &RIO_MTLX::registryPropertySetAssign(void)::v;
}

void sub_23F50EE7C(_Unwind_Exception *a1)
{
}

void RIO_MTLX::TargetDef::CATEGORY(RIO_MTLX::TargetDef *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400D8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40258, "targetdef");
    __cxa_guard_release(&qword_268C400D8);
  }
}

void sub_23F50EF08(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryTargetDef(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::TargetDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryTargetDef(void)::v);
  }
  return &RIO_MTLX::registryTargetDef(void)::v;
}

void sub_23F50EF80(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Token::CATEGORY(RIO_MTLX::Token *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Token::CATEGORY(void)::v, "token");
  }
  return RIO_MTLX::Token::CATEGORY(void)::v;
}

void sub_23F50F000(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryToken(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Token>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryToken(void)::v);
  }
  return &RIO_MTLX::registryToken(void)::v;
}

void sub_23F50F078(_Unwind_Exception *a1)
{
}

void RIO_MTLX::TypeDef::CATEGORY(RIO_MTLX::TypeDef *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400E0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40270, "typedef");
    __cxa_guard_release(&qword_268C400E0);
  }
}

void sub_23F50F104(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryTypeDef(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::TypeDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryTypeDef(void)::v);
  }
  return &RIO_MTLX::registryTypeDef(void)::v;
}

void sub_23F50F17C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Unit::CATEGORY(RIO_MTLX::Unit *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Unit::CATEGORY(void)::v, "unit");
  }
  return RIO_MTLX::Unit::CATEGORY(void)::v;
}

void sub_23F50F1FC(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryUnit(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Unit>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryUnit(void)::v);
  }
  return &RIO_MTLX::registryUnit(void)::v;
}

void sub_23F50F274(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::UnitDef::CATEGORY(RIO_MTLX::UnitDef *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UnitDef::CATEGORY(void)::v, "unitdef");
  }
  return RIO_MTLX::UnitDef::CATEGORY(void)::v;
}

void sub_23F50F2F4(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryUnitDef(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::UnitDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryUnitDef(void)::v);
  }
  return &RIO_MTLX::registryUnitDef(void)::v;
}

void sub_23F50F36C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::UnitTypeDef::CATEGORY(RIO_MTLX::UnitTypeDef *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UnitTypeDef::CATEGORY(void)::v, "unittypedef");
  }
  return RIO_MTLX::UnitTypeDef::CATEGORY(void)::v;
}

void sub_23F50F3EC(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryUnitTypeDef(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::UnitTypeDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryUnitTypeDef(void)::v);
  }
  return &RIO_MTLX::registryUnitTypeDef(void)::v;
}

void sub_23F50F464(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Variant::CATEGORY(RIO_MTLX::Variant *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400E8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40288, "variant");
    __cxa_guard_release(&qword_268C400E8);
  }
}

void sub_23F50F4F0(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryVariant(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Variant>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryVariant(void)::v);
  }
  return &RIO_MTLX::registryVariant(void)::v;
}

void sub_23F50F568(_Unwind_Exception *a1)
{
}

void RIO_MTLX::VariantAssign::CATEGORY(RIO_MTLX::VariantAssign *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400F0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C402A0, "variantassign");
    __cxa_guard_release(&qword_268C400F0);
  }
}

void sub_23F50F5F4(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryVariantAssign(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::VariantAssign>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryVariantAssign(void)::v);
  }
  return &RIO_MTLX::registryVariantAssign(void)::v;
}

void sub_23F50F66C(_Unwind_Exception *a1)
{
}

void RIO_MTLX::VariantSet::CATEGORY(RIO_MTLX::VariantSet *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C400F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C400F8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C402B8, "variantset");
    __cxa_guard_release(&qword_268C400F8);
  }
}

void sub_23F50F6F8(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryVariantSet(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::VariantSet>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryVariantSet(void)::v);
  }
  return &RIO_MTLX::registryVariantSet(void)::v;
}

void sub_23F50F770(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Visibility::CATEGORY(RIO_MTLX::Visibility *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40100))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C402D0, "visibility");
    __cxa_guard_release(&qword_268C40100);
  }
}

void sub_23F50F7FC(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::registryVisibility(RIO_MTLX *this)
{
  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Visibility>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryVisibility(void)::v);
  }
  return &RIO_MTLX::registryVisibility(void)::v;
}

void sub_23F50F874(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Element::initCategoryRegistry(RIO_MTLX::Element *this)
{
  uint64_t v1 = (RIO_MTLX *)RIO_MTLX::registryInput(this);
  uint64_t v2 = (RIO_MTLX *)RIO_MTLX::registryAttributeDef(v1);
  uint64_t v3 = (RIO_MTLX *)RIO_MTLX::registryBackdrop(v2);
  uint64_t v4 = (RIO_MTLX *)RIO_MTLX::registryCollection(v3);
  int v5 = (RIO_MTLX *)RIO_MTLX::registryCommentElement(v4);
  uint64_t v6 = (RIO_MTLX *)RIO_MTLX::registryDocument(v5);
  uint64_t v7 = (RIO_MTLX *)RIO_MTLX::registryGenericElement(v6);
  uint64_t v8 = (RIO_MTLX *)RIO_MTLX::registryGeomInfo(v7);
  BOOL v9 = (RIO_MTLX *)RIO_MTLX::registryGeomProp(v8);
  uint64_t v10 = (RIO_MTLX *)RIO_MTLX::registryGeomPropDef(v9);
  uint64_t v11 = (RIO_MTLX *)RIO_MTLX::registryImplementation(v10);
  int v12 = (RIO_MTLX *)RIO_MTLX::registryInput(v11);
  int v13 = (RIO_MTLX *)RIO_MTLX::registryLook(v12);
  uint64_t v14 = (RIO_MTLX *)RIO_MTLX::registryLookGroup(v13);
  uint64_t v15 = (RIO_MTLX *)RIO_MTLX::registryMaterialAssign(v14);
  uint64_t v16 = (RIO_MTLX *)RIO_MTLX::registryMember(v15);
  uint64_t v17 = (RIO_MTLX *)RIO_MTLX::registryNode(v16);
  BOOL v18 = (RIO_MTLX *)RIO_MTLX::registryNodeDef(v17);
  int v19 = (RIO_MTLX *)RIO_MTLX::registryNodeGraph(v18);
  long long v20 = (RIO_MTLX *)RIO_MTLX::registryOutput(v19);
  uint64_t v21 = (RIO_MTLX *)RIO_MTLX::registryProperty(v20);
  std::string::size_type v22 = (RIO_MTLX *)RIO_MTLX::registryPropertyAssign(v21);
  std::string v23 = (RIO_MTLX *)RIO_MTLX::registryPropertySet(v22);
  uint64_t v24 = (RIO_MTLX *)RIO_MTLX::registryPropertySetAssign(v23);
  uint64_t v25 = (RIO_MTLX *)RIO_MTLX::registryTargetDef(v24);
  uint64_t v26 = (RIO_MTLX *)RIO_MTLX::registryToken(v25);
  long long v27 = (RIO_MTLX *)RIO_MTLX::registryTypeDef(v26);
  std::string::size_type v28 = (RIO_MTLX *)RIO_MTLX::registryUnit(v27);
  uint64_t v29 = (RIO_MTLX *)RIO_MTLX::registryUnitDef(v28);
  long long v30 = (RIO_MTLX *)RIO_MTLX::registryUnitTypeDef(v29);
  uint64_t v31 = (RIO_MTLX *)RIO_MTLX::registryVariant(v30);
  uint64_t v32 = (RIO_MTLX *)RIO_MTLX::registryVariantAssign(v31);
  char v33 = (RIO_MTLX *)RIO_MTLX::registryVariantSet(v32);

  return RIO_MTLX::registryVisibility(v33);
}

void RIO_MTLX::Element::~Element(RIO_MTLX::Element *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(void *)this = &unk_26F331FD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  int v5 = (void **)((char *)this + 200);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 160);
  int v5 = (void **)((char *)this + 136);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::~__hash_table((uint64_t)this + 96);
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t RIO_MTLX::Element::getUpstreamEdgeCount(RIO_MTLX::Element *this)
{
  return 0;
}

void RIO_MTLX::ValueElement::~ValueElement(RIO_MTLX::ValueElement *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t *RIO_MTLX::TypedElement::getType(RIO_MTLX::TypedElement *this)
{
  RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(this);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(void)::v);
  if (v2) {
    return (uint64_t *)(v2 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::StringResolver::~StringResolver(void **this)
{
  RIO_MTLX::StringResolver::~StringResolver(this);

  JUMPOUT(0x2455D2BD0);
}

{
  *this = &unk_26F330A18;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 12));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<RIO_MTLX::Element const>,std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F50FC1C(_Unwind_Exception *a1)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<RIO_MTLX::Element const>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<RIO_MTLX::Element const>,std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    int8x8_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      BOOL result = std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__emplace_hint_unique_key_args<std::shared_ptr<RIO_MTLX::Element const>,std::shared_ptr<RIO_MTLX::Element const> const&>(v5, v6, v4 + 4, v4 + 4);
      uint8x8_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint8x8_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__emplace_hint_unique_key_args<std::shared_ptr<RIO_MTLX::Element const>,std::shared_ptr<RIO_MTLX::Element const> const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__find_equal<std::shared_ptr<RIO_MTLX::Element const>>(a1, a2, &v12, &v11, a3);
  uint8x8_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    uint8x8_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v8, v7);
  }
  return v7;
}

void *std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__find_equal<std::shared_ptr<RIO_MTLX::Element const>>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  int8x8_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          int8x8_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int8x8_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    long long v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          long long v20 = (void *)*v21;
          int8x8_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int8x8_t v5 = v21 + 1;
        long long v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(a1, a2[1]);
    unint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void RIO_MTLX::InheritanceIterator::~InheritanceIterator(RIO_MTLX::InheritanceIterator *this)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t RIO_MTLX::GraphIterator::GraphIterator(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  std::__tree<std::shared_ptr<RIO_MTLX::Element>>::__emplace_unique_key_args<std::shared_ptr<RIO_MTLX::Element>,std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t **)(a1 + 32), a2, (uint64_t *)a2);
  return a1;
}

void sub_23F510020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v13 = v12;
  uint64_t v14 = v11;
  a10 = v13;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v14, *(void **)(v10 + 40));
  uint64_t v16 = *(std::__shared_weak_count **)(v10 + 24);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v10 + 8);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::shared_ptr<RIO_MTLX::Element>>::__emplace_unique_key_args<std::shared_ptr<RIO_MTLX::Element>,std::shared_ptr<RIO_MTLX::Element> const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  int8x8_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int8x8_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      int8x8_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    void v10[4] = *a3;
    void v10[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
  }
  return v10;
}

void std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void RIO_MTLX::Edge::~Edge(RIO_MTLX::Edge *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t RIO_MTLX::InheritanceIterator::InheritanceIterator(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::shared_ptr<RIO_MTLX::Element>>::__emplace_unique_key_args<std::shared_ptr<RIO_MTLX::Element>,std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t **)(a1 + 16), a2, (uint64_t *)a2);
  return a1;
}

void sub_23F51027C(_Unwind_Exception *a1)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v2, *(void **)(v1 + 24));
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
  {
    unint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(a1 + 240);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  RIO_MTLX::Element::getQualifiedName(a1, a2, &__p);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Element>(v8, (unsigned __int8 *)&__p, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    unint64_t v9 = v12;
    *a3 = v11;
    a3[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Element>(v8, (unsigned __int8 *)a2, a3);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_23F510388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *RIO_MTLX::Element::getInheritString(RIO_MTLX::Element *this)
{
  RIO_MTLX::Element::INHERIT_ATTRIBUTE(this);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::Element::INHERIT_ATTRIBUTE(void)::v);
  if (v2) {
    return (uint64_t *)(v2 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Element>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    unint64_t v7 = 0;
    goto LABEL_10;
  }
  int8x8_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  unint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Element>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F5104A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getQualifiedName(uint64_t a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v42, (void *)(a1 + 8));
LABEL_2:
  int8x8_t v5 = v42;
  while (1)
  {
    if (!v5)
    {
      int v12 = 1;
      goto LABEL_38;
    }
    Namespace = RIO_MTLX::Element::getNamespace(v5);
    unint64_t v7 = Namespace;
    uint64_t v8 = *((unsigned __int8 *)Namespace + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = Namespace[1];
    }
    if (v8) {
      break;
    }
    unint64_t v9 = v42;
    int8x8_t v5 = (RIO_MTLX::Element *)*((void *)v42 + 29);
    if (v5)
    {
      int8x8_t v5 = (RIO_MTLX::Element *)std::__shared_weak_count::lock((std::__shared_weak_count *)v5);
      uint64_t v10 = (std::__shared_weak_count *)v5;
      if (v5) {
        int8x8_t v5 = (RIO_MTLX::Element *)*((void *)v9 + 28);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v43;
    std::string v42 = v5;
    BOOL v43 = v10;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      goto LABEL_2;
    }
  }
  unint64_t v13 = (std::string *)RIO_MTLX::NAME_PREFIX_SEPARATOR((RIO_MTLX *)Namespace);
  int v14 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  BOOL v16 = v14 < 0;
  if (v14 >= 0) {
    uint64_t v17 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v17 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  }
  if (!v16) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v18 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  if ((v18 & 0x80u) == 0) {
    int v19 = v13;
  }
  else {
    int v19 = (std::string *)v13->__r_.__value_.__r.__words[0];
  }
  if ((v18 & 0x80u) != 0) {
    std::string::size_type v18 = v13->__r_.__value_.__l.__size_;
  }
  if (size) {
    BOOL v20 = v18 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20)
  {
LABEL_29:
    uint64_t v21 = (const void **)RIO_MTLX::NAME_PREFIX_SEPARATOR((RIO_MTLX *)v13);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v7, v21, (uint64_t)&__p);
    int v22 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v22 >= 0) {
      std::string v23 = (const std::string::value_type *)a2;
    }
    else {
      std::string v23 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
    }
    if (v22 >= 0) {
      std::string::size_type v24 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v25 = std::string::append(&__p, v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v27 = &v17[size];
    std::string::size_type v28 = v17;
LABEL_45:
    std::string::size_type v29 = v18;
    long long v30 = v19;
    while (*v28 != v30->__r_.__value_.__s.__data_[0])
    {
      long long v30 = (std::string *)((char *)v30 + 1);
      if (!--v29)
      {
        if (++v28 != v27) {
          goto LABEL_45;
        }
        goto LABEL_29;
      }
    }
    if (v28 == v27 || v28 - v17 == -1) {
      goto LABEL_29;
    }
    unint64_t v13 = std::string::basic_string(&__p, a2, 0, v28 - v17, (std::allocator<char> *)&v44);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v32 = *((unsigned __int8 *)v7 + 23);
    int v33 = (char)v32;
    if ((v32 & 0x80u) != 0) {
      uint64_t v32 = v7[1];
    }
    if (v31 != v32)
    {
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_29;
    }
    if (v33 >= 0) {
      uint64_t v34 = (unsigned __int8 *)v7;
    }
    else {
      uint64_t v34 = (unsigned __int8 *)*v7;
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      long long v39 = (void *)__p.__r_.__value_.__r.__words[0];
      int v40 = memcmp(__p.__r_.__value_.__l.__data_, v34, __p.__r_.__value_.__l.__size_);
      operator delete(v39);
      if (v40) {
        goto LABEL_29;
      }
    }
    else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v35 = 0;
      do
      {
        int v36 = __p.__r_.__value_.__s.__data_[v35];
        int v37 = v34[v35];
      }
      while (v36 == v37 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v35++);
      if (v36 != v37) {
        goto LABEL_29;
      }
    }
    if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      int v12 = 0;
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      goto LABEL_38;
    }
    std::string::__init_copy_ctor_external(a3, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  int v12 = 0;
LABEL_38:
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v12)
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a3, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    }
  }
}

void sub_23F510780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *RIO_MTLX::Element::getNamespace(RIO_MTLX::Element *this)
{
  RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(this);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(void)::v);
  if (v2) {
    return (uint64_t *)(v2 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265071838, MEMORY[0x263F8C068]);
}

void sub_23F510874(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void std::__shared_ptr_pointer<RIO_MTLX::StringResolver *,std::shared_ptr<RIO_MTLX::StringResolver>::__shared_ptr_default_delete<RIO_MTLX::StringResolver,RIO_MTLX::StringResolver>,std::allocator<RIO_MTLX::StringResolver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<RIO_MTLX::StringResolver *,std::shared_ptr<RIO_MTLX::StringResolver>::__shared_ptr_default_delete<RIO_MTLX::StringResolver,RIO_MTLX::StringResolver>,std::allocator<RIO_MTLX::StringResolver>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<RIO_MTLX::StringResolver *,std::shared_ptr<RIO_MTLX::StringResolver>::__shared_ptr_default_delete<RIO_MTLX::StringResolver,RIO_MTLX::StringResolver>,std::allocator<RIO_MTLX::StringResolver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *RIO_MTLX::Element::getFilePrefix(RIO_MTLX::Element *this)
{
  RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(this);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(void)::v);
  if (v2) {
    return (uint64_t *)(v2 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t *RIO_MTLX::Element::getGeomPrefix(RIO_MTLX::Element *this)
{
  RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(this);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v);
  if (v2) {
    return (uint64_t *)(v2 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v3 = *(uint64_t **)(a1 + 136);
  unint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      unint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::GeomInfo>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      unint64_t v13 = (const void **)(v8 + 24);
      int v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        unint64_t v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::GeomInfo>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F510B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::GeomInfo>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::GeomInfo>>::__swap_out_circular_buffer(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F510C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::GeomInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t *RIO_MTLX::GeomElement::getGeom(RIO_MTLX::GeomElement *this)
{
  uint64_t v2 = (unsigned __int8 *)RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(this);
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, v2);
  if (v3) {
    return (uint64_t *)(v3 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Token>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v3 = *(uint64_t **)(a1 + 136);
  unint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Token>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      char v13 = (const void **)(v8 + 24);
      long long v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        char v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::Token>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F51102C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::Token>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::Token>>::__swap_out_circular_buffer(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F51116C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Token>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Token>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Token>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Token>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Token>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::UnitTypeDef>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::UnitTypeDef>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F511348(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F5113C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4[2] = a2[2];
      v4 += 3;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 - 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 24;
  }
}

void RIO_MTLX::TreeIterator::~TreeIterator(RIO_MTLX::TreeIterator *this)
{
  unint64_t v3 = (void **)((char *)this + 16);
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

BOOL RIO_MTLX::TreeIterator::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  unint64_t v3 = *(char **)(a1 + 16);
  uint64_t v2 = *(char **)(a1 + 24);
  uint64_t v4 = *(void **)(a2 + 16);
  if (v2 - v3 != *(void *)(a2 + 24) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*(void *)v3 != *v4 || *((void *)v3 + 2) != v4[2]) {
      return 0;
    }
    v3 += 24;
    v4 += 3;
  }
  return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  char v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::string v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *std::string v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_23F511B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  char v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *char v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_23F511BC4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  char v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = *a4;
  float v18 = (void *)(a1 + 16);
  BOOL v19 = operator new(0x38uLL);
  v43[0] = v19;
  v43[1] = a1 + 16;
  char v44 = 0;
  *BOOL v19 = 0;
  v19[1] = v10;
  unint64_t v20 = (std::string *)(v19 + 2);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v21 = *v17;
    v19[4] = *((void *)v17 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  v19[5] = 0;
  v19[6] = 0;
  char v44 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if (*(void *)&prime > v11) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string::size_type v28 = operator new(8 * *(void *)&prime);
          std::string::size_type v29 = *(void **)a1;
          *(void *)a1 = v28;
          if (v29) {
            operator delete(v29);
          }
          uint64_t v30 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v30++) = 0;
          while (*(void *)&prime != v30);
          std::string::size_type v31 = (void *)*v18;
          if (*v18)
          {
            unint64_t v32 = v31[1];
            uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&prime) {
                v32 %= *(void *)&prime;
              }
            }
            else
            {
              v32 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v32) = v18;
            int v37 = (void *)*v31;
            if (*v31)
            {
              do
              {
                unint64_t v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(void *)&prime) {
                    v38 %= *(void *)&prime;
                  }
                }
                else
                {
                  v38 &= *(void *)&prime - 1;
                }
                if (v38 != v32)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v38))
                  {
                    *(void *)(*(void *)a1 + 8 * v38) = v31;
                    goto LABEL_58;
                  }
                  *std::string::size_type v31 = *v37;
                  *int v37 = **(void **)(*(void *)a1 + 8 * v38);
                  **(void **)(*(void *)a1 + 8 * v38) = v37;
                  int v37 = v31;
                }
                unint64_t v38 = v32;
LABEL_58:
                std::string::size_type v31 = v37;
                int v37 = (void *)*v37;
                unint64_t v32 = v38;
              }
              while (v37);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        std::string v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v11 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v39 = *(void **)(*(void *)a1 + 8 * v4);
  if (v39)
  {
    *(void *)v43[0] = *v39;
    void *v39 = v43[0];
  }
  else
  {
    *(void *)v43[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v4) = v18;
    if (*(void *)v43[0])
    {
      unint64_t v40 = *(void *)(*(void *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v43[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v43[0];
  v43[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>>>>::reset[abi:ne180100]((uint64_t)v43, 0);
  return i;
}

void sub_23F512154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Element>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Element>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Element>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Element>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Element>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Element>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Element>>,std::shared_ptr<RIO_MTLX::Element>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_23F5123B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_23F5124C8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        unint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        unint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  char v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)char v5 = 0;
      char v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x128uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_26F331C30;
  uint64_t v10 = (uint64_t)(v8 + 3);
  uint64_t v11 = a2;
  long long v12 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Node::Node((RIO_MTLX::Node *)(v8 + 3), &v11, a4);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *a1 = v10;
  a1[1] = (uint64_t)v9;

  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a1, v9 + 4, v10);
}

void sub_23F5126CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331C30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Node>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Node *RIO_MTLX::Node::Node(RIO_MTLX::Node *a1, uint64_t *a2, uint64_t a3)
{
  char v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Node::CATEGORY(a1);
  RIO_MTLX::InterfaceElement::InterfaceElement(a1, &v7, RIO_MTLX::Node::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F342C60;
  return a1;
}

void sub_23F512818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::InterfaceElement::InterfaceElement(void *a1, uint64_t *a2, long long *a3, long long *a4)
{
  char v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::TypedElement::TypedElement(a1, &v7, a3, a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = &unk_26F34AB68;
  a1[32] = 0;
  a1[33] = 0;
  return a1;
}

void sub_23F5128AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::TypedElement::TypedElement(void *a1, uint64_t *a2, long long *a3, long long *a4)
{
  char v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Element::Element((uint64_t)a1, &v7, a3, a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = &unk_26F331F88;
  return a1;
}

void sub_23F51293C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::Element::Element(uint64_t a1, uint64_t *a2, long long *a3, long long *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F331FD8;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v7;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    *(void *)(a1 + 64) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v8;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v9 = *a2;
  *(void *)(a1 + 224) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 232) = v10;
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
    uint64_t v9 = *a2;
  }
  if (v9
    && (uint64_t v11 = *(std::__shared_weak_count **)(v9 + 248)) != 0
    && (long long v12 = std::__shared_weak_count::lock(v11)) != 0)
  {
    uint64_t v13 = *(void *)(v9 + 240);
    *(void *)(a1 + 248) = v12;
    *(void *)(a1 + 240) = v13;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  else
  {
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&RIO_MTLX::Element::Element(std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::string const&)::once, memory_order_acquire) != -1)
  {
    unint64_t v16 = &v17;
    long long v15 = &v16;
    std::__call_once(&RIO_MTLX::Element::Element(std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::string const&)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<RIO_MTLX::Element::Element(std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::string const&)::{lambda(void)#1} &&>>);
  }
  return a1;
}

void sub_23F512B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (*(char *)(v12 + 47) < 0) {
    operator delete(*v13);
  }
  long long v15 = *(std::__shared_weak_count **)(v12 + 16);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::TypedElement::~TypedElement(RIO_MTLX::TypedElement *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<RIO_MTLX::Element::Element(std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::string const&)::{lambda(void)#1} &&>>(RIO_MTLX::Element *a1)
{
  inited = (RIO_MTLX::Value *)RIO_MTLX::Element::initCategoryRegistry(a1);

  return RIO_MTLX::Value::initValueTypeRegistry(inited);
}

void std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      char v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        unint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::GenericElement,std::allocator<RIO_MTLX::GenericElement>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  long long v8 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint64_t v9 = v8;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330AC8;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v12 = a2;
    uint64_t v13 = 0;
  }
  RIO_MTLX::GenericElement::CATEGORY((RIO_MTLX::GenericElement *)v8);
  uint64_t v10 = &v9[1].__vftable;
  RIO_MTLX::Element::Element(&v9[1], &v12, qword_268C40168, a4);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *uint64_t v10 = &unk_26F330B18;
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v10;
  a1[1] = v9;
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v9[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v9[1].__shared_owners_ = (uint64_t)v10;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v9[1].__shared_owners_ = (uint64_t)v10;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_23F512DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::GenericElement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::GenericElement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::GenericElement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::GenericElement::~GenericElement(RIO_MTLX::GenericElement *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  unint64_t v4 = (unint64_t *)(a1 + 24);
  uint64_t v45 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, a2 + 16);
  float v6 = *(float *)(a1 + 32);
  unint64_t v46 = v5;
  v2[1] = v5;
  unint64_t v7 = *(void *)(a1 + 8);
  float v8 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v7 || (float)(v6 * (float)v7) < v8)
  {
    BOOL v9 = 1;
    if (v7 >= 3) {
      BOOL v9 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v7);
    unint64_t v11 = vcvtps_u32_f32(v8 / v6);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    char v44 = v4;
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    BOOL v43 = v2;
    if (*(void *)&prime > v7)
    {
LABEL_13:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(8 * *(void *)&prime);
      long long v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      unint64_t v16 = *(unsigned __int8 ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        unint64_t v19 = v18.u32[0];
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        float v23 = *v16;
        if (*v16)
        {
          unint64_t v42 = v18.u32[0];
          do
          {
            unint64_t v24 = *((void *)v23 + 1);
            if (v19 > 1)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            if (v24 == v17)
            {
              unint64_t v16 = (unsigned __int8 **)v23;
            }
            else if (*(void *)(*(void *)a1 + 8 * v24))
            {
              unint64_t v25 = *(unsigned __int8 **)v23;
              if (*(void *)v23)
              {
                unint64_t v26 = v23;
                while (1)
                {
                  int v27 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v23 + 16, v25 + 16);
                  std::string::size_type v28 = *(unsigned __int8 **)v26;
                  if (!v27) {
                    break;
                  }
                  unint64_t v25 = *(unsigned __int8 **)v28;
                  unint64_t v26 = *(unsigned __int8 **)v26;
                  if (!*(void *)v28) {
                    goto LABEL_46;
                  }
                }
                unint64_t v25 = *(unsigned __int8 **)v26;
                std::string::size_type v28 = v26;
LABEL_46:
                unint64_t v19 = v42;
              }
              else
              {
                std::string::size_type v28 = v23;
              }
              *unint64_t v16 = v25;
              *(void *)std::string::size_type v28 = **(void **)(*(void *)a1 + 8 * v24);
              **(void **)(*(void *)a1 + 8 * v24) = v23;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v24) = v16;
              unint64_t v16 = (unsigned __int8 **)v23;
              unint64_t v17 = v24;
            }
            float v23 = *v16;
          }
          while (*v16);
        }
      }
      goto LABEL_58;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*v4 / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (*(void *)&prime <= v20) {
        int8x8_t prime = (int8x8_t)v20;
      }
      if (*(void *)&prime < v7)
      {
        if (prime) {
          goto LABEL_13;
        }
        std::string::size_type v29 = *(void **)a1;
        *(void *)a1 = 0;
        if (v29) {
          operator delete(v29);
        }
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_58:
    unint64_t v7 = *(void *)(a1 + 8);
    uint64_t v2 = v43;
    unint64_t v4 = v44;
  }
  uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v30.i16[0] = vaddlv_u8(v30);
  unint64_t v31 = v30.u32[0];
  if (v30.u32[0] > 1uLL)
  {
    unint64_t v32 = v46;
    if (v7 <= v46) {
      unint64_t v32 = v46 % v7;
    }
  }
  else
  {
    unint64_t v32 = (v7 - 1) & v46;
  }
  uint8x8_t v33 = *(unsigned __int8 **)(*(void *)a1 + 8 * v32);
  if (v33)
  {
    unint64_t v34 = *(unsigned __int8 **)v33;
    if (*(void *)v33)
    {
      int v35 = 0;
      do
      {
        unint64_t v36 = *((void *)v34 + 1);
        if (v31 > 1)
        {
          unint64_t v37 = *((void *)v34 + 1);
          if (v36 >= v7) {
            unint64_t v37 = v36 % v7;
          }
        }
        else
        {
          unint64_t v37 = v36 & (v7 - 1);
        }
        if (v37 != v32) {
          break;
        }
        int v38 = v36 == v46 ? std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v34 + 16, v45) : 0;
        if (v35 & (v38 ^ 1)) {
          break;
        }
        v35 |= v38;
        uint8x8_t v33 = *(unsigned __int8 **)v33;
        unint64_t v34 = *(unsigned __int8 **)v33;
      }
      while (*(void *)v33);
      unint64_t v7 = *(void *)(a1 + 8);
      uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v39.i16[0] = vaddlv_u8(v39);
      unint64_t v31 = v39.u32[0];
    }
  }
  unint64_t v40 = v2[1];
  if (v31 > 1)
  {
    if (v40 >= v7) {
      v40 %= v7;
    }
  }
  else
  {
    v40 &= v7 - 1;
  }
  if (!v33)
  {
    void *v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v40) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v41 = *(void *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v41 >= v7) {
        v41 %= v7;
      }
    }
    else
    {
      v41 &= v7 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v41) = v2;
    goto LABEL_95;
  }
  void *v2 = *(void *)v33;
  *(void *)uint8x8_t v33 = v2;
  if (*v2)
  {
    unint64_t v41 = *(void *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v41 >= v7) {
        v41 %= v7;
      }
    }
    else
    {
      v41 &= v7 - 1;
    }
    if (v41 != v40) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*v4;
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  unint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_23F513424(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  uint64_t v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_23F5135A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23F5135B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_23F5136F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::TypeDef>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    long long v7 = 0;
    goto LABEL_10;
  }
  unint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  long long v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::TypeDef>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F51391C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_23F5139A0(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::string>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        long long v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint8x8_t v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint8x8_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  unint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      unint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    unint64_t v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      unint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_23F513C6C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::AttributeDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::AttributeDef::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40138;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40138, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::AttributeDef>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::AttributeDef>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  long long v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  float v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330B78;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::AttributeDef::CATEGORY((RIO_MTLX::AttributeDef *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::TypedElement::TypedElement(&v8[1], &v11, qword_268C40138, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F330BC8;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F513EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::AttributeDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::AttributeDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330B78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::AttributeDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::AttributeDef::~AttributeDef(RIO_MTLX::AttributeDef *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(unsigned __int8 *a1, long long **a2)
{
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_268C40300, (uint64_t)a1);
  unint64_t v6 = v5;
  unint64_t v7 = *((void *)&xmmword_268C402E8 + 1);
  if (*((void *)&xmmword_268C402E8 + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_268C402E8 + 8));
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = v5;
      if (v5 >= *((void *)&xmmword_268C402E8 + 1)) {
        unint64_t v2 = v5 % *((void *)&xmmword_268C402E8 + 1);
      }
    }
    else
    {
      unint64_t v2 = (*((void *)&xmmword_268C402E8 + 1) - 1) & v5;
    }
    char v10 = *(void ***)(xmmword_268C402E8 + 8 * v2);
    if (v10)
    {
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v6)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_268C40308, (unsigned __int8 *)v11 + 16, a1))return v11; {
          }
            }
          else
          {
            if (v9 > 1)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = *a2;
  uint64_t v11 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = v6;
  long long v14 = (std::string *)(v11 + 16);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v15 = *v13;
    *((void *)v11 + 4) = *((void *)v13 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  *((void *)v11 + 5) = 0;
  float v16 = (float)(unint64_t)(qword_268C40300 + 1);
  if (!v7 || (float)(*(float *)&dword_268C40308 * (float)v7) < v16)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v16 / *(float *)&dword_268C40308);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = *((void *)&xmmword_268C402E8 + 1);
    if (*(void *)&prime > *((void *)&xmmword_268C402E8 + 1)) {
      goto LABEL_33;
    }
    if (*(void *)&prime < *((void *)&xmmword_268C402E8 + 1))
    {
      unint64_t v27 = vcvtps_u32_f32((float)(unint64_t)qword_268C40300 / *(float *)&dword_268C40308);
      if (*((void *)&xmmword_268C402E8 + 1) < 3uLL
        || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_268C402E8 + 8)),
            v28.i16[0] = vaddlv_u8(v28),
            v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)&xmmword_268C402E8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint8x8_t v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = (void *)xmmword_268C402E8;
          *(void *)&xmmword_268C402E8 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)&xmmword_268C402E8 + 1) = prime;
          do
            *(void *)(xmmword_268C402E8 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          unint64_t v24 = (void **)qword_268C402F8;
          if (qword_268C402F8)
          {
            unint64_t v25 = *(void *)(qword_268C402F8 + 8);
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_268C402E8 + 8 * v25) = &qword_268C402F8;
            for (uint64_t i = *v24; i; v25 = v31)
            {
              unint64_t v31 = i[1];
              if (v26.u32[0] > 1uLL)
              {
                if (v31 >= *(void *)&prime) {
                  v31 %= *(void *)&prime;
                }
              }
              else
              {
                v31 &= *(void *)&prime - 1;
              }
              if (v31 != v25)
              {
                if (!*(void *)(xmmword_268C402E8 + 8 * v31))
                {
                  *(void *)(xmmword_268C402E8 + 8 * v31) = v24;
                  goto LABEL_58;
                }
                RIO_MTLX *v24 = (void *)*i;
                *uint64_t i = **(void **)(xmmword_268C402E8 + 8 * v31);
                **(void **)(xmmword_268C402E8 + 8 * v31) = i;
                uint64_t i = v24;
              }
              unint64_t v31 = v25;
LABEL_58:
              unint64_t v24 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v36 = (void *)xmmword_268C402E8;
        *(void *)&xmmword_268C402E8 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v7 = 0;
        *((void *)&xmmword_268C402E8 + 1) = 0;
      }
    }
LABEL_62:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
  }
  uint64_t v32 = xmmword_268C402E8;
  uint8x8_t v33 = *(void **)(xmmword_268C402E8 + 8 * v2);
  if (v33)
  {
    *(void *)uint64_t v11 = *v33;
LABEL_75:
    *uint8x8_t v33 = v11;
    goto LABEL_76;
  }
  *(void *)uint64_t v11 = qword_268C402F8;
  qword_268C402F8 = (uint64_t)v11;
  *(void *)(v32 + 8 * v2) = &qword_268C402F8;
  if (*(void *)v11)
  {
    unint64_t v34 = *(void *)(*(void *)v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7) {
        v34 %= v7;
      }
    }
    else
    {
      v34 &= v7 - 1;
    }
    uint8x8_t v33 = (void *)(xmmword_268C402E8 + 8 * v34);
    goto LABEL_75;
  }
LABEL_76:
  ++qword_268C40300;
  return v11;
}

void sub_23F514438(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Backdrop>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Backdrop::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::Backdrop::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::Backdrop::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Backdrop>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Backdrop>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331BE0;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Backdrop::Backdrop((RIO_MTLX::Backdrop *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F5145D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Backdrop>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Backdrop>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Backdrop>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Backdrop *RIO_MTLX::Backdrop::Backdrop(RIO_MTLX::Backdrop *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Backdrop::CATEGORY(a1);
  RIO_MTLX::Element::Element(a1, &v7, RIO_MTLX::Backdrop::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F342CC0;
  return a1;
}

void sub_23F514720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Collection>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Collection::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40150;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40150, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Collection>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Collection>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330C30;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::Collection::CATEGORY((RIO_MTLX::Collection *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, qword_268C40150, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F343CF0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F5148CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Collection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Collection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330C30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Collection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::CommentElement>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::CommentElement::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::CommentElement::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::CommentElement::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::CommentElement>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::CommentElement>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330C80;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::CommentElement::CATEGORY((RIO_MTLX::CommentElement *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, RIO_MTLX::CommentElement::CATEGORY(void)::v, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F330CD0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F514B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::CommentElement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::CommentElement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330C80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::CommentElement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::CommentElement::~CommentElement(RIO_MTLX::CommentElement *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Document>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Document::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::Document::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::Document::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Document>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Document>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = operator new(0x130uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331D38;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Document::Document(v7 + 3, &v11, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F514D48(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Document>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Document>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331D38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Document>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::GenericElement>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::GenericElement::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40168;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40168, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::GenericElement>;
  return a1;
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::GeomInfo>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::GeomInfo::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::GeomInfo::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::GeomInfo::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::GeomInfo>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::GeomInfo>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331B30;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::GeomInfo::GeomInfo((RIO_MTLX::GeomInfo *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F514F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331B30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::GeomInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::GeomInfo *RIO_MTLX::GeomInfo::GeomInfo(RIO_MTLX::GeomInfo *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::GeomInfo::CATEGORY(a1);
  RIO_MTLX::GeomElement::GeomElement(a1, &v7, (uint64_t)RIO_MTLX::GeomInfo::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F331B80;
  return a1;
}

void sub_23F5150C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::GeomElement::GeomElement(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Element::Element(a1, &v7, a3, a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = &unk_26F343D50;
  return a1;
}

void sub_23F515150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::GeomInfo::~GeomInfo(RIO_MTLX::GeomInfo *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::GeomProp>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::GeomProp::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::GeomProp::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::GeomProp::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::GeomProp>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::GeomProp>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331DD8;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::GeomProp::GeomProp((RIO_MTLX::GeomProp *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F5152B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomProp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomProp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::GeomProp>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::GeomProp *RIO_MTLX::GeomProp::GeomProp(RIO_MTLX::GeomProp *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::GeomProp::CATEGORY(a1);
  RIO_MTLX::ValueElement::ValueElement(a1, &v7, (uint64_t)RIO_MTLX::GeomProp::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F331E28;
  return a1;
}

void sub_23F515404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::ValueElement::ValueElement(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::TypedElement::TypedElement(a1, &v7, a3, a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = &unk_26F331F38;
  return a1;
}

void sub_23F515494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::GeomProp::~GeomProp(RIO_MTLX::GeomProp *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::GeomPropDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::GeomPropDef::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40180;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40180, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::GeomPropDef>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::GeomPropDef>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330D30;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::GeomPropDef::CATEGORY((RIO_MTLX::GeomPropDef *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, qword_268C40180, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F330D80;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F51567C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomPropDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomPropDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330D30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::GeomPropDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::GeomPropDef::~GeomPropDef(RIO_MTLX::GeomPropDef *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Implementation>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Implementation::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40198;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40198, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Implementation>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Implementation>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x128uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330DE0;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::Implementation::CATEGORY((RIO_MTLX::Implementation *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::InterfaceElement::InterfaceElement(&v8[1], &v11, qword_268C40198, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F339A68;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F515918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Implementation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Implementation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Implementation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Input>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Input::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::Input::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::Input::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Input>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Input>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331EE8;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Input::Input((RIO_MTLX::Input *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F515AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Input>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Input>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Input>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Input *RIO_MTLX::Input::Input(RIO_MTLX::Input *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Input::CATEGORY(a1);
  RIO_MTLX::PortElement::PortElement(a1, &v7, (uint64_t)RIO_MTLX::Input::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F34ABF8;
  return a1;
}

void sub_23F515C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::PortElement::PortElement(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::ValueElement::ValueElement(a1, &v7, a3, a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = &unk_26F34AC58;
  return a1;
}

void sub_23F515CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Look>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Look::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C401B0;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C401B0, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Look>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Look>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330E30;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::Look::CATEGORY((RIO_MTLX::Look *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, qword_268C401B0, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F330E80;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F515E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Look>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Look>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330E30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Look>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::Look::~Look(RIO_MTLX::Look *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::LookGroup>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::LookGroup::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C401C8;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C401C8, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::LookGroup>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::LookGroup>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330EE0;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::LookGroup::CATEGORY((RIO_MTLX::LookGroup *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, qword_268C401C8, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F330F30;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F51611C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::LookGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::LookGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::LookGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::LookGroup::~LookGroup(RIO_MTLX::LookGroup *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::MaterialAssign>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::MaterialAssign::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::MaterialAssign::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::MaterialAssign::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::MaterialAssign>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::MaterialAssign>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F330F90;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::MaterialAssign::MaterialAssign((RIO_MTLX::MaterialAssign *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F516338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::MaterialAssign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::MaterialAssign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330F90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::MaterialAssign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::MaterialAssign *RIO_MTLX::MaterialAssign::MaterialAssign(RIO_MTLX::MaterialAssign *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::MaterialAssign::CATEGORY(a1);
  RIO_MTLX::GeomElement::GeomElement(a1, &v7, (uint64_t)RIO_MTLX::MaterialAssign::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F330FE0;
  return a1;
}

void sub_23F516484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::MaterialAssign::~MaterialAssign(RIO_MTLX::MaterialAssign *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Member>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Member::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C401E0;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C401E0, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Member>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Member>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331040;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::Member::CATEGORY((RIO_MTLX::Member *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::TypedElement::TypedElement(&v8[1], &v11, qword_268C401E0, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F331090;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F51666C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Member>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Member>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331040;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Member>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::Member::~Member(RIO_MTLX::Member *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Node>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Node::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::Node::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::Node::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Node>;
  return a1;
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::NodeDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::NodeDef::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::NodeDef::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::NodeDef::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::NodeDef>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::NodeDef>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x128uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331D88;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::NodeDef::NodeDef((RIO_MTLX::NodeDef *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F5168E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::NodeDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::NodeDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331D88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::NodeDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::NodeDef *RIO_MTLX::NodeDef::NodeDef(RIO_MTLX::NodeDef *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::NodeDef::CATEGORY(a1);
  RIO_MTLX::InterfaceElement::InterfaceElement(a1, &v7, RIO_MTLX::NodeDef::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F339AE0;
  return a1;
}

void sub_23F516A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::NodeGraph>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::NodeGraph::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::NodeGraph::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::NodeGraph::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::NodeGraph>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::NodeGraph>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x128uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331A90;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::NodeGraph::NodeGraph((RIO_MTLX::NodeGraph *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F516B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331A90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::NodeGraph *RIO_MTLX::NodeGraph::NodeGraph(RIO_MTLX::NodeGraph *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::NodeGraph::CATEGORY(a1);
  RIO_MTLX::GraphElement::GraphElement(a1, &v7, RIO_MTLX::NodeGraph::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F342D38;
  return a1;
}

void sub_23F516CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::GraphElement::GraphElement(void *a1, uint64_t *a2, long long *a3, long long *a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::InterfaceElement::InterfaceElement(a1, &v7, a3, a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = &unk_26F331A30;
  return a1;
}

void sub_23F516D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::GraphElement::~GraphElement(RIO_MTLX::GraphElement *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Output>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Output::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::Output::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::Output::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Output>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Output>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331AE0;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Output::Output((RIO_MTLX::Output *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F516E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Output>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Output>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Output>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Output *RIO_MTLX::Output::Output(RIO_MTLX::Output *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Output::CATEGORY(a1);
  RIO_MTLX::PortElement::PortElement(a1, &v7, (uint64_t)RIO_MTLX::Output::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F34ACC8;
  return a1;
}

void sub_23F516FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Property>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Property::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C401F8;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C401F8, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Property>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Property>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3310F8;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::Property::CATEGORY((RIO_MTLX::Property *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::ValueElement::ValueElement(&v8[1].__vftable, &v11, (uint64_t)qword_268C401F8, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F331148;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F517194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Property>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3310F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Property>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3310F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Property>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::Property::~Property(RIO_MTLX::Property *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::PropertyAssign>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::PropertyAssign::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40210;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40210, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::PropertyAssign>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::PropertyAssign>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3311B0;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::PropertyAssign::CATEGORY((RIO_MTLX::PropertyAssign *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::ValueElement::ValueElement(&v8[1].__vftable, &v11, (uint64_t)qword_268C40210, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F331200;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F517430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertyAssign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3311B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertyAssign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3311B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::PropertyAssign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::PropertyAssign::~PropertyAssign(RIO_MTLX::PropertyAssign *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::PropertySet>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::PropertySet::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40228;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40228, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::PropertySet>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::PropertySet>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331268;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::PropertySet::CATEGORY((RIO_MTLX::PropertySet *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, qword_268C40228, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F3312B8;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F5176CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertySet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertySet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331268;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::PropertySet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::PropertySet::~PropertySet(RIO_MTLX::PropertySet *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::PropertySetAssign>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::PropertySetAssign::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40240;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40240, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::PropertySetAssign>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::PropertySetAssign>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331318;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::PropertySetAssign::CATEGORY((RIO_MTLX::PropertySetAssign *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::GeomElement::GeomElement(&v8[1].__vftable, &v11, (uint64_t)qword_268C40240, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F331368;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F517968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertySetAssign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertySetAssign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::PropertySetAssign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::PropertySetAssign::~PropertySetAssign(RIO_MTLX::PropertySetAssign *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::TargetDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::TargetDef::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40258;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40258, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::TargetDef>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::TargetDef>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3313C8;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::TargetDef::CATEGORY((RIO_MTLX::TargetDef *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::TypedElement::TypedElement(&v8[1], &v11, qword_268C40258, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F331418;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F517C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TargetDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3313C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TargetDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3313C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TargetDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TargetDef::~TargetDef(RIO_MTLX::TargetDef *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Token>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Token::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::Token::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::Token::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Token>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Token>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331C80;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Token::Token((RIO_MTLX::Token *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F517E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Token>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Token>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331C80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Token>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Token *RIO_MTLX::Token::Token(RIO_MTLX::Token *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Token::CATEGORY(a1);
  RIO_MTLX::ValueElement::ValueElement(a1, &v7, (uint64_t)RIO_MTLX::Token::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F331CD0;
  return a1;
}

void sub_23F517F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Token::~Token(RIO_MTLX::Token *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::TypeDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::TypeDef::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40270;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40270, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::TypeDef>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::TypeDef>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331480;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::TypeDef::CATEGORY((RIO_MTLX::TypeDef *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, qword_268C40270, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F3314D0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F518154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypeDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypeDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331480;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypeDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypeDef::~TypeDef(RIO_MTLX::TypeDef *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Unit>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Unit::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::Unit::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::Unit::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Unit>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Unit>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331530;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Unit::Unit((RIO_MTLX::Unit *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F518370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Unit>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Unit>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331530;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Unit>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::Unit *RIO_MTLX::Unit::Unit(RIO_MTLX::Unit *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Unit::CATEGORY(a1);
  RIO_MTLX::Element::Element(a1, &v7, RIO_MTLX::Unit::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F331580;
  return a1;
}

void sub_23F5184BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Unit::~Unit(RIO_MTLX::Unit *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::UnitDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::UnitDef::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::UnitDef::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::UnitDef::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::UnitDef>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::UnitDef>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F3315E0;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::UnitDef::UnitDef((RIO_MTLX::UnitDef *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F518624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::UnitDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3315E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::UnitDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3315E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::UnitDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::UnitDef *RIO_MTLX::UnitDef::UnitDef(RIO_MTLX::UnitDef *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::UnitDef::CATEGORY(a1);
  RIO_MTLX::Element::Element(a1, &v7, RIO_MTLX::UnitDef::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F331630;
  return a1;
}

void sub_23F518770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::UnitDef::~UnitDef(RIO_MTLX::UnitDef *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::UnitTypeDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::UnitTypeDef::CATEGORY(v2);
  uint64_t v4 = (long long *)RIO_MTLX::UnitTypeDef::CATEGORY(void)::v;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::UnitTypeDef::CATEGORY(void)::v, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::UnitTypeDef>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::UnitTypeDef>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F331690;
  uint64_t v9 = (uint64_t)(v7 + 3);
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::UnitTypeDef::UnitTypeDef((RIO_MTLX::UnitTypeDef *)(v7 + 3), (uint64_t *)&v11, a2);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v9;
  *((void *)&v11 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v11, v8 + 4, v9);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_23F5188D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::UnitTypeDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::UnitTypeDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::UnitTypeDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

RIO_MTLX::UnitTypeDef *RIO_MTLX::UnitTypeDef::UnitTypeDef(RIO_MTLX::UnitTypeDef *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint8x8_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::UnitTypeDef::CATEGORY(a1);
  RIO_MTLX::Element::Element(a1, &v7, RIO_MTLX::UnitTypeDef::CATEGORY(void)::v, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26F3316E0;
  return a1;
}

void sub_23F518A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::UnitTypeDef::~UnitTypeDef(RIO_MTLX::UnitTypeDef *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Variant>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Variant::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C40288;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40288, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Variant>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Variant>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x128uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331740;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::Variant::CATEGORY((RIO_MTLX::Variant *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::InterfaceElement::InterfaceElement(&v8[1], &v11, qword_268C40288, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F331790;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F518C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Variant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Variant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331740;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Variant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::Variant::~Variant(RIO_MTLX::Variant *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::VariantAssign>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::VariantAssign::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C402A0;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C402A0, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::VariantAssign>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::VariantAssign>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331808;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::VariantAssign::CATEGORY((RIO_MTLX::VariantAssign *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, qword_268C402A0, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F331858;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F518EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::VariantAssign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::VariantAssign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::VariantAssign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::VariantAssign::~VariantAssign(RIO_MTLX::VariantAssign *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::VariantSet>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::VariantSet::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C402B8;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C402B8, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::VariantSet>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::VariantSet>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3318B8;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::VariantSet::CATEGORY((RIO_MTLX::VariantSet *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v11, qword_268C402B8, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F331908;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F519144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::VariantSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3318B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::VariantSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3318B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::VariantSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::VariantSet::~VariantSet(RIO_MTLX::VariantSet *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Visibility>::ElementRegistry(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Visibility::CATEGORY(v2);
  uint64_t v4 = (long long *)qword_268C402D0;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C402D0, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Visibility>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Visibility>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint8x8_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331968;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v11 = v6;
  RIO_MTLX::Visibility::CATEGORY((RIO_MTLX::Visibility *)v7);
  uint64_t v9 = &v8[1].__vftable;
  RIO_MTLX::GeomElement::GeomElement(&v8[1].__vftable, &v11, (uint64_t)qword_268C402D0, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *uint64_t v9 = &unk_26F3319B8;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    goto LABEL_12;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)v9;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a3 = v9;
  a3[1] = v8;
}

void sub_23F5193E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Visibility>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Visibility>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F331968;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Visibility>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::Visibility::~Visibility(RIO_MTLX::Visibility *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t RIOPxrUsdGeomXformableXformQueryGetLocalTransformation(uint64_t a1, _OWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v14 = MEMORY[0x263F90730] + 16;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v13, 1.0);
  if (v15 && (*(unsigned char *)(v15 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v14 + 32))(&v14))
  {
    MEMORY[0x2455CEEE0](v12, &v14);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
    float v16 = (void **)v12;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v16);
    long long v3 = v13[1];
    long long v4 = v13[2];
    long long v5 = v13[3];
    long long v6 = v13[4];
    long long v7 = v13[5];
    long long v8 = v13[6];
    long long v9 = v13[7];
    *a2 = v13[0];
    a2[1] = v3;
    a2[2] = v4;
    a2[3] = v5;
    a2[4] = v6;
    a2[5] = v7;
    uint64_t v10 = 1;
    a2[6] = v8;
    a2[7] = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  MEMORY[0x2455CEF00](&v14);
  return v10;
}

void sub_23F51963C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 56) = v1;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  MEMORY[0x2455CEF00](v2 - 80);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdGeomXformableXformQueryCopyTimeSamples()
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v9 = 0;
  uint64_t v10 = MEMORY[0x263F90730] + 16;
  long long v7 = 0;
  long long v8 = 0;
  if (v11
    && (*(unsigned char *)(v11 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t *))(MEMORY[0x263F90730] + 48))(&v10))
  {
    MEMORY[0x2455CEEE0](v6, &v10);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamples();
    unint64_t v12 = (void **)v6;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v12);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v1 = v7;
  uint64_t v2 = v8;
  if (v7 != v8)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      CFNumberRef v4 = CFNumberCreate(v3, kCFNumberDoubleType, v1);
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
      v1 += 8;
    }
    while (v1 != v2);
    uint64_t v1 = v7;
  }
  if (v1)
  {
    long long v8 = v1;
    operator delete(v1);
  }
  MEMORY[0x2455CEF00](&v10);
  return Mutable;
}

void sub_23F5197B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v18 - 56) = v17;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x2455CEF00](&a17);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 136);
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))*(&off_26F332010 + v2))(&v4, a1);
  }
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS8_17UsdAttributeQueryEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS8_17UsdAttributeQueryEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *a2)
{
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::~UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  uint64_t v4 = *((void *)this + 14);
  uint64_t v2 = (void *)((char *)this + 112);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<pxrInternal__aapl__pxrReserved__::UsdResolveTarget>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 96);
  long long v5 = (atomic_uint *)*((void *)this + 7);
  if (v5 && atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  long long v6 = (atomic_uint *)*((void *)this + 5);
  if (v6 && atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v8 = *((void *)this + 1);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
}

void std::default_delete<pxrInternal__aapl__pxrReserved__::UsdResolveTarget>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x2455D2BD0);
  }
}

void RIOPxrUsdUtilsModifyAssetPaths(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v15 = &unk_26F332030;
  float v16 = (realityio::UsdLayerMutexTracker *)MEMORY[0x2455D3180]();
  uint64_t v17 = &v15;
  uint64_t v4 = realityio::UsdLayerMutexTracker::instance(v16);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v5 = (uint64_t *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
  uint64_t v10 = v9;
  uint64_t v11 = v14;
  if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
  }
  std::recursive_mutex::lock(v10);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v5);
  pxrInternal__aapl__pxrReserved__::UsdUtilsModifyAssetPaths();
  uint64_t v12 = v14;
  if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  std::recursive_mutex::unlock(v10);
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](&v15);
}

void sub_23F519C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, uint64_t a12)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  std::recursive_mutex::unlock(v13);
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F332030;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F332030;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  int v4 = a2[23];
  if (*(void *)(a1 + 8))
  {
    if (v4 < 0) {
      a2 = *(const char **)a2;
    }
    CFStringRef v6 = CFStringCreateWithCString(0, a2, 0x8000100u);
    uint64_t v7 = (__CFString *)(*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
    CFRelease(v6);
    realityio::CFStringCopyUTF8String(v7, (uint64_t)v11);
    if (SHIBYTE(v13) < 0)
    {
      double v8 = (void *)v12;
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v12, *((std::string::size_type *)&v12 + 1));
      if (v11[0]) {
        operator delete(v8);
      }
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v12;
      a3->__r_.__value_.__r.__words[2] = v13;
    }
    CFRelease(v7);
  }
  else if (v4 < 0)
  {
    std::string::size_type v9 = *((void *)a2 + 1);
    uint64_t v10 = *(const std::string::value_type **)a2;
    std::string::__init_copy_ctor_external(a3, v10, v9);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
  }
}

void sub_23F519F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9) {
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::target_type()
{
}

void *std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *realityio::UsdLayerMutexTracker::instance(realityio::UsdLayerMutexTracker *this)
{
  {
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::concurrent_unordered_base((uint64_t)&realityio::UsdLayerMutexTracker::instance(void)::ret, 8uLL, &v2);
  }
  return &realityio::UsdLayerMutexTracker::instance(void)::ret;
}

void sub_23F51A0DC(_Unwind_Exception *a1)
{
}

double realityio::UsdLayerMutexTracker::writeMutexForLayer(uint64_t a1, void *a2)
{
  int v4 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator pxrInternal__aapl__pxrReserved__::SdfLayer* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::*)(void)const(a2);
  if (!(v6 & 1 | (unint64_t)v4)) {
    return _ZTWN9realityio33kDummyLayerMutexForInvalidObjectsE(v5);
  }

  tbb::interface5::concurrent_unordered_map<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::operator[](a1, a2);
  return result;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::concurrent_unordered_base(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  double v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x60);
  v5[11] = 0;
  *double v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1, 0, &v11);
  return a1;
}

void sub_23F51A298(_Unwind_Exception *a1)
{
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::~split_ordered_list(v1 + 16);
  _Unwind_Resume(a1);
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(a2);
  char v7 = v6;
  uint64_t v8 = a1 + 8 * v6;
  uint64_t v10 = *(void *)(v8 + 48);
  char v9 = (atomic_ullong *)(v8 + 48);
  __dmb(0xBu);
  if (!v10)
  {
    if (v6) {
      size_t v11 = 8 << v6;
    }
    else {
      size_t v11 = 16;
    }
    long long v12 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)v11);
    bzero(v12, v11);
    while (1)
    {
      uint64_t v14 = 0;
      atomic_compare_exchange_strong(v9, (unint64_t *)&v14, (unint64_t)v12);
      if (!v14) {
        break;
      }
      if (atomic_fetch_add_explicit(v9, 0, memory_order_relaxed))
      {
        tbb::internal::deallocate_via_handler_v3((tbb::internal *)v12, v13);
        break;
      }
    }
  }
  atomic_ullong v15 = *v9;
  __dmb(0xBu);
  *(void *)(v15 + 8 * (a2 - ((1 << v7) & 0x1FFFFFFFFFFFFFFELL))) = *a3;
}

unint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(unint64_t a1)
{
  unint64_t v1 = a1 | 1;
  if (HIDWORD(a1)) {
    unint64_t v1 = HIDWORD(a1);
  }
  uint64_t v2 = 32 * (HIDWORD(a1) != 0);
  if (v1 >= 0x10000)
  {
    v1 >>= 16;
    uint64_t v2 = (32 * (HIDWORD(a1) != 0)) | 0x10;
  }
  if (v1 >= 0x100)
  {
    v1 >>= 8;
    v2 |= 8uLL;
  }
  if (v1 >= 0x10)
  {
    v1 >>= 4;
    v2 |= 4uLL;
  }
  if (v1 >= 4)
  {
    v1 >>= 2;
    v2 += 2;
  }
  return ((v1 >> 1) & 1) + v2;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::~split_ordered_list(uint64_t a1)
{
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::clear(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(a1, v2);
  return a1;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  id v3 = *v2;
  tbb::internal *v2 = 0;
  if (v3)
  {
    do
    {
      int v4 = *(tbb::internal **)v3;
      double result = tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(v1, v3);
      id v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 88)) {
    tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::node>::destroy(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3(this, this);
}

atomic_uint *tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::node>::destroy(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a2 + 24));
  double result = *(atomic_uint **)(a2 + 16);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    int v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v4();
  }
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::~pair(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 16));
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t tbb::interface5::concurrent_unordered_map<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::operator[](uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::internal_find(a1, (uint64_t)a2, &v10);
  uint64_t v4 = v10;
  if ((void)v10) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *((void *)&v10 + 1) == a1 + 16;
  }
  if (v5)
  {
    MEMORY[0x2455D2A10](&v11);
    std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,0>(&v12, a2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,0>(&v15, (uint64_t)&v12);
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::internal_insert<tbb::internal::BOOL_constant<true>,tbb::internal::BOOL_constant<true>,std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>(a1, &v15, 0, (uint64_t)&v9);
    long long v10 = v9;
    std::recursive_mutex::~recursive_mutex(&v16);
    uint64_t v6 = *((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    std::recursive_mutex::~recursive_mutex(&v14);
    uint64_t v7 = v13;
    if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    std::recursive_mutex::~recursive_mutex(&v11);
    uint64_t v4 = v10;
  }
  return v4 + 24;
}

void sub_23F51A6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::recursive_mutex *a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);
  uint64_t v23 = va_arg(va1, void);
  uint64_t v24 = va_arg(va1, void);
  uint64_t v25 = va_arg(va1, void);
  std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::~pair(v15 - 120);
  std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::~pair((uint64_t)va1);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)va);
  _Unwind_Resume(a1);
}

uint64_t (*pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator pxrInternal__aapl__pxrReserved__::SdfLayer* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::*)(void)const(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                          + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::_FetchPointer;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::_FetchPointer(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                + 14))
    return *a1;
  return 0;
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::internal_find(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a2));
  uint64_t v17 = 0;
  uint64_t v18 = (void *)v6;
  uint64_t v7 = (unsigned __int8 *)&v18;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *v7++;
    *((unsigned char *)&v17 + i) = tbb::internal::reverse<unsigned char>::byte_table[v9];
  }
  uint64_t v10 = v17;
  uint64_t v11 = a1 + 16;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::prepare_bucket(a1, v6, &v18);
  uint64_t v12 = v18;
  if (v18)
  {
    unint64_t v13 = v10 | 1;
    while (1)
    {
      unint64_t v14 = v12[11];
      if (v14 > v13) {
        break;
      }
      if (v14 == v13)
      {
        uint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)(v12 + 1));
        uint64_t v16 = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a2);
        uint64_t v12 = v18;
        if (UniqueIdentifier == v16) {
          goto LABEL_11;
        }
      }
      uint64_t v12 = (void *)*v12;
      uint64_t v18 = v12;
      if (!v12) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = 0;
LABEL_11:
    *a3 = v12;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v11;
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::prepare_bucket(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  uint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::init_bucket(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v1)
                           + 16);

  return v3();
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::init_bucket(uint64_t a1, atomic_ullong *a2)
{
  unint64_t parent = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::get_parent(a1, (unint64_t)a2);
  if (!tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::is_initialized(a1, parent))tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::init_bucket(a1, parent); {
  unint64_t v5 = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(parent);
  }
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (parent - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = tbb::internal::reverse<unsigned char>::byte_table[v9];
  }
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::insert_dummy(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  uint64_t v10 = v13;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1, (unint64_t)a2, &v10);
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::get_parent(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = HIDWORD(a2);
    if (!HIDWORD(a2)) {
      unint64_t v2 = a2;
    }
    if (v2 < 0x10000)
    {
      uint64_t v3 = 32 * (HIDWORD(a2) != 0);
    }
    else
    {
      v2 >>= 16;
      uint64_t v3 = (32 * (HIDWORD(a2) != 0)) | 0x10;
    }
    if (v2 >= 0x100)
    {
      v2 >>= 8;
      v3 |= 8uLL;
    }
    if (v2 >= 0x10)
    {
      v2 >>= 4;
      v3 |= 4uLL;
    }
    if (v2 >= 4)
    {
      v2 >>= 2;
      v3 += 2;
    }
    unint64_t v4 = ((v2 >> 1) & 1) + v3;
  }
  else
  {
    LOBYTE(v4) = -1;
  }
  return a2 & ~(1 << v4);
}

BOOL tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::is_initialized(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(a2);
  uint64_t v5 = a1 + 8 * v4;
  uint64_t v7 = *(void *)(v5 + 48);
  uint64_t v6 = (uint64_t *)(v5 + 48);
  __dmb(0xBu);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *v6;
  __dmb(0xBu);
  return *(void *)(v8 + 8 * (a2 - ((1 << v4) & 0x1FFFFFFFFFFFFFFELL))) != 0;
}

tbb::internal *tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::insert_dummy@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  double result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x60);
  *((void *)result + 11) = a3;
  *(void *)double result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)double result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[11];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        double result = (tbb::internal *)tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::internal_insert<tbb::internal::BOOL_constant<true>,tbb::internal::BOOL_constant<true>,std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>(uint64_t a1@<X0>, void *a2@<X1>, tbb::internal *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)a2));
  uint64_t v25 = 0;
  uint8x8_t v26 = (atomic_ullong *)v8;
  int v9 = &v26;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    int v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v25 + i) = tbb::internal::reverse<unsigned char>::byte_table[v11];
  }
  unint64_t v12 = v25 | 1;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::prepare_bucket(a1, v8, &v26);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    *((void *)a3 + 11) = v12;
    *(void *)a3 = 0;
  }
  uint64_t v14 = (uint64_t)a2;
  while (1)
  {
    uint64_t v15 = v26;
    uint64_t v16 = (atomic_ullong *)*v26;
    if (*v26)
    {
      unint64_t v17 = v16[11];
      while (1)
      {
        uint64_t v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12)
        {
          uint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)(v16 + 1));
          if (UniqueIdentifier == pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(v14))
          {
            if (a3) {
              tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(a1 + 16, a3);
            }
            *(void *)a4 = v18;
            *(void *)(a4 + 8) = v13;
            *(unsigned char *)(a4 + 16) = 0;
            return;
          }
        }
        uint8x8_t v26 = v18;
        uint64_t v16 = (atomic_ullong *)*v18;
        if (!*v18)
        {
          uint64_t v15 = v18;
          break;
        }
        unint64_t v17 = v16[11];
        uint64_t v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (tbb::internal *)tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::create_node<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>(a1 + 16, v12, a2);
      uint64_t v14 = (uint64_t)a3 + 8;
      uint64_t v15 = v26;
    }
    *(void *)a3 = v16;
    while (1)
    {
      uint64_t v20 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v20, (unint64_t)a3);
      if (v20 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_21:
    if (v16 == (atomic_ullong *)add_explicit || a3 == (tbb::internal *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v23 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v23) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v24 = v23;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v24, 2 * v23);
    }
    while (v24 != v23 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v23);
  }
}

void *tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::create_node<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x60);
  std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100](v5 + 1, a3);
  v5[11] = a2;
  *uint64_t v5 = 0;
  return v5;
}

void sub_23F51AEC8(void *a1)
{
  __cxa_begin_catch(a1);
  tbb::internal::deallocate_via_handler_v3(v1, v2);
  __cxa_rethrow();
}

void sub_23F51AEDC(_Unwind_Exception *a1)
{
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100](void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  MEMORY[0x2455D2A10](a1 + 2);
  return a1;
}

void sub_23F51AF34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,0>(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  MEMORY[0x2455D2A10](a1 + 2);
  return a1;
}

void sub_23F51AFC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,0>(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  MEMORY[0x2455D2A10](a1 + 1);
  return a1;
}

void sub_23F51B044(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(atomic_uint **)(v2 + 8);
  if (v4)
  {
    if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(a2 + 16), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    unint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      unint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_23F51B160(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", v2, (const char *)0x2F);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(v3);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(v3 + 16), &v7);
    unint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    unint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      unint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_23F51B300(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

id anonymous namespace'::getValue(_anonymous_namespace_ *this, const char *a2)
{
  uint64_t v3 = [MEMORY[0x263EFFA40] standardUserDefaults];
  unint64_t v4 = objc_msgSend(NSString, "stringWithFormat:", @"%s.%s", "com.apple.re", this);
  unint64_t v5 = [v3 objectForKey:v4];
  if (!v5)
  {
    unint64_t v6 = [NSString stringWithUTF8String:this];
    unint64_t v7 = [v3 objectForKey:v6];
    unint64_t v5 = v7;
    if (v7)
    {
      unint64_t v8 = v6;
    }
    else
    {
      uint64_t v9 = [v4 rangeOfString:@"." options:4];
      unint64_t v10 = [v4 substringToIndex:v9];
      unint64_t v8 = [v4 substringFromIndex:v9 + 1];

      if ([(__CFString *)v10 isEqualToString:@"com.apple.re.network.multipeerservice"])
      {

        unint64_t v10 = @"com.apple.renetwork.multipeerservice";
      }
      int v11 = [v3 dictionaryForKey:v10];
      unint64_t v5 = [v11 objectForKey:v8];

      if (!v5) {
        goto LABEL_9;
      }
    }
    unint64_t v12 = *(NSObject **)realityio::logObjects(v7);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
    }
LABEL_9:
  }

  return v5;
}

void sub_23F51B50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void realityio::Defaults::intValue(realityio::Defaults *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = ;
  if (v4)
  {
    unint64_t v6 = v4;
    int v5 = [v4 intValue];
    *(unsigned char *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v5;
    unint64_t v4 = v6;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void sub_23F51B5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *realityio::MeshDeformationComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  v9[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, a1);
  uint64_t v8 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v3))
  {
    REMeshDeformationComponentGetComponentType();
    uint64_t v5 = REComponentCreateByClass();
    v9[0] = v5;
    if (v5) {
      RERetain();
    }
    uint64_t v6 = v8;
    if (v8 != v5)
    {
      uint64_t v8 = v5;
      v9[0] = v6;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(v9);
    v9[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
  }
  unint64_t v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a2);
  realityio::WrappedRERef<REAsset *>::operator=(&v8, v4);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v8);
}

void sub_23F51B6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP11REComponentEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t Exec::ExecAction::supportsPartialInputs(Exec::ExecAction *this)
{
  return 0;
}

void *realityio::WrappedRERef<REComponent *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<realityio::WrappedRERef<REComponent *>>::Invoke()
{
}

void *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REComponent *>>(void *result)
{
  if (result)
  {
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_Equal(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_EqualPtr(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_StreamOut(void **a1, uint64_t a2)
{
  return MEMORY[0x270F98788](a2, **a1 != 0);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP11REComponentEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = realityio::WrappedRERef<REComponent *>::~WrappedRERef((void *)v2);
    MEMORY[0x2455D2BD0](v3, 0x1020C403A5D3213);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 8));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F51BB54(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy()
{
}

void sub_23F51BBE4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void realityio::ObjCCustomInputDescriptor::resolvedPrimPaths(uint64_t a1@<X0>, void **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  if (*(void *)(a1 + 48))
  {
    values = a2;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&values);
    if (RIOPxrUsdStageGetTypeID::onceToken != -1) {
      dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
    }
    Instance = (void *)_CFRuntimeCreateInstance();
    uint64_t v8 = Instance;
    if (Instance)
    {
      uint64_t v9 = values;
      values = 0;
      Instance[3] = 0;
      Instance[4] = 0;
      Instance[2] = v9;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&values);
    unint64_t v10 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3);
    CFSetRef v11 = (const __CFSet *)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
    CFRelease(v8);
    CFRelease(v10);
    if (v11)
    {
      if (RIOPxrSdfPathGetTypeID::onceToken != -1) {
        dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
      }
      uint64_t v12 = RIOPxrSdfPathGetTypeID::typeID;
      values = 0;
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      CFIndex Count = CFSetGetCount(v11);
      std::vector<void const*>::resize((uint64_t)&values, Count);
      CFSetGetValues(v11, (const void **)values);
      uint64_t v14 = values;
      uint64_t v15 = v17;
      while (v14 != v15)
      {
        if (CFGetTypeID(*v14) == v12) {
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a4, (unsigned int *)*v14 + 4, (_DWORD *)*v14 + 4);
        }
        ++v14;
      }
      CFRelease(v11);
      if (values)
      {
        unint64_t v17 = values;
        operator delete(values);
      }
    }
  }
}

void sub_23F51BDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(_DWORD *a1)
{
  if (RIOPxrSdfPathGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), a1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 20), a1 + 1);
  }
  return v3;
}

void std::vector<void const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<void const*>::__append((void **)a1, a2 - v2);
  }
}

void realityio::ObjCCustomInputDescriptor::~ObjCCustomInputDescriptor(id *this)
{
  realityio::InputDescriptor::~InputDescriptor((realityio::InputDescriptor *)this);
}

{
  uint64_t vars8;

  realityio::InputDescriptor::~InputDescriptor((realityio::InputDescriptor *)this);

  JUMPOUT(0x2455D2BD0);
}

void std::vector<void const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType::~AcousticMeshBuilderTokens_StaticTokenType(realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v13 = (void **)((char *)this + 96);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v2 = *((void *)this + 11);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 10);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 9);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 7);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 6);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 4);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 3);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType *realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType::AcousticMeshBuilderTokens_StaticTokenType(realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v20 = (uint64_t *)(MEMORY[0x2455CF820](this, "AcousticMeshComponent", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 24, "includeChildObjects", 0);
  MEMORY[0x2455CF820]((char *)this + 32, "info:id", 0);
  MEMORY[0x2455CF820]((char *)this + 40, "material:binding", 0);
  MEMORY[0x2455CF820]((char *)this + 48, "RealityKit.AcousticMesh", 0);
  MEMORY[0x2455CF820]((char *)this + 56, "RealityKit.AcousticAdjustments", 0);
  MEMORY[0x2455CF820]((char *)this + 64, "realityKit:acousticMaterialName", 0);
  MEMORY[0x2455CF820]((char *)this + 72, "customAcousticMesh", 0);
  MEMORY[0x2455CF820]((char *)this + 80, "realityKit:AcousticMaterialOrderedPaths", 0);
  MEMORY[0x2455CF820]((char *)this + 88, "realityKit:AcousticMaterialOrderedDescriptors", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v21 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v20;
  uint64_t v22 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v23 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v24 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v25 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v26 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v27 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v28 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v29 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v30 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v31 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v32 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  uint64_t v14 = (char *)operator new(0x60uLL);
  uint64_t v15 = 0;
  *((void *)this + 12) = v14;
  *((void *)this + 13) = v14;
  *((void *)this + 14) = v14 + 96;
  do
  {
    uint64_t v16 = *(uint64_t *)((char *)&v21 + v15);
    *(void *)&v14[v15] = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v14[v15] &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 += 8;
  }
  while (v15 != 96);
  *((void *)this + 13) = v14 + 96;
  for (uint64_t i = 88; i != -8; i -= 8)
  {
    uint64_t v18 = *(uint64_t *)((char *)&v21 + i);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F51C608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void **a12, uint64_t a13, char a14)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  uint64_t v24 = 88;
  while (1)
  {
    uint64_t v25 = *(void *)(&a14 + v24);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v24 -= 8;
    if (v24 == -8)
    {
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F51C7B0()
{
}

void sub_23F51C7B8()
{
}

void sub_23F51C7C0()
{
}

void realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t a2@<X0>, realityio *a3@<X1>, uint64_t *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v389 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v378, a1);
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v306 = MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t v357 = 0;
  memset(&v356[2], 0, 32);
  memset(v356, 0, 24);
  uint64_t v10 = *a4;
  v304 = a4;
  v305 = a5;
  if (a4[1] == *a4)
  {
    uint64_t v73 = 0;
    float64x2_t v308 = (float64x2_t)xmmword_23F7BA710;
    LODWORD(v74) = 1;
    goto LABEL_79;
  }
  unint64_t v11 = 0;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v11));
    NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 8 * v11));
    unint64_t v13 = atomic_load(&realityio::tokens::EcsTokens);
    if (!v13) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*NameToken & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v13 + 352) & 0xFFFFFFFFFFFFFFF8)
      || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
    {
      goto LABEL_64;
    }
    uint64_t v14 = ((uint64_t)__p[1] & 4) != 0
        ? (void *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8) + 168))(__p)
        : __p[0];
    MEMORY[0x2455CF810](&v358, "anim");
    uint64_t v15 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v14, (uint64_t *)&v358);
    uint64_t v16 = v15 + 5;
    if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)(v15 + 5)) & 1) == 0) {
      break;
    }
    uint64_t v17 = v15[6];
    if ((v17 & 4) != 0)
    {
      uint64_t v72 = (*(uint64_t (**)(_DWORD *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(v16);
      goto LABEL_70;
    }
LABEL_10:
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v362, v16);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v362.__r_.__value_.__r.__words + 1, v16 + 1);
    MEMORY[0x2455CF810](v353, "joints");
    uint64_t v18 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v14, (uint64_t *)v353);
    uint64_t v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 5));
    long long v20 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)&v362.__r_.__value_.__r.__words[1] = *(_OWORD *)v19;
    long long v363 = v20;
    uint64_t v21 = *(void *)(v19 + 32);
    uint64_t v364 = v21;
    if (v21)
    {
      uint64_t v22 = (atomic_ullong *)(v21 - 16);
      if (*((void *)&v363 + 1)) {
        uint64_t v22 = (atomic_ullong *)*((void *)&v363 + 1);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    MEMORY[0x2455CF810](&v361, "animJoints");
    uint64_t v23 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v14, (uint64_t *)&v361);
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v23 + 5));
    long long v25 = *(_OWORD *)(v24 + 16);
    long long v365 = *(_OWORD *)v24;
    long long v366 = v25;
    uint64_t v26 = *(void *)(v24 + 32);
    uint64_t v367 = v26;
    if (v26)
    {
      uint64_t v27 = (atomic_ullong *)(v26 - 16);
      if (*((void *)&v366 + 1)) {
        uint64_t v27 = (atomic_ullong *)*((void *)&v366 + 1);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    MEMORY[0x2455CF810](&v352, "restTransforms");
    uint64_t v28 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v14, (uint64_t *)&v352);
    uint64_t v29 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v28 + 5));
    long long v30 = *(_OWORD *)(v29 + 16);
    long long v368 = *(_OWORD *)v29;
    long long v369 = v30;
    uint64_t v31 = *(void *)(v29 + 32);
    uint64_t v370 = v31;
    if (v31)
    {
      uint64_t v32 = (atomic_ullong *)(v31 - 16);
      if (*((void *)&v369 + 1)) {
        uint64_t v32 = (atomic_ullong *)*((void *)&v369 + 1);
      }
      atomic_fetch_add_explicit(v32, 1uLL, memory_order_relaxed);
    }
    MEMORY[0x2455CF810](v350, "rotations_samples");
    uint64_t v33 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v14, (uint64_t *)v350);
    uint64_t v34 = pxrInternal__aapl__pxrReserved__::VtValue::Get<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)(v33 + 5));
    long long v35 = *(_OWORD *)v34;
    uint64_t v372 = *(void *)(v34 + 16);
    long long v371 = v35;
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v373, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v34 + 24));
    MEMORY[0x2455CF810](&v347, "scales_samples");
    unint64_t v36 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v14, (uint64_t *)&v347);
    uint64_t v37 = pxrInternal__aapl__pxrReserved__::VtValue::Get<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)(v36 + 5));
    long long v38 = *(_OWORD *)v37;
    uint64_t v374 = *(void *)(v37 + 16);
    v373[1] = v38;
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v375, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v37 + 24));
    MEMORY[0x2455CF810](&v344, "translations_samples");
    uint8x8_t v39 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v14, (uint64_t *)&v344);
    uint64_t v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)(v39 + 5));
    long long v41 = *(_OWORD *)v40;
    uint64_t v376 = *(void *)(v40 + 16);
    v375[1] = v41;
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v377, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v40 + 24));
    uint64_t v42 = *((void *)&v356[0] + 1);
    if (*((void *)&v356[0] + 1) >= *(void *)&v356[1])
    {
      unint64_t v44 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)&v356[0] + 1) - *(void *)&v356[0]) >> 3);
      unint64_t v45 = v44 + 1;
      if (v44 + 1 > 0x108421084210842) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      if (0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*(void *)&v356[1] - *(void *)&v356[0]) >> 3) > v45) {
        unint64_t v45 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*(void *)&v356[1] - *(void *)&v356[0]) >> 3);
      }
      if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)&v356[1] - *(void *)&v356[0]) >> 3) >= 0x84210842108421) {
        unint64_t v46 = 0x108421084210842;
      }
      else {
        unint64_t v46 = v45;
      }
      __sz[0] = (std::string::size_type)&v356[1];
      if (v46)
      {
        if (v46 > 0x108421084210842) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v47 = (char *)operator new(248 * v46);
      }
      else
      {
        uint64_t v47 = 0;
      }
      uint64_t v48 = (uint64_t)&v47[248 * v44];
      *(void *)v382 = v47;
      *(void *)&v382[8] = v48;
      *(void *)&v382[24] = &v47[248 * v46];
      std::allocator_traits<std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::construct[abi:ne180100]<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,void>(v48, (uint64_t)&v362);
      uint64_t v49 = 0;
      *(void *)&v382[16] = v48 + 248;
      uint64_t v50 = *((void *)&v356[0] + 1);
      uint64_t v51 = *(void *)&v356[0];
      while (1)
      {
        uint64_t v52 = v49;
        uint64_t v53 = v50 + v49;
        if (v53 == v51) {
          break;
        }
        uint64_t v54 = v48 + v52;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v48 + v52 - 248), (_DWORD *)(v53 - 248));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v48 + v52 - 244), (_DWORD *)(v53 - 244));
        long long v55 = *(_OWORD *)(v53 - 224);
        *(_OWORD *)(v54 - 240) = *(_OWORD *)(v53 - 240);
        *(_OWORD *)(v54 - 224) = v55;
        uint64_t v56 = *(void *)(v53 - 208);
        *(void *)(v54 - 208) = v56;
        if (v56)
        {
          long long v57 = (atomic_ullong *)(v56 - 16);
          if (*(void *)(v54 - 216)) {
            long long v57 = *(atomic_ullong **)(v54 - 216);
          }
          atomic_fetch_add_explicit(v57, 1uLL, memory_order_relaxed);
        }
        long long v58 = *(_OWORD *)(v53 - 200);
        *(_OWORD *)(v54 - 184) = *(_OWORD *)(v53 - 184);
        *(_OWORD *)(v54 - 200) = v58;
        uint64_t v59 = *(void *)(v53 - 168);
        *(void *)(v54 - 168) = v59;
        if (v59)
        {
          uint64_t v60 = (atomic_ullong *)(v59 - 16);
          if (*(void *)(v48 + v52 - 176)) {
            uint64_t v60 = *(atomic_ullong **)(v48 + v52 - 176);
          }
          atomic_fetch_add_explicit(v60, 1uLL, memory_order_relaxed);
        }
        uint64_t v61 = v48 + v52;
        long long v62 = *(_OWORD *)(v53 - 144);
        *(_OWORD *)(v61 - 160) = *(_OWORD *)(v53 - 160);
        *(_OWORD *)(v61 - 144) = v62;
        uint64_t v63 = *(void *)(v53 - 128);
        *(void *)(v61 - 128) = v63;
        if (v63)
        {
          int v64 = (atomic_ullong *)(v63 - 16);
          if (*(void *)(v61 - 136)) {
            int v64 = *(atomic_ullong **)(v61 - 136);
          }
          atomic_fetch_add_explicit(v64, 1uLL, memory_order_relaxed);
        }
        long long v65 = *(_OWORD *)(v53 - 120);
        *(void *)(v61 - 104) = *(void *)(v53 - 104);
        *(_OWORD *)(v61 - 120) = v65;
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v61 - 96), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v50 + v52 - 96));
        uint64_t v66 = v48 + v52;
        long long v67 = *(_OWORD *)(v53 - 80);
        *(void *)(v66 - 64) = *(void *)(v53 - 64);
        *(_OWORD *)(v66 - 80) = v67;
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v48 + v52 - 56), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v50 + v52 - 56));
        long long v68 = *(_OWORD *)(v53 - 40);
        *(void *)(v66 - 24) = *(void *)(v53 - 24);
        *(_OWORD *)(v66 - 40) = v68;
        uint64_t v49 = v52 - 248;
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v48 + v52 - 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v50 + v52 - 16));
      }
      uint64_t v69 = *(void *)&v356[1];
      long long v70 = *(_OWORD *)&v382[16];
      uint64_t v329 = *(void *)&v382[16];
      long long v71 = v356[0];
      *(void *)&v356[0] = v48 + v52;
      *(_OWORD *)&v382[8] = v71;
      *(_OWORD *)((char *)v356 + 8) = v70;
      *(void *)&v382[24] = v69;
      *(void *)v382 = v71;
      std::__split_buffer<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo> &>::~__split_buffer((uint64_t)v382);
      uint64_t v43 = v329;
      a4 = v304;
      a5 = v305;
    }
    else
    {
      std::allocator_traits<std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::construct[abi:ne180100]<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,void>(*((uint64_t *)&v356[0] + 1), (uint64_t)&v362);
      uint64_t v43 = v42 + 248;
    }
    *((void *)&v356[0] + 1) = v43;
    realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::SkelPoseInfo::~SkelPoseInfo(&v362);
    if ((v344 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v344 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v347 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v347 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (((uint64_t)v350[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v350[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v352.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v352.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v361.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v361.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (((uint64_t)v353[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v353[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v358 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v358 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
LABEL_64:
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    ++v11;
    uint64_t v10 = *a4;
    if (v11 >= (a4[1] - *a4) >> 3)
    {
      uint64_t v73 = *(void *)&v356[0];
      if (*((void *)&v356[0] + 1) == *(void *)&v356[0])
      {
        float64x2_t v308 = (float64x2_t)xmmword_23F7BA710;
        LODWORD(v74) = 1;
        uint64_t v73 = *((void *)&v356[0] + 1);
      }
      else
      {
        unint64_t v74 = (*((void *)&v356[0] + 1) - *(void *)&v356[0]) / 248;
        if (v74 <= 1) {
          unint64_t v74 = 1;
        }
        int8x16_t v75 = (int8x16_t)xmmword_23F7BA710;
        uint64_t v76 = (_OWORD *)(*(void *)&v356[0] + 208);
        do
        {
          v77.f64[0] = *((float64_t *)v76 - 5);
          v77.f64[1] = *((float64_t *)v76 - 9);
          v78.f64[0] = *((float64_t *)v76 - 10);
          v78.f64[1] = *((float64_t *)v76 - 4);
          int8x16_t v79 = vbslq_s8((int8x16_t)vcgtq_f64(v78, v77), *(int8x16_t *)((char *)v76 - 40), *((int8x16_t *)v76 - 5));
          int8x16_t v80 = *(int8x16_t *)v76;
          uint64_t v76 = (_OWORD *)((char *)v76 + 248);
          *(void *)&v77.f64[0] = v80.i64[0];
          *(void *)&v77.f64[1] = v79.i64[1];
          *(void *)&v78.f64[0] = v79.i64[0];
          *(void *)&v78.f64[1] = v80.i64[1];
          int8x16_t v81 = vbslq_s8((int8x16_t)vcgtq_f64(v78, v77), v80, v79);
          *(void *)&v82.f64[0] = v81.i64[0];
          *(void *)&v82.f64[1] = v75.i64[1];
          *(void *)&v77.f64[0] = v75.i64[0];
          *(void *)&v77.f64[1] = v81.i64[1];
          int8x16_t v75 = vbslq_s8((int8x16_t)vcgtq_f64(v77, v82), v81, v75);
          --v74;
        }
        while (v74);
        float64x2_t v308 = (float64x2_t)v75;
      }
LABEL_79:
      uint64_t v83 = *(void *)(a2 + 16);
      if (v83 && *(void *)(v83 + 200))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v84 = *(void *)&v356[0];
        if (*((void *)&v356[0] + 1) != *(void *)&v356[0])
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v352, *(_DWORD **)&v356[0]);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v352.__r_.__value_.__r.__words + 4, (_DWORD *)(v84 + 4));
        }
        long long v358 = 0u;
        float64x2_t v359 = 0u;
        LODWORD(v360) = 1065353216;
        v295 = operator new(0x260uLL);
        v295[1] = 0;
        v295[2] = 0;
        void *v295 = &unk_26F3322D0;
        realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder((realityio::SkeletalAnimationAssetBuilder *)(v295 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v352);
        uint64_t v355 = 0;
        *(_OWORD *)v353 = 0u;
        long long v354 = 0u;
        uint64_t v296 = REEngineGetServiceLocator();
        MEMORY[0x2455CDC30](v296);
        operator new();
      }
      v353[1] = 0;
      v353[0] = 0;
      *(void *)&long long v354 = 0;
      char v85 = 0;
      uint64_t v86 = 0;
      if (v74)
      {
        float32x2_t v298 = vcvt_f32_f64(v308);
LABEL_86:
        realityio::entityPath(a3, (uint64_t *)__p);
        uint64_t Text = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        std::string::basic_string[abi:ne180100]<0>(v382, Text);
        if ((v382[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v362, *(const std::string::value_type **)v382, *(std::string::size_type *)&v382[8]);
          *(float32x2_t *)&long long v363 = v298;
          DWORD2(v363) = -8388609;
          uint64_t v364 = 0;
          long long v365 = 0uLL;
          if ((v382[23] & 0x80000000) != 0) {
            operator delete(*(void **)v382);
          }
        }
        else
        {
          std::string v362 = *(std::string *)v382;
          *(float32x2_t *)&long long v363 = v298;
          DWORD2(v363) = -8388609;
          uint64_t v364 = 0;
          long long v365 = 0uLL;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        if (v86 != v85)
        {
          uint64_t v277 = 0;
          if ((unint64_t)(v86 - v85) <= 1) {
            uint64_t v278 = 1;
          }
          else {
            uint64_t v278 = v86 - v85;
          }
          v279 = v85;
          do
          {
            RETimelineDefinitionGetStartTime();
            float v281 = v280;
            RETimelineDefinitionGetEndTime();
            float v283 = v282;
            v284 = v353[0];
            std::string::size_type TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
            v286 = &v284[v277];
            v287 = (char *)&v284[v277];
            if (SHIBYTE(v284[v277].__r_.__value_.__r.__words[2]) < 0) {
              v287 = (char *)v286->__r_.__value_.__r.__words[0];
            }
            uint64_t v288 = realityio::TimelineGroupFactory::addTimeline((char *)&v362, TimelineAsset, (long long *)&v284[v277], v287, v281, v283);
            if ((v288 & 1) == 0)
            {
              v289 = *(id *)(realityio::logObjects((realityio *)v288) + 24);
              if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
              {
                if (SHIBYTE(v286->__r_.__value_.__r.__words[2]) < 0) {
                  v286 = (std::string *)v286->__r_.__value_.__r.__words[0];
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a3);
                uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
                if (*(char *)(Name + 23) >= 0) {
                  uint64_t v291 = Name;
                }
                else {
                  uint64_t v291 = *(void *)Name;
                }
                realityio::entityPath(a3, (uint64_t *)&v358);
                uint64_t v292 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v358);
                *(_DWORD *)v382 = 136315650;
                *(void *)&v382[4] = v286;
                *(_WORD *)&v382[12] = 2080;
                *(void *)&v382[14] = v291;
                *(_WORD *)&v382[22] = 2080;
                *(void *)&v382[24] = v292;
                _os_log_error_impl(&dword_23F4EA000, v289, OS_LOG_TYPE_ERROR, "ERROR ADDING TIME LINE %s to %s entity %s\n", v382, 0x20u);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v358);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
              }
            }
            RERelease();
            ++v277;
            ++v279;
            --v278;
          }
          while (v278);
        }
        __p[0] = (void *)realityio::TimelineGroupFactory::createTimelineAsset((float *)&v362, v306, "default scene animation");
        if (__p[0]) {
          RERetain();
        }
        RERelease();
        __sz[0] = 0;
        memset(v382, 0, sizeof(v382));
        New = (void **)pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_AllocateNew((uint64_t)v382, 1uLL);
        std::uninitialized_copy[abi:ne180100]<realityio::WrappedRERef<REAsset *> *,realityio::WrappedRERef<REAsset *> *>(0, 0, (uint64_t)New);
        v294 = __p[0];
        void *New = __p[0];
        if (v294) {
          RERetain();
        }
        pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef(v382);
        __sz[0] = (std::string::size_type)New;
        ++*(void *)v382;
        *(void *)(a6 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
      v299 = 0;
      uint64_t v88 = 0;
      double v307 = v308.f64[1] - v308.f64[0];
      int v325 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 254);
      std::string::size_type v300 = *MEMORY[0x263F8C2B8];
      std::string::size_type v301 = *(void *)(MEMORY[0x263F8C2B8] + 64);
      std::string::size_type v302 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      float32x2_t v298 = vcvt_f32_f64(v308);
      while (2)
      {
        memset(&v361, 0, sizeof(v361));
        uint64_t v310 = v88;
        uint64_t v89 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v73 + 248 * v88);
        unint64_t v90 = *((void *)v89 + 1);
        uint64_t v89 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)((char *)v89 + 8);
        std::vector<RESRT const*>::reserve((void **)&v361.__r_.__value_.__l.__data_, v90);
        v309 = v86;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v89);
        uint64_t v91 = v73 + 248 * v310;
        uint64_t v94 = *(void **)(v91 + 40);
        uint64_t v93 = (void *)(v91 + 40);
        uint64_t v92 = v94;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v89);
        v324 = v89;
        unint64_t v95 = *(void *)v89;
        uint64_t v96 = *v93 + 8 * v95;
        if (v94 != (void *)v96)
        {
          while (2)
          {
            unint64_t v97 = *v92 & 0xFFFFFFFFFFFFFFF8;
            if (!v97)
            {
              uint64_t v98 = "";
              goto LABEL_98;
            }
            if (*(char *)(v97 + 39) < 0)
            {
              uint64_t v98 = *(const char **)(v97 + 16);
              if (*(void *)(v97 + 24) <= 1uLL) {
                goto LABEL_98;
              }
            }
            else
            {
              uint64_t v98 = (const char *)(v97 + 16);
              if (*(unsigned __int8 *)(v97 + 39) < 2u) {
                goto LABEL_98;
              }
            }
            if (*v98 == 47) {
              ++v98;
            }
LABEL_98:
            std::string::size_type size = v361.__r_.__value_.__l.__size_;
            if (v361.__r_.__value_.__l.__size_ >= v361.__r_.__value_.__r.__words[2])
            {
              uint64_t v101 = (uint64_t)(v361.__r_.__value_.__l.__size_ - v361.__r_.__value_.__r.__words[0]) >> 3;
              if ((unint64_t)(v101 + 1) >> 61) {
                std::vector<char const*>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v102 = (uint64_t)(v361.__r_.__value_.__r.__words[2] - v361.__r_.__value_.__r.__words[0]) >> 2;
              if (v102 <= v101 + 1) {
                unint64_t v102 = v101 + 1;
              }
              if (v361.__r_.__value_.__r.__words[2] - v361.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v102;
              }
              if (v103) {
                uint64_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v361.__r_.__value_.__r.__words[2], v103);
              }
              else {
                uint64_t v104 = 0;
              }
              uint64_t v105 = (const char **)&v104[8 * v101];
              *uint64_t v105 = v98;
              std::string::size_type v100 = (std::string::size_type)(v105 + 1);
              uint64_t v106 = (char *)v361.__r_.__value_.__l.__size_;
              std::string::size_type v107 = v361.__r_.__value_.__r.__words[0];
              if (v361.__r_.__value_.__l.__size_ != v361.__r_.__value_.__r.__words[0])
              {
                do
                {
                  uint64_t v108 = (const char *)*((void *)v106 - 1);
                  v106 -= 8;
                  *--uint64_t v105 = v108;
                }
                while (v106 != (char *)v107);
                uint64_t v106 = (char *)v361.__r_.__value_.__r.__words[0];
              }
              v361.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
              v361.__r_.__value_.__l.__size_ = v100;
              v361.__r_.__value_.__r.__words[2] = (std::string::size_type)&v104[8 * v103];
              if (v106) {
                operator delete(v106);
              }
            }
            else
            {
              *(void *)v361.__r_.__value_.__l.__size_ = v98;
              std::string::size_type v100 = size + 8;
            }
            v361.__r_.__value_.__l.__size_ = v100;
            if (++v92 == (void *)v96)
            {
              uint64_t v109 = v324;
              unint64_t v95 = *(void *)v324;
              goto LABEL_117;
            }
            continue;
          }
        }
        uint64_t v109 = v324;
LABEL_117:
        v333 = v85;
        if (v95)
        {
          if (v95 >> 60) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v110 = (char *)operator new(16 * v95);
          v340 = v110;
          uint64_t v111 = v110;
          do
          {
            *uint64_t v111 = 0;
            *((void *)v111 + 1) = 0;
            v111 += 16;
          }
          while (v111 != &v110[16 * v95]);
          if (*(void *)v109)
          {
            unint64_t v112 = 0;
            uint64_t v113 = v73 + 248 * v310;
            uint64_t v114 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v113 + 48);
            uint64_t v115 = (void **)(v113 + 80);
            do
            {
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v114);
              uint64_t v116 = *v115;
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v114);
              uint64_t v117 = *v115;
              uint64_t v118 = *(void *)v114;
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v324);
              uint64_t v119 = &v117[v118];
              if (v116 != v119)
              {
                do
                {
                  if ((*v116 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*v93 + 8 * v112) & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_127;
                  }
                  ++v116;
                }
                while (v116 != v119);
                uint64_t v116 = &v117[v118];
              }
LABEL_127:
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v114);
              if (v116 == &(*v115)[*(void *)v114])
              {
                char v121 = 0;
                uint64_t v120 = v112;
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v114);
                uint64_t v120 = v116 - *v115;
                char v121 = 1;
              }
              uint64_t v122 = &v340[16 * v112];
              char *v122 = v121;
              *((void *)v122 + 1) = v120;
              ++v112;
            }
            while (*(void *)v324 > v112);
            char v85 = v333;
            uint64_t v109 = v324;
          }
        }
        else
        {
          v340 = 0;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v362);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v362.__r_.__value_.__r.__words[2], (uint64_t)"[", 1);
        uint64_t v123 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"]", 1);
        realityio::entityPath(a3, (uint64_t *)v382);
        uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v382);
        if (*(char *)(String + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v352, *(const std::string::value_type **)String, *(void *)(String + 8));
        }
        else
        {
          long long v125 = *(_OWORD *)String;
          v352.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
          *(_OWORD *)&v352.__r_.__value_.__l.__data_ = v125;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v382);
        std::string::basic_string[abi:ne180100]<0>(v382, "SkeletalPose.SkeletalPoses");
        std::stringbuf::str();
        if ((SBYTE7(v380) & 0x80u) == 0) {
          uint64_t v126 = __p;
        }
        else {
          uint64_t v126 = (void **)__p[0];
        }
        if ((SBYTE7(v380) & 0x80u) == 0) {
          std::string::size_type v127 = BYTE7(v380);
        }
        else {
          std::string::size_type v127 = (std::string::size_type)__p[1];
        }
        uint64_t v128 = std::string::append((std::string *)v382, (const std::string::value_type *)v126, v127);
        long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
        std::string::size_type v351 = v128->__r_.__value_.__r.__words[2];
        *(_OWORD *)v350 = v129;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v380) < 0) {
          operator delete(__p[0]);
        }
        if ((v382[23] & 0x80000000) != 0) {
          operator delete(*(void **)v382);
        }
        *(void *)v382 = 0;
        __p[0] = 0;
        *(void *)&long long v358 = 0;
        v347 = 0;
        realityio::getAnimInputControlsFromInputs(v304, v305, (double *)v382, __p, &v358, (double *)&v347);
        if (v308.f64[1] >= v308.f64[0]) {
          unint64_t v130 = (unint64_t)(v307 * *(double *)v382 + 1.0 + 0.5);
        }
        else {
          unint64_t v130 = 0;
        }
        std::vector<RESRT>::vector(&v347, v130);
        v345 = 0;
        v344 = 0;
        v346 = 0;
        std::vector<unsigned long>::reserve(&v344, v130);
        if (v130)
        {
          uint64_t v315 = 0;
          unint64_t v311 = v130;
          uint64_t v131 = v73 + 248 * v310;
          v321 = (double *)(v131 + 128);
          v322 = (double *)(v131 + 168);
          v319 = (void *)(v131 + 120);
          v320 = (double *)(v131 + 208);
          v331 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v131 + 192);
          v332 = (void *)(v131 + 200);
          v328 = (uint64_t **)(v131 + 152);
          v330 = (void *)(v131 + 160);
          v317 = (double *)(v131 + 136);
          v318 = (double *)(v131 + 176);
          v313 = (double *)(v131 + 144);
          v314 = (double *)(v131 + 184);
          double v132 = v307 / ((double)v130 + -1.0);
          v326 = (uint64_t **)(v131 + 232);
          v327 = (void *)(v131 + 240);
          v316 = (double *)(v131 + 216);
          v312 = (double *)(v131 + 224);
          double v133 = v308.f64[0];
          while (1)
          {
            unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v348 - (unsigned char *)v347) >> 4);
            uint64_t v135 = v345;
            if (v345 >= v346)
            {
              uint64_t v137 = (unint64_t *)v344;
              uint64_t v138 = ((char *)v345 - (unsigned char *)v344) >> 3;
              unint64_t v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 61) {
                std::vector<char const*>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v140 = (char *)v346 - (unsigned char *)v344;
              if (((char *)v346 - (unsigned char *)v344) >> 2 > v139) {
                unint64_t v139 = v140 >> 2;
              }
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v139;
              }
              if (v141)
              {
                uint64_t v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v346, v141);
                uint64_t v135 = v345;
                uint64_t v137 = (unint64_t *)v344;
              }
              else
              {
                uint64_t v142 = 0;
              }
              uint64_t v143 = (unint64_t *)&v142[8 * v138];
              *uint64_t v143 = v134;
              uint64_t v136 = v143 + 1;
              while (v135 != v137)
              {
                unint64_t v144 = *--v135;
                *--uint64_t v143 = v144;
              }
              v344 = v143;
              v345 = v136;
              v346 = (unint64_t *)&v142[8 * v141];
              if (v137) {
                operator delete(v137);
              }
            }
            else
            {
              unint64_t *v345 = v134;
              uint64_t v136 = v135 + 1;
            }
            v345 = v136;
            if (*(void *)v109) {
              break;
            }
LABEL_256:
            double v133 = v132 + v133;
            if (++v315 == v311) {
              goto LABEL_257;
            }
          }
          uint64_t v145 = 0;
          while (2)
          {
            DWORD2(v343) = 0;
            *(void *)&long long v343 = 0;
            LODWORD(v341.f64[1]) = 0;
            v341.f64[0] = 0.0;
            uint64_t v146 = &v340[16 * v145];
            unint64_t v147 = *((void *)v146 + 1);
            if (*v146)
            {
              unsigned __int16 v148 = v325;
              unsigned __int16 v149 = v325;
              unsigned __int16 v150 = v325;
              if (!v325)
              {
                unsigned __int16 v149 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)0x3F800000);
                unsigned __int16 v148 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)0x3F800000);
                unsigned __int16 v150 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)0x3F800000);
              }
              if ((*v332 & 4) != 0) {
                uint64_t v151 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((*v332 & 0xFFFFFFFFFFFFFFF8) + 168))(v331);
              }
              else {
                uint64_t v151 = *(uint64_t **)v331;
              }
              uint64_t v152 = *v151;
              if (*v151)
              {
                double v153 = *v322;
                if (*v322 >= v133)
                {
                  uint64_t v166 = v151[4];
                  long long v157 = *(_OWORD *)(v166 + 16);
                  *(_OWORD *)v382 = *(_OWORD *)v166;
                  *(_OWORD *)&v382[16] = v157;
                  std::string::size_type v158 = *(void *)(v166 + 32);
                  goto LABEL_182;
                }
                if (*v318 > v133
                  && (double v154 = *v314, v155 = (int)((v133 - v153) / *v314), v152 - 2 >= (unint64_t)v155))
                {
                  uint64_t v205 = v155;
                  uint64_t v206 = v151[4];
                  v207 = (unint64_t *)(v206 + 40 * v155);
                  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::VtArray((uint64_t)v382, *v207);
                  if (*v207 == *(void *)(v206 + 40 * (v205 + 1)))
                  {
                    uint64_t v208 = *(void *)v382;
                    if (*(void *)v382)
                    {
                      uint64_t v209 = 0;
                      double v210 = (v133 - (v153 + (double)(int)v205 * v154)) / v154;
                      v337 = (void *)(v206 + 40 * (int)v205 + 32);
                      v211 = (uint64_t *)(v206 + 40 * (v205 + 1) + 32);
                      do
                      {
                        v212 = (int *)(*v337 + v209);
                        uint64_t v213 = *v211;
                        int v214 = *v212;
                        WORD2(__p[0]) = *((_WORD *)v212 + 2);
                        LODWORD(__p[0]) = v214;
                        v215 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=((unsigned __int16 *)__p, 1.0 - v210);
                        v216 = (int *)(v213 + v209);
                        uint64_t v217 = v215[2];
                        uint64_t v218 = *(unsigned int *)v215;
                        int v219 = *v216;
                        WORD2(__p[0]) = *((_WORD *)v216 + 2);
                        LODWORD(__p[0]) = v219;
                        v220 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=((unsigned __int16 *)__p, v210);
                        int v221 = *(_DWORD *)v220;
                        WORD2(v358) = v220[2];
                        LODWORD(v358) = v221;
                        WORD2(__p[0]) = (v218 | (unint64_t)(v217 << 32)) >> 32;
                        LODWORD(__p[0]) = v218;
                        v222 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator+=((unsigned __int16 *)__p, (unsigned __int16 *)&v358);
                        uint64_t v223 = v222[2];
                        uint64_t v224 = *(unsigned int *)v222;
                        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v382);
                        std::string::size_type v225 = __sz[0] + v209;
                        *(_DWORD *)std::string::size_type v225 = v224;
                        *(_WORD *)(v225 + 4) = (v224 | (unint64_t)(v223 << 32)) >> 32;
                        v209 += 6;
                        --v208;
                        uint64_t v109 = v324;
                      }
                      while (v208);
                    }
                  }
                }
                else
                {
                  uint64_t v156 = v151[4] + 40 * v152;
                  long long v157 = *(_OWORD *)(v156 - 24);
                  *(_OWORD *)v382 = *(_OWORD *)(v156 - 40);
                  *(_OWORD *)&v382[16] = v157;
                  std::string::size_type v158 = *(void *)(v156 - 8);
LABEL_182:
                  __sz[0] = v158;
                  if (v158)
                  {
                    uint64_t v167 = (atomic_ullong *)(v158 - 16);
                    if (*(void *)&v382[24]) {
                      uint64_t v167 = *(atomic_ullong **)&v382[24];
                    }
                    atomic_fetch_add_explicit(v167, 1uLL, memory_order_relaxed);
                  }
                }
              }
              else
              {
                __sz[0] = 0;
                HIDWORD(v157) = 0;
                memset(v382, 0, sizeof(v382));
              }
              if (*(void *)v382 > v147)
              {
                pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v382);
                uint64_t v168 = (unsigned __int16 *)(__sz[0] + 6 * v147);
                unsigned __int16 v149 = *v168;
                unsigned __int16 v148 = v168[1];
                unsigned __int16 v150 = v168[2];
              }
              LODWORD(v157) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * v149);
              DWORD1(v157) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * v148);
              DWORD2(v157) = *(_DWORD *)(MEMORY[0x263F90640] + 4 * v150);
              long long v343 = v157;
              if ((*v330 & 4) != 0) {
                uint64_t v169 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((*v330 & 0xFFFFFFFFFFFFFFF8) + 168))(v328);
              }
              else {
                uint64_t v169 = *v328;
              }
              uint64_t v170 = *v169;
              if (*v169)
              {
                double v171 = *v321;
                char v85 = v333;
                if (*v321 >= v133)
                {
                  uint64_t v177 = v169[4];
                  long long v178 = *(_OWORD *)(v177 + 16);
                  *(_OWORD *)std::string __p = *(_OWORD *)v177;
                  long long v380 = v178;
                  uint64_t v176 = *(void *)(v177 + 32);
                  goto LABEL_197;
                }
                if (*v317 > v133
                  && (double v172 = *v313, v173 = (int)((v133 - v171) / *v313), v170 - 2 >= (unint64_t)v173))
                {
                  uint64_t v226 = v173;
                  uint64_t v227 = v169[4];
                  v228 = (unint64_t *)(v227 + 40 * v173);
                  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::VtArray((uint64_t)__p, *v228);
                  uint64_t v229 = v226 + 1;
                  if (*v228 == *(void *)(v227 + 40 * (v226 + 1)))
                  {
                    v230 = __p[0];
                    if (__p[0])
                    {
                      v231 = 0;
                      double v232 = (v133 - (v171 + (double)(int)v226 * v172)) / v172;
                      v233 = (void *)(v227 + 40 * (int)v226 + 32);
                      v234 = (void *)(v227 + 40 * v229 + 32);
                      float v235 = 1.0 - v232;
                      float v334 = v235;
                      *(float *)&double v232 = v232;
                      float v323 = *(float *)&v232;
                      do
                      {
                        *(_OWORD *)v335 = *(_OWORD *)(*v234 + 16 * (void)v231);
                        float32x4_t v338 = *(float32x4_t *)(*v233 + 16 * (void)v231);
                        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
                        *(float32x4_t *)(v381 + 16 * (void)v231) = vaddq_f32(vmulq_n_f32(v338, v334), vmulq_n_f32(*(float32x4_t *)v335, v323));
                        v231 = (char *)v231 + 1;
                      }
                      while (v230 != v231);
                    }
                  }
                }
                else
                {
                  uint64_t v174 = v169[4] + 40 * v170;
                  long long v175 = *(_OWORD *)(v174 - 24);
                  *(_OWORD *)std::string __p = *(_OWORD *)(v174 - 40);
                  long long v380 = v175;
                  uint64_t v176 = *(void *)(v174 - 8);
LABEL_197:
                  *(void *)&long long v381 = v176;
                  if (v176)
                  {
                    uint64_t v179 = (atomic_ullong *)(v176 - 16);
                    if (*((void *)&v380 + 1)) {
                      uint64_t v179 = (atomic_ullong *)*((void *)&v380 + 1);
                    }
                    atomic_fetch_add_explicit(v179, 1uLL, memory_order_relaxed);
                  }
                }
              }
              else
              {
                *(void *)&long long v381 = 0;
                long long v380 = 0u;
                *(_OWORD *)std::string __p = 0u;
                char v85 = v333;
              }
              long long v180 = xmmword_23F7BA720;
              if (__p[0] > (void *)v147)
              {
                pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
                long long v180 = *(_OWORD *)(v381 + 16 * v147);
              }
              long long v342 = v180;
              if ((*v327 & 4) != 0) {
                uint64_t v181 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((*v327 & 0xFFFFFFFFFFFFFFF8) + 168))(v326);
              }
              else {
                uint64_t v181 = *v326;
              }
              uint64_t v182 = *v181;
              if (*v181)
              {
                double v183 = *v320;
                if (*v320 >= v133)
                {
                  uint64_t v189 = (long long *)v181[4];
                  float64x2_t v187 = (float64x2_t)v189[1];
                  long long v358 = *v189;
                  float64x2_t v359 = v187;
                  uint64_t v188 = *((void *)v189 + 4);
                  goto LABEL_212;
                }
                if (*v316 > v133
                  && (double v184 = *v312, v185 = (int)((v133 - v183) / *v312), v182 - 2 >= (unint64_t)v185))
                {
                  uint64_t v236 = v185;
                  uint64_t v237 = v181[4];
                  v238 = (unint64_t *)(v237 + 40 * v185);
                  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray((uint64_t)&v358, *v238);
                  if (*v238 == *(void *)(v237 + 40 * (v236 + 1)))
                  {
                    uint64_t v239 = v358;
                    if ((void)v358)
                    {
                      uint64_t v240 = 0;
                      v241 = (void *)(v237 + 40 * (int)v236 + 32);
                      v242 = (void *)(v237 + 40 * (v236 + 1) + 32);
                      double v339 = (v133 - (v183 + (double)(int)v236 * v184)) / v184;
                      double v336 = 1.0 - v339;
                      do
                      {
                        v243 = (float32x2_t *)(*v241 + v240);
                        v244 = (float32x2_t *)(*v242 + v240);
                        float v245 = v243[1].f32[0];
                        float32x2_t v246 = *v243;
                        float32x2_t v247 = *v244;
                        float v248 = v244[1].f32[0];
                        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v358);
                        float v249 = v336 * v245;
                        float v250 = v339 * v248;
                        v251 = (float32x2_t *)(v360 + v240);
                        float64x2_t v187 = vmulq_n_f64(vcvtq_f64_f32(v246), v336);
                        float32x2_t *v251 = vadd_f32(vcvt_f32_f64(v187), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v247), v339)));
                        v251[1].f32[0] = v249 + v250;
                        v240 += 12;
                        --v239;
                      }
                      while (v239);
                    }
                  }
                }
                else
                {
                  uint64_t v186 = v181[4] + 40 * v182;
                  float64x2_t v187 = *(float64x2_t *)(v186 - 24);
                  long long v358 = *(_OWORD *)(v186 - 40);
                  float64x2_t v359 = v187;
                  uint64_t v188 = *(void *)(v186 - 8);
LABEL_212:
                  uint64_t v360 = v188;
                  if (v188)
                  {
                    uint64_t v190 = (atomic_ullong *)(v188 - 16);
                    if (*(void *)&v359.f64[1]) {
                      uint64_t v190 = *(atomic_ullong **)&v359.f64[1];
                    }
                    atomic_fetch_add_explicit(v190, 1uLL, memory_order_relaxed);
                  }
                }
              }
              else
              {
                uint64_t v360 = 0;
                HIDWORD(v187.f64[1]) = 0;
                long long v358 = 0u;
                float64x2_t v359 = 0u;
              }
              if ((unint64_t)v358 <= v147)
              {
                v187.f64[0] = 0.0;
                int v192 = 0;
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v358);
                uint64_t v191 = v360 + 12 * v147;
                v187.f64[0] = *(float64_t *)v191;
                int v192 = *(_DWORD *)(v191 + 8);
              }
              LODWORD(v187.f64[1]) = v192;
              float64x2_t v341 = v187;
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v358);
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v382);
            }
            else
            {
              uint64_t v159 = (long long *)(*v319 + (v147 << 7));
              long long v160 = *v159;
              long long v161 = v159[1];
              long long v162 = v159[2];
              long long v384 = v159[3];
              *(_OWORD *)__sz = v162;
              *(_OWORD *)&v382[16] = v161;
              *(_OWORD *)v382 = v160;
              long long v163 = v159[4];
              long long v164 = v159[5];
              long long v165 = v159[6];
              long long v388 = v159[7];
              long long v387 = v165;
              long long v386 = v164;
              long long v385 = v163;
              MEMORY[0x2455CE5D0](__p, v382);
              REDecomposeMatrix();
            }
            uint64_t v193 = v348;
            if ((unint64_t)v348 >= v349)
            {
              unint64_t v195 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v348 - (unsigned char *)v347) >> 4);
              unint64_t v196 = v195 + 1;
              if (v195 + 1 > 0x555555555555555) {
                std::vector<char const*>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v349 - (void)v347) >> 4) > v196) {
                unint64_t v196 = 0x5555555555555556 * ((uint64_t)(v349 - (void)v347) >> 4);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v349 - (void)v347) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v197 = 0x555555555555555;
              }
              else {
                unint64_t v197 = v196;
              }
              if (v197) {
                uint64_t v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)&v349, v197);
              }
              else {
                uint64_t v198 = 0;
              }
              uint64_t v199 = &v198[48 * v195];
              *(_OWORD *)uint64_t v199 = v343;
              *((_OWORD *)v199 + 1) = v342;
              *((float64x2_t *)v199 + 2) = v341;
              uint64_t v200 = (char *)v348;
              uint64_t v201 = (char *)v347;
              v202 = v199;
              if (v348 != v347)
              {
                do
                {
                  long long v203 = *((_OWORD *)v200 - 3);
                  long long v204 = *((_OWORD *)v200 - 1);
                  *((_OWORD *)v202 - 2) = *((_OWORD *)v200 - 2);
                  *((_OWORD *)v202 - 1) = v204;
                  *((_OWORD *)v202 - 3) = v203;
                  v202 -= 48;
                  v200 -= 48;
                }
                while (v200 != v201);
                uint64_t v200 = v201;
              }
              uint64_t v194 = v199 + 48;
              v347 = v202;
              v348 = v199 + 48;
              unint64_t v349 = (unint64_t)&v198[48 * v197];
              if (v200) {
                operator delete(v200);
              }
            }
            else
            {
              *(_OWORD *)v348 = v343;
              v193[1] = v342;
              uint64_t v194 = v193 + 3;
              v193[2] = v341;
            }
            v348 = v194;
            if (*(void *)v109 <= (unint64_t)++v145) {
              goto LABEL_256;
            }
            continue;
          }
        }
LABEL_257:
        v252 = (unint64_t *)v344;
        if (v361.__r_.__value_.__l.__size_ == v361.__r_.__value_.__r.__words[0] || v345 == v344)
        {
          if (!v344) {
            goto LABEL_282;
          }
        }
        else
        {
          memset(v382, 0, 24);
          std::vector<RESRT const*>::reserve((void **)v382, ((char *)v345 - (unsigned char *)v344) >> 3);
          v253 = (unint64_t *)v344;
          v254 = v345;
          if (v344 != v345)
          {
            v255 = *(void **)&v382[8];
            do
            {
              v256 = (char *)v347 + 48 * *v253;
              if ((unint64_t)v255 >= *(void *)&v382[16])
              {
                uint64_t v257 = ((uint64_t)v255 - *(void *)v382) >> 3;
                if ((unint64_t)(v257 + 1) >> 61) {
                  std::vector<char const*>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v258 = (uint64_t)(*(void *)&v382[16] - *(void *)v382) >> 2;
                if (v258 <= v257 + 1) {
                  unint64_t v258 = v257 + 1;
                }
                if (*(void *)&v382[16] - *(void *)v382 >= 0x7FFFFFFFFFFFFFF8uLL) {
                  unint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v259 = v258;
                }
                if (v259) {
                  v260 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v382[16], v259);
                }
                else {
                  v260 = 0;
                }
                v261 = &v260[8 * v257];
                *(void *)v261 = v256;
                v255 = v261 + 8;
                v262 = *(char **)&v382[8];
                v263 = *(char **)v382;
                if (*(void *)&v382[8] != *(void *)v382)
                {
                  do
                  {
                    uint64_t v264 = *((void *)v262 - 1);
                    v262 -= 8;
                    *((void *)v261 - 1) = v264;
                    v261 -= 8;
                  }
                  while (v262 != v263);
                  v262 = *(char **)v382;
                }
                *(void *)v382 = v261;
                *(void *)&v382[8] = v255;
                *(void *)&v382[16] = &v260[8 * v259];
                if (v262) {
                  operator delete(v262);
                }
              }
              else
              {
                *v255++ = v256;
              }
              *(void *)&v382[8] = v255;
              ++v253;
            }
            while (v253 != v254);
          }
          uint64_t SampledSkeletalPoseAnimation = RETimelineDefinitionCreateSampledSkeletalPoseAnimation();
          RETimelineDefinitionSetFillMode();
          RETimelineDefinitionSetTargetPath();
          RETimelineDefinitionSetAdditive();
          RETimelineDefinitionSetFrameInterval();
          RETimelineDefinitionSetStartTime();
          RETimelineDefinitionSetEndTime();
          RETimelineDefinitionSetSkeletalPoses();
          if (v309 >= v299)
          {
            uint64_t v266 = v309 - v85;
            unint64_t v267 = v266 + 1;
            if ((unint64_t)(v266 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            if (((char *)v299 - (char *)v85) >> 2 > v267) {
              unint64_t v267 = ((char *)v299 - (char *)v85) >> 2;
            }
            if ((unint64_t)((char *)v299 - (char *)v85) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v268 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v268 = v267;
            }
            if (v268)
            {
              if (v268 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v269 = (char *)operator new(8 * v268);
            }
            else
            {
              v269 = 0;
            }
            v270 = (uint64_t *)&v269[8 * v266];
            uint64_t *v270 = SampledSkeletalPoseAnimation;
            v271 = v270 + 1;
            for (uint64_t i = v309; i != v85; --i)
            {
              uint64_t v273 = *(i - 1);
              *--v270 = v273;
            }
            v299 = (uint64_t *)&v269[8 * v268];
            if (v85) {
              operator delete(v85);
            }
            char v85 = v270;
            v309 = v271;
          }
          else
          {
            *v309++ = SampledSkeletalPoseAnimation;
          }
          v274 = v353[1];
          if (v353[1] >= (std::string *)v354)
          {
            v276 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v353, (long long *)&v352);
          }
          else
          {
            if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v353[1], v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v275 = *(_OWORD *)&v352.__r_.__value_.__l.__data_;
              v353[1]->__r_.__value_.__r.__words[2] = v352.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v274->__r_.__value_.__l.__data_ = v275;
            }
            v276 = v274 + 1;
          }
          v353[1] = v276;
          if (*(void *)v382)
          {
            *(void *)&v382[8] = *(void *)v382;
            operator delete(*(void **)v382);
          }
          v252 = (unint64_t *)v344;
          if (!v344)
          {
LABEL_282:
            if (v347)
            {
              v348 = v347;
              operator delete(v347);
            }
            if (SHIBYTE(v351) < 0) {
              operator delete(v350[0]);
            }
            if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v352.__r_.__value_.__l.__data_);
            }
            v362.__r_.__value_.__r.__words[0] = v300;
            *(std::string::size_type *)((char *)v362.__r_.__value_.__r.__words + *(void *)(v300 - 24)) = v301;
            v362.__r_.__value_.__r.__words[2] = v302;
            *(void *)&long long v363 = MEMORY[0x263F8C318] + 16;
            if (SBYTE7(v369) < 0) {
              operator delete((void *)v368);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x2455D2B30](&v371);
            if (v340) {
              operator delete(v340);
            }
            uint64_t v86 = v309;
            if (v361.__r_.__value_.__r.__words[0])
            {
              v361.__r_.__value_.__l.__size_ = v361.__r_.__value_.__r.__words[0];
              operator delete(v361.__r_.__value_.__l.__data_);
            }
            uint64_t v88 = v310 + 1;
            uint64_t v73 = *(void *)&v356[0];
            if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)&v356[0] + 1) - *(void *)&v356[0]) >> 3) <= v310 + 1) {
              goto LABEL_86;
            }
            continue;
          }
        }
        break;
      }
      v345 = v252;
      operator delete(v252);
      goto LABEL_282;
    }
  }
  uint64_t v72 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
LABEL_70:
  uint64_t v16 = (_DWORD *)v72;
  goto LABEL_10;
}

void sub_23F51EE7C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7TfTokenENS1_7VtValueENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<TimeSampledDataT>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<TimeSampledDataT>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::SkelPoseInfo::~SkelPoseInfo(void *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 29));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 19));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)(a1 + 11));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1 + 6);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1);
}

void realityio::entityPath(realityio *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v10, this);
  std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
  MEMORY[0x2455CF7A0](&v9, __p);
  uint64_t v6 = v9;
  uint64_t v5 = v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v5 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/");
    MEMORY[0x2455CF7A0](a2, __p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, this);
  }
}

void sub_23F51FAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::TimelineGroupFactory::addTimeline(char *a1, std::string::size_type a2, long long *a3, char *__s, float a5, float a6)
{
  uint64_t v10 = (char *)*((unsigned __int8 *)a3 + 23);
  if ((char)v10 >= 0) {
    unint64_t v11 = (char *)a3;
  }
  else {
    unint64_t v11 = *(char **)a3;
  }
  int v12 = a1[23];
  if (v12 >= 0) {
    unint64_t v13 = a1;
  }
  else {
    unint64_t v13 = *(char **)a1;
  }
  if (v12 >= 0) {
    int64_t v14 = a1[23];
  }
  else {
    int64_t v14 = *((void *)a1 + 1);
  }
  if (v14)
  {
    if ((char)v10 < 0) {
      uint64_t v10 = (char *)*((void *)a3 + 1);
    }
    if ((uint64_t)v10 >= v14)
    {
      uint64_t v16 = &v10[(void)v11];
      int v17 = *v13;
      uint64_t v18 = v11;
      do
      {
        uint64_t v19 = &v10[-v14];
        if (v19 == (char *)-1) {
          break;
        }
        uint64_t result = (uint64_t)memchr(v18, v17, (size_t)(v19 + 1));
        if (!result) {
          return result;
        }
        uint64_t v20 = result;
        uint64_t result = memcmp((const void *)result, v13, v14);
        if (!result)
        {
          if ((char *)v20 == v16 || (char *)v20 != v11) {
            return result;
          }
          goto LABEL_23;
        }
        uint64_t v18 = (char *)(v20 + 1);
        uint64_t v10 = &v16[-v20 - 1];
      }
      while ((uint64_t)v10 >= v14);
    }
    return 0;
  }
  else
  {
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    realityio::TimelineGroupFactory::TimelineData::TimelineData(&v35, (long long *)__p, a3, a2, a5, a6);
    unint64_t v21 = *((void *)a1 + 6);
    if (v21 >= *((void *)a1 + 7))
    {
      uint64_t v26 = std::vector<realityio::TimelineGroupFactory::TimelineData>::__push_back_slow_path<realityio::TimelineGroupFactory::TimelineData>((uint64_t *)a1 + 5, (long long *)&v35);
    }
    else
    {
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 32) = 0u;
      *(_OWORD *)unint64_t v21 = 0u;
      *(void *)(v21 + 48) = 0xFF7FFFFF7F7FFFFFLL;
      *(void *)(v21 + 56) = 0;
      std::string::size_type v22 = v35.__r_.__value_.__r.__words[2];
      *(_OWORD *)unint64_t v21 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
      *(void *)(v21 + 16) = v22;
      memset(&v35, 0, sizeof(v35));
      uint64_t v23 = *(void *)(v21 + 40);
      long long v24 = *(_OWORD *)(v21 + 24);
      uint64_t v25 = v37;
      *(_OWORD *)(v21 + 24) = v36;
      *(void *)(v21 + 40) = v25;
      long long v36 = v24;
      uint64_t v37 = v23;
      *(void *)(v21 + 48) = v38;
      unint64_t v38 = 0xFF7FFFFF7F7FFFFFLL;
      *(void *)(v21 + 56) = v39;
      uint64_t v39 = 0;
      uint64_t v26 = v21 + 64;
      *((void *)a1 + 6) = v21 + 64;
    }
    *((void *)a1 + 6) = v26;
    realityio::TimelineGroupFactory::TimelineData::~TimelineData((realityio::TimelineGroupFactory::TimelineData *)&v35);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    v27.i32[0] = *((void *)a1 + 3);
    v27.f32[1] = a6;
    v28.i32[1] = HIDWORD(*((void *)a1 + 3));
    v28.f32[0] = a5;
    int8x8_t v29 = (int8x8_t)vcgt_f32(v27, v28);
    v27.f32[0] = a5;
    *((int8x8_t *)a1 + 3) = vbsl_s8(v29, (int8x8_t)v27, *(int8x8_t *)(a1 + 24));
    float v30 = *((float *)a1 + 8);
    if (v30 < a6) {
      float v30 = a6;
    }
    *((float *)a1 + 8) = v30;
    return 1;
  }
}

void sub_23F51FD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void realityio::TimelineGroupFactory::~TimelineGroupFactory(void **this)
{
  uint64_t v2 = this + 5;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t realityio::TimelineGroupFactory::createTimelineAsset(float *a1, uint64_t a2, const char *a3)
{
  RETimelineDefinitionCreateTimelineGroup();
  uint64_t v4 = (unsigned __int8 *)*((void *)a1 + 5);
  for (uint64_t i = (unsigned __int8 *)*((void *)a1 + 6); v4 != i; v4 += 64)
  {
    memset(&v30, 0, sizeof(v30));
    uint64_t v6 = (const void **)(v4 + 24);
    uint64_t v7 = v4[47];
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v4[47];
    }
    else {
      uint64_t v8 = *((void *)v4 + 4);
    }
    int v9 = *((char *)a1 + 23);
    if (v9 >= 0) {
      std::string::size_type v10 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      std::string::size_type v10 = *((void *)a1 + 1);
    }
    if (v8 != v10) {
      goto LABEL_19;
    }
    if (v9 >= 0) {
      unint64_t v11 = a1;
    }
    else {
      unint64_t v11 = *(float **)a1;
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v6, v11, *((void *)v4 + 4))) {
        goto LABEL_19;
      }
    }
    else if (v4[47])
    {
      uint64_t v12 = 0;
      while (v4[v12 + 24] == *((unsigned __int8 *)v11 + v12))
      {
        if (v7 == ++v12) {
          goto LABEL_32;
        }
      }
LABEL_19:
      unint64_t v13 = v4 + 24;
      if ((v7 & 0x80) != 0) {
        unint64_t v13 = *v6;
      }
      if (v13[v10] == 47) {
        std::string::size_type v14 = v10 + 1;
      }
      else {
        std::string::size_type v14 = v10;
      }
      std::string::basic_string(&__str, (const std::string *)v4 + 1, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v36);
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      for (; size; --size)
      {
        if (p_str->__r_.__value_.__s.__data_[0] == 47) {
          p_str->__r_.__value_.__s.__data_[0] = 46;
        }
        p_str = (std::string *)((char *)p_str + 1);
      }
      std::string::operator=(&v30, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
LABEL_32:
    RETimelineDefinitionCreateFromTimeline();
    std::string::size_type v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v17 = v30.__r_.__value_.__l.__size_;
    }
    if (!v17
      && ((float v18 = *((float *)v4 + 12), v19 = a1[6], v18 == v19)
       || vabds_f32(v18, v19) < (float)((float)((float)(fabsf(v18) + fabsf(v19)) + 1.0) * 0.00001))
      && ((float v20 = *((float *)v4 + 13), v21 = a1[7], v20 == v21)
       || vabds_f32(v20, v21) < (float)((float)((float)(fabsf(v20) + fabsf(v21)) + 1.0) * 0.00001)))
    {
      RETimelineDefinitionAddChildTimeline();
    }
    else
    {
      RETimelineDefinitionCreateTimelineClip();
      RETimelineDefinitionSetClipDelay();
      RETimelineDefinitionSetFillMode();
      RETimelineDefinitionSetTargetPath();
      RETimelineDefinitionAddChildTimeline();
      RERelease();
    }
    RERelease();
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  float v22 = a1[7];
  float v23 = a1[8];
  if (v22 == v23 || vabds_f32(v22, v23) < (float)((float)((float)(fabsf(v22) + fabsf(v23)) + 1.0) * 0.00001))
  {
    uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v30);
    size_t v26 = strlen(a3);
    float32x2_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30.__r_.__value_.__r.__words[2], (uint64_t)a3, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"_Fill", 5);
    std::stringbuf::str();
    RETimelineDefinitionCreateTimelineClip();
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(double *)&__str.__r_.__value_.__l.__data_ = (float)(a1[7] - a1[6]);
    RETimelineDefinitionSetClipDuration();
    RETimelineDefinitionSetFillMode();
    uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
    RERelease();
    v30.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
    std::string::size_type v28 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words
                              + *(void *)(v30.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8]
                                                                                                + 64);
    v30.__r_.__value_.__r.__words[2] = v28;
    uint64_t v31 = MEMORY[0x263F8C318] + 16;
    if (v33 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2455D2B30](&v34);
  }
  RERelease();
  return TimelineAsset;
}

void sub_23F5202A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 - 113) < 0) {
    operator delete(*(void **)(v16 - 136));
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::SkelPoseInfo::~SkelPoseInfo((void *)(v3 - 248));
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::vector<realityio::TimelineGroupFactory::TimelineData>::__push_back_slow_path<realityio::TimelineGroupFactory::TimelineData>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v20[4] = a1 + 2;
  std::string::size_type v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>>(v7, v9);
  unint64_t v11 = &v10[64 * v4];
  v20[0] = v10;
  v20[1] = v11;
  void v20[3] = &v10[64 * v12];
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *(_OWORD *)unint64_t v11 = 0u;
  *((void *)v11 + 6) = 0xFF7FFFFF7F7FFFFFLL;
  *((void *)v11 + 7) = 0;
  long long v13 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v11 = v13;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = *((void *)v11 + 5);
  long long v15 = *(_OWORD *)(v11 + 24);
  uint64_t v16 = *((void *)a2 + 5);
  *(_OWORD *)(v11 + 24) = *(long long *)((char *)a2 + 24);
  *((void *)v11 + 5) = v16;
  *(long long *)((char *)a2 + 24) = v15;
  *((void *)a2 + 5) = v14;
  LODWORD(v15) = *((_DWORD *)v11 + 12);
  *((_DWORD *)v11 + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v15;
  LODWORD(v15) = *((_DWORD *)v11 + 13);
  *((_DWORD *)v11 + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v15;
  uint64_t v17 = *((void *)v11 + 7);
  *((void *)v11 + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v17;
  v20[2] = v11 + 64;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__swap_out_circular_buffer(a1, v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<realityio::TimelineGroupFactory::TimelineData>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_23F5204A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::TimelineGroupFactory::TimelineData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::TimelineGroupFactory::TimelineData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 64;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (std::string *)(v11 + v10);
    v10 -= 64;
    realityio::TimelineGroupFactory::TimelineData::TimelineData(v12, (long long *)(v10 + a3));
  }
  return a6;
}

std::string *realityio::TimelineGroupFactory::TimelineData::TimelineData(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  std::string::size_type v6 = *((void *)a2 + 7);
  this[2].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    RERetain();
  }
  return this;
}

void sub_23F52069C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<realityio::TimelineGroupFactory::TimelineData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    realityio::TimelineGroupFactory::TimelineData::~TimelineData((realityio::TimelineGroupFactory::TimelineData *)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *realityio::TimelineGroupFactory::TimelineData::TimelineData(std::string *this, long long *a2, long long *a3, std::string::size_type a4, float a5, float a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v12;
  }
  *(float *)&this[2].__r_.__value_.__l.__data_ = a5;
  *((float *)this[2].__r_.__value_.__r.__words + 1) = a6;
  this[2].__r_.__value_.__l.__size_ = a4;
  if (a4) {
    RERetain();
  }
  return this;
}

void sub_23F5207D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void realityio::TimelineGroupFactory::TimelineData::~TimelineData(realityio::TimelineGroupFactory::TimelineData *this)
{
  if (*((void *)this + 7))
  {
    RERelease();
    *((void *)this + 7) = 0;
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        realityio::TimelineGroupFactory::TimelineData::~TimelineData((realityio::TimelineGroupFactory::TimelineData *)(v4 - 64));
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::VtArray(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v6 = 0;
  int v5 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((void *)a1);
  uint64_t v7 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3h const&)::_Filler>((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_23F520940(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1)) {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    }
    *a1 = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3h const&)::_Filler>(unint64_t *a1, unint64_t a2, int **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)a1, a2);
              uint64_t v7 = New;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  long long v12 = (char *)New + v11;
                  int v13 = *(_DWORD *)(v9 + v11);
                  *((_WORD *)v12 + 2) = *(_WORD *)(v9 + v11 + 4);
                  *(_DWORD *)long long v12 = v13;
                  v11 += 6;
                }
                while (6 * v3 != v11);
              }
            }
            uint64_t v14 = *a3;
            uint64_t v15 = 6 * v3;
            do
            {
              uint64_t v16 = (char *)v7 + v15;
              int v17 = *v14;
              *((_WORD *)v16 + 2) = *((_WORD *)v14 + 2);
              *(_DWORD *)uint64_t v16 = v17;
              v15 += 6;
            }
            while (6 * a2 != v15);
          }
          uint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 6 * v24;
        float32x2_t v27 = v25;
        do
        {
          int v28 = *(_DWORD *)v7;
          *((_WORD *)v27 + 2) = *((_WORD *)v7 + 2);
          *(_DWORD *)float32x2_t v27 = v28;
          float32x2_t v27 = (void *)((char *)v27 + 6);
          uint64_t v7 = (void *)((char *)v7 + 6);
          v26 -= 6;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        int8x8_t v29 = *a3;
        uint64_t v30 = 6 * v3;
        do
        {
          uint64_t v31 = (char *)v25 + v30;
          int v32 = *v29;
          *((_WORD *)v31 + 2) = *((_WORD *)v29 + 2);
          *(_DWORD *)uint64_t v31 = v32;
          v30 += 6;
        }
        while (6 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0x2AAAAAAAAAAAAAABLL)
    {
      float v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v18 = v19;
      uint64_t v20 = 0;
      float v21 = *a3;
      do
      {
        float v22 = (char *)v19 + v20;
        int v23 = *v21;
        *((_WORD *)v22 + 2) = *((_WORD *)v21 + 2);
        *(_DWORD *)float v22 = v23;
        v20 += 6;
      }
      while (6 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfVec3h::operator+=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4 = MEMORY[0x263F90640];
  float v5 = *(float *)(MEMORY[0x263F90640] + 4 * *a1) + *(float *)(MEMORY[0x263F90640] + 4 * *a2);
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23)))
  {
    unsigned int v6 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *a1 = v6;
  float v7 = *(float *)(v4 + 4 * a1[1]) + *(float *)(v4 + 4 * a2[1]);
  if (v7 == 0.0)
  {
    unsigned int v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23)))
  {
    unsigned int v8 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  a1[1] = v8;
  float v9 = *(float *)(v4 + 4 * a1[2]) + *(float *)(v4 + 4 * a2[2]);
  if (v9 == 0.0)
  {
    unsigned int v10 = HIWORD(LODWORD(v9));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v9) >> 23)))
  {
    unsigned int v10 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v9) >> 23))
        + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  a1[2] = v10;
  return a1;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=(unsigned __int16 *a1, double a2)
{
  float v3 = a2;
  uint64_t v4 = MEMORY[0x263F90640];
  float v5 = *(float *)(MEMORY[0x263F90640] + 4 * *a1) * v3;
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23)))
  {
    unsigned int v6 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *a1 = v6;
  float v7 = *(float *)(v4 + 4 * a1[1]) * v3;
  if (v7 == 0.0)
  {
    unsigned int v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23)))
  {
    unsigned int v8 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  a1[1] = v8;
  float v9 = *(float *)(v4 + 4 * a1[2]) * v3;
  if (v9 == 0.0)
  {
    unsigned int v10 = HIWORD(LODWORD(v9));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v9) >> 23)))
  {
    unsigned int v10 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v9) >> 23))
        + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  a1[2] = v10;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::VtArray(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((void *)a1);
  unsigned int v6 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfQuatf const&)::_Filler>((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_23F520EA8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfQuatf const&)::_Filler>(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    float v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew((uint64_t)a1, a2);
              float v7 = New;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&New[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        float v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        float v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)float v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        unint64_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v6 = 0;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((void *)a1);
  float v7 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3f const&)::_Filler>((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_23F5210E8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3f const&)::_Filler>(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    float v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)a1, a2);
              float v7 = New;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  long long v12 = (char *)New + v11;
                  uint64_t v13 = *(void *)(v9 + v11);
                  *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                  *(void *)long long v12 = v13;
                  v11 += 12;
                }
                while (12 * v3 != v11);
              }
            }
            uint64_t v14 = *a3;
            uint64_t v15 = 12 * v3;
            do
            {
              uint64_t v16 = (char *)v7 + v15;
              uint64_t v17 = *v14;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
              *(void *)uint64_t v16 = v17;
              v15 += 12;
            }
            while (12 * a2 != v15);
          }
          uint64_t v18 = v7;
          goto LABEL_31;
        }
        float v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 12 * v24;
        float32x2_t v27 = v25;
        do
        {
          uint64_t v28 = *v7;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
          *float32x2_t v27 = v28;
          float32x2_t v27 = (void *)((char *)v27 + 12);
          float v7 = (void *)((char *)v7 + 12);
          v26 -= 12;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        int8x8_t v29 = *a3;
        uint64_t v30 = 12 * v3;
        do
        {
          uint64_t v31 = (char *)v25 + v30;
          uint64_t v32 = *v29;
          *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
          *(void *)uint64_t v31 = v32;
          v30 += 12;
        }
        while (12 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0x1555555555555556)
    {
      unint64_t v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)a1, a2);
      uint64_t v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        float v22 = (char *)v19 + v20;
        uint64_t v23 = *v21;
        *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
        *(void *)float v22 = v23;
        v20 += 12;
      }
      while (12 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 60) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>::Invoke()
{
}

void *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(void *result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>::New()
{
}

void sub_23F5214B8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40D31A2178);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7SdfPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::SdfPath>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 29) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<TimeSampledDataT>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"16TimeSampledDataT" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<TimeSampledDataT>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<TimeSampledDataT>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 24));
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void *std::allocator_traits<std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::construct[abi:ne180100]<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  long long v5 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  long long v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v8;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)(a1 + 152), (void *)(a2 + 152));
  long long v9 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v9;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)(a1 + 192), (void *)(a2 + 192));
  long long v10 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v10;

  return pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)(a1 + 232), (void *)(a2 + 232));
}

void *pxrInternal__aapl__pxrReserved__::VtValue::VtValue(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  if (a2[1])
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v6, (uint64_t)a1);
    uint64_t v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
      (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
    }
    else {
      *a1 = *a2;
    }
    a2[1] = 0;
    if (v7) {
      (*(void (**)(unsigned char *))(v7 + 32))(v6);
    }
  }
  return a1;
}

void sub_23F521A1C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 248;
    realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::SkelPoseInfo::~SkelPoseInfo((void *)(i - 248));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderAndIOName const,realityio::BuilderAndIOName>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderAndIOName const,realityio::BuilderAndIOName>,0>(void *a1)
{
  uint64_t v2 = a1[5];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = a1[2];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3322D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3322D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::SkeletalAnimationAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      long long v5 = (void *)a1[4];
      if (*a1)
      {
        uint64_t v6 = 8 * *a1;
        do
        {
          long long v5 = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v5) + 1;
          v6 -= 8;
        }
        while (v6);
        long long v5 = (void *)a1[4];
      }
      operator delete(v5 - 2);
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

uint64_t realityio::Inputs::Inputs(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = a6;
  *(void *)(a1 + 8) = a5;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), a3 + 1);
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a7;
  return a1;
}

realityio::Inputs *std::unique_ptr<realityio::Inputs>::reset[abi:ne180100](realityio::Inputs **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    realityio::Inputs::~Inputs(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void realityio::Inputs::~Inputs(realityio::Inputs *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    long long v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F521EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::emplace_back<realityio::WrappedRERef<REAsset *>>(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(void *)(v5 + 8 * v4) = *a2;
      *a2 = 0;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_AllocateNew(a1, v11);
    std::uninitialized_copy[abi:ne180100]<realityio::WrappedRERef<REAsset *> *,realityio::WrappedRERef<REAsset *> *>(v9, v9 + 8 * v4, (uint64_t)New);
    New[v4] = *a2;
    *a2 = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef((void *)a1);
    *(void *)(a1 + 32) = New;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void *pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F522108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::uninitialized_copy[abi:ne180100]<realityio::WrappedRERef<REAsset *> *,realityio::WrappedRERef<REAsset *> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(a1 + v6);
      *(void *)(a3 + v6) = v7;
      if (v7) {
        RERetain();
      }
      v6 += 8;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_23F522184(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 8)
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1++);
  __cxa_rethrow();
}

void sub_23F5221A8(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIN9realityio12WrappedRERefIP7REAssetEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef((void *)v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (uint64_t *)a1[4];
  uint64_t v6 = *(uint64_t **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    uint64_t v9 = *v5++;
    uint64_t v8 = v9;
    uint64_t v10 = *v6++;
    BOOL result = v8 == v10;
    BOOL v11 = v8 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = (const void *)(a1 + 8);
  int v5 = v6;
  if (v6)
  {
    if (*(_DWORD *)(a1 + 12)) {
      int v7 = *(_DWORD *)(a1 + 16) ? 4 : 3;
    }
    else {
      int v7 = 2;
    }
  }
  else
  {
    int v7 = 1;
  }
  uint64_t v8 = (const void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12)) {
      int v9 = *(_DWORD *)(a2 + 16) ? 4 : 3;
    }
    else {
      int v9 = 2;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 != v9) {
    return 0;
  }
  if (v5)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      BOOL v10 = *(_DWORD *)(a1 + 16) == 0;
      uint64_t v11 = 3;
      if (!v10) {
        uint64_t v11 = 4;
      }
    }
    else
    {
      uint64_t v11 = 2;
    }
  }
  else
  {
    uint64_t v11 = 1;
  }
  return memcmp(v4, v8, 4 * v11 - 4) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_Streamer>(void **a1, uint64_t a2)
{
  uint64_t v2 = *(*a1)++;
  return MEMORY[0x270F98788](a2, v2 != 0);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy()
{
}

void *std::vector<RESRT>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<RESRT>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23F5226F8(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<RESRT>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

realityio::AnimationSceneAssetBuilder *realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(realityio::AnimationSceneAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[11] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "AnimationSceneAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kAnimationSceneAssetBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40320))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_2;
  int v6 = *(std::__shared_weak_count **)algn_268C40318;
  if (*(void *)algn_268C40318) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C40318 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F3324F8;
  void v12[3] = v12;
  v11[0] = &unk_26F332748;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F332400;
  return this;
}

void sub_23F522B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  MEMORY[0x2455D2BD0](v38, 0x1060C40E5A1EACFLL);
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  long long v41 = *(std::__shared_weak_count **)(v39 - 120);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  MEMORY[0x2455D2BD0](v37, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v36, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40320);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void realityio::buildSceneAssetsAndAnimationLibraries(uint64_t a1, int a2, uint64_t a3, unint64_t a4, const void **a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10, char *****a11, void *a12)
{
  v332[4] = *MEMORY[0x263EF8340];
  unint64_t v324 = a4;
  if (!a4
    || std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(a12, &v324))
  {
    return;
  }
  uint64_t v323 = *(void *)(*(void *)(*(void *)(a3 + 40) + 16) + 16);
  std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>((uint64_t)a12, &v324, &v324);
  if (a2)
  {
    uint64_t Name = (char *)REEntityGetName();
    std::string::basic_string[abi:ne180100]<0>(&v322, Name);
  }
  else
  {
    if (*((char *)a5 + 23) >= 0) {
      size_t v19 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v19 = (size_t)a5[1];
    }
    uint64_t v20 = &v329;
    std::string::basic_string[abi:ne180100]((uint64_t)&v329, v19 + 1);
    if ((v329.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v20 = (std::string *)v329.__r_.__value_.__r.__words[0];
    }
    if (v19)
    {
      if (*((char *)a5 + 23) >= 0) {
        uint64_t v21 = a5;
      }
      else {
        uint64_t v21 = *a5;
      }
      memmove(v20, v21, v19);
    }
    *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 47;
    float v22 = (const std::string::value_type *)REEntityGetName();
    uint64_t v23 = std::string::append(&v329, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v322.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v329.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v285 = a3;
  uint64_t v286 = a1;
  int v283 = a2;
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v316, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
    unint64_t v317 = 0xFF7FFFFF7F7FFFFFLL;
    int v318 = -8388609;
    uint64_t v320 = 0;
    uint64_t v321 = 0;
    uint64_t v319 = 0;
    uint64_t v25 = a8;
    if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v310, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
      goto LABEL_21;
    }
  }
  else
  {
    std::string v316 = v322;
    unint64_t v317 = 0xFF7FFFFF7F7FFFFFLL;
    int v318 = -8388609;
    uint64_t v320 = 0;
    uint64_t v321 = 0;
    uint64_t v319 = 0;
    uint64_t v25 = a8;
  }
  std::string v310 = v322;
LABEL_21:
  unint64_t v311 = 0xFF7FFFFF7F7FFFFFLL;
  int v312 = -8388609;
  uint64_t v314 = 0;
  uint64_t v315 = 0;
  uint64_t v313 = 0;
  v309[0] = 0;
  v309[1] = 0;
  uint64_t v307 = 0;
  float64x2_t v308 = v309;
  v305 = &v306;
  uint64_t v306 = 0;
  int8x8_t v26 = (int8x8_t)a6[1];
  unint64_t v27 = 0x9DDFEA08EB382D69 * (((8 * v324) + 8) ^ HIDWORD(v324));
  unint64_t v28 = 0x9DDFEA08EB382D69 * (HIDWORD(v324) ^ (v27 >> 47) ^ v27);
  unint64_t v29 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
  if (!*(void *)&v26) {
    goto LABEL_38;
  }
  uint8x8_t v30 = (uint8x8_t)vcnt_s8(v26);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    unint64_t v31 = v29;
    if (v29 >= *(void *)&v26) {
      unint64_t v31 = v29 % *(void *)&v26;
    }
  }
  else
  {
    unint64_t v31 = v29 & (*(void *)&v26 - 1);
  }
  uint64_t v32 = *(void **)(*a6 + 8 * v31);
  if (v32)
  {
    char v33 = (void *)*v32;
    if (*v32)
    {
      do
      {
        unint64_t v34 = v33[1];
        if (v29 == v34)
        {
          if (v33[2] == v324) {
            break;
          }
        }
        else
        {
          if (v30.u32[0] > 1uLL)
          {
            if (v34 >= *(void *)&v26) {
              v34 %= *(void *)&v26;
            }
          }
          else
          {
            v34 &= *(void *)&v26 - 1;
          }
          if (v34 != v31) {
            goto LABEL_38;
          }
        }
        char v33 = (void *)*v33;
      }
      while (v33);
    }
  }
  else
  {
LABEL_38:
    char v33 = 0;
  }
  int8x8_t v35 = (int8x8_t)a7[1];
  if (!*(void *)&v35) {
    goto LABEL_56;
  }
  uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
  v36.i16[0] = vaddlv_u8(v36);
  if (v36.u32[0] > 1uLL)
  {
    unint64_t v37 = v29;
    if (v29 >= *(void *)&v35) {
      unint64_t v37 = v29 % *(void *)&v35;
    }
  }
  else
  {
    unint64_t v37 = (*(void *)&v35 - 1) & v29;
  }
  uint64_t v38 = *(void **)(*a7 + 8 * v37);
  if (v38)
  {
    uint64_t v39 = (void *)*v38;
    if (*v38)
    {
      do
      {
        unint64_t v40 = v39[1];
        if (v29 == v40)
        {
          if (v39[2] == v324) {
            break;
          }
        }
        else
        {
          if (v36.u32[0] > 1uLL)
          {
            if (v40 >= *(void *)&v35) {
              v40 %= *(void *)&v35;
            }
          }
          else
          {
            v40 &= *(void *)&v35 - 1;
          }
          if (v40 != v37) {
            goto LABEL_56;
          }
        }
        uint64_t v39 = (void *)*v39;
      }
      while (v39);
    }
  }
  else
  {
LABEL_56:
    uint64_t v39 = 0;
  }
  int8x8_t v41 = (int8x8_t)v25[1];
  if (!*(void *)&v41) {
    goto LABEL_74;
  }
  uint8x8_t v42 = (uint8x8_t)vcnt_s8(v41);
  v42.i16[0] = vaddlv_u8(v42);
  if (v42.u32[0] > 1uLL)
  {
    unint64_t v43 = v29;
    if (v29 >= *(void *)&v41) {
      unint64_t v43 = v29 % *(void *)&v41;
    }
  }
  else
  {
    unint64_t v43 = (*(void *)&v41 - 1) & v29;
  }
  unint64_t v44 = *(void **)(*v25 + 8 * v43);
  if (v44)
  {
    unint64_t v45 = (void *)*v44;
    if (*v44)
    {
      do
      {
        unint64_t v46 = v45[1];
        if (v29 == v46)
        {
          if (v45[2] == v324) {
            break;
          }
        }
        else
        {
          if (v42.u32[0] > 1uLL)
          {
            if (v46 >= *(void *)&v41) {
              v46 %= *(void *)&v41;
            }
          }
          else
          {
            v46 &= *(void *)&v41 - 1;
          }
          if (v46 != v43) {
            goto LABEL_74;
          }
        }
        unint64_t v45 = (void *)*v45;
      }
      while (v45);
    }
  }
  else
  {
LABEL_74:
    unint64_t v45 = 0;
  }
  int8x8_t v47 = (int8x8_t)a9[1];
  if (!*(void *)&v47) {
    goto LABEL_92;
  }
  uint8x8_t v48 = (uint8x8_t)vcnt_s8(v47);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] > 1uLL)
  {
    unint64_t v49 = v29;
    if (v29 >= *(void *)&v47) {
      unint64_t v49 = v29 % *(void *)&v47;
    }
  }
  else
  {
    unint64_t v49 = (*(void *)&v47 - 1) & v29;
  }
  uint64_t v50 = *(void **)(*a9 + 8 * v49);
  if (v50)
  {
    uint64_t v51 = (void *)*v50;
    if (*v50)
    {
      do
      {
        unint64_t v52 = v51[1];
        if (v29 == v52)
        {
          if (v51[2] == v324) {
            break;
          }
        }
        else
        {
          if (v48.u32[0] > 1uLL)
          {
            if (v52 >= *(void *)&v47) {
              v52 %= *(void *)&v47;
            }
          }
          else
          {
            v52 &= *(void *)&v47 - 1;
          }
          if (v52 != v49) {
            goto LABEL_92;
          }
        }
        uint64_t v51 = (void *)*v51;
      }
      while (v51);
    }
  }
  else
  {
LABEL_92:
    uint64_t v51 = 0;
  }
  v287 = v45;
  uint64_t v288 = v39;
  v293 = v51;
  v284 = v33;
  v294 = a6;
  v295 = a7;
  if (v33)
  {
    uint64_t v53 = (void *)v33[3];
    uint64_t v54 = v53[6] - v53[5];
    if (v54)
    {
      uint64_t v55 = 0;
      unint64_t v56 = v54 >> 3;
      if (v56 <= 1) {
        uint64_t v57 = 1;
      }
      else {
        uint64_t v57 = v56;
      }
      do
      {
        uint64_t v58 = *(void *)(v53[5] + 8 * v55);
        __p.__r_.__value_.__r.__words[0] = *(void *)(v53[2] + 8 * v55);
        if (__p.__r_.__value_.__r.__words[0])
        {
          RERetain();
          std::string::size_type v59 = __p.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v59 = 0;
        }
        double v60 = *(double *)(v58 + 8);
        double v61 = *(double *)(v58 + 16);
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v62 = &v322;
        }
        else {
          long long v62 = (std::string *)v322.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v62);
        float v63 = v61;
        float v64 = v60;
        realityio::TimelineGroupFactory::addTimeline((char *)&v316, v59, (long long *)&v329, "entitySceneClip", v64, v63);
        if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v329.__r_.__value_.__l.__data_);
        }
        double v65 = *(double *)(v58 + 8);
        double v66 = *(double *)(v58 + 16);
        std::string::size_type v67 = __p.__r_.__value_.__r.__words[0];
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v68 = &v322;
        }
        else {
          long long v68 = (std::string *)v322.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v68);
        float v69 = v66;
        float v70 = v65;
        realityio::TimelineGroupFactory::addTimeline((char *)&v310, v67, (long long *)&v329, "defaultSceneClip", v70, v69);
        if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v329.__r_.__value_.__l.__data_);
        }
        long long v71 = *(char ***)a10;
        uint64_t v72 = *(char ***)(a10 + 8);
        while (v71 != v72)
        {
          uint64_t v73 = *v71;
          double v74 = *(double *)(v58 + 8);
          double v75 = *(double *)(v58 + 16);
          std::string::size_type v76 = __p.__r_.__value_.__r.__words[0];
          if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float64x2_t v77 = &v322;
          }
          else {
            float64x2_t v77 = (std::string *)v322.__r_.__value_.__r.__words[0];
          }
          std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v77);
          float v78 = v75;
          float v79 = v74;
          realityio::TimelineGroupFactory::addTimeline(v73, v76, (long long *)&v329, "childSceneClip", v79, v78);
          if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v329.__r_.__value_.__l.__data_);
          }
          ++v71;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
        ++v55;
      }
      while (v55 != v57);
    }
  }
  v303 = 0;
  uint64_t v304 = 0;
  std::string::size_type v302 = &v303;
  REAnimationLibraryComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    uint64_t AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
    if (AnimationLibraryAsset)
    {
      uint64_t ServiceLocator = REEngineGetServiceLocator();
      MEMORY[0x2455CDC30](ServiceLocator);
      uint64_t v328 = 0;
      uint64_t v82 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
      if (v328) {
        RERelease();
      }
      uint64_t v328 = v82;
      KeyCFIndex Count = REAnimationLibraryAssetGetKeyCount();
      unint64_t v84 = KeyCount;
      memset(&__p, 0, sizeof(__p));
      if (KeyCount)
      {
        if (KeyCount >> 61) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        char v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&__p.__r_.__value_.__r.__words[2], KeyCount);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v85 + 8 * v86;
        bzero(v85, 8 * v84);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v85 + 8 * v84;
      }
      REAnimationLibraryAssetGetKeys();
      if (v328)
      {
        if (v84)
        {
          char v87 = 0;
          uint64_t v88 = 0;
          uint64_t v89 = 0;
          uint64_t v90 = 0;
          unint64_t v289 = v84;
          do
          {
            uint64_t EntryByKey = REAnimationLibraryAssetGetEntryByKey();
            CFStringRef Type = (const __CFString *)REAssetGetType();
            CStringPtr = CFStringGetCStringPtr(Type, 0);
            if (!CStringPtr || strcmp(CStringPtr, "AnimationScene"))
            {
              unint64_t v291 = (unint64_t)v89;
              uint64_t v292 = v87;
              std::string::size_type v94 = __p.__r_.__value_.__r.__words[0];
              uint64_t v325 = EntryByKey;
              if (EntryByKey)
              {
                RERetain();
                uint64_t v95 = v325;
              }
              else
              {
                uint64_t v95 = 0;
              }
              uint64_t v96 = *(void ***)(v94 + 8 * v90);
              v326 = v96;
              uint64_t v327 = v95;
              uint64_t v325 = 0;
              unint64_t v97 = operator new(0x40uLL);
              uint64_t v98 = AnimationLibraryAsset;
              v329.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
              v329.__r_.__value_.__l.__size_ = (std::string::size_type)&v303;
              v329.__r_.__value_.__s.__data_[16] = 0;
              std::string::basic_string[abi:ne180100]<0>(v97 + 4, (char *)v96);
              v97[7] = v327;
              uint64_t v327 = 0;
              v329.__r_.__value_.__s.__data_[16] = 1;
              std::string::size_type v99 = v329.__r_.__value_.__r.__words[0];
              std::string::size_type v100 = v303;
              uint64_t v101 = &v303;
              unint64_t v102 = &v303;
              if (!v303) {
                goto LABEL_144;
              }
              uint64_t v101 = &v303;
              while (1)
              {
                while (1)
                {
                  unint64_t v102 = (uint64_t **)v100;
                  unint64_t v103 = (const void **)(v100 + 4);
                  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v304, (const void **)(v99 + 32), (const void **)v100 + 4))break; {
                  std::string::size_type v100 = *v102;
                  }
                  uint64_t v101 = v102;
                  if (!*v102) {
                    goto LABEL_144;
                  }
                }
                if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v304, v103, (const void **)(v99 + 32))) {
                  break;
                }
                uint64_t v101 = v102 + 1;
                std::string::size_type v100 = v102[1];
                if (!v100) {
                  goto LABEL_144;
                }
              }
              if (!*v101)
              {
LABEL_144:
                *(void *)std::string::size_type v99 = 0;
                *(void *)(v99 + 8) = 0;
                *(void *)(v99 + 16) = v102;
                *uint64_t v101 = (uint64_t *)v99;
                if (*v302)
                {
                  std::string::size_type v302 = (uint64_t **)*v302;
                  std::string::size_type v99 = (std::string::size_type)*v101;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v303, (uint64_t *)v99);
                ++v304;
                v329.__r_.__value_.__r.__words[0] = 0;
              }
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v329, 0);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v327);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v325);
              uint64_t v104 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v90);
              uint64_t v89 = (char *)v291;
              if ((unint64_t)v88 >= v291)
              {
                uint64_t v105 = ((char *)v88 - (char *)v292) >> 4;
                unint64_t v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 60) {
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                }
                uint64_t AnimationLibraryAsset = v98;
                if ((uint64_t)(v291 - (void)v292) >> 3 > v106) {
                  unint64_t v106 = (uint64_t)(v291 - (void)v292) >> 3;
                }
                if (v291 - (unint64_t)v292 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v107 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v107 = v106;
                }
                if (v107)
                {
                  if (v107 >> 60) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v108 = (char *)operator new(16 * v107);
                }
                else
                {
                  uint64_t v108 = 0;
                }
                uint64_t v109 = (uint64_t *)&v108[16 * v105];
                *uint64_t v109 = EntryByKey;
                v109[1] = v104;
                if (v88 == v292)
                {
                  uint64_t v111 = &v108[16 * v105];
                }
                else
                {
                  uint64_t v110 = &v108[16 * v105];
                  do
                  {
                    uint64_t v111 = v110 - 16;
                    *((_OWORD *)v110 - 1) = *((_OWORD *)v88 - 1);
                    v88 -= 2;
                    v110 -= 16;
                  }
                  while (v88 != v292);
                }
                uint64_t v89 = &v108[16 * v107];
                uint64_t v88 = v109 + 2;
                if (v292) {
                  operator delete(v292);
                }
                char v87 = (uint64_t *)v111;
              }
              else
              {
                *uint64_t v88 = EntryByKey;
                v88[1] = v104;
                v88 += 2;
                uint64_t AnimationLibraryAsset = v98;
                char v87 = v292;
              }
            }
            ++v90;
          }
          while (v90 != v289);
        }
        else
        {
          char v87 = 0;
          uint64_t v88 = 0;
        }
        REAnimationLibraryDefinitionClearEntries();
        if (v88 != v87)
        {
          uint64_t v112 = 0;
          if ((unint64_t)(((char *)v88 - (char *)v87) >> 4) <= 1) {
            uint64_t v113 = 1;
          }
          else {
            uint64_t v113 = ((char *)v88 - (char *)v87) >> 4;
          }
          uint64_t v114 = (char *)(v87 + 1);
          do
          {
            REAnimationLibraryDefinitionAddEntryAsset();
            REAnimationLibraryDefinitionAddKeyedEntryIndex();
            ++v112;
            v114 += 16;
          }
          while (v113 != v112);
        }
        v329.__r_.__value_.__r.__words[0] = 0;
        uint64_t v115 = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
        if (v329.__r_.__value_.__r.__words[0]) {
          RERelease();
        }
        v329.__r_.__value_.__r.__words[0] = v115;
        if (v115) {
          REAnimationLibraryComponentAssignAnimationLibraryAsset();
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v329);
        if (v87) {
          operator delete(v87);
        }
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v328);
    }
  }
  if (v304)
  {
    uint64_t v116 = v302;
    if (v302 != &v303)
    {
      do
      {
        uint64_t v117 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v308, (const void **)v116 + 4);
        if (v309 == (char **)v117)
        {
          if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = v322;
          }
          unint64_t v297 = 0xFF7FFFFF7F7FFFFFLL;
          int v298 = -8388609;
          uint64_t v300 = 0;
          uint64_t v301 = 0;
          uint64_t v299 = 0;
          std::pair<std::string,realityio::TimelineGroupFactory>::pair[abi:ne180100]<std::string const&,realityio::TimelineGroupFactory,0>(&v329, (long long *)v116 + 2, (long long *)&__p);
          std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TimelineGroupFactory>>((uint64_t **)&v308, (const void **)&v329.__r_.__value_.__l.__data_, (uint64_t)&v329);
          v326 = (void **)v332;
          std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v326);
          if (v331 < 0) {
            operator delete(v330);
          }
          if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v329.__r_.__value_.__l.__data_);
          }
          v326 = (void **)&v299;
          std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v326);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v117 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v308, (const void **)v116 + 4);
        }
        std::string::size_type v118 = (std::string::size_type)v116[7];
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v119 = &v322;
        }
        else {
          uint64_t v119 = (std::string *)v322.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v119);
        realityio::TimelineGroupFactory::addTimeline((char *)(v117 + 56), v118, (long long *)&v329, "entitySceneClip", 0.0, 0.0);
        if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v329.__r_.__value_.__l.__data_);
        }
        uint64_t v120 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v305, (const void **)v116 + 4);
        if (&v306 == (char **)v120)
        {
          if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, v322.__r_.__value_.__l.__data_, v322.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = v322;
          }
          unint64_t v297 = 0xFF7FFFFF7F7FFFFFLL;
          int v298 = -8388609;
          uint64_t v300 = 0;
          uint64_t v301 = 0;
          uint64_t v299 = 0;
          std::pair<std::string,realityio::TimelineGroupFactory>::pair[abi:ne180100]<std::string const&,realityio::TimelineGroupFactory,0>(&v329, (long long *)v116 + 2, (long long *)&__p);
          std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TimelineGroupFactory>>((uint64_t **)&v305, (const void **)&v329.__r_.__value_.__l.__data_, (uint64_t)&v329);
          v326 = (void **)v332;
          std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v326);
          if (v331 < 0) {
            operator delete(v330);
          }
          if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v329.__r_.__value_.__l.__data_);
          }
          v326 = (void **)&v299;
          std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v326);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v120 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v305, (const void **)v116 + 4);
        }
        std::string::size_type v121 = (std::string::size_type)v116[7];
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v122 = &v322;
        }
        else {
          uint64_t v122 = (std::string *)v322.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v122);
        realityio::TimelineGroupFactory::addTimeline((char *)(v120 + 56), v121, (long long *)&v329, "defaultSceneClip", 0.0, 0.0);
        if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v329.__r_.__value_.__l.__data_);
        }
        uint64_t v123 = v116[1];
        if (v123)
        {
          do
          {
            uint64_t v124 = (uint64_t **)v123;
            uint64_t v123 = (uint64_t *)*v123;
          }
          while (v123);
        }
        else
        {
          do
          {
            uint64_t v124 = (uint64_t **)v116[2];
            BOOL v125 = *v124 == (uint64_t *)v116;
            uint64_t v116 = v124;
          }
          while (!v125);
        }
        uint64_t v116 = v124;
      }
      while (v124 != &v303);
    }
  }
  if (v288)
  {
    uint64_t v126 = v288[3];
    uint64_t v127 = *(void *)(v126 + 8);
    double v129 = *(double *)(v127 + 16);
    double v128 = *(double *)(v127 + 24);
    double v130 = *(double *)(v127 + 8);
    std::string::size_type v131 = *(void *)v127;
    if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v132 = &v322;
    }
    else {
      double v132 = (std::string *)v322.__r_.__value_.__r.__words[0];
    }
    std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v132);
    float v133 = v128 * v129;
    float v134 = v130 * v128;
    realityio::TimelineGroupFactory::addTimeline((char *)&v316, v131, (long long *)&v329, "entitySceneClip", v134, v133);
    if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v329.__r_.__value_.__l.__data_);
    }
    uint64_t v135 = *(void *)(v126 + 8);
    double v137 = *(double *)(v135 + 16);
    double v136 = *(double *)(v135 + 24);
    double v138 = *(double *)(v135 + 8);
    std::string::size_type v139 = *(void *)v135;
    if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v140 = &v322;
    }
    else {
      uint64_t v140 = (std::string *)v322.__r_.__value_.__r.__words[0];
    }
    std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v140);
    float v141 = v136 * v137;
    float v142 = v138 * v136;
    realityio::TimelineGroupFactory::addTimeline((char *)&v310, v139, (long long *)&v329, "defaultSceneClip", v142, v141);
    if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v329.__r_.__value_.__l.__data_);
    }
    uint64_t v143 = *(char ***)a10;
    unint64_t v144 = *(char ***)(a10 + 8);
    if (*(char ***)a10 != v144)
    {
      do
      {
        uint64_t v145 = *v143;
        uint64_t v146 = *(void *)(v126 + 8);
        double v148 = *(double *)(v146 + 16);
        double v147 = *(double *)(v146 + 24);
        double v149 = *(double *)(v146 + 8);
        std::string::size_type v150 = *(void *)v146;
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v151 = &v322;
        }
        else {
          uint64_t v151 = (std::string *)v322.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v151);
        float v152 = v147 * v148;
        float v153 = v149 * v147;
        realityio::TimelineGroupFactory::addTimeline(v145, v150, (long long *)&v329, "childSceneClip", v153, v152);
        if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v329.__r_.__value_.__l.__data_);
        }
        ++v143;
      }
      while (v143 != v144);
    }
  }
  if (v287)
  {
    uint64_t v154 = v287[3];
    std::string::size_type v155 = *(void *)(v154 + 8);
    if (v155)
    {
      double v156 = *(double *)(v154 + 24);
      double v157 = *(double *)(v154 + 32);
      if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v158 = &v322;
      }
      else {
        std::string::size_type v158 = (std::string *)v322.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v158);
      float v159 = v157;
      float v160 = v156;
      realityio::TimelineGroupFactory::addTimeline((char *)&v316, v155, (long long *)&v329, "entitySceneClip", v160, v159);
      if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v329.__r_.__value_.__l.__data_);
      }
      double v161 = *(double *)(v154 + 24);
      double v162 = *(double *)(v154 + 32);
      if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v163 = &v322;
      }
      else {
        long long v163 = (std::string *)v322.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v163);
      float v164 = v162;
      float v165 = v161;
      realityio::TimelineGroupFactory::addTimeline((char *)&v310, v155, (long long *)&v329, "defaultSceneClip", v165, v164);
      if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v329.__r_.__value_.__l.__data_);
      }
      uint64_t v166 = *(char ***)a10;
      uint64_t v167 = *(char ***)(a10 + 8);
      if (*(char ***)a10 != v167)
      {
        do
        {
          uint64_t v168 = *v166;
          double v169 = *(double *)(v154 + 24);
          double v170 = *(double *)(v154 + 32);
          if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v171 = &v322;
          }
          else {
            double v171 = (std::string *)v322.__r_.__value_.__r.__words[0];
          }
          std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v171);
          float v172 = v170;
          float v173 = v169;
          realityio::TimelineGroupFactory::addTimeline(v168, v155, (long long *)&v329, "childSceneClip", v173, v172);
          if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v329.__r_.__value_.__l.__data_);
          }
          ++v166;
        }
        while (v166 != v167);
      }
    }
    std::string::size_type v174 = *(void *)(v154 + 16);
    if (v174)
    {
      double v175 = *(double *)(v154 + 24);
      double v176 = *(double *)(v154 + 32);
      if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v177 = &v322;
      }
      else {
        uint64_t v177 = (std::string *)v322.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v177);
      float v178 = v176;
      float v179 = v175;
      realityio::TimelineGroupFactory::addTimeline((char *)&v316, v174, (long long *)&v329, "entitySceneClip", v179, v178);
      if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v329.__r_.__value_.__l.__data_);
      }
      double v180 = *(double *)(v154 + 24);
      double v181 = *(double *)(v154 + 32);
      if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v182 = &v322;
      }
      else {
        uint64_t v182 = (std::string *)v322.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v182);
      float v183 = v181;
      float v184 = v180;
      realityio::TimelineGroupFactory::addTimeline((char *)&v310, v174, (long long *)&v329, "defaultSceneClip", v184, v183);
      if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v329.__r_.__value_.__l.__data_);
      }
      int v185 = *(char ***)a10;
      uint64_t v186 = *(char ***)(a10 + 8);
      if (*(char ***)a10 != v186)
      {
        do
        {
          float64x2_t v187 = *v185;
          double v188 = *(double *)(v154 + 24);
          double v189 = *(double *)(v154 + 32);
          if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v190 = &v322;
          }
          else {
            uint64_t v190 = (std::string *)v322.__r_.__value_.__r.__words[0];
          }
          std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v190);
          float v191 = v189;
          float v192 = v188;
          realityio::TimelineGroupFactory::addTimeline(v187, v174, (long long *)&v329, "childSceneClip", v192, v191);
          if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v329.__r_.__value_.__l.__data_);
          }
          ++v185;
        }
        while (v185 != v186);
      }
    }
  }
  if (v293)
  {
    uint64_t v193 = (void *)v293[3];
    uint64_t v194 = v193[6] - v193[5];
    if (v194)
    {
      uint64_t v195 = 0;
      unint64_t v196 = v194 >> 3;
      if (v196 <= 1) {
        uint64_t v197 = 1;
      }
      else {
        uint64_t v197 = v196;
      }
      do
      {
        uint64_t v198 = *(void *)(v193[5] + 8 * v195);
        __p.__r_.__value_.__r.__words[0] = *(void *)(v193[2] + 8 * v195);
        if (__p.__r_.__value_.__r.__words[0])
        {
          RERetain();
          std::string::size_type v199 = __p.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v199 = 0;
        }
        double v200 = *(double *)(v198 + 16);
        double v201 = *(double *)(v198 + 24);
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v202 = &v322;
        }
        else {
          v202 = (std::string *)v322.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v202);
        float v203 = v201;
        float v204 = v200;
        realityio::TimelineGroupFactory::addTimeline((char *)&v316, v199, (long long *)&v329, "entitySceneClip", v204, v203);
        if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v329.__r_.__value_.__l.__data_);
        }
        double v205 = *(double *)(v198 + 16);
        double v206 = *(double *)(v198 + 24);
        std::string::size_type v207 = __p.__r_.__value_.__r.__words[0];
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v208 = &v322;
        }
        else {
          uint64_t v208 = (std::string *)v322.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v208);
        float v209 = v206;
        float v210 = v205;
        realityio::TimelineGroupFactory::addTimeline((char *)&v310, v207, (long long *)&v329, "defaultSceneClip", v210, v209);
        if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v329.__r_.__value_.__l.__data_);
        }
        v211 = *(char ***)a10;
        v212 = *(char ***)(a10 + 8);
        while (v211 != v212)
        {
          uint64_t v213 = *v211;
          double v214 = *(double *)(v198 + 16);
          double v215 = *(double *)(v198 + 24);
          std::string::size_type v216 = __p.__r_.__value_.__r.__words[0];
          if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v217 = &v322;
          }
          else {
            uint64_t v217 = (std::string *)v322.__r_.__value_.__r.__words[0];
          }
          std::string::basic_string[abi:ne180100]<0>(&v329, (char *)v217);
          float v218 = v215;
          float v219 = v214;
          realityio::TimelineGroupFactory::addTimeline(v213, v216, (long long *)&v329, "childSceneClip", v219, v218);
          if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v329.__r_.__value_.__l.__data_);
          }
          ++v211;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
        ++v195;
      }
      while (v195 != v197);
    }
  }
  int v221 = *(char ***)(a10 + 8);
  unint64_t v220 = *(void *)(a10 + 16);
  if ((unint64_t)v221 >= v220)
  {
    uint64_t v226 = *(char ***)a10;
    uint64_t v227 = ((uint64_t)v221 - *(void *)a10) >> 3;
    unint64_t v228 = v227 + 1;
    uint64_t v224 = v285;
    uint64_t v223 = v286;
    std::string::size_type v225 = v288;
    if ((unint64_t)(v227 + 1) >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v229 = v220 - (void)v226;
    if (v229 >> 2 > v228) {
      unint64_t v228 = v229 >> 2;
    }
    if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v230 = v228;
    }
    if (v230)
    {
      if (v230 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v231 = (char *)operator new(8 * v230);
    }
    else
    {
      v231 = 0;
    }
    double v232 = (std::string **)&v231[8 * v227];
    *double v232 = &v310;
    v222 = v232 + 1;
    if (v221 != v226)
    {
      do
      {
        v233 = (std::string *)*--v221;
        *--double v232 = v233;
      }
      while (v221 != v226);
      int v221 = *(char ***)a10;
    }
    *(void *)a10 = v232;
    *(void *)(a10 + 8) = v222;
    *(void *)(a10 + 16) = &v231[8 * v230];
    if (v221) {
      operator delete(v221);
    }
  }
  else
  {
    *int v221 = (char *)&v310;
    v222 = v221 + 1;
    uint64_t v224 = v285;
    uint64_t v223 = v286;
    std::string::size_type v225 = v288;
  }
  *(void *)(a10 + 8) = v222;
  float v235 = a11[1];
  unint64_t v234 = (unint64_t)a11[2];
  if ((unint64_t)v235 >= v234)
  {
    v238 = *a11;
    uint64_t v239 = v235 - *a11;
    unint64_t v240 = v239 + 1;
    uint64_t v237 = v284;
    if ((unint64_t)(v239 + 1) >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v241 = v234 - (void)v238;
    if (v241 >> 2 > v240) {
      unint64_t v240 = v241 >> 2;
    }
    if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v242 = v240;
    }
    if (v242)
    {
      if (v242 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v243 = (char *)operator new(8 * v242);
    }
    else
    {
      v243 = 0;
    }
    v244 = (char ****)&v243[8 * v239];
    float32x2_t *v244 = &v305;
    uint64_t v236 = v244 + 1;
    if (v235 != v238)
    {
      do
      {
        float v245 = *--v235;
        *--v244 = v245;
      }
      while (v235 != v238);
      float v235 = *a11;
    }
    *a11 = v244;
    a11[1] = v236;
    a11[2] = (char ****)&v243[8 * v242];
    if (v235) {
      operator delete(v235);
    }
  }
  else
  {
    *float v235 = &v305;
    uint64_t v236 = v235 + 1;
    uint64_t v237 = v284;
  }
  a11[1] = v236;
  ChildCFIndex Count = REEntityGetChildCount();
  if (ChildCount)
  {
    for (uint64_t i = 0; i != ChildCount; ++i)
    {
      uint64_t Child = REEntityGetChild();
      realityio::buildSceneAssetsAndAnimationLibraries(v223, 0, v224, Child, &v322, v294, v295, a8, a9, a10, a11, a12);
    }
  }
  if (v320 != v319 || v314 != v313 || v307)
  {
    v326 = 0;
    REAnimationLibraryComponentGetComponentType();
    if (REEntityGetComponentByClass() && REAnimationLibraryComponentGetAnimationLibraryAsset())
    {
      uint64_t v249 = REEngineGetServiceLocator();
      MEMORY[0x2455CDC30](v249);
      v326 = (void **)REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
      if (!v326) {
        goto LABEL_351;
      }
    }
    else if (!v326)
    {
LABEL_351:
      v326 = (void **)REAnimationLibraryDefinitionCreate();
    }
    if (v320 != v319)
    {
      uint64_t v328 = 0;
      REEntityGetName();
      uint64_t v328 = REAnimationSceneEntityDefinitionCreate();
      if (v237)
      {
        float v250 = (void *)v237[3];
        uint64_t v251 = v250[6] - v250[5];
        if (v251)
        {
          uint64_t v252 = 0;
          if ((unint64_t)(v251 >> 3) <= 1) {
            uint64_t v253 = 1;
          }
          else {
            uint64_t v253 = v251 >> 3;
          }
          do
          {
            REAnimationLibraryDefinitionAddEntryAsset();
            std::to_string(&__p, ++v252);
            v254 = std::string::insert(&__p, 0, "skeletal animation ");
            long long v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
            v329.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v329.__r_.__value_.__l.__data_ = v255;
            v254->__r_.__value_.__l.__size_ = 0;
            v254->__r_.__value_.__r.__words[2] = 0;
            v254->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            REAnimationLibraryDefinitionAddKeyedEntryIndex();
            if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v329.__r_.__value_.__l.__data_);
            }
          }
          while (v253 != v252);
          float v250 = (void *)v237[3];
          std::string::size_type v225 = v288;
        }
        v329.__r_.__value_.__r.__words[0] = v250[1];
        if (v329.__r_.__value_.__r.__words[0]) {
          RERetain();
        }
        REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset();
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v329);
      }
      if (v225)
      {
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationLibraryDefinitionAddKeyedEntryIndex();
        REAnimationSceneEntityDefinitionSetHasTransformAnimations();
      }
      if (v287)
      {
        uint64_t v256 = v287[3];
        if (*(void *)(v256 + 8))
        {
          REAnimationLibraryDefinitionAddEntryAsset();
          REAnimationLibraryDefinitionAddKeyedEntryIndex();
          uint64_t v256 = v287[3];
        }
        if (*(void *)(v256 + 16))
        {
          REAnimationLibraryDefinitionAddEntryAsset();
          REAnimationLibraryDefinitionAddKeyedEntryIndex();
        }
      }
      if (v293)
      {
        uint64_t v257 = *(void *)(v293[3] + 48) - *(void *)(v293[3] + 40);
        if (v257)
        {
          uint64_t v258 = 0;
          unint64_t v259 = v257 >> 3;
          if (v259 <= 1) {
            uint64_t v260 = 1;
          }
          else {
            uint64_t v260 = v259;
          }
          while (1)
          {
            uint64_t v261 = v293[3];
            REAnimationLibraryDefinitionAddEntryAsset();
            uint64_t String = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(*(void *)(v261 + 40) + 8 * v258));
            REAnimationLibraryDefinitionAddKeyedEntryIndex();
            uint64_t v263 = v293[3];
            uint64_t v264 = *(unsigned __int8 *)(v263 + 87);
            size_t v265 = *(void *)(v263 + 72);
            if ((v264 & 0x80u) == 0) {
              uint64_t v266 = *(unsigned __int8 *)(v263 + 87);
            }
            else {
              uint64_t v266 = *(void *)(v263 + 72);
            }
            uint64_t v267 = *((unsigned __int8 *)String + 23);
            int v268 = (char)v267;
            if ((v267 & 0x80u) != 0) {
              uint64_t v267 = String[1];
            }
            if (v266 != v267) {
              goto LABEL_398;
            }
            v269 = (const void **)(v263 + 64);
            if (v268 < 0) {
              uint64_t String = (void *)*String;
            }
            if ((v264 & 0x80) == 0) {
              break;
            }
            if (!memcmp(*v269, String, v265)) {
              goto LABEL_397;
            }
LABEL_398:
            if (++v258 == v260) {
              goto LABEL_399;
            }
          }
          if (v264)
          {
            v270 = (unsigned __int8 *)String;
            while (*(unsigned __int8 *)v269 == *v270)
            {
              v269 = (const void **)((char *)v269 + 1);
              ++v270;
              if (!--v264) {
                goto LABEL_397;
              }
            }
            goto LABEL_398;
          }
LABEL_397:
          REAnimationLibraryDefinitionSetDefaultEntryKey();
          goto LABEL_398;
        }
      }
LABEL_399:
      uint64_t v271 = *(void *)(v224 + 48);
      v272 = operator new(0x38uLL);
      void *v272 = &unk_26F3327C8;
      v272[1] = &v323;
      v272[2] = &v316;
      v272[3] = &v328;
      v272[4] = &v326;
      v272[5] = &v324;
      v272[6] = v223;
      v330 = v272;
      (*(void (**)(uint64_t, std::string *))(*(void *)v271 + 16))(v271, &v329);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v329);
      RERelease();
    }
    if (v314 != v313)
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      REEntityGetName();
      __p.__r_.__value_.__r.__words[0] = REAnimationSceneEntityDefinitionCreate();
      if (v237)
      {
        v329.__r_.__value_.__r.__words[0] = *(void *)(v237[3] + 8);
        if (v329.__r_.__value_.__r.__words[0]) {
          RERetain();
        }
        REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset();
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v329);
      }
      if (v225) {
        REAnimationSceneEntityDefinitionSetHasTransformAnimations();
      }
      uint64_t v273 = *(void *)(v224 + 48);
      v274 = operator new(0x40uLL);
      void *v274 = &unk_26F332848;
      v274[1] = &v323;
      v274[2] = &v310;
      v274[3] = &__p;
      v274[4] = v223;
      v274[5] = &v326;
      v274[6] = &v305;
      v274[7] = &v324;
      v330 = v274;
      (*(void (**)(uint64_t, std::string *))(*(void *)v273 + 16))(v273, &v329);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v329);
      RERelease();
    }
    if (v283 && v314 != v313)
    {
      long long v275 = (char *)REEntityGetName();
      v276 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v329, v275);
      uint64_t v277 = std::string::append(v276, "__rootAnimationScene");
      long long v278 = *(_OWORD *)&v277->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v277->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v278;
      v277->__r_.__value_.__l.__size_ = 0;
      v277->__r_.__value_.__r.__words[2] = 0;
      v277->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v329.__r_.__value_.__l.__data_);
      }
      uint64_t v328 = 0;
      uint64_t v328 = REAnimationSceneEntityDefinitionCreate();
      uint64_t v279 = *(void *)(v224 + 48);
      float v280 = operator new(0x40uLL);
      *float v280 = &unk_26F3328C8;
      v280[1] = &v323;
      v280[2] = &v310;
      v280[3] = &v328;
      v280[4] = v223;
      v280[5] = &v326;
      v280[6] = &v305;
      v280[7] = &v324;
      v330 = v280;
      (*(void (**)(uint64_t, std::string *))(*(void *)v279 + 16))(v279, &v329);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v329);
      RERelease();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (REAnimationLibraryDefinitionGetEntryCount())
    {
      uint64_t v281 = *(void *)(v224 + 48);
      float v282 = operator new(0x28uLL);
      *float v282 = &unk_26F332948;
      v282[1] = &v323;
      v282[2] = &v326;
      v282[3] = &v324;
      v282[4] = v223;
      v330 = v282;
      (*(void (**)(uint64_t, std::string *))(*(void *)v281 + 16))(v281, &v329);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v329);
    }
    RERelease();
  }
  *(void *)(a10 + 8) -= 8;
  --a11[1];
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)&v302, v303);
  std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(v306);
  std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(v309[0]);
  v329.__r_.__value_.__r.__words[0] = (std::string::size_type)&v313;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v329);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v310.__r_.__value_.__l.__data_);
  }
  v329.__r_.__value_.__r.__words[0] = (std::string::size_type)&v319;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v329);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v316.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v322.__r_.__value_.__l.__data_);
  }
}

void sub_23F524960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  realityio::TimelineGroupFactory::~TimelineGroupFactory(&a63);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,realityio::TimelineGroupFactory>::~pair(uint64_t a1)
{
  size_t v3 = (void **)(a1 + 64);
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t realityio::removeAnimationLibraries(uint64_t result, uint64_t a2, void *a3)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = a2;
  if (a2)
  {
    uint64_t v4 = result;
    BOOL result = (uint64_t)std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(a3, &v9);
    if (!result)
    {
      std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>((uint64_t)a3, &v9, &v9);
      uint64_t v5 = *(void *)(v4 + 48);
      v10[0] = &unk_26F332A48;
      v10[1] = &v9;
      v10[3] = v10;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 16))(v5, v10);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v10);
      BOOL result = REEntityGetChildCount();
      uint64_t v6 = result;
      if (result)
      {
        uint64_t v7 = 0;
        do
        {
          uint64_t Child = REEntityGetChild();
          BOOL result = realityio::removeAnimationLibraries(v4, Child, a3);
          ++v7;
        }
        while (v6 != v7);
      }
    }
  }
  return result;
}

void sub_23F524DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnimationSceneAssetBuilder::run(realityio::AnimationSceneAssetBuilder *this, std::string *a2)
{
  uint64_t v441 = *MEMORY[0x263EF8340];
  uint64_t v4 = realityio::EntityBuilder::kRootEntityInputName(this);
  long long v385 = (realityio::Inputs *)a2;
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v4, (uint64_t)v422);
  if (v422[0] && v423)
  {
    uint64_t v5 = realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v421, 2032, (uint64_t)this);
    uint64_t v6 = realityio::SkeletalAnimationAggregationBuilder::kOutputName(v5);
    std::string::size_type v409 = 0;
    v410.__r_.__value_.__r.__words[0] = 0;
    std::string::pointer data = (std::__shared_weak_count *)a2[1].__r_.__value_.__l.__data_;
    if (data)
    {
      v410.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__shared_weak_count::lock(data);
      if (v410.__r_.__value_.__r.__words[0]) {
        std::string::size_type v409 = a2->__r_.__value_.__r.__words[2];
      }
    }
    MEMORY[0x2455CF830](&v410.__r_.__value_.__r.__words[1], v6);
    char v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>((void *)a2->__r_.__value_.__l.__size_, &v409);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    if (v8 == v10)
    {
      std::operator+<char>();
      uint8x8_t v42 = std::string::append((std::string *)v403, ") at prim path (");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      *(void *)&v406[16] = *((void *)&v42->__r_.__value_.__l + 2);
      *(_OWORD *)v406 = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[1].__r_.__value_.__r.__words[1]);
      int v45 = *(char *)(String + 23);
      if (v45 >= 0) {
        unint64_t v46 = (const std::string::value_type *)String;
      }
      else {
        unint64_t v46 = *(const std::string::value_type **)String;
      }
      if (v45 >= 0) {
        std::string::size_type v47 = *(unsigned __int8 *)(String + 23);
      }
      else {
        std::string::size_type v47 = *(void *)(String + 8);
      }
      uint8x8_t v48 = std::string::append((std::string *)v406, v46, v47);
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      *(void *)&v413[16] = *((void *)&v48->__r_.__value_.__l + 2);
      *(_OWORD *)v413 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      uint64_t v50 = std::string::append((std::string *)v413, ")");
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v434, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      long long v417 = *(_OWORD *)&v434.__r_.__value_.__l.__data_;
      std::string::size_type v52 = v434.__r_.__value_.__r.__words[2];
      *(void *)v419 = v435.__r_.__value_.__r.__words[0];
      *(void *)&v419[7] = *(std::string::size_type *)((char *)v435.__r_.__value_.__r.__words + 7);
      std::string::value_type v53 = v435.__r_.__value_.__s.__data_[15];
      *(_OWORD *)&v435.__r_.__value_.__l.__data_ = 0uLL;
      v434.__r_.__value_.__r.__words[2] = 0;
      v416[0] = 0;
      std::string::size_type v418 = v52;
      std::string::value_type v420 = v53;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v413[23] & 0x80000000) != 0) {
        operator delete(*(void **)v413);
      }
      if ((v406[23] & 0x80000000) != 0) {
        operator delete(*(void **)v406);
      }
      if ((v403[23] & 0x80000000) != 0) {
        operator delete(*(void **)v403);
      }
    }
    else
    {
      p_std::string::size_type size = &v434.__r_.__value_.__l.__size_;
      memset(v406, 0, 24);
      unint64_t v2 = 1;
      do
      {
        uint64_t v12 = *((void *)v9 + 5);
        uint64_t v13 = *(std::mutex **)(v12 + 16);
        std::string::size_type v14 = *(std::__shared_weak_count **)(v12 + 24);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*((void *)v9 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
          Emptyuint64_t String = (const void **)((*((void *)v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
        }
        realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(v13, EmptyString, (uint64_t)&v434);
        if (v434.__r_.__value_.__s.__data_[0])
        {
          long long v16 = *(_OWORD *)&v434.__r_.__value_.__r.__words[1];
          if (v434.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v434.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
            __p[0] = 1;
            *(_OWORD *)&__p[8] = v16;
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
          }
          else
          {
            __p[0] = 1;
            *(void *)&__p[8] = v434.__r_.__value_.__l.__size_;
            *(void *)&__p[16] = 0;
          }
        }
        else
        {
          *(_OWORD *)v413 = *(_OWORD *)&v434.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v413[16], v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v413[16] = *(_OWORD *)&v435.__r_.__value_.__l.__data_;
            *(void *)v414 = *((void *)&v435.__r_.__value_.__l + 2);
          }
          __p[0] = 0;
          *(_OWORD *)&__p[8] = *(_OWORD *)v413;
          *(_OWORD *)&__p[24] = *(_OWORD *)&v413[16];
          *(void *)&__p[40] = *(void *)v414;
        }
        realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v434);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (__p[0])
        {
          uint64_t v17 = *(void *)&v406[8];
          if (*(void *)&v406[8] >= *(void *)&v406[16])
          {
            uint64_t v20 = (uint64_t)(*(void *)&v406[8] - *(void *)v406) >> 4;
            unint64_t v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 60) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v22 = *(void *)&v406[16] - *(void *)v406;
            if ((uint64_t)(*(void *)&v406[16] - *(void *)v406) >> 3 > v21) {
              unint64_t v21 = v22 >> 3;
            }
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v21;
            }
            long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v23);
            int8x8_t v26 = &v24[16 * v20];
            uint64_t v27 = *(void *)&__p[16];
            *(_OWORD *)int8x8_t v26 = *(_OWORD *)&__p[8];
            if (v27) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
            }
            size_t v19 = v26 + 16;
            unint64_t v29 = *(void **)&v406[8];
            unint64_t v28 = *(void **)v406;
            if (*(void *)&v406[8] == *(void *)v406)
            {
              *(void *)v406 = &v24[16 * v20];
              *(void *)&v406[8] = v26 + 16;
              *(void *)&v406[16] = &v24[16 * v25];
            }
            else
            {
              do
              {
                long long v30 = *((_OWORD *)v29 - 1);
                v29 -= 2;
                *((_OWORD *)v26 - 1) = v30;
                v26 -= 16;
                *unint64_t v29 = 0;
                v29[1] = 0;
              }
              while (v29 != v28);
              unint64_t v31 = *(void **)&v406[8];
              unint64_t v29 = *(void **)v406;
              *(void *)v406 = v26;
              *(void *)&v406[8] = v19;
              *(void *)&v406[16] = &v24[16 * v25];
              while (v31 != v29)
              {
                uint64_t v32 = (std::__shared_weak_count *)*(v31 - 1);
                if (v32) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                }
                v31 -= 2;
              }
            }
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            **(void **)&v406[8] = *(void *)&__p[8];
            uint64_t v18 = *(void *)&__p[16];
            *(void *)(v17 + 8) = *(void *)&__p[16];
            if (v18) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
            }
            size_t v19 = (_OWORD *)(v17 + 16);
          }
          *(void *)&v406[8] = v19;
        }
        char v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
        uint64_t v9 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v9;
      }
      while (v9 != v11);
      memset(&v434, 0, sizeof(v434));
      long long v33 = *(_OWORD *)v406;
      a2 = &v434;
      *(void *)std::string __p = &v434;
      __p[8] = 0;
      uint64_t v34 = *(void *)&v406[8] - *(void *)v406;
      if (*(void *)&v406[8] == *(void *)v406)
      {
        std::string::size_type v41 = 0;
        int8x8_t v35 = 0;
      }
      else
      {
        if (v34 < 0) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        int8x8_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v34 >> 4);
        uint64_t v36 = 0;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        v434.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
        v434.__r_.__value_.__r.__words[2] = (std::string::size_type)&v35[16 * v37];
        do
        {
          uint64_t v38 = &v35[v36];
          uint64_t v39 = v33 + v36;
          *(void *)uint64_t v38 = *(void *)(v33 + v36);
          uint64_t v40 = *(void *)(v33 + v36 + 8);
          *((void *)v38 + 1) = v40;
          if (v40) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
          }
          v36 += 16;
        }
        while (v39 + 16 != *((void *)&v33 + 1));
        std::string::size_type v41 = v434.__r_.__value_.__r.__words[2];
        uint64_t v34 = (uint64_t)&v35[v36];
      }
      v416[0] = 1;
      *(void *)&long long v417 = v35;
      *((void *)&v417 + 1) = v34;
      std::string::size_type v418 = v41;
      memset(&v434, 0, sizeof(v434));
      *(void *)std::string __p = &v434;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v406;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
    }
    if ((v410.__r_.__value_.__s.__data_[8] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v410.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v54 = (realityio::TransformAnimationAggregationBuilder *)v410.__r_.__value_.__r.__words[0];
    if (v410.__r_.__value_.__r.__words[0]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v410.__r_.__value_.__l.__data_);
    }
    uint64_t v55 = realityio::TransformAnimationAggregationBuilder::kOutputName(v54);
    std::string::size_type v409 = 0;
    v410.__r_.__value_.__r.__words[0] = 0;
    unint64_t v56 = (std::__shared_weak_count *)*((void *)v385 + 3);
    if (v56)
    {
      v410.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__shared_weak_count::lock(v56);
      if (v410.__r_.__value_.__r.__words[0]) {
        std::string::size_type v409 = *((void *)v385 + 2);
      }
    }
    MEMORY[0x2455CF830](&v410.__r_.__value_.__r.__words[1], v55);
    unint64_t v57 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((void **)v385 + 1), &v409);
    uint64_t v58 = (void *)v57;
    double v60 = v59;
    if ((void *)v57 == v59)
    {
      std::operator+<char>();
      float v79 = std::string::append((std::string *)&v425, ") at prim path (");
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      *(void *)&v403[16] = *((void *)&v79->__r_.__value_.__l + 2);
      *(_OWORD *)v403 = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      uint64_t v81 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v385 + 32));
      int v82 = *(char *)(v81 + 23);
      if (v82 >= 0) {
        uint64_t v83 = (const std::string::value_type *)v81;
      }
      else {
        uint64_t v83 = *(const std::string::value_type **)v81;
      }
      if (v82 >= 0) {
        std::string::size_type v84 = *(unsigned __int8 *)(v81 + 23);
      }
      else {
        std::string::size_type v84 = *(void *)(v81 + 8);
      }
      char v85 = std::string::append((std::string *)v403, v83, v84);
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      *(void *)&v406[16] = *((void *)&v85->__r_.__value_.__l + 2);
      *(_OWORD *)v406 = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      char v87 = std::string::append((std::string *)v406, ")");
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v87->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v434, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(std::string *)&v413[8] = v434;
      *(void *)v414 = v435.__r_.__value_.__r.__words[0];
      *(void *)&v414[7] = *(std::string::size_type *)((char *)v435.__r_.__value_.__r.__words + 7);
      std::string::value_type v89 = v435.__r_.__value_.__s.__data_[15];
      *(_OWORD *)&v435.__r_.__value_.__l.__data_ = 0uLL;
      v434.__r_.__value_.__r.__words[2] = 0;
      v413[0] = 0;
      std::string::value_type v415 = v89;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v406[23] & 0x80000000) != 0) {
        operator delete(*(void **)v406);
      }
      if ((v403[23] & 0x80000000) != 0) {
        operator delete(*(void **)v403);
      }
      if (v426.__r_.__value_.__s.__data_[7] < 0)
      {
        uint64_t v90 = (std::string::size_type *)v425;
LABEL_135:
        operator delete(v90);
      }
    }
    else
    {
      double v61 = 0;
      unint64_t v2 = 0;
      unint64_t v62 = 0;
      do
      {
        uint64_t v63 = v58[5];
        float v64 = *(std::mutex **)(v63 + 16);
        double v65 = *(std::__shared_weak_count **)(v63 + 24);
        if (v65) {
          atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((v58[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
          double v66 = (const void **)((v58[7] & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          double v66 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v57);
        }
        realityio::Outputs::getRawValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>(v64, v66, (uint64_t)&v434);
        int v67 = v434.__r_.__value_.__s.__data_[0];
        if (v434.__r_.__value_.__s.__data_[0])
        {
          std::string::size_type size = v434.__r_.__value_.__l.__size_;
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)&v434.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[16], v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
            std::string::size_type size = *(void *)__p;
            p_std::string::size_type size = *(std::string::size_type **)&__p[16];
            LOBYTE(a2) = __p[39];
            if (!v434.__r_.__value_.__s.__data_[0] && SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v435.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            *(std::string *)&__p[16] = v435;
            std::string::size_type size = *(void *)__p;
            p_std::string::size_type size = (std::string::size_type *)v435.__r_.__value_.__r.__words[0];
            LOBYTE(a2) = *((unsigned char *)&v435.__r_.__value_.__s + 23);
          }
        }
        if (v65) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        }
        if (v67)
        {
          if (v2 >= v62)
          {
            uint64_t v69 = (uint64_t)(v2 - (void)v61) >> 3;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v62 - (void)v61) >> 2 > v70) {
              unint64_t v70 = (uint64_t)(v62 - (void)v61) >> 2;
            }
            if (v62 - (unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v70;
            }
            if (v57) {
              unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v57);
            }
            else {
              uint64_t v71 = 0;
            }
            uint64_t v72 = (std::string::size_type *)(v57 + 8 * v69);
            *uint64_t v72 = size;
            uint64_t v73 = v72 + 1;
            while ((std::string::size_type *)v2 != v61)
            {
              std::string::size_type v74 = *(void *)(v2 - 8);
              v2 -= 8;
              *--uint64_t v72 = v74;
            }
            unint64_t v62 = v57 + 8 * v71;
            if (v61) {
              operator delete(v61);
            }
            double v61 = v72;
            unint64_t v2 = (unint64_t)v73;
          }
          else
          {
            *(void *)unint64_t v2 = size;
            v2 += 8;
          }
        }
        else if ((a2 & 0x80) != 0)
        {
          operator delete(p_size);
        }
        uint64_t v58 = (void *)*v58;
      }
      while (v58 != v60);
      uint64_t v75 = v2 - (void)v61;
      if ((std::string::size_type *)v2 == v61)
      {
        std::string::size_type v76 = 0;
        float v78 = 0;
        a2 = 0;
      }
      else
      {
        if (v75 < 0) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v75 >> 3);
        a2 = (std::string *)&v76[8 * v77];
        memmove(v76, v61, v2 - (void)v61);
        float v78 = &v76[8 * (v75 >> 3)];
      }
      v413[0] = 1;
      *(void *)&v413[8] = v76;
      *(void *)&v413[16] = v78;
      *(void *)&v413[24] = a2;
      if (v61)
      {
        uint64_t v90 = v61;
        goto LABEL_135;
      }
    }
    if ((v410.__r_.__value_.__s.__data_[8] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v410.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v91 = (realityio::SpatialAudioComponentBuilder *)v410.__r_.__value_.__r.__words[0];
    if (v410.__r_.__value_.__r.__words[0]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v410.__r_.__value_.__l.__data_);
    }
    uint64_t v92 = realityio::SpatialAudioComponentBuilder::kOutputName(v91);
    *(_OWORD *)v406 = 0uLL;
    uint64_t v93 = (std::__shared_weak_count *)*((void *)v385 + 3);
    if (v93)
    {
      *(void *)&v406[8] = std::__shared_weak_count::lock(v93);
      if (*(void *)&v406[8]) {
        *(void *)v406 = *((void *)v385 + 2);
      }
    }
    MEMORY[0x2455CF830](&v406[16], v92);
    unint64_t v94 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((void **)v385 + 1), v406);
    uint64_t v95 = (void *)v94;
    unint64_t v97 = v96;
    if ((void *)v94 == v96)
    {
      std::operator+<char>();
      uint64_t v117 = std::string::append((std::string *)&v400, ") at prim path (");
      long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      v426.__r_.__value_.__r.__words[0] = v117->__r_.__value_.__r.__words[2];
      long long v425 = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      uint64_t v119 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v385 + 32));
      int v120 = *(char *)(v119 + 23);
      if (v120 >= 0) {
        std::string::size_type v121 = (const std::string::value_type *)v119;
      }
      else {
        std::string::size_type v121 = *(const std::string::value_type **)v119;
      }
      if (v120 >= 0) {
        std::string::size_type v122 = *(unsigned __int8 *)(v119 + 23);
      }
      else {
        std::string::size_type v122 = *(void *)(v119 + 8);
      }
      uint64_t v123 = std::string::append((std::string *)&v425, v121, v122);
      long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      *(void *)&v403[16] = *((void *)&v123->__r_.__value_.__l + 2);
      *(_OWORD *)v403 = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      BOOL v125 = std::string::append((std::string *)v403, ")");
      long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v125->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v126;
      v125->__r_.__value_.__l.__size_ = 0;
      v125->__r_.__value_.__r.__words[2] = 0;
      v125->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v434, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      std::string v410 = v434;
      *(void *)v411 = v435.__r_.__value_.__r.__words[0];
      *(void *)&v411[7] = *(std::string::size_type *)((char *)v435.__r_.__value_.__r.__words + 7);
      std::string::value_type v127 = v435.__r_.__value_.__s.__data_[15];
      *(_OWORD *)&v435.__r_.__value_.__l.__data_ = 0uLL;
      v434.__r_.__value_.__r.__words[2] = 0;
      LOBYTE(v409) = 0;
      std::string::value_type v412 = v127;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v403[23] & 0x80000000) != 0) {
        operator delete(*(void **)v403);
      }
      if (v426.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v425);
      }
      if (SBYTE7(v401) < 0)
      {
        double v128 = (std::string::size_type *)v400;
LABEL_200:
        operator delete(v128);
      }
    }
    else
    {
      uint64_t v98 = 0;
      unint64_t v2 = 0;
      unint64_t v99 = 0;
      do
      {
        uint64_t v100 = v95[5];
        uint64_t v101 = *(std::mutex **)(v100 + 16);
        unint64_t v102 = *(std::__shared_weak_count **)(v100 + 24);
        if (v102) {
          atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((v95[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v103 = (const void **)((v95[7] & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          unint64_t v103 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v94);
        }
        realityio::Outputs::getRawValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*>(v101, v103, (uint64_t)&v434);
        int v104 = v434.__r_.__value_.__s.__data_[0];
        if (v434.__r_.__value_.__s.__data_[0])
        {
          std::string::size_type v105 = v434.__r_.__value_.__l.__size_;
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)&v434.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[16], v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
            std::string::size_type v105 = *(void *)__p;
            p_std::string::size_type size = *(std::string::size_type **)&__p[16];
            LOBYTE(a2) = __p[39];
            if (!v434.__r_.__value_.__s.__data_[0] && SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v435.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            *(std::string *)&__p[16] = v435;
            std::string::size_type v105 = *(void *)__p;
            p_std::string::size_type size = (std::string::size_type *)v435.__r_.__value_.__r.__words[0];
            LOBYTE(a2) = *((unsigned char *)&v435.__r_.__value_.__s + 23);
          }
        }
        if (v102) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
        if (v104)
        {
          if (v2 >= v99)
          {
            uint64_t v106 = (uint64_t)(v2 - (void)v98) >> 3;
            unint64_t v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v99 - (void)v98) >> 2 > v107) {
              unint64_t v107 = (uint64_t)(v99 - (void)v98) >> 2;
            }
            if (v99 - (unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v94 = v107;
            }
            if (v94) {
              unint64_t v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v94);
            }
            else {
              uint64_t v108 = 0;
            }
            uint64_t v109 = (std::string::size_type *)(v94 + 8 * v106);
            *uint64_t v109 = v105;
            uint64_t v110 = v109 + 1;
            while ((std::string::size_type *)v2 != v98)
            {
              std::string::size_type v111 = *(void *)(v2 - 8);
              v2 -= 8;
              *--uint64_t v109 = v111;
            }
            unint64_t v99 = v94 + 8 * v108;
            if (v98) {
              operator delete(v98);
            }
            uint64_t v98 = v109;
            unint64_t v2 = (unint64_t)v110;
          }
          else
          {
            *(void *)unint64_t v2 = v105;
            v2 += 8;
          }
        }
        else if ((a2 & 0x80) != 0)
        {
          operator delete(p_size);
        }
        uint64_t v95 = (void *)*v95;
      }
      while (v95 != v97);
      uint64_t v112 = v2 - (void)v98;
      if ((std::string::size_type *)v2 == v98)
      {
        uint64_t v113 = 0;
        std::string::size_type v116 = 0;
        std::string::size_type v115 = 0;
      }
      else
      {
        if (v112 < 0) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v113 = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v112 >> 3);
        std::string::size_type v115 = (std::string::size_type)v113 + 8 * v114;
        memmove(v113, v98, v2 - (void)v98);
        std::string::size_type v116 = (std::string::size_type)v113 + 8 * (v112 >> 3);
      }
      LOBYTE(v409) = 1;
      v410.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
      v410.__r_.__value_.__l.__size_ = v116;
      v410.__r_.__value_.__r.__words[2] = v115;
      if (v98)
      {
        double v128 = v98;
        goto LABEL_200;
      }
    }
    if ((v406[16] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v406[16] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    double v129 = *(realityio::SkeletalAnimationAggregationBuilder **)&v406[8];
    if (*(void *)&v406[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v406[8]);
    }
    uint64_t v130 = realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v129);
    long long v425 = 0uLL;
    std::string::size_type v131 = (std::__shared_weak_count *)*((void *)v385 + 3);
    if (v131)
    {
      *((void *)&v425 + 1) = std::__shared_weak_count::lock(v131);
      if (*((void *)&v425 + 1)) {
        *(void *)&long long v425 = *((void *)v385 + 2);
      }
    }
    MEMORY[0x2455CF830](&v426, v130);
    double v132 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((void **)v385 + 1), &v425);
    float v133 = v132;
    uint64_t v135 = v134;
    if (v132 == v134)
    {
      std::operator+<char>();
      uint64_t v166 = std::string::append((std::string *)&v397, ") at prim path (");
      long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
      *(void *)&long long v401 = *((void *)&v166->__r_.__value_.__l + 2);
      long long v400 = v167;
      v166->__r_.__value_.__l.__size_ = 0;
      v166->__r_.__value_.__r.__words[2] = 0;
      v166->__r_.__value_.__r.__words[0] = 0;
      uint64_t v168 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v385 + 32));
      int v169 = *(char *)(v168 + 23);
      if (v169 >= 0) {
        double v170 = (const std::string::value_type *)v168;
      }
      else {
        double v170 = *(const std::string::value_type **)v168;
      }
      if (v169 >= 0) {
        std::string::size_type v171 = *(unsigned __int8 *)(v168 + 23);
      }
      else {
        std::string::size_type v171 = *(void *)(v168 + 8);
      }
      float v172 = std::string::append((std::string *)&v400, v170, v171);
      long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
      *(void *)&v403[16] = *((void *)&v172->__r_.__value_.__l + 2);
      *(_OWORD *)v403 = v173;
      v172->__r_.__value_.__l.__size_ = 0;
      v172->__r_.__value_.__r.__words[2] = 0;
      v172->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v174 = std::string::append((std::string *)v403, ")");
      long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v174->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v175;
      v174->__r_.__value_.__l.__size_ = 0;
      v174->__r_.__value_.__r.__words[2] = 0;
      v174->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v434, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(std::string *)&v406[8] = v434;
      *(void *)v407 = v435.__r_.__value_.__r.__words[0];
      *(void *)&v407[7] = *(std::string::size_type *)((char *)v435.__r_.__value_.__r.__words + 7);
      std::string::value_type v176 = v435.__r_.__value_.__s.__data_[15];
      *(_OWORD *)&v435.__r_.__value_.__l.__data_ = 0uLL;
      v434.__r_.__value_.__r.__words[2] = 0;
      v406[0] = 0;
      std::string::value_type v408 = v176;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v403[23] & 0x80000000) != 0) {
        operator delete(*(void **)v403);
      }
      if (SBYTE7(v401) < 0) {
        operator delete((void *)v400);
      }
      if (SBYTE7(v398) < 0) {
        operator delete((void *)v397);
      }
    }
    else
    {
      long long v400 = 0uLL;
      *(void *)&long long v401 = 0;
      unint64_t v2 = 1;
      do
      {
        uint64_t v136 = *((void *)v133 + 5);
        double v137 = *(std::mutex **)(v136 + 16);
        double v138 = *(std::__shared_weak_count **)(v136 + 24);
        if (v138) {
          atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*((void *)v133 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
          std::string::size_type v139 = (const void **)((*((void *)v133 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          std::string::size_type v139 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v132);
        }
        realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(v137, v139, (uint64_t)&v434);
        if (v434.__r_.__value_.__s.__data_[0])
        {
          long long v140 = *(_OWORD *)&v434.__r_.__value_.__r.__words[1];
          if (v434.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v434.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v140 + 1) + 8), 1uLL, memory_order_relaxed);
            __p[0] = 1;
            *(_OWORD *)&__p[8] = v140;
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
          }
          else
          {
            __p[0] = 1;
            *(void *)&__p[8] = v434.__r_.__value_.__l.__size_;
            *(void *)&__p[16] = 0;
          }
        }
        else
        {
          *(_OWORD *)v403 = *(_OWORD *)&v434.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v403[16], v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v403[16] = *(_OWORD *)&v435.__r_.__value_.__l.__data_;
            *(void *)v404 = *((void *)&v435.__r_.__value_.__l + 2);
          }
          __p[0] = 0;
          *(_OWORD *)&__p[8] = *(_OWORD *)v403;
          *(_OWORD *)&__p[24] = *(_OWORD *)&v403[16];
          *(void *)&__p[40] = *(void *)v404;
        }
        realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v434);
        if (v138) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v138);
        }
        if (__p[0])
        {
          uint64_t v141 = *((void *)&v400 + 1);
          if (*((void *)&v400 + 1) >= (unint64_t)v401)
          {
            uint64_t v144 = (uint64_t)(*((void *)&v400 + 1) - v400) >> 4;
            unint64_t v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 60) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v146 = v401 - v400;
            if ((uint64_t)(v401 - v400) >> 3 > v145) {
              unint64_t v145 = v146 >> 3;
            }
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v147 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v147 = v145;
            }
            double v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v147);
            std::string::size_type v150 = &v148[16 * v144];
            uint64_t v151 = *(void *)&__p[16];
            *(_OWORD *)std::string::size_type v150 = *(_OWORD *)&__p[8];
            if (v151) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v151 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v143 = v150 + 16;
            float v153 = (void *)*((void *)&v400 + 1);
            float v152 = (void *)v400;
            if (*((void *)&v400 + 1) == (void)v400)
            {
              *(void *)&long long v400 = &v148[16 * v144];
              *((void *)&v400 + 1) = v150 + 16;
              *(void *)&long long v401 = &v148[16 * v149];
            }
            else
            {
              do
              {
                long long v154 = *((_OWORD *)v153 - 1);
                v153 -= 2;
                *((_OWORD *)v150 - 1) = v154;
                v150 -= 16;
                *float v153 = 0;
                v153[1] = 0;
              }
              while (v153 != v152);
              std::string::size_type v155 = (void *)*((void *)&v400 + 1);
              float v153 = (void *)v400;
              *(void *)&long long v400 = v150;
              *((void *)&v400 + 1) = v143;
              *(void *)&long long v401 = &v148[16 * v149];
              while (v155 != v153)
              {
                double v156 = (std::__shared_weak_count *)*(v155 - 1);
                if (v156) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v156);
                }
                v155 -= 2;
              }
            }
            if (v153) {
              operator delete(v153);
            }
          }
          else
          {
            **((void **)&v400 + 1) = *(void *)&__p[8];
            uint64_t v142 = *(void *)&__p[16];
            *(void *)(v141 + 8) = *(void *)&__p[16];
            if (v142) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v142 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v143 = (_OWORD *)(v141 + 16);
          }
          *((void *)&v400 + 1) = v143;
        }
        double v132 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
        float v133 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v133;
      }
      while (v133 != v135);
      memset(&v434, 0, sizeof(v434));
      long long v157 = v400;
      *(void *)std::string __p = &v434;
      __p[8] = 0;
      uint64_t v158 = *((void *)&v400 + 1) - v400;
      if (*((void *)&v400 + 1) == (void)v400)
      {
        std::string::size_type v165 = 0;
        float v159 = 0;
      }
      else
      {
        if (v158 < 0) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        float v159 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v158 >> 4);
        uint64_t v160 = 0;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
        v434.__r_.__value_.__l.__size_ = (std::string::size_type)v159;
        v434.__r_.__value_.__r.__words[2] = (std::string::size_type)&v159[16 * v161];
        do
        {
          double v162 = &v159[v160];
          uint64_t v163 = v157 + v160;
          *(void *)double v162 = *(void *)(v157 + v160);
          uint64_t v164 = *(void *)(v157 + v160 + 8);
          *((void *)v162 + 1) = v164;
          if (v164) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v164 + 8), 1uLL, memory_order_relaxed);
          }
          v160 += 16;
        }
        while (v163 + 16 != *((void *)&v157 + 1));
        std::string::size_type v165 = v434.__r_.__value_.__r.__words[2];
        uint64_t v158 = (uint64_t)&v159[v160];
      }
      v406[0] = 1;
      *(void *)&v406[8] = v159;
      *(void *)&v406[16] = v158;
      *(void *)&v406[24] = v165;
      memset(&v434, 0, sizeof(v434));
      *(void *)std::string __p = &v434;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v400;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
    }
    if ((v426.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v426.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (*((void *)&v425 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v425 + 1));
    }
    std::string::basic_string[abi:ne180100]<0>(v427, "arbitraryComponentAnimationLibrary");
    v394[0] = 0;
    v394[1] = 0;
    uint64_t v177 = (std::__shared_weak_count *)*((void *)v385 + 3);
    if (v177)
    {
      v394[1] = std::__shared_weak_count::lock(v177);
      if (v394[1]) {
        v394[0] = *((void **)v385 + 2);
      }
    }
    MEMORY[0x2455CF830](&v395, v427);
    float v178 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((void **)v385 + 1), v394);
    float v179 = v178;
    unint64_t prime = (unint64_t)v180;
    if (v178 == v180)
    {
      std::operator+<char>();
      float v218 = std::string::append((std::string *)&v397, ") at prim path (");
      long long v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
      *(void *)&long long v401 = *((void *)&v218->__r_.__value_.__l + 2);
      long long v400 = v219;
      v218->__r_.__value_.__l.__size_ = 0;
      v218->__r_.__value_.__r.__words[2] = 0;
      v218->__r_.__value_.__r.__words[0] = 0;
      uint64_t v220 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v385 + 32));
      int v221 = *(char *)(v220 + 23);
      if (v221 >= 0) {
        v222 = (const std::string::value_type *)v220;
      }
      else {
        v222 = *(const std::string::value_type **)v220;
      }
      if (v221 >= 0) {
        std::string::size_type v223 = *(unsigned __int8 *)(v220 + 23);
      }
      else {
        std::string::size_type v223 = *(void *)(v220 + 8);
      }
      uint64_t v224 = std::string::append((std::string *)&v400, v222, v223);
      long long v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
      v426.__r_.__value_.__r.__words[0] = v224->__r_.__value_.__r.__words[2];
      long long v425 = v225;
      v224->__r_.__value_.__l.__size_ = 0;
      v224->__r_.__value_.__r.__words[2] = 0;
      v224->__r_.__value_.__r.__words[0] = 0;
      uint64_t v226 = std::string::append((std::string *)&v425, ")");
      long long v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v226->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v227;
      v226->__r_.__value_.__l.__size_ = 0;
      v226->__r_.__value_.__r.__words[2] = 0;
      v226->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v434, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(std::string *)&v403[8] = v434;
      *(void *)v404 = v435.__r_.__value_.__r.__words[0];
      *(void *)&v404[7] = *(std::string::size_type *)((char *)v435.__r_.__value_.__r.__words + 7);
      std::string::value_type v228 = v435.__r_.__value_.__s.__data_[15];
      *(_OWORD *)&v435.__r_.__value_.__l.__data_ = 0uLL;
      v434.__r_.__value_.__r.__words[2] = 0;
      v403[0] = 0;
      std::string::value_type v405 = v228;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (v426.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v425);
      }
      if (SBYTE7(v401) < 0) {
        operator delete((void *)v400);
      }
      if (SBYTE7(v398) < 0) {
        operator delete((void *)v397);
      }
    }
    else
    {
      long long v389 = 0uLL;
      *(void *)&long long v390 = 0;
      do
      {
        uint64_t v182 = *((void *)v179 + 5);
        float v183 = *(std::mutex **)(v182 + 16);
        unint64_t v2 = *(void *)(v182 + 24);
        if (v2) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
        }
        if ((*((void *)v179 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
          float v184 = (const void **)((*((void *)v179 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          float v184 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v178);
        }
        std::mutex::lock(v183 + 1);
        uint64_t v185 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v183->__m_.__opaque[32], v184);
        if (&v183->__m_.__opaque[40] == (char *)v185)
        {
          std::operator+<char>();
          double v189 = std::string::append((std::string *)&v397, "\" does not exist in the builder outputs");
          long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
          *(void *)&long long v401 = *((void *)&v189->__r_.__value_.__l + 2);
          long long v400 = v190;
          v189->__r_.__value_.__l.__size_ = 0;
          v189->__r_.__value_.__r.__words[2] = 0;
          v189->__r_.__value_.__r.__words[0] = 0;
          realityio::DetailedError::DetailedError(&v425, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v400);
          *(_OWORD *)&v434.__r_.__value_.__r.__words[1] = v425;
          v435.__r_.__value_.__l.__size_ = v426.__r_.__value_.__l.__size_;
          std::string::size_type v191 = v426.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v435.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v426.__r_.__value_.__r.__words[1] + 7);
          char v192 = HIBYTE(v426.__r_.__value_.__r.__words[2]);
          memset(&v426, 0, sizeof(v426));
          v434.__r_.__value_.__s.__data_[0] = 0;
          v435.__r_.__value_.__r.__words[0] = v191;
          *((unsigned char *)&v435.__r_.__value_.__s + 23) = v192;
          if (SBYTE7(v401) < 0) {
            operator delete((void *)v400);
          }
          if (SBYTE7(v398) < 0) {
            operator delete((void *)v397);
          }
        }
        else
        {
          uint64_t v186 = *(void *)(v185 + 56);
          std::string::size_type v188 = *(void *)(v186 + 8);
          std::string::size_type v187 = *(void *)(v186 + 16);
          if (v187) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v187 + 8), 1uLL, memory_order_relaxed);
          }
          v434.__r_.__value_.__s.__data_[0] = 1;
          v434.__r_.__value_.__l.__size_ = v188;
          v434.__r_.__value_.__r.__words[2] = v187;
        }
        std::mutex::unlock(v183 + 1);
        if (v434.__r_.__value_.__s.__data_[0])
        {
          long long v193 = *(_OWORD *)&v434.__r_.__value_.__r.__words[1];
          if (v434.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v434.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 1uLL, memory_order_relaxed);
            __p[0] = 1;
            *(_OWORD *)&__p[8] = v193;
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v193 + 1));
          }
          else
          {
            __p[0] = 1;
            *(void *)&__p[8] = v434.__r_.__value_.__l.__size_;
            *(void *)&__p[16] = 0;
          }
        }
        else
        {
          long long v425 = *(_OWORD *)&v434.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v426, v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
          }
          else {
            std::string v426 = v435;
          }
          __p[0] = 0;
          *(_OWORD *)&__p[8] = v425;
          *(std::string *)&__p[24] = v426;
        }
        realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v434);
        if (v2) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
        }
        if (__p[0])
        {
          uint64_t v194 = *((void *)&v389 + 1);
          if (*((void *)&v389 + 1) >= (unint64_t)v390)
          {
            uint64_t v197 = (uint64_t)(*((void *)&v389 + 1) - v389) >> 4;
            unint64_t v198 = v197 + 1;
            if ((unint64_t)(v197 + 1) >> 60) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v199 = v390 - v389;
            if ((uint64_t)(v390 - v389) >> 3 > v198) {
              unint64_t v198 = v199 >> 3;
            }
            if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v200 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v200 = v198;
            }
            double v201 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v200);
            float v203 = &v201[16 * v197];
            uint64_t v204 = *(void *)&__p[16];
            *(_OWORD *)float v203 = *(_OWORD *)&__p[8];
            if (v204) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v204 + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v196 = v203 + 16;
            unint64_t v2 = *((void *)&v389 + 1);
            uint64_t v205 = v389;
            if (*((void *)&v389 + 1) == (void)v389)
            {
              *(void *)&long long v389 = v203;
              *((void *)&v389 + 1) = v203 + 16;
              *(void *)&long long v390 = &v201[16 * v202];
            }
            else
            {
              do
              {
                long long v206 = *(_OWORD *)(v2 - 16);
                v2 -= 16;
                *((_OWORD *)v203 - 1) = v206;
                v203 -= 16;
                *(void *)unint64_t v2 = 0;
                *(void *)(v2 + 8) = 0;
              }
              while (v2 != v205);
              uint64_t v207 = *((void *)&v389 + 1);
              unint64_t v2 = v389;
              *(void *)&long long v389 = v203;
              *((void *)&v389 + 1) = v196;
              *(void *)&long long v390 = &v201[16 * v202];
              while (v207 != v2)
              {
                uint64_t v208 = *(std::__shared_weak_count **)(v207 - 8);
                if (v208) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v208);
                }
                v207 -= 16;
              }
            }
            if (v2) {
              operator delete((void *)v2);
            }
          }
          else
          {
            **((void **)&v389 + 1) = *(void *)&__p[8];
            uint64_t v195 = *(void *)&__p[16];
            *(void *)(v194 + 8) = *(void *)&__p[16];
            if (v195) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v195 + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v196 = (_OWORD *)(v194 + 16);
          }
          *((void *)&v389 + 1) = v196;
        }
        float v178 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
        float v179 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v179;
      }
      while (v179 != (pxrInternal__aapl__pxrReserved__::TfToken *)prime);
      memset(&v434, 0, sizeof(v434));
      long long v209 = v389;
      *(void *)std::string __p = &v434;
      __p[8] = 0;
      uint64_t v210 = *((void *)&v389 + 1) - v389;
      if (*((void *)&v389 + 1) == (void)v389)
      {
        std::string::size_type v217 = 0;
        v211 = 0;
      }
      else
      {
        if (v210 < 0) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        v211 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v210 >> 4);
        uint64_t v212 = 0;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v211;
        v434.__r_.__value_.__l.__size_ = (std::string::size_type)v211;
        v434.__r_.__value_.__r.__words[2] = (std::string::size_type)&v211[16 * v213];
        do
        {
          double v214 = &v211[v212];
          uint64_t v215 = v209 + v212;
          *(void *)double v214 = *(void *)(v209 + v212);
          uint64_t v216 = *(void *)(v209 + v212 + 8);
          *((void *)v214 + 1) = v216;
          if (v216) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v216 + 8), 1uLL, memory_order_relaxed);
          }
          v212 += 16;
        }
        while (v215 + 16 != *((void *)&v209 + 1));
        std::string::size_type v217 = v434.__r_.__value_.__r.__words[2];
        uint64_t v210 = (uint64_t)&v211[v212];
      }
      v403[0] = 1;
      *(void *)&v403[8] = v211;
      *(void *)&v403[16] = v210;
      *(void *)&v403[24] = v217;
      memset(&v434, 0, sizeof(v434));
      *(void *)std::string __p = &v434;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v389;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
    }
    if ((v395 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v395 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v394[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v394[1]);
    }
    if (v428 < 0) {
      operator delete(v427[0]);
    }
    long long v425 = 0u;
    *(_OWORD *)&v426.__r_.__value_.__l.__data_ = 0u;
    LODWORD(v426.__r_.__value_.__r.__words[2]) = 1065353216;
    long long v400 = 0u;
    long long v401 = 0u;
    float v402 = 1.0;
    long long v397 = 0u;
    long long v398 = 0u;
    float v399 = 1.0;
    *(_OWORD *)v394 = 0u;
    long long v395 = 0u;
    float v396 = 1.0;
    if (v416[0])
    {
      unint64_t v230 = (std::string::size_type **)*((void *)&v417 + 1);
      uint64_t v229 = (std::string::size_type **)v417;
      if ((void)v417 != *((void *)&v417 + 1))
      {
        while (1)
        {
          unint64_t prime = (unint64_t)*v229;
          v434.__r_.__value_.__r.__words[0] = **v229;
          if (v434.__r_.__value_.__r.__words[0])
          {
            RERetain();
            std::string::size_type v231 = v434.__r_.__value_.__r.__words[0];
            unint64_t prime = (unint64_t)*v229;
          }
          else
          {
            std::string::size_type v231 = 0;
          }
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v434);
          unint64_t v232 = 0x9DDFEA08EB382D69 * (((8 * v231) + 8) ^ HIDWORD(v231));
          unint64_t v233 = 0x9DDFEA08EB382D69 * (HIDWORD(v231) ^ (v232 >> 47) ^ v232);
          unint64_t v234 = 0x9DDFEA08EB382D69 * (v233 ^ (v233 >> 47));
          unint64_t v235 = *((void *)&v425 + 1);
          if (*((void *)&v425 + 1))
          {
            uint8x8_t v236 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v425 + 8));
            v236.i16[0] = vaddlv_u8(v236);
            if (v236.u32[0] > 1uLL)
            {
              unint64_t v2 = 0x9DDFEA08EB382D69 * (v233 ^ (v233 >> 47));
              if (v234 >= *((void *)&v425 + 1)) {
                unint64_t v2 = v234 % *((void *)&v425 + 1);
              }
            }
            else
            {
              unint64_t v2 = v234 & (*((void *)&v425 + 1) - 1);
            }
            uint64_t v237 = *(void **)(v425 + 8 * v2);
            if (v237)
            {
              for (uint64_t i = (void *)*v237; i; uint64_t i = (void *)*i)
              {
                unint64_t v239 = i[1];
                if (v239 == v234)
                {
                  if (i[2] == v231) {
                    goto LABEL_436;
                  }
                }
                else
                {
                  if (v236.u32[0] > 1uLL)
                  {
                    if (v239 >= *((void *)&v425 + 1)) {
                      v239 %= *((void *)&v425 + 1);
                    }
                  }
                  else
                  {
                    v239 &= *((void *)&v425 + 1) - 1;
                  }
                  if (v239 != v2) {
                    break;
                  }
                }
              }
            }
          }
          unint64_t v240 = operator new(0x20uLL);
          *unint64_t v240 = 0;
          v240[1] = v234;
          v240[2] = v231;
          v240[3] = prime;
          float v241 = (float)(v426.__r_.__value_.__l.__size_ + 1);
          if (!v235 || (float)(*(float *)&v426.__r_.__value_.__r.__words[2] * (float)v235) < v241) {
            break;
          }
LABEL_426:
          uint64_t v256 = v425;
          uint64_t v257 = *(void **)(v425 + 8 * v2);
          if (v257)
          {
            *unint64_t v240 = *v257;
          }
          else
          {
            *unint64_t v240 = v426.__r_.__value_.__r.__words[0];
            v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v240;
            *(void *)(v256 + 8 * v2) = &v426;
            if (!*v240) {
              goto LABEL_435;
            }
            unint64_t v258 = *(void *)(*v240 + 8);
            if ((v235 & (v235 - 1)) != 0)
            {
              if (v258 >= v235) {
                v258 %= v235;
              }
            }
            else
            {
              v258 &= v235 - 1;
            }
            uint64_t v257 = (void *)(v425 + 8 * v258);
          }
          *uint64_t v257 = v240;
LABEL_435:
          ++v426.__r_.__value_.__l.__size_;
LABEL_436:
          v229 += 2;
          if (v229 == v230) {
            goto LABEL_447;
          }
        }
        BOOL v242 = (v235 & (v235 - 1)) != 0;
        if (v235 < 3) {
          BOOL v242 = 1;
        }
        unint64_t v243 = v242 | (2 * v235);
        unint64_t v244 = vcvtps_u32_f32(v241 / *(float *)&v426.__r_.__value_.__r.__words[2]);
        if (v243 <= v244) {
          unint64_t prime = v244;
        }
        else {
          unint64_t prime = v243;
        }
        if (prime == 1)
        {
          unint64_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          unint64_t prime = std::__next_prime(prime);
          unint64_t v235 = *((void *)&v425 + 1);
        }
        if (prime > v235) {
          goto LABEL_392;
        }
        if (prime < v235)
        {
          unint64_t v251 = vcvtps_u32_f32((float)v426.__r_.__value_.__l.__size_ / *(float *)&v426.__r_.__value_.__r.__words[2]);
          if (v235 < 3
            || (uint8x8_t v252 = (uint8x8_t)vcnt_s8((int8x8_t)v235), v252.i16[0] = vaddlv_u8(v252), v252.u32[0] > 1uLL))
          {
            unint64_t v251 = std::__next_prime(v251);
          }
          else
          {
            uint64_t v253 = 1 << -(char)__clz(v251 - 1);
            if (v251 >= 2) {
              unint64_t v251 = v253;
            }
          }
          if (prime <= v251) {
            unint64_t prime = v251;
          }
          if (prime >= v235)
          {
            unint64_t v235 = *((void *)&v425 + 1);
          }
          else
          {
            if (prime)
            {
LABEL_392:
              if (prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              float v245 = operator new(8 * prime);
              float32x2_t v246 = (void *)v425;
              *(void *)&long long v425 = v245;
              if (v246) {
                operator delete(v246);
              }
              uint64_t v247 = 0;
              *((void *)&v425 + 1) = prime;
              do
                *(void *)(v425 + 8 * v247++) = 0;
              while (prime != v247);
              float v248 = (void **)v426.__r_.__value_.__r.__words[0];
              if (v426.__r_.__value_.__r.__words[0])
              {
                unint64_t v249 = *(void *)(v426.__r_.__value_.__r.__words[0] + 8);
                uint8x8_t v250 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
                v250.i16[0] = vaddlv_u8(v250);
                if (v250.u32[0] > 1uLL)
                {
                  if (v249 >= prime) {
                    v249 %= prime;
                  }
                }
                else
                {
                  v249 &= prime - 1;
                }
                *(void *)(v425 + 8 * v249) = &v426;
                for (uint64_t j = *v248; j; v249 = v255)
                {
                  unint64_t v255 = j[1];
                  if (v250.u32[0] > 1uLL)
                  {
                    if (v255 >= prime) {
                      v255 %= prime;
                    }
                  }
                  else
                  {
                    v255 &= prime - 1;
                  }
                  if (v255 != v249)
                  {
                    if (!*(void *)(v425 + 8 * v255))
                    {
                      *(void *)(v425 + 8 * v255) = v248;
                      goto LABEL_417;
                    }
                    *float v248 = (void *)*j;
                    *uint64_t j = **(void **)(v425 + 8 * v255);
                    **(void **)(v425 + 8 * v255) = j;
                    uint64_t j = v248;
                  }
                  unint64_t v255 = v249;
LABEL_417:
                  float v248 = (void **)j;
                  uint64_t j = (void *)*j;
                }
              }
              unint64_t v235 = prime;
              goto LABEL_421;
            }
            unint64_t v259 = (void *)v425;
            *(void *)&long long v425 = 0;
            if (v259) {
              operator delete(v259);
            }
            unint64_t v235 = 0;
            *((void *)&v425 + 1) = 0;
          }
        }
LABEL_421:
        if ((v235 & (v235 - 1)) != 0)
        {
          if (v234 >= v235) {
            unint64_t v2 = v234 % v235;
          }
          else {
            unint64_t v2 = v234;
          }
        }
        else
        {
          unint64_t v2 = (v235 - 1) & v234;
        }
        goto LABEL_426;
      }
    }
LABEL_447:
    if (v413[0])
    {
      uint64_t v261 = *(unint64_t ***)&v413[16];
      uint64_t v260 = *(unint64_t ***)&v413[8];
      if (*(void *)&v413[8] != *(void *)&v413[16])
      {
        unint64_t v262 = *((void *)&v400 + 1);
        while (1)
        {
          uint64_t v263 = *v260;
          unint64_t v264 = **v260;
          unint64_t v265 = 0x9DDFEA08EB382D69 * (((8 * v264) + 8) ^ HIDWORD(v264));
          unint64_t v266 = 0x9DDFEA08EB382D69 * (HIDWORD(v264) ^ (v265 >> 47) ^ v265);
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v266 ^ (v266 >> 47));
          if (v262)
          {
            uint8x8_t v267 = (uint8x8_t)vcnt_s8((int8x8_t)v262);
            v267.i16[0] = vaddlv_u8(v267);
            if (v267.u32[0] > 1uLL)
            {
              unint64_t prime = 0x9DDFEA08EB382D69 * (v266 ^ (v266 >> 47));
              if (v2 >= v262) {
                unint64_t prime = v2 % v262;
              }
            }
            else
            {
              unint64_t prime = v2 & (v262 - 1);
            }
            int v268 = *(void **)(v400 + 8 * prime);
            if (v268)
            {
              for (k = (void *)*v268; k; k = (void *)*k)
              {
                unint64_t v270 = k[1];
                if (v270 == v2)
                {
                  if (k[2] == v264) {
                    goto LABEL_522;
                  }
                }
                else
                {
                  if (v267.u32[0] > 1uLL)
                  {
                    if (v270 >= v262) {
                      v270 %= v262;
                    }
                  }
                  else
                  {
                    v270 &= v262 - 1;
                  }
                  if (v270 != prime) {
                    break;
                  }
                }
              }
            }
          }
          uint64_t v271 = operator new(0x20uLL);
          void *v271 = 0;
          v271[1] = v2;
          v271[2] = v264;
          v271[3] = v263;
          float v272 = (float)(unint64_t)(*((void *)&v401 + 1) + 1);
          if (!v262 || (float)(v402 * (float)v262) < v272) {
            break;
          }
LABEL_512:
          uint64_t v288 = v400;
          unint64_t v289 = *(void **)(v400 + 8 * prime);
          if (v289)
          {
            void *v271 = *v289;
          }
          else
          {
            void *v271 = v401;
            *(void *)&long long v401 = v271;
            *(void *)(v288 + 8 * prime) = &v401;
            if (!*v271) {
              goto LABEL_521;
            }
            unint64_t v290 = *(void *)(*v271 + 8);
            if ((v262 & (v262 - 1)) != 0)
            {
              if (v290 >= v262) {
                v290 %= v262;
              }
            }
            else
            {
              v290 &= v262 - 1;
            }
            unint64_t v289 = (void *)(v400 + 8 * v290);
          }
          void *v289 = v271;
LABEL_521:
          ++*((void *)&v401 + 1);
LABEL_522:
          if (++v260 == v261) {
            goto LABEL_533;
          }
        }
        BOOL v273 = (v262 & (v262 - 1)) != 0;
        if (v262 < 3) {
          BOOL v273 = 1;
        }
        unint64_t v274 = v273 | (2 * v262);
        unint64_t v275 = vcvtps_u32_f32(v272 / v402);
        if (v274 <= v275) {
          int8x8_t v276 = (int8x8_t)v275;
        }
        else {
          int8x8_t v276 = (int8x8_t)v274;
        }
        if (*(void *)&v276 == 1)
        {
          int8x8_t v276 = (int8x8_t)2;
        }
        else if ((*(void *)&v276 & (*(void *)&v276 - 1)) != 0)
        {
          int8x8_t v276 = (int8x8_t)std::__next_prime(*(void *)&v276);
          unint64_t v262 = *((void *)&v400 + 1);
        }
        if (*(void *)&v276 > v262) {
          goto LABEL_478;
        }
        if (*(void *)&v276 < v262)
        {
          unint64_t v283 = vcvtps_u32_f32((float)*((unint64_t *)&v401 + 1) / v402);
          if (v262 < 3
            || (uint8x8_t v284 = (uint8x8_t)vcnt_s8((int8x8_t)v262), v284.i16[0] = vaddlv_u8(v284), v284.u32[0] > 1uLL))
          {
            unint64_t v283 = std::__next_prime(v283);
          }
          else
          {
            uint64_t v285 = 1 << -(char)__clz(v283 - 1);
            if (v283 >= 2) {
              unint64_t v283 = v285;
            }
          }
          if (*(void *)&v276 <= v283) {
            int8x8_t v276 = (int8x8_t)v283;
          }
          if (*(void *)&v276 >= v262)
          {
            unint64_t v262 = *((void *)&v400 + 1);
          }
          else
          {
            if (v276)
            {
LABEL_478:
              if (*(void *)&v276 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v277 = operator new(8 * *(void *)&v276);
              long long v278 = (void *)v400;
              *(void *)&long long v400 = v277;
              if (v278) {
                operator delete(v278);
              }
              uint64_t v279 = 0;
              *((int8x8_t *)&v400 + 1) = v276;
              do
                *(void *)(v400 + 8 * v279++) = 0;
              while (*(void *)&v276 != v279);
              float v280 = (void **)v401;
              if ((void)v401)
              {
                unint64_t v281 = *(void *)(v401 + 8);
                uint8x8_t v282 = (uint8x8_t)vcnt_s8(v276);
                v282.i16[0] = vaddlv_u8(v282);
                if (v282.u32[0] > 1uLL)
                {
                  if (v281 >= *(void *)&v276) {
                    v281 %= *(void *)&v276;
                  }
                }
                else
                {
                  v281 &= *(void *)&v276 - 1;
                }
                *(void *)(v400 + 8 * v281) = &v401;
                for (m = *v280; m; unint64_t v281 = v287)
                {
                  unint64_t v287 = m[1];
                  if (v282.u32[0] > 1uLL)
                  {
                    if (v287 >= *(void *)&v276) {
                      v287 %= *(void *)&v276;
                    }
                  }
                  else
                  {
                    v287 &= *(void *)&v276 - 1;
                  }
                  if (v287 != v281)
                  {
                    if (!*(void *)(v400 + 8 * v287))
                    {
                      *(void *)(v400 + 8 * v287) = v280;
                      goto LABEL_503;
                    }
                    *float v280 = (void *)*m;
                    void *m = **(void **)(v400 + 8 * v287);
                    **(void **)(v400 + 8 * v287) = m;
                    m = v280;
                  }
                  unint64_t v287 = v281;
LABEL_503:
                  float v280 = (void **)m;
                  m = (void *)*m;
                }
              }
              unint64_t v262 = (unint64_t)v276;
              goto LABEL_507;
            }
            unint64_t v291 = (void *)v400;
            *(void *)&long long v400 = 0;
            if (v291) {
              operator delete(v291);
            }
            unint64_t v262 = 0;
            *((void *)&v400 + 1) = 0;
          }
        }
LABEL_507:
        if ((v262 & (v262 - 1)) != 0)
        {
          if (v2 >= v262) {
            unint64_t prime = v2 % v262;
          }
          else {
            unint64_t prime = v2;
          }
        }
        else
        {
          unint64_t prime = (v262 - 1) & v2;
        }
        goto LABEL_512;
      }
    }
LABEL_533:
    if ((_BYTE)v409)
    {
      std::string::size_type v293 = v410.__r_.__value_.__l.__size_;
      uint64_t v292 = (unint64_t **)v410.__r_.__value_.__r.__words[0];
      if (v410.__r_.__value_.__r.__words[0] != v410.__r_.__value_.__l.__size_)
      {
        unint64_t v294 = *((void *)&v397 + 1);
        while (1)
        {
          v295 = *v292;
          unint64_t v296 = **v292;
          unint64_t v297 = 0x9DDFEA08EB382D69 * (((8 * v296) + 8) ^ HIDWORD(v296));
          unint64_t v298 = 0x9DDFEA08EB382D69 * (HIDWORD(v296) ^ (v297 >> 47) ^ v297);
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v298 ^ (v298 >> 47));
          if (v294)
          {
            uint8x8_t v299 = (uint8x8_t)vcnt_s8((int8x8_t)v294);
            v299.i16[0] = vaddlv_u8(v299);
            if (v299.u32[0] > 1uLL)
            {
              unint64_t prime = 0x9DDFEA08EB382D69 * (v298 ^ (v298 >> 47));
              if (v2 >= v294) {
                unint64_t prime = v2 % v294;
              }
            }
            else
            {
              unint64_t prime = v2 & (v294 - 1);
            }
            uint64_t v300 = *(void **)(v397 + 8 * prime);
            if (v300)
            {
              for (n = (void *)*v300; n; n = (void *)*n)
              {
                unint64_t v302 = n[1];
                if (v302 == v2)
                {
                  if (n[2] == v296) {
                    goto LABEL_608;
                  }
                }
                else
                {
                  if (v299.u32[0] > 1uLL)
                  {
                    if (v302 >= v294) {
                      v302 %= v294;
                    }
                  }
                  else
                  {
                    v302 &= v294 - 1;
                  }
                  if (v302 != prime) {
                    break;
                  }
                }
              }
            }
          }
          v303 = operator new(0x20uLL);
          void *v303 = 0;
          v303[1] = v2;
          v303[2] = v296;
          v303[3] = v295;
          float v304 = (float)(unint64_t)(*((void *)&v398 + 1) + 1);
          if (!v294 || (float)(v399 * (float)v294) < v304) {
            break;
          }
LABEL_598:
          uint64_t v320 = v397;
          uint64_t v321 = *(void **)(v397 + 8 * prime);
          if (v321)
          {
            void *v303 = *v321;
          }
          else
          {
            void *v303 = v398;
            *(void *)&long long v398 = v303;
            *(void *)(v320 + 8 * prime) = &v398;
            if (!*v303) {
              goto LABEL_607;
            }
            unint64_t v322 = *(void *)(*v303 + 8);
            if ((v294 & (v294 - 1)) != 0)
            {
              if (v322 >= v294) {
                v322 %= v294;
              }
            }
            else
            {
              v322 &= v294 - 1;
            }
            uint64_t v321 = (void *)(v397 + 8 * v322);
          }
          void *v321 = v303;
LABEL_607:
          ++*((void *)&v398 + 1);
LABEL_608:
          if (++v292 == (unint64_t **)v293) {
            goto LABEL_619;
          }
        }
        BOOL v305 = (v294 & (v294 - 1)) != 0;
        if (v294 < 3) {
          BOOL v305 = 1;
        }
        unint64_t v306 = v305 | (2 * v294);
        unint64_t v307 = vcvtps_u32_f32(v304 / v399);
        if (v306 <= v307) {
          int8x8_t v308 = (int8x8_t)v307;
        }
        else {
          int8x8_t v308 = (int8x8_t)v306;
        }
        if (*(void *)&v308 == 1)
        {
          int8x8_t v308 = (int8x8_t)2;
        }
        else if ((*(void *)&v308 & (*(void *)&v308 - 1)) != 0)
        {
          int8x8_t v308 = (int8x8_t)std::__next_prime(*(void *)&v308);
          unint64_t v294 = *((void *)&v397 + 1);
        }
        if (*(void *)&v308 > v294) {
          goto LABEL_564;
        }
        if (*(void *)&v308 < v294)
        {
          unint64_t v315 = vcvtps_u32_f32((float)*((unint64_t *)&v398 + 1) / v399);
          if (v294 < 3
            || (uint8x8_t v316 = (uint8x8_t)vcnt_s8((int8x8_t)v294), v316.i16[0] = vaddlv_u8(v316), v316.u32[0] > 1uLL))
          {
            unint64_t v315 = std::__next_prime(v315);
          }
          else
          {
            uint64_t v317 = 1 << -(char)__clz(v315 - 1);
            if (v315 >= 2) {
              unint64_t v315 = v317;
            }
          }
          if (*(void *)&v308 <= v315) {
            int8x8_t v308 = (int8x8_t)v315;
          }
          if (*(void *)&v308 >= v294)
          {
            unint64_t v294 = *((void *)&v397 + 1);
          }
          else
          {
            if (v308)
            {
LABEL_564:
              if (*(void *)&v308 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v309 = operator new(8 * *(void *)&v308);
              std::string v310 = (void *)v397;
              *(void *)&long long v397 = v309;
              if (v310) {
                operator delete(v310);
              }
              uint64_t v311 = 0;
              *((int8x8_t *)&v397 + 1) = v308;
              do
                *(void *)(v397 + 8 * v311++) = 0;
              while (*(void *)&v308 != v311);
              int v312 = (void **)v398;
              if ((void)v398)
              {
                unint64_t v313 = *(void *)(v398 + 8);
                uint8x8_t v314 = (uint8x8_t)vcnt_s8(v308);
                v314.i16[0] = vaddlv_u8(v314);
                if (v314.u32[0] > 1uLL)
                {
                  if (v313 >= *(void *)&v308) {
                    v313 %= *(void *)&v308;
                  }
                }
                else
                {
                  v313 &= *(void *)&v308 - 1;
                }
                *(void *)(v397 + 8 * v313) = &v398;
                for (iuint64_t i = *v312; ii; v313 = v319)
                {
                  unint64_t v319 = ii[1];
                  if (v314.u32[0] > 1uLL)
                  {
                    if (v319 >= *(void *)&v308) {
                      v319 %= *(void *)&v308;
                    }
                  }
                  else
                  {
                    v319 &= *(void *)&v308 - 1;
                  }
                  if (v319 != v313)
                  {
                    if (!*(void *)(v397 + 8 * v319))
                    {
                      *(void *)(v397 + 8 * v319) = v312;
                      goto LABEL_589;
                    }
                    double *v312 = (void *)*ii;
                    *iuint64_t i = **(void **)(v397 + 8 * v319);
                    **(void **)(v397 + 8 * v319) = ii;
                    iuint64_t i = v312;
                  }
                  unint64_t v319 = v313;
LABEL_589:
                  int v312 = (void **)ii;
                  iuint64_t i = (void *)*ii;
                }
              }
              unint64_t v294 = (unint64_t)v308;
              goto LABEL_593;
            }
            uint64_t v323 = (void *)v397;
            *(void *)&long long v397 = 0;
            if (v323) {
              operator delete(v323);
            }
            unint64_t v294 = 0;
            *((void *)&v397 + 1) = 0;
          }
        }
LABEL_593:
        if ((v294 & (v294 - 1)) != 0)
        {
          if (v2 >= v294) {
            unint64_t prime = v2 % v294;
          }
          else {
            unint64_t prime = v2;
          }
        }
        else
        {
          unint64_t prime = (v294 - 1) & v2;
        }
        goto LABEL_598;
      }
    }
LABEL_619:
    if (v406[0])
    {
      uint64_t v325 = *(std::string::size_type ***)&v406[16];
      unint64_t v324 = *(std::string::size_type ***)&v406[8];
      if (*(void *)&v406[8] != *(void *)&v406[16])
      {
        while (1)
        {
          v326 = *v324;
          v434.__r_.__value_.__r.__words[0] = **v324;
          if (v434.__r_.__value_.__r.__words[0])
          {
            RERetain();
            std::string::size_type v327 = v434.__r_.__value_.__r.__words[0];
            v326 = *v324;
          }
          else
          {
            std::string::size_type v327 = 0;
          }
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v434);
          unint64_t v328 = 0x9DDFEA08EB382D69 * (((8 * v327) + 8) ^ HIDWORD(v327));
          unint64_t v329 = 0x9DDFEA08EB382D69 * (HIDWORD(v327) ^ (v328 >> 47) ^ v328);
          unint64_t v330 = 0x9DDFEA08EB382D69 * (v329 ^ (v329 >> 47));
          unint64_t v331 = (unint64_t)v394[1];
          if (v394[1])
          {
            uint8x8_t v332 = (uint8x8_t)vcnt_s8((int8x8_t)v394[1]);
            v332.i16[0] = vaddlv_u8(v332);
            if (v332.u32[0] > 1uLL)
            {
              unint64_t v2 = 0x9DDFEA08EB382D69 * (v329 ^ (v329 >> 47));
              if ((void *)v330 >= v394[1]) {
                unint64_t v2 = v330 % (unint64_t)v394[1];
              }
            }
            else
            {
              unint64_t v2 = v330 & ((unint64_t)v394[1] - 1);
            }
            v333 = (void *)*((void *)v394[0] + v2);
            if (v333)
            {
              for (juint64_t j = (void *)*v333; jj; juint64_t j = (void *)*jj)
              {
                unint64_t v335 = jj[1];
                if (v335 == v330)
                {
                  if (jj[2] == v327) {
                    goto LABEL_696;
                  }
                }
                else
                {
                  if (v332.u32[0] > 1uLL)
                  {
                    if ((void *)v335 >= v394[1]) {
                      v335 %= (unint64_t)v394[1];
                    }
                  }
                  else
                  {
                    v335 &= (unint64_t)v394[1] - 1;
                  }
                  if (v335 != v2) {
                    break;
                  }
                }
              }
            }
          }
          double v336 = operator new(0x20uLL);
          *double v336 = 0;
          v336[1] = v330;
          v336[2] = v327;
          v336[3] = v326;
          float v337 = (float)(unint64_t)(*((void *)&v395 + 1) + 1);
          if (!v331 || (float)(v396 * (float)v331) < v337) {
            break;
          }
LABEL_686:
          v353 = v394[0];
          long long v354 = (void *)*((void *)v394[0] + v2);
          if (v354)
          {
            *double v336 = *v354;
          }
          else
          {
            *double v336 = v395;
            *(void *)&long long v395 = v336;
            v353[v2] = &v395;
            if (!*v336) {
              goto LABEL_695;
            }
            unint64_t v355 = *(void *)(*v336 + 8);
            if ((v331 & (v331 - 1)) != 0)
            {
              if (v355 >= v331) {
                v355 %= v331;
              }
            }
            else
            {
              v355 &= v331 - 1;
            }
            long long v354 = (char *)v394[0] + 8 * v355;
          }
          *long long v354 = v336;
LABEL_695:
          ++*((void *)&v395 + 1);
LABEL_696:
          v324 += 2;
          if (v324 == v325) {
            goto LABEL_707;
          }
        }
        BOOL v338 = (v331 & (v331 - 1)) != 0;
        if (v331 < 3) {
          BOOL v338 = 1;
        }
        unint64_t v339 = v338 | (2 * v331);
        unint64_t v340 = vcvtps_u32_f32(v337 / v396);
        if (v339 <= v340) {
          int8x8_t v341 = (int8x8_t)v340;
        }
        else {
          int8x8_t v341 = (int8x8_t)v339;
        }
        if (*(void *)&v341 == 1)
        {
          int8x8_t v341 = (int8x8_t)2;
        }
        else if ((*(void *)&v341 & (*(void *)&v341 - 1)) != 0)
        {
          int8x8_t v341 = (int8x8_t)std::__next_prime(*(void *)&v341);
          unint64_t v331 = (unint64_t)v394[1];
        }
        if (*(void *)&v341 > v331) {
          goto LABEL_652;
        }
        if (*(void *)&v341 < v331)
        {
          unint64_t v348 = vcvtps_u32_f32((float)*((unint64_t *)&v395 + 1) / v396);
          if (v331 < 3
            || (uint8x8_t v349 = (uint8x8_t)vcnt_s8((int8x8_t)v331), v349.i16[0] = vaddlv_u8(v349), v349.u32[0] > 1uLL))
          {
            unint64_t v348 = std::__next_prime(v348);
          }
          else
          {
            uint64_t v350 = 1 << -(char)__clz(v348 - 1);
            if (v348 >= 2) {
              unint64_t v348 = v350;
            }
          }
          if (*(void *)&v341 <= v348) {
            int8x8_t v341 = (int8x8_t)v348;
          }
          if (*(void *)&v341 >= v331)
          {
            unint64_t v331 = (unint64_t)v394[1];
          }
          else
          {
            if (v341)
            {
LABEL_652:
              if (*(void *)&v341 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              long long v342 = operator new(8 * *(void *)&v341);
              long long v343 = v394[0];
              v394[0] = v342;
              if (v343) {
                operator delete(v343);
              }
              uint64_t v344 = 0;
              v394[1] = (void *)v341;
              do
                *((void *)v394[0] + v344++) = 0;
              while (*(void *)&v341 != v344);
              v345 = (void **)v395;
              if ((void)v395)
              {
                unint64_t v346 = *(void *)(v395 + 8);
                uint8x8_t v347 = (uint8x8_t)vcnt_s8(v341);
                v347.i16[0] = vaddlv_u8(v347);
                if (v347.u32[0] > 1uLL)
                {
                  if (v346 >= *(void *)&v341) {
                    v346 %= *(void *)&v341;
                  }
                }
                else
                {
                  v346 &= *(void *)&v341 - 1;
                }
                *((void *)v394[0] + v346) = &v395;
                for (kk = *v345; kk; unint64_t v346 = v352)
                {
                  unint64_t v352 = kk[1];
                  if (v347.u32[0] > 1uLL)
                  {
                    if (v352 >= *(void *)&v341) {
                      v352 %= *(void *)&v341;
                    }
                  }
                  else
                  {
                    v352 &= *(void *)&v341 - 1;
                  }
                  if (v352 != v346)
                  {
                    if (!*((void *)v394[0] + v352))
                    {
                      *((void *)v394[0] + v352) = v345;
                      goto LABEL_677;
                    }
                    unint64_t *v345 = (void *)*kk;
                    void *kk = **((void **)v394[0] + v352);
                    **((void **)v394[0] + v352) = kk;
                    kk = v345;
                  }
                  unint64_t v352 = v346;
LABEL_677:
                  v345 = (void **)kk;
                  kk = (void *)*kk;
                }
              }
              unint64_t v331 = (unint64_t)v341;
              goto LABEL_681;
            }
            v356 = v394[0];
            v394[0] = 0;
            if (v356) {
              operator delete(v356);
            }
            unint64_t v331 = 0;
            v394[1] = 0;
          }
        }
LABEL_681:
        if ((v331 & (v331 - 1)) != 0)
        {
          if (v330 >= v331) {
            unint64_t v2 = v330 % v331;
          }
          else {
            unint64_t v2 = v330;
          }
        }
        else
        {
          unint64_t v2 = (v331 - 1) & v330;
        }
        goto LABEL_686;
      }
    }
LABEL_707:
    if (!v426.__r_.__value_.__l.__size_
      && !*((void *)&v401 + 1)
      && !*((void *)&v398 + 1)
      && !*((void *)&v395 + 1))
    {
      goto LABEL_794;
    }
    memset(v393, 0, sizeof(v393));
    memset(v392, 0, sizeof(v392));
    long long v389 = 0u;
    long long v390 = 0u;
    int v391 = 1065353216;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>((uint64_t)&v389, 0x64uLL);
    unint64_t EntityAtPrimPath = v423;
    unint64_t v388 = v423;
    uint64_t v358 = *((void *)v385 + 5);
    if (*(unsigned char *)(*(void *)(v358 + 16) + 272))
    {
      std::string::basic_string[abi:ne180100]<0>(&v434, "/model");
      MEMORY[0x2455CF7A0](&v387, &v434);
      unint64_t EntityAtPrimPath = realityio::ImportSession::getEntityAtPrimPath(v358, &v387);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v387);
      if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v434.__r_.__value_.__l.__data_);
      }
      if (EntityAtPrimPath) {
        unint64_t v388 = EntityAtPrimPath;
      }
      else {
        unint64_t EntityAtPrimPath = v388;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v434, "");
    realityio::buildSceneAssetsAndAnimationLibraries((uint64_t)this, 1, (uint64_t)v385, EntityAtPrimPath, (const void **)&v434.__r_.__value_.__l.__data_, &v425, &v400, &v397, v394, (uint64_t)v393, (char *****)v392, &v389);
    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v434.__r_.__value_.__l.__data_);
    }
    uint64_t v359 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)v385 + 8));
    if (!v388)
    {
LABEL_740:
      if (v403[0])
      {
        long long v384 = *(uint64_t ***)&v403[16];
        for (mm = *(uint64_t ***)&v403[8]; mm != v384; mm += 2)
        {
          uint64_t v370 = *mm;
          if (*mm)
          {
            if (*(void *)(*(void *)(*((void *)v385 + 5) + 16) + 16))
            {
              uint64_t ServiceLocator = (void *)REEngineGetServiceLocator();
              if (ServiceLocator) {
                uint64_t ServiceLocator = (void *)MEMORY[0x2455CDC30](ServiceLocator, v372, v373);
              }
            }
            else
            {
              uint64_t ServiceLocator = 0;
            }
            v427[0] = ServiceLocator;
            uint64_t v375 = v370[4];
            uint64_t v374 = v370[5];
            while (v375 != v374)
            {
              if (*(char *)(v375 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v434, *(const std::string::value_type **)v375, *(void *)(v375 + 8));
              }
              else
              {
                long long v376 = *(_OWORD *)v375;
                v434.__r_.__value_.__r.__words[2] = *(void *)(v375 + 16);
                *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v376;
              }
              if (*(char *)(v375 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(&v435, *(const std::string::value_type **)(v375 + 24), *(void *)(v375 + 32));
              }
              else
              {
                long long v377 = *(_OWORD *)(v375 + 24);
                v435.__r_.__value_.__r.__words[2] = *(void *)(v375 + 40);
                *(_OWORD *)&v435.__r_.__value_.__l.__data_ = v377;
              }
              if (*(char *)(v375 + 71) < 0)
              {
                std::string::__init_copy_ctor_external(&v436, *(const std::string::value_type **)(v375 + 48), *(void *)(v375 + 56));
              }
              else
              {
                long long v378 = *(_OWORD *)(v375 + 48);
                v436.__r_.__value_.__r.__words[2] = *(void *)(v375 + 64);
                *(_OWORD *)&v436.__r_.__value_.__l.__data_ = v378;
              }
              long long v379 = *(_OWORD *)(v375 + 72);
              char v438 = *(unsigned char *)(v375 + 88);
              long long v437 = v379;
              uint64_t v439 = 0;
              std::string::size_type v380 = HIBYTE(v436.__r_.__value_.__r.__words[2]);
              if ((v436.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v380 = v436.__r_.__value_.__l.__size_;
              }
              if (v380)
              {
                if ((v436.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v381 = &v436;
                }
                else {
                  long long v381 = (std::string *)v436.__r_.__value_.__r.__words[0];
                }
                RIOPxrUsdStageCreateWithFilePathWithErrorReporting((uint64_t)v381);
              }
              if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external((std::string *)__p, v434.__r_.__value_.__l.__data_, v434.__r_.__value_.__l.__size_);
              }
              else {
                *(std::string *)std::string __p = v434;
              }
              if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external((std::string *)&__p[24], v435.__r_.__value_.__l.__data_, v435.__r_.__value_.__l.__size_);
              }
              else {
                *(std::string *)&__p[24] = v435;
              }
              if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v431, v436.__r_.__value_.__l.__data_, v436.__r_.__value_.__l.__size_);
              }
              else {
                std::string v431 = v436;
              }
              long long v432 = v437;
              char v433 = 0;
              if (v438)
              {
                char v433 = 1;
              }
              if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v431.__r_.__value_.__l.__data_);
              }
              if ((__p[47] & 0x80000000) != 0) {
                operator delete(*(void **)&__p[24]);
              }
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v436.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v435.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v434.__r_.__value_.__l.__data_);
              }
              v375 += 96;
            }
          }
        }
      }
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v389);
      if (v392[0]) {
        operator delete(v392[0]);
      }
      if (v393[0]) {
        operator delete(v393[0]);
      }
LABEL_794:
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)v394);
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v397);
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v400);
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v425);
      realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v403);
      realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v406);
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v409);
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)v413);
      realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v416);
      realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v421);
      return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v422);
    }
    uint64_t v360 = (pxrInternal__aapl__pxrReserved__::UsdStage *)v359;
    MEMORY[0x2455CF810](&v434, "autoPlay");
    HasAuthoredMetastd::string::pointer data = pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v360, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v434);
    if ((v434.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v434.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455CF810](&cf, "autoPlay");
    uint64_t v440 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(v360, (const pxrInternal__aapl__pxrReserved__::TfToken *)&cf, (pxrInternal__aapl__pxrReserved__::VtValue *)&v439))
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)&v439))
      {
        if ((v440 & 4) != 0) {
          long long v363 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t *))((v440 & 0xFFFFFFFFFFFFFFF8) + 168))(&v439);
        }
        else {
          long long v363 = (unsigned __int8 *)&v439;
        }
        int v364 = *v363;
        goto LABEL_732;
      }
      v434.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.h";
      v434.__r_.__value_.__l.__size_ = (std::string::size_type)"GetMetadata";
      v434.__r_.__value_.__r.__words[2] = 2410;
      v435.__r_.__value_.__r.__words[0] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMe"
                                                                  "tadata(const TfToken &, T *) const [T = BOOL]";
      v435.__r_.__value_.__s.__data_[8] = 0;
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), v362);
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)v427, (pxrInternal__aapl__pxrReserved__::VtValue *)&v439);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      if (v428 < 0) {
        operator delete(v427[0]);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    int v364 = 0;
LABEL_732:
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v439);
    if ((cf & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)cf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    char v365 = HasAuthoredMetadata ^ 1;
    if (!v364) {
      char v365 = 1;
    }
    if (v365)
    {
      REAnimationComponentGetComponentType();
      v429[0] = &unk_26F332B48;
      v429[3] = v429;
      uint64_t v368 = REEntityGetOrAddComponentByClass();
      std::function<void ()(REComponent *)>::operator()((uint64_t)v429, v368);
      RENetworkMarkComponentDirty();
      std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v429);
    }
    else
    {
      REAnimationLibraryComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        *(void *)std::string __p = 0;
        *(void *)std::string __p = REAnimationLibraryComponentGetAnimationLibraryAsset();
        uint64_t v366 = *((void *)v385 + 6);
        uint64_t v367 = operator new(0x20uLL);
        *uint64_t v367 = &unk_26F332AC8;
        v367[1] = __p;
        v367[2] = &v388;
        v367[3] = this;
        v435.__r_.__value_.__r.__words[0] = (std::string::size_type)v367;
        (*(void (**)(uint64_t, std::string *))(*(void *)v366 + 16))(v366, &v434);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v434);
      }
    }
    goto LABEL_740;
  }
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v422);
}

void sub_23F527CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v69 - 120));
  if ((STACK[0x288] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x288] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v71 = (void *)a27;
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a21);
  if (v71) {
    operator delete(v71);
  }
  if (a30) {
    operator delete(a30);
  }
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&STACK[0x290]);
  realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)&a51);
  realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)&a57);
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&a63);
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&a69);
  realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)&STACK[0x218]);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&STACK[0x248]);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSession::getEntityAtPrimPath(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, a2 + 1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v3 + 64))(v3, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  return v4;
}

void sub_23F528470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnimationSceneAssetBuilder::clear(realityio::AnimationSceneAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3 = realityio::EntityBuilder::kRootEntityInputName(this);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v3, (uint64_t)v7);
  if (v7[0] && a2 && v8)
  {
    memset(v5, 0, sizeof(v5));
    int v6 = 1065353216;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>((uint64_t)v5, 0x64uLL);
    realityio::removeAnimationLibraries((uint64_t)a2, v8, v5);
    std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)v5);
  }
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v7);
}

void sub_23F528510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void realityio::AnimationSceneAssetBuilder::~AnimationSceneAssetBuilder(realityio::AnimationSceneAssetBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>::New()
{
}

void sub_23F528600(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40DF8E1979);
  _Unwind_Resume(a1);
}

void *realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

std::string *std::pair<std::string,realityio::TimelineGroupFactory>::pair[abi:ne180100]<std::string const&,realityio::TimelineGroupFactory,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  std::string::size_type v7 = *((void *)a3 + 3);
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = *((_DWORD *)a3 + 8);
  this[2].__r_.__value_.__r.__words[0] = v7;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(long long *)((char *)a3 + 40);
  this[3].__r_.__value_.__l.__size_ = *((void *)a3 + 7);
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  *((void *)a3 + 7) = 0;
  return this;
}

void realityio::anonymous namespace'::copyAnimationLibraryEntryAndAssignToEntityHelper(realityio *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v4 = *(NSObject **)realityio::logObjects(a1);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    long long v5 = "To and from entities must be valid.";
    goto LABEL_13;
  }
  {
    uint64_t v4 = *(NSObject **)realityio::logObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    long long v5 = "Could not find animation components to copy to and from.";
    goto LABEL_13;
  }
  if (!REAnimationLibraryComponentGetAnimationLibraryAsset())
  {
    uint64_t v4 = *(NSObject **)realityio::logObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    long long v5 = "Could not find animation library assets to copy from and into.";
LABEL_13:
    _os_log_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&buf, 2u);
    return;
  }
  uint64_t v24 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
  if (v24)
  {
    if (*(char *)(a3 + 47) < 0) {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
    }
    else {
      std::string buf = *(std::string *)(a3 + 24);
    }
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      uint64_t v7 = REAnimationLibraryComponentDefaultLocalSubtreeSceneName();
      MEMORY[0x2455D2770](&buf, v7);
    }
    uint64_t EntryAssetByKey = REAnimationLibraryDefinitionGetEntryAssetByKey();
    if (!EntryAssetByKey) {
      goto LABEL_52;
    }
    RERetain();
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v21 = *(std::string *)a3;
    }
    if (*(double *)(a3 + 72) > 0.0 || *(double *)(a3 + 80) > 0.0 || *(unsigned char *)(a3 + 88))
    {
      CFStringRef Type = (const __CFString *)REAssetGetType();
      if (CFStringCompare(Type, @"Timeline", 0))
      {
        RootTimeline = (realityio *)REAnimationSceneAssetGetRootTimeline();
        uint64_t v10 = (uint64_t)RootTimeline;
      }
      else
      {
        REAnimationSceneEntityDefinitionCreate();
        uint64_t v10 = EntryAssetByKey;
        REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
        RootTimeline = (realityio *)RERelease();
      }
      if (!v10)
      {
        long long v16 = *(NSObject **)realityio::logObjects(RootTimeline);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v25 = 136315138;
          *(void *)&v25[4] = p_buf;
          _os_log_impl(&dword_23F4EA000, v16, OS_LOG_TYPE_DEFAULT, "Could not add animation clip for animation named: \"%s\".", v25, 0xCu);
        }
        goto LABEL_50;
      }
      *(void *)uint64_t v25 = 0;
      uint64_t v11 = RETimelineDefinitionCreateFromTimeline();
      if (*(void *)v25) {
        RERelease();
      }
      *(void *)uint64_t v25 = v11;
      uint64_t TimelineClip = RETimelineDefinitionCreateTimelineClip();
      if (*(double *)(a3 + 72) > 0.0) {
        RETimelineDefinitionSetClipStart();
      }
      if (*(double *)(a3 + 80) > 0.0) {
        RETimelineDefinitionSetClipEnd();
      }
      if (*(unsigned char *)(a3 + 88))
      {
        RETimelineDefinitionSetClipLoopBehavior();
        uint64_t TimelineAsset = 0x7FF0000000000000;
        RETimelineDefinitionSetClipDuration();
        RETimelineDefinitionSetFillMode();
        std::string::append(&v21, "__auto_generated_looping");
      }
      uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
      if (TimelineAsset)
      {
        uint64_t v18 = REAnimationSceneAssetCreateWithTimeline();
        realityio::WrappedRERef<REAsset *>::operator=(&EntryAssetByKey, &v18);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v18);
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&TimelineAsset);
      realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(&TimelineClip);
      realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(v25);
    }
    REAnimationLibraryDefinitionAddEntryAsset();
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v21;
    }
    else {
      uint64_t v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    uint64_t v13 = REAnimationLibraryDefinitionAddKeyedEntryIndex();
    if ((v13 & 1) == 0)
    {
      std::string::size_type v14 = *(NSObject **)realityio::logObjects((realityio *)v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v25 = 136315138;
        *(void *)&v25[4] = v12;
        _os_log_impl(&dword_23F4EA000, v14, OS_LOG_TYPE_DEFAULT, "Could not add key for animation named: \"%s\".", v25, 0xCu);
      }
    }
    *(void *)uint64_t v25 = 0;
    uint64_t AnimationLibraryAsset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
    if (*(void *)v25) {
      RERelease();
    }
    *(void *)uint64_t v25 = AnimationLibraryAsset;
    REAnimationLibraryComponentAssignAnimationLibraryAsset();
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v25);
LABEL_50:
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
LABEL_52:
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&EntryAssetByKey);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v24);
}

void sub_23F528C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,__int16 a33,char a34,char a35)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a25);
  if (a31 < 0) {
    operator delete(a26);
  }
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&a32);
  _Unwind_Resume(a1);
}

void realityio::anonymous namespace'::AnimationLibraryEntry::~AnimationLibraryEntry(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t realityio::anonymous namespace'::findFirstAnimationLibraryComponentInHierarchy()
{
  REAnimationLibraryComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (!result)
  {
    uint64_t result = REEntityGetChildCount();
    if (result)
    {
      uint64_t v1 = result;
      uint64_t v2 = 0;
      while (1)
      {
        uint64_t Child = REEntityGetChild();
        if (result) {
          break;
        }
        if (v1 == ++v2) {
          return 0;
        }
      }
    }
  }
  return result;
}

void *realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void std::__function::__func<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F332478;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F332478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(**(void **)(a1 + 8) + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 24))(v2, 1);
  uint64_t v3 = *(void *)(**(void **)(a1 + 8) + 32);
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  ChildCFIndex Count = (realityio *)REEntityGetChildCount();
  if (ChildCount == (realityio *)1) {
    ChildCFIndex Count = (realityio *)REEntityGetChild();
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 24);
  long long v6 = *(long long **)(a1 + 32);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v31.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v7;
  }
  if (!v5)
  {
    uint64_t v11 = *(NSObject **)realityio::logObjects(ChildCount);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v12 = "To and from entities must be valid.";
    goto LABEL_24;
  }
  if (FirstAnimationLibraryComponentInHierarchy) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    uint64_t v11 = *(NSObject **)realityio::logObjects(v9);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v12 = "Could not find animation components to copy to and from.";
LABEL_24:
    _os_log_impl(&dword_23F4EA000, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&buf, 2u);
    goto LABEL_42;
  }
  uint64_t AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
  std::string::size_type v14 = (realityio *)REAnimationLibraryComponentGetAnimationLibraryAsset();
  if (!AnimationLibraryAsset)
  {
    uint64_t v11 = *(NSObject **)realityio::logObjects(v14);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v12 = "Could not find animation library assets to copy from.";
    goto LABEL_24;
  }
  long long v15 = v14;
  uint64_t v33 = 0;
  uint64_t v16 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
  if (v33) {
    RERelease();
  }
  uint64_t v32 = 0;
  uint64_t v33 = v16;
  if (v15)
  {
    uint64_t v17 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
    if (v32) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v17 = REAnimationLibraryDefinitionCreate();
    if (v32) {
LABEL_26:
    }
      RERelease();
  }
  uint64_t v32 = v17;
  EntryCFIndex Count = REAnimationLibraryDefinitionGetEntryCount();
  if (EntryCount)
  {
    for (uint64_t i = 0; i != EntryCount; ++i)
    {
      uint64_t EntryAsset = REAnimationLibraryDefinitionGetEntryAsset();
      REAnimationLibraryDefinitionAddEntryAsset();
      if (REAnimationLibraryDefinitionGetDefaultEntry() == EntryAsset)
      {
        uint64_t v21 = REAnimationLibraryDefinitionAddKeyedEntryIndex();
        if ((v21 & 1) == 0)
        {
          uint64_t v22 = *(NSObject **)realityio::logObjects((realityio *)v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v23 = &v31;
            }
            else {
              unint64_t v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
            _os_log_impl(&dword_23F4EA000, v22, OS_LOG_TYPE_DEFAULT, "Could not add key for animation named: \"%s\".", (uint8_t *)&buf, 0xCu);
          }
        }
      }
    }
  }
  buf.__r_.__value_.__r.__words[0] = 0;
  uint64_t v24 = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
  if (buf.__r_.__value_.__r.__words[0]) {
    RERelease();
  }
  buf.__r_.__value_.__r.__words[0] = v24;
  if (v24)
  {
    REAnimationLibraryComponentAssignAnimationLibraryAsset();
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf);
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v32);
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v33);
LABEL_42:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = *(long long **)(a1 + 32);
  if (*((unsigned char *)v25 + 88))
  {
    uint64_t v26 = **(realityio ***)(a1 + 16);
    uint64_t v27 = *(void *)(*(void *)(a1 + 24) + 24);
    if (*((char *)v25 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v25, *((void *)v25 + 1));
      uint64_t v25 = *(long long **)(a1 + 32);
    }
    else
    {
      long long v28 = *v25;
      buf.__r_.__value_.__r.__words[2] = *((void *)v25 + 2);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v28;
    }
    if (*((char *)v25 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)v25 + 3), *((void *)v25 + 4));
      uint64_t v25 = *(long long **)(a1 + 32);
    }
    else
    {
      long long v29 = *(long long *)((char *)v25 + 24);
      v35.__r_.__value_.__r.__words[2] = *((void *)v25 + 5);
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v29;
    }
    if (*((char *)v25 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v25 + 6), *((void *)v25 + 7));
      uint64_t v25 = *(long long **)(a1 + 32);
    }
    else
    {
      long long v30 = v25[3];
      __p.__r_.__value_.__r.__words[2] = *((void *)v25 + 8);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
    }
    long long v37 = *(long long *)((char *)v25 + 72);
    char v38 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23F529368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26F3324F8;
  return result;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3324F8;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)realityio::EntityBuilder::kRootEntityInputName((realityio::EntityBuilder *)v2);
  uint64_t v5 = (uint64_t)v4;
  unint64_t v6 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  long long v7 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  LODWORD(v28[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::allocator<realityio::StaticPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,void>(v5, (uint64_t *)(v6 + 64), v7, (int *)v28, __p);
  uint64_t v8 = (std::__shared_weak_count *)__p[1];
  char v38 = __p[0];
  uint64_t v39 = (std::__shared_weak_count *)__p[1];
  if (__p[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v38);
  uint64_t v9 = (realityio::SkeletalAnimationAggregationBuilder *)v39;
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v10 = realityio::SkeletalAnimationAggregationBuilder::kOutputName(v9);
  unint64_t v11 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v28[0]) = 1;
  uint64_t v12 = (std::__shared_weak_count *)__p[1];
  uint64_t v36 = __p[0];
  long long v37 = (std::__shared_weak_count *)__p[1];
  if (__p[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v36);
  uint64_t v13 = (realityio::TransformAnimationAggregationBuilder *)v37;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  uint64_t v14 = realityio::TransformAnimationAggregationBuilder::kOutputName(v13);
  unint64_t v15 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v28[0]) = 1;
  uint64_t v16 = (std::__shared_weak_count *)__p[1];
  uint64_t v34 = __p[0];
  std::string v35 = (std::__shared_weak_count *)__p[1];
  if (__p[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v34);
  uint64_t v17 = (realityio::SpatialAudioComponentBuilder *)v35;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v18 = realityio::SpatialAudioComponentBuilder::kOutputName(v17);
  unint64_t v19 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v28[0]) = 1;
  uint64_t v20 = (std::__shared_weak_count *)__p[1];
  uint64_t v32 = __p[0];
  uint64_t v33 = (std::__shared_weak_count *)__p[1];
  if (__p[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v32);
  uint64_t v21 = (realityio::SkeletalAnimationAggregationBuilder *)v33;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v22 = realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v21);
  unint64_t v23 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v28[0]) = 1;
  uint64_t v24 = (std::__shared_weak_count *)__p[1];
  long long v30 = __p[0];
  std::string v31 = (std::__shared_weak_count *)__p[1];
  if (__p[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::string::basic_string[abi:ne180100]<0>(v28, "arbitraryComponentAnimationLibrary");
  unint64_t v25 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v25) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  MEMORY[0x2455CF810](&v27, "RealityKitComponent");
  uint64_t v26 = (std::__shared_weak_count *)operator new(0x60uLL);
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3326A8;
  *(_OWORD *)std::string __p = *(_OWORD *)v28;
  uint64_t v41 = v29;
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v29 = 0;
  realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(&v26[1].__vftable, (uint64_t)__p, (uint64_t *)(v25 + 24), &v27, 1);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  __p[0] = &v26[1];
  __p[1] = v26;
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_23F52992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t realityio::anonymous namespace'::getAllEntityGeneratingPrimPathsForSubtree@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v34, a1, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v34))
  {
    IsEntityProviding = (pxrInternal__aapl__pxrReserved__ *)realityio::calculateIsEntityProviding((realityio *)&v34, v5);
    if (IsEntityProviding) {
      IsEntityProviding = (pxrInternal__aapl__pxrReserved__ *)std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)a2, a2);
    }
    uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsEntityProviding);
    unint64_t v9 = *(void *)UsdPrimDefaultPredicate;
    uint64_t v8 = *(void *)(UsdPrimDefaultPredicate + 8);
    uint64_t v10 = *(void *)(UsdPrimDefaultPredicate + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
    uint64_t v21 = v8;
    *(void *)&long long v22 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v34, (uint64_t *)&v20, (uint64_t)&v24);
    uint64_t v20 = v24;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, &v25);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v21 + 1, &v26);
    long long v22 = v27;
    uint64_t v23 = v28;
    while (1)
    {
      uint64_t v16 = v29;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, &v30);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v17 + 1, &v31);
      long long v18 = v32;
      uint64_t v19 = v33;
      if (v20 == v16 && v21 == v17) {
        char v11 = pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v22, (uint64_t)&v18) ^ 1;
      }
      else {
        char v11 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
      if ((v11 & 1) == 0) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v20, (uint64_t)&v16);
      int v13 = realityio::calculateIsEntityProviding((realityio *)&v16, v12);
      if ((BYTE8(v18) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v18 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
      if (v17) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
      }
      if (v13)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v20, (uint64_t)&v16);
        PrimPath = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v16);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, PrimPath, PrimPath);
        if ((BYTE8(v18) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v18 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
        if (v17) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v20);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  }
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  uint64_t result = v35;
  if (v35) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
  }
  return result;
}

void sub_23F529DC4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v2 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::allocator<realityio::StaticPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, _DWORD *a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,std::allocator<realityio::StaticPrimInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23F529E94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,std::allocator<realityio::StaticPrimInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, _DWORD *a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F332BC8;
  std::allocator<realityio::StaticPrimInputDescriptor>::construct[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_23F529F10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<realityio::StaticPrimInputDescriptor>::construct[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5, int *a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v12 = *(std::string *)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, a5 + 1);
  realityio::StaticPrimInputDescriptor::StaticPrimInputDescriptor(a2, (uint64_t)&v12, a4, &v10, *a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_23F52A088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::StaticPrimInputDescriptor::StaticPrimInputDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, int a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor(a1, (long long *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26F332C18;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 44), a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 48), a4 + 1);
  return a1;
}

void sub_23F52A174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::StaticPrimInputDescriptor::~StaticPrimInputDescriptor(realityio::StaticPrimInputDescriptor *this)
{
  realityio::StaticPrimInputDescriptor::~StaticPrimInputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F332C18;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 44);

  realityio::InputDescriptor::~InputDescriptor(this);
}

void *realityio::StaticPrimInputDescriptor::resolvedPrimPaths@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a2, (unsigned int *)(a1 + 44), (_DWORD *)(a1 + 44));
}

void sub_23F52A20C(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0x68uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,std::allocator<realityio::CustomInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23F52A2E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,std::allocator<realityio::CustomInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F332568;
  std::allocator<realityio::CustomInputDescriptor>::construct[abi:ne180100]<realityio::CustomInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_23F52A364(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332568;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<realityio::CustomInputDescriptor>::construct[abi:ne180100]<realityio::CustomInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int *a6)
{
  void v11[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  v11[0] = &unk_26F3325B8;
  v11[1] = a5;
  v11[3] = v11;
  realityio::CustomInputDescriptor::CustomInputDescriptor(a2, (uint64_t)&__p, a4, (uint64_t)v11, *a6);
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100](v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F52A4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__func()
{
}

void *std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F3325B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3325B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target_type()
{
}

void *realityio::CustomInputDescriptor::CustomInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F332668;
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 6), a4);
  return a1;
}

void sub_23F52A6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  realityio::InputDescriptor::~InputDescriptor(v14);
  _Unwind_Resume(a1);
}

void realityio::CustomInputDescriptor::~CustomInputDescriptor(realityio::CustomInputDescriptor *this)
{
  *(void *)this = &unk_26F332668;
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100]((void *)this + 6);

  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F332668;
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100]((void *)this + 6);
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::CustomInputDescriptor::resolvedPrimPaths(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::~UsdPrimSubtreeIterator(pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::~UsdPrimSubtreeRange(pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  unint64_t v6 = v17;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, (_DWORD *)(a1 + 20));
  uint64_t v14 = v6;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, &v16);
  if (pxrInternal__aapl__pxrReserved__::Usd_MoveToChild<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, 0, a2))
  {
    while (pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(&v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, 0, a2));
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::UsdPrimSubtreeIterator((uint64_t)v10, &v17, &v15, (long long *)a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::UsdPrimSubtreeIterator((uint64_t)&v8, &v14, &v12, (long long *)a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::UsdPrimSubtreeRange(a3, (uint64_t)v10, (uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
}

void sub_23F52AAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::~UsdPrimSubtreeIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)va);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va1);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 - 64));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToChild<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, uint64_t *a4)
{
  int v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (*((unsigned char *)*a1 + 57))
  {
    uint64_t v9 = *(void *)(pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(*a1) + 32);
    if (v9) {
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v9 = *((void *)*a1 + 4);
  if (!v9) {
    return 0;
  }
  if (!v8)
  {
    int v10 = 0;
    goto LABEL_10;
  }
LABEL_6:
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*a1 + 16);
  }
  NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 16));
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v14, v11, NameToken);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  int v10 = 1;
LABEL_10:
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
  return pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::_Eval<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(a4, (uint64_t)a1, v10)|| !pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, uint64_t *a4)
{
  int v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v9 = *((void *)*a1 + 5);
  if ((v9 & 7) != 0) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
  if (v10) {
    BOOL v11 = v10 == (void)a3;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    int v12 = v8;
    do
    {
      BOOL v13 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::_Eval<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(a4, (uint64_t)&v28, v12);
      unint64_t v10 = (unint64_t)v28;
      if (v13) {
        break;
      }
      *a1 = v28;
      uint64_t v14 = *(void *)(v10 + 40);
      unint64_t v10 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
    }
    while (v10 && v10 != (void)a3);
  }
  if (!v10)
  {
    uint64_t v16 = *((void *)*a1 + 5);
    if ((v16 & 7) != 0) {
      unint64_t v10 = v16 & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*a1 == a3)
    {
      v25[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_32:
      uint64_t v19 = v25;
LABEL_34:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v19);
      goto LABEL_35;
    }
    if (*a1 == v28)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v27, a2);
      NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*a1 + 16));
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, NameToken);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t v19 = &v27;
      goto LABEL_34;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v25, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v25);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
    uint64_t v17 = *a1;
    if (!*a1
      || (*((unsigned char *)v17 + 57) & 0x10) == 0
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v17 + 16)))
    {
      goto LABEL_35;
    }
    PrimDataAtPathOrInPrototype = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, a2);
    *a1 = PrimDataAtPathOrInPrototype;
    if (PrimDataAtPathOrInPrototype)
    {
LABEL_29:
      if (*((void *)PrimDataAtPathOrInPrototype + 2) != *(void *)a2) {
        goto LABEL_35;
      }
      v25[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      goto LABEL_32;
    }
    v25[0] = (uint64_t)"usd/primData.h";
    v25[1] = (uint64_t)"Usd_MoveToNextSiblingOrParent";
    v25[2] = 576;
    void v25[3] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent(PrimDataPtr &, SdfPath &, Pri"
                      "mDataPtr, const Usd_PrimFlagsPredicate &) [PrimDataPtr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
    char v26 = 0;
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v24, Text);
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper())
    {
      PrimDataAtPathOrInPrototype = *a1;
      goto LABEL_29;
    }
  }
LABEL_35:
  if (v28) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = *a1 == 0;
  }
  return !v21;
}

void sub_23F52AF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::_Eval<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0x2000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  unint64_t v4 = *(void *)(*(void *)a2 + 56) & 0xFFFFFFFFFFFFDFFFLL | v3;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v9 = *a1 & v4;
  uint64_t v8 = v6 & v5;
  return *((unsigned __int8 *)a1 + 16) != std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,15ul>,true,true>(&v9, 0, (uint64_t)&v9, 0xFu, &v8);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,15ul>,true,true>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::UsdPrimSubtreeIterator(uint64_t a1, void *a2, _DWORD *a3, long long *a4)
{
  *(void *)a1 = *a2;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  long long v8 = *a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v8;
  if (*(void *)a1
    && !pxrInternal__aapl__pxrReserved__::Usd_EvalPredicate<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((uint64_t *)(a1 + 16), a1)&& pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1, v7, 0, (uint64_t *)(a1 + 16)))
  {
    *(void *)a1 = 0;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v7, (int *)&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  }
  return a1;
}

void sub_23F52B1BC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_EvalPredicate<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(uint64_t *a1, uint64_t a2)
{
  int v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::_Eval<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(a1, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::UsdPrimSubtreeRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
  long long v6 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 40) = *(void *)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 48), (_DWORD *)(a3 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 52), (_DWORD *)(a3 + 12));
  long long v7 = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 72) = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 56) = v7;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,15ul>,true,true>((void *)a1, 0, a1, 0xFu, (void *)a2);
  if (result)
  {
    uint64_t result = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,15ul>,true,true>((void *)(a1 + 8), 0, a1 + 8, 0xFu, (void *)(a2 + 8));
    if (result) {
      return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, &v6, (_DWORD *)this + 2);
  uint64_t result = v6;
  if (v6) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return result;
}

void sub_23F52B37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(pxrInternal__aapl__pxrReserved__::Usd_PrimData **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 1);
  uint64_t v3 = (uint64_t *)(this + 2);
  BOOL result = pxrInternal__aapl__pxrReserved__::Usd_MoveToChild<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(this, (pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 1), 0, (uint64_t *)this + 2);
  if (!result)
  {
    do
      BOOL result = pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(this, v2, 0, v3);
    while (result);
  }
  return result;
}

void std::__shared_ptr_emplace<realityio::DescendantPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3326A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DescendantPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3326A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::DescendantPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  v13[1] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v12 = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&v12, a3, a5);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F3326F8;
  uint64_t v9 = *a4;
  v13[0] = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      v13[0] = (uint64_t)v10;
    }
  }
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)(a1 + 6), v13, 1);
  if ((v13[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_23F52B5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
}

void realityio::DescendantPrimInputDescriptor::~DescendantPrimInputDescriptor(realityio::DescendantPrimInputDescriptor *this)
{
  *(void *)this = &unk_26F3326F8;
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)this + 48, *((void **)this + 7));

  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F3326F8;
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)this + 48, *((void **)this + 7));
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::DescendantPrimInputDescriptor::resolvedPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v37, this, a2);
  uint64_t IsValid = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37);
  if (IsValid)
  {
    uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsValid);
    unint64_t v9 = *(void *)UsdPrimDefaultPredicate;
    uint64_t v8 = *(void *)(UsdPrimDefaultPredicate + 8);
    uint64_t v10 = *(void *)(UsdPrimDefaultPredicate + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
    uint64_t v24 = v8;
    *(void *)&long long v25 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v37, (uint64_t *)&v23, (uint64_t)&v27);
    uint64_t v23 = v27;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, &v28);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v24 + 1, &v29);
    long long v25 = v30;
    uint64_t v26 = v31;
    uint64_t v19 = v32;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, &v33);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v20 + 1, &v34);
    long long v21 = v35;
    uint64_t v22 = v36;
    while (v23 != v19
         || v24 != v20
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v25, (uint64_t)&v21))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v23, (uint64_t)v15);
      std::string v12 = v16;
      if (!v16 || (*((unsigned char *)v16 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v16, v11);
      }
      if ((void *)(a3 + 56) != std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a3 + 48, *((void **)v12 + 3)))
      {
        PrimPath = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v15);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a4, PrimPath, PrimPath);
      }
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
      if (v16) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v16);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v23);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  }
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  uint64_t result = v38;
  if (v38) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
  }
  return result;
}

void sub_23F52B978(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v2 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_23F52BA44(_Unwind_Exception *a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t **a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  int64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5 & 0xFFFFFFFFFFFFFFF8, v7 = a2[4] & 0xFFFFFFFFFFFFFFF8, v6 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5 & 0xFFFFFFFFFFFFFFF8;
    if ((v10[4] & 0xFFFFFFFFFFFFFFF8) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4] & 0xFFFFFFFFFFFFFFF8;
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          int64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    std::string v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      std::string v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= (a4[4] & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = v20;
          unint64_t v22 = v20[4] & 0xFFFFFFFFFFFFFFF8;
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v2;
  do
  {
    unint64_t v7 = v3[4] & 0xFFFFFFFFFFFFFFF8;
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      unint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < (v6[4] & 0xFFFFFFFFFFFFFFF8)) {
    return v2;
  }
  return v6;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F332748;
  return result;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F332748;
}

char *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  BOOL v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23F52C158(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(*((void *)a1 + 1));
    int8x8_t v2 = (void **)(a1 + 96);
    std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (a1[79] < 0) {
      operator delete(*((void **)a1 + 7));
    }
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TimelineGroupFactory>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (!v5)
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x78uLL);
    void v11[2] = *(_OWORD *)a3;
    *((void *)v11 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
    *(_OWORD *)((char *)v11 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *((_DWORD *)v11 + 22) = *(_DWORD *)(a3 + 56);
    uint64_t v12 = *(void *)(a3 + 40);
    uint64_t v13 = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *((void *)v11 + 9) = v12;
    *((void *)v11 + 10) = v13;
    v11[6] = *(_OWORD *)(a3 + 64);
    *((void *)v11 + 14) = *(void *)(a3 + 80);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v8;
    void *v6 = (uint64_t *)v11;
    float v14 = (uint64_t *)**a1;
    if (v14)
    {
      *a1 = v14;
      float v15 = *v6;
    }
    else
    {
      float v15 = (uint64_t *)v11;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      unint64_t v8 = (uint64_t **)v5;
      unint64_t v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      unint64_t v5 = *v8;
      unint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    uint64_t result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2);
    if (!result) {
      break;
    }
    unint64_t v6 = v8 + 1;
    unint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (!*v6) {
    goto LABEL_10;
  }
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  int8x8_t v2 = (char *)operator new(0x38uLL);
  *(void *)int8x8_t v2 = &unk_26F3327C8;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3327C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v3 = MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t TimelineAsset = realityio::TimelineGroupFactory::createTimelineAsset(*(float **)(a1 + 16), v3, "default scene animation");
  uint64_t v5 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
  REAnimationLibraryDefinitionAddEntryAsset();
  REAnimationLibraryDefinitionAddKeyedEntryIndex();
  uint64_t Name = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v23, Name);
  unint64_t v7 = std::string::append(&v23, ".");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  unint64_t v9 = std::string::append(&v24, "timelineGroup.");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v25, "default scene animation");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v27 = v11->__r_.__value_.__r.__words[2];
  long long v26 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v22, v13);
  float v14 = std::string::append(&v22, ".");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  BOOL v16 = std::string::append(&v23, "entityAnimationScene.");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = std::string::append(&v24, "default scene animation");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v27 >= 0) {
    uint64_t v20 = &v26;
  }
  else {
    uint64_t v20 = (long long *)v26;
  }
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 48), TimelineAsset, (uint64_t)v20);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v21 = &v25;
  }
  else {
    long long v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 48), v5, (uint64_t)v21);
  RERelease();
  RERelease();
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
}

void sub_23F52C670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  int8x8_t v2 = (char *)operator new(0x40uLL);
  *(void *)int8x8_t v2 = &unk_26F332848;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F332848;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v3 = MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t TimelineAsset = realityio::TimelineGroupFactory::createTimelineAsset(*(float **)(a1 + 16), v3, "default subtree animation");
  uint64_t v5 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
  std::string::basic_string[abi:ne180100]<0>(&__p, "default subtree animation");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  REAnimationLibraryDefinitionAddEntryAsset();
  REAnimationLibraryDefinitionAddKeyedEntryIndex();
  unint64_t v6 = *(void **)(a1 + 48);
  if (v6[2])
  {
    unint64_t v9 = (long long *)*v6;
    unint64_t v7 = (long long *)(v6 + 1);
    long long v8 = v9;
    if (v9 != v7)
    {
      do
      {
        std::pair<std::string const,realityio::TimelineGroupFactory>::pair[abi:ne180100](&__p, v8 + 2);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        realityio::TimelineGroupFactory::createTimelineAsset((float *)&v36, v3, (const char *)p_p);
        uint64_t v11 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationLibraryDefinitionAddKeyedEntryIndex();
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
        std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if (v37 < 0) {
          operator delete(v36);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        long long v12 = (long long *)*((void *)v8 + 1);
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            long long v12 = *(long long **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (long long *)*((void *)v8 + 2);
            BOOL v14 = *(void *)v13 == (void)v8;
            long long v8 = v13;
          }
          while (!v14);
        }
        long long v8 = v13;
      }
      while (v13 != v7);
    }
  }
  uint64_t Name = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v32, Name);
  BOOL v16 = std::string::append(&v32, ".");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = std::string::append(&v33, "timelineGroup.");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = std::string::append(&v34, "default subtree animation");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string v22 = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v31, v22);
  std::string v23 = std::string::append(&v31, ".");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  std::string v25 = std::string::append(&v32, "subtreeAnimationScene.");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  int64_t v27 = std::string::append(&v33, "default subtree animation");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v29 = &__p;
  }
  else {
    int v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), TimelineAsset, (uint64_t)v29);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v30 = &v34;
  }
  else {
    long long v30 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), v5, (uint64_t)v30);
  RERelease();
  RERelease();
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F52CC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::target_type()
{
}

uint64_t realityio::anonymous namespace'::annotateSubTimelines(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  REAssetCopyDependencyArray();
  uint64_t Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    uint64_t v8 = Size;
    uint64_t v9 = 0;
    uint64_t v18 = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v19 = *MEMORY[0x263F8C2C8];
    do
    {
      uint64_t Asset = REAssetDynamicArrayGetAsset();
      CFStringRef Type = (const __CFString *)REAssetGetType();
      if (CFEqual(Type, @"Timeline"))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
        int v12 = *(char *)(a1 + 23);
        if (v12 >= 0) {
          uint64_t v13 = a1;
        }
        else {
          uint64_t v13 = *(void *)a1;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v14 = *(void *)(a1 + 8);
        }
        long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"_subTimeline_", 13);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (v21 >= 0) {
          BOOL v16 = __p;
        }
        else {
          BOOL v16 = (void **)__p[0];
        }
        realityio::Builder::addAsset(a3, Asset, (uint64_t)v16);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        v22[0] = v19;
        *(void *)((char *)v22 + *(void *)(v19 - 24)) = v18;
        v22[1] = MEMORY[0x263F8C318] + 16;
        if (v23 < 0) {
          operator delete((void *)v22[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2455D2B30](&v24);
      }
      ++v9;
    }
    while (v8 != v9);
  }
  return RERelease();
}

void sub_23F52CFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_23F52D154(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2455D2B30](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2455D2B30](a1 + 112);
  return a1;
}

std::string *std::pair<std::string const,realityio::TimelineGroupFactory>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = *((void *)a2 + 6);
  int v7 = *((_DWORD *)a2 + 14);
  this[2].__r_.__value_.__r.__words[2] = 0;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = v7;
  this[2].__r_.__value_.__r.__words[0] = v6;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  uint64_t v9 = *((void *)a2 + 8);
  uint64_t v8 = *((void *)a2 + 9);
  uint64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>>((uint64_t)&this[3].__r_.__value_.__l.__size_, v10 >> 6);
    uint64_t v12 = 0;
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
    this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    this[3].__r_.__value_.__l.__size_ = (std::string::size_type)&v11[64 * v13];
    do
    {
      realityio::TimelineGroupFactory::TimelineData::TimelineData((std::string *)&v11[v12], (long long *)(v9 + v12));
      v12 += 64;
    }
    while (v9 + v12 != v8);
    this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&v11[v12];
  }
  return this;
}

void sub_23F52D398(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F3328C8;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3328C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v3 = MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t TimelineAsset = realityio::TimelineGroupFactory::createTimelineAsset(*(float **)(a1 + 16), v3, "global scene animation");
  uint64_t v5 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
  std::string::basic_string[abi:ne180100]<0>(&__p, "global scene animation");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  REAnimationLibraryDefinitionInsertEntryAsset();
  REAnimationLibraryDefinitionAddKeyedEntryIndex();
  std::string::size_type v6 = *(void **)(a1 + 48);
  if (v6[2])
  {
    uint64_t v9 = (long long *)*v6;
    int v7 = (long long *)(v6 + 1);
    uint64_t v8 = v9;
    if (v9 != v7)
    {
      do
      {
        std::pair<std::string const,realityio::TimelineGroupFactory>::pair[abi:ne180100](&__p, v8 + 2);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        realityio::TimelineGroupFactory::createTimelineAsset((float *)&v36, v3, (const char *)p_p);
        uint64_t v11 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationLibraryDefinitionAddKeyedEntryIndex();
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
        std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if (v37 < 0) {
          operator delete(v36);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v12 = (long long *)*((void *)v8 + 1);
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            uint64_t v12 = *(long long **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (long long *)*((void *)v8 + 2);
            BOOL v14 = *(void *)v13 == (void)v8;
            uint64_t v8 = v13;
          }
          while (!v14);
        }
        uint64_t v8 = v13;
      }
      while (v13 != v7);
    }
  }
  uint64_t Name = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v32, Name);
  BOOL v16 = std::string::append(&v32, ".");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v33, "timelineGroup.");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = std::string::append(&v34, "global scene animation");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string v22 = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v31, v22);
  char v23 = std::string::append(&v31, ".");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  std::string v25 = std::string::append(&v32, "globalAnimationScene.");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  int64_t v27 = std::string::append(&v33, "global scene animation");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v29 = &__p;
  }
  else {
    int v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), TimelineAsset, (uint64_t)v29);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v30 = &v34;
  }
  else {
    long long v30 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), v5, (uint64_t)v30);
  RERelease();
  RERelease();
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F52D8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F332948;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F332948;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  v16[4] = *MEMORY[0x263EF8340];
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t AnimationLibraryAsset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
  if (AnimationLibraryAsset)
  {
    REAnimationLibraryComponentGetComponentType();
    v16[0] = &unk_26F3329B8;
    v16[1] = &AnimationLibraryAsset;
    v16[3] = v16;
    uint64_t v3 = REEntityGetOrAddComponentByClass();
    std::function<void ()(REComponent *)>::operator()((uint64_t)v16, v3);
    RENetworkMarkComponentDirty();
    std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v16);
    REAnimationComponentGetComponentType();
    if (!REEntityGetComponentByClass())
    {
      REAnimationComponentGetComponentType();
      REEntityAddComponentByClass();
      uint64_t v4 = *(void *)(a1 + 32);
      __p[0] = (void *)REAnimationComponentGetComponentType();
      std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(v4 + 40), (unint64_t *)__p, (uint64_t *)__p);
    }
  }
  uint64_t Name = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v11, Name);
  std::string::size_type v6 = std::string::append(&v11, ".");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v12, "animationLibrary");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v14 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v14 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), AnimationLibraryAsset, (uint64_t)v10);
  RERelease();
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F52DC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F3329B8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEE7__cloneEPNS0_6__baseIS2D_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3329B8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEEclEOS2C_()
{
  return REAnimationLibraryComponentAssignAnimationLibraryAsset();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS_7BuilderEbPNS_6InputsEP8REEntityRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS6_13unordered_mapIS5_PKNS_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS6_4hashIS5_EENS6_8equal_toIS5_EENSA_INS6_4pairIKS5_SJ_EEEEEERKNSF_IS5_PKNS_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESL_SN_NSA_INSO_ISP_SY_EEEEEERKNSF_IS5_PKNS_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESL_SN_NSA_INSO_ISP_S17_EEEEEERKNSF_IS5_PKNSG_29BlendShapeAnimationSceneDataTESL_SN_NSA_INSO_ISP_S1F_EEEEEERNS6_6vectorIPNS_20TimelineGroupFactoryENSA_IS1N_EEEERNS1L_IPNS6_3mapISC_S1M_NS6_4lessISC_EENSA_INSO_ISD_S1M_EEEEEENSA_IS1X_EEEERNS6_13unordered_setIS5_SL_SN_NSA_IS5_EEEEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS_7BuilderEbPNS_6InputsEP8REEntityRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS6_13unordered_mapIS5_PKNS_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS6_4hashIS5_EENS6_8equal_toIS5_EENSA_INS6_4pairIKS5_SJ_EEEEEERKNSF_IS5_PKNS_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESL_SN_NSA_INSO_ISP_SY_EEEEEERKNSF_IS5_PKNS_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESL_SN_NSA_INSO_ISP_S17_EEEEEERKNSF_IS5_PKNSG_29BlendShapeAnimationSceneDataTESL_SN_NSA_INSO_ISP_S1F_EEEEEERNS6_6vectorIPNS_20TimelineGroupFactoryENSA_IS1N_EEEERNS1L_IPNS6_3mapISC_S1M_NS6_4lessISC_EENSA_INSO_ISD_S1M_EEEEEENSA_IS1X_EEEERNS6_13unordered_setIS5_SL_SN_NSA_IS5_EEEEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F332A48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F332A48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::operator()()
{
  REAnimationLibraryComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    REAnimationLibraryComponentGetComponentType();
    REEntityRemoveComponentByClass();
  }
  REAnimationComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (!result)
  {
    REAnimationComponentGetComponentType();
    return REEntityRemoveComponentByClass();
  }
  return result;
}

uint64_t std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    std::string v11 = std::string::append(&v14, "\" does not exist in the builder outputs");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v17, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v17;
    uint64_t v13 = v19;
    *(void *)(a3 + 24) = v18;
    *(void *)(a3 + 32) = v13;
    *(void *)(a3 + 39) = *(void *)((char *)&v19 + 7);
    LOBYTE(v13) = HIBYTE(v19);
    long long v19 = 0uLL;
    uint64_t v18 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v13;
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 56);
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v10;
    *(void *)(a3 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_23F52E0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        std::string::size_type v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = (void **)(a1 + 8);
    std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::Outputs::getRawValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F52E354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

uint64_t realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
LABEL_6:
      operator delete(v2);
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    goto LABEL_6;
  }
  return a1;
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v11 = std::string::append(&v14, "\" does not exist in the builder outputs");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v17, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v17;
    uint64_t v13 = v19;
    *(void *)(a3 + 24) = v18;
    *(void *)(a3 + 32) = v13;
    *(void *)(a3 + 39) = *(void *)((char *)&v19 + 7);
    LOBYTE(v13) = HIBYTE(v19);
    long long v19 = 0uLL;
    uint64_t v18 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v13;
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 56);
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v10;
    *(void *)(a3 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_23F52E534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16)) {
    return 1;
  }
  if ((v1 & 4) == 0) {
    return 0;
  }
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C230]);
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F332AC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F332AC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 24);
  REAssetGetAssetManager();
  REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
  if (REAnimationLibraryDefinitionGetEntryCount())
  {
    REAnimationLibraryDefinitionGetEntryAsset();
    REAnimationComponentGetComponentType();
    uint64_t v2 = REEntityGetOrAddComponentByClass();
    realityio::Builder::addComponent(v1, v2);
    RENetworkMarkComponentDirty();
    REAnimationHandoffDefaultDescEx();
    REAnimationComponentPlay();
  }
  return RERelease();
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26F332B48;
  return result;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F332B48;
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t result = REAnimationComponentActiveAnimationCount();
  if (result)
  {
    return MEMORY[0x270F1C1F0](v2);
  }
  return result;
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::target_type()
{
}

uint64_t realityio::TransformAnimationAssetBuilder::kOutputName(realityio::TransformAnimationAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::TransformAnimationAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23F52E920(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::TransformAnimationAssetBuilder::kOutputLibraryName(realityio::TransformAnimationAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::TransformAnimationAssetBuilder::kOutputLibraryName(void)::kOutputLibraryName;
}

void sub_23F52E9D8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TransformAnimationAssetBuilder *realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(realityio::TransformAnimationAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "TransformAnimationAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTransformAnimationAssetBuilderIdentifier);
  realityio::generateTransformAnimationDirtyStageSubscription(&v5);
  v12[0] = &unk_26F332DE0;
  void v12[3] = v12;
  v11[0] = &unk_26F332E60;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F332C58;
  *((void *)this + 35) = 0;
  *((_OWORD *)this + 1pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = xmmword_23F7BD480;
  *((void *)this + 3pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  *((void *)this + 39) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 40) = (char *)this + 328;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::TransformAnimationAssetBuilder *)((char *)this + 344));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23F52EBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v27 = v25;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(v27, *((void **)v24 + 41));
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT(v26);
  realityio::DynamicBuilder::~DynamicBuilder(v24);
  _Unwind_Resume(a1);
}

realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::TransformAnimationAssetDataT(realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *this)
{
  *(void *)this = 0;
  *(_OWORD *)((char *)this + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = xmmword_23F7BD480;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::vector<RESRT>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<RESRT>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(void *)a1 + 48 * a2;
  }
}

void ___Z9sampleSRTmdRN32pxrInternal__aapl__pxrReserved__16UsdGeomXformableE_block_invoke(uint64_t a1, uint64_t a2)
{
  char v10 = 0;
  LocalTransformation = (realityio *)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation();
  if (LocalTransformation)
  {
    MEMORY[0x2455CE5D0](buf, v11);
    *(_DWORD *)&uint8_t buf[8] = 0;
    *(void *)std::string buf = 0;
    DWORD2(v7) = 0;
    *(void *)&long long v7 = 0;
    REDecomposeMatrix();
    uint64_t v5 = (_OWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) + 48 * a2);
    *uint64_t v5 = *(_OWORD *)buf;
    v5[1] = v8;
    _OWORD v5[2] = v7;
  }
  else
  {
    std::string::size_type v6 = *(NSObject **)(realityio::logObjects(LocalTransformation) + 24);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_DEFAULT, "Stopping operation to read animation because USD call failed.", buf, 2u);
    }
  }
}

uint64_t realityio::TransformAnimationAssetBuilder::run(realityio::TransformAnimationAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  unint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v34, v5, v4);
  uint64_t v6 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v34, buf);
  long long v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6 + 64, buf);
  BOOL v8 = (void *)(v6 + 72) != v7 && *(void *)(*(void *)(v6 + 40) + 104 * v7[5] + 24) == *(void *)buf;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v34);
    uint64_t v9 = *(atomic_uint **)&buf[8];
    if (*(void *)&buf[8])
    {
      if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&buf[8])
                    + 14))
        uint64_t v9 = *(atomic_uint **)buf;
      else {
        uint64_t v9 = 0;
      }
    }
    std::string v33 = v9;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v33);
    uint64_t v10 = *(void *)&buf[8];
    if (*(void *)&buf[8]
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v33);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v11);
    if (v12 != 0.0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v31 = MEMORY[0x263F90730] + 16;
      if (v32
        && (*(unsigned char *)(v32 + 57) & 8) == 0
        && ((*(uint64_t (**)(uint64_t *))(MEMORY[0x263F90730] + 48))(&v31) & 1) != 0
        && pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v31))
      {
        realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v30, 2028, (uint64_t)this);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v29[3] = 0;
        v29[0] = MEMORY[0x263F90778] + 16;
        unint64_t v13 = atomic_load(&realityio::tokens::AnimationBuilderTokens);
        if (!v13) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v29, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 8));
        int v24 = *(_DWORD *)buf;
        uint64_t v25 = *(void *)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, &v39);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, (_DWORD *)&v39 + 1);
        uint64_t v28 = *((void *)&v39 + 1);
        if ((BYTE8(v39) & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v28 &= 0xFFFFFFFFFFFFFFF8;
        }
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v39) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
        if (*(void *)&buf[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
        }
        unint64_t v14 = atomic_load(&realityio::tokens::AnimationBuilderTokens);
        if (!v14) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v29, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 16));
        int v19 = *(_DWORD *)buf;
        uint64_t v20 = *(void *)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, &v39);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, (_DWORD *)&v39 + 1);
        uint64_t v23 = *((void *)&v39 + 1);
        if ((BYTE8(v39) & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v23 &= 0xFFFFFFFFFFFFFFF8;
        }
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v39) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
        if (*(void *)&buf[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
        }
        std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 320, *((void **)this + 41));
        *((void *)this + 41) = 0;
        *((void *)this + 42) = 0;
        *((void *)this + 40) = (char *)this + 328;
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24)
          && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19))
        {
          uint64_t v40 = 0;
          *(_OWORD *)std::string buf = 0u;
          long long v39 = 0u;
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>();
        }
        TimeSamples = (realityio *)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples();
        std::string::size_type v16 = *(id *)(realityio::logObjects(TimeSamples) + 24);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v31, &v41);
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = Text;
          _os_log_impl(&dword_23F4EA000, v16, OS_LOG_TYPE_DEFAULT, "Empty transform animation samples %s", buf, 0xCu);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
        }

        if ((v23 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        if (v20) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
        }
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
        if (v25) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
        }
        MEMORY[0x2455CF0D0](v29);
        realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v30);
      }
      MEMORY[0x2455CEF00](&v31);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v33);
  }
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  uint64_t result = v35;
  if (v35) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
  }
  return result;
}

void sub_23F52F8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,atomic_uint *a42,__int16 a43,char a44,char a45)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v46 - 176));

  if (__p) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a25);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a29);
  MEMORY[0x2455CF0D0](&a33);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a37);
  MEMORY[0x2455CEF00](&a39);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a42);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a43);
  _Unwind_Resume(a1);
}

void sub_23F52FADC()
{
}

uint64_t createSampledSRTAnimationTimelineAsset(realityio::Inputs *a1, pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a2, double a3, double a4, double a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v32 = a1;
  v39.__r_.__value_.__r.__words[0] = 0;
  v39.__r_.__value_.__l.__size_ = (std::string::size_type)&v39;
  v39.__r_.__value_.__r.__words[2] = 0x4812000000;
  uint64_t v40 = __Block_byref_object_copy_;
  std::string v41 = __Block_byref_object_dispose_;
  uint64_t v42 = "";
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  std::string __p = 0;
  std::vector<RESRT>::resize((uint64_t)&__p, (unint64_t)(a4 - a3 + 1.0));
  long long v7 = dispatch_get_global_queue(25, 0);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(v39.__r_.__value_.__l.__size_ + 56) - *(void *)(v39.__r_.__value_.__l.__size_ + 48)) >> 4);
  v33[0] = MEMORY[0x263EF8330];
  v33[1] = 3221225472;
  v33[2] = ___Z9sampleSRTmdRN32pxrInternal__aapl__pxrReserved__16UsdGeomXformableE_block_invoke;
  v33[3] = &unk_265071AB8;
  *(double *)&v33[5] = a3;
  void v33[6] = a2;
  v33[4] = &v39;
  uint64_t v9 = v33;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZL16dispatchInChunksmmPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvmE_block_invoke;
  block[3] = &unk_265071AE0;
  int v38 = v8 % 0x3E8;
  unint64_t v36 = v8 / 0x3E8;
  uint64_t v37 = 1000;
  id v35 = v9;
  dispatch_apply(v8 / 0x3E8 + 1, v7, block);

  __dst = 0;
  uint64_t v31 = 0;
  int v29 = 0;
  uint64_t v11 = *(unsigned char **)(v39.__r_.__value_.__l.__size_ + 48);
  uint64_t v10 = *(unsigned char **)(v39.__r_.__value_.__l.__size_ + 56);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    std::vector<RESRT>::__vallocate[abi:ne180100](&v29, 0xAAAAAAAAAAAAAAABLL * (v12 >> 4));
    unint64_t v13 = (char *)__dst;
    memmove(__dst, v11, v12);
    __dst = &v13[16 * (v12 >> 4)];
  }

  _Block_object_dispose(&v39, 8);
  if (__p)
  {
    unint64_t v44 = __p;
    operator delete(__p);
  }
  uint64_t v28 = 0;
  unint64_t v14 = __dst;
  if (__dst == v29)
  {
    uint64_t v17 = 0;
    if (!__dst) {
      return v17;
    }
    goto LABEL_31;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v39, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(&v27, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v39);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39.__r_.__value_.__r.__words[2]);
  if (v39.__r_.__value_.__l.__size_) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39.__r_.__value_.__l.__size_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v39, "RealityKit:interpMode");
  uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  std::string::size_type v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v39.__r_.__value_.__l.__data_);
    if (!v16) {
      goto LABEL_23;
    }
  }
  else if (!ValueAtPath)
  {
    goto LABEL_23;
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v16);
  if (v18)
  {
    uint64_t v19 = *((void *)v16 + 1);
    if ((v19 & 4) != 0)
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v16);
      std::string::size_type v16 = v18;
    }
    if ((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    }
  }
LABEL_23:
  uint64_t v26 = 0;
  if (__dst == v29)
  {
    uint64_t SampledSRTAnimation = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a2, block);
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)block);
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)String, *(void *)(String + 8));
    }
    else
    {
      long long v21 = *(_OWORD *)String;
      v39.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)block);
    uint64_t SampledSRTAnimation = RETimelineDefinitionCreateSampledSRTAnimation();
    RETimelineDefinitionSetInterpolationEnabled();
    RETimelineDefinitionSetTargetPath();
    RETimelineDefinitionSetFrameInterval();
    RETimelineDefinitionSetStartTime();
    RETimelineDefinitionSetEndTime();
    RETimelineDefinitionSetSRTValues();
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v26 = SampledSRTAnimation;
  uint64_t v23 = *((void *)v32 + 6);
  int v24 = (__n128 (*)(__n128 *, __n128 *))operator new(0x20uLL);
  *(void *)int v24 = &unk_26F332D60;
  *((void *)v24 + 1) = &v32;
  *((void *)v24 + 2) = &v28;
  *((void *)v24 + 3) = &v26;
  uint64_t v40 = v24;
  (*(void (**)(uint64_t, std::string *))(*(void *)v23 + 16))(v23, &v39);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v39);
  RERelease();
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v27, 0);
  uint64_t v17 = v28;
  unint64_t v14 = v29;
  if (v29)
  {
LABEL_31:
    __dst = v14;
    operator delete(v14);
  }
  return v17;
}

void sub_23F530034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::operator=(int *a1, int *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v9 = *(void *)a1;
    *(void *)a1 = 0;
    if (*(void *)a2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = 0;
    }
    if (v4)
    {
      *(void *)a2 = v4;
      uint64_t v9 = 0;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v9);
    uint64_t v5 = *((void *)a1 + 1);
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v5;
    uint64_t v6 = *((void *)a1 + 2);
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v6;
    uint64_t v7 = *((void *)a1 + 3);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v7;
    std::swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 8, a2 + 8);
  }
  return (uint64_t *)a1;
}

void realityio::Outputs::storeValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F332EE0;
  uint64_t v8 = *a3;
  void v7[3] = &unk_26F332F30;
  v7[4] = v8;
  uint64_t v11 = a2;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  uint64_t v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F5302A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::TransformAnimationAssetBuilder::clear(realityio::TransformAnimationAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v4 = (std::mutex *)*((void *)this + 2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (const void **)realityio::TransformAnimationAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>(v4, v6, (uint64_t)&v23);
  int v8 = v23;
  if (!(_BYTE)v23)
  {
    uint64_t v7 = (realityio::TransformAnimationAssetBuilder *)&v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v20 = (void *)v22.__r_.__value_.__r.__words[0];
      char v21 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v23 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v22 = __p;
      uint64_t v20 = (void *)__p.__r_.__value_.__r.__words[0];
      char v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v8)
  {
    uint64_t v10 = *((void *)this + 2);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (const void **)realityio::TransformAnimationAssetBuilder::kOutputName(v7);
    std::mutex::lock((std::mutex *)(v10 + 64));
    if (v10 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v10 + 40, v11))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v10 + 40), v11); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v10, (unsigned __int8 *)v11);
    }
    std::mutex::unlock((std::mutex *)(v10 + 64));
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  unint64_t v13 = (std::mutex *)*((void *)this + 2);
  int64_t v12 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = (const void **)realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v7);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v13, v14, (uint64_t)&v23);
  int v16 = v23;
  if (!(_BYTE)v23)
  {
    long long v15 = (realityio::TransformAnimationAssetBuilder *)&v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      unint64_t v13 = (std::mutex *)v22.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v23 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v22 = __p;
      unint64_t v13 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v16)
  {
    uint64_t v18 = *((void *)this + 2);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = (const void **)realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v15);
    std::mutex::lock((std::mutex *)(v18 + 64));
    if (v18 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v18 + 40, v19))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v18 + 40), v19); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v18, (unsigned __int8 *)v19);
    }
    std::mutex::unlock((std::mutex *)(v18 + 64));
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  uint64_t v23 = 0;
  long long v24 = xmmword_23F7BD480;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::operator=((int *)this + 70, (int *)&v23);
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT((realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *)&v23);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 320, *((void **)this + 41));
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 40) = (char *)this + 328;
  if (!v16 && v2 < 0) {
    operator delete(v13);
  }
  if (!v8 && v21 < 0) {
    operator delete(v20);
  }
}

void sub_23F5305D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (!a18 && a26 < 0) {
    operator delete(__p);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (!v27 && a11 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void realityio::TransformAnimationAssetBuilder::~TransformAnimationAssetBuilder(void **this)
{
  realityio::TransformAnimationAssetBuilder::~TransformAnimationAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F332C58;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 49));
  if (*((char *)this + 391) < 0) {
    operator delete(this[46]);
  }
  if (*((char *)this + 367) < 0) {
    operator delete(this[43]);
  }
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)(this + 40), this[41]);
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT((realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *)(this + 35));
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  char v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  BOOL v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

void realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT(realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this);
}

uint64_t ___ZL16dispatchInChunksmmPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvmE_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(void *)(result + 40) == a2)
  {
    uint64_t v3 = *(int *)(result + 56);
    if (!*(_DWORD *)(result + 56)) {
      return result;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(result + 48);
    if (!v3) {
      return result;
    }
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16))();
    ++v4;
  }
  while (v3 != v4);
  return result;
}

void std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F332CD0;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F332CD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  RETimelineDefinitionCreateFromTimeline();
  RETimelineDefinitionCreateTimelineClip();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetClipLoopBehavior();
  **(void **)(a1 + 32) = RETimelineDefinitionCreateTimelineAsset();
  RERelease();

  return RERelease();
}

uint64_t std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::target_type()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 13) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

void std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F332D60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F332D60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t result = RETimelineDefinitionCreateTimelineAsset();
  **(void **)(a1 + 16) = result;
  return result;
}

uint64_t std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::target_type()
{
}

uint64_t *std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<void>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v2, *(void **)(v2 + 8));
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<void>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<void>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<void>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(int *a1, int *a2)
{
  v5[0] = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  v5[1] = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a1 + 1));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, v5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a2 + 1));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v5);
}

uint64_t realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::TransformAnimationAssetDataT(uint64_t a1, uint64_t a2, _DWORD *a3, double a4, double a5, double a6)
{
  *(void *)a1 = a2;
  if (a2) {
    RERetain();
  }
  *(double *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = a4;
  *(double *)(a1 + 16) = a5;
  *(double *)(a1 + 24) = a6;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), a3 + 1);
  return a1;
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F332DE0;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F332DE0;
}

char *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F332E60;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F332E60;
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::TransformAnimationAssetBuilder::kOutputName((realityio::TransformAnimationAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 312), (int *)&v12, &v14);
  uint64_t v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v14);
  uint64_t v7 = (realityio::TransformAnimationAssetBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v8, (std::string::size_type *)(v9 + 320), &v11, &v12);
  uint64_t v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F531108(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::vector<RESRT>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      std::string::size_type v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(v4, v11);
    }
    else {
      std::string::size_type v12 = 0;
    }
    std::string::size_type v14 = &v12[48 * v8];
    long long v15 = &v12[48 * v11];
    size_t v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 3);
        long long v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void realityio::Outputs::getRawValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    unint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F5314E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::~SkeletalAnimationAssetBuilderTokens_StaticTokenType(realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::SkeletalAnimationAssetBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "SkelAnimation", 0) + 8);
  MEMORY[0x2455CF820](v2, "PackedJointAnimation", 0);
  uint64_t v3 = *this;
  uint64_t v16 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v4;
    }
  }
  unint64_t v5 = *v2;
  long long v17 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      long long v17 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  uint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    char v11 = v9;
    std::string v12 = (&v16)[v10];
    *(void *)&v7[v8] = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
    char v9 = 1;
    uint64_t v10 = 1;
  }
  while ((v11 & 1) == 0);
  this[3] = &v7[v8];
  for (uint64_t i = 1; i != -1; --i)
  {
    std::string::size_type v14 = (&v16)[i];
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *)this;
}

void sub_23F531700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::generateSkeletalAnimationDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40338, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40338))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40330;
  *a1 = _MergedGlobals_3;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F531F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,std::__shared_weak_count *a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char *a60)
{
  MEMORY[0x2455D2BD0](v61, 0x10A1C40F82F910ELL);
  uint64_t v64 = v63 - 128;
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  a15 = &a38;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  uint64_t v65 = 17;
  while (1)
  {
    double v66 = (std::__shared_weak_count *)(&a60)[v65];
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
    v65 -= 2;
    if (v65 == -1)
    {
      if (a21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a21);
      }
      if (a23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a23);
      }
      if (a25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a25);
      }
      if (a27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a27);
      }
      if (a29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a29);
      }
      if (a31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a31);
      }
      if (a33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a33);
      }
      if (a35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a35);
      }
      if (a37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a37);
      }
      a60 = &a41;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
      for (; v64 != v63 - 144; v64 -= 16)
      {
        int v67 = *(std::__shared_weak_count **)(v64 - 8);
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
      }
      a60 = &a49;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
      MEMORY[0x2455D2BD0](v60, 0x10A1C401BF1BAA1);
      MEMORY[0x2455D2BD0](v62, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C40338);
      _Unwind_Resume(a1);
    }
  }
}

void realityio::generateSkeletalMeshDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40358))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40350;
  *a1 = qword_268C40348;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F532C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char *a59)
{
  MEMORY[0x2455D2BD0](v60, 0x10A1C40F82F910ELL);
  uint64_t v63 = v62 - 128;
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  a59 = &a30;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  a59 = &a40;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  uint64_t v64 = 40;
  while (1)
  {
    uint64_t v65 = *(std::__shared_weak_count **)(v62 - 192 + v64);
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    v64 -= 16;
    if (v64 == -8)
    {
      if (a34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a34);
      }
      if (a36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a36);
      }
      if (a38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a38);
      }
      for (; v63 != v62 - 144; v63 -= 16)
      {
        double v66 = *(std::__shared_weak_count **)(v63 - 8);
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
      }
      a59 = &a48;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
      MEMORY[0x2455D2BD0](v59, 0x10A1C401BF1BAA1);
      MEMORY[0x2455D2BD0](v61, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C40358);
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F533104()
{
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>::New()
{
}

void sub_23F53320C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40A4D8F774);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::~UsdSkelTokensType(pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *this)
{
  long long v30 = (void **)((char *)this + 232);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v30);
  uint64_t v2 = *((void *)this + 28);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 27);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 26);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 25);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 24);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 23);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 22);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 21);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 20);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 19);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 18);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 17);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 16);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 15);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 14);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 13);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 12);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 11);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 10);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 9);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 8);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 7);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 6);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 5);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 4);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 3);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 2);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 1);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F5335BC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40F64FA5DBLL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F533648(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::AnyValueNamedspacedDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,realityio::AnyValueNamedspacedDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::AnyValueNamedspacedDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,realityio::AnyValueNamedspacedDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::AnyValueNamedspacedDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,realityio::AnyValueNamedspacedDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F5337C8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40EB01C5B6);
  _Unwind_Resume(a1);
}

void std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F533854(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::PrimitiveDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitiveDirtyPrimDescriptor,realityio::PrimitiveDirtyPrimDescriptor>,std::allocator<realityio::PrimitiveDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::PrimitiveDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitiveDirtyPrimDescriptor,realityio::PrimitiveDirtyPrimDescriptor>,std::allocator<realityio::PrimitiveDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::PrimitiveDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitiveDirtyPrimDescriptor,realityio::PrimitiveDirtyPrimDescriptor>,std::allocator<realityio::PrimitiveDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F533A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455D2BD0](v9, 0x60C405399E965);
  _Unwind_Resume(a1);
}

uint64_t realityio::InputsDescriptor::addInputDescriptor(uint64_t a1, void *a2)
{
  MEMORY[0x2455CF830](&v40, *a2 + 8);
  uint64_t v4 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  int8x8_t v6 = *(int8x8_t *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v5);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = v7;
      if (v7 >= *(void *)&v6) {
        unint64_t v9 = v7 % *(void *)&v6;
      }
    }
    else
    {
      unint64_t v9 = v7 & (*(void *)&v6 - 1);
    }
    uint64_t i = *(void **)(*(void *)a1 + 8 * v9);
    if (i)
    {
      for (uint64_t i = (void *)*i; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
            break;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *(void *)&v6) {
              v11 %= *(void *)&v6;
            }
          }
          else
          {
            v11 &= *(void *)&v6 - 1;
          }
          if (v11 != v9) {
            goto LABEL_21;
          }
        }
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t i = 0;
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)v5, 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = v40;
  if (!i)
  {
    long long v38 = 0uLL;
    uint64_t v39 = 0;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((float *)a1, v40, &v40);
    uint64_t v14 = v13;
    uint64_t v15 = (void **)(v13 + 3);
    if (v13[3])
    {
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100](v13 + 3);
      operator delete(*v15);
      *uint64_t v15 = 0;
      v15[1] = 0;
      void v15[2] = 0;
    }
    *(_OWORD *)(v14 + 3) = v38;
    v14[5] = v39;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    std::string v41 = (void **)&v38;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v41);
    uint64_t v12 = v40;
  }
  uint64_t v16 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((float *)a1, v12, &v40);
  unint64_t v17 = v16[5];
  uint64_t v18 = (void *)v16[4];
  if ((unint64_t)v18 >= v17)
  {
    uint64_t v21 = v16[3];
    uint64_t v22 = ((uint64_t)v18 - v21) >> 4;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = v17 - v21;
    unint64_t v25 = (uint64_t)(v17 - v21) >> 3;
    if (v25 > v23) {
      unint64_t v23 = v25;
    }
    if (v24 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v23;
    }
    uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(v16 + 5), v26);
    uint64_t v29 = &v27[16 * v22];
    long long v30 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v29 = *(_OWORD *)a2;
    if (*((void *)&v30 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = &v27[16 * v28];
    uint64_t v20 = v29 + 16;
    uint64_t v32 = (void *)v16[3];
    std::string v33 = (void *)v16[4];
    if (v33 == v32)
    {
      v16[3] = v29;
      v16[4] = v20;
      void v16[5] = v31;
    }
    else
    {
      do
      {
        long long v34 = *((_OWORD *)v33 - 1);
        v33 -= 2;
        *((_OWORD *)v29 - 1) = v34;
        v29 -= 16;
        *std::string v33 = 0;
        v33[1] = 0;
      }
      while (v33 != v32);
      std::string v33 = (void *)v16[3];
      id v35 = (void *)v16[4];
      v16[3] = v29;
      v16[4] = v20;
      void v16[5] = v31;
      while (v35 != v33)
      {
        unint64_t v36 = (std::__shared_weak_count *)*(v35 - 1);
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        v35 -= 2;
      }
    }
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    *uint64_t v18 = *a2;
    uint64_t v19 = a2[1];
    v18[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = v18 + 2;
  }
  v16[4] = v20;
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_23F533DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a14);
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    int8x8_t v6 = result;
    std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::InputDescriptor const>>,std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F533E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::InputDescriptor const>>,std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::InputDescriptor const>>,std::shared_ptr<realityio::InputDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::InputDescriptor const>>,std::shared_ptr<realityio::InputDescriptor const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>,std::shared_ptr<realityio::DirtyStageDescriptor const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * (a2 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == (a2 & 0xFFFFFFFFFFFFFFF8)) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x30uLL);
  uint64_t i = v12;
  *uint64_t v12 = 0;
  v12[1] = v6;
  uint64_t v13 = *a3;
  v12[2] = *a3;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v12[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  void v12[3] = 0;
  v12[4] = 0;
  void v12[5] = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = *((void *)a1 + 1);
    if (*(void *)&prime > v7) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          unint64_t v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            uint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_58;
                  }
                  *unint64_t v23 = *v29;
                  *uint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  uint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_58:
                unint64_t v23 = v29;
                uint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_62;
        }
        id v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_62:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v31 = *(void **)a1;
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    *uint64_t i = *v32;
LABEL_75:
    *uint64_t v32 = i;
    goto LABEL_76;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_75;
  }
LABEL_76:
  ++*((void *)a1 + 3);
  return i;
}

void sub_23F5343B0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  if (a1)
  {
    uint64_t v4 = (void **)(__p + 24);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v3 = *((void *)__p + 2);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  operator delete(__p);
}

uint64_t realityio::Builder::addAsset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a3) {
    REAssetSetMetadataString();
  }
  uint64_t result = *a2;
  if (*a2)
  {
    unint64_t v6 = (uint64_t *)a1[9];
    if ((unint64_t)v6 >= a1[10])
    {
      uint64_t result = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>(a1 + 8, a2);
    }
    else
    {
      uint64_t *v6 = result;
      RERetain();
      uint64_t result = (uint64_t)(v6 + 1);
      a1[9] = (uint64_t)(v6 + 1);
    }
    a1[9] = result;
  }
  return result;
}

void sub_23F5344A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<realityio::AssetLoadTracker::Asset>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    float v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)float v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<realityio::AssetLoadTracker::Asset>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F5345B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

char **realityio::Builder::addedAssets(realityio::Builder *this)
{
  uint64_t v2 = (char *)*((void *)this + 14);
  uint64_t v1 = (char **)((char *)this + 112);
  uint64_t v4 = (uint64_t *)*((void *)this + 8);
  uint64_t v3 = (uint64_t *)*((void *)this + 9);
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = *((void *)this + 12);
  if (((v6 - v5) >> 4) + v3 - v4 != (uint64_t)(*((void *)this + 15) - (void)v2) >> 3)
  {
    *((void *)this + 15) = v2;
    if (v4 != v3)
    {
      uint64_t v8 = (void *)((char *)this + 128);
      do
      {
        uint64_t v9 = *v4;
        if ((unint64_t)v2 >= *v8)
        {
          uint64_t v10 = (v2 - *v1) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
LABEL_42:
          }
            std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
          uint64_t v11 = *v8 - (void)*v1;
          uint64_t v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
            uint64_t v12 = v10 + 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)this + 128, v13);
          }
          else {
            float v14 = 0;
          }
          float v15 = &v14[8 * v10];
          *(void *)float v15 = v9;
          uint64_t v2 = v15 + 8;
          long long v17 = (char *)*((void *)this + 14);
          uint64_t v16 = (char *)*((void *)this + 15);
          if (v16 != v17)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            uint64_t v16 = *v1;
          }
          *((void *)this + 14) = v15;
          *((void *)this + 15) = v2;
          *((void *)this + 16) = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(void *)uint64_t v2 = v9;
          v2 += 8;
        }
        *((void *)this + 15) = v2;
        ++v4;
      }
      while (v4 != v3);
      uint64_t v5 = *((void *)this + 11);
      uint64_t v6 = *((void *)this + 12);
    }
    if (v5 != v6)
    {
      uint64_t v19 = (void *)((char *)this + 128);
      do
      {
        uint64_t v20 = *(void *)(*(void *)v5 + 8);
        if ((unint64_t)v2 >= *v19)
        {
          uint64_t v21 = (v2 - *v1) >> 3;
          if ((unint64_t)(v21 + 1) >> 61) {
            goto LABEL_42;
          }
          uint64_t v22 = *v19 - (void)*v1;
          uint64_t v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
            uint64_t v23 = v21 + 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            uint8x8_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)this + 128, v24);
          }
          else {
            uint8x8_t v25 = 0;
          }
          unint64_t v26 = &v25[8 * v21];
          *(void *)unint64_t v26 = v20;
          uint64_t v2 = v26 + 8;
          uint64_t v28 = (char *)*((void *)this + 14);
          uint8x8_t v27 = (char *)*((void *)this + 15);
          if (v27 != v28)
          {
            do
            {
              uint64_t v29 = *((void *)v27 - 1);
              v27 -= 8;
              *((void *)v26 - 1) = v29;
              v26 -= 8;
            }
            while (v27 != v28);
            uint8x8_t v27 = *v1;
          }
          *((void *)this + 14) = v26;
          *((void *)this + 15) = v2;
          *((void *)this + 16) = &v25[8 * v24];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)uint64_t v2 = v20;
          v2 += 8;
        }
        *((void *)this + 15) = v2;
        v5 += 16;
      }
      while (v5 != v6);
    }
  }
  return v1;
}

uint64_t realityio::Builder::isResync(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 16);
  uint64_t v3 = (void *)(a2 + 24);
  if (v2 == (void *)(a2 + 24)) {
    return 0;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8);
  while (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 6))|| !*((unsigned char *)v2 + 56))
  {
    uint64_t v5 = (void *)v2[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)v2[2];
        BOOL v7 = *v6 == (void)v2;
        uint64_t v2 = v6;
      }
      while (!v7);
    }
    uint64_t v2 = v6;
    if (v6 == v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  long long v17 = &v10[8 * v9];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v12)
  {
    RERetain();
    uint64_t v11 = v16;
  }
  uint64_t v16 = v11 + 8;
  std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_23F53493C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(a3 + v11 - 8);
      *(void *)(a7 - 8 + v11) = v12;
      if (v12) {
        RERetain();
      }
      v11 -= 8;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_23F534A5C(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 8)
    realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<realityio::AssetLoadTracker::Asset>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<realityio::AssetLoadTracker::Asset>>,std::reverse_iterator<std::shared_ptr<realityio::AssetLoadTracker::Asset>*>,std::reverse_iterator<std::shared_ptr<realityio::AssetLoadTracker::Asset>*>,std::reverse_iterator<std::shared_ptr<realityio::AssetLoadTracker::Asset>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<realityio::AssetLoadTracker::Asset>>,std::reverse_iterator<std::shared_ptr<realityio::AssetLoadTracker::Asset>*>,std::reverse_iterator<std::shared_ptr<realityio::AssetLoadTracker::Asset>*>,std::reverse_iterator<std::shared_ptr<realityio::AssetLoadTracker::Asset>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::AssetLoadTracker::Asset>>,std::reverse_iterator<std::shared_ptr<realityio::AssetLoadTracker::Asset>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::AssetLoadTracker::Asset>>,std::reverse_iterator<std::shared_ptr<realityio::AssetLoadTracker::Asset>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *realityio::MapFromGroupsAction::operator()@<X0>(uint64_t a1@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  if (*(void *)(a1 + 8) - *(void *)a1 == 16) {
    return pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, *(const pxrInternal__aapl__pxrReserved__::VtValue **)a1);
  }
  *((void *)a2 + 1) = 0;
  return result;
}

uint64_t RIOBuilderPrimDeltaGetTypeID()
{
  if (RIOBuilderPrimDeltaGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderPrimDeltaGetTypeID::onceToken, &__block_literal_global);
  }
  return RIOBuilderPrimDeltaGetTypeID::typeID;
}

void __RIOBuilderPrimDeltaGetTypeID_block_invoke()
{
  if (!RIOBuilderPrimDeltaGetTypeID::typeID) {
    RIOBuilderPrimDeltaGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

__CFArray *RIOBuilderPrimDeltaCopyPropertyDeltas(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = *(uint64_t **)(a1 + 56);
  for (uint64_t i = *(uint64_t **)(a1 + 64); v3 != i; v3 += 6)
  {
    if (RIOBuilderPropertyDeltaGetTypeID::onceToken != -1) {
      dispatch_once(&RIOBuilderPropertyDeltaGetTypeID::onceToken, &__block_literal_global_13);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v6 = (const void *)Instance;
    if (Instance)
    {
      uint64_t v7 = *v3;
      *(void *)(Instance + 16) = *v3;
      if ((v7 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)(Instance + 16) &= 0xFFFFFFFFFFFFFFF8;
      }
      std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(Instance + 24, (uint64_t)(v3 + 1));
    }
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
  }
  return Mutable;
}

__CFArray *RIOBuilderPrimDeltaCopyDirtyMetadata(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  for (uint64_t i = *(void **)(a1 + 32); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i + 2);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t *a1)
{
  if (RIOPxrTfTokenGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrTfTokenGetTypeID::onceToken, &__block_literal_global_25);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = *a1;
    *(void *)(result + 16) = *a1;
    if ((v3 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  return result;
}

uint64_t _RIOBuilderPrimDeltaCFFinalize(char *a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v1);
}

BOOL _RIOBuilderPrimDeltaCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOBuilderPrimDeltaCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOBuilderPrimDeltaCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderPrimDelta %p>", a1);
}

CFStringRef _RIOBuilderPrimDeltaCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderPrimDelta %p>", a1);
}

void std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<realityio::PropertyDelta>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<realityio::PropertyDelta>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 48)
  {
    uint64_t result = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(i - 40);
    uint64_t v6 = *(void *)(i - 48);
    uint64_t v5 = v6;
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(v3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = a2;
  return result;
}

uint64_t std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_23F5350CC(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    long long v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::TfToken const&>(a1, v6, a3, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    void *v20 = *v18;
    *uint64_t v18 = v20;
  }
  else
  {
    void *v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_23F535318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::TfToken const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x18uLL);
  *(void *)a4 = result;
  *(void *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v7;
  *uint64_t result = 0;
  result[1] = a2;
  uint64_t v9 = *a3;
  result[2] = *a3;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = a2;
  if (v3)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v4 = v3[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    operator delete(v3);
  }
}

void RIO_MTLX::FilePath::assign(uint64_t a1, std::string *a2)
{
  *(_DWORD *)(a1 + 24) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "/\\"");
  RIO_MTLX::splitString(a2, (unsigned __int8 **)__p, (uint64_t)&v12);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a1);
  *(_OWORD *)a1 = v12;
  *(void *)(a1 + 16) = v13;
  uint64_t v13 = 0;
  long long v12 = 0uLL;
  BOOL v14 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t size = a2->__r_.__value_.__l.__size_;
    if (!size) {
      return;
    }
    int v5 = *(unsigned __int8 *)a2->__r_.__value_.__l.__data_;
    if (v5 == 47) {
      goto LABEL_19;
    }
    if (size <= 1) {
      return;
    }
  }
  else
  {
    if (!*((unsigned char *)&a2->__r_.__value_.__s + 23)) {
      return;
    }
    int v5 = a2->__r_.__value_.__s.__data_[0];
    if (v5 == 47) {
      goto LABEL_19;
    }
    if (v4 < 2) {
      return;
    }
  }
  if ((v5 & 0x80) != 0)
  {
    int v7 = __maskrune((char)v5, 0x100uLL);
    LOBYTE(v4) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
    if (!v7) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * (char)v5 + 60) & 0x100) != 0)
  {
LABEL_15:
    if ((v4 & 0x80u) == 0) {
      uint8x8_t v8 = a2;
    }
    else {
      uint8x8_t v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if (v8->__r_.__value_.__s.__data_[1] != 58) {
      goto LABEL_22;
    }
LABEL_19:
    int v9 = 1;
LABEL_20:
    *(_DWORD *)(a1 + 24) = v9;
    return;
  }
LABEL_22:
  if ((v4 & 0x80) != 0) {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (a2->__r_.__value_.__s.__data_[0] == 92 && a2->__r_.__value_.__s.__data_[1] == 92)
  {
    int v9 = 2;
    goto LABEL_20;
  }
}

void sub_23F535540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::FilePath::asString(char **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2 == 1)
  {
    if (!*((_DWORD *)a1 + 6)) {
      goto LABEL_22;
    }
    unint64_t v6 = (char **)*a1;
    if (*a1 == a1[1]) {
      goto LABEL_20;
    }
    if (*((char *)v6 + 23) < 0)
    {
      if ((unint64_t)v6[1] <= 1)
      {
LABEL_20:
        uint8x8_t v8 = "/";
        goto LABEL_21;
      }
      int v7 = *v6;
    }
    else
    {
      int v7 = *a1;
      if (*((unsigned __int8 *)v6 + 23) <= 1u) {
        goto LABEL_20;
      }
    }
    unsigned int v9 = *v7;
    if ((v9 & 0x80000000) != 0) {
      int v10 = __maskrune(v9, 0x100uLL);
    }
    else {
      int v10 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v9 + 60) & 0x100;
    }
    if (!v10) {
      goto LABEL_20;
    }
    char v11 = *((char *)v6 + 23) >= 0 ? v6 : (char **)*v6;
    if (*((unsigned char *)v11 + 1) != 58) {
      goto LABEL_20;
    }
  }
  else if (!a2 && *((_DWORD *)a1 + 6) == 2)
  {
    uint8x8_t v8 = "\\\\"";
LABEL_21:
    std::string::append(a3, v8);
  }
LABEL_22:
  uint64_t v12 = (uint64_t)*a1;
  if (a1[1] != *a1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if (a2 == 1) {
      std::string::value_type v15 = 47;
    }
    else {
      std::string::value_type v15 = 92;
    }
    do
    {
      uint64_t v16 = v12 + v13;
      int v17 = *(char *)(v16 + 23);
      if (v17 >= 0) {
        uint64_t v18 = (const std::string::value_type *)v16;
      }
      else {
        uint64_t v18 = *(const std::string::value_type **)v16;
      }
      if (v17 >= 0) {
        std::string::size_type v19 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        std::string::size_type v19 = *(void *)(v16 + 8);
      }
      std::string::append(a3, v18, v19);
      ++v14;
      uint64_t v12 = (uint64_t)*a1;
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      if (v14 < v20)
      {
        std::string::push_back(a3, v15);
        uint64_t v12 = (uint64_t)*a1;
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      }
      v13 += 24;
    }
    while (v14 < v20);
  }
}

void sub_23F5356EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::FilePath::operator/(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, *(long long **)a1, *(long long **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 24);
  unint64_t v6 = *a2;
  int v7 = a2[1];
  if (*a2 != v7)
  {
    unint64_t v8 = *(void *)(a3 + 8);
    do
    {
      if (v8 >= *(void *)(a3 + 16))
      {
        unint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v6);
        v8 += 24;
      }
      *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v8;
      unint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
}

void sub_23F5357C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::FilePath::exists(char **this)
{
  RIO_MTLX::FilePath::asString(this, 1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v2 = stat((const char *)p_p, &v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v2 == 0;
}

void sub_23F535844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::FilePath::getParentPath(long long **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a2, *this, this[1], 0xAAAAAAAAAAAAAAABLL * (((char *)this[1] - (char *)*this) >> 3));
  *(_DWORD *)(a2 + 24) = *((_DWORD *)this + 6);
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)a2 != v4)
  {
    stat v5 = (void **)(v4 - 24);
    if (*(char *)(v4 - 1) < 0) {
      operator delete(*v5);
    }
    *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  }
}

void RIO_MTLX::getEnvironmentPath(unsigned __int8 **a1@<X0>, RIO_MTLX::FileSearchPath *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "MATERIALX_SEARCH_PATH");
  RIO_MTLX::getEnviron((const char *)__p, &__str);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  RIO_MTLX::FileSearchPath::FileSearchPath(a2, &__str, a1);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_23F535950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_23F5359E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *RIO_MTLX::FilePath::FilePath(void *a1, std::string *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  RIO_MTLX::FilePath::assign((uint64_t)a1, a2);
  return a1;
}

void sub_23F535A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

RIO_MTLX::FileSearchPath *RIO_MTLX::FileSearchPath::FileSearchPath(RIO_MTLX::FileSearchPath *a1, std::string *__str, unsigned __int8 **a3)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  RIO_MTLX::splitString(__str, a3, (uint64_t)&v8);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  if (v8 != v9)
  {
    while (*(char *)(v4 + 23) < 0)
    {
      if (*(void *)(v4 + 8)) {
        goto LABEL_6;
      }
LABEL_7:
      v4 += 24;
      if (v4 == v5) {
        goto LABEL_8;
      }
    }
    if (!*(unsigned char *)(v4 + 23)) {
      goto LABEL_7;
    }
LABEL_6:
    RIO_MTLX::FilePath::FilePath(v7, (std::string *)v4);
    RIO_MTLX::FileSearchPath::append(a1, (const RIO_MTLX::FilePath *)v7);
    uint64_t v10 = v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    goto LABEL_7;
  }
LABEL_8:
  v7[0] = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v7);
  return a1;
}

void sub_23F535B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t RIO_MTLX::FileSearchPath::append(RIO_MTLX::FileSearchPath *this, const RIO_MTLX::FilePath *a2)
{
  unint64_t v3 = *((void *)this + 1);
  if (v3 >= *((void *)this + 2))
  {
    uint64_t result = std::vector<RIO_MTLX::FilePath>::__push_back_slow_path<RIO_MTLX::FilePath const&>((uint64_t *)this, (uint64_t)a2);
  }
  else
  {
    std::vector<RIO_MTLX::FilePath>::__construct_one_at_end[abi:ne180100]<RIO_MTLX::FilePath const&>((uint64_t)this, (uint64_t)a2);
    uint64_t result = v3 + 32;
  }
  *((void *)this + 1) = result;
  return result;
}

std::string *std::vector<RIO_MTLX::FilePath>::__construct_one_at_end[abi:ne180100]<RIO_MTLX::FilePath const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  *(void *)(v4 + 16) = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v4, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v4 + 32;
  return result;
}

void sub_23F535C04(_Unwind_Exception *a1)
{
  *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<RIO_MTLX::FilePath>::__push_back_slow_path<RIO_MTLX::FilePath const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v11 = (std::string *)&v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  std::string::value_type v15 = v11;
  uint64_t v16 = &v10[32 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  LODWORD(v11[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  std::string::value_type v15 = (std::string *)((char *)v15 + 32);
  std::vector<RIO_MTLX::FilePath>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<RIO_MTLX::FilePath>::~__split_buffer(v14);
  return v12;
}

void sub_23F535D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<RIO_MTLX::FilePath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<RIO_MTLX::FilePath>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      char v11 = *(long long **)(v10 - 32);
      uint64_t v12 = *(long long **)(v10 - 24);
      v10 -= 32;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v7 - 32), v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
      *(_DWORD *)(v7 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_DWORD *)(v9 - 8);
      uint64_t v7 = *((void *)&v18 + 1) - 32;
      *((void *)&v18 + 1) -= 32;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_23F535E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<RIO_MTLX::FilePath>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<RIO_MTLX::FilePath>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 4;
    uint64_t v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::vector<RIO_MTLX::FilePath>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
      *(void *)(v8 + 16) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v8, *(long long **)v10, *(long long **)(v10 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3));
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(v10 + 24);
      v8 += 32;
      v10 += 32;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>((uint64_t)&v12, a2, v7, v6);
}

void sub_23F536140(_Unwind_Exception *a1)
{
  *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<RIO_MTLX::FilePath>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23F5362B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      if (v7 != a4) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a4 - 32), *(std::string **)(v7 - 32), *(long long **)(v7 - 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 - 24) - *(void *)(v7 - 32)) >> 3));
      }
      *(_DWORD *)(a4 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_DWORD *)(v7 - 8);
      v7 -= 32;
      a4 -= 32;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>(int a1, uint64_t a2, uint64_t a3, std::vector<std::string> *this)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((std::vector<std::string> *)v5 != this) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)v5, *(long long **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3));
      }
      LODWORD(this[1].__begin_) = *(_DWORD *)(v5 + 24);
      v5 += 32;
      this = (std::vector<std::string> *)((char *)this + 32);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23F536490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<std::string>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = (char *)operator new(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    char v12 = &v11[v7];
    uint64_t v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      uint64_t v11 = v12;
    }
    else
    {
      unint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      std::vector<std::string>::pointer end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t RIOPxrUsdUtilsCreateNewARKitUsdzPackage(uint64_t a1, char *a2, char *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  uint64_t NewARKitUsdzPackage = pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage();
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  return NewARKitUsdzPackage;
}

void sub_23F53665C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdUtilsCreateNewUsdzPackage(char *a1, char *a2, char *a3)
{
  TmpDir = (char *)pxrInternal__aapl__pxrReserved__::ArchGetTmpDir((pxrInternal__aapl__pxrReserved__ *)a1);
  std::string::basic_string[abi:ne180100]<0>(v19, TmpDir);
  std::string::basic_string[abi:ne180100]<0>(__p, "usdzConversion");
  pxrInternal__aapl__pxrReserved__::ArchMakeTmpSubdir();
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  unint64_t v7 = v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v17[1];
  }
  if (v7)
  {
    unint64_t v8 = a1 + 16;
    if (a1[39] < 0) {
      unint64_t v8 = *(char **)v8;
    }
    RelativeToLayer = (void *)RIOPxrSdfLayerCreateOrFindRelativeToLayer(0, v8);
    uint64_t v10 = (uint64_t)RelativeToLayer;
    __p[0] = RelativeToLayer;
    if (RelativeToLayer) {
      CFRetain(RelativeToLayer);
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v11 = v17;
    }
    else {
      uint64_t v11 = (void **)v17[0];
    }
    v19[0] = (void *)MEMORY[0x263EF8330];
    v19[1] = (void *)3321888768;
    unint64_t v20 = ___ZZ34RIOPxrUsdUtilsCreateNewUsdzPackageENK3__0cvU13block_pointerFPK10__CFStringPKcPK14__CFDictionaryPS5_EEv_block_invoke;
    uint64_t v21 = &__block_descriptor_33_ea8_32c47_ZTSKZ34RIOPxrUsdUtilsCreateNewUsdzPackageE3__0_e62_____CFString__32__0r_8____CFDictionary__16____CFDictionary__24l;
    char v12 = (void *)MEMORY[0x2455D3180](v19);
    RIOPxrUsdUtilsConvertNonUsdzImages(v10, (uint64_t)v11, v12);

    realityio::WrappedCFRef<RIOPxrSdfLayer *>::~WrappedCFRef((const void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  uint64_t NewUsdzPackage = pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage();
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  return NewUsdzPackage;
}

void sub_23F536848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  realityio::WrappedCFRef<RIOPxrSdfLayer *>::~WrappedCFRef((const void **)&a10);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void RIOPxrUsdUtilsConvertNonUsdzImages(uint64_t a1, uint64_t a2, void *a3)
{
  v18[4] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  v15[1] = 0;
  char v16 = a3;
  unint64_t v14 = v15;
  v15[0] = 0;
  uint64_t Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v16);
  uint64_t v5 = (uint64_t *)(a1 + 16);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
  uint64_t ResolvedPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(v6);
  if (*(char *)(ResolvedPath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)ResolvedPath, *(void *)(ResolvedPath + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)ResolvedPath;
    v13.__r_.__value_.__r.__words[2] = *(void *)(ResolvedPath + 16);
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
  char v9 = operator new(0x30uLL);
  *char v9 = &unk_26F333138;
  v9[1] = &v17;
  v9[2] = &v16;
  void v9[3] = &v14;
  void v9[4] = Resolver;
  void v9[5] = &v13;
  v18[3] = v9;
  pxrInternal__aapl__pxrReserved__::UsdUtilsModifyAssetPaths();
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](v18);
  uint64_t v10 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_23F536A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *a19, uint64_t a20,void *a21)
{
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v21 - 56));
  if (a10 && atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a18, a19);

  _Unwind_Resume(a1);
}

CFStringRef ___ZZ34RIOPxrUsdUtilsCreateNewUsdzPackageENK3__0cvU13block_pointerFPK10__CFStringPKcPK14__CFDictionaryPS5_EEv_block_invoke(uint64_t a1, char *a2)
{
  uint64_t v3 = NSURL;
  uint64_t v4 = [NSString stringWithUTF8String:a2];
  uint64_t v5 = [v3 fileURLWithPath:v4];
  CFURLRef v6 = [v5 URLByResolvingSymlinksInPath];

  CGImageSourceRef v7 = CGImageSourceCreateWithURL(v6, 0);
  if (v7)
  {
    CFRelease(v7);

    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix();
    long long v8 = std::string::append(&v16, ".png");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v18 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v17 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v18 >= 0) {
      uint64_t v10 = v17;
    }
    else {
      uint64_t v10 = (void **)v17[0];
    }
    CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)v10, 0x8000100u);
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    return v11;
  }
  else
  {

    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    return CFStringCreateWithCString(v13, a2, 0x8000100u);
  }
}

void sub_23F536C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **realityio::WrappedCFRef<RIOPxrSdfLayer *>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F333138;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F333138;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  v85[2] = *(const void **)MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindAllFileFormatExtensions((uint64_t *)&v83, (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)a1);
  pxrInternal__aapl__pxrReserved__::TfGetExtension();
  uint64_t v6 = std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v83, (const void **)&v78);
  if ((char)v80 < 0) {
    operator delete(v78);
  }
  std::__tree<std::string>::destroy((uint64_t)&v83, (char *)v83.__r_.__value_.__l.__size_);
  if (v6) {
    goto LABEL_12;
  }
  pxrInternal__aapl__pxrReserved__::TfGetExtension();
  pxrInternal__aapl__pxrReserved__::TfStringToLower();
  uint64_t v7 = std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>((uint64_t)&realityio::isUsdzCompliantImageFileExtension(std::string const&)::allowedExtensions, (uint64_t)&__block_descriptor_40_e5_v8__0l, (const void **)&v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if ((char)v80 < 0) {
    operator delete(v78);
  }
  if (v7 - (void)&realityio::isUsdzCompliantImageFileExtension(std::string const&)::allowedExtensions != 64)
  {
LABEL_12:
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    uint64_t v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(*(void *)(a1 + 24), (const void **)a2);
    if (*(void *)(a1 + 24) + 8 == v8)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFMutableDictionaryRef v73 = Mutable;
      if (Mutable) {
        CFRetain(Mutable);
      }
      CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFMutableDictionaryRef v72 = v11;
      if (v11) {
        CFRetain(v11);
      }
      pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier();
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v71;
      }
      else {
        uint64_t v12 = (std::string *)v71.__r_.__value_.__r.__words[0];
      }
      CFAllocatorRef v13 = (realityio *)(*(uint64_t (**)(void, std::string *, CFMutableDictionaryRef, CFMutableDictionaryRef))(**(void **)(a1 + 16) + 16))(**(void **)(a1 + 16), v12, v73, v72);
      unint64_t v70 = v13;
      if (v13)
      {
        CFRetain(v13);
        CFAllocatorRef v13 = v70;
      }
      realityio::stringFromCFString(v13, v14, (uint64_t)&v83);
      if (v84) {
        std::string v69 = v83;
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&v69, "");
      }
      std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v69.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v83, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
        }
        else {
          std::string v83 = v71;
        }
        pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if (v67)
        {
          std::string::basic_string[abi:ne180100]<0>(inTag, **(char ***)(a1 + 8));
          pxrInternal__aapl__pxrReserved__::ArchNormPath();
          pxrInternal__aapl__pxrReserved__::TfGetBaseName();
          if ((char)v80 < 0) {
            operator delete(v78);
          }
          pxrInternal__aapl__pxrReserved__::ArchNormPath();
          if ((v80 & 0x80u) == 0) {
            size_t v16 = v80;
          }
          else {
            size_t v16 = v79;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v77, v16 + 1);
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v17 = &v77;
          }
          else {
            uint64_t v17 = (std::string *)v77.__r_.__value_.__r.__words[0];
          }
          if (v16)
          {
            if ((v80 & 0x80u) == 0) {
              int64_t v18 = &v78;
            }
            else {
              int64_t v18 = (void **)v78;
            }
            memmove(v17, v18, v16);
          }
          *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 47;
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v19 = &v83;
          }
          else {
            std::string::size_type v19 = (std::string *)v83.__r_.__value_.__r.__words[0];
          }
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v20 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v20 = v83.__r_.__value_.__l.__size_;
          }
          uint64_t v21 = std::string::append(&v77, (const std::string::value_type *)v19, v20);
          uint64_t v63 = a1;
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          int v23 = 0;
          while (pxrInternal__aapl__pxrReserved__::TfPathExists())
          {
            if ((v80 & 0x80u) == 0) {
              size_t v24 = v80;
            }
            else {
              size_t v24 = v79;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v75, v24 + 1);
            if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint8x8_t v25 = &v75;
            }
            else {
              uint8x8_t v25 = (std::string *)v75.__r_.__value_.__r.__words[0];
            }
            if (v24)
            {
              if ((v80 & 0x80u) == 0) {
                unint64_t v26 = &v78;
              }
              else {
                unint64_t v26 = (void **)v78;
              }
              memmove(v25, v26, v24);
            }
            *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 47;
            std::to_string(&v74, v23);
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint8x8_t v27 = &v74;
            }
            else {
              uint8x8_t v27 = (std::string *)v74.__r_.__value_.__r.__words[0];
            }
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v28 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v28 = v74.__r_.__value_.__l.__size_;
            }
            uint64_t v29 = std::string::append(&v75, (const std::string::value_type *)v27, v28);
            long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v76.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            uint64_t v31 = std::string::append(&v76, "_");
            long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
            v77.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v32;
            v31->__r_.__value_.__l.__size_ = 0;
            v31->__r_.__value_.__r.__words[2] = 0;
            v31->__r_.__value_.__r.__words[0] = 0;
            if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v33 = &v83;
            }
            else {
              unint64_t v33 = (std::string *)v83.__r_.__value_.__r.__words[0];
            }
            if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v34 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v34 = v83.__r_.__value_.__l.__size_;
            }
            id v35 = std::string::append(&v77, (const std::string::value_type *)v33, v34);
            std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
            v85[0] = (const void *)v35->__r_.__value_.__l.__size_;
            *(const void **)((char *)v85 + 7) = *(const void **)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
            char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
            v35->__r_.__value_.__l.__size_ = 0;
            v35->__r_.__value_.__r.__words[2] = 0;
            v35->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            __p.__r_.__value_.__r.__words[0] = v36;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v85[0];
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v85 + 7);
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v37;
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v77.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v76.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            ++v23;
          }
          if ((char)v80 < 0) {
            operator delete(v78);
          }
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
          if (v65 < 0) {
            operator delete((void *)inTag[0]);
          }
          uint64_t v39 = v67;
          long long v38 = v68;
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::basic_string[abi:ne180100]<0>(&v78, (char *)p_p);
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v39 + 24))(&v77, v39);
          std::string v41 = (const UInt8 *)v77.__r_.__value_.__r.__words[0];
          CFIndex v42 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 16))(v39);
          CFDataRef v43 = CFDataCreateWithBytesNoCopy(0, v41, v42, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
          v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
          if (v43)
          {
            CFRetain(v43);
            CFDataRef v43 = (CFDataRef)v76.__r_.__value_.__r.__words[0];
          }
          CGImageSourceRef v44 = CGImageSourceCreateWithData(v43, 0);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
          if (v44)
          {
            CFRetain(v44);
            CGImageSourceRef v44 = (CGImageSourceRef)v75.__r_.__value_.__r.__words[0];
          }
          CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v44, 0, 0);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)ImageAtIndex;
          if (ImageAtIndex && (CFRetain(ImageAtIndex), v74.__r_.__value_.__r.__words[0]))
          {
            pxrInternal__aapl__pxrReserved__::TfGetExtension();
            CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v47 = &v83;
            }
            else {
              std::string::size_type v47 = (std::string *)v83.__r_.__value_.__r.__words[0];
            }
            CFStringRef v48 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)v47, 0x8000100u);
            inTag[0] = v48;
            if (v48) {
              CFRetain(v48);
            }
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v83.__r_.__value_.__l.__data_);
            }
            CFArrayRef AllIdentifiersForTag = UTTypeCreateAllIdentifiersForTag((CFStringRef)*MEMORY[0x263F01910], inTag[0], 0);
            v83.__r_.__value_.__r.__words[0] = (std::string::size_type)AllIdentifiersForTag;
            if (AllIdentifiersForTag
              && (CFRetain(AllIdentifiersForTag), v83.__r_.__value_.__r.__words[0])
              && CFArrayGetCount((CFArrayRef)v83.__r_.__value_.__l.__data_) >= 1)
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v83.__r_.__value_.__l.__data_, 0);
              if ((v80 & 0x80u) == 0) {
                long long v51 = (const char *)&v78;
              }
              else {
                long long v51 = (const char *)v78;
              }
              CFStringRef v52 = CFStringCreateWithCString(v46, v51, 0x8000100u);
              CFStringRef v53 = v52;
              v85[0] = v52;
              if (v52) {
                CFRetain(v52);
              }
              CFURLRef v54 = CFURLCreateWithFileSystemPath(v46, v53, kCFURLPOSIXPathStyle, 0);
              CFURLRef v55 = v54;
              CFURLRef v82 = v54;
              if (v54) {
                CFRetain(v54);
              }
              CGImageDestinationRef v56 = CGImageDestinationCreateWithURL(v55, ValueAtIndex, 1uLL, 0);
              uint64_t v81 = v56;
              if (v56)
              {
                CFRetain(v56);
                if (v81)
                {
                  CGImageDestinationAddImage(v81, (CGImageRef)v74.__r_.__value_.__l.__data_, 0);
                  CGImageDestinationFinalize(v81);
                }
              }
              realityio::WrappedCFRef<CGImageDestination *>::~WrappedCFRef((const void **)&v81);
              realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)&v82);
              realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v85);
              char v57 = 1;
            }
            else
            {
              char v57 = 0;
            }
            realityio::WrappedCFRef<__CFArray const*>::~WrappedCFRef((const void **)&v83.__r_.__value_.__l.__data_);
            realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)inTag);
          }
          else
          {
            char v57 = 0;
          }
          realityio::WrappedCFRef<CGImage *>::~WrappedCFRef((const void **)&v74.__r_.__value_.__l.__data_);
          realityio::WrappedCFRef<CGImageSource *>::~WrappedCFRef((const void **)&v75.__r_.__value_.__l.__data_);
          realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v76.__r_.__value_.__l.__data_);
          uint64_t v58 = (realityio *)v77.__r_.__value_.__l.__size_;
          if (v77.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
          }
          if ((char)v80 < 0) {
            operator delete(v78);
          }
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
          if (v57)
          {
            uint64_t v59 = *(uint64_t ***)(v63 + 24);
            v83.__r_.__value_.__r.__words[0] = a2;
            uint64_t v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v83);
            std::string::operator=((std::string *)(v60 + 7), &__p);
            *a3 = __p;
            memset(&__p, 0, sizeof(__p));
          }
          else
          {
            uint64_t v61 = *(id *)realityio::logObjects(v58);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v62 = (const std::string::value_type *)a2;
              }
              else {
                uint64_t v62 = *(const std::string::value_type **)a2;
              }
              LODWORD(v83.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
              _os_log_error_impl(&dword_23F4EA000, v61, OS_LOG_TYPE_ERROR, "Unable to convert %s to a valid USDZ-texture-file.", (uint8_t *)&v83, 0xCu);
            }

            if (*(char *)(a2 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else
            {
              *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
              a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
        }
        if (v68) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *a3 = v69;
      }
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v70);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      realityio::WrappedCFRef<__CFDictionary *>::~WrappedCFRef((const void **)&v72);
      realityio::WrappedCFRef<__CFDictionary const*>::~WrappedCFRef((const void **)&v73);
    }
    else if (*(char *)(v8 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v8 + 56), *(void *)(v8 + 64));
    }
    else
    {
      long long v9 = *(_OWORD *)(v8 + 56);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v8 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
    }
  }
}

void sub_23F5377F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,const void *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,const void *a39,const void *a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  realityio::WrappedCFRef<CGImageDestination *>::~WrappedCFRef((const void **)(v59 - 176));
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)(v59 - 168));
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v59 - 120));
  realityio::WrappedCFRef<__CFArray const*>::~WrappedCFRef((const void **)(v59 - 160));
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&a10);
  realityio::WrappedCFRef<CGImage *>::~WrappedCFRef((const void **)&a41);
  realityio::WrappedCFRef<CGImageSource *>::~WrappedCFRef((const void **)&a47);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&a53);
  uint64_t v61 = *(std::__shared_weak_count **)(v59 - 216);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (*(char *)(v59 - 177) < 0) {
    operator delete(*(void **)(v59 - 200));
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a32);
  if (a38 < 0) {
    operator delete(a33);
  }
  realityio::WrappedCFRef<__CFDictionary *>::~WrappedCFRef(&a39);
  realityio::WrappedCFRef<__CFDictionary const*>::~WrappedCFRef(&a40);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::target_type()
{
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      size_t v6 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v6 = (size_t)a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    while (*(void *)(v3 + 8) != v6 || memcmp(*(const void **)v3, v7, v6))
    {
      v3 += 16;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

const void **realityio::WrappedCFRef<CGImageDestination *>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFArray const*>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<CGImage *>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<CGImageSource *>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  size_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_23F537E80(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

const void **realityio::WrappedCFRef<__CFDictionary *>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFDictionary const*>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType::~MaterialAssetBuilderTokens_StaticTokenType(realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType *this)
{
  unint64_t v33 = (void **)((char *)this + 256);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v33);
  uint64_t v2 = *((void *)this + 31);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 30);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 29);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 27);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 26);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 25);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 24);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 23);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 22);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 21);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 20);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 19);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 18);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 17);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 16);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 15);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 14);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 13);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 12);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 11);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 10);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 9);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 7);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 6);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 5);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 4);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 3);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 2);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 1);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t realityio::MaterialAssetBuilder::kMaterialDataName(realityio::MaterialAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::MaterialAssetBuilder::kMaterialDataName(void)::kOutputName;
}

void sub_23F53831C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::MaterialAssetBuilder *realityio::MaterialAssetBuilder::MaterialAssetBuilder(realityio::MaterialAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26F3331B8;
  std::string::basic_string[abi:ne180100]<0>(v9, "MaterialAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kMaterialAssetBuilderIdentifier);
  realityio::generateMaterialAssetsDirtyStageSubscription(&v5);
  v12[0] = &unk_26F3332B0;
  v12[1] = this;
  void v12[3] = v12;
  v11[0] = &unk_26F333330;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F3331B8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::MaterialAssetBuilder *)((char *)this + 304));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23F5384E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  realityio::MaterialAssetDataT::~MaterialAssetDataT(v25);
  realityio::DynamicBuilder::~DynamicBuilder(v24);
  _Unwind_Resume(a1);
}

void realityio::MaterialAssetBuilder::run(realityio::MaterialAssetBuilder *this, realityio::Inputs *a2)
{
  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v40, 2036, (uint64_t)this);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v36, v4, (realityio::Inputs *)((char *)a2 + 32));
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (realityio::hasMaterialXSurface((realityio *)&v36, v5))
  {
    realityio::buildMaterialXAsset(a2, &v29);
    realityio::WrappedRERef<REAsset *>::operator=(&v35, &v29);
    if (v30)
    {
      uint64_t v33 = v30;
      RERetain();
      realityio::Builder::addAsset((uint64_t *)this, &v33, 0);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v33);
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v30);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v29);
  }
  uint64_t v6 = v35;
  if (v35) {
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, &v29);
  uint64_t v15 = *(void **)(v12 + 168);
  uint64_t v13 = (void *)(v12 + 168);
  uint64_t v14 = v15;
  if (!v15) {
    goto LABEL_28;
  }
  uint64_t v16 = v13;
  do
  {
    int v17 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v14 + 28), &v29);
    uint64_t v18 = v14 + 1;
    if (!v17)
    {
      uint64_t v18 = v14;
      uint64_t v16 = v14;
    }
    uint64_t v14 = (void *)*v18;
  }
  while (*v18);
  if (v16 == v13
    || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v29, (void *)((char *)v16 + 28)))
  {
LABEL_28:
    uint64_t v16 = v13;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  if ((void *)(*(void *)a2 + 168) == v16)
  {
    BOOL v21 = 0;
  }
  else
  {
    int v19 = *((unsigned __int8 *)v16 + 36);
    int v20 = *((unsigned __int8 *)v16 + 37);
    BOOL v21 = *((unsigned char *)v16 + 37) != 0;
    if (!v19)
    {
      if (!v20) {
        goto LABEL_44;
      }
LABEL_37:
      realityio::createPbrMaterialFromUsdPreviewSurface((realityio *)&v29, this, (realityio::ImportSession **)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v36, 1);
      uint64_t v23 = v34;
      if (v34 != v29)
      {
        uint64_t v34 = v29;
        uint64_t v29 = v23;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v29);
      uint64_t v6 = v35;
      if (v35) {
        goto LABEL_6;
      }
      uint64_t v7 = v34;
      if (v34) {
        goto LABEL_7;
      }
      realityio::createDefaultPbrMaterialAsset(&v29, (uint64_t)this, (uint64_t)a2, 1);
      uint64_t v24 = v34;
      if (v34 != v29)
      {
        uint64_t v34 = v29;
        uint64_t v29 = v24;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v29);
      goto LABEL_44;
    }
  }
  realityio::createPbrMaterialFromUsdPreviewSurface((realityio *)&v29, this, (realityio::ImportSession **)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v36, 0);
  uint64_t v22 = v35;
  if (v35 != v29)
  {
    uint64_t v35 = v29;
    uint64_t v29 = v22;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v29);
  if (v21) {
    goto LABEL_37;
  }
LABEL_44:
  uint64_t v6 = v35;
  if (!v35)
  {
    uint64_t v7 = v34;
    if (v34) {
      goto LABEL_7;
    }
    realityio::createDefaultPbrMaterialAsset(&v29, (uint64_t)this, (uint64_t)a2, 0);
    uint64_t v25 = v35;
    if (v35 != v29)
    {
      uint64_t v35 = v29;
      uint64_t v29 = v25;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v29);
    uint64_t v6 = v35;
    if (!v35)
    {
      uint64_t v7 = v34;
      if (!v34) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
  }
LABEL_6:
  uint64_t v32 = v6;
  RERetain();
  realityio::Builder::addAsset((uint64_t *)this, &v32, 0);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v32);
  uint64_t v7 = v34;
  if (v34)
  {
LABEL_7:
    uint64_t v31 = v7;
    RERetain();
    realityio::Builder::addAsset((uint64_t *)this, &v31, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v31);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, &v28);
  uint64_t v27 = v35;
  if (v35) {
    RERetain();
  }
  uint64_t v26 = v34;
  if (v34) {
    RERetain();
  }
  realityio::MaterialAssetDataT::MaterialAssetDataT((uint64_t)&v29, &v28, &v27, &v26);
  realityio::MaterialAssetDataT::operator=((uint64_t)this + 280, (uint64_t)&v29);
  realityio::MaterialAssetDataT::~MaterialAssetDataT((realityio::MaterialAssetDataT *)&v29);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v26);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  char v8 = (realityio::MaterialAssetBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  uint64_t v10 = *((void *)this + 2);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (long long *)realityio::MaterialAssetBuilder::kMaterialDataName(v8);
  uint64_t v29 = (uint64_t)this + 280;
  realityio::Outputs::storeValue<realityio::MaterialAssetDataT *>(v10, v11, &v29);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
LABEL_16:
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v34);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v35);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  if (v37) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
  }
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v40);
}

void sub_23F538938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)(v11 - 64));
  _Unwind_Resume(a1);
}

void *realityio::createPbrMaterialFromUsdPreviewSurface(realityio *this, realityio::MaterialAssetBuilder *a2, realityio::ImportSession **a3, const pxrInternal__aapl__pxrReserved__::UsdPrim *a4, int a5)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v117 = 0;
  uint64_t IsValid = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a4);
  if (IsValid)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(IsValid);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0
      && *(void *)(*((void *)a3[5] + 2) + 16)
      && REEngineGetServiceLocator()
      && MEMORY[0x2455CDC30]())
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v114 = MEMORY[0x263F90740] + 16;
      if (!v115
        || (*(unsigned char *)(v115 + 57) & 8) != 0
        || ((*(uint64_t (**)(uint64_t *))(MEMORY[0x263F90740] + 48))(&v114) & 1) == 0)
      {
        *(void *)this = v117;
        uint64_t v117 = 0;
LABEL_26:
        MEMORY[0x2455CEF40](&v114);
        return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v117);
      }
      unint64_t v11 = atomic_load(MEMORY[0x263F90550]);
      if (!v11) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
      }
      uint64_t v12 = *(void *)(v11 + 216);
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      memset(&v118, 0, sizeof(v118));
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      __p.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v13 = operator new(8uLL);
      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      v118.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      *uint64_t v13 = v12;
      v118.__r_.__value_.__r.__words[2] = (std::string::size_type)(v13 + 1);
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v13 &= 0xFFFFFFFFFFFFFFF8;
      }
      v118.__r_.__value_.__l.__size_ = (std::string::size_type)(v13 + 1);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!v113
        || (*(unsigned char *)(v113 + 57) & 8) != 0
        || ((*(uint64_t (**)(uint64_t *))(v112 + 32))(&v112) & 1) == 0)
      {
        *(void *)this = v117;
        uint64_t v117 = 0;
LABEL_28:
        MEMORY[0x2455CECB0](&v112);
        goto LABEL_26;
      }
      realityio::makeBaseNameToTextureDataMap((uint64_t)&v110, (realityio::Inputs *)a3, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v112);
      BOOL isAlphaCutout = realityio::isAlphaCutout((realityio *)&v112, v14);
      BOOL v16 = isAlphaCutout || realityio::isTransparent((realityio *)&v112, (uint64_t)&v110);
      if (realityio::ImportSession::allowUnsupportedTextures(a3[5]))
      {
        std::string::size_type v109 = 0;
        if (a5)
        {
LABEL_37:
          if (isAlphaCutout)
          {
            v118.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
            if (v118.__r_.__value_.__r.__words[0]) {
              goto LABEL_52;
            }
          }
          else if (v16)
          {
            v118.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
            if (v118.__r_.__value_.__r.__words[0]) {
              goto LABEL_52;
            }
          }
          else
          {
            v118.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
            if (v118.__r_.__value_.__r.__words[0]) {
              goto LABEL_52;
            }
          }
LABEL_53:
          std::string::size_type v20 = 0;
          goto LABEL_54;
        }
      }
      else
      {
        int hasInvalidTextures = realityio::hasInvalidTextures((realityio *)&v112, v18);
        std::string::size_type v109 = 0;
        if (((a5 ^ 1 | hasInvalidTextures) & 1) == 0) {
          goto LABEL_37;
        }
        if (hasInvalidTextures)
        {
          v118.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
          if (!v118.__r_.__value_.__r.__words[0]) {
            goto LABEL_53;
          }
          goto LABEL_52;
        }
      }
      if (isAlphaCutout)
      {
        v118.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
        if (v118.__r_.__value_.__r.__words[0]) {
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      if (v16)
      {
        v118.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
        if (v118.__r_.__value_.__r.__words[0]) {
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      v118.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
      if (!v118.__r_.__value_.__r.__words[0]) {
        goto LABEL_53;
      }
LABEL_52:
      RERetain();
      std::string::size_type v20 = v118.__r_.__value_.__r.__words[0];
LABEL_54:
      std::string::size_type v21 = v109;
      if (v109 != v20)
      {
        std::string::size_type v109 = v20;
        v118.__r_.__value_.__r.__words[0] = v21;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v118);
      uint64_t v22 = v109;
      if (v109)
      {
        uint64_t v23 = *(void *)(*((void *)a3[5] + 2) + 40);
        if (v23)
        {
          realityio::LiveSceneManager::queueForDeferredAssetLoad(v23, (uint64_t *)&v109);
          uint64_t v22 = v109;
        }
        realityio::Builder::addAsset((uint64_t *)a2, v22, (uint64_t)"pbrMaterialDef");
        RERelease();
        *(void *)uint64_t v108 = REMaterialAssetBuilderCreate();
        if (*(void *)v108 && (RERetain(), *(void *)v108))
        {
          RERelease();
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a4, &v106);
          if (*(unsigned char *)(*((void *)a3[5] + 2) + 272))
          {
            std::string::basic_string[abi:ne180100]<0>(&v118, "/model");
            MEMORY[0x2455CF7A0](&v105, &v118);
            std::string::basic_string[abi:ne180100]<0>(&__p, "/");
            MEMORY[0x2455CF7A0](&v104, &__p);
            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v105, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v104);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v106, (int *)&v92);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v107);
            pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v92);
            pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v104);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v105);
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
          REMaterialAssetBuilderSetName();
          REMaterialAssetBuilderSetMaterialDefinition();
          realityio::getCullMode(a4, v24);
          if (!v25) {
            REMaterialAssetBuilderSetMTLCullMode();
          }
          int v26 = v108[0];
          uint64_t v27 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a3 + 1);
          realityio::setFunctionConstantsFromScene(v26, v27);
          realityio::setMaterialConstantsFromUsdPreviewSurface(v108[0], (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v112, (uint64_t)&v110);
          realityio::setFunctionConstantsFromUsdPreviewSurface(v108[0], (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v112, (uint64_t)&v110);
          realityio::findFirstUVMeshAttributeNameFromShader((realityio *)&v112, v28, &v105);
          std::string::basic_string[abi:ne180100]<0>(&v104, "");
          uint64_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v29) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v29 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
            Emptyuint64_t String = (*((void *)v29 + 4) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
          }
          if (*(char *)(EmptyString + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
          }
          else
          {
            long long v31 = *(_OWORD *)EmptyString;
            v118.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v31;
          }
          uint64_t v119 = "textureBaseColor";
          uint64_t v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v32) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v32 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v33 = (*((void *)v32 + 2) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v33 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
          }
          if (*(char *)(v33 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)v33, *(void *)(v33 + 8));
          }
          else
          {
            long long v34 = *(_OWORD *)v33;
            v120.__r_.__value_.__r.__words[2] = *(void *)(v33 + 16);
            *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v34;
          }
          std::string::size_type v121 = "textureMetallic";
          uint64_t v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v35) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v35 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v36 = (*((void *)v35 + 3) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
          }
          if (*(char *)(v36 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)v36, *(void *)(v36 + 8));
          }
          else
          {
            long long v37 = *(_OWORD *)v36;
            v122.__r_.__value_.__r.__words[2] = *(void *)(v36 + 16);
            *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v37;
          }
          uint64_t v123 = "textureRoughness";
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v38) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v38 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v39 = (*((void *)v38 + 5) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
          }
          if (*(char *)(v39 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v39, *(void *)(v39 + 8));
          }
          else
          {
            long long v40 = *(_OWORD *)v39;
            v124.__r_.__value_.__r.__words[2] = *(void *)(v39 + 16);
            *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v40;
          }
          BOOL v125 = "textureEmissive";
          std::string v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v41) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v41 + 24) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v42 = (*((void *)v41 + 24) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v42 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
          }
          if (*(char *)(v42 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)v42, *(void *)(v42 + 8));
          }
          else
          {
            long long v43 = *(_OWORD *)v42;
            v126.__r_.__value_.__r.__words[2] = *(void *)(v42 + 16);
            *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v43;
          }
          std::string::value_type v127 = "textureSpecular";
          CGImageSourceRef v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v44) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v44 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v45 = (*((void *)v44 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v45 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          if (*(char *)(v45 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)v45, *(void *)(v45 + 8));
          }
          else
          {
            long long v46 = *(_OWORD *)v45;
            v128.__r_.__value_.__r.__words[2] = *(void *)(v45 + 16);
            *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v46;
          }
          double v129 = "textureClearcoat";
          std::string::size_type v47 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v47) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v47 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v48 = (*((void *)v47 + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v48 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v47);
          }
          if (*(char *)(v48 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)v48, *(void *)(v48 + 8));
          }
          else
          {
            long long v49 = *(_OWORD *)v48;
            v130.__r_.__value_.__r.__words[2] = *(void *)(v48 + 16);
            *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v49;
          }
          std::string::size_type v131 = "textureClearcoatRoughness";
          uint64_t v50 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v50) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v50 + 11) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v51 = (*((void *)v50 + 11) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v51 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v50);
          }
          if (*(char *)(v51 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v51, *(void *)(v51 + 8));
          }
          else
          {
            long long v52 = *(_OWORD *)v51;
            v132.__r_.__value_.__r.__words[2] = *(void *)(v51 + 16);
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v52;
          }
          float v133 = "textureNormal";
          CFStringRef v53 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v53) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v53 + 23) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v54 = (*((void *)v53 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v54 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v53);
          }
          if (*(char *)(v54 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v54, *(void *)(v54 + 8));
          }
          else
          {
            long long v55 = *(_OWORD *)v54;
            v134.__r_.__value_.__r.__words[2] = *(void *)(v54 + 16);
            *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v55;
          }
          uint64_t v135 = "textureAmbientOcclusion";
          CGImageDestinationRef v56 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v56) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v56 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v57 = (*((void *)v56 + 10) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v57 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v56);
          }
          if (*(char *)(v57 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v57, *(void *)(v57 + 8));
          }
          else
          {
            long long v58 = *(_OWORD *)v57;
            v136.__r_.__value_.__r.__words[2] = *(void *)(v57 + 16);
            *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v58;
          }
          double v137 = "textureOpacity";
          std::map<std::string,char const*>::map[abi:ne180100]((uint64_t)v102, (const void **)&v118.__r_.__value_.__l.__data_, 10);
          uint64_t v59 = 320;
          do
          {
            if (*(&v116 + v59) < 0) {
              operator delete(*(void **)((char *)&v114 + v59));
            }
            v59 -= 32;
          }
          while (v59);
          int isRMABundled = realityio::isRMABundled((uint64_t)&v110);
          uint64_t v61 = v110;
          if (v110 != v111)
          {
            int v62 = isRMABundled;
            char v84 = 0;
            char v85 = 0;
            while (1)
            {
              if (*((char *)v61 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v118, v61[4], (std::string::size_type)v61[5]);
              }
              else {
                std::string v118 = *(std::string *)(v61 + 4);
              }
              uint64_t v119 = v61[7];
              uint64_t v63 = (char **)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)v102, (const void **)&v118.__r_.__value_.__l.__data_);
              uint64_t v64 = v63;
              if (&v103 != v63) {
                break;
              }
LABEL_214:
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v118.__r_.__value_.__l.__data_);
              }
              unsigned __int8 v80 = v61[1];
              if (v80)
              {
                do
                {
                  uint64_t v81 = (char **)v80;
                  unsigned __int8 v80 = *(char **)v80;
                }
                while (v80);
              }
              else
              {
                do
                {
                  uint64_t v81 = (char **)v61[2];
                  BOOL v71 = *v81 == (char *)v61;
                  uint64_t v61 = v81;
                }
                while (!v71);
              }
              uint64_t v61 = v81;
              if (v81 == v111) {
                goto LABEL_222;
              }
            }
            std::string::basic_string[abi:ne180100]<0>(v100, v63[7]);
            std::string::basic_string[abi:ne180100]<0>(&__p, v64[7]);
            char v65 = std::string::append(&__p, "_sampler");
            long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            std::string::size_type v99 = v65->__r_.__value_.__r.__words[2];
            long long v98 = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (!v62)
            {
LABEL_172:
              CFMutableDictionaryRef v72 = v119;
              if (v72 + 24 != (const char *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)(v119 + 16), (const void **)&v118.__r_.__value_.__l.__data_))
              {
                if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  CFMutableDictionaryRef v73 = &v118;
                }
                else {
                  CFMutableDictionaryRef v73 = (std::string *)v118.__r_.__value_.__r.__words[0];
                }
                MEMORY[0x2455CF810](&v92, v73);
                pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v112, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v92);
                if ((v92 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                realityio::findPrimWhichOriginatedConnection((realityio *)&v92, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&__p);
                memset(&__str, 0, sizeof(__str));
                long long v90 = xmmword_23F7BDEF0;
                uint64_t v89 = 0;
                realityio::uvNameAndTransformForTexturePrim((uint64_t)&v92, &__str, &v90, &v89);
                REMaterialAssetBuilderSetTextureFromAsset();
                id v74 = *((id *)v119 + 5);
                REMaterialAssetBuilderSetSampler();

                REMaterialAssetBuilderBindTextureToSampler();
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                if (size
                  && std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)&__str, (unsigned __int8 *)&v105)&& (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v104, "")|| std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v104, (unsigned __int8 *)&__str)))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v86, "geometry.primvars:");
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    p_str = &__str;
                  }
                  else {
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  }
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v77 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v77 = __str.__r_.__value_.__l.__size_;
                  }
                  float v78 = std::string::append(&v86, (const std::string::value_type *)p_str, v77);
                  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
                  std::string::size_type v88 = v78->__r_.__value_.__r.__words[2];
                  *(_OWORD *)char v87 = v79;
                  v78->__r_.__value_.__l.__size_ = 0;
                  v78->__r_.__value_.__r.__words[2] = 0;
                  v78->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v86.__r_.__value_.__l.__data_);
                  }
                  std::string::operator=(&v104, &__str);
                  REMaterialAssetBuilderSetBufferFromBinding();
                  REMaterialAssetBuilderSetUVIndexForTexture();
                  if ((v84 & 1) == 0)
                  {
                    REMaterialAssetBuilderSetFloat4();
                    REMaterialAssetBuilderSetFloat2();
                  }
                  if (SHIBYTE(v88) < 0) {
                    operator delete(v87[0]);
                  }
                  char v84 = 1;
                }
                else
                {
                  if ((v85 & 1) == 0)
                  {
                    REMaterialAssetBuilderSetFloat4();
                    REMaterialAssetBuilderSetFloat2();
                  }
                  REMaterialAssetBuilderSetUVIndexForTexture();
                  char v85 = 1;
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if ((v95 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
                if (v93) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v93);
                }
                if ((v97 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__r.__words[2]);
                if (__p.__r_.__value_.__l.__size_) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__p.__r_.__value_.__l.__size_);
                }
              }
              if (SHIBYTE(v99) < 0) {
                operator delete((void *)v98);
              }
              if (v101 < 0) {
                operator delete(v100[0]);
              }
              goto LABEL_214;
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v118.__r_.__value_.__l.__size_ == 8)
              {
                uint64_t v67 = (std::string *)v118.__r_.__value_.__r.__words[0];
LABEL_158:
                if (v67->__r_.__value_.__r.__words[0] == 0x63696C6C6174656DLL) {
                  goto LABEL_162;
                }
              }
            }
            else if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) == 8)
            {
              uint64_t v67 = &v118;
              goto LABEL_158;
            }
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "occlusion")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "roughness")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "specularColor"))
            {
              goto LABEL_172;
            }
LABEL_162:
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v118.__r_.__value_.__l.__size_ == 9)
              {
                long long v68 = (std::string *)v118.__r_.__value_.__r.__words[0];
LABEL_167:
                std::string::size_type v69 = v68->__r_.__value_.__r.__words[0];
                int v70 = v68->__r_.__value_.__s.__data_[8];
                BOOL v71 = v69 == 0x6F6973756C63636FLL && v70 == 110;
                if (v71) {
                  goto LABEL_172;
                }
              }
            }
            else if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) == 9)
            {
              long long v68 = &v118;
              goto LABEL_167;
            }
            MEMORY[0x2455D2770](v100, "textureRMAS");
            MEMORY[0x2455D2770](&v98, "textureRMAS_sampler");
            goto LABEL_172;
          }
LABEL_222:
          std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v104, "");
          REMaterialAssetBuilderSetFunctionConstant();
          uint64_t v82 = REAssetManagerMaterialAssetBuilderBuildAsync();
          *(void *)this = v82;
          if (v82)
          {
            RERetain();
            RERelease();
            uint64_t v83 = *(void *)(*((void *)a3[5] + 2) + 40);
            if (v83) {
              realityio::LiveSceneManager::queueForDeferredAssetLoad(v83, (uint64_t *)this);
            }
          }
          std::__tree<std::string>::destroy((uint64_t)v102, v103);
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v105.__r_.__value_.__l.__data_);
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
        }
        else
        {
          *(void *)this = v117;
          uint64_t v117 = 0;
        }
        realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(v108);
      }
      else
      {
        *(void *)this = v117;
        uint64_t v117 = 0;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v109);
      std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(v111[0]);
      goto LABEL_28;
    }
  }
  *(void *)this = v117;
  uint64_t v117 = 0;
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v117);
}

void sub_23F539A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  MEMORY[0x2455CEF40](&a63);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a66);
  _Unwind_Resume(a1);
}

void *realityio::createDefaultPbrMaterialAsset(void *result, uint64_t a2, uint64_t a3, char a4)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  char v10 = a4;
  *__n128 result = 0;
  if (a3)
  {
    uint64_t v5 = result;
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    uint64_t v9 = MEMORY[0x2455CDC30](ServiceLocator);
    uint64_t v7 = *(void *)(a3 + 48);
    char v8 = operator new(0x30uLL);
    *char v8 = &unk_26F333440;
    v8[1] = &v10;
    v8[2] = &v9;
    void v8[3] = &v12;
    v8[4] = &v11;
    v8[5] = v5;
    void v13[3] = v8;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v13);
    return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v13);
  }
  return result;
}

void sub_23F539EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v6);
  _Unwind_Resume(a1);
}

uint64_t realityio::MaterialAssetDataT::operator=(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4 != v5)
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
    *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v4;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  if (v6 != v7)
  {
    *(void *)(a1 + 16) = v7;
    *(void *)(a2 + 16) = v6;
  }
  return a1;
}

void realityio::Outputs::storeValue<realityio::MaterialAssetDataT *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = &unk_26F3333B0;
  uint64_t v8 = *a3;
  void v7[3] = &unk_26F333400;
  v7[4] = v8;
  uint64_t v11 = a2;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  char v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F53A034(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::MaterialAssetBuilder::clear(realityio::MaterialAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v5 = (std::mutex *)*((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (const void **)realityio::MaterialAssetBuilder::kMaterialDataName(this);
  realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(v5, v6, (uint64_t)&v13);
  int v8 = v13;
  if (!(_BYTE)v13)
  {
    uint64_t v7 = (realityio::MaterialAssetBuilder *)&v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v5 = (std::mutex *)v12.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v13 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v12 = __p;
      uint64_t v5 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v8)
  {
    uint64_t v10 = *((void *)this + 2);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (const void **)realityio::MaterialAssetBuilder::kMaterialDataName(v7);
    std::mutex::lock((std::mutex *)(v10 + 64));
    if (v10 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v10 + 40, v11))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v10 + 40), v11); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v10, (unsigned __int8 *)v11);
    }
    std::mutex::unlock((std::mutex *)(v10 + 64));
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v13 = 0;
    long long v14 = 0uLL;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    long long v14 = 0uLL;
    realityio::MaterialAssetDataT::operator=((uint64_t)this + 280, (uint64_t)&v13);
    realityio::MaterialAssetDataT::~MaterialAssetDataT((realityio::MaterialAssetDataT *)&v13);
  }
  else if (v2 < 0)
  {
    operator delete(v5);
  }
}

void sub_23F53A1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a15 && a23 < 0) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23)) {
      return 0;
    }
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    a1 = (void *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

__n128 realityio::getShadeInputColor4WithFallback(__n128 *a1, pxrInternal__aapl__pxrReserved__::UsdObject *this, __n128 a3)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this)
    || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
LABEL_14:
    __n128 result = a3;
    *a1 = a3;
    a1[1].n128_u8[0] = 0;
    return result;
  }
  realityio::findOriginalSourceAttribute(this, (uint64_t)v7);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v7)
    || (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v7))
  {
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    if (v8) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
    }
    goto LABEL_14;
  }
  realityio::getColorAttributeAndGamut((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v7, a1, a3);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return result;
}

void sub_23F53A3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::findPrimWhichOriginatedConnection(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2)
    || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    return pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)this, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  }
  realityio::findOriginalSourceAttribute(a2, (uint64_t)&v7);
  int IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7);
  char v5 = IsValid;
  if (IsValid) {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)this, &v8, &v9);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  uint64_t result = v8;
  if (v8) {
    uint64_t result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  if ((v5 & 1) == 0) {
    return pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)this, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  }
  return result;
}

void sub_23F53A4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::findOriginalSourceAttributeName(std::string *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  realityio::findOriginalSourceAttribute(a2, (uint64_t)v7);
  Baseuint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(&v11, (pxrInternal__aapl__pxrReserved__::UsdProperty *)v7);
  if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyuint64_t String = (v11 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)EmptyString;
    this->__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  uint64_t result = v8;
  if (v8) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return result;
}

void sub_23F53A5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

__n128 realityio::findTextureScaleFloat3(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  char v2 = (char)a2;
  realityio::findPrimWhichOriginatedConnection((realityio *)v18, this);
  unint64_t v3 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v14, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 240));
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v14, (uint64_t)v22);
  if (v22[0])
  {
    *(float32x2_t *)&_Q0 = v23;
    long long v13 = _Q0;
  }
  else
  {
    __asm { FMOV            V0.2S, #1.0 }
    long long v13 = _Q0;
    if (v25 < 0) {
      operator delete(__p);
    }
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  if (v15) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
  }
  if ((v2 & 1) == 0)
  {
    unint64_t v9 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v9) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v14, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 248));
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v14, (uint64_t)v22);
    if (v22[0])
    {
      float32x2_t v10 = v23;
    }
    else
    {
      float32x2_t v10 = 0;
      if (v25 < 0) {
        operator delete(__p);
      }
    }
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    if (v15) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
    }
    *((void *)&v11 + 1) = *((void *)&v13 + 1);
    *(float32x2_t *)&long long v11 = vmul_f32(*(float32x2_t *)&v13, v10);
    long long v13 = v11;
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  if (v19) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
  }
  return (__n128)v13;
}

void sub_23F53A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

float realityio::findTextureScaleFloat(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  char v2 = (char)a2;
  uint64_t v33 = *MEMORY[0x263EF8340];
  realityio::findPrimWhichOriginatedConnection((realityio *)v22, this);
  long long v21 = 0uLL;
  unint64_t v4 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 240));
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (uint64_t)&v26);
  if (v26.__r_.__value_.__s.__data_[0])
  {
    _Q0 = *(_OWORD *)&v26.__r_.__value_.__r.__words[1];
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
    if (v28 < 0)
    {
      long long v19 = _Q0;
      operator delete(__p);
      _Q0 = v19;
    }
  }
  long long v21 = _Q0;
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  if (*(void *)&v30[4]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v30[4]);
  }
  OriginalSourceAttributeuint64_t Name = (realityio *)realityio::findOriginalSourceAttributeName(&v26, this);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_24;
    }
    int v11 = *v26.__r_.__value_.__l.__data_;
    switch(v11)
    {
      case 'b':
        uint64_t v12 = 2;
        goto LABEL_35;
      case 'g':
        uint64_t v12 = 1;
        goto LABEL_35;
      case 'r':
        uint64_t v12 = 0;
        goto LABEL_35;
    }
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_24;
    }
    int v11 = v26.__r_.__value_.__s.__data_[0];
    switch(v26.__r_.__value_.__s.__data_[0])
    {
      case 'b':
        uint64_t v12 = 2;
        goto LABEL_36;
      case 'g':
        uint64_t v12 = 1;
        goto LABEL_36;
      case 'r':
        uint64_t v12 = 0;
        goto LABEL_36;
    }
  }
  if (v11 == 97)
  {
    uint64_t v12 = 3;
    if ((*((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_24:
  long long v13 = *(NSObject **)(realityio::logObjects(OriginalSourceAttributeName) + 24);
  if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = 0;
    if ((*((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v14 = &v26;
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v14 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)std::string buf = 136315138;
  *(void *)uint64_t v30 = v14;
  _os_log_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_DEFAULT, "Invalid USD texture shader node output %s for single texture component.", buf, 0xCu);
  uint64_t v12 = 0;
  if ((*((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_35:
  }
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_36:
  float v15 = *(float *)((unint64_t)&v21 | (4 * v12));
  if ((v2 & 1) == 0)
  {
    long long v20 = 0uLL;
    unint64_t v16 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v16) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 248));
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (uint64_t)&v26);
    if (v26.__r_.__value_.__s.__data_[0])
    {
      long long v17 = *(_OWORD *)&v26.__r_.__value_.__r.__words[1];
    }
    else
    {
      long long v17 = xmmword_23F7BDF00;
      if (v28 < 0)
      {
        operator delete(__p);
        long long v17 = xmmword_23F7BDF00;
      }
    }
    long long v20 = v17;
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (*(void *)&v30[4]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v30[4]);
    }
    float v15 = v15 * *(float *)((unint64_t)&v20 | (4 * v12));
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  if (v23) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
  }
  return v15;
}

void sub_23F53AB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_23F53AB90()
{
}

uint64_t realityio::getBaseColorTintAndOpacity(float32x4_t *a1, pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v6 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v40, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 32));
  unint64_t v7 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v36, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 80));
  unint64_t v8 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v32, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 200));
  v44.i32[0] = 1065353216;
  float ShadeInputValueWith = realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, &v44);
  realityio::getShadeInputColor4WithFallback((__n128 *)&v44, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v40, (__n128)xmmword_23F7BDF10);
  float32x4_t v29 = v44;
  __int8 v9 = v45;
  __asm { FMOV            V0.4S, #1.0 }
  realityio::getShadeInputColor4WithFallback((__n128 *)&v44, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v32, _Q0);
  float32x4_t v30 = v44;
  __int8 v15 = v45;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v40)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    int v17 = MEMORY[0x2455D0E10](&v40);
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v18 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if (!realityio::isConnectedToBaseColorAlpha(this, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v18 + 80), v16)&& pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36)&& pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()&& MEMORY[0x2455D0E10](&v36))
  {
    long long v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v19) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v19 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyuint64_t String = (const void **)((*((void *)v19 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
    }
    BOOL v21 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, EmptyString);
    float ShadeInputValueWith = realityio::findTextureScaleFloat((realityio *)&v36, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v21);
  }
  if (v17)
  {
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v22) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v22 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v23 = (const void **)((*((void *)v22 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v23 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
    }
    BOOL v25 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v23);
    v24.i32[0] = realityio::findTextureScaleFloat3((realityio *)&v40, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v25).n128_u32[0];
    v24.i32[1] = v26;
    *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v24.f32);
    v24.f32[2] = v30.f32[2] * v27;
    __int8 v9 = v15;
  }
  else
  {
    float32x4_t v24 = vmulq_f32(v29, v30);
  }
  v24.f32[3] = ShadeInputValueWith;
  *a1 = v24;
  a1[1].i8[0] = v9;
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
  if (v33) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
  }
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  if (v37) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
  }
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  uint64_t result = v41;
  if (v41) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
  }
  return result;
}

void sub_23F53AEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va1);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va2);
  _Unwind_Resume(a1);
}

float realityio::getShadeInputValueWithFallback<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _DWORD *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1)
    || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    return *(float *)a2;
  }
  realityio::findOriginalSourceAttribute(a1, (uint64_t)&v7);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7)
    && (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) == 0
    && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7))
  {
    realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7, (uint64_t)v11);
    if (v11[0])
    {
      float v2 = v12;
    }
    else
    {
      float v2 = *(float *)a2;
      if (v14 < 0) {
        operator delete(__p);
      }
    }
    int v5 = 0;
  }
  else
  {
    int v5 = 1;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  if (v5) {
    return *(float *)a2;
  }
  return v2;
}

void sub_23F53B028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL realityio::isTransparent(realityio *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v4 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyuint64_t String = (const void **)((*((void *)v4 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a2, EmptyString);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v8 = (const void **)((*((void *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v8 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a2, v8);
  uint64_t v11 = a2 + 8;
  unint64_t v12 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  BOOL isConnectedToBaseColorAlpha = realityio::isConnectedToBaseColorAlpha(a1, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v12 + 80), v9);
  BOOL v14 = v11 != v6 && isConnectedToBaseColorAlpha;
  BOOL result = 1;
  if (!v14 && v11 == v10)
  {
    realityio::getBaseColorTintAndOpacity(&v16, a1, a2);
    return v16.f32[3] < 1.0;
  }
  return result;
}

BOOL realityio::isAlphaCutout(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  unint64_t v4 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v12, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 72));
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12)
    || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    goto LABEL_15;
  }
  realityio::findOriginalSourceAttribute((realityio *)&v12, (uint64_t)&v8);
  int IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8);
  char v6 = IsValid;
  if (IsValid)
  {
    realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8, (uint64_t)v16);
    if (v16[0])
    {
      BOOL v2 = v17 > 0.0;
    }
    else
    {
      if (v19 < 0) {
        operator delete(__p);
      }
      BOOL v2 = 0;
    }
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  if ((v6 & 1) == 0) {
LABEL_15:
  }
    BOOL v2 = 0;
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  }
  return v2;
}

void sub_23F53B2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t realityio::hasInvalidTextures(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(this);
  BOOL v2 = v29;
  unint64_t v3 = v30;
  if (v29 == v30)
  {
LABEL_31:
    uint64_t v16 = 0;
    goto LABEL_44;
  }
  while (1)
  {
    realityio::findPrimWhichOriginatedConnection((realityio *)v25, v2);
    Fileuint64_t ResolvedPath = (pxrInternal__aapl__pxrReserved__ *)realityio::getFileResolvedPath(&v24);
    std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    char v6 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_24;
    }
    pxrInternal__aapl__pxrReserved__::ArGetResolver(FileResolvedPath);
    pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
    BOOL v7 = (v23 & 0x80u) != 0;
    unint64_t v8 = v23;
    if ((v23 & 0x80u) != 0) {
      unint64_t v8 = v22;
    }
    if (v8)
    {
      unint64_t v9 = 0;
      do
      {
        if (v7) {
          uint64_t v10 = (char *)v21;
        }
        else {
          uint64_t v10 = (char *)&v21;
        }
        char v11 = __tolower(v10[v9]);
        if ((v23 & 0x80u) == 0) {
          uint64_t v12 = &v21;
        }
        else {
          uint64_t v12 = v21;
        }
        v12[v9++] = v11;
        BOOL v7 = (v23 & 0x80u) != 0;
        unint64_t v13 = v23;
        if ((v23 & 0x80u) != 0) {
          unint64_t v13 = v22;
        }
      }
      while (v13 > v9);
    }
    pxrInternal__aapl__pxrReserved__::TfStringToLower();
    uint64_t v14 = (realityio *)std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>((uint64_t)&realityio::isUsdzCompliantImageFileExtension(std::string const&)::allowedExtensions, (uint64_t)&__block_descriptor_40_e5_v8__0l, (const void **)&__p);
    uint64_t v15 = v14;
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)__p);
    }
    if (v15 - (realityio *)&realityio::isUsdzCompliantImageFileExtension(std::string const&)::allowedExtensions == 64) {
      break;
    }
    if ((char)v23 < 0) {
      operator delete(v21);
    }
    char v6 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
LABEL_24:
    if (v6 < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
    if (v26) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
    }
    BOOL v2 = (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v2 + 32);
    if (v2 == v3) {
      goto LABEL_31;
    }
  }
  float v17 = *(NSObject **)realityio::logObjects(v14);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    long long v20 = &v24;
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v20 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v20;
    _os_log_error_impl(&dword_23F4EA000, v17, OS_LOG_TYPE_ERROR, "%s is an invalid texture format for use in USDZ.", (uint8_t *)&__p, 0xCu);
  }
  *(void *)&long long __p = "Material/MaterialAssetBuilder.mm";
  *((void *)&__p + 1) = "hasInvalidTextures";
  uint64_t v32 = 596;
  uint64_t v33 = "BOOL realityio::hasInvalidTextures(const UsdShadeShader &)";
  char v34 = 1;
  int v35 = 6;
  unint64_t v18 = &v24;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, "%s is an invalid texture format for use in USDZ.", (const char *)v18);
  if ((char)v23 < 0) {
    operator delete(v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  if (v26) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  }
  uint64_t v16 = 1;
LABEL_44:
  *(void *)&long long __p = &v29;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v16;
}

void sub_23F53B60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::makeBaseNameToTextureDataMap(uint64_t this, realityio::Inputs *a2, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a3)
{
  *(void *)(this + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = this + 8;
  if (a2)
  {
    uint64_t v4 = *((void *)a3 + 1);
    if (v4)
    {
      if ((*(unsigned char *)(v4 + 57) & 8) == 0)
      {
        char v6 = (uint64_t **)this;
        this = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdShadeShader *))(*(void *)a3 + 32))(a3);
        if (this)
        {
          uint64_t v7 = realityio::TextureBuilder::kOutputName((realityio::TextureBuilder *)this);
          realityio::Inputs::getAccumulatedValues<realityio::TextureBuilder::TextureDataT const*>((uint64_t)a2, v7, (uint64_t)v50);
          if (v50[0])
          {
            unint64_t v8 = v51;
            unint64_t v9 = v52;
            if (v51 != v52)
            {
              unint64_t v48 = 0;
              uint64_t v49 = 0;
              std::string::size_type v47 = &v48;
              do
              {
                uint64_t v10 = *v8;
                uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(*v8);
                if (*(char *)(String + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)String, *(void *)(String + 8));
                }
                else
                {
                  long long v12 = *(_OWORD *)String;
                  v45.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
                  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v12;
                }
                unint64_t v46 = (unint64_t)v10;
                std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TextureBuilder::TextureDataT const*>>((uint64_t **)&v47, (const void **)&v45.__r_.__value_.__l.__data_, (long long *)&v45);
                if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v45.__r_.__value_.__l.__data_);
                }
                ++v8;
              }
              while (v8 != v9);
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a3);
              uint64_t v13 = v43;
              uint64_t v14 = v44;
              if (v43 != v44)
              {
                uint64_t v15 = &v45.__r_.__value_.__r.__words[2];
                do
                {
                  LODWORD(v45.__r_.__value_.__l.__data_) = *(_DWORD *)v13;
                  std::string::size_type v16 = *(void *)(v13 + 8);
                  v45.__r_.__value_.__l.__size_ = v16;
                  if (v16) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 48), 1uLL, memory_order_relaxed);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15, (_DWORD *)(v13 + 16));
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v45.__r_.__value_.__r.__words[2] + 1, (_DWORD *)(v13 + 20));
                  float v17 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(v13 + 24);
                  unint64_t v46 = (unint64_t)v17;
                  if ((v17 & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    v46 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v45))
                  {
                    realityio::findPrimWhichOriginatedConnection((realityio *)v39, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v13);
                    unint64_t v18 = v15;
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v39))
                    {
                      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v39, &v36);
                      char v19 = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v36);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
                      long long v20 = v48;
                      if (v48)
                      {
                        BOOL v21 = &v48;
                        do
                        {
                          unint64_t v22 = v21;
                          unsigned __int8 v23 = v20 + 32;
                          BOOL v24 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v49, (const void **)v20 + 4, v19);
                          BOOL v25 = v20 + 8;
                          if (!v24)
                          {
                            BOOL v25 = v20;
                            BOOL v21 = (char **)v20;
                          }
                          long long v20 = *(char **)v25;
                        }
                        while (*(void *)v25);
                        if (v21 != &v48)
                        {
                          uint64_t v26 = v24 ? (const void **)(v22 + 4) : (const void **)v23;
                          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v49, v19, v26))
                          {
                            Baseuint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((uint64_t *)&v36, (pxrInternal__aapl__pxrReserved__::UsdProperty *)&v45);
                            if ((v36.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
                              Emptyuint64_t String = (v36.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
                            }
                            else {
                              Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
                            }
                            if (*(char *)(EmptyString + 23) < 0)
                            {
                              std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
                            }
                            else
                            {
                              long long v29 = *(_OWORD *)EmptyString;
                              v38.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
                              *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
                            }
                            if ((v36.__r_.__value_.__s.__data_[0] & 7) != 0) {
                              atomic_fetch_add_explicit((atomic_uint *volatile)(v36.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                            }
                            float32x4_t v30 = v21[7];
                            uint64_t v31 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)(v30 + 16), (const void **)&v38.__r_.__value_.__l.__data_);
                            if (v30 + 24 != (char *)v31 && *(void *)(v31 + 56))
                            {
                              uint64_t v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(&v35, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v13);
                              if ((v35 & 0xFFFFFFFFFFFFFFF8) != 0) {
                                unint64_t v33 = (v35 & 0xFFFFFFFFFFFFFFF8) + 16;
                              }
                              else {
                                unint64_t v33 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
                              }
                              if (*(char *)(v33 + 23) < 0)
                              {
                                std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v33, *(void *)(v33 + 8));
                              }
                              else
                              {
                                long long v34 = *(_OWORD *)v33;
                                v36.__r_.__value_.__r.__words[2] = *(void *)(v33 + 16);
                                *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v34;
                              }
                              uint64_t v37 = v21[7];
                              std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TextureBuilder::TextureDataT const*>>(v6, (const void **)&v36.__r_.__value_.__l.__data_, (long long *)&v36);
                              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v36.__r_.__value_.__l.__data_);
                              }
                              if ((v35 & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                            }
                            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v38.__r_.__value_.__l.__data_);
                            }
                          }
                        }
                      }
                    }
                    if ((v42 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    uint64_t v15 = v18;
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
                    if (v40) {
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v40);
                    }
                  }
                  if ((v46 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
                  if (v45.__r_.__value_.__l.__size_) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45.__r_.__value_.__l.__size_);
                  }
                  v13 += 32;
                }
                while (v13 != v14);
              }
              v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
              std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(v48);
            }
          }
          return realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)v50);
        }
      }
    }
  }
  return this;
}

void sub_23F53BAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a30);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a37);
  a37 = &a34;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(*(char **)(v42 - 152));
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result(v42 - 136);
  std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(*a10);
  _Unwind_Resume(a1);
}

void realityio::Inputs::getAccumulatedValues<realityio::TextureBuilder::TextureDataT const*>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v44 = 0;
  std::string v45 = 0;
  char v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    std::string v45 = std::__shared_weak_count::lock(v6);
    if (v45) {
      uint64_t v44 = *(void *)(v4 + 16);
    }
  }
  MEMORY[0x2455CF830](&v46, a2);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(v4 + 8), &v44);
  unint64_t v8 = v7;
  uint64_t v10 = v9;
  char v11 = v49;
  if (v7 == v9)
  {
    std::operator+<char>();
    long long v29 = std::string::append(&v41, ") at prim path (");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 32));
    int v32 = *(char *)(String + 23);
    if (v32 >= 0) {
      unint64_t v33 = (const std::string::value_type *)String;
    }
    else {
      unint64_t v33 = *(const std::string::value_type **)String;
    }
    if (v32 >= 0) {
      std::string::size_type v34 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v34 = *(void *)(String + 8);
    }
    uint64_t v35 = std::string::append(&v42, v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    uint64_t v37 = std::string::append(&v43, ")");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[0] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v49, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)v49;
    std::string::size_type v39 = v50.__r_.__value_.__r.__words[0];
    *(void *)(a3 + 24) = *(void *)&v49[16];
    *(void *)(a3 + 32) = v39;
    *(void *)(a3 + 39) = *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7);
    LOBYTE(v39) = v50.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = 0uLL;
    *(void *)&v49[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v39;
    if (v48.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v28 = (void *)v41.__r_.__value_.__r.__words[0];
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v40 = a3;
    memset(&v43, 0, sizeof(v43));
    do
    {
      uint64_t v12 = *((void *)v8 + 5);
      uint64_t v14 = *(std::mutex **)(v12 + 16);
      uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyuint64_t String = (const void **)((*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      }
      realityio::Outputs::getRawValue<realityio::TextureBuilder::TextureDataT const*>(v14, EmptyString, (uint64_t)v49);
      int v16 = v49[0];
      if (v49[0])
      {
        float v17 = *(void **)&v49[8];
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)&v49[8];
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v48, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
          float v17 = __p[0];
          char v11 = (unsigned char *)v48.__r_.__value_.__r.__words[0];
          LOBYTE(v4) = *((unsigned char *)&v48.__r_.__value_.__s + 23);
          if (!v49[0] && SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string v48 = v50;
          float v17 = __p[0];
          char v11 = (unsigned char *)v50.__r_.__value_.__r.__words[0];
          LOBYTE(v4) = *((unsigned char *)&v50.__r_.__value_.__s + 23);
        }
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (v16)
      {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
        if (v43.__r_.__value_.__l.__size_ >= v43.__r_.__value_.__r.__words[2])
        {
          uint64_t v19 = (uint64_t)(v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          int64_t v21 = v43.__r_.__value_.__r.__words[2] - v43.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v43.__r_.__value_.__r.__words[2] - v43.__r_.__value_.__r.__words[0]) >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22) {
            uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v43.__r_.__value_.__r.__words[2], v22);
          }
          else {
            uint64_t v7 = 0;
          }
          unsigned __int8 v23 = (void *)((char *)v7 + 8 * v19);
          *unsigned __int8 v23 = v17;
          std::string::size_type v24 = (std::string::size_type)(v23 + 1);
          BOOL v25 = (char *)v43.__r_.__value_.__l.__size_;
          std::string::size_type v26 = v43.__r_.__value_.__r.__words[0];
          if (v43.__r_.__value_.__l.__size_ != v43.__r_.__value_.__r.__words[0])
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *--unsigned __int8 v23 = v27;
            }
            while (v25 != (char *)v26);
            BOOL v25 = (char *)v43.__r_.__value_.__r.__words[0];
          }
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
          v43.__r_.__value_.__l.__size_ = v24;
          v43.__r_.__value_.__r.__words[2] = (std::string::size_type)v7 + 8 * v22;
          if (v25) {
            operator delete(v25);
          }
          v43.__r_.__value_.__l.__size_ = v24;
        }
        else
        {
          *(void *)v43.__r_.__value_.__l.__size_ = v17;
          v43.__r_.__value_.__l.__size_ = size + 8;
        }
      }
      else if ((v4 & 0x80) != 0)
      {
        operator delete(v11);
      }
      unint64_t v8 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v8;
    }
    while (v8 != v10);
    memset(v49, 0, sizeof(v49));
    std::vector<realityio::TextureBuilder::TextureDataT const*>::__init_with_size[abi:ne180100]<realityio::TextureBuilder::TextureDataT const**,realityio::TextureBuilder::TextureDataT const**>(v49, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_, (uint64_t)(v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 3);
    *(unsigned char *)uint64_t v40 = 1;
    *(_OWORD *)(v40 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)v49;
    *(void *)(v40 + 24) = *(void *)&v49[16];
    uint64_t v28 = (void *)v43.__r_.__value_.__r.__words[0];
    if (v43.__r_.__value_.__r.__words[0])
    {
      v43.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
LABEL_57:
      operator delete(v28);
    }
  }
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
}

void sub_23F53C010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::setMaterialConstantsFromUsdPreviewSurface(int a1, pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  unint64_t v5 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v59, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 40));
  unint64_t v6 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v55, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 16));
  unint64_t v7 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v51, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 24));
  unint64_t v8 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v47, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 56));
  unint64_t v9 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v43, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 64));
  realityio::getBaseColorTintAndOpacity(&v63, this, a3);
  REMaterialAssetBuilderSetColor4F();
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v64, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v10, &v40);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = bswap64(0x9E3779B97F4A7C55* (v41 + ((v41 + (unint64_t)v40 + (v41 + (unint64_t)v40) * (v41 + (unint64_t)v40)) >> 1)));
  v42.__x_[0] = v11;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = i + 1812433253 * (v11 ^ (v11 >> 30));
    v42.__x_[i] = v11;
  }
  v42.__i_ = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
  if (v64.n128_u64[1]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64.n128_i64[1]);
  }
  std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v42);
  std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v42);
  std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v42);
  REMaterialAssetBuilderSetColor3F();
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v59)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2455D0E10](&v59) & 1) != 0)
  {
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v13) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v13 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyuint64_t String = (const void **)((*((void *)v13 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
    }
    BOOL v34 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, EmptyString);
    realityio::findTextureScaleFloat3((realityio *)&v59, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v34);
    __asm { FMOV            V3.4S, #1.0 }
    REMaterialAssetBuilderSetFloat4();
  }
  else
  {
    realityio::getShadeInputColor4WithFallback(&v64, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v59, (__n128)xmmword_23F7BDF00);
    REMaterialAssetBuilderSetColor3F();
    __asm { FMOV            V0.4S, #1.0 }
    REMaterialAssetBuilderSetFloat4();
  }
  REMaterialAssetBuilderSetFloat();
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2455D0E10](&v55) & 1) != 0)
  {
    unint64_t v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v20) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v20 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
      int64_t v21 = (const void **)((*((void *)v20 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      int64_t v21 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
    }
    BOOL v36 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v21);
    realityio::findTextureScaleFloat((realityio *)&v55, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v36);
    REMaterialAssetBuilderSetFloat();
  }
  else
  {
    unint64_t v22 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v22) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v64, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 16));
    unsigned int v40 = 0;
    realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v64, &v40);
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
    if (v64.n128_u64[1]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64.n128_i64[1]);
    }
    REMaterialAssetBuilderSetFloat();
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v51)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2455D0E10](&v51) & 1) != 0)
  {
    unsigned __int8 v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v23) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v23 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
      std::string::size_type v24 = (const void **)((*((void *)v23 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      std::string::size_type v24 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
    }
    BOOL v37 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v24);
    realityio::findTextureScaleFloat((realityio *)&v51, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v37);
    REMaterialAssetBuilderSetFloat();
  }
  else
  {
    unint64_t v25 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v25) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v64, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v25 + 24));
    unsigned int v40 = 1056964608;
    realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v64, &v40);
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
    if (v64.n128_u64[1]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64.n128_i64[1]);
    }
    REMaterialAssetBuilderSetFloat();
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v47)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2455D0E10](&v47) & 1) != 0)
  {
    std::string::size_type v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v26 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v27 = (const void **)((*((void *)v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v27 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
    }
    BOOL v38 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v27);
    realityio::findTextureScaleFloat((realityio *)&v47, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v38);
    REMaterialAssetBuilderSetFloat();
  }
  else
  {
    v64.n128_u32[0] = 0;
    realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v47, &v64);
    REMaterialAssetBuilderSetFloat();
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v43)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2455D0E10](&v43) & 1) != 0)
  {
    uint64_t v28 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v28) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v28 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
      long long v29 = (const void **)((*((void *)v28 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      long long v29 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
    }
    BOOL v39 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v29);
    realityio::findTextureScaleFloat((realityio *)&v43, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v39);
    REMaterialAssetBuilderSetFloat();
  }
  else
  {
    unint64_t v30 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v30) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v64, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v30 + 64));
    unsigned int v40 = 1008981770;
    realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v64, &v40);
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
    if (v64.n128_u64[1]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64.n128_i64[1]);
    }
    REMaterialAssetBuilderSetFloat();
  }
  unint64_t v31 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v31) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v64, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v31 + 72));
  unsigned int v40 = 0;
  realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v64, &v40);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
  if (v64.n128_u64[1]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64.n128_i64[1]);
  }
  REMaterialAssetBuilderSetFloat();
  unint64_t v32 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v32) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v64, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v32 + 168));
  unsigned int v40 = 1069547520;
  realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v64, &v40);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
  if (v64.n128_u64[1]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64.n128_i64[1]);
  }
  REMaterialAssetBuilderSetFloat();
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  if (v44) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
  }
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
  if (v48) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
  }
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
  if (v52) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v52);
  }
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
  if (v56) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56);
  }
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
  uint64_t result = v60;
  if (v60) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
  }
  return result;
}

void sub_23F53CA34(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&STACK[0x9D0]);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&STACK[0x9F0]);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v1 - 256));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v1 - 224));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v1 - 192));
  _Unwind_Resume(a1);
}

uint64_t *realityio::setFunctionConstantsFromScene(int a1, pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  v20[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&__p, this);
  BOOL v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v18, v2);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_
    && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "realityio:functionConstants");
  uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v5) {
      return std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v18, 0);
    }
  }
  else if (!ValueAtPath)
  {
    return std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v18, 0);
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(v5))
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtDictionary>(v5);
    MEMORY[0x2455CE980](&v17, v6);
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17);
    uint64_t v16 = v7;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17);
    uint64_t v10 = v9;
    while (1)
    {
      BOOL v11 = !v10 || v15 == v8;
      BOOL v12 = v11;
      if (v16 == v10 && v12) {
        break;
      }
      std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&__p, (long long *)(v15 + 32));
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v20))
      {
        pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
        REMaterialAssetBuilderSetFunctionConstant();
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> *,std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v15);
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v17, 0);
  }
  return std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v18, 0);
}

void sub_23F53CD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  BOOL v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         uint64_t result = *a1,
         v4)
      ? (BOOL v6 = result == 0)
      : (BOOL v6 = 1),
        v6))
  {
    uint64_t v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12VtDictionaryE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtDictionary>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t realityio::setFunctionConstantsFromUsdPreviewSurface(int a1, pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, uint64_t a3)
{
  unint64_t v5 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 32));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2455D0E10](&v28);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v6 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 88));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2455D0E10](&v28);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v7 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 40));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2455D0E10](&v28);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v8 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 24));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2455D0E10](&v28);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v9 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 16));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2455D0E10](&v28);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v10 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 184));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2455D0E10](&v28);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v11 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 192));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2455D0E10](&v28);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v12 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 80));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && MEMORY[0x2455D0E10](&v28))
  {
    unint64_t v14 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v14) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    realityio::isConnectedToBaseColorAlpha(this, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v14 + 80), v13);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v15 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v15 + 56));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2455D0E10](&v28);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  if (realityio::isRMABundled(a3))
  {
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
  }
  unint64_t v16 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v16) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 208));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && MEMORY[0x2455D0E10](&v28))
  {
    unint64_t v18 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v18) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    realityio::isConnectedToBaseColorAlpha(this, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v18 + 208), v17);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v19 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v19 + 56));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2455D0E10](&v28) & 1) != 0)
  {
    unint64_t v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v20) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v20 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyuint64_t String = (const void **)((*((void *)v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
    }
    BOOL v26 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, EmptyString);
    float TextureScaleFloat = realityio::findTextureScaleFloat((realityio *)&v28, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v26);
  }
  else
  {
    int v27 = 0;
    float TextureScaleFloat = realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28, &v27);
  }
  if (TextureScaleFloat > 0.0) {
    REMaterialAssetBuilderSetFunctionConstant();
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  unint64_t v23 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v28, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v23 + 72));
  int v27 = 0;
  float ShadeInputValueWith = realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28, &v27);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  uint64_t result = v29;
  if (v29) {
    uint64_t result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  }
  if (ShadeInputValueWith > 0.0) {
    return REMaterialAssetBuilderSetFunctionConstant();
  }
  return result;
}

void sub_23F53DA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::isRMABundled(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "metallic");
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1, (const void **)&__p);
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "occlusion");
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1, (const void **)&__p);
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "roughness");
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1, (const void **)&__p);
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "specularColor");
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1, (const void **)&__p);
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = a1 + 8;
  if (v6 == v2)
  {
    unint64_t v7 = 0;
  }
  else
  {
    realityio::TextureBuilder::TextureDataT::getOneTextureAsset(&__p, *(void **)(v2 + 56));
    unint64_t v7 = __p;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  }
  if (v6 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    realityio::TextureBuilder::TextureDataT::getOneTextureAsset(&__p, *(void **)(v4 + 56));
    unint64_t v8 = __p;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  }
  if (v6 == v5)
  {
    unint64_t v9 = 0;
  }
  else
  {
    realityio::TextureBuilder::TextureDataT::getOneTextureAsset(&__p, *(void **)(v5 + 56));
    unint64_t v9 = __p;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  }
  uint64_t v54 = v2;
  if (v6 == v3)
  {
    unint64_t v10 = 0;
  }
  else
  {
    realityio::TextureBuilder::TextureDataT::getOneTextureAsset(&__p, *(void **)(v3 + 56));
    unint64_t v10 = __p;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  }
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  if (v7) {
    uint64_t v13 = v7;
  }
  else {
    uint64_t v13 = v8;
  }
  if (!v13) {
    uint64_t v13 = v9;
  }
  if (v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v10;
  }
  if (v6 != v3 && v10 != v14)
  {
    uint64_t v3 = v6;
    unint64_t v10 = 0;
  }
  std::string __p = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  if (v7 == v14)
  {
    unint64_t v11 = (char *)operator new(8uLL);
    *(void *)unint64_t v11 = v7;
    unint64_t v12 = v11 + 8;
    uint64_t v56 = v11 + 8;
    uint64_t v57 = v11 + 8;
    std::string __p = v11;
  }
  if (v8 == v14)
  {
    uint64_t v16 = v12 - v11;
    uint64_t v17 = (v12 - v11) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      goto LABEL_125;
    }
    if (v16 >> 2 > v18) {
      unint64_t v18 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19) {
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v57, v19);
    }
    else {
      unint64_t v20 = 0;
    }
    int64_t v21 = &v20[8 * v17];
    unint64_t v22 = &v20[8 * v19];
    *(void *)int64_t v21 = v8;
    unint64_t v12 = v21 + 8;
    std::string::size_type v24 = (char *)__p;
    unint64_t v23 = v56;
    if (v56 != __p)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v21 - 1) = v25;
        v21 -= 8;
      }
      while (v23 != v24);
      unint64_t v23 = (char *)__p;
    }
    std::string __p = v21;
    uint64_t v56 = v12;
    uint64_t v57 = v22;
    if (v23) {
      operator delete(v23);
    }
    uint64_t v56 = v12;
  }
  if (v9 == v14)
  {
    if (v12 >= v57)
    {
      uint64_t v26 = (v12 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v26 + 1) >> 61) {
        goto LABEL_125;
      }
      unint64_t v27 = (v57 - (unsigned char *)__p) >> 2;
      if (v27 <= v26 + 1) {
        unint64_t v27 = v26 + 1;
      }
      if ((unint64_t)(v57 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v57, v28);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = &v29[8 * v26];
      uint64_t v31 = &v29[8 * v28];
      *(void *)uint64_t v30 = v9;
      unint64_t v12 = v30 + 8;
      unint64_t v33 = (char *)__p;
      unint64_t v32 = v56;
      if (v56 != __p)
      {
        do
        {
          uint64_t v34 = *((void *)v32 - 1);
          v32 -= 8;
          *((void *)v30 - 1) = v34;
          v30 -= 8;
        }
        while (v32 != v33);
        unint64_t v32 = (char *)__p;
      }
      std::string __p = v30;
      uint64_t v56 = v12;
      uint64_t v57 = v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(void *)unint64_t v12 = v9;
      v12 += 8;
    }
    uint64_t v56 = v12;
  }
  if (v10 != v14)
  {
LABEL_87:
    BOOL v39 = (char *)__p;
    goto LABEL_88;
  }
  if (v12 < v57)
  {
    *(void *)unint64_t v12 = v14;
    v12 += 8;
    goto LABEL_87;
  }
  uint64_t v35 = (v12 - (unsigned char *)__p) >> 3;
  if ((unint64_t)(v35 + 1) >> 61) {
LABEL_125:
  }
    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
  unint64_t v36 = (v57 - (unsigned char *)__p) >> 2;
  if (v36 <= v35 + 1) {
    unint64_t v36 = v35 + 1;
  }
  if ((unint64_t)(v57 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v37 = v36;
  }
  if (v37) {
    BOOL v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v57, v37);
  }
  else {
    BOOL v38 = 0;
  }
  BOOL v39 = &v38[8 * v35];
  unsigned int v40 = &v38[8 * v37];
  *(void *)BOOL v39 = v14;
  unint64_t v12 = v39 + 8;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v42 = (char *)__p;
  unsigned int v41 = v56;
  if (v56 != __p)
  {
    do
    {
      uint64_t v43 = *((void *)v41 - 1);
      v41 -= 8;
      *((void *)v39 - 1) = v43;
      v39 -= 8;
    }
    while (v41 != v42);
    unsigned int v41 = (char *)__p;
  }
  std::string __p = v39;
  uint64_t v56 = v12;
  uint64_t v57 = v40;
  if (v41)
  {
    operator delete(v41);
    goto LABEL_87;
  }
LABEL_88:
  BOOL v45 = v6 == v54 || v7 == v14;
  BOOL v47 = v6 == v4 || v8 == v14;
  BOOL v49 = v3 == v6 || v10 == v14;
  BOOL v50 = v9 == v14 || v6 == v5;
  if (!v50 || !v47 || !v45 || (unint64_t)(v12 - v39) < 9 || !v49)
  {
    if (v6 == v4
      || v6 == v54
      || v3 == v6
      || (uint64_t v53 = *(void *)(v54 + 56), v53 != *(void *)(v3 + 56)) && v53 != *(void *)(v4 + 56))
    {
      uint64_t v51 = 0;
      if (!v39) {
        return v51;
      }
      goto LABEL_116;
    }
  }
  uint64_t v51 = 1;
  if (v39)
  {
LABEL_116:
    uint64_t v56 = v39;
    operator delete(v39);
  }
  return v51;
}

void sub_23F53DF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::getShaderType(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  MEMORY[0x2455CF810]();
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v8 = MEMORY[0x263F906F0] + 16;
    if (v9
      && (*(unsigned char *)(v9 + 57) & 8) == 0
      && (*(unsigned int (**)(uint64_t *))(MEMORY[0x263F906F0] + 48))(&v8))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v8);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4)) {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      }
      if ((v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
      if (v5) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
      }
    }
    return MEMORY[0x2455CECB0](&v8);
  }
  return result;
}

void sub_23F53E094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MEMORY[0x2455CECB0](va);
  if ((*v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void realityio::gatherUVSetNamesInBindOrder(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  id v74 = 0;
  uint64_t v75 = 0;
  CFMutableDictionaryRef v73 = (uint64_t *)&v74;
  memset(&v72, 0, sizeof(v72));
  uint64_t v4 = *((void *)this + 1);
  if (v4
    && (*(unsigned char *)(v4 + 57) & 8) == 0
    && ((*(uint64_t (**)(realityio *, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *))(*(void *)this + 32))(this, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(this);
    uint64_t v6 = v71;
    if (v70 != v71)
    {
      uint64_t v7 = v70 + 16;
      while (1)
      {
        uint64_t v8 = v7 - 16;
        int v65 = *(_DWORD *)(v7 - 16);
        uint64_t v9 = *(void *)(v7 - 8);
        uint64_t v66 = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, (_DWORD *)v7);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, (_DWORD *)(v7 + 4));
        uint64_t v10 = *(void *)(v7 + 8);
        uint64_t v69 = v10;
        if ((v10 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v69 &= 0xFFFFFFFFFFFFFFF8;
        }
        realityio::findPrimWhichOriginatedConnection((realityio *)v61, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v65);
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v61)) {
          goto LABEL_112;
        }
        realityio::getShaderType((realityio *)&v28, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v61);
        int v11 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v11) {
          goto LABEL_112;
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        unint64_t v28 = (void *)(MEMORY[0x263F906F0] + 16);
        MEMORY[0x2455CF810](&v53, "st");
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v57, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
        if ((v53 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CECB0](&v28);
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v57)
          || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) == 0)
        {
          if ((v60 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_110;
        }
        realityio::findOriginalSourceAttribute((realityio *)&v57, (uint64_t)&v53);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53))
        {
          if (v53 != v57
            || v54 != v58
            || v55 != v59
            || (v56 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            break;
          }
        }
LABEL_104:
        if ((v56 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
        if (v54) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
        }
        if ((v60 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_110:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
        if (v58) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
        }
LABEL_112:
        if ((v64 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
        if (v62) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
        }
        if ((v69 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
        if (v66) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
        }
        v7 += 32;
        if (v8 + 32 == v6) {
          goto LABEL_126;
        }
      }
      int v48 = 1;
      uint64_t v49 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v52 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v43, &v54, &v55);
      realityio::getShaderType((realityio *)&v42, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v43);
      MEMORY[0x2455CF810](&v28, "UsdPrimvarReader_float2");
      uint64_t v12 = v42;
      uint64_t v13 = (atomic_uint *)((unint64_t)v28 & 0xFFFFFFFFFFFFFFF8);
      if ((v28 & 7) != 0) {
        atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8) == v13)
      {
        int v48 = v43;
        uint64_t v18 = v44;
        if (v44) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 48), 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = v49;
        uint64_t v49 = v18;
        if (v19) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v50, &v45);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v51, &v46);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v52, &v47);
      }
      else
      {
        MEMORY[0x2455CF810](&v28, "UsdTransform2d");
        uint64_t v14 = v42;
        unint64_t v15 = (atomic_uint *)((unint64_t)v28 & 0xFFFFFFFFFFFFFFF8);
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8) == v15)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v38 = MEMORY[0x263F906F0] + 16;
          MEMORY[0x2455CF810](&v34, "in");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v28, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
          if ((v34 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          MEMORY[0x2455CECB0](&v38);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
            && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
          {
            realityio::findOriginalSourceAttribute((realityio *)&v28, (uint64_t)&v38);
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38)
              && (v38 != v28
               || v39 != v29
               || v40 != __p
               || (v41 & 0xFFFFFFFFFFFFFFF8) != (v31 & 0xFFFFFFFFFFFFFFF8)))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v34, &v39, &v40);
              realityio::getShaderType((realityio *)&v76, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v34);
              MEMORY[0x2455CF810](&v33, "UsdPrimvarReader_float2");
              uint64_t v16 = v76;
              uint64_t v17 = (atomic_uint *)(v33 & 0xFFFFFFFFFFFFFFF8);
              if ((v33 & 7) != 0) {
                atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
              }
              if ((v76 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8) == v17) {
                pxrInternal__aapl__pxrReserved__::UsdPrim::operator=((uint64_t)&v48, (uint64_t)&v34);
              }
              if ((v37 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
              if (v35) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
              }
            }
            if ((v41 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
            if (v39) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
            }
          }
          if ((v31 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          if (v29) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
          }
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v48))
      {
LABEL_94:
        if ((v42 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v47 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
        if (v44) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
        }
        if ((v52 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v50);
        if (v49) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
        }
        goto LABEL_104;
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      unint64_t v28 = (void *)(MEMORY[0x263F906F0] + 16);
      MEMORY[0x2455CF810](&v34, "varname");
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v38, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CECB0](&v28);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38)
        || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
      {
LABEL_90:
        if ((v41 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
        if (v39) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
        }
        goto LABEL_94;
      }
      realityio::findOriginalSourceAttribute((realityio *)&v38, (uint64_t)&v34);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v34))
      {
LABEL_86:
        if ((v37 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
        if (v35) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
        }
        goto LABEL_90;
      }
      uint64_t v77 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
      if (!v77)
      {
LABEL_85:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v76);
        goto LABEL_86;
      }
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v76) & 1) == 0)
      {
        Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v76);
        {
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)&v28, (pxrInternal__aapl__pxrReserved__::VtValue *)&v76);
          std::string::size_type v24 = &v28;
          if (SHIBYTE(__p) < 0) {
            std::string::size_type v24 = v28;
          }
          NSLog(&cfstr_WarningInvalid.isa, v24);
          if (SHIBYTE(__p) < 0) {
            operator delete(v28);
          }
          goto LABEL_76;
        }
        unint64_t v22 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v76);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v76, v22);
      }
      unint64_t v23 = (const std::string *)pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v76);
      std::string::operator=(&v72, v23);
LABEL_76:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v27, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
      }
      else {
        std::string v27 = v72;
      }
      realityio::TexcoordID::TexcoordID((uint64_t)&v28, (uint64_t)&v27, -1, 0);
      std::__tree<realityio::TexcoordID>::__emplace_unique_key_args<realityio::TexcoordID,realityio::TexcoordID>(&v73, (realityio::TexcoordID *)&v28, (uint64_t)&v28);
      if (v32 < 0) {
        operator delete(__p);
      }
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      goto LABEL_85;
    }
LABEL_126:
    unint64_t v28 = &v70;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    int v25 = v75;
    if ((int)v75 >= 8) {
      int v25 = 8;
    }
    uint64_t v26 = v25;
    std::vector<realityio::TexcoordID>::reserve(a3, v25);
    unint64_t v28 = v73;
    std::__advance[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>>((void **)&v28, v26);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::back_insert_iterator<std::vector<realityio::TexcoordID>>>((uint64_t)&v65, v73, v28, a3);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  std::__tree<realityio::TexcoordID>::destroy((uint64_t)&v73, v74);
}

void sub_23F53EB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v63 - 112));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a42);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a46);
  if ((a50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a51);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a55);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a59);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a63);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v63 - 248));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v63 - 216));
  std::string __p = (void *)(v63 - 184);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v63 - 137) < 0) {
    operator delete(*(void **)(v63 - 160));
  }
  std::__tree<realityio::TexcoordID>::destroy(v63 - 136, *(void **)(v63 - 128));
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v4;
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20, (_DWORD *)(a2 + 20));
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(a1 + 24), (void *)(a2 + 24));
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 12) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void sub_23F53F094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(char *))(a11 + 32))(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<realityio::TexcoordID>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 48 * v6;
    std::vector<realityio::TexcoordID>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<realityio::TexcoordID>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_23F53F170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::TexcoordID>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::findFirstUVMeshAttributeNameFromShader(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2@<X1>, std::string *a3@<X8>)
{
  realityio::gatherUVSetNamesInBindOrder(this, a2, v9);
  if (v9[0] == v9[1])
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v9[0] + 8);
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v5 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyuint64_t String = (uint64_t)(v6 + 4);
    }
    else {
      Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    }
    if (*(char *)(EmptyString + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)EmptyString;
      a3->__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
    }
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v10 = (void **)v9;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100](&v10);
}

uint64_t realityio::getShaderID(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  *(void *)this = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v3, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v3)) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  uint64_t result = v4;
  if (v4) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  return result;
}

void sub_23F53F310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::uvNameAndTransformForTexturePrim(uint64_t a1, std::string *a2, _OWORD *a3, void *a4)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v80 = MEMORY[0x263F906F0] + 16;
  if (v81)
  {
    if ((*(unsigned char *)(v81 + 57) & 8) == 0)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t *))(MEMORY[0x263F906F0] + 48);
      if (v7(&v80))
      {
        realityio::getShaderID((realityio *)&v82, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v80);
        MEMORY[0x2455CF810](&v99, "UsdUVTexture");
        uint64_t v8 = v82;
        uint64_t v9 = (atomic_uint *)(v99 & 0xFFFFFFFFFFFFFFF8);
        if ((v99 & 7) != 0) {
          atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v82 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)v10 == v9)
        {
          MEMORY[0x2455CF810](&v82, "st");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v76, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v80, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v82);
          if ((v82 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v76)
            && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
          {
            realityio::findPrimWhichOriginatedConnection((realityio *)v72, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v76);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            uint64_t v70 = MEMORY[0x263F906F0] + 16;
            if (v71 && (*(unsigned char *)(v71 + 57) & 8) == 0 && (v7(&v70) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((uint64_t *)&v82, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v70);
              int IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82);
              if ((BYTE8(v83) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
              if (*((void *)&v82 + 1)) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v82 + 1));
              }
              if (IsValid)
              {
                realityio::getShaderID((realityio *)&v69, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v70);
                MEMORY[0x2455CF810](&v82, "UsdTransform2d");
                unint64_t v12 = v69 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v13 = (atomic_uint *)(v82 & 0xFFFFFFFFFFFFFFF8);
                if ((v82 & 7) != 0) {
                  atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
                }
                if ((atomic_uint *)v12 == v13)
                {
                  MEMORY[0x2455CF810](&v99, "scale");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v82, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v70, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
                  int v64 = v82;
                  uint64_t v65 = *((void *)&v82 + 1);
                  if (*((void *)&v82 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v82 + 1) + 48), 1uLL, memory_order_relaxed);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v66, &v83);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, (_DWORD *)&v83 + 1);
                  uint64_t v68 = *((void *)&v83 + 1);
                  if ((BYTE8(v83) & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    v68 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((BYTE8(v83) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
                  if (*((void *)&v82 + 1)) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v82 + 1));
                  }
                  if ((v99 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  MEMORY[0x2455CF810](&v99, "rotation");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v82, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v70, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
                  int v59 = v82;
                  uint64_t v60 = *((void *)&v82 + 1);
                  if (*((void *)&v82 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v82 + 1) + 48), 1uLL, memory_order_relaxed);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v61, &v83);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v62, (_DWORD *)&v83 + 1);
                  uint64_t v63 = *((void *)&v83 + 1);
                  if ((BYTE8(v83) & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    v63 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((BYTE8(v83) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
                  if (*((void *)&v82 + 1)) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v82 + 1));
                  }
                  if ((v99 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  MEMORY[0x2455CF810](&v99, "translation");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v82, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v70, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
                  int v54 = v82;
                  uint64_t v55 = *((void *)&v82 + 1);
                  if (*((void *)&v82 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v82 + 1) + 48), 1uLL, memory_order_relaxed);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v56, &v83);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v57, (_DWORD *)&v83 + 1);
                  uint64_t v58 = *((void *)&v83 + 1);
                  if ((BYTE8(v83) & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    v58 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((BYTE8(v83) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
                  if (*((void *)&v82 + 1)) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v82 + 1));
                  }
                  if ((v99 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v64, (uint64_t)&v82);
                  if ((_BYTE)v82)
                  {
                    _D9 = *((void *)&v82 + 1);
                  }
                  else
                  {
                    __asm { FMOV            V9.2S, #1.0 }
                    if (v85 < 0) {
                      operator delete(*((void **)&v83 + 1));
                    }
                  }
                  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v59, (uint64_t)&v82);
                  if ((_BYTE)v82)
                  {
                    float v19 = *((float *)&v82 + 2);
                  }
                  else
                  {
                    float v19 = 0.0;
                    if (v85 < 0) {
                      operator delete(*((void **)&v83 + 1));
                    }
                  }
                  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v54, (uint64_t)&v82);
                  if ((_BYTE)v82)
                  {
                    uint64_t v20 = *((void *)&v82 + 1);
                  }
                  else
                  {
                    uint64_t v20 = 0;
                    if (v85 < 0) {
                      operator delete(*((void **)&v83 + 1));
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v53, 1.0);
                  *(void *)&long long v82 = _D9;
                  DWORD2(v82) = 1065353216;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale();
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v50, 1.0);
                  float v21 = v19 / 180.0 * 3.14159265;
                  __float2 v22 = __sincosf_stret(v21 * 0.5);
                  _Q0 = vmulq_n_f32((float32x4_t)xmmword_23F7BA720, v22.__sinval);
                  _S2 = _Q0.i32[1];
                  _S4 = _Q0.i32[2];
                  __asm { FMLS            S3, S4, V0.S[2] }
                  float v27 = vmlas_n_f32(vmuls_lane_f32(v22.__cosval, _Q0, 2), _Q0.f32[1], _Q0.f32[0]);
                  float v28 = vmlas_n_f32(-(float)(v22.__cosval * _Q0.f32[1]), _Q0.f32[2], _Q0.f32[0]);
                  float v29 = vmlas_n_f32(-(float)(v22.__cosval * _Q0.f32[2]), _Q0.f32[1], _Q0.f32[0]);
                  __asm
                  {
                    FMLA            S5, S2, V0.S[1]
                    FMLS            S5, S0, V0.S[0]
                    FMLA            S18, S4, V0.S[1]
                    FMLA            S7, S0, V0.S[2]
                    FMLA            S19, S4, V0.S[1]
                    FMLA            S1, S4, V0.S[2]
                  }
                  *(float *)&long long v50 = _S3 + (float)(v22.__cosval * v22.__cosval);
                  *((float *)&v50 + 1) = v27 + v27;
                  __asm { FMLS            S1, S0, V0.S[0] }
                  *((float *)&v50 + 2) = v28 + v28;
                  *((float *)&v50 + 3) = v29 + v29;
                  LODWORD(v51) = _S5;
                  *((float *)&v51 + 1) = _S18 + _S18;
                  __asm { FMLS            S1, S2, V0.S[1] }
                  *((float *)&v51 + 2) = _S7 + _S7;
                  *((float *)&v51 + 3) = _S19 + _S19;
                  int v52 = _S1;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v47, 1.0);
                  *((void *)&v48 + 1) = v20;
                  long long v82 = v47;
                  long long v83 = v48;
                  int v84 = v49;
                  *((float *)&v83 + 3) = -*((float *)&v20 + 1);
                  long long v99 = v50;
                  long long v100 = v51;
                  int v101 = v52;
                  *((float *)&v99 + 1) = -*((float *)&v50 + 1);
                  *((float *)&v99 + 3) = -*((float *)&v50 + 3);
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v102, 1.0);
                  *((void *)&v103 + 1) = 0xBF80000000000000;
                  int v104 = 1065353216;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v95, 1.0);
                  uint64_t v97 = 0x3F80000000000000;
                  int v98 = 1065353216;
                  long long v86 = v102;
                  long long v87 = v103;
                  int v88 = v104;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  long long v89 = v86;
                  long long v90 = v87;
                  int v91 = v88;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  long long v92 = v89;
                  long long v93 = v90;
                  int v94 = v91;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  *(_OWORD *)int v46 = v92;
                  *(_OWORD *)&v46[16] = v93;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  *(void *)&long long v38 = *(void *)v46;
                  *((void *)&v38 + 1) = *(void *)&v46[12];
                  *a3 = v38;
                  *a4 = *(void *)&v46[24];
                  MEMORY[0x2455CF810](&v99, "in");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v82, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v70, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
                  if ((v99 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82)
                    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
                    && MEMORY[0x2455D0E10](&v82))
                  {
                    realityio::findOriginalSourceAttribute((realityio *)&v82, (uint64_t)&v99);
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99))
                    {
                      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v102, (uint64_t *)&v99 + 1, &v100);
                      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                      uint64_t v95 = MEMORY[0x263F906F0] + 16;
                      pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v102);
                      if (v96
                        && (*(unsigned char *)(v96 + 57) & 8) == 0
                        && (*(unsigned int (**)(uint64_t *))(v95 + 32))(&v95))
                      {
                        pxrInternal__aapl__pxrReserved__::UsdShadeShader::operator=((uint64_t)&v70, (uint64_t)&v95);
                        realityio::getShaderID((realityio *)&v102, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v70);
                        if ((v69 & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        uint64_t v69 = v102;
                      }
                      MEMORY[0x2455CECB0](&v95);
                    }
                    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v99);
                  }
                  if ((BYTE8(v83) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
                  if (*((void *)&v82 + 1)) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v82 + 1));
                  }
                  if ((v58 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
                  if (v55) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
                  }
                  if ((v63 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
                  if (v60) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
                  }
                  if ((v68 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
                  if (v65) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65);
                  }
                }
                MEMORY[0x2455CF810](&v82, "UsdPrimvarReader_float2");
                unint64_t v39 = v69 & 0xFFFFFFFFFFFFFFF8;
                unsigned int v40 = (atomic_uint *)(v82 & 0xFFFFFFFFFFFFFFF8);
                if ((v82 & 7) != 0) {
                  atomic_fetch_add_explicit(v40, 0xFFFFFFFE, memory_order_release);
                }
                if ((atomic_uint *)v39 == v40)
                {
                  MEMORY[0x2455CF810](&v102, "varname");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v99, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v70, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v102);
                  LODWORD(v82) = v99;
                  *((void *)&v82 + 1) = *((void *)&v99 + 1);
                  if (*((void *)&v99 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v99 + 1) + 48), 1uLL, memory_order_relaxed);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v83, &v100);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v83 + 1, (_DWORD *)&v100 + 1);
                  *((void *)&v83 + 1) = *((void *)&v100 + 1);
                  if ((BYTE8(v100) & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v100 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    *((void *)&v83 + 1) &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((BYTE8(v100) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v100 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
                  if (*((void *)&v99 + 1)) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v99 + 1));
                  }
                  if ((v102 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82))
                  {
                    realityio::findOriginalSourceAttribute((realityio *)&v82, (uint64_t)&v99);
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99)
                      && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v99))
                    {
                      *((void *)&v102 + 1) = 0;
                      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
                      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v102);
                      {
                        int v43 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v102);
                        uint64_t v44 = (const std::string *)pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(v43);
                        std::string::operator=(a2, v44);
                      }
                      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102);
                    }
                    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v99);
                  }
                  if ((BYTE8(v83) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
                  if (*((void *)&v82 + 1)) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v82 + 1));
                  }
                }
                if ((v69 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
            }
            MEMORY[0x2455CECB0](&v70);
            if ((v75 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74);
            if (v73) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v73);
            }
          }
          if ((v79 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v78);
          if (v77) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v77);
          }
        }
      }
    }
  }
  return MEMORY[0x2455CECB0](&v80);
}

void sub_23F53FFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  MEMORY[0x2455CECB0](v57 - 248);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v57 - 208));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a57);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a30);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a34);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a38);
  if ((a42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](&a43);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a46);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a50);
  MEMORY[0x2455CECB0](&a54);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v4;
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20, (_DWORD *)(a2 + 20));
  return a1;
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23)) {
      return 1;
    }
    return memcmp(a1, __s, v4) != 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    a1 = (void *)*a1;
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t *realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (IsA) {
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (IsA) {
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (IsA) {
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((IsA & 1) != 0
    || (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)IsA),
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
        uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(),
        (IsA & 1) != 0)
    || (pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)IsA),
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
        uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(),
        IsA))
  {
LABEL_7:
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)IsA);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    uint64_t v38 = a2;
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      int v8 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(void *)&long long v51 = MEMORY[0x263F90690] + 16;
      BOOL isCatmullClarkSurface = realityio::isCatmullClarkSurface(v8, v9);
      MEMORY[0x2455CE7A0](&v51);
    }
    else
    {
      BOOL isCatmullClarkSurface = 0;
    }
    long long v45 = 0uLL;
    *(void *)&long long v46 = 0;
    BOOL v62 = 0;
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)&long long v51 = MEMORY[0x263F906B0] + 16;
    int BoundSubsetsAndCoverage = realityio::getBoundSubsetsAndCoverage(v11, (void **)&v45, &v62);
    MEMORY[0x2455CE8E0](&v51);
    if ((isCatmullClarkSurface & BoundSubsetsAndCoverage) == 1)
    {
      if (v62)
      {
        uint64_t v14 = *((void *)&v45 + 1);
        uint64_t v13 = v45;
        for (LOWORD(isCatmullClarkSurface) = 1; v13 != v14; v13 += 24)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((void *)&v52 + 1) = 0;
          *(void *)&long long v51 = MEMORY[0x263F907A0] + 16;
          unint64_t v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
          if (!v15) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v51, v15, 0);
          if (realityio::isMaterialX((realityio *)&v48, v16)) {
            LOWORD(isCatmullClarkSurface) = 0;
          }
          MEMORY[0x2455CEF40](&v48);
          MEMORY[0x2455CF4B0](&v51);
        }
      }
      else
      {
        LOWORD(isCatmullClarkSurface) = 0;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((void *)&v52 + 1) = 0;
    *(void *)&long long v51 = MEMORY[0x263F907A0] + 16;
    uint64_t v17 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
    if (!v17) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v51, v17, 0);
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v48, &v42, &v43);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v48, &v61);
    uint64_t v18 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a3, &v61);
    if (a3 + 1 == v18)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v59, &v61);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v59 + 1, (_DWORD *)&v61 + 1);
      __int16 v60 = !isCatmullClarkSurface || isCatmullClarkSurface << 8;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>(a3, &v59, (uint64_t)&v59);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
    }
    else
    {
      unsigned int v19 = *((unsigned __int16 *)v18 + 18);
      BOOL v20 = !isCatmullClarkSurface;
      if (*((_WORD *)v18 + 18)) {
        BOOL v20 = 1;
      }
      LOBYTE(v59) = v20;
      BOOL v21 = v19 > 0xFF || isCatmullClarkSurface;
      BYTE1(v59) = v21;
      std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert_or_assign[abi:ne180100]<std::pair<BOOL,BOOL>&>(a3, (uint64_t)&v61, &v59);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
    if ((BYTE8(v49) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (*((void *)&v48 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v48 + 1));
    }
    MEMORY[0x2455CEF40](v41);
    __float2 v22 = (void ***)MEMORY[0x2455CF4B0](&v51);
    uint64_t v24 = *((void *)&v45 + 1);
    for (uint64_t i = v45; i != v24; i += 24)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *((void *)&v52 + 1) = 0;
      *(void *)&long long v51 = MEMORY[0x263F907A0] + 16;
      int v25 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
      if (!v25) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v51, v25, 0);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v48, &v42, &v43);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v48, &v61);
      uint64_t v26 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a3, &v61);
      if (a3 + 1 == v26)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v59, &v61);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v59 + 1, (_DWORD *)&v61 + 1);
        __int16 v60 = !isCatmullClarkSurface || isCatmullClarkSurface << 8;
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>(a3, &v59, (uint64_t)&v59);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
      }
      else
      {
        BOOL v27 = isCatmullClarkSurface;
        BOOL v28 = !isCatmullClarkSurface;
        unsigned int v29 = *((unsigned __int16 *)v26 + 18);
        if (*((_WORD *)v26 + 18)) {
          BOOL v28 = 1;
        }
        LOBYTE(v59) = v28;
        if (v29 > 0xFF) {
          BOOL v27 = 1;
        }
        BYTE1(v59) = v27;
        std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert_or_assign[abi:ne180100]<std::pair<BOOL,BOOL>&>(a3, (uint64_t)&v61, &v59);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
      if ((BYTE8(v49) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
      if (*((void *)&v48 + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v48 + 1));
      }
      MEMORY[0x2455CEF40](v41);
      __float2 v22 = (void ***)MEMORY[0x2455CF4B0](&v51);
    }
    *(void *)&long long v51 = &v45;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](v22);
    a2 = v38;
  }
  long long v51 = 0uLL;
  LOBYTE(v52) = 0;
  uint64_t v30 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v51, 0);
  *(void *)&long long v49 = *(void *)(v30 + 16);
  long long v48 = *(_OWORD *)v30;
  long long v51 = v48;
  LOBYTE(v52) = v49;
  uint64_t v31 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v51, 1);
  *(void *)&long long v46 = *(void *)(v31 + 16);
  long long v45 = *(_OWORD *)v31;
  long long v51 = v45;
  LOBYTE(v52) = v46;
  char v32 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v51, 0x100000005);
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  uint64_t v35 = v32[2];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  *(void *)&long long v48 = v33 & 0xFFFFFFFFFFFFDFFFLL;
  *((void *)&v48 + 1) = v34 | 0x2000;
  *(void *)&long long v49 = v35;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(a2, (uint64_t *)&v48, (uint64_t)&v51);
  *(void *)&long long v48 = v51;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v48 + 2, (_DWORD *)&v51 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v48 + 3, (_DWORD *)&v51 + 3);
  long long v49 = v52;
  uint64_t v50 = v53;
  *(void *)&long long v45 = v54;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v45 + 2, &v55);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v45 + 3, &v56);
  long long v46 = v57;
  uint64_t v47 = v58;
  while (v48 != v45 || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v49, (uint64_t)&v46))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v48, (uint64_t)v41);
    unint64_t v39 = *(atomic_uint **)a1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v39);
    realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap(v40, &v39, v41, a3);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)v40, (void *)v40[1]);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v39);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
    if (v42) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v48);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51 + 8);
  return std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::map[abi:ne180100](a4, (uint64_t)a3);
}

void sub_23F540C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::~pair(v29 - 112);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v29 - 100));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a29);
  MEMORY[0x2455CEF40](&a19);
  MEMORY[0x2455CF4B0](v29 - 192);
  *(void *)(v29 - 192) = &a23;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 192));
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert_or_assign[abi:ne180100]<std::pair<BOOL,BOOL>&>(uint64_t **a1, uint64_t a2, _WORD *a3)
{
  int v7 = (uint64_t *)(a1 + 1);
  uint64_t v6 = a1[1];
  int v8 = (uint64_t *)(a1 + 1);
  if (!v6) {
    goto LABEL_8;
  }
  int v8 = (uint64_t *)(a1 + 1);
  do
  {
    int v9 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((uint64_t *)((char *)v6 + 28), (void *)a2);
    int v10 = (uint64_t **)(v6 + 1);
    if (!v9)
    {
      int v10 = (uint64_t **)v6;
      int v8 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v8 == v7
    || (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)a2, (uint64_t *)((char *)v8 + 28)) & 1) != 0)
  {
LABEL_8:
    uint64_t v11 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, v8, &v17, &v16, (void *)a2);
    if (!*v11)
    {
      BOOL v12 = (uint64_t **)v11;
      uint64_t v13 = operator new(0x28uLL);
      v14[1] = v7;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v13 + 7, (_DWORD *)a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v13 + 8, (_DWORD *)(a2 + 4));
      *((_WORD *)v13 + 1pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *a3;
      char v15 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v17, v12, (uint64_t *)v13);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    }
  }
  else
  {
    *((_WORD *)v8 + 1pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *a3;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *this)
{
}

atomic_uint **realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  uint64_t v4 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v13 = (atomic_uint *)*a1;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v13);
  int v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v9, v5);
  realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v13, (uint64_t)&v9, (uint64_t **)a2, (uint64_t *)&v14);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(a2, *(void **)(a2 + 8));
  uint64_t v6 = v15;
  *(void *)a2 = v14;
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v6;
  uint64_t v7 = v16;
  *(void *)(a2 + 16) = v16;
  if (v7)
  {
    uint64_t v6[2] = v4;
    uint64_t v14 = &v15;
    char v15 = 0;
    uint64_t v16 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    *(void *)a2 = v4;
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)&v14, v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  }
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v13);
}

void sub_23F541078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a13);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(v13, *(void **)(v13 + 8));
  _Unwind_Resume(a1);
}

void realityio::MaterialAssetBuilder::~MaterialAssetBuilder(void **this)
{
  realityio::MaterialAssetBuilder::~MaterialAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F3331B8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 44));
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  realityio::MaterialAssetDataT::~MaterialAssetDataT((realityio::MaterialAssetDataT *)(this + 35));
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  uint64_t v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

void realityio::MaterialAssetDataT::~MaterialAssetDataT(realityio::MaterialAssetDataT *this)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::MaterialAssetDataT::MaterialAssetDataT(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4)
{
  int v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, a2 + 1);
  uint64_t v9 = *a3;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *a3;
  if (v9) {
    RERetain();
  }
  uint64_t v10 = *a4;
  *(void *)(a1 + 16) = *a4;
  if (v10) {
    RERetain();
  }
  return a1;
}

void sub_23F5411A8(_Unwind_Exception *a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

BOOL realityio::isConnectedToBaseColorAlpha(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unint64_t v5 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v23, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 32));
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v19, this, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v23)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && MEMORY[0x2455D0E10](&v23)
    && (MEMORY[0x2455D0E10](&v19) & 1) != 0)
  {
    realityio::findPrimWhichOriginatedConnection((realityio *)v15, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v23);
    realityio::findPrimWhichOriginatedConnection((realityio *)v11, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v19);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v15)
      && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v11))
    {
      realityio::getFileResolvedPath(&v10);
      realityio::getFileResolvedPath(&v9);
      if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v10, (unsigned __int8 *)&v9))
      {
        realityio::findOriginalSourceAttributeName(&__p, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v19);
        BOOL v6 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "a");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        BOOL v6 = 0;
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      BOOL v6 = 0;
    }
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    if (v12) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
    }
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    if (v16) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  if (v20) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  if (v24) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  }
  return v6;
}

void sub_23F54141C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a25);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a29);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v29 - 80));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v29 - 48));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&this[1], (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)a2 + 24));
  return this;
}

void sub_23F541548(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::TextureBuilder::TextureDataT::getOneTextureAsset(void *this, void *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    *this = v2;
    return (void *)RERetain();
  }
  if (a2[4])
  {
    uint64_t v3 = *(void *)(a2[2] + 56);
    *this = v3;
    if (v3) {
      return (void *)RERetain();
    }
  }
  else
  {
    *this = 0;
  }
  return this;
}

uint64_t realityio::TexcoordID::TexcoordID(uint64_t a1, uint64_t a2, int a3, char a4)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  int v8 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 0;
  realityio::TexcoordID::setIndex((realityio::TexcoordID *)a1, a3);
  *(unsigned char *)(a1 + 40) = a4;
  MEMORY[0x2455CF830](&v10, a2);
  if (&v10 == v8)
  {
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *int v8 = v10;
  }
  realityio::TexcoordID::computeNormalizedName((realityio::TexcoordID *)a1);
  if (a3 == -1) {
    realityio::TexcoordID::getIndexFromName((realityio::TexcoordID *)a1);
  }
  return a1;
}

void sub_23F541674(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  if ((*v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void realityio::TexcoordID::setIndex(realityio::TexcoordID *this, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 < 8)
  {
    *((_DWORD *)this + 1) = a2;
    if (a2 != -1 && !*((void *)this + 1))
    {
      realityio::TexcoordID::computeNormalizedName(this);
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(realityio::logObjects(this) + 24);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109376;
      v4[1] = a2;
      __int16 v5 = 1024;
      int v6 = 7;
      _os_log_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_DEFAULT, "Attempt to use a material buffer with index %d, which is greater that the largest allowed value %d.", (uint8_t *)v4, 0xEu);
    }
  }
}

void sub_23F5417B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void **std::__advance[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>>(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v7 = *result;
    do
    {
      int v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          long long v4 = v8;
          int v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          uint64_t v7 = v4;
        }
        while (v5);
      }
      uint64_t v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          long long v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          long long v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  *uint64_t result = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  char v8 = 1;
  if ((pxrInternal__aapl__pxrReserved__::operator==(a1, (uint64_t)v7) & 1) == 0)
  {
    uint64_t v4 = 1 << a2;
    if ((*(void *)a1 & (1 << a2)) != 0)
    {
      if ((BYTE4(a2) & 1) == ((*(void *)(a1 + 8) & v4) != 0))
      {
        *(void *)a1 = 0;
        *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
        *(unsigned char *)(a1 + 16) = 1;
      }
    }
    else
    {
      *(void *)a1 |= v4;
      if ((a2 & 0x100000000) != 0) {
        uint64_t v5 = *(void *)(a1 + 8) & ~v4;
      }
      else {
        uint64_t v5 = *(void *)(a1 + 8) | v4;
      }
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v15 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, (_DWORD *)(a1 + 20));
  if (!pxrInternal__aapl__pxrReserved__::Usd_MoveToChild<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, 0, a2))
  {
    char v15 = 0;
    uint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v13, (int *)&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::UsdPrimSiblingIterator((uint64_t)v10, &v15, &v13, (long long *)a2);
  uint64_t v12 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::UsdPrimSiblingIterator((uint64_t)v8, &v12, &v7, (long long *)a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::UsdPrimSubtreeRange(a3, (uint64_t)v10, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_23F541A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&a15);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 - 64));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::UsdPrimSiblingIterator(uint64_t a1, void *a2, _DWORD *a3, long long *a4)
{
  *(void *)a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  long long v7 = *a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  if (*(void *)a1
    && !pxrInternal__aapl__pxrReserved__::Usd_EvalPredicate<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((uint64_t *)(a1 + 16), a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)a1);
  }
  return a1;
}

void sub_23F541B38(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *this)
{
  uint64_t v2 = (char *)this + 8;
  uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)this, (pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)((char *)this + 8), 0, (uint64_t *)this + 2);
  if (result)
  {
    *(void *)this = 0;
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v2, (int *)&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, &v6, (_DWORD *)this + 2);
  uint64_t result = v6;
  if (v6) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return result;
}

void sub_23F541C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>::New()
{
}

void sub_23F541DE8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4005C00B59);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::~UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  unint64_t v39 = (void **)((char *)this + 304);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v39);
  uint64_t v2 = *((void *)this + 37);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 36);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 35);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 34);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 33);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 32);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 31);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 30);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 29);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 28);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 27);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 26);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 25);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 24);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 23);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 22);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 21);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 20);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 19);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 18);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 17);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 16);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 15);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 14);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 13);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 12);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 11);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 10);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 9);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 8);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 7);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 6);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *((void *)this + 5);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *((void *)this + 4);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *((void *)this + 3);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *((void *)this + 2);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *((void *)this + 1);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>>,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<std::string>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<std::string>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0) {
      operator delete(*(void **)result);
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F542D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void **a33,uint64_t a34,char a35)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a33);
  uint64_t v45 = 248;
  while (1)
  {
    uint64_t v46 = *(void *)(&a35 + v45);
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v45 -= 8;
    if (v45 == -8)
    {
      if ((*v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v35, 0x60C40ADBF550FLL);
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F543154()
{
}

void sub_23F54315C()
{
}

void sub_23F543164()
{
}

void sub_23F54316C()
{
}

void sub_23F543174()
{
}

void sub_23F54317C()
{
}

void sub_23F543184()
{
}

void sub_23F54318C()
{
}

void sub_23F543194()
{
}

void sub_23F54319C()
{
}

void sub_23F5431A4()
{
}

void sub_23F5431AC()
{
}

void sub_23F5431B4()
{
}

void sub_23F5431BC()
{
}

void sub_23F5431C4()
{
}

void sub_23F5431CC()
{
}

void sub_23F5431D4()
{
}

void sub_23F5431DC()
{
}

void sub_23F5431E4()
{
}

void sub_23F5431EC()
{
}

void sub_23F5431F4()
{
}

void sub_23F5431FC()
{
}

void sub_23F543204()
{
}

void sub_23F54320C()
{
}

void std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__func()
{
}

void *std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F333230;
  return result;
}

void std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F333230;
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::operator()@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v34, this, a2);
  memset(v32, 0, sizeof(v32));
  int v33 = 1065353216;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v34)) {
    goto LABEL_55;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v64, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v34);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(&v64);
  if (v4 & 1 | (unint64_t)v3)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v64);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer((uint64_t *)&v54, v5);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v54);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v63, v6);
    uint64_t v7 = *((void *)&v54 + 1);
    if (*((void *)&v54 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v54 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*((void *)v8 + 11) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
    }
    uint64_t ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    uint64_t v11 = (uint64_t)ValueAtPath;
    if (!ValueAtPath || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath)) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(v11 + 8);
    if ((v12 & 4) != 0) {
      uint64_t v11 = (*(uint64_t (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(v11);
    }
    if (*(unsigned char *)v11)
    {
      BOOL v9 = 1;
    }
    else
    {
LABEL_17:
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v64);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v59, v13);
      long long v54 = 0uLL;
      LOBYTE(v55) = 1;
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator|=((uint64_t)&v54, 0);
      long long v52 = *(_OWORD *)v14;
      uint64_t v53 = *(void *)(v14 + 16);
      long long v54 = v52;
      LOBYTE(v55) = v53;
      uint64_t v15 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator|=((uint64_t)&v54, 8);
      long long v16 = *(_OWORD *)v15;
      uint64_t v48 = *(void *)(v15 + 16);
      long long v47 = v16;
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v57, (uint64_t)&v59, &v47);
      tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::concurrent_unordered_base((uint64_t)&v54, 8uLL, &v52);
      tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::concurrent_unordered_base((uint64_t)&v52, 8uLL, &v47);
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v57, (uint64_t)&v47);
      while (1)
      {
        *(void ***)&long long v44 = v57[1];
        *((void *)&v44 + 1) = v57;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        LODWORD(v46) = 0;
        WORD2(v46) = 0;
        if (v47 == v44)
        {
          BOOL v9 = 1;
          if (v48 == v45 && !v49 && !v50) {
            BOOL v9 = v51 != 0;
          }
        }
        else
        {
          BOOL v9 = 1;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
        if (!v9) {
          break;
        }
        uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v47, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v44);
        pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(v17);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        {
          int IsA = 1;
        }
        else
        {
          uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v47, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)v40);
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v19);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((v43 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
          if (v41) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
          }
        }
        if ((v46 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
        if (*((void *)&v44 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v44 + 1));
        }
        if (IsA)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v47, (uint64_t)v40);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v46 = 0;
          *(void *)&long long v44 = MEMORY[0x263F907A0] + 16;
          if ((v43 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
          if (v41) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
          }
          if (!atomic_load(&realityio::tokens::MaterialAssetBuilderTokens)) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v40, &v39);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v34, &v38);
          uint64_t v21 = v38;
          uint64_t v22 = v39;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
          MEMORY[0x2455CEF40](v40);
          MEMORY[0x2455CF4B0](&v44);
          if (v22 == v21) {
            break;
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v47);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
      tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)&v52, v23);
      tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)&v54, v24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
      if ((v62 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
      if (v60) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
      }
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v63, 0);
  }
  else
  {
    BOOL v9 = 0;
  }
  uint64_t v25 = v65;
  if (v65 && atomic_fetch_add_explicit((atomic_uint *volatile)(v65 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  if (v9)
  {
    if (realityio::hasMaterialXSurface((realityio *)&v34, v4))
    {
      realityio::generateMtlxInputsDescriptorPaths((realityio *)&v34, a3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      realityio::createMaterialInputs((const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v59, (uint64_t)&v52);
      uint64_t v27 = (_OWORD *)v52;
      if ((long long *)v52 != (long long *)((char *)&v52 + 8))
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v54, (_DWORD *)v27 + 8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v54 + 1, (_DWORD *)v27 + 9);
          *((void *)&v54 + 1) = 0;
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::string *)((char *)&v54 + 8), *((long long **)v27 + 5), *((long long **)v27 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v27 + 6) - *((void *)v27 + 5)) >> 4));
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t)v32, (unsigned int *)&v54, &v54);
          v57[0] = (void **)&v54 + 1;
          std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v57);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
          uint64_t v28 = (void *)*((void *)v27 + 1);
          if (v28)
          {
            do
            {
              uint64_t v29 = v28;
              uint64_t v28 = (void *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              uint64_t v29 = (_OWORD *)*((void *)v27 + 2);
              BOOL v30 = *(void *)v29 == (void)v27;
              uint64_t v27 = v29;
            }
            while (!v30);
          }
          uint64_t v27 = v29;
        }
        while (v29 != (long long *)((char *)&v52 + 8));
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t)v32, (unsigned int *)&v59, &v59);
      }
      std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set(a3, (uint64_t)v32);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(*((void **)&v52 + 1));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
    }
  }
  else
  {
LABEL_55:
    std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set(a3, (uint64_t)v32);
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v32);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  uint64_t result = v35;
  if (v35) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
  }
  return result;
}

void sub_23F5439C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(a36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v36 - 144);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)&a11);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a19);
  if (a18) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target_type()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimRange *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, (_DWORD *)this + 5);
  int v5 = *((_DWORD *)this + 12);
  *(void *)a2 = v4;
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = this;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), &v8);
  *(_DWORD *)(a2 + 24) = v5;
  *(_WORD *)(a2 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *a2@<X8>)
{
  uint64_t v8 = *(void *)a1;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v4, &v8, (_DWORD *)(a1 + 16));
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::_PtrProxy(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v4);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  uint64_t result = v5;
  if (v5) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return result;
}

void sub_23F543EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, &v6, (_DWORD *)(a1 + 16));
  uint64_t result = v6;
  if (v6) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return result;
}

void sub_23F543F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (*pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                          + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::_FetchPointer;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::_FetchPointer(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                + 14))
    return *a1;
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator|=(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  char v8 = 0;
  if ((pxrInternal__aapl__pxrReserved__::operator==(a1, (uint64_t)v7) & 1) == 0)
  {
    uint64_t v4 = 1 << a2;
    if ((*(void *)a1 & (1 << a2)) != 0)
    {
      if (((a2 & 0x100000000) == 0) == ((*(void *)(a1 + 8) & v4) != 0))
      {
        *(void *)a1 = 0;
        *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
        *(unsigned char *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
      }
    }
    else
    {
      *(void *)a1 |= v4;
      if ((a2 & 0x100000000) != 0) {
        uint64_t v5 = *(void *)(a1 + 8) | v4;
      }
      else {
        uint64_t v5 = *(void *)(a1 + 8) & ~v4;
      }
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange(uint64_t a1, uint64_t a2, void *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(v6 + 40) & 7;
  unint64_t v8 = *(void *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    goto LABEL_21;
  }
  if (!v7 || v8 == 0)
  {
LABEL_20:
    unint64_t v8 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v8 + 40);
    unint64_t v8 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 7) == 0 && v8 != 0) {
      break;
    }
    if (v8) {
      BOOL v13 = (v11 & 7) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_21:
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::_Init(a1, v6, v8, (_DWORD *)(a2 + 16), a3);
  return a1;
}

void sub_23F544154(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::_Init(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = a3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20, a4 + 1);
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1];
  if (*(void *)a1)
  {
    uint64_t v10 = a5[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v8 & 0x2000) != 0 || (v9 & 0x2000) == 0))
    {
      v8 |= 0x2000uLL;
      v9 &= ~0x2000uLL;
    }
  }
  else
  {
    LOBYTE(v10) = *((unsigned char *)a5 + 16);
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)a1, (uint64_t)v12);
  if (v12[0] != *(void *)(a1 + 8)
    && !pxrInternal__aapl__pxrReserved__::Usd_EvalPredicate<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((uint64_t *)(a1 + 24), (uint64_t)v12))
  {
    v13[12] = 1;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v12);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::set_begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
}

void sub_23F544278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::set_begin(pxrInternal__aapl__pxrReserved__::UsdPrimRange *this, const pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *a2)
{
  if (*((unsigned char *)a2 + 29)) {
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  *(void *)this = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 16, (_DWORD *)a2 + 4);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 20, (_DWORD *)a2 + 5);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 6);
  return result;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::concurrent_unordered_base(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v5[3] = 0;
  *uint64_t v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 52pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 44pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 36pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 20pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1, 0, &v11);
  return a1;
}

void sub_23F54446C(_Unwind_Exception *a1)
{
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::~split_ordered_list(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::~split_ordered_list(uint64_t a1)
{
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::clear(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::destroy_node(a1, v2);
  return a1;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  tbb::internal *v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      uint64_t result = tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::destroy_node(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  return result;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::destroy_node(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 24)) {
    tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::node>::destroy(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3(this, this);
}

uint64_t tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::node>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  void *v3 = 0;
  if (v4) {
    std::default_delete<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>::operator()[abi:ne180100]((uint64_t)v3, v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 8);
}

uint64_t std::default_delete<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v5 = (void **)(a2 + 32);
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint64_t v5 = (void **)(a2 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint64_t v3 = *(void **)a2;
    *(void *)a2 = 0;
    if (v3) {
      std::default_delete<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding>::operator()[abi:ne180100](a2, v3);
    }
    return MEMORY[0x2455D2BD0](a2, 0x20C400FA29667);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(v4 - 48));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this)
{
  uint64_t v2 = *((void *)this + 5);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void std::default_delete<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[5];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a2 + 3));
    uint64_t v5 = a2[2];
    if (v5) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a2);
    JUMPOUT(0x2455D2BD0);
  }
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::concurrent_unordered_base(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v5[3] = 0;
  *uint64_t v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 52pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 44pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 36pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 20pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1, 0, &v11);
  return a1;
}

void sub_23F544920(_Unwind_Exception *a1)
{
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::~split_ordered_list(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::~split_ordered_list(uint64_t a1)
{
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::clear(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::destroy_node(a1, v2);
  return a1;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  tbb::internal *v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      uint64_t result = tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::destroy_node(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  return result;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::destroy_node(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 24)) {
    tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::node>::destroy(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3(this, this);
}

uint64_t tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::node>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  void *v3 = 0;
  if (v4) {
    std::default_delete<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>::operator()[abi:ne180100]((uint64_t)v3, v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 8);
}

void std::default_delete<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v5 = (void **)(a2 + 120);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl>>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint64_t v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(void *)(a2 + 104) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(atomic_uint **)(a2 + 88);
    if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2 + 48, *(void **)(a2 + 56));
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~__hash_table(a2 + 8);
    if ((*(void *)a2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455D2BD0](a2, 0x10F0C4054F5A275);
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void **)(a2 + 112);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPredicateProgram<pxrInternal__aapl__pxrReserved__::UsdObject>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)(a2 + 80);
  std::vector<pxrInternal__aapl__pxrReserved__::ArchRegex>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)(a2 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(void *)(a2 + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 8);
  if (v4)
  {
    *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v4;
    operator delete(v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2);
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPredicateProgram<pxrInternal__aapl__pxrReserved__::UsdObject>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPredicateProgram<pxrInternal__aapl__pxrReserved__::UsdObject>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfPredicateProgram<pxrInternal__aapl__pxrReserved__::UsdObject>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 24);
  std::vector<std::function<pxrInternal__aapl__pxrReserved__::SdfPredicateFunctionResult ()(pxrInternal__aapl__pxrReserved__::UsdObject const&)>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
}

void std::vector<std::function<pxrInternal__aapl__pxrReserved__::SdfPredicateFunctionResult ()(pxrInternal__aapl__pxrReserved__::UsdObject const&)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<pxrInternal__aapl__pxrReserved__::SdfPredicateFunctionResult ()(pxrInternal__aapl__pxrReserved__::UsdObject const&)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__function::__value_func<pxrInternal__aapl__pxrReserved__::SdfPredicateFunctionResult ()(pxrInternal__aapl__pxrReserved__::UsdObject const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<pxrInternal__aapl__pxrReserved__::ArchRegex>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = MEMORY[0x2455CFDB0](v4 - 48);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a1, *a2);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::_PtrProxy(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)this + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  return this;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::internal_clear(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  for (uint64_t i = 0; i != 64; ++i)
  {
    uint64_t v4 = v2 + 8 * i;
    uint64_t v6 = *(void *)(v4 + 48);
    uint64_t v5 = (tbb::internal **)(v4 + 48);
    __dmb(0xBu);
    if (v6)
    {
      uint64_t v7 = 1 << i;
      if (!i) {
        uint64_t v7 = 2;
      }
      do
      {
        __dmb(0xBu);
        --v7;
      }
      while (v7);
      BOOL v8 = *v5;
      __dmb(0xBu);
      uint64_t result = tbb::internal::deallocate_via_handler_v3(v8, a2);
      __dmb(0xBu);
      *uint64_t v5 = 0;
    }
  }
  return result;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_23F5451C4(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_23F545244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23F545348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_23F5453D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<std::pair<std::string,std::string>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<std::pair<std::string,std::string>>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void *std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x68uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,std::allocator<realityio::CustomInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23F545678(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,std::allocator<realityio::CustomInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F332568;
  std::allocator<realityio::CustomInputDescriptor>::construct[abi:ne180100]<realityio::CustomInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_23F5456F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::CustomInputDescriptor>::construct[abi:ne180100]<realityio::CustomInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int *a6)
{
  void v11[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__value_func[abi:ne180100]((uint64_t)v11, a5);
  realityio::CustomInputDescriptor::CustomInputDescriptor(a2, (uint64_t)&__p, a4, (uint64_t)v11, *a6);
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100](v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F5457D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F3332B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3332B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(uint64_t *a1@<X8>)
{
  void v11[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v11[0] = &unk_26F333230;
  v11[3] = v11;
  uint64_t v4 = realityio::TextureBuilder::kOutputName((realityio::TextureBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v7) = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 296), (uint64_t)v11, (int *)&v7, &v9);
  uint64_t v7 = v9;
  BOOL v8 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100](v11);
}

void sub_23F5459EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F333330;
  return result;
}

void std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F333330;
}

void std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::MaterialAssetBuilder::kMaterialDataName((realityio::MaterialAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 176), &v7, &v8);
  long long v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F545BF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::MaterialAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3333B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::MaterialAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3333B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::MaterialAssetDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F545E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F545FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        long long v6 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(unsigned char *)a3 = 1;
        *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      {
        char v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          uint64_t v14 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(v13);
          *(unsigned char *)a3 = 1;
          *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *v14;
        }
        else
        {
          uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      uint64_t v22 = __p[0];
    }
    else
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      long long v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v17 = &v26;
      }
      else {
        long long v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      uint64_t v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5463FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 67) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _DWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void realityio::getAttributeValue<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<float>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F54676C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        int v6 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(unsigned char *)a3 = 1;
        *(_DWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C248], v11))
      {
        char v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          int v14 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<float>(v13);
          *(unsigned char *)a3 = 1;
          *(_DWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v14;
        }
        else
        {
          uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      uint64_t v22 = __p[0];
    }
    else
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      long long v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v17 = &v26;
      }
      else {
        long long v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      uint64_t v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F546B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 10) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C248]);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<float>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<float>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  _DWORD v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C248], v1, v2);
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<float>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<float>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void realityio::Outputs::getRawValue<realityio::TextureBuilder::TextureDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F546F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void *std::vector<realityio::TextureBuilder::TextureDataT const*>::__init_with_size[abi:ne180100]<realityio::TextureBuilder::TextureDataT const**,realityio::TextureBuilder::TextureDataT const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23F546FEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TextureBuilder::TextureDataT const*>>(uint64_t **a1, const void **a2, long long *a3)
{
  int v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (!v5)
  {
    size_t v8 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    long long v12 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v13 = *((void *)a3 + 2);
    uint64_t v14 = *((void *)a3 + 3);
    *((void *)a3 + 2) = 0;
    void v11[2] = v12;
    *((void *)v11 + 6) = v13;
    *((void *)v11 + 7) = v14;
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v8;
    void *v6 = (uint64_t *)v11;
    long long v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      uint64_t v16 = *v6;
    }
    else
    {
      uint64_t v16 = (uint64_t *)v11;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      size_t v8 = (uint64_t **)v5;
      uint64_t v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      unint64_t v5 = *v8;
      int v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    uint64_t result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2);
    if (!result) {
      break;
    }
    int v6 = v8 + 1;
    unint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (!*v6) {
    goto LABEL_10;
  }
  return result;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_DefaultValueHolder::Create<pxrInternal__aapl__pxrReserved__::VtDictionary>@<X0>(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::New<pxrInternal__aapl__pxrReserved__::VtDictionary>(v4);
  size_t v2 = (uint64_t (*)(void))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  return v2(0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::New<pxrInternal__aapl__pxrReserved__::VtDictionary>@<X0>(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v5);
  uint64_t result = (uint64_t)malloc_type_malloc(8uLL, 0x77B8077EuLL);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = (void *)result;
  while (v6--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  void *v3 = 0;
  *a1 = v3;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtDictionary>;
  return result;
}

void sub_23F547290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t *a1)
{
  if (a1)
  {
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](a1, 0);
    free(a1);
  }
}

void *pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> *,std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(void *result)
{
  uint64_t v1 = result[1];
  if (v1)
  {
    size_t v2 = (void *)*result;
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = *(void **)(*result + 8);
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        size_t v2 = v4;
      }
      while (!v5);
    }
    *uint64_t result = v4;
    if (v4 == (void *)(v1 + 8)) {
      result[1] = 0;
    }
  }
  else
  {
    v6[0] = "vt/dictionary.h";
    v6[1] = "increment";
    uint64_t v6[2] = 159;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string, pxrInternal__aapl__pxrRe"
            "served__::VtValue, std::less<void>> *, std::__map_iterator<std::__tree_iterator<std::__value_type<std::strin"
            "g, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__"
            "aapl__pxrReserved__::VtValue>, void *> *, long>>>::increment() [UnderlyingMapPtr = std::map<std::string, pxr"
            "Internal__aapl__pxrReserved__::VtValue, std::less<void>> *, UnderlyingIterator = std::__map_iterator<std::__"
            "tree_iterator<std::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<st"
            "d::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>]";
    char v7 = 0;
    int v8 = 4;
    return (void *)pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, "Attempted invalid increment operation on a VtDictionary iterator");
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<BOOL>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<BOOL>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  size_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<realityio::TexcoordID>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<realityio::TexcoordID>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 48)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
    uint64_t v5 = *(void *)(i - 40);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = a2;
}

void std::__tree<realityio::TexcoordID>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<realityio::TexcoordID>::destroy(a1, *a2);
    std::__tree<realityio::TexcoordID>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<realityio::TexcoordID,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<realityio::TexcoordID,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

_OWORD *std::__tree<realityio::TexcoordID>::__emplace_unique_key_args<realityio::TexcoordID,realityio::TexcoordID>(uint64_t **a1, realityio::TexcoordID *a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<realityio::TexcoordID>::__find_equal<realityio::TexcoordID>((uint64_t)a1, &v12, a2);
  int v6 = *v5;
  if (!*v5)
  {
    char v7 = (uint64_t **)v5;
    int v6 = operator new(0x50uLL);
    v10[1] = a1 + 1;
    long long v8 = *(_OWORD *)(a3 + 16);
    uint64_t v6[2] = *(_OWORD *)a3;
    v6[3] = v8;
    *((void *)v6 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(void *)(a3 + 32);
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *((unsigned char *)v6 + 72) = *(unsigned char *)(a3 + 40);
    char v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<realityio::TexcoordID,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TexcoordID,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

void *std::__tree<realityio::TexcoordID>::__find_equal<realityio::TexcoordID>(uint64_t a1, void *a2, realityio::TexcoordID *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        char v7 = v4;
        long long v8 = (realityio::TexcoordID *)(v4 + 4);
        if (!realityio::TexcoordID::operator<(a3, (realityio::TexcoordID *)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!realityio::TexcoordID::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    char v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<realityio::TexcoordID,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TexcoordID,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<realityio::TexcoordID,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<realityio::TexcoordID>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>,std::reverse_iterator<realityio::TexcoordID*>,std::reverse_iterator<realityio::TexcoordID*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>,std::reverse_iterator<realityio::TexcoordID*>,std::reverse_iterator<realityio::TexcoordID*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 48);
      a3 -= 48;
      *(void *)(v7 - 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v8;
      *(void *)(v7 - 40) = *(void *)(a3 + 8);
      *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
      long long v9 = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = *(void *)(a3 + 32);
      *(_OWORD *)(v7 - 32) = v9;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
      *(unsigned char *)(v7 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(unsigned char *)(a3 + 40);
      uint64_t v7 = *((void *)&v15 + 1) - 48;
      *((void *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<realityio::TexcoordID>,std::reverse_iterator<std::reverse_iterator<realityio::TexcoordID*>>,std::reverse_iterator<std::reverse_iterator<realityio::TexcoordID*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<realityio::TexcoordID>,std::reverse_iterator<std::reverse_iterator<realityio::TexcoordID*>>,std::reverse_iterator<std::reverse_iterator<realityio::TexcoordID*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    if (*(char *)(i + 39) < 0) {
      operator delete(*(void **)(i + 16));
    }
    uint64_t v6 = *(void *)(i + 8);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t i = *(void *)(a2 + 32) + 48;
  }
}

uint64_t std::__split_buffer<realityio::TexcoordID>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<realityio::TexcoordID>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = i - 48;
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
    uint64_t v5 = *(void *)(i - 40);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::back_insert_iterator<std::vector<realityio::TexcoordID>>>(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  uint64_t v10 = a4;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  do
  {
    std::back_insert_iterator<std::vector<realityio::TexcoordID>>::operator=[abi:ne180100](&v10, (uint64_t)(v4 + 4));
    uint64_t v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v4[2];
        BOOL v8 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }
      while (!v8);
    }
    uint64_t v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

uint64_t **std::back_insert_iterator<std::vector<realityio::TexcoordID>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = std::vector<realityio::TexcoordID>::__push_back_slow_path<realityio::TexcoordID const&>(*a1, a2);
  }
  else
  {
    realityio::TexcoordID::TexcoordID((*a1)[1], a2);
    uint64_t v5 = v4 + 48;
    v3[1] = v4 + 48;
  }
  v3[1] = v5;
  return a1;
}

void sub_23F547B18(_Unwind_Exception *a1)
{
  *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::TexcoordID>::__push_back_slow_path<realityio::TexcoordID const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  uint64_t v14 = &v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  realityio::TexcoordID::TexcoordID((uint64_t)v14, a2);
  uint64_t v15 = v14 + 48;
  std::vector<realityio::TexcoordID>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<realityio::TexcoordID>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_23F547C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::TexcoordID>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::TexcoordID::TexcoordID(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v5 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F547E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        long long v6 = (void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(unsigned char *)a3 = 1;
        *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      {
        char v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          uint64_t v14 = (void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>(v13);
          *(unsigned char *)a3 = 1;
          *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *v14;
        }
        else
        {
          uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      uint64_t v22 = __p[0];
    }
    else
    {
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      long long v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v26;
      }
      else {
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      uint64_t v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F548288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 69) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void *realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t std::map<std::string,char const*>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,char const*>,std::__map_value_compare<std::string,std::__value_type<std::string,char const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,char const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,char const*> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_23F548508(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,char const*>,std::__map_value_compare<std::string,std::__value_type<std::string,char const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,char const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,char const*> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,char const*>,std::__map_value_compare<std::string,std::__value_type<std::string,char const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,char const*>>>::__construct_node<std::pair<std::string const,char const*> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,char const*>,std::__map_value_compare<std::string,std::__value_type<std::string,char const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,char const*>>>::__construct_node<std::pair<std::string const,char const*> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
}

void sub_23F548630(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F333440;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F333440;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void *std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  if (AssetHandle)
  {
    RERetain();
    RERelease();
    uint64_t v2 = **(uint64_t ***)(a1 + 24);
    uint64_t v16 = AssetHandle;
    RERetain();
    realityio::Builder::addAsset(v2, &v16, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v16);
    uint64_t v3 = *(void *)(*(void *)(*(void *)(**(void **)(a1 + 32) + 40) + 16) + 40);
    if (v3) {
      realityio::LiveSceneManager::queueForDeferredAssetLoad(v3, &AssetHandle);
    }
    uint64_t v15 = REMaterialAssetBuilderCreate();
    if (v15)
    {
      RERetain();
      RERelease();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(**(void **)(a1 + 32) + 32));
      REMaterialAssetBuilderSetName();
      REMaterialAssetBuilderSetMaterialDefinition();
      REMaterialAssetBuilderSetColor4F();
      REMaterialAssetBuilderSetColor3F();
      __asm { FMOV            V0.4S, #1.0 }
      REMaterialAssetBuilderSetFloat4();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      uint64_t v9 = REAssetManagerMaterialAssetBuilderBuildAsync();
      uint64_t v14 = v9;
      if (v9) {
        RERetain();
      }
      uint64_t v10 = *(uint64_t **)(a1 + 40);
      uint64_t v11 = *v10;
      if (*v10 != v9)
      {
        *uint64_t v10 = v9;
        uint64_t v14 = v11;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v14);
      char v12 = *(uint64_t **)(a1 + 40);
      if (*v12)
      {
        if (*(void *)(*(void *)(*(void *)(**(void **)(a1 + 32) + 40) + 16) + 40)) {
          realityio::LiveSceneManager::queueForDeferredAssetLoad(*(void *)(*(void *)(*(void *)(**(void **)(a1 + 32) + 40) + 16) + 40), v12);
        }
        RERelease();
      }
    }
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&v15);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&AssetHandle);
}

void sub_23F548A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef((uint64_t *)va);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::target_type()
{
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 24;
      uint64_t v7 = v4 - 24;
      unint64_t v8 = v4 - 24;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v6 -= 24;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  if (!*v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = operator new(0x28uLL);
    v8[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v7 + 7, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v7 + 8, (_DWORD *)(a3 + 4));
    *((_WORD *)v7 + 1pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_WORD *)(a3 + 8);
    char v9 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, (uint64_t *)v7);
    v8[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>>,0>((uint64_t)v2 + 28);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(void *a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  char v9 = a1 + 1;
  if (a1 + 1 != a2
    && !pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, (void *)((char *)a2 + 28)))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)a2 + 28), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, (void *)((char *)v15 + 28))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    char v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      char v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      char v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v12 + 28), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a3, a5);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F548EC0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>> const&>(v5, v6, (void *)((char *)v4 + 28), (uint64_t)v4 + 28);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>> const&>(uint64_t **a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x28uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 7, (_DWORD *)a2);
  __n128 result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, (_DWORD *)(a2 + 4));
  *((_WORD *)v6 + 1pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
  return result;
}

uint64_t realityio::UsdStageStateTracker::UsdStageStateTracker(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26F3334F0;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *a2;
  uint64_t v3 = (atomic_uint **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 8));
  uint64_t v7 = *v3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v7);
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  realityio::UsdStageDelta::UsdStageDelta((void *)(a1 + 16), &v7, (uint64_t)&v5);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v5, v6[0]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v7);
  *(void *)(a1 + 104) = 850045863;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 16pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 1;
  return a1;
}

void sub_23F549128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, atomic_uint *a12)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&a9, a10);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a12);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v12);
  _Unwind_Resume(a1);
}

void realityio::UsdStageStateTracker::updateWithStageDelta(realityio::UsdStageStateTracker *this, const realityio::UsdStageDelta *a2)
{
  if (*((unsigned char *)this + 168))
  {
    uint64_t v4 = (std::mutex *)((char *)this + 104);
    std::mutex::lock((std::mutex *)((char *)this + 104));
    realityio::UsdStageDelta::updateWithStageDelta((realityio::UsdStageStateTracker *)((char *)this + 16), a2);
    std::mutex::unlock(v4);
  }
}

void realityio::UsdStageStateTracker::getAndCleanAccumulatedStageDelta(realityio::UsdStageStateTracker *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  uint64_t v5 = *((void *)this + 3);
  *a2 = &unk_26F335EC8;
  a2[1] = v5;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(a2 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100](a2 + 2, (uint64_t)this + 32);
  a2[5] = &unk_26F341FE8;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(a2 + 6), (uint64_t)this + 64);
  BOOL v9 = (atomic_uint *)*((void *)this + 1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v9);
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = v8;
  realityio::UsdStageDelta::UsdStageDelta(&v10, &v9, (uint64_t)&v7);
  uint64_t v6 = (atomic_uint *)*((void *)this + 3);
  *((void *)this + 3) = v11[0];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v11);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)this + 24, v6);
  if ((uint64_t *)((char *)this + 16) != &v10)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *> *,long>>((uint64_t *)this + 4, (void *)v11[1], v12);
    *((_DWORD *)this + 24) = v13;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>((void *)this + 8, (void *)v12[5], 0);
  }
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&v10);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v7, v8[0]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v9);
  std::mutex::unlock(v4);
}

void sub_23F549340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)va, v6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va1);
  realityio::UsdStageDelta::~UsdStageDelta(v2);
  _Unwind_Resume(a1);
}

CFStringRef realityio::UsdStageStateTracker::description@<X0>(realityio::UsdStageStateTracker *this@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  CFStringRef result = CFStringCreateWithFormat(0, 0, @"<UsdStageStateTracker: %p { stage: %p }>", this, (char *)this + 8);
  *a2 = result;
  return result;
}

void sub_23F5493F0(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void realityio::UsdStageStateTracker::~UsdStageStateTracker(realityio::UsdStageStateTracker *this)
{
  *(void *)this = &unk_26F3334F0;
  uint64_t v2 = (atomic_uint **)((char *)this + 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageStateTracker *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v2);
}

{
  atomic_uint **v2;
  uint64_t vars8;

  *(void *)this = &unk_26F3334F0;
  uint64_t v2 = (atomic_uint **)((char *)this + 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageStateTracker *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v2);

  JUMPOUT(0x2455D2BD0);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F54951C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      CFStringRef result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>(v5, v6, v4 + 4, (_DWORD *)v4 + 8);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>(uint64_t **a1, void *a2, void *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(void *a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2 && !pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, a2 + 4))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a3, a5);
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x88uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  CFStringRef result = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>::pair[abi:ne180100](v6 + 8, a2);
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
  return result;
}

void sub_23F549844(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_DWORD *std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>::pair[abi:ne180100](_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
  realityio::UsdPrimDelta::UsdPrimDelta((realityio::UsdPrimDelta *)(a1 + 2), (const realityio::UsdPrimDelta *)(a2 + 2));
  return a1;
}

void sub_23F5498A0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

realityio::UsdPrimDelta *realityio::UsdPrimDelta::UsdPrimDelta(realityio::UsdPrimDelta *this, const realityio::UsdPrimDelta *a2)
{
  *(void *)this = &unk_26F3446D8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 2, (_DWORD *)a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 3, (_DWORD *)a2 + 3);
  *((unsigned char *)this + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = *((unsigned char *)a2 + 16);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::map[abi:ne180100]((uint64_t *)this + 3, (uint64_t)a2 + 24);
  *((void *)this + 6) = &unk_26F341FE8;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)this + 56, (uint64_t)a2 + 56);
  return this;
}

void sub_23F54996C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(v3, *(void **)(v2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F5499E0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      CFStringRef result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, &v10, &v9, a3);
  CFStringRef result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2
    && !std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, a2 + 4))
  {
    if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))goto LABEL_28; {
      uint64_t v13 = *a4;
      }
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))goto LABEL_16; {
LABEL_28:
  }

  return std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, a3, a5);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (uint64_t *)operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  CFStringRef result = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta>::pair[abi:ne180100](v6 + 4, a2);
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
  return result;
}

void sub_23F549D1C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta>::pair[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a2[2];
  a1[1] = (uint64_t)&unk_26F33EDF0;
  a1[2] = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    a1[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[3] = (uint64_t)&unk_26F341FE8;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    realityio::UsdPropertyDelta::~UsdPropertyDelta((realityio::UsdPropertyDelta *)(a2 + 5));
    uint64_t v3 = a2[4];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void realityio::UsdPropertyDelta::~UsdPropertyDelta(realityio::UsdPropertyDelta *this)
{
  *(void *)this = &unk_26F33EDF0;
  *((void *)this + 2) = &unk_26F341FE8;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 24);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  uint64_t vars8;

  realityio::UsdPropertyDelta::~UsdPropertyDelta(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(a1, a2[1]);
    realityio::UsdPropertyDelta::~UsdPropertyDelta((realityio::UsdPropertyDelta *)(a2 + 5));
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>,0>(uint64_t a1)
{
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void realityio::UsdPrimDelta::~UsdPrimDelta(realityio::UsdPrimDelta *this)
{
  *(void *)this = &unk_26F3446D8;
  *((void *)this + 6) = &unk_26F341FE8;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 56);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

{
  uint64_t vars8;

  realityio::UsdPrimDelta::~UsdPrimDelta(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *> *,long>>(uint64_t *a1, void *a2, void *a3)
{
  if (a1[2])
  {
    uint64_t v6 = *a1;
    unint64_t v8 = (uint64_t **)(a1 + 1);
    uint64_t v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(void *)(v7 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (*(void *)(v6 + 8)) {
      uint64_t v9 = *(void **)(v6 + 8);
    }
    else {
      uint64_t v9 = (void *)v6;
    }
    uint64_t v22 = a1;
    uint64_t v23 = v9;
    uint64_t v24 = v9;
    if (v9)
    {
      uint64_t v23 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        uint64_t v10 = a2;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v9 + 4), (_DWORD *)v10 + 8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v9 + 36, (_DWORD *)v10 + 9);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v9 + 6), (_DWORD *)v10 + 12);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v9 + 52, (_DWORD *)v10 + 13);
          *((unsigned char *)v9 + 56) = *((unsigned char *)v10 + 56);
          if (v9 != v10)
          {
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>((uint64_t **)v9 + 8, (void *)v10[8], v10 + 9);
            *((_DWORD *)v9 + 32) = *((_DWORD *)v10 + 32);
            std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(v9 + 12, (void *)v10[14], 0);
            uint64_t v9 = v24;
          }
          uint64_t v11 = *v8;
          uint64_t v12 = (uint64_t **)(a1 + 1);
          uint64_t v13 = (uint64_t **)(a1 + 1);
          if (*v8)
          {
            do
            {
              while (1)
              {
                uint64_t v12 = (uint64_t **)v11;
                if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9 + 4, v11 + 4)) {
                  break;
                }
                uint64_t v11 = *v12;
                uint64_t v13 = v12;
                if (!*v12) {
                  goto LABEL_16;
                }
              }
              uint64_t v11 = v12[1];
            }
            while (v11);
            uint64_t v13 = v12 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v9);
          uint64_t v9 = v23;
          uint64_t v24 = v23;
          if (v23) {
            uint64_t v23 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          uint64_t v14 = (void *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              uint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (void *)v10[2];
              BOOL v15 = *a2 == (void)v10;
              uint64_t v10 = a2;
            }
            while (!v15);
          }
          if (!v9) {
            break;
          }
          uint64_t v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>((uint64_t)a1, (_DWORD *)a2 + 8, (uint64_t)&v22);
      uint64_t v16 = (uint64_t *)a1[1];
      BOOL v17 = (uint64_t **)(a1 + 1);
      uint64_t v18 = (uint64_t **)(a1 + 1);
      if (v16)
      {
        uint64_t v19 = v22 + 4;
        do
        {
          while (1)
          {
            BOOL v17 = (uint64_t **)v16;
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v19, v16 + 4)) {
              break;
            }
            uint64_t v16 = *v17;
            uint64_t v18 = v17;
            if (!*v17) {
              goto LABEL_34;
            }
          }
          uint64_t v16 = v17[1];
        }
        while (v16);
        uint64_t v18 = v17 + 1;
      }
LABEL_34:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v17, v18, v22);
      uint64_t v22 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22, 0);
      uint64_t v20 = (void *)a2[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)a2[2];
          BOOL v15 = *v21 == (void)a2;
          a2 = v21;
        }
        while (!v15);
      }
      a2 = v21;
    }
    while (v21 != a3);
  }
}

void sub_23F54A38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *CFStringRef result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    BOOL v15 = result;
    uint64_t v16 = v8;
    BOOL v17 = v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 5);
          std::pair<pxrInternal__aapl__pxrReserved__::TfToken &,realityio::UsdPropertyDelta &>::operator=[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v5, v18[0], leaf_high, v17);
          BOOL v17 = v16;
          if (v16) {
            uint64_t v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          unint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    CFStringRef result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      CFStringRef result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(v5, a2 + 4);
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_23F54A534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfToken &,realityio::UsdPropertyDelta &>::operator=[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta,(void *)0>(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken::operator=(*(void **)a1, (void *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(v4 + 8), (void *)(a2 + 16));
  if (v4 != a2 + 8)
  {
    *(_DWORD *)(v4 + 56) = *(_DWORD *)(a2 + 64);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>((void *)(v4 + 24), *(void **)(a2 + 48), 0);
  }
  return a1;
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7, a3, v4 + 4))break; {
        uint64_t v4 = (void *)*v5;
        }
        CFStringRef result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = (void *)v5[1];
    }
    while (v4);
    CFStringRef result = v5 + 1;
  }
  else
  {
    CFStringRef result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v2;
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(uint64_t **a1, uint64_t *a2)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_23F54A6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a10) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v2;
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(v8 + 2, v4 + 2);
        uint64_t v10 = (void *)*v8;
        std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi(a1, v8);
        uint64_t v4 = (void *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        unint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::TfToken const&>(a1, v4 + 2);
    uint64_t v4 = (void *)*v4;
  }
}

void sub_23F54A828(void *a1)
{
  __cxa_begin_catch(a1);
  while (1)
  {
    uint64_t v2 = (void *)*v1;
    uint64_t v3 = v1[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(v1);
    uint64_t v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }
}

void sub_23F54A860(_Unwind_Exception *a1)
{
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi(void *a1, void *a2)
{
  uint64_t v4 = a2 + 2;
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * (a2[2] & 0xFFFFFFFFFFFFFFF8));
  a2[1] = v5;
  inserted = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    CFStringRef result = v16;
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && (v16[2] & 0xFFFFFFFFFFFFFFF8) == (*a3 & 0xFFFFFFFFFFFFFFF8);
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * vpxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v13[2] & 0xFFFFFFFFFFFFFFF8));
            void *v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  }
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::TfToken const&>(void *a1, uint64_t *a2)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi(a1, v4);
}

void sub_23F54ADC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  CFStringRef result = operator new(0x18uLL);
  *(void *)a3 = result;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  *CFStringRef result = 0;
  result[1] = 0;
  uint64_t v7 = *a2;
  result[2] = *a2;
  if ((v7 & 7) != 0)
  {
    char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    uint64_t v7 = result[2];
    if ((add_explicit & 1) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
      result[2] = v7;
    }
  }
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
  result[1] = bswap64(0x9E3779B97F4A7C55 * (v7 & 0xFFFFFFFFFFFFFFF8));
  return result;
}

void realityio::UsdStageDelta::~UsdStageDelta(realityio::UsdStageDelta *this)
{
  *(void *)this = &unk_26F335EC8;
  *((void *)this + 5) = &unk_26F341FE8;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 48);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this + 1);
}

{
  uint64_t vars8;

  realityio::UsdStageDelta::~UsdStageDelta(this);

  JUMPOUT(0x2455D2BD0);
}

void realityio::tokens::TextureBuilderTokens_StaticTokenType::~TextureBuilderTokens_StaticTokenType(realityio::tokens::TextureBuilderTokens_StaticTokenType *this)
{
  uint64_t v31 = (void **)((char *)this + 240);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v31);
  uint64_t v2 = *((void *)this + 29);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 28);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 27);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 26);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 25);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 24);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 23);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 22);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 21);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 20);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 19);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 18);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 17);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 16);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 15);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 14);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 13);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 12);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 11);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 10);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 9);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 8);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 7);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 6);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 5);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 4);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 3);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 2);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 1);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::TextureBuilderTokens_StaticTokenType *realityio::tokens::TextureBuilderTokens_StaticTokenType::TextureBuilderTokens_StaticTokenType(realityio::tokens::TextureBuilderTokens_StaticTokenType *this)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v38 = (uint64_t *)(MEMORY[0x2455CF820](this, "Shader", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 168, "in", 0);
  MEMORY[0x2455CF820]((char *)this + 176, "color3", 0);
  MEMORY[0x2455CF820]((char *)this + 184, "color4", 0);
  MEMORY[0x2455CF820]((char *)this + 192, "float", 0);
  MEMORY[0x2455CF820]((char *)this + 200, "vector2", 0);
  MEMORY[0x2455CF820]((char *)this + 208, "vector3", 0);
  MEMORY[0x2455CF820]((char *)this + 216, "vector4", 0);
  MEMORY[0x2455CF820]((char *)this + 224, "asset", 0);
  MEMORY[0x2455CF820]((char *)this + 232, "raw", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v39 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v38;
  uint64_t v40 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v41 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v42 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v43 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v44 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v45 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v46 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v47 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v48 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v49 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v50 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v51 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v52 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v53 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v54 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v55 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v56 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v57 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v58 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v59 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v60 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v61 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v62 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v63 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v64 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v65 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v66 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v67 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v68 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  long long v32 = (char *)operator new(0xF0uLL);
  uint64_t v33 = 0;
  *((void *)this + 30) = v32;
  *((void *)this + 31) = v32;
  *((void *)this + 32) = v32 + 240;
  do
  {
    uint64_t v34 = *(uint64_t *)((char *)&v39 + v33);
    *(void *)&v32[v33] = v34;
    if ((v34 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v32[v33] &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 += 8;
  }
  while (v33 != 240);
  *((void *)this + 31) = v32 + 240;
  for (uint64_t i = 232; i != -8; i -= 8)
  {
    uint64_t v36 = *(uint64_t *)((char *)&v39 + i);
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F54BB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void **a31,uint64_t a32,char a33)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a31);
  uint64_t v43 = 232;
  while (1)
  {
    uint64_t v44 = *(void *)(&a33 + v43);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v43 -= 8;
    if (v43 == -8)
    {
      if ((*v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F54BEF0()
{
}

void sub_23F54BEF8()
{
}

void sub_23F54BF00()
{
}

void sub_23F54BF08()
{
}

void sub_23F54BF10()
{
}

void sub_23F54BF18()
{
}

void sub_23F54BF20()
{
}

void sub_23F54BF28()
{
}

void sub_23F54BF30()
{
}

void sub_23F54BF38()
{
}

void sub_23F54BF40()
{
}

void sub_23F54BF48()
{
}

void sub_23F54BF50()
{
}

void sub_23F54BF58()
{
}

void sub_23F54BF60()
{
}

void sub_23F54BF68()
{
}

void sub_23F54BF70()
{
}

void sub_23F54BF78()
{
}

void sub_23F54BF80()
{
}

void sub_23F54BF88()
{
}

void sub_23F54BF90()
{
}

void realityio::generateTextureDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40378))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40370;
  *a1 = _MergedGlobals_4;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F54C21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, char a20)
{
  MEMORY[0x2455D2BD0](v21, 0x10A1C40F82F910ELL);
  a17 = (void **)&a20;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  MEMORY[0x2455D2BD0](v20, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v22, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40378);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F54C448(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40C0C8C49ELL);
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderEntityBuilderCopyEntityInputName(realityio::EntityBuilder *a1)
{
  uint64_t v1 = realityio::EntityBuilder::kInputName(a1);
  if (*(char *)(v1 + 23) >= 0) {
    uint64_t v2 = (const char *)v1;
  }
  else {
    uint64_t v2 = *(const char **)v1;
  }

  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

CFStringRef RIOBuilderEntityBuilderCopyEntityOutputName(realityio::EntityBuilder *a1)
{
  uint64_t v1 = realityio::EntityBuilder::kOutputName(a1);
  if (*(char *)(v1 + 23) >= 0) {
    uint64_t v2 = (const char *)v1;
  }
  else {
    uint64_t v2 = *(const char **)v1;
  }

  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

CFStringRef RIOBuilderEntityBuilderCopyEntityOutputIdentifier()
{
  unint64_t v0 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v1 = *(void *)(v0 + 64) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }

  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

std::mutex *RIOBuilderEntityBuilderGetOutputEntity(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type size = (std::mutex *)*((void *)v4 + 2);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)v4 + 3);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (size)
    {
      uint64_t v7 = (const void **)realityio::EntityBuilder::kOutputName(v4);
      realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>(size, v7, v9);
      if (v9[0].__r_.__value_.__s.__data_[0]) {
        std::string::size_type size = (std::mutex *)v9[0].__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = 0;
      }
      realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v9);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_19:
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    std::string::size_type size = 0;
    if (v3) {
      goto LABEL_19;
    }
  }
  return size;
}

void sub_23F54C680(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((void *)a1);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((12 * a3) >> 2);
  unint64_t v7 = *(void *)a1;
  if (*(void *)a1 == v6) {
    return a1;
  }
  if (!a3) {
    goto LABEL_18;
  }
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8)
  {
    if (!*(void *)(a1 + 24))
    {
      unint64_t v9 = atomic_load(v8 - 2);
      if (v9 == 1)
      {
        if (v7 < v6)
        {
          uint64_t v10 = *(void *)(a1 + 32);
          if (*(void *)(v10 - 8) < v6)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(a1, v6);
            uint64_t v8 = New;
            if (v7)
            {
              uint64_t v12 = 0;
              do
              {
                uint64_t v13 = (char *)New + v12;
                uint64_t v14 = *(void *)(v10 + v12);
                *((_DWORD *)v13 + 2) = *(_DWORD *)(v10 + v12 + 8);
                *(void *)uint64_t v13 = v14;
                v12 += 12;
              }
              while (12 * v7 != v12);
            }
          }
          uint64_t v15 = 12 * v7;
          uint64_t v16 = 12 * a3;
          do
          {
            uint64_t v17 = (char *)v8 + v15;
            uint64_t v18 = *a2;
            *((_DWORD *)v17 + 2) = *((_DWORD *)a2 + 2);
            *(void *)uint64_t v17 = v18;
            a2 = (uint64_t *)((char *)a2 + 12);
            v15 += 12;
            v16 -= 12;
          }
          while (v16);
        }
        uint64_t v19 = v8;
        goto LABEL_29;
      }
      uint64_t v8 = *(void **)(a1 + 32);
    }
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(a1, v6);
    uint64_t v19 = v24;
    if (v7 >= v6) {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((12 * a3) >> 2);
    }
    else {
      unint64_t v25 = v7;
    }
    if (v25)
    {
      uint64_t v26 = 12 * v25;
      uint64_t v27 = v24;
      do
      {
        uint64_t v28 = *v8;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v8 + 2);
        *uint64_t v27 = v28;
        uint64_t v27 = (void *)((char *)v27 + 12);
        uint64_t v8 = (void *)((char *)v8 + 12);
        v26 -= 12;
      }
      while (v26);
    }
    if (v7 < v6)
    {
      uint64_t v29 = 12 * v7;
      uint64_t v30 = 12 * a3;
      do
      {
        uint64_t v31 = (char *)v24 + v29;
        uint64_t v32 = *a2;
        *((_DWORD *)v31 + 2) = *((_DWORD *)a2 + 2);
        *(void *)uint64_t v31 = v32;
        a2 = (uint64_t *)((char *)a2 + 12);
        v29 += 12;
        v30 -= 12;
      }
      while (v30);
    }
    goto LABEL_29;
  }
  if (v6 >= 0x1555555555555556)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((void *)a1);
    return a1;
  }
  uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(a1, v6);
  uint64_t v19 = v20;
  uint64_t v21 = 0;
  do
  {
    uint64_t v22 = (char *)v20 + v21;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v21);
    *((_DWORD *)v22 + 2) = *(_DWORD *)((char *)a2 + v21 + 8);
    *(void *)uint64_t v22 = v23;
    v21 += 12;
  }
  while (12 * a3 != v21);
LABEL_29:
  if (v19 != *(void **)(a1 + 32))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
    *(void *)(a1 + 32) = v19;
  }
  *(void *)a1 = v6;
  return a1;
}

void sub_23F54C8E8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((void *)a1);
  uint64_t v6 = 4 * a3;
  unint64_t v7 = *(void *)a1;
  if (*(void *)a1 == (4 * a3) >> 2) {
    return a1;
  }
  if (!a3) {
    goto LABEL_18;
  }
  unint64_t v8 = v6 >> 2;
  unint64_t v9 = *(unint64_t **)(a1 + 32);
  if (v9)
  {
    if (!*(void *)(a1 + 24))
    {
      unint64_t v10 = atomic_load(v9 - 2);
      if (v10 == 1)
      {
        if (v7 < v8)
        {
          uint64_t v11 = *(void *)(a1 + 32);
          if (*(void *)(v11 - 8) < v8)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(a1, v8);
            unint64_t v9 = New;
            if (v7)
            {
              uint64_t v13 = 0;
              do
              {
                *(_DWORD *)((char *)New + v13) = *(_DWORD *)(v11 + v13);
                v13 += 4;
              }
              while (4 * v7 != v13);
            }
          }
          uint64_t v14 = 4 * v7;
          uint64_t v15 = 4 * a3;
          do
          {
            int v16 = *a2++;
            *(_DWORD *)((char *)v9 + v14) = v16;
            v14 += 4;
            v15 -= 4;
          }
          while (v15);
        }
        uint64_t v17 = v9;
        goto LABEL_29;
      }
      unint64_t v9 = *(unint64_t **)(a1 + 32);
    }
    uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(a1, v8);
    uint64_t v17 = v20;
    if (v7 >= v8) {
      unint64_t v21 = v8;
    }
    else {
      unint64_t v21 = v7;
    }
    if (v21)
    {
      uint64_t v22 = 4 * v21;
      uint64_t v23 = v20;
      do
      {
        int v24 = *(_DWORD *)v9;
        unint64_t v9 = (unint64_t *)((char *)v9 + 4);
        *(_DWORD *)uint64_t v23 = v24;
        uint64_t v23 = (unint64_t *)((char *)v23 + 4);
        v22 -= 4;
      }
      while (v22);
    }
    if (v7 < v8)
    {
      uint64_t v25 = 4 * v7;
      uint64_t v26 = 4 * a3;
      do
      {
        int v27 = *a2++;
        *(_DWORD *)((char *)v20 + v25) = v27;
        v25 += 4;
        v26 -= 4;
      }
      while (v26);
    }
    goto LABEL_29;
  }
  if (v6 / v8 != 4)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((void *)a1);
    return a1;
  }
  uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(a1, v8);
  uint64_t v17 = v18;
  uint64_t v19 = 0;
  do
  {
    *(_DWORD *)((char *)v18 + v19 * 4) = a2[v19];
    ++v19;
  }
  while (a3 != v19);
LABEL_29:
  if (v17 != *(unint64_t **)(a1 + 32))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
    *(void *)(a1 + 32) = v17;
  }
  *(void *)a1 = v8;
  return a1;
}

void sub_23F54CABC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionRunSampleScene(uint64_t result, realityio::ImportSession *a2)
{
  if (result) {
    return realityio::updateStageOnRepeat((realityio *)(result + 16), a2);
  }
  return result;
}

uint64_t realityio::updateStageOnRepeat(realityio *this, realityio::ImportSession *a2)
{
  uint64_t result = MEMORY[0x270FA5388](this, a2);
  uint64_t v237 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v72 = *(void *)(*(void *)(*(void *)(result + 16) + 8) + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(&v72);
    std::string::basic_string[abi:ne180100]<0>(v34, "/Cone");
    LODWORD(v206.__r_.__value_.__l.__data_) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v206.__r_.__value_.__l.__size_, "Cone");
    LODWORD(v207) = 1056964608;
    std::string::basic_string[abi:ne180100]<0>(&v208, "Cylinder");
    int v209 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v210, "Capsule");
    int v211 = 1069547520;
    std::string::basic_string[abi:ne180100]<0>(v212, "Cube");
    int v213 = 0x40000000;
    std::string::basic_string[abi:ne180100]<0>(v214, "Preliminary_Text");
    int v215 = 1075838976;
    std::string::basic_string[abi:ne180100]<0>(&v216, "Sphere");
    int v217 = 1077936128;
    std::string::basic_string[abi:ne180100]<0>(v218, "Cone");
    int v219 = 1080033280;
    std::string::basic_string[abi:ne180100]<0>(v220, "Cylinder");
    int v221 = 1082130432;
    std::string::basic_string[abi:ne180100]<0>(v222, "Capsule");
    int v223 = 1083179008;
    std::string::basic_string[abi:ne180100]<0>(v224, "Cube");
    v225[0] = 1084227584;
    std::string::basic_string[abi:ne180100]<0>(v226, "Preliminary_Text");
    v227[0] = 1085276160;
    std::string::basic_string[abi:ne180100]<0>(v228, "Sphere");
    int v229 = 1086324736;
    std::string::basic_string[abi:ne180100]<0>(v230, "Cone");
    std::map<float,std::string>::map[abi:ne180100]((uint64_t *)v65, (float *)&v206, 13);
    long long v66 = xmmword_23F7BE5F0;
    long long v67 = xmmword_23F7BE600;
    long long v68 = xmmword_23F7BE610;
    std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>((std::string *)v231, (long long *)v34, (uint64_t)v65);
    std::string::basic_string[abi:ne180100]<0>(v32, "/Sphere");
    LODWORD(v180) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v181, "Sphere");
    int v182 = 1056964608;
    std::string::basic_string[abi:ne180100]<0>(v183, "Cone");
    int v184 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v185, "Cylinder");
    int v186 = 1069547520;
    std::string::basic_string[abi:ne180100]<0>(v187, "Capsule");
    int v188 = 0x40000000;
    std::string::basic_string[abi:ne180100]<0>(v189, "Cube");
    int v190 = 1075838976;
    std::string::basic_string[abi:ne180100]<0>(v191, "Preliminary_Text");
    int v192 = 1077936128;
    std::string::basic_string[abi:ne180100]<0>(v193, "Sphere");
    int v194 = 1080033280;
    std::string::basic_string[abi:ne180100]<0>(v195, "Cone");
    int v196 = 1082130432;
    std::string::basic_string[abi:ne180100]<0>(v197, "Cylinder");
    int v198 = 1083179008;
    std::string::basic_string[abi:ne180100]<0>(v199, "Capsule");
    int v200 = 1084227584;
    std::string::basic_string[abi:ne180100]<0>(v201, "Cube");
    int v202 = 1085276160;
    std::string::basic_string[abi:ne180100]<0>(v203, "Preliminary_Text");
    int v204 = 1086324736;
    std::string::basic_string[abi:ne180100]<0>(v205, "Sphere");
    std::map<float,std::string>::map[abi:ne180100]((uint64_t *)&v60, (float *)&v180, 13);
    long long v62 = xmmword_23F7BE620;
    long long v63 = xmmword_23F7BE630;
    long long v64 = xmmword_23F7BE610;
    std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(&v232, (long long *)v32, (uint64_t)&v60);
    std::string::basic_string[abi:ne180100]<0>(v58, "/Text");
    LODWORD(v151) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v152, "Preliminary_Text");
    LODWORD(v153) = 1056964608;
    std::string::basic_string[abi:ne180100]<0>(v154, "Sphere");
    int v155 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v156, "Cone");
    int v157 = 1069547520;
    std::string::basic_string[abi:ne180100]<0>(v158, "Cylinder");
    int v159 = 0x40000000;
    std::string::basic_string[abi:ne180100]<0>(v160, "Capsule");
    int v161 = 1075838976;
    std::string::basic_string[abi:ne180100]<0>(v162, "Cube");
    int v163 = 1077936128;
    std::string::basic_string[abi:ne180100]<0>(v164, "Preliminary_Text");
    int v165 = 1080033280;
    std::string::basic_string[abi:ne180100]<0>(v166, "Sphere");
    int v167 = 1082130432;
    std::string::basic_string[abi:ne180100]<0>(v168, "Cone");
    int v169 = 1083179008;
    std::string::basic_string[abi:ne180100]<0>(v170, "Cylinder");
    int v171 = 1084227584;
    std::string::basic_string[abi:ne180100]<0>(v172, "Capsule");
    int v173 = 1085276160;
    std::string::basic_string[abi:ne180100]<0>(v174, "Cube");
    int v175 = 1086324736;
    std::string::basic_string[abi:ne180100]<0>(v176, "Preliminary_Text");
    std::map<float,std::string>::map[abi:ne180100](v177, (float *)&v151, 13);
    long long v178 = xmmword_23F7BE640;
    __asm { FMOV            V0.2D, #1.0 }
    v179[0] = _Q0;
    v179[1] = xmmword_23F7BE610;
    std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(v233, (long long *)v58, (uint64_t)v177);
    std::string::basic_string[abi:ne180100]<0>(v56, "/Cube");
    LODWORD(v125) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v126, "Cube");
    int v127 = 1056964608;
    std::string::basic_string[abi:ne180100]<0>(v128, "Preliminary_Text");
    int v129 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v130, "Sphere");
    int v131 = 1069547520;
    std::string::basic_string[abi:ne180100]<0>(v132, "Cone");
    int v133 = 0x40000000;
    std::string::basic_string[abi:ne180100]<0>(v134, "Cylinder");
    int v135 = 1075838976;
    std::string::basic_string[abi:ne180100]<0>(v136, "Capsule");
    int v137 = 1077936128;
    std::string::basic_string[abi:ne180100]<0>(v138, "Cube");
    int v139 = 1080033280;
    std::string::basic_string[abi:ne180100]<0>(v140, "Preliminary_Text");
    int v141 = 1082130432;
    std::string::basic_string[abi:ne180100]<0>(v142, "Sphere");
    int v143 = 1083179008;
    std::string::basic_string[abi:ne180100]<0>(v144, "Cone");
    int v145 = 1084227584;
    std::string::basic_string[abi:ne180100]<0>(v146, "Cylinder");
    int v147 = 1085276160;
    std::string::basic_string[abi:ne180100]<0>(v148, "Capsule");
    int v149 = 1086324736;
    std::string::basic_string[abi:ne180100]<0>(v150, "Cube");
    std::map<float,std::string>::map[abi:ne180100](v52, (float *)&v125, 13);
    long long v53 = xmmword_23F7BE650;
    long long v54 = xmmword_23F7BE660;
    long long v55 = xmmword_23F7BE610;
    std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(v234, (long long *)v56, (uint64_t)v52);
    std::string::basic_string[abi:ne180100]<0>(&v51, "/Capsule");
    v99[0] = 0.0;
    std::string::basic_string[abi:ne180100]<0>(&v100, "Capsule");
    int v101 = 1056964608;
    std::string::basic_string[abi:ne180100]<0>(v102, "Cube");
    int v103 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v104, "Preliminary_Text");
    int v105 = 1069547520;
    std::string::basic_string[abi:ne180100]<0>(v106, "Sphere");
    int v107 = 0x40000000;
    std::string::basic_string[abi:ne180100]<0>(v108, "Cone");
    int v109 = 1075838976;
    std::string::basic_string[abi:ne180100]<0>(v110, "Cylinder");
    int v111 = 1077936128;
    std::string::basic_string[abi:ne180100]<0>(v112, "Capsule");
    int v113 = 1080033280;
    std::string::basic_string[abi:ne180100]<0>(v114, "Cube");
    int v115 = 1082130432;
    std::string::basic_string[abi:ne180100]<0>(v116, "Preliminary_Text");
    int v117 = 1083179008;
    std::string::basic_string[abi:ne180100]<0>(v118, "Sphere");
    int v119 = 1084227584;
    std::string::basic_string[abi:ne180100]<0>(v120, "Cone");
    int v121 = 1085276160;
    std::string::basic_string[abi:ne180100]<0>(v122, "Cylinder");
    int v123 = 1086324736;
    std::string::basic_string[abi:ne180100]<0>(v124, "Capsule");
    std::map<float,std::string>::map[abi:ne180100](v47, v99, 13);
    long long v48 = xmmword_23F7BE670;
    long long v49 = xmmword_23F7BE680;
    long long v50 = xmmword_23F7BE610;
    std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(v235, (long long *)&v51, (uint64_t)v47);
    std::string::basic_string[abi:ne180100]<0>(__p, "/Cylinder");
    v73[0] = 0.0;
    std::string::basic_string[abi:ne180100]<0>(&v74, "Cylinder");
    int v75 = 1056964608;
    std::string::basic_string[abi:ne180100]<0>(v76, "Capsule");
    int v77 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v78, "Cube");
    int v79 = 1069547520;
    std::string::basic_string[abi:ne180100]<0>(v80, "Preliminary_Text");
    int v81 = 0x40000000;
    std::string::basic_string[abi:ne180100]<0>(v82, "Sphere");
    int v83 = 1075838976;
    std::string::basic_string[abi:ne180100]<0>(v84, "Cone");
    int v85 = 1077936128;
    std::string::basic_string[abi:ne180100]<0>(v86, "Cylinder");
    int v87 = 1080033280;
    std::string::basic_string[abi:ne180100]<0>(v88, "Capsule");
    int v89 = 1082130432;
    std::string::basic_string[abi:ne180100]<0>(v90, "Cube");
    int v91 = 1083179008;
    std::string::basic_string[abi:ne180100]<0>(v92, "Preliminary_Text");
    int v93 = 1084227584;
    std::string::basic_string[abi:ne180100]<0>(v94, "Sphere");
    int v95 = 1085276160;
    std::string::basic_string[abi:ne180100]<0>(v96, "Cone");
    int v97 = 1086324736;
    std::string::basic_string[abi:ne180100]<0>(v98, "Cylinder");
    std::map<float,std::string>::map[abi:ne180100](v41, v73, 13);
    long long v42 = xmmword_23F7BE690;
    long long v43 = xmmword_23F7BE6A0;
    long long v44 = xmmword_23F7BE610;
    std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(v236, (long long *)__p, (uint64_t)v41);
    uint64_t v8 = 0;
    unint64_t v9 = &v70;
    uint64_t v71 = 0;
    uint64_t v70 = 0;
    uint64_t v69 = &v70;
    while (1)
    {
      unint64_t v10 = &v231[6 * v8];
      uint64_t v11 = v70;
      if (v69 == &v70)
      {
        uint64_t v13 = &v70;
      }
      else
      {
        uint64_t v12 = &v70;
        if (v70)
        {
          do
          {
            uint64_t v13 = (uint64_t **)v11;
            uint64_t v11 = (uint64_t *)v11[1];
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v13 = (uint64_t **)v12[2];
            _ZF = *v13 == (uint64_t *)v12;
            uint64_t v12 = v13;
          }
          while (_ZF);
        }
        BOOL v14 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v71, (const void **)v13 + 4, (const void **)&v231[6 * v8]);
        uint64_t v11 = v70;
        if (!v14)
        {
          uint64_t v15 = &v70;
          if (v70)
          {
            unint64_t v9 = &v70;
            while (1)
            {
              while (1)
              {
                uint64_t v15 = (uint64_t **)v11;
                int v16 = (const void **)(v11 + 4);
                if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v71, (const void **)&v231[6 * v8], (const void **)v11 + 4))break; {
                uint64_t v11 = *v15;
                }
                unint64_t v9 = v15;
                if (!*v15) {
                  goto LABEL_21;
                }
              }
              if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v71, v16, (const void **)&v231[6 * v8])) {
                break;
              }
              unint64_t v9 = v15 + 1;
              uint64_t v11 = v15[1];
              if (!v11) {
                goto LABEL_21;
              }
            }
LABEL_20:
            if (*v9) {
              goto LABEL_27;
            }
            goto LABEL_21;
          }
          goto LABEL_21;
        }
      }
      uint64_t v15 = &v70;
      if (v11)
      {
        unint64_t v9 = v13 + 1;
        uint64_t v15 = v13;
        goto LABEL_20;
      }
LABEL_21:
      uint64_t v17 = (char *)operator new(0x80uLL);
      uint64_t v18 = (uint64_t *)v17;
      v36[0] = v17;
      v36[1] = &v70;
      char v37 = 0;
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v17 + 32), *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        *((_OWORD *)v17 + 2) = *v10;
        *((void *)v17 + 6) = *((void *)v10 + 2);
      }
      std::map<float,std::string>::map[abi:ne180100](v18 + 7, (void *)&v231[6 * v8 + 1] + 1);
      uint64_t v19 = &v231[6 * v8];
      long long v20 = v19[4];
      *((_OWORD *)v18 + 5) = v19[3];
      *((_OWORD *)v18 + 6) = v20;
      *((_OWORD *)v18 + 7) = v19[5];
      char v37 = 1;
      *uint64_t v18 = 0;
      v18[1] = 0;
      uint64_t v18[2] = (uint64_t)v15;
      *unint64_t v9 = v18;
      if (*v69)
      {
        uint64_t v69 = (uint64_t **)*v69;
        uint64_t v18 = *v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v70, v18);
      ++v71;
      v36[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
LABEL_27:
      ++v8;
      unint64_t v9 = &v70;
      if (v8 == 6)
      {
        unint64_t v21 = 576;
        while (1)
        {
          std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*(char **)&v227[v21 / 4]);
          if (SHIBYTE(v226[v21 / 8 + 1]) < 0) {
            operator delete(*(void **)&v225[v21 / 4]);
          }
          v21 -= 96;
          if (!v21)
          {
            std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy((char *)v41[1]);
            unint64_t v22 = 104;
            while (1)
            {
              if (SHIBYTE(v73[v22 - 1]) < 0) {
                operator delete((&v70)[v22 / 2]);
              }
              v22 -= 8;
              if (!(v22 * 4))
              {
                if (v46 < 0) {
                  operator delete(__p[0]);
                }
                std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy((char *)v47[1]);
                unint64_t v23 = 104;
                while (1)
                {
                  if (SHIBYTE(v99[v23 - 1]) < 0) {
                    operator delete((void *)v98[v23 / 2]);
                  }
                  v23 -= 8;
                  if (!(v23 * 4))
                  {
                    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v51.__r_.__value_.__l.__data_);
                    }
                    std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy((char *)v52[1]);
                    uint64_t v24 = 52;
                    while (1)
                    {
                      if (*((char *)&v125 + v24 * 8 - 1) < 0) {
                        operator delete((void *)v124[v24]);
                      }
                      v24 -= 4;
                      if (!(v24 * 8))
                      {
                        if (v57 < 0) {
                          operator delete(v56[0]);
                        }
                        std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy((char *)v177[1]);
                        uint64_t v25 = 52;
                        while (1)
                        {
                          if (*((char *)&v151 + v25 * 8 - 1) < 0) {
                            operator delete((void *)v150[v25]);
                          }
                          v25 -= 4;
                          if (!(v25 * 8))
                          {
                            if (v59 < 0) {
                              operator delete(v58[0]);
                            }
                            std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*((char **)&v60 + 1));
                            uint64_t v26 = 26;
                            while (1)
                            {
                              if (*((char *)&v180 + v26 * 16 - 1) < 0) {
                                operator delete(*((void **)&v179[v26] + 1));
                              }
                              v26 -= 2;
                              if (!(v26 * 16))
                              {
                                if (v33 < 0) {
                                  operator delete(v32[0]);
                                }
                                std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy((char *)v65[1]);
                                uint64_t v27 = 52;
                                while (1)
                                {
                                  if (v206.__r_.__value_.__s.__data_[v27 * 8 - 1] < 0) {
                                    operator delete((void *)v205[v27]);
                                  }
                                  v27 -= 4;
                                  if (!(v27 * 8))
                                  {
                                    if (v35 < 0) {
                                      operator delete(v34[0]);
                                    }
                                    uint64_t v28 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v72);
                                    MEMORY[0x2455CF810](&v206, "metersPerUnit");
                                    *((void *)&v231[0] + 1) = &unk_26F33366B;
                                    *(void *)&v231[0] = 0x3FF0000000000000;
                                    pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v206, (const pxrInternal__aapl__pxrReserved__::VtValue *)v231);
                                    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v231);
                                    if ((v206.__r_.__value_.__s.__data_[0] & 7) != 0) {
                                      atomic_fetch_add_explicit((atomic_uint *volatile)(v206.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                    }
                                    uint64_t v29 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v72);
                                    MEMORY[0x2455CF810](&v206, "upAxis");
                                    MEMORY[0x2455CF810](&v180, "Y");
                                    *((void *)&v231[0] + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                                                              + 1;
                                    *(void *)&v231[0] = v180;
                                    if ((v180 & 7) != 0)
                                    {
                                      unint64_t v30 = v180 & 0xFFFFFFFFFFFFFFF8;
                                      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)*(void *)&v231[0] = v30; {
                                    }
                                      }
                                    pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(v29, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v206, (const pxrInternal__aapl__pxrReserved__::VtValue *)v231);
                                    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v231);
                                    if ((v180 & 7) != 0) {
                                      atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                    }
                                    if ((v206.__r_.__value_.__s.__data_[0] & 7) != 0) {
                                      atomic_fetch_add_explicit((atomic_uint *volatile)(v206.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                    }
                                    uint64_t v40 = v72;
                                    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(&v40);
                                    std::string::basic_string[abi:ne180100]<0>(v65, "/someQuad");
                                    MEMORY[0x2455CF7A0](&v38, v65);
                                    long long v60 = xmmword_23F7BE6B0;
                                    unint64_t v61 = 0xC049000000000000;
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v52, &v38);
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v52 + 1, &v39);
                                    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)v231, &v40);
                                    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define();
                                    uint64_t v31 = *((void *)&v231[0] + 1);
                                    if (*((void *)&v231[0] + 1))
                                    {
                                      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v231[0] + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v31 + 8))(v31); {
                                    }
                                      }
                                    v231[0] = xmmword_23F7BE6EC;
                                    v231[1] = *(_OWORD *)algn_23F7BE6FC;
                                    v231[2] = xmmword_23F7BE70C;
                                    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray((uint64_t)&v206, (uint64_t *)v231, 4);
                                    float v152 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
                                    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_23F54F8C4(_Unwind_Exception *a1)
{
  if ((STACK[0x9D0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x9D0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0xF00]);
  if ((STACK[0x830] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x830] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&STACK[0xBC0]);
  MEMORY[0x2455CE7A0](&STACK[0x4F0]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x2F8]);
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&STACK[0x300]);
  std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy((void *)STACK[0x4D8]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&STACK[0x4E8]);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionDumpDiagnostics(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    uint64_t v2 = (*(uint64_t (**)(void, void **))(**(void **)(v2 + 32) + 80))(*(void *)(v2 + 32), __p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  return v2;
}

void sub_23F550548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOImportSessionDumpDependencies(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    uint64_t v2 = (*(uint64_t (**)(void, void **))(**(void **)(v2 + 32) + 88))(*(void *)(v2 + 32), __p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  return v2;
}

void sub_23F5505DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_CopyInit(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_Move(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_Hash(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_Equal(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_EqualPtr(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_StreamOut()
{
  return MEMORY[0x270FA31E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetTypeid()
{
  return MEMORY[0x263F8C230];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C230];
}

unsigned char *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetProxiedAsVtValue@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = &unk_26F333523;
  *(unsigned char *)a2 = *result;
  return result;
}

uint64_t std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<std::string>::VtArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::assign<std::string const*>((unint64_t *)a1, a2, a2 + 24 * a3);
  return a1;
}

void sub_23F5507A8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v1);
  _Unwind_Resume(a1);
}

void *std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>::~pair(void *a1)
{
  uint64_t v2 = a1[4];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[3];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 2));
  uint64_t v4 = a1[1];
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  return a1;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  return a1;
}

uint64_t ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke(uint64_t a1)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 32));
  uint64_t result = MEMORY[0x2455CFC40](v2, a1 + 48);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    char v5 = *(uint64_t (**)(void))(**(void **)(v4 + 16) + 24);
    return v5();
  }
  return result;
}

_DWORD *__copy_helper_block_ea8_32c64_ZTSN32pxrInternal__aapl__pxrReserved__8TfRefPtrINS_8UsdStageEEE48c48_ZTSN32pxrInternal__aapl__pxrReserved__7SdfPathE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v3 = a1 + 32;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 16), (_DWORD *)(a2 + 48));

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 20), (_DWORD *)(a2 + 52));
}

atomic_uint **__destroy_helper_block_ea8_32c64_ZTSN32pxrInternal__aapl__pxrReserved__8TfRefPtrINS_8UsdStageEEE48c48_ZTSN32pxrInternal__aapl__pxrReserved__7SdfPathE(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 48);

  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)(a1 + 32));
}

uint64_t ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke_37(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(result + 40);
  if (v2 != v3)
  {
    uint64_t v4 = v2 + 16;
    do
    {
      uint64_t v5 = v4 - 16;
      int v11 = *(_DWORD *)(v4 - 16);
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v12 = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, (_DWORD *)v4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, (_DWORD *)(v4 + 4));
      uint64_t v7 = *(void *)(v4 + 8);
      uint64_t v15 = v7;
      if ((v7 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v10 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11)) {
        pxrInternal__aapl__pxrReserved__::UsdPrim::SetTypeName((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
      }
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      uint64_t result = v12;
      if (v12) {
        uint64_t result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
      }
      v4 += 40;
    }
    while (v5 + 40 != v3);
  }
  uint64_t v9 = *(void *)(v1 + 56);
  if (v9) {
    return (*(uint64_t (**)(void, void))(**(void **)(v9 + 16) + 24))(*(void *)(v9 + 16), 0);
  }
  return result;
}

void sub_23F550B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::SetTypeName(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v3 = atomic_load(MEMORY[0x263F90528]);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v3 + 448));
  }
  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
}

void *__copy_helper_block_ea8_32c108_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__7UsdPrimENS2_7TfTokenEEENS_9allocatorIS5_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*>(v2, *(void *)(a2 + 32), *(void *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
}

void __destroy_helper_block_ea8_32c108_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__7UsdPrimENS2_7TfTokenEEENS_9allocatorIS5_EEEE(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke_39(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(result + 40);
  if (v2 != v3)
  {
    uint64_t v4 = v2 + 16;
    do
    {
      uint64_t v5 = v4 - 16;
      int v9 = *(_DWORD *)(v4 - 16);
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v10 = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, (_DWORD *)v4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, (_DWORD *)(v4 + 4));
      uint64_t v7 = *(void *)(v4 + 8);
      uint64_t v13 = v7;
      if ((v7 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v13 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9)) {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>();
      }
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
      uint64_t result = v10;
      if (v10) {
        uint64_t result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
      }
      v4 += 56;
    }
    while (v5 + 56 != v3);
  }
  uint64_t v8 = *(void *)(v1 + 56);
  if (v8) {
    return (*(uint64_t (**)(void, void))(**(void **)(v8 + 16) + 24))(*(void *)(v8 + 16), 0);
  }
  return result;
}

void sub_23F550DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c114_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS2_7GfVec3dEEENS_9allocatorIS5_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*>(v2, *(void *)(a2 + 32), *(void *)(a2 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
}

void __destroy_helper_block_ea8_32c114_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS2_7GfVec3dEEENS_9allocatorIS5_EEEE(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

realityio *___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke_41(uint64_t a1, realityio::ImportSession *a2)
{
  uint64_t result = *(realityio **)(a1 + 32);
  if (result) {
    return (realityio *)realityio::updateStageOnRepeat(result, a2);
  }
  return result;
}

uint64_t *std::map<float,std::string>::map[abi:ne180100](uint64_t *a1, float *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::__emplace_hint_unique_key_args<float,std::pair<float const,std::string> const&>(a1, v4, (uint64_t)a2, *a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_23F550EC4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::__emplace_hint_unique_key_args<float,std::pair<float const,std::string> const&>(uint64_t *result, uint64_t *a2, uint64_t a3, float a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v7 = (float *)(result + 1);
  if (result + 1 != a2)
  {
    float v8 = *((float *)a2 + 8);
    if (v8 <= a4)
    {
      if (v8 >= a4) {
        return result;
      }
      uint64_t v13 = a2 + 1;
      int v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          int v12 = (uint64_t *)*v12;
          uint64_t v5 = v13;
          int v14 = (float *)v13;
        }
        while (v12);
      }
      else
      {
        int v14 = (float *)a2;
        do
        {
          long long v20 = v14;
          int v14 = (float *)*((void *)v14 + 2);
        }
        while (*(float **)v14 != v20);
      }
      if (v14 == v7) {
        goto LABEL_42;
      }
      if (v14[8] > a4) {
        goto LABEL_42;
      }
      unint64_t v21 = *(uint64_t **)v7;
      uint64_t v13 = result + 1;
      uint64_t v5 = result + 1;
      if (!*(void *)v7) {
        goto LABEL_42;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v5 = v21;
          float v22 = *((float *)v21 + 8);
          if (v22 <= a4) {
            break;
          }
          unint64_t v21 = (uint64_t *)*v21;
          uint64_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }
        if (v22 >= a4) {
          return result;
        }
        unint64_t v21 = (uint64_t *)v21[1];
        if (!v21)
        {
LABEL_30:
          uint64_t v13 = v5 + 1;
          goto LABEL_42;
        }
      }
    }
  }
  int v9 = (uint64_t *)*a2;
  if ((uint64_t *)*result == a2)
  {
    int v11 = a2;
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (uint64_t *)*a2;
      do
      {
        int v11 = v10;
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        int v11 = (uint64_t *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        uint64_t v15 = v11;
      }
      while (v16);
    }
    if (*((float *)v11 + 8) >= a4)
    {
      uint64_t v18 = *(uint64_t **)v7;
      uint64_t v13 = result + 1;
      uint64_t v5 = result + 1;
      if (!*(void *)v7) {
        goto LABEL_42;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v5 = v18;
          float v19 = *((float *)v18 + 8);
          if (v19 <= a4) {
            break;
          }
          uint64_t v18 = (uint64_t *)*v18;
          uint64_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }
        if (v19 >= a4) {
          return result;
        }
        uint64_t v18 = (uint64_t *)v18[1];
        if (!v18) {
          goto LABEL_30;
        }
      }
    }
  }
  if (v9) {
    uint64_t v17 = v11;
  }
  else {
    uint64_t v17 = a2;
  }
  if (v9) {
    uint64_t v13 = v11 + 1;
  }
  else {
    uint64_t v13 = a2;
  }
  if (!*v13)
  {
    uint64_t v5 = v17;
LABEL_42:
    unint64_t v23 = (char *)operator new(0x40uLL);
    *((_DWORD *)v23 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_DWORD *)a3;
    uint64_t v24 = (std::string *)(v23 + 40);
    if (*(char *)(a3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
    }
    else
    {
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
      *((void *)v23 + 7) = *(void *)(a3 + 24);
    }
    *(void *)unint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v5;
    *uint64_t v13 = (uint64_t)v23;
    uint64_t v25 = *(void *)*v6;
    if (v25)
    {
      uint64_t *v6 = v25;
      unint64_t v23 = (char *)*v13;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], (uint64_t *)v23);
    ++v6[2];
  }
  return result;
}

void sub_23F5510EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

std::string *std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::map<float,std::string>::map[abi:ne180100]((uint64_t *)&this[1], (void *)a3);
  long long v6 = *(_OWORD *)(a3 + 24);
  long long v7 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(_OWORD *)(a3 + 40);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v7;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  return this;
}

void sub_23F5511D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::LiveSessionPrimDescriptor>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::LiveSessionPrimDescriptor>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::LiveSessionPrimDescriptor>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

double pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_CopyInit(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_Move(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_Hash(double *a1)
{
  double v1 = *a1;
  if (*a1 == 0.0) {
    double v1 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * *(void *)&v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_Equal(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_EqualPtr(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_StreamOut()
{
  return MEMORY[0x270FA31E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetTypeid()
{
  return MEMORY[0x263F8C240];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C240];
}

double pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetProxiedAsVtValue@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  a2[1] = &unk_26F33366B;
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_Destroy(void *result)
{
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  *double result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_Hash(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_Equal(void *a1, void *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_EqualPtr(void *a1, void *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F88](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7TfTokenE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetProxiedTypeid()
{
}

atomic_uint **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetProxiedAsVtValue@<X0>(atomic_uint **result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  a2[1] = (atomic_uint *)((char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                        + 1);
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return result;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetAttr> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery> &>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetAttr> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery> &>(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA48E8](a2);
}

uint64_t *std::map<float,std::string>::map[abi:ne180100](uint64_t *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = (float *)(a2 + 1);
  long long v5 = (float *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::__emplace_hint_unique_key_args<float,std::pair<float const,std::string> const&>(a1, v3, (uint64_t)(v5 + 8), v5[8]);
      long long v6 = (float *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = *(float **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (float *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      long long v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23F5516D4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(atomic_ullong *a1)
{
  double result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x2455CF280]();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(result);
      MEMORY[0x2455D2BD0]();
    }
    return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::assign<std::string const*>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(a1);
  v6[0] = &v8;
  v6[1] = &v7;
  _ZN32pxrInternal__aapl__pxrReserved__7VtArrayINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6resizeIZNS8_6assignIPKS7_EENS1_9enable_ifIXntsr3std11is_integralIT_EE5valueEvE4typeESE_SE_E7_CopierEEvmOSE_(a1, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3), v6);
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = 24 * *a1;
      do
      {
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        v4 += 24;
        v5 -= 24;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void _ZN32pxrInternal__aapl__pxrReserved__7VtArrayINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6resizeIZNS8_6assignIPKS7_EENS1_9enable_ifIXntsr3std11is_integralIT_EE5valueEvE4typeESE_SE_E7_CopierEEvmOSE_(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    New = (void *)a1[4];
    if (New)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(New - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 3 * a2;
            do
            {
              if (SHIBYTE(New[v13 + 2]) < 0) {
                operator delete((void *)New[v13]);
              }
              v13 += 3;
            }
            while (3 * v3 != v13);
            goto LABEL_25;
          }
          uint64_t v9 = a1[4];
          if (*(void *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
            std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v9, v9 + 24 * v3, (uint64_t)New);
          }
LABEL_19:
          uint64_t v10 = &New[3 * v3];
          goto LABEL_20;
        }
        New = (void *)a1[4];
      }
      uint64_t v11 = (uint64_t)New;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
      std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v11, v11 + 24 * v12, (uint64_t)New);
      if (v3 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
    if (a2 <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
      New = v10;
LABEL_20:
      std::uninitialized_copy[abi:ne180100]<std::string const*,std::string*>(**a3, *a3[1], (uint64_t)v10);
LABEL_25:
      if (New != (void *)a1[4])
      {
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(a1);
        a1[4] = (unint64_t)New;
      }
      *a1 = a2;
      return;
    }
  }

  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(a1);
}

uint64_t std::uninitialized_copy[abi:ne180100]<std::string const*,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (std::string *)(a3 + v6);
      unint64_t v8 = (long long *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v6 += 24;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_23F551A5C(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_23F551A88(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = (void *)a1[4];
      uint64_t v5 = 8 * *a1;
      do
      {
        if ((*v4 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Hash(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(*a1)[4];
    unint64_t v3 = **a1;
    do
    {
      uint64_t v4 = *v2++;
      unint64_t v1 = (v4 & 0xFFFFFFFFFFFFFFF8)
         + (((v4 & 0xFFFFFFFFFFFFFFF8) + v1 + ((v4 & 0xFFFFFFFFFFFFFFF8) + v1) * ((v4 & 0xFFFFFFFFFFFFFFF8) + v1)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (uint64_t *)a1[4];
  uint64_t v6 = *(uint64_t **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    uint64_t v8 = *v5++;
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v10 = *v6++;
    BOOL result = v9 == (v10 & 0xFFFFFFFFFFFFFFF8);
    BOOL v11 = v9 != (v10 & 0xFFFFFFFFFFFFFFF8) || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_Streamer>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F88](a2, v3);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[4];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[3];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 2));
  uint64_t result = a1[1];
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void *std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    long long v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>(a4);
    uint64_t v7 = result;
    void *v6 = result;
    v6[1] = result;
    for (uint64_t v6[2] = &result[5 * v8]; a2 != a3; v7 += 5)
    {
      uint64_t v9 = std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]((uint64_t)result, a2);
      a2 += 40;
      uint64_t result = (void *)(v9 + 40);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_23F552230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<pxrInternal__aapl__pxrReserved__::TfToken>::GetValue(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::TfToken>(a2, *(uint64_t **)(a1 + 8));
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<pxrInternal__aapl__pxrReserved__::TfToken>::IsEqual(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a2);
  if (result)
  {
    uint64_t v5 = *((void *)v2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return (*(void *)v2 & 0xFFFFFFFFFFFFFFF8) == (**(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v6, (uint64_t)a1);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
        + 1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (v7) {
    (*(void (**)(unsigned char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_23F5524B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x492492492492493) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    long long v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>(a4);
    uint64_t v7 = result;
    void *v6 = result;
    v6[1] = result;
    for (uint64_t v6[2] = &result[7 * v8]; a2 != a3; v7 += 7)
    {
      uint64_t v9 = std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>::pair[abi:ne180100]((uint64_t)result, a2);
      a2 += 56;
      uint64_t result = (void *)(v9 + 56);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_23F55256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_Hash(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_Equal(void **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 3;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3f const&>((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3f const&>(uint64_t a1, float *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4 = *a2;
  if (*a2 == 0.0) {
    float v4 = 0.0;
  }
  unint64_t v5 = LODWORD(v4);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v5 = ((*(void *)a1 + LODWORD(v4) + (*(void *)a1 + LODWORD(v4)) * (*(void *)a1 + (unint64_t)LODWORD(v4))) >> 1)
  }
       + LODWORD(v4);
  else {
    *(unsigned char *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 1;
  }
  *(void *)a1 = v5;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&>(a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&>(uint64_t result, float *a2, float *a3)
{
  float v3 = *a2;
  if (*a2 == 0.0) {
    float v3 = 0.0;
  }
  unint64_t v4 = LODWORD(v3);
  if (*(unsigned char *)(result + 8)) {
    unint64_t v4 = ((*(void *)result
  }
         + LODWORD(v3)
         + (*(void *)result + LODWORD(v3)) * (*(void *)result + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else {
    *(unsigned char *)(result + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 1;
  }
  *(void *)uint64_t result = v4;
  float v5 = *a3;
  if (*a3 == 0.0) {
    float v5 = 0.0;
  }
  *(void *)uint64_t result = LODWORD(v5) + ((v4 + LODWORD(v5) + (v4 + LODWORD(v5)) * (v4 + LODWORD(v5))) >> 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::operator==(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(void *)(a2 + 24))
  {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  float v5 = (float *)a1[4];
  char v6 = &v5[3 * *a1];
  for (uint64_t i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_Streamer>(void *a1, uint64_t a2)
{
  *a1 += 12;
  return MEMORY[0x270FA3F48](a2);
}

void *pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_23F552C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_Hash(uint64_t **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C258];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetShapeData(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetNumElements(uint64_t a1)
{
  return **(void **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
    MEMORY[0x2455D2BD0](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * *(void *)a1) == 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<int>::_Streamer>(void *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy()
{
}

float pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_CopyInit(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_Move(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_Hash(float *a1)
{
  float v1 = *a1;
  if (*a1 == 0.0) {
    float v1 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * LODWORD(v1));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_Equal(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_EqualPtr(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_StreamOut()
{
  return MEMORY[0x270FA31F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetTypeid()
{
  return MEMORY[0x263F8C248];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C248];
}

float pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetProxiedAsVtValue@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = &unk_26F333A9B;
  float result = *a1;
  *(float *)a2 = *a1;
  return result;
}

void realityio::TransformAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t *a2@<X3>, const pxrInternal__aapl__pxrReserved__::VtValue **a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v113, a1);
  uint64_t v100 = 0;
  memset(v99, 0, sizeof(v99));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v96, 1.0);
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v95, 1.0);
  uint64_t v6 = *a2;
  if (a2[1] == *a2)
  {
    char v83 = 0;
LABEL_40:
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    memset(v92, 0, sizeof(v92));
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v99);
    uint64_t v31 = v100;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v99);
    char v33 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v100 + 8 * *(void *)&v99[0]);
    if (v31 == v33)
    {
      double v35 = -1000000.0;
      double v34 = 1000000.0;
    }
    else
    {
      double v34 = 1000000.0;
      double v35 = -1000000.0;
      do
      {
        if ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != 0) {
          Emptyuint64_t String = (*(void *)v31 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
        }
        char v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](__p, "!invert!xformOp:");
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v38 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v38 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
        }
        if (*(char *)(v38 + 23) >= 0) {
          int v39 = (const char *)v38;
        }
        else {
          int v39 = *(const char **)v38;
        }
        int v40 = *(char *)(EmptyString + 23);
        if (v40 >= 0) {
          size_t v41 = *(unsigned __int8 *)(EmptyString + 23);
        }
        else {
          size_t v41 = *(void *)(EmptyString + 8);
        }
        size_t v42 = strlen(v39);
        if (v41 >= v42)
        {
          size_t v44 = v42;
          if (v40 >= 0) {
            uint64_t v45 = (const char *)EmptyString;
          }
          else {
            uint64_t v45 = *(const char **)EmptyString;
          }
          BOOL v43 = strncmp(v45, v39, v44) == 0;
        }
        else
        {
          BOOL v43 = 0;
        }
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v43)
        {
          __p[1] = 0;
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v94, __p);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          __p[1] = 0;
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v93, __p);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          __p[1] = 0;
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v92, __p);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v102, (pxrInternal__aapl__pxrReserved__::SdfPath *)v97, v31);
          std::string::basic_string[abi:ne180100]<0>(__p, "/__timeSamples");
          MEMORY[0x2455CF7A0](&v106, __p);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((uint64_t *)&v85, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v102, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
          if (SBYTE7(v111) < 0) {
            operator delete(__p[0]);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
          char v46 = *a3;
          uint64_t v47 = a3[1] - *a3;
          if (v47)
          {
            unint64_t v48 = v47 >> 4;
            long long v49 = (uint64_t *)*a2;
            if (v48 <= 1) {
              unint64_t v48 = 1;
            }
            while (1)
            {
              uint64_t v50 = *v49++;
              if (v50 == (void)v85) {
                break;
              }
              char v46 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v46 + 16);
              if (!--v48) {
                goto LABEL_71;
              }
            }
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, v46);
          }
          else
          {
LABEL_71:
            __p[1] = 0;
          }
          *((void *)&v106 + 1) = 0;
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v91, (pxrInternal__aapl__pxrReserved__::SdfPath *)v97, v31);
          std::string v51 = *a3;
          uint64_t v52 = a3[1] - *a3;
          if (v52)
          {
            unint64_t v53 = v52 >> 4;
            long long v54 = (void **)*a2;
            if (v53 <= 1) {
              unint64_t v53 = 1;
            }
            while (1)
            {
              long long v55 = *v54++;
              if (v55 == v91) {
                break;
              }
              std::string v51 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v51 + 16);
              if (!--v53) {
                goto LABEL_78;
              }
            }
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102, v51);
          }
          else
          {
LABEL_78:
            *((void *)&v102 + 1) = 0;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v91);
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
          {
            if (((uint64_t)__p[1] & 4) != 0) {
              uint64_t v56 = (void *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8) + 168))(__p);
            }
            else {
              uint64_t v56 = __p[0];
            }
            pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v106, (void *)v56 + 3);
            if (v34 >= *(double *)v56) {
              double v34 = *(double *)v56;
            }
            if (*((double *)v56 + 1) >= v35) {
              double v35 = *((double *)v56 + 1);
            }
          }
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v94, __p);
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v93, &v106);
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v92, &v102);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v106);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          uint64_t v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
        }
        uint64_t v31 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v31 + 8);
      }
      while (v31 != v33);
    }
    __p[0] = 0;
    *(void *)&long long v106 = 0;
    *(void *)&long long v85 = 0;
    int v91 = 0;
    realityio::getAnimInputControlsFromInputs(a2, a3, (double *)__p, &v106, &v85, (double *)&v91);
    if (v35 >= v34) {
      unint64_t v57 = (unint64_t)((v35 - v34) * *(double *)__p + 1.0 + 0.5);
    }
    else {
      unint64_t v57 = 0;
    }
    if (v35 >= v34) {
      double v58 = v34;
    }
    else {
      double v58 = 0.0;
    }
    if (v35 >= v34) {
      double v59 = v35;
    }
    else {
      double v59 = 0.0;
    }
    std::vector<RESRT>::vector(&v91, v57);
    unint64_t v84 = v57;
    if (v57)
    {
      uint64_t v60 = 0;
      double v61 = (v59 - v58) / ((double)v57 + -1.0);
      double v62 = v58;
      do
      {
        v90[0] = 0;
        v90[1] = 0;
        int v89 = (uint64_t *)v90;
        if (*(void *)&v99[0])
        {
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          unint64_t v65 = 0;
          do
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v99);
            long long v67 = (uint64_t *)((char *)v100 + v63);
            if ((*(void *)((unsigned char *)v100 + v63) & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v68 = (*(void *)((unsigned char *)v100 + v63) & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t v68 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v66);
            }
            uint64_t v69 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](__p, "!invert!xformOp:");
            if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v70 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t v70 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v69);
            }
            if (*(char *)(v70 + 23) >= 0) {
              uint64_t v71 = (const char *)v70;
            }
            else {
              uint64_t v71 = *(const char **)v70;
            }
            int v72 = *(char *)(v68 + 23);
            if (v72 >= 0) {
              size_t v73 = *(unsigned __int8 *)(v68 + 23);
            }
            else {
              size_t v73 = *(void *)(v68 + 8);
            }
            size_t v74 = strlen(v71);
            if (v73 >= v74)
            {
              size_t v76 = v74;
              if (v72 >= 0) {
                int v77 = (const char *)v68;
              }
              else {
                int v77 = *(const char **)v68;
              }
              BOOL v75 = strncmp(v77, v71, v76) == 0;
            }
            else
            {
              BOOL v75 = 0;
            }
            if (((uint64_t)__p[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (!v75)
            {
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v94[0] + v64));
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v106, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v93[0] + v64));
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
              {
                if (((uint64_t)__p[1] & 4) != 0) {
                  uint64_t v78 = (void *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                }
                                                                   + 168))(__p);
                else {
                  uint64_t v78 = __p[0];
                }
                realityio::getSampledValueAtTime((uint64_t)v78, &v102, v62);
                *(void *)&long long v85 = v67;
                int v79 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(&v89, v67, (uint64_t)&std::piecewise_construct, (uint64_t **)&v85);
                pxrInternal__aapl__pxrReserved__::VtValue::operator=(v79 + 5, &v102);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v92[0] + v64));
                *(void *)&long long v85 = v67;
                uint64_t v80 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(&v89, v67, (uint64_t)&std::piecewise_construct, (uint64_t **)&v85);
                pxrInternal__aapl__pxrReserved__::VtValue::operator=(v80 + 5, &v102);
              }
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102);
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v106);
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
            }
            ++v65;
            v64 += 16;
            v63 += 8;
          }
          while (*(void *)&v99[0] > v65);
        }
        char v101 = 0;
        if (getLocalTransformation((uint64_t)__p, &v101, v99, (uint64_t)&v89))
        {
          MEMORY[0x2455CE5D0](&v106, __p);
          if (v83)
          {
            long long v85 = v106;
            long long v86 = v107;
            long long v87 = v108;
            long long v88 = v109;
            pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
            long long v102 = v85;
            long long v103 = v86;
            long long v104 = v87;
            long long v105 = v88;
            pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
            long long v106 = v102;
            long long v107 = v103;
            long long v108 = v104;
            long long v109 = v105;
          }
          REDecomposeMatrix();
        }
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v89, v90[0]);
        ++v60;
        double v62 = v61 + v62;
      }
      while (v60 != v84);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v97);
    RETimelineDefinitionCreateSampledSRTAnimation();
    RETimelineDefinitionSetInterpolationEnabled();
    RETimelineDefinitionSetTargetPath();
    RETimelineDefinitionSetFrameInterval();
    RETimelineDefinitionSetStartTime();
    RETimelineDefinitionSetEndTime();
    RETimelineDefinitionSetSRTValues();
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    MEMORY[0x2455CDC30](ServiceLocator);
    uint64_t v112 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v111 = 0u;
    *(void *)&long long v106 = RETimelineDefinitionCreateTimelineAsset();
    if ((void)v106) {
      RERetain();
    }
    pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::emplace_back<realityio::WrappedRERef<REAsset *>>((uint64_t)__p, &v106);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v106);
    RERelease();
    RERelease();
    *(void *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  char v83 = 0;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v106, (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)*a3 + v8));
    NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + v7));
    BOOL v11 = (realityio::TargetPaths *)MEMORY[0x2455CF810](__p, "xformOpOrder");
    uint64_t v12 = *NameToken;
    uint64_t v13 = (atomic_uint *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8) == v13)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + v7));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v97, (int *)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v98);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v106);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
      {
        if (((uint64_t)__p[1] & 4) != 0) {
          unint64_t v23 = (long long *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8) + 168))(__p);
        }
        else {
          unint64_t v23 = (long long *)__p[0];
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator=((uint64_t)v99, v23);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      goto LABEL_32;
    }
    int v14 = (realityio::TargetPaths *)realityio::TargetPaths::upAxisPath(v11);
    if (*(void *)(v6 + 8 * v9) == *(void *)v14) {
      break;
    }
    if (*(void *)(v6 + 8 * v9) == *(void *)realityio::TargetPaths::metersPerUnitPath(v14))
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)*a3 + v8));
      int v24 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      float v25 = 0.01;
      if (v24)
      {
        if (((uint64_t)__p[1] & 4) != 0) {
          uint64_t v26 = (void **)(*(uint64_t (**)(void **, float))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
        }
                                                                   + 168))(__p, 0.01);
        else {
          uint64_t v26 = __p;
        }
        float v25 = *(double *)v26;
      }
      *(float *)&long long v102 = v25;
      *((float *)&v102 + 1) = v25;
      *((float *)&v102 + 2) = v25;
      uint64_t v27 = (long long *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale();
      long long v28 = *v27;
      long long v29 = v27[1];
      long long v30 = v27[3];
      v95[2] = v27[2];
      v95[3] = v30;
      v95[0] = v28;
      v95[1] = v29;
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      goto LABEL_31;
    }
LABEL_32:
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v106);
    ++v9;
    uint64_t v6 = *a2;
    v8 += 16;
    v7 += 8;
    if (v9 >= (a2[1] - *a2) >> 3) {
      goto LABEL_40;
    }
  }
  unint64_t v15 = atomic_load(MEMORY[0x263F90538]);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
  }
  uint64_t v16 = *(void *)(v15 + 1344);
  *(void *)&long long v85 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)&long long v85 = v85 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102, (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)*a3 + v8));
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v102))
  {
    if ((BYTE8(v102) & 4) != 0) {
      uint64_t v17 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v102 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v102);
    }
    else {
      uint64_t v17 = &v102;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v85, v17);
  }
  unint64_t v18 = atomic_load(MEMORY[0x263F90538]);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
  }
  if ((v85 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v18 + 1352) & 0xFFFFFFFFFFFFFFF8))
  {
    __p[1] = 0;
    *(void *)&long long v111 = 0;
    __p[0] = (void *)0x3FF0000000000000;
    *((void *)&v111 + 1) = 0xC056800000000000;
    float v19 = (long long *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v96, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__p);
    long long v20 = *v19;
    long long v21 = v19[1];
    long long v22 = v19[3];
    v96[2] = v19[2];
    void v96[3] = v22;
    v96[0] = v20;
    v96[1] = v21;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102);
  if ((v85 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_31:
  char v83 = 1;
  goto LABEL_32;
}

void sub_23F553DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a71);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a56);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a57);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v71 - 160));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator=(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      char v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        char v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v8);
  }
  return a1;
}

void sub_23F554110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *realityio::TargetPaths::upAxisPath(realityio::TargetPaths *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/upAxis]");
    MEMORY[0x2455CF7A0](&realityio::TargetPaths::upAxisPath(void)::kUpAxisPath, __p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  return &realityio::TargetPaths::upAxisPath(void)::kUpAxisPath;
}

void sub_23F5541B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *realityio::TargetPaths::metersPerUnitPath(realityio::TargetPaths *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/metersPerUnit]");
    MEMORY[0x2455CF7A0](&realityio::TargetPaths::metersPerUnitPath(void)::kMetersPerUnitPath, __p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  return &realityio::TargetPaths::metersPerUnitPath(void)::kMetersPerUnitPath;
}

void sub_23F554274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v4, v13);
    }
    else {
      int v14 = 0;
    }
    unint64_t v15 = v14;
    uint64_t v16 = &v14[16 * v10];
    unint64_t v18 = &v14[16 * v13];
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v16, a2);
    uint64_t v17 = v16 + 16;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__swap_out_circular_buffer(a1, &v15);
    unint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::VtValue(*(void **)(v4 - 8), a2);
    unint64_t v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_23F554394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  float v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 - 16));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__swap_out_circular_buffer(void *a1, void *a2)
{
  unint64_t v5 = (void *)*a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t result = (void *)a2[1];
  while (v4 != v5)
  {
    v4 -= 2;
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(result - 2, v4);
  }
  a2[1] = result;
  unint64_t v7 = (void *)*a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = i - 16;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, a2[1]);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 5));
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x38uLL);
  *(void *)a3 = result;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  uint64_t v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[6] = 0;
  *(unsigned char *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
  return result;
}

uint64_t RIOPxrSdfReferenceGetTypeID()
{
  if (RIOPxrSdfReferenceGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfReferenceGetTypeID::onceToken, &__block_literal_global_0);
  }
  return RIOPxrSdfReferenceGetTypeID::typeID;
}

void __RIOPxrSdfReferenceGetTypeID_block_invoke()
{
  if (!RIOPxrSdfReferenceGetTypeID::typeID) {
    RIOPxrSdfReferenceGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdfReferenceIsLessThan(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return MEMORY[0x270FA4230](a1 + 16, a2 + 16);
  }
  else {
    return 0;
  }
}

uint64_t RIOPxrSdfReferenceIsEqual(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return MEMORY[0x270FA4228](a1 + 16, a2 + 16);
  }
  else {
    return 0;
  }
}

uint64_t RIOPxrSdfReferenceCreateFromCStringWithAssetPathAndPrimPath(char *__s, uint64_t a2)
{
  if (__s && a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, __s);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v6, 0.0, 1.0);
    uint64_t v7 = 0;
    MEMORY[0x2455CE860](__p, v8, a2 + 16, v6, &v7);
    uint64_t v3 = RIOPxrSdfReferenceCreate<pxrInternal__aapl__pxrReserved__::SdfReference>((long long *)__p);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v7, 0);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v6, 0.0, 1.0);
    uint64_t v5 = 0;
    MEMORY[0x2455CE860](__p, v8, &v7, v6, &v5);
    uint64_t v3 = RIOPxrSdfReferenceCreate<pxrInternal__aapl__pxrReserved__::SdfReference>((long long *)__p);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v5, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
  return v3;
}

void sub_23F5548CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfReferenceCreate<pxrInternal__aapl__pxrReserved__::SdfReference>(long long *a1)
{
  if (RIOPxrSdfReferenceGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfReferenceGetTypeID::onceToken, &__block_literal_global_0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance)
  {
    long long v4 = *a1;
    *(void *)(Instance + 32) = *((void *)a1 + 2);
    *(_OWORD *)(Instance + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v4;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    *(void *)a1 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 40), (_DWORD *)a1 + 6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 44), (_DWORD *)a1 + 7);
    *(_OWORD *)(v3 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = a1[2];
    uint64_t v5 = *((void *)a1 + 6);
    *((void *)a1 + 6) = 0;
    *(void *)(v3 + 64) = v5;
  }
  return v3;
}

void pxrInternal__aapl__pxrReserved__::SdfReference::~SdfReference(pxrInternal__aapl__pxrReserved__::SdfReference *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

CFStringRef RIOPxrSdfReferenceCopyAssetPathString(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  float v1 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    float v1 = *(const char **)v1;
  }
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

void RIOPxrSdfReferenceSetAssetPath(uint64_t a1, char *a2)
{
  if (a1 && a2)
  {
    uint64_t v2 = a1 + 16;
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfReference::SetAssetPath(v2);
    if (v4 < 0) {
      operator delete(__p);
    }
  }
}

void sub_23F554AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfReference::SetAssetPath(uint64_t a1)
{
  MEMORY[0x2455CE830](&v2);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v5, v2.__r_.__value_.__l.__data_, v2.__r_.__value_.__l.__size_);
  }
  else {
    std::string v5 = v2;
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v5;
  *((unsigned char *)&v5.__r_.__value_.__s + 23) = 0;
  v5.__r_.__value_.__s.__data_[0] = 0;
  if (v4 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v2.__r_.__value_.__l.__data_);
  }
}

void sub_23F554B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t RIOPxrSdfReferenceCopyPrimPath(uint64_t result)
{
  if (result) {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 40));
  }
  return result;
}

uint64_t RIOPxrSdfReferenceSetPrimPath(uint64_t result, uint64_t a2)
{
  if (result && a2)
  {
    uint64_t v3 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(result + 40, (_DWORD *)(a2 + 16));
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v3 + 44, (_DWORD *)(a2 + 20));
  }
  return result;
}

void _RIOPxrSdfReferenceCFFinalize(uint64_t *a1)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](a1 + 8, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  if (*((char *)a1 + 39) < 0)
  {
    std::string v2 = (void *)a1[2];
    operator delete(v2);
  }
}

BOOL _RIOPxrSdfReferenceCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrSdfReferenceCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrSdfReferenceCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfReference %p>", a1);
}

CFStringRef _RIOPxrSdfReferenceCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfReference %p>", a1);
}

realityio::TextComponentBuilder *realityio::TextComponentBuilder::TextComponentBuilder(realityio::TextComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "TextComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTextComponentBuilderIdentifier);
  realityio::generateTextPrimDirtyStageSubscription(&v5);
  v12[0] = &unk_26F333C90;
  void v12[3] = v12;
  v11[0] = &unk_26F333DA0;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F333C18;
  return this;
}

void sub_23F554E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::TextComponentBuilder::run(realityio::TextComponentBuilder *this, std::__shared_weak_count **a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  unint64_t v48 = (realityio::Inputs *)a2;
  uint64_t v3 = realityio::TextEntityBuilder::kOutputName(this);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v3, (uint64_t)v46);
  if (v46[0])
  {
    uint64_t v45 = v47;
    if (v47)
    {
      uint64_t v5 = realityio::TextMeshAssetBuilder::kOutputName(v4);
      unint64_t v53 = 0;
      long long v54 = 0;
      unint64_t v6 = a2[3];
      if (v6)
      {
        long long v54 = std::__shared_weak_count::lock(v6);
        if (v54) {
          unint64_t v53 = a2[2];
        }
      }
      MEMORY[0x2455CF830](&v55, v5);
      uint64_t v7 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(a2[1], &v53);
      if (v7 == v8)
      {
        std::operator+<char>();
        long long v21 = std::string::append(&v50, ") at prim path (");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4));
        int v24 = *(char *)(String + 23);
        if (v24 >= 0) {
          float v25 = (const std::string::value_type *)String;
        }
        else {
          float v25 = *(const std::string::value_type **)String;
        }
        if (v24 >= 0) {
          std::string::size_type v26 = *(unsigned __int8 *)(String + 23);
        }
        else {
          std::string::size_type v26 = *(void *)(String + 8);
        }
        uint64_t v27 = std::string::append(&v51, v25, v26);
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        uint64_t v19 = std::string::append(&v52, ")");
      }
      else
      {
        uint64_t v9 = 1;
        char v10 = v7;
        do
        {
          char v10 = (void *)*v10;
          --v9;
        }
        while (v10 != v8);
        if (!v9)
        {
          uint64_t v31 = v7[5];
          char v33 = *(std::mutex **)(v31 + 16);
          uint64_t v32 = *(std::__shared_weak_count **)(v31 + 24);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((v7[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
            Emptyuint64_t String = (const void **)((v7[7] & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
          }
          realityio::Outputs::getValue<realityio::WrappedRERef<REAsset *>>(v33, EmptyString, (std::string *)buf);
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (buf[0])
          {
            uint64_t v35 = *(void *)&buf[8];
            *(void *)&uint8_t buf[8] = 0;
            v42[0] = 1;
            *(void *)&long long v43 = v35;
            *(void *)&long long v56 = 0;
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v56);
          }
          else
          {
            long long v56 = *(_OWORD *)&buf[8];
            if ((buf[47] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
            }
            else {
              std::string v57 = *(std::string *)&buf[24];
            }
            v42[0] = 0;
            long long v43 = v56;
            std::string v44 = v57;
          }
          realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)buf);
          goto LABEL_48;
        }
        std::operator+<char>();
        char v11 = std::string::append(&v50, ") at prim path (");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4));
        int v14 = *(char *)(v13 + 23);
        if (v14 >= 0) {
          unint64_t v15 = (const std::string::value_type *)v13;
        }
        else {
          unint64_t v15 = *(const std::string::value_type **)v13;
        }
        if (v14 >= 0) {
          std::string::size_type v16 = *(unsigned __int8 *)(v13 + 23);
        }
        else {
          std::string::size_type v16 = *(void *)(v13 + 8);
        }
        uint64_t v17 = std::string::append(&v51, v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        uint64_t v19 = std::string::append(&v52, ") because more than one connected builder produced the same output type");
      }
      long long v29 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__r.__words[2];
      long long v56 = v29;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(buf, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v56);
      long long v43 = *(_OWORD *)buf;
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
      *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[31];
      char v30 = buf[39];
      memset(&buf[16], 0, 24);
      v42[0] = 0;
      *((unsigned char *)&v44.__r_.__value_.__s + 23) = v30;
      if (v57.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v56);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
LABEL_48:
      if ((v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v36 = (realityio *)v54;
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      if (v42[0] && (unint64_t v53 = (std::__shared_weak_count *)v43) != 0)
      {
        char v37 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)buf, v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4));
        unint64_t v38 = a2[6];
        int v39 = operator new(0x28uLL);
        void *v39 = &unk_26F333E20;
        v39[1] = buf;
        v39[2] = &v45;
        v39[3] = &v53;
        uint64_t v39[4] = &v48;
        v57.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
        ((void (*)(std::__shared_weak_count *, long long *))v38->__on_zero_shared)(v38, &v56);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v56);
        if ((buf[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&buf[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[16]);
        if (*(void *)&buf[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
        }
      }
      else
      {
        int v40 = *(NSObject **)(realityio::logObjects(v36) + 24);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_error_impl(&dword_23F4EA000, v40, OS_LOG_TYPE_ERROR, "Stopping operation to set text, mesh, and transform components because text mesh does not exist", buf, 2u);
        }
      }
      realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v42);
      return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v46);
    }
  }
  long long v20 = *(NSObject **)(realityio::logObjects(v4) + 24);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_23F4EA000, v20, OS_LOG_TYPE_ERROR, "Stopping operation to set text, mesh, and transform components because text entity no longer exists", buf, 2u);
  }
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v46);
}

void sub_23F5553C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a23);
  uint64_t v37 = *(void *)(v35 - 88);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v38 = *(std::__shared_weak_count **)(v35 - 96);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_23F5554D4()
{
}

void realityio::TextComponentBuilder::~TextComponentBuilder(realityio::TextComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F333C90;
  return result;
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F333C90;
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  std::string v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)std::string v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::TextEntityBuilder::kOutputName((realityio::TextEntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v1pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 280), (int *)&v18, &v20);
  unint64_t v6 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v20);
  uint64_t v7 = (realityio::TextMeshAssetBuilder *)v21;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v8 = realityio::TextMeshAssetBuilder::kOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(vpxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 288), (int *)&v16, &v18);
  char v10 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v18);
  char v11 = (realityio::MaterialAssetBuilder *)v19;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v12 = realityio::MaterialAssetBuilder::kMaterialDataName(v11);
  unint64_t v13 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v14) = 1;
  std::allocate_shared[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v12, (uint64_t *)(v13 + 176), (int *)&v14, &v16);
  uint64_t v14 = v16;
  unint64_t v15 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F555790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_23F5558C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F333D00;
  std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::construct[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_23F55593C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F333D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F333D00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::construct[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F555A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F333D50;
  return a1;
}

void sub_23F555B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::~MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor(realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::resolvedPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *a1@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v7 = a3 + 48;
  uint64_t result = (uint64_t)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a3 + 48, a2);
  if (a3 + 56 != result && *(void *)(*(void *)(a3 + 24) + 104 * *(void *)(result + 40) + 24) == *(void *)a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v45, a1, a2);
    realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)&v45, a4);
    if ((BYTE8(v47) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v47 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
    if (v46) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
    }
    uint64_t result = (uint64_t)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v7, a2);
    if (a3 + 56 == result) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *(void *)(a3 + 24) + 104 * *(void *)(result + 40);
    }
    char v10 = *(void **)(v9 + 56);
    uint64_t v30 = v9;
    uint64_t v31 = (void *)(v9 + 64);
    if (v10 != (void *)(v9 + 64))
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v54, a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 28));
        char v11 = (pxrInternal__aapl__pxrReserved__ *)realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)&v54, a4);
        UsdPrimAllPrimsPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v11);
        uint64_t v14 = *UsdPrimAllPrimsPredicate;
        uint64_t v13 = UsdPrimAllPrimsPredicate[1];
        uint64_t v15 = UsdPrimAllPrimsPredicate[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v14 & 0x2000) != 0 || (v13 & 0x2000) == 0))
        {
          v14 |= 0x2000uLL;
          v13 &= ~0x2000uLL;
        }
        uint64_t v41 = v14;
        uint64_t v42 = v13;
        *(void *)&long long v43 = v15;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v54, &v41, (uint64_t)&v45);
        uint64_t v41 = v45;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v42, &v46);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v42 + 1, (_DWORD *)&v46 + 1);
        long long v43 = v47;
        uint64_t v44 = v48;
        uint64_t v37 = v49;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, &v50);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v38 + 1, &v51);
        long long v39 = v52;
        uint64_t v40 = v53;
        while (v41 != v37
             || v42 != v38
             || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v43, (uint64_t)&v39))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v41, (uint64_t)v33);
          int IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v33);
          if (IsValid)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(IsValid);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((IsA & 1) != 0
              || (pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)IsA),
                  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
                  pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()))
            {
              realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)v33, a4);
            }
          }
          if ((v36 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
          if (v34) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v41);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
        if ((v57 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
        uint64_t result = v55;
        if (v55) {
          uint64_t result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
        }
        uint64_t v18 = (void *)v10[1];
        if (v18)
        {
          do
          {
            uint64_t v19 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            uint64_t v19 = (void *)v10[2];
            BOOL v20 = *v19 == (void)v10;
            char v10 = v19;
          }
          while (!v20);
        }
        char v10 = v19;
      }
      while (v19 != v31);
    }
    long long v21 = *(void **)(v30 + 80);
    if (v21 != (void *)(v30 + 88))
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v54, a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28));
        long long v22 = (pxrInternal__aapl__pxrReserved__ *)realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)&v54, a4);
        unint64_t v23 = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v22);
        uint64_t v25 = *v23;
        uint64_t v24 = v23[1];
        uint64_t v26 = v23[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v25 & 0x2000) != 0 || (v24 & 0x2000) == 0))
        {
          v25 |= 0x2000uLL;
          v24 &= ~0x2000uLL;
        }
        uint64_t v41 = v25;
        uint64_t v42 = v24;
        *(void *)&long long v43 = v26;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v54, &v41, (uint64_t)&v45);
        uint64_t v41 = v45;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v42, &v46);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v42 + 1, (_DWORD *)&v46 + 1);
        long long v43 = v47;
        uint64_t v44 = v48;
        uint64_t v37 = v49;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, &v50);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v38 + 1, &v51);
        long long v39 = v52;
        uint64_t v40 = v53;
        while (v41 != v37
             || v42 != v38
             || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v43, (uint64_t)&v39))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v41, (uint64_t)v33);
          uint64_t v27 = (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v33);
          if (v27)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v27);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()) {
              realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)v33, a4);
            }
          }
          if ((v36 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
          if (v34) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v41);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
        if ((v57 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
        uint64_t result = v55;
        if (v55) {
          uint64_t result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
        }
        long long v28 = (void *)v21[1];
        if (v28)
        {
          do
          {
            long long v29 = v28;
            long long v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            long long v29 = (void *)v21[2];
            BOOL v20 = *v29 == (void)v21;
            long long v21 = v29;
          }
          while (!v20);
        }
        long long v21 = v29;
      }
      while (v29 != (void *)(v30 + 88));
    }
  }
  return result;
}

void sub_23F55622C(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v30 = 0;
  uint64_t v28 = MEMORY[0x263F907A0] + 16;
  int v23 = 4;
  uint64_t v24 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v27 = 0;
  if (v29 && (*(unsigned char *)(v29 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v28 + 32))(&v28))
  {
    uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v28, v4, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v23);
    MEMORY[0x2455CEF40](&v33);
  }
  else
  {
    MEMORY[0x2455CF810](&v20, "material:binding");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((uint64_t *)&v33, (pxrInternal__aapl__pxrReserved__::UsdPrim *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20);
    int v23 = (int)v33;
    uint64_t v5 = v34;
    uint64_t v34 = 0;
    uint64_t v6 = v24;
    uint64_t v24 = v5;
    if (v6) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v25, (int *)&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v26);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v27 = v36;
    uint64_t v36 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    if (v34) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
    }
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v23) & 1) == 0)
    {
      unint64_t v20 = 0;
      long long v21 = 0;
      uint64_t v22 = 0;
      LODWORD(v33) = *(_DWORD *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v34 = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v35, (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v35 + 1, (_DWORD *)(a1 + 20));
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v36 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v36 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v31 = &v16;
      char v32 = 0;
      uint64_t v16 = (char *)operator new(0x20uLL);
      uint64_t v17 = (uint64_t)v16;
      uint64_t v18 = v16 + 32;
      uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim*>((uint64_t)&v18, (uint64_t)&v33, (uint64_t)&v37, (uint64_t)v16);
      if (!atomic_load(MEMORY[0x263F90550])) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials();
      uint64_t v31 = &v16;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
      if (v34) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
      }
      unint64_t v10 = v20;
      if ((void **)v20 != v21)
      {
        int v23 = *(_DWORD *)v20;
        char v11 = *(atomic_ullong **)(v20 + 8);
        if (v11) {
          atomic_fetch_add_explicit(v11 + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = v24;
        uint64_t v24 = (uint64_t)v11;
        if (v12) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v25, (_DWORD *)(v10 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v26, (_DWORD *)(v10 + 20));
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v27, (void *)(v10 + 24));
      }
      char v33 = (void **)&v19;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v33);
      char v33 = (void **)&v20;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](&v33);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v23))
  {
    char v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    uint64_t v13 = (unsigned int *)v33;
    uint64_t v14 = v34;
    while (v13 != (unsigned int *)v14)
    {
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a2, v13, v13);
      v13 += 2;
    }
    unint64_t v20 = (unint64_t)&v33;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
  if (v24) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  }
  return MEMORY[0x2455CF4B0](&v28);
}

void sub_23F556768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va);
  MEMORY[0x2455CF4B0](va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  std::string v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_23F55691C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 32;
      uint64_t result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F333DA0;
  return result;
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F333DA0;
}

char *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F333E20;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F333E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  v33[4] = *MEMORY[0x263EF8340];
  realityio::textInformationFromPrim(*(realityio **)(a1 + 8), (uint64_t)v22);
  REStatic3DTextComponentGetComponentType();
  v33[0] = &unk_26F333E90;
  v33[1] = v22;
  v33[3] = v33;
  uint64_t v2 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v33, v2);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v33);
  REMeshComponentGetComponentType();
  uint64_t v3 = *(void *)(a1 + 24);
  v32[0] = &unk_26F333F10;
  v32[1] = v3;
  v32[3] = v32;
  uint64_t v4 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v32, v4);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v32);
  RETransformComponentGetComponentType();
  v31[0] = &unk_26F333F90;
  v31[1] = v22;
  v31[3] = v31;
  uint64_t v5 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v31, v5);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v31);
  long long v21 = (realityio::MaterialAssetBuilder *)realityio::Inputs::assetManager(**(realityio::Inputs ***)(a1 + 32));
  uint64_t v6 = **(void **)(a1 + 32);
  uint64_t v7 = realityio::MaterialAssetBuilder::kMaterialDataName(v21);
  realityio::Inputs::getAccumulatedValues<realityio::MaterialAssetDataT *>(v6, v7, (uint64_t)v18);
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v18[0]) {
    std::vector<realityio::MaterialAssetDataT *>::__init_with_size[abi:ne180100]<realityio::MaterialAssetDataT **,realityio::MaterialAssetDataT **>(&__p, v19, v20, (v20 - (uint64_t)v19) >> 3);
  }
  REMeshComponentGetComponentType();
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v30 = 0;
  char v10 = operator new(0x28uLL);
  *char v10 = &unk_26F334010;
  v10[1] = v9;
  void v10[2] = &__p;
  v10[3] = v8;
  void v10[4] = &v21;
  uint64_t v30 = v10;
  uint64_t v11 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v29, v11);
  RENetworkMarkComponentDirty();
  uint64_t v12 = (realityio *)std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v29);
  uint64_t v13 = *(NSObject **)(realityio::logObjects(v12) + 24);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_INFO, "Created entity text, mesh, and transform components", v14, 2u);
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)v18);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
}

void sub_23F556FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if ((a38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Inputs::getAccumulatedValues<realityio::MaterialAssetDataT *>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    uint64_t v45 = std::__shared_weak_count::lock(v6);
    if (v45) {
      uint64_t v44 = *(void *)(v4 + 16);
    }
  }
  MEMORY[0x2455CF830](&v46, a2);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(v4 + 8), &v44);
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v11 = v49;
  if (v7 == v9)
  {
    std::operator+<char>();
    uint64_t v29 = std::string::append(&v41, ") at prim path (");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 32));
    int v32 = *(char *)(String + 23);
    if (v32 >= 0) {
      char v33 = (const std::string::value_type *)String;
    }
    else {
      char v33 = *(const std::string::value_type **)String;
    }
    if (v32 >= 0) {
      std::string::size_type v34 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v34 = *(void *)(String + 8);
    }
    uint64_t v35 = std::string::append(&v42, v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    uint64_t v37 = std::string::append(&v43, ")");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[0] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v49, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)v49;
    std::string::size_type v39 = v50.__r_.__value_.__r.__words[0];
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&v49[16];
    *(void *)(a3 + 32) = v39;
    *(void *)(a3 + 39) = *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7);
    LOBYTE(v39) = v50.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = 0uLL;
    *(void *)&v49[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v39;
    if (v48.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v28 = (void *)v41.__r_.__value_.__r.__words[0];
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v40 = a3;
    memset(&v43, 0, sizeof(v43));
    do
    {
      uint64_t v12 = *((void *)v8 + 5);
      uint64_t v14 = *(std::mutex **)(v12 + 16);
      uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyuint64_t String = (const void **)((*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyuint64_t String = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      }
      realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(v14, EmptyString, (uint64_t)v49);
      int v16 = v49[0];
      if (v49[0])
      {
        uint64_t v17 = *(void **)&v49[8];
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)&v49[8];
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v48, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
          uint64_t v17 = __p[0];
          uint64_t v11 = (unsigned char *)v48.__r_.__value_.__r.__words[0];
          LOBYTE(v4) = *((unsigned char *)&v48.__r_.__value_.__s + 23);
          if (!v49[0] && SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string v48 = v50;
          uint64_t v17 = __p[0];
          uint64_t v11 = (unsigned char *)v50.__r_.__value_.__r.__words[0];
          LOBYTE(v4) = *((unsigned char *)&v50.__r_.__value_.__s + 23);
        }
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (v16)
      {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
        if (v43.__r_.__value_.__l.__size_ >= v43.__r_.__value_.__r.__words[2])
        {
          uint64_t v19 = (uint64_t)(v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          int64_t v21 = v43.__r_.__value_.__r.__words[2] - v43.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v43.__r_.__value_.__r.__words[2] - v43.__r_.__value_.__r.__words[0]) >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22) {
            uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v43.__r_.__value_.__r.__words[2], v22);
          }
          else {
            uint64_t v7 = 0;
          }
          char v23 = (void *)((char *)v7 + 8 * v19);
          *char v23 = v17;
          std::string::size_type v24 = (std::string::size_type)(v23 + 1);
          char v25 = (char *)v43.__r_.__value_.__l.__size_;
          std::string::size_type v26 = v43.__r_.__value_.__r.__words[0];
          if (v43.__r_.__value_.__l.__size_ != v43.__r_.__value_.__r.__words[0])
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *--char v23 = v27;
            }
            while (v25 != (char *)v26);
            char v25 = (char *)v43.__r_.__value_.__r.__words[0];
          }
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
          v43.__r_.__value_.__l.__size_ = v24;
          v43.__r_.__value_.__r.__words[2] = (std::string::size_type)v7 + 8 * v22;
          if (v25) {
            operator delete(v25);
          }
          v43.__r_.__value_.__l.__size_ = v24;
        }
        else
        {
          *(void *)v43.__r_.__value_.__l.__size_ = v17;
          v43.__r_.__value_.__l.__size_ = size + 8;
        }
      }
      else if ((v4 & 0x80) != 0)
      {
        operator delete(v11);
      }
      uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v8;
    }
    while (v8 != v10);
    memset(v49, 0, sizeof(v49));
    std::vector<realityio::MaterialAssetDataT *>::__init_with_size[abi:ne180100]<realityio::MaterialAssetDataT **,realityio::MaterialAssetDataT **>(v49, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_, (uint64_t)(v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 3);
    *(unsigned char *)uint64_t v40 = 1;
    *(_OWORD *)(v40 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)v49;
    *(void *)(v40 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&v49[16];
    uint64_t v28 = (void *)v43.__r_.__value_.__r.__words[0];
    if (v43.__r_.__value_.__r.__words[0])
    {
      v43.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
LABEL_57:
      operator delete(v28);
    }
  }
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
}

void sub_23F5574E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F333E90;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F333E90;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  REStatic3DTextComponentSetText();
  REStatic3DTextComponentSetFont();
  REStatic3DTextComponentSetFontSize();
  REStatic3DTextComponentSetExtrusionDepth();
  REStatic3DTextComponentSetTextFrameSize();
  REStatic3DTextComponentSetTextAlignment();
  REStatic3DTextComponentSetLineBreakMode();
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 106);

  return MEMORY[0x270F20558](v3, v4);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F333F10;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F333F10;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return REMeshComponentSetMesh();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F333F90;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F333F90;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v27, 1.0);
  REDecomposeMatrix();
  uint64_t v2 = *(void **)(a1 + 8);
  unint64_t v3 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((v2[11] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v3 + 80) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v4 = atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((v2[11] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v4 + 120) & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v5 = atomic_load(&realityio::tokens::TextBuilderTokens);
      if (!v5) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((v2[11] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v6 = (realityio *)atomic_load(&realityio::tokens::TextBuilderTokens);
        if (!v6) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        if ((v2[11] & 0xFFFFFFFFFFFFFFF8) != (*((void *)v6 + 9) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v7 = *(NSObject **)(realityio::logObjects(v6) + 24);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v8 = v2[11] & 0xFFFFFFFFFFFFFFF8;
            if (v8)
            {
              uint64_t v9 = (const char *)(v8 + 16);
              if (*(char *)(v8 + 39) < 0) {
                uint64_t v9 = *(const char **)v9;
              }
            }
            else
            {
              uint64_t v9 = "";
            }
            *(_DWORD *)std::string buf = 136315138;
            uint64_t v29 = v9;
            _os_log_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_DEFAULT, "Unknown text horizontal alignment value \"%s\" defaulting to \"left\"", buf, 0xCu);
          }
        }
      }
    }
  }
  unint64_t v10 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((v2[10] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v10 + 128) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v16 = atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v16) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v16 + 136) & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v17 = atomic_load(&realityio::tokens::TextBuilderTokens);
      if (!v17) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v17 + 96) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v18 = atomic_load(&realityio::tokens::TextBuilderTokens);
        if (!v18) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v19 = atomic_load(&realityio::tokens::TextBuilderTokens);
          if (!v19) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v19 + 88) & 0xFFFFFFFFFFFFFFF8))
          {
            unint64_t v20 = (realityio *)atomic_load(&realityio::tokens::TextBuilderTokens);
            if (!v20) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*(void *)v20 & 0xFFFFFFFFFFFFFFF8))
            {
              int64_t v21 = *(NSObject **)(realityio::logObjects(v20) + 24);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v22 = v2[12] & 0xFFFFFFFFFFFFFFF8;
                if (v22)
                {
                  char v23 = (const char *)(v22 + 16);
                  if (*(char *)(v22 + 39) < 0) {
                    char v23 = *(const char **)v23;
                  }
                }
                else
                {
                  char v23 = "";
                }
                unint64_t v24 = v2[10] & 0xFFFFFFFFFFFFFFF8;
                if (v24)
                {
                  char v25 = (const char *)(v24 + 16);
                  if (*(char *)(v24 + 39) < 0) {
                    char v25 = *(const char **)v25;
                  }
                }
                else
                {
                  char v25 = "";
                }
                *(_DWORD *)std::string buf = 136315394;
                uint64_t v29 = v23;
                __int16 v30 = 2080;
                uint64_t v31 = v25;
                _os_log_impl(&dword_23F4EA000, v21, OS_LOG_TYPE_DEFAULT, "Unknown text vertical alignment value \"%s\" for wrap mode \"%s\"; defaulting to \"bottom\"",
                  buf,
                  0x16u);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-0.5 }
  }
  return RETransformComponentSetLocalSRT();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E1_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E1_;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F557E24(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4095517265);
  _Unwind_Resume(a1);
}

void *std::vector<realityio::MaterialAssetDataT *>::__init_with_size[abi:ne180100]<realityio::MaterialAssetDataT **,realityio::MaterialAssetDataT **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23F557EA8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F334010;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F334010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void *_ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1)
{
  REMeshComponentSetMesh();
  uint64_t v2 = *(void **)(a1 + 16);
  if (*v2 == v2[1] || !*(void *)*v2)
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(**(void **)(a1 + 24) + 40) + 16) + 248);
    if (v6)
    {
      RERetain();
    }
    else
    {
      uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
      uint64_t v5 = AssetHandle;
      if (AssetHandle) {
        RERetain();
      }
      if (v6 != AssetHandle)
      {
        uint64_t v5 = v6;
        uint64_t v6 = AssetHandle;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
      if (!v6) {
        return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
      }
      RERelease();
      if (!v6) {
        return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
      }
    }
    REMeshComponentAddMaterial();
    REMeshComponentRemoveAllMaterials();
    REMeshComponentAddMaterial();
    return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
  }
  REMeshComponentRemoveAllMaterials();

  return (void *)REMeshComponentAddMaterial();
}

void sub_23F55809C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E2_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E2_;
}

void realityio::tokens::ConeMeshBuilderTokens_StaticTokenType::~ConeMeshBuilderTokens_StaticTokenType(realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v6 = (void **)((char *)this + 40);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = *((void *)this + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 1);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *realityio::tokens::ConeMeshBuilderTokens_StaticTokenType::ConeMeshBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "Cone", 0) + 8);
  MEMORY[0x2455CF820](v2, "axis", 0);
  MEMORY[0x2455CF820](this + 2, "height", 0);
  MEMORY[0x2455CF820](this + 3, "radius", 0);
  MEMORY[0x2455CF820](this + 4, "material:binding", 0);
  uint64_t v3 = *this;
  unint64_t v19 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v19 = v4;
    }
  }
  uint64_t v5 = *v2;
  unint64_t v20 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v20 = v6;
    }
  }
  uint64_t v7 = this[2];
  int64_t v21 = v7;
  if ((v7 & 7) != 0)
  {
    size_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      int64_t v21 = v8;
    }
  }
  uint64_t v9 = this[3];
  unint64_t v22 = v9;
  if ((v9 & 7) != 0)
  {
    unint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v22 = v10;
    }
  }
  uint64_t v11 = this[4];
  char v23 = v11;
  if ((v11 & 7) != 0)
  {
    uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      char v23 = v12;
    }
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  uint64_t v13 = (atomic_uint *)operator new(0x28uLL);
  unint64_t v14 = 0;
  this[5] = v13;
  this[6] = v13;
  this[7] = v13 + 10;
  do
  {
    uint64_t v15 = (&v19)[v14 / 2];
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 2;
  }
  while (v14 != 10);
  this[6] = v13 + 10;
  for (uint64_t i = 4; i != -1; --i)
  {
    unint64_t v17 = (&v19)[i];
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *)this;
}

void sub_23F5583DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getConeMeshBuilderDirtyStageDescriptor(realityio *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F55889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  MEMORY[0x2455D2BD0](v29, 0x10A1C40F82F910ELL);
  *(void *)(v30 - 16std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2455D2BD0](v28, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F558BA8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4070C77B98);
  _Unwind_Resume(a1);
}

void realityio::FoundationErrorCategoryImpl::~FoundationErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x2455D2BD0);
}

const char *realityio::FoundationErrorCategoryImpl::name(realityio::FoundationErrorCategoryImpl *this)
{
  return "CoreRealityIO Foundation Error";
}

void *realityio::FoundationErrorCategoryImpl::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 200:
      uint64_t v3 = "Unable to get value of USD property";
      break;
    case 201:
      uint64_t v3 = "Unable to get the entry for the builder";
      break;
    case 202:
      uint64_t v3 = "Unable to get the inputs descriptor";
      break;
    case 203:
      uint64_t v3 = "Unable to get the inputs descriptor for name";
      break;
    case 204:
      uint64_t v3 = "Unable to get the inputs value";
      break;
    case 205:
      uint64_t v3 = "Unable to get the outputs descriptor";
      break;
    case 206:
      uint64_t v3 = "Unable to get the ouput descriptor";
      break;
    case 207:
      uint64_t v3 = "Unable to get the output value";
      break;
    case 208:
      uint64_t v3 = "Unable to find mapper for entry";
      break;
    case 209:
      uint64_t v3 = "Texture import error";
      break;
    default:
      if (a1 == 100) {
        uint64_t v3 = "Unexpected error";
      }
      else {
        uint64_t v3 = "Unknown CoreRealityIO Foundation error";
      }
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void markPrimAsEntityProducing(const pxrInternal__aapl__pxrReserved__::UsdPrim *a1, BOOL a2, int a3)
{
  BOOL v4 = a2;
  uint64_t v37 = *MEMORY[0x263EF8340];
  long long v36 = &unk_26F333523;
  v35[0] = a2;
  unint64_t v6 = atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (a2)
  {
    if (!v6) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 24));
  }
  else
  {
    if (!v6) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 24));
  }
  MEMORY[0x2455CF810](&v25, "customData");
  unint64_t v7 = atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  size_t v8 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 48), (const pxrInternal__aapl__pxrReserved__::VtValue *)v35);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a3)
  {
    uint64_t UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v8);
    uint64_t v11 = *UsdPrimDefaultPredicate;
    uint64_t v10 = UsdPrimDefaultPredicate[1];
    uint64_t v12 = UsdPrimDefaultPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v11 & 0x2000) != 0 || (v10 & 0x2000) == 0))
    {
      v11 |= 0x2000uLL;
      v10 &= ~0x2000uLL;
    }
    uint64_t v21 = v11;
    uint64_t v22 = v10;
    *(void *)&long long v23 = v12;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)a1, &v21, (uint64_t)&v25);
    uint64_t v21 = v25;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, &v26);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v22 + 1, &v27);
    long long v23 = v28;
    uint64_t v24 = v29;
    uint64_t v17 = v30;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v18 + 1, &v32);
    long long v19 = v33;
    uint64_t v20 = v34;
    while (v21 != v17
         || v22 != v18
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v23, (uint64_t)&v19))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v21, (uint64_t)v13);
      markPrimAsEntityProducing((const pxrInternal__aapl__pxrReserved__::UsdPrim *)v13, v4, 1);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
      if (v14) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
}

void sub_23F559008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageGetEntityTaggingEditMode(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = (uint64_t *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(&v11, v3);
  BOOL v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v11);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v13, v4);
  uint64_t v5 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v6 + 5) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  uint64_t ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  uint64_t v7 = (uint64_t)ValueAtPath;
  if (ValueAtPath)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
    {
      uint64_t v9 = *(void *)(v7 + 8);
      if ((v9 & 4) != 0) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v7 = *(unsigned char *)v7 != 0;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
  return v7;
}

void sub_23F5591D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageSetEntityTaggingEditMode(uint64_t *a1, char a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  BOOL v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  uint64_t v6 = a1[2];
  uint64_t v5 = a1 + 2;
  if (v6)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    uint64_t v9 = (atomic_uint *)EditTarget[1];
    uint64_t v24 = *EditTarget;
    uint64_t v25 = v9;
    if (v9) {
      atomic_fetch_add_explicit(v9 + 2, 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v24);
  uint64_t v12 = v11;
  uint64_t v13 = v25;
  if (v25 && atomic_fetch_add_explicit(v25 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *, double))(*(void *)v13 + 8))(v13, v10);
  }
  std::recursive_mutex::lock(v12);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(&v24, v14);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v24);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v23, v15);
  uint64_t v16 = v25;
  if (v25 && atomic_fetch_add_explicit(v25 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
  }
  uint64_t v25 = (atomic_uint *)&unk_26F333523;
  LOBYTE(vpxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a2;
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v17 + 5) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(&v21, v18);
  long long v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v21);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v19, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v23);
  uint64_t v20 = v22;
  if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v23, 0);
  std::recursive_mutex::unlock(v12);
}

void sub_23F559464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
}

uint64_t RIOPxrUsdPrimIsEntityConvertible(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (a1) {
    uint64_t v2 = (realityio *)(a1 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  return realityio::isEntityConvertible(v2, a2);
}

unint64_t RIOPxrUsdPrimEvaluateEntityInEditMode(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (a1) {
    uint64_t v2 = (realityio *)(a1 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  return realityio::calculateIsEntityProviding(v2, a2);
}

unint64_t RIOPxrUsdPrimEvaluateEntityOnExport(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (a1) {
    uint64_t v2 = (realityio *)(a1 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  return realityio::calculateIsEntityProvidingAtExportTime(v2, a2);
}

uint64_t RIOPxrUsdPrimGetTaggedAsEntity(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (a1) {
    uint64_t v2 = (realityio *)(a1 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  return realityio::getPrimEntityProvidingSetting(v2, a2);
}

void RIOPxrUsdPrimSetTaggedAsEntity(realityio::UsdLayerMutexTracker *a1, BOOL a2)
{
  BOOL v4 = (realityio::UsdLayerMutexTracker *)((char *)a1 + 24);
  if (a1) {
    uint64_t v5 = (realityio::UsdLayerMutexTracker *)((char *)a1 + 24);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = realityio::UsdLayerMutexTracker::instance(a1);
  if (a1 && (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v4) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v17, v4);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v17);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    uint64_t v9 = EditTarget[1];
    uint64_t v15 = *EditTarget;
    uint64_t v16 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v10 = v18;
    if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  double v11 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &v15);
  uint64_t v13 = v12;
  uint64_t v14 = v16;
  if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v14 + 8))(v14, v11);
  }
  std::recursive_mutex::lock(v13);
  markPrimAsEntityProducing(v5, a2, 0);
  std::recursive_mutex::unlock(v13);
}

void sub_23F559700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12)
{
  if (a12)
  {
    if (atomic_fetch_add_explicit(a12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a12 + 8))(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

char *RIOPxrUsdUtilsEntityProducingPrimsCopyPaths(char *a1)
{
  CFMutableDictionaryRef Mutable = a1;
  if (a1)
  {
    long long v19 = 0;
    uint64_t v20 = 0;
    std::string __p = &v19;
    pxrInternal__aapl__pxrReserved__::usd_initialize();
    std::__tree<std::string>::destroy((uint64_t)&__p, v19);
    std::string::basic_string[abi:ne180100]<0>(&__p, Mutable);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open();
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
    if (v21)
    {
      CFMutableDictionaryRef Mutable = (char *)CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v21);
      pxrInternal__aapl__pxrReserved__::UsdStage::Traverse((uint64_t *)&__p, v2);
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&__p, (uint64_t)v13);
      while (1)
      {
        uint64_t v9 = v19;
        p_p = &__p;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        LODWORD(v12) = 0;
        WORD2(v12) = 0;
        if ((void **)v13[1] == p_p && (char *)v13[0] == v9)
        {
          BOOL v3 = 1;
          if (v14 == v11 && !v15 && !v16) {
            BOOL v3 = v17 != 0;
          }
        }
        else
        {
          BOOL v3 = 1;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
        if (!v3) {
          break;
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v13, (uint64_t)&v9);
        int IsEntityProviding = realityio::calculateIsEntityProviding((realityio *)&v9, v4);
        if ((v12 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
        if (p_p) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)p_p);
        }
        if (IsEntityProviding)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v13, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v9);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9, &v8);
          uint64_t v6 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v8);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
          if ((v12 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
          if (p_p) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)p_p);
          }
          CFArrayAppendValue((CFMutableArrayRef)Mutable, v6);
          CFRelease(v6);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v13);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
    }
    else
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v21);
  }
  return Mutable;
}

void sub_23F559A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)(v27 - 72));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(_DWORD *a1)
{
  if (RIOPxrSdfPathGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), a1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 20), a1 + 1);
  }
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::~_PtrProxy(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange(pxrInternal__aapl__pxrReserved__::UsdPrimRange *this)
{
}

void realityio::TexcoordID::getNormalizedName(realityio::TexcoordID *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((void *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 4);
  }
}

void realityio::anonymous namespace'::ProcessMtlxActionInputs(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    while (1)
    {
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::mtlx::MtlxActionPayload>(v5)) {
        goto LABEL_26;
      }
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::mtlx::MtlxActionPayload>(v5) & 1) == 0) {
        break;
      }
      uint64_t v6 = *((void *)v5 + 1);
      if ((v6 & 4) != 0)
      {
        uint64_t v14 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        goto LABEL_30;
      }
      uint64_t v7 = *(void *)v5;
LABEL_7:
      realityio::mtlx::MtlxActionPayload::MtlxActionPayload((uint64_t)&v15, v7);
      if (v17)
      {
        int v8 = NSString;
        uint64_t v9 = v16;
        if ((v16 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v11 = (const char *)(v10 + 16);
          if (*(char *)(v10 + 39) < 0) {
            uint64_t v11 = *(const char **)v11;
          }
        }
        else
        {
          uint64_t v11 = "";
        }
        uint64_t v12 = [v8 stringWithUTF8String:v11];
        if ((v9 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)v10, 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v13 = [NSString stringWithFormat:@"Failed to import from %@", v12];
        if (*(void *)(a3 + 32)) {
          realityio::mtlx::MtlxActionPayload::addChildError((id *)a3, v17);
        }
        else {
          realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, v13, 4u, v17);
        }
      }
      if (!*(void *)(a3 + 32))
      {
        if (!realityio::mtlx::MtlxActionPayload::collectInputsAndOutputs((realityio::mtlx::MtlxActionPayload *)a3, &v15)|| !realityio::mtlx::MtlxActionPayload::collectNodes((realityio::mtlx::MtlxActionPayload *)a3, (id *)&v15))
        {
          realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)&v15);
          return;
        }
        realityio::mtlx::MtlxActionPayload::collectTextureInfo(a3, (uint64_t)&v15);
      }
      realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)&v15);
LABEL_26:
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v5 + 16);
      if (v5 == a2) {
        return;
      }
    }
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
LABEL_30:
    uint64_t v7 = v14;
    goto LABEL_7;
  }
}

void sub_23F559DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)va);
  _Unwind_Resume(a1);
}

void realityio::MaterialActionResult::~MaterialActionResult(id *this)
{
  uint64_t v2 = this + 3;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void realityio::generateMtlxInputsDescriptorPaths(realityio *this@<X0>, uint64_t a2@<X8>)
{
  v17[4] = *(void ***)MEMORY[0x263EF8340];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  realityio::mtlx::USDDataSource::USDDataSource((realityio::mtlx::USDDataSource *)&v9, this);
  uint64_t v7 = &v9;
  int v8 = 0;
  v12[0] = &unk_26F334340;
  v12[1] = &v9;
  void v12[2] = a2;
  void v12[3] = v12;
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v12);
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v17);
  uint64_t v16 = 0;
  BOOL v4 = operator new(0x28uLL);
  uint64_t v5 = v4;
  *BOOL v4 = &unk_26F334110;
  if (v14)
  {
    if (v14 == v13)
    {
      v4[4] = v4 + 1;
      (*(void (**)(void *))(v13[0] + 24))(v13);
      goto LABEL_7;
    }
    uint64_t v6 = &v14;
    v4[4] = v14;
  }
  else
  {
    uint64_t v6 = v4 + 4;
  }
  void *v6 = 0;
LABEL_7:
  uint64_t v16 = v5;
  realityio::foreachConnected((uint64_t)&v7, (uint64_t)v15);
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](v12);
  uint64_t v9 = &unk_26F32F700;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)v11, v11[1]);
  v17[0] = (void **)&v10;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100](v17);
}

void sub_23F55A020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::USDDataSource::~USDDataSource(realityio::mtlx::USDDataSource *this)
{
  *(void *)this = &unk_26F32F700;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t realityio::_hasCyclesHelper(uint64_t **a1, void *a2)
{
  long long v39 = *(_OWORD *)(*(void *)(a2[1] + (((unint64_t)(a2[5] + a2[4] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (*((unsigned char *)a2 + 40) + *((unsigned char *)a2 + 32) - 1));
  realityio::mtlx::NeoShadeConnectable::GetInputs((realityio::mtlx::NeoShadeConnectable *)&v39, (uint64_t)&v37);
  uint64_t v4 = v37;
  if (v37 == v38)
  {
    LOBYTE(v5) = 0;
LABEL_24:
    (*(void (**)(void ***__return_ptr))(*(void *)v39 + 16))(&v34);
    int v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34;
    *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>(a1, &v34, (_DWORD **)&v31)+ 9) = 2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
    uint64_t v21 = a2[1];
    uint64_t v20 = a2[2];
    uint64_t v22 = v20 - v21;
    BOOL v23 = v20 == v21;
    uint64_t v25 = a2[4];
    uint64_t v24 = a2[5];
    a2[5] = v24 - 1;
    uint64_t v26 = 32 * v22 - 1;
    if (v23) {
      uint64_t v26 = 0;
    }
    if ((unint64_t)(v26 - (v24 + v25) - 511) <= 0xFFFFFFFFFFFFFDFFLL)
    {
      operator delete(*(void **)(v20 - 8));
      a2[2] -= 8;
    }
  }
  else
  {
    int v5 = 0;
    while (1)
    {
      uint64_t v6 = *(void ***)v4;
      unsigned int v35 = *(_DWORD *)(v4 + 8);
      uint64_t v34 = v6;
      uint64_t v7 = *(void *)(v4 + 16);
      uint64_t v36 = v7;
      if ((v7 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v36 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v31 = 0;
      int v32 = 0;
      uint64_t v33 = 0;
      if (!(*((unsigned int (**)(void **, void, uint64_t *, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath **))*v34
             + 10))(v34, v35, &v36, 1, &v31)|| v31 == v32)
      {
        goto LABEL_17;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v30, v31);
      uint64_t v40 = &v30;
      int v8 = *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(a1, &v30, (_DWORD **)&v40)+ 9);
      if (v8 != 1)
      {
        uint64_t v40 = &v30;
        if (!*((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(a1, &v30, (_DWORD **)&v40)+ 9))
        {
          int v9 = v5;
          uint64_t v10 = v39;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v28, &v30);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, (_DWORD *)&v30 + 1);
          uint64_t v11 = realityio::mtlx::NeoDataSource::primFromPath(v10, &v28);
          int v13 = v12;
          uint64_t v14 = a2[2];
          uint64_t v15 = a2[1];
          uint64_t v16 = 32 * (v14 - v15) - 1;
          if (v14 == v15) {
            uint64_t v16 = 0;
          }
          unint64_t v17 = a2[5] + a2[4];
          if (v16 == v17)
          {
            std::deque<realityio::mtlx::NeoShadeConnectable>::__add_back_capacity(a2);
            uint64_t v15 = a2[1];
            unint64_t v17 = a2[5] + a2[4];
          }
          uint64_t v18 = *(void *)(v15 + ((v17 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v17;
          *(void *)uint64_t v18 = v11;
          *(_DWORD *)(v18 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v13;
          ++a2[5];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
          uint64_t v40 = &v30;
          *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(a1, &v30, (_DWORD **)&v40)+ 9) = 1;
          int v5 = v9 | realityio::_hasCyclesHelper(a1, a2);
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
      if (v8 == 1) {
        char v19 = 0;
      }
      else {
LABEL_17:
      }
        char v19 = 1;
      std::string v41 = &v31;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v19 & 1) == 0) {
        break;
      }
      v4 += 24;
      if (v4 == v38) {
        goto LABEL_24;
      }
    }
    LOBYTE(v5) = 1;
  }
  uint64_t v34 = (void **)&v37;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v34);
  return v5 & 1;
}

void sub_23F55A490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, char a18)
{
  a15 = (void **)&a18;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void realityio::buildMaterialXAsset(realityio *a1@<X0>, uint64_t (***a2)(void)@<X1>, void *a3@<X8>)
{
  uint64_t v339 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(NSObject **)(realityio::logObjects(a1) + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_INFO, "#####\n##### buildMaterialXAsset called", buf, 2u);
  }
  uint64_t v316 = (**(uint64_t (***)(realityio *))a1)(a1);
  if (!v316)
  {
    int v258 = realityio::internal::assertHandler(1u, "engine", "buildMaterialXAsset", 1149, 0, v4, v5, v6, v259, v260);
    if (v258 == 1)
    {
      raise(5);
    }
    else if (v258 == 2)
    {
      abort();
    }
  }
  id v315 = 0;
  uint64_t v313 = 0;
  uint64_t v312 = 0;
  uint64_t v314 = 0;
  uint64_t v310 = 2;
  __int16 v311 = 256;
  uint64_t v308 = (**a2)();
  unsigned int v309 = v7;
  realityio::mtlx::NeoShadeNodeGraph::GetOutputs((realityio::mtlx::NeoShadeNodeGraph *)&v308, (uint64_t)&v288);
  int v8 = (void *)*((void *)&v288 + 1);
  if ((void)v288 == *((void *)&v288 + 1))
  {
LABEL_16:
    *(void *)std::string buf = &v288;
    std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    std::string::basic_string[abi:ne180100]<0>(buf, "texcoord");
    std::string::basic_string[abi:ne180100]<0>((void *)&v297 + 1, "");
    std::string::basic_string[abi:ne180100]<0>(&v299, "texcoord1");
    std::string::basic_string[abi:ne180100]<0>(&v300, "");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(v301, "uv2");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v303, "uv3");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v304, "uv4");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v305, "uv5");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v306, "uv6");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v307, "uv7");
    uint64_t v295 = 0;
    *(void *)&long long v288 = (char *)&v288 + 8;
    *((void *)&v288 + 1) = 0;
    long long v290 = 0uLL;
    *(void *)&long long v289 = 0;
    *((void *)&v289 + 1) = &v290;
    long long v291 = 0u;
    long long v292 = 0u;
    long long v293 = 0u;
    std::vector<int>::size_type __n = 0;
    uint64_t v17 = v308;
    uint64_t v18 = v309;
    (*(void (**)(std::string *__return_ptr, uint64_t, void))(*(void *)v308 + 16))(__x, v308, v309);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v17 + 16))(&v327, v17, v18);
    realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::addNode((uint64_t)&v288, (uint64_t)__x, &v327);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v327);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__x);
    __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F3341A0;
    __x[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v288;
    __x[1].__r_.__value_.__r.__words[0] = (std::string::size_type)__x;
    realityio::foreachConnected((uint64_t)&v308, (uint64_t)__x);
    std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](__x);
    LODWORD(__x[0].__r_.__value_.__l.__data_) = 0;
    std::vector<int>::vector((std::vector<int> *)&v327, __n, (const std::vector<int>::value_type *)__x);
    char v19 = (void *)*((void *)&v292 + 1);
    uint64_t v20 = (void *)v293;
    if (*((void *)&v292 + 1) != (void)v293)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = (void *)*v19;
        if ((void *)*v19 != v19 + 1)
        {
          uint64_t v23 = v327;
          do
          {
            uint64_t v24 = v22[4];
            if (v24 != v21) {
              ++*(_DWORD *)(v23 + 4 * v24);
            }
            uint64_t v25 = (void *)v22[1];
            if (v25)
            {
              do
              {
                uint64_t v26 = v25;
                uint64_t v25 = (void *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                uint64_t v26 = (void *)v22[2];
                BOOL v27 = *v26 == (void)v22;
                uint64_t v22 = v26;
              }
              while (!v27);
            }
            uint64_t v22 = v26;
          }
          while (v26 != v19 + 1);
        }
        v19 += 3;
        ++v21;
      }
      while (v19 != v20);
    }
    memset(__x, 0, 48);
    *(void *)float v334 = 0;
    uint64_t v28 = *((void *)&v327 + 1);
    uint64_t v29 = v327;
    if (*((void *)&v327 + 1) != (void)v327)
    {
      unint64_t v30 = 0;
      do
      {
        if (!*(_DWORD *)(v29 + 4 * v30))
        {
          std::deque<unsigned long>::push_back(__x, v334);
          unint64_t v30 = *(void *)v334;
          uint64_t v28 = *((void *)&v327 + 1);
          uint64_t v29 = v327;
        }
        *(void *)float v334 = ++v30;
      }
      while (v30 < (v28 - v29) >> 2);
    }
    realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
    std::string::size_type v31 = __x[1].__r_.__value_.__r.__words[2];
    if (__x[1].__r_.__value_.__r.__words[2])
    {
      int v32 = 0;
      uint8x8_t v267 = 0;
      uint64_t v33 = 0;
      do
      {
        unint64_t v34 = *(void *)(*(void *)(__x[0].__r_.__value_.__l.__size_
                                    + ((__x[1].__r_.__value_.__l.__size_ >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (__x[1].__r_.__value_.__r.__words[1] & 0x1FF));
        __x[1].__r_.__value_.__r.__words[2] = v31 - 1;
        if (++__x[1].__r_.__value_.__l.__size_ >= 0x400)
        {
          operator delete(*(void **)__x[0].__r_.__value_.__l.__size_);
          __x[0].__r_.__value_.__l.__size_ += 8;
          __x[1].__r_.__value_.__l.__size_ -= 512;
        }
        unsigned int v35 = (long long *)v290;
        if (!(void)v290) {
          goto LABEL_48;
        }
        uint64_t v36 = &v290;
        do
        {
          uint64_t v37 = v35;
          uint64_t v38 = v36;
          unint64_t v39 = *((void *)v35 + 4);
          uint64_t v40 = (long long *)((char *)v35 + 8);
          if (v39 >= v34)
          {
            uint64_t v40 = v37;
            uint64_t v36 = v37;
          }
          unsigned int v35 = *(long long **)v40;
        }
        while (v35);
        if (v36 != &v290 && (v39 >= v34 ? (std::string v41 = v37) : (std::string v41 = v38), *((void *)v41 + 4) <= v34))
        {
          if (v39 < v34) {
            uint64_t v37 = v38;
          }
          std::string v50 = (void *)*((void *)v37 + 5);
          if (v50 != &unk_268C403A8)
          {
            if (v267 >= v33)
            {
              uint64_t v51 = (v267 - v32) >> 3;
              unint64_t v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 61) {
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              }
              if ((v33 - v32) >> 2 > v52) {
                unint64_t v52 = (v33 - v32) >> 2;
              }
              if ((unint64_t)(v33 - v32) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v53 = v52;
              }
              if (v53)
              {
                if (v53 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v54 = (char *)operator new(8 * v53);
                uint64_t v55 = v32;
              }
              else
              {
                uint64_t v55 = v32;
                uint64_t v54 = 0;
              }
              uint64_t v56 = v267;
              int v32 = &v54[8 * v51];
              *(void *)int v32 = v50;
              uint64_t v57 = v32 + 8;
              while (v56 != v55)
              {
                uint64_t v58 = *((void *)v56 - 1);
                v56 -= 8;
                *((void *)v32 - 1) = v58;
                v32 -= 8;
              }
              uint64_t v33 = &v54[8 * v53];
              if (v55) {
                operator delete(v55);
              }
              uint8x8_t v267 = v57;
            }
            else
            {
              *(void *)uint8x8_t v267 = v50;
              v267 += 8;
            }
          }
        }
        else
        {
LABEL_48:
          realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
        }
        std::string v42 = (void *)(*((void *)&v292 + 1) + 24 * v34);
        uint64_t v45 = (void *)*v42;
        std::string v43 = v42 + 1;
        uint64_t v44 = v45;
        if (v45 != v43)
        {
          do
          {
            uint64_t v46 = v44[4];
            int v47 = *(_DWORD *)(v327 + 4 * v46) - 1;
            *(_DWORD *)(v327 + 4 * v46) = v47;
            if (!v47) {
              std::deque<unsigned long>::push_back(__x, v44 + 4);
            }
            std::string v48 = (void *)v44[1];
            if (v48)
            {
              do
              {
                uint64_t v49 = v48;
                std::string v48 = (void *)*v48;
              }
              while (v48);
            }
            else
            {
              do
              {
                uint64_t v49 = (void *)v44[2];
                BOOL v27 = *v49 == (void)v44;
                uint64_t v44 = v49;
              }
              while (!v27);
            }
            uint64_t v44 = v49;
          }
          while (v49 != v43);
        }
        std::string::size_type v31 = __x[1].__r_.__value_.__r.__words[2];
      }
      while (__x[1].__r_.__value_.__r.__words[2]);
    }
    else
    {
      int v32 = 0;
      uint8x8_t v267 = 0;
    }
    std::deque<unsigned long>::~deque[abi:ne180100](__x);
    if ((void)v327)
    {
      *((void *)&v327 + 1) = v327;
      operator delete((void *)v327);
    }
    long long v285 = 0u;
    long long v286 = 0u;
    int v287 = 1065353216;
    if (v32 != v267)
    {
      double v59 = v32;
      unint64_t v265 = 0;
      int v263 = 0;
      uint64_t v60 = 0;
      while (1)
      {
        unint64_t v270 = v59;
        uint64_t v61 = *(void *)v59;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v281, (_DWORD *)(*(void *)v59 + 8));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v282, (_DWORD *)(v61 + 12));
        lpsrc = (void *)realityio::mtlx::NeoDataSource::primFromPath((uint64_t)a2, &v281);
        uint64_t v284 = v62;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v281);
        *(_OWORD *)&__x[0].__r_.__value_.__l.__data_ = *(unint64_t *)(*(void *)v270 + 24);
        __x[0].__r_.__value_.__r.__words[2] = 0;
        __x[1].__r_.__value_.__r.__words[0] = 0;
        *(void *)&v328[0] = 0;
        long long v327 = 0uLL;
        uint64_t v63 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>((uint64_t *)&v285, __x[0].__r_.__value_.__r.__words[0], (uint64_t)__x);
        *(void *)float v334 = &__x[0].__r_.__value_.__l.__size_;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)v334);
        *(void *)float v334 = &v327;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)v334);
        v331[1] = 0;
        uint64_t v64 = (realityio *)(*(uint64_t (**)(void *, void))(*(void *)lpsrc + 192))(lpsrc, v284);
        if (v64 == 2)
        {
          long long v82 = *(id *)(realityio::logObjects(v64) + 48);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(long long *__return_ptr))(*(void *)lpsrc + 16))(&v327);
            std::string::size_type Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v327);
            LODWORD(__x[0].__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = Text;
            _os_log_impl(&dword_23F4EA000, v82, OS_LOG_TYPE_INFO, "*** Shader %s", (uint8_t *)__x, 0xCu);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v327);
          }

          *(void *)&long long v327 = lpsrc;
          DWORD2(v327) = v284;
          realityio::mtlx::MtlxActionPayload::MtlxActionPayload((uint64_t)__x, &v327);
          *(void *)&v334[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::mtlx::MtlxActionPayload>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>::_PlaceCopy();
        }
        if (v64 == 1)
        {
          size_t v76 = *(id *)(realityio::logObjects(v64) + 48);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(long long *__return_ptr))(*(void *)lpsrc + 16))(&v327);
            std::string::size_type v77 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v327);
            LODWORD(__x[0].__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = v77;
            _os_log_impl(&dword_23F4EA000, v76, OS_LOG_TYPE_INFO, "*** NodeGraph %s", (uint8_t *)__x, 0xCu);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v327);
          }

          *(void *)float v334 = lpsrc;
          *(_DWORD *)&v334[8] = v284;
          realityio::mtlx::MtlxActionPayload::MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)__x, (realityio::mtlx::NeoShadeNodeGraph *)v334);
          realityio::mtlx::MtlxActionPayload::populateSubgraph((id *)&__x[0].__r_.__value_.__l.__data_);
          realityio::mtlx::MtlxActionPayload::connectSubgraph((int8x8_t *)__x, (uint64_t *)&lpsrc);
          realityio::mtlx::MtlxActionPayload::nodeFromGraph((id *)&__x[0].__r_.__value_.__l.__data_);
          realityio::mtlx::MtlxActionPayload::getUSDInputs(&lpsrc);
          uint64_t v78 = __x[1].__r_.__value_.__l.__data_;
          int v79 = [v78 inputs];
          realityio::mtlx::MtlxActionPayload::addSiblingInputs((pxrInternal__aapl__pxrReserved__::SdfPath *)__x, (uint64_t *)&v327, v79);

          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
          std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          realityio::mtlx::MtlxActionPayload::getUSDOutputs(&lpsrc);
          uint64_t v80 = __x[1].__r_.__value_.__l.__data_;
          int v81 = [v80 outputs];
          realityio::mtlx::MtlxActionPayload::addSiblingOutputs((pxrInternal__aapl__pxrReserved__::SdfPath *)__x, (uint64_t *)&v327, v81);

          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
          std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          *((void *)&v327 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::mtlx::MtlxActionPayload>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>::_PlaceCopy();
        }
        if (!v64) {
          break;
        }
LABEL_247:
        unint64_t v148 = *(void *)(*(void *)v270 + 24);
        if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_5, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire((__guard *)&_MergedGlobals_5))
        {
          qword_268C403A0 = 0;
          qword_268C40398 = 0;
          qword_268C40390 = (uint64_t)&qword_268C40398;
          __cxa_guard_release((__guard *)&_MergedGlobals_5);
        }
        int v149 = (long long *)v290;
        if (!(void)v290) {
          goto LABEL_259;
        }
        std::string::size_type v150 = &v290;
        do
        {
          uint64_t v151 = v149;
          float v152 = v150;
          unint64_t v153 = *((void *)v149 + 4);
          if (v153 >= v148) {
            std::string::size_type v150 = v149;
          }
          else {
            int v149 = (long long *)((char *)v149 + 8);
          }
          int v149 = *(long long **)v149;
        }
        while (v149);
        if (v150 == &v290)
        {
LABEL_259:
          long long v154 = &qword_268C40390;
        }
        else
        {
          if (v153 < v148) {
            uint64_t v151 = v152;
          }
          long long v154 = &qword_268C40390;
          if (*((void *)v151 + 4) <= v148) {
            long long v154 = (uint64_t *)(*((void *)&v292 + 1) + 24 * v148);
          }
        }
        std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v327, (uint64_t)v154);
        int v155 = (void *)v327;
        if ((long long *)v327 != (long long *)((char *)&v327 + 8))
        {
          do
          {
            __x[0].__r_.__value_.__r.__words[0] = v155[4];
            __x[1].__r_.__value_.__r.__words[0] = 0;
            *(_OWORD *)&__x[0].__r_.__value_.__r.__words[1] = 0uLL;
            memset(v334, 0, 24);
            double v156 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>((uint64_t *)&v285, __x[0].__r_.__value_.__r.__words[0], (uint64_t)__x);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__x[0].__r_.__value_.__l.__size_;
            std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v334;
            std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100]((void *)v156 + 3, (pxrInternal__aapl__pxrReserved__::VtValue *)v331);
            int v157 = (void *)v155[1];
            if (v157)
            {
              do
              {
                uint64_t v158 = v157;
                int v157 = (void *)*v157;
              }
              while (v157);
            }
            else
            {
              do
              {
                uint64_t v158 = (_OWORD *)v155[2];
                BOOL v27 = *(void *)v158 == (void)v155;
                int v155 = v158;
              }
              while (!v27);
            }
            int v155 = v158;
          }
          while (v158 != (long long *)((char *)&v327 + 8));
        }
        std::__tree<unsigned int>::destroy((uint64_t)&v327, *((void **)&v327 + 1));
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v331);
        double v59 = v270 + 8;
        if (v270 + 8 == v267) {
          goto LABEL_330;
        }
      }
      *(void *)&long long v327 = 0;
      DWORD2(v327) = 0;
      memset(v328, 0, sizeof(v328));
      uint64_t CullMode = 2;
      __int16 v330 = 256;
      unint64_t v65 = *(id *)(realityio::logObjects(v64) + 48);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)lpsrc + 16))(v334);
        std::string::size_type v66 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v334);
        LODWORD(__x[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = v66;
        _os_log_impl(&dword_23F4EA000, v65, OS_LOG_TYPE_INFO, "*** Material %s", (uint8_t *)__x, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v334);
      }

      uint64_t v317 = lpsrc;
      unsigned int v318 = v284;
      realityio::mtlx::MtlxActionPayload::MtlxActionPayload((uint64_t)__x, (realityio::mtlx::NeoShadeNodeGraph *)&v317);
      long long v67 = (realityio::mtlx::USDDataSource *)lpsrc;
      if (lpsrc)
      {
        if (v67)
        {
          realityio::mtlx::USDDataSource::getPrim(v67, v318, (uint64_t)v334);
          uint64_t CullMode = realityio::getCullMode((realityio *)v334, v68);
          __int16 v330 = v69;
          if ((v334[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v334[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v334[16]);
          long long v67 = *(realityio::mtlx::USDDataSource **)&v334[8];
          if (*(void *)&v334[8]) {
            long long v67 = (realityio::mtlx::USDDataSource *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v334[8]);
          }
        }
      }
      char v70 = v338;
      if ((v338 & 3) != 0)
      {
        if ((v338 & 8) != 0)
        {
          uint64_t v71 = *(id *)(realityio::logObjects(v67) + 48);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            (*(void (**)(std::string *__return_ptr))(*(void *)lpsrc + 16))(&__str);
            uint64_t v72 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
            *(_DWORD *)float v334 = 136315138;
            *(void *)&v334[4] = v72;
            _os_log_impl(&dword_23F4EA000, v71, OS_LOG_TYPE_DEFAULT, "Non-occlusion Shader prim found in occlusion material '%s'. All prims except the occlusion prim will be ignored.", v334, 0xCu);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str);
          }

          char v70 = v338;
        }
        if ((v70 & 4) != 0)
        {
          size_t v73 = *(id *)(realityio::logObjects(v67) + 48);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            (*(void (**)(std::string *__return_ptr))(*(void *)lpsrc + 16))(&__str);
            uint64_t v74 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
            *(_DWORD *)float v334 = 136315138;
            *(void *)&v334[4] = v74;
            _os_log_impl(&dword_23F4EA000, v73, OS_LOG_TYPE_DEFAULT, "Multiple occlusion Shader prims found in occlusion material '%s'. All but one will be ignored, with priority going to 'ND_realitykit_occlusion_surfaceshader'.", v334, 0xCu);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str);
          }

          char v70 = v338;
        }
        if (v70) {
          int v75 = 1;
        }
        else {
          int v75 = 2;
        }
        goto LABEL_109;
      }
      realityio::mtlx::MtlxActionPayload::populateSubgraph((id *)&__x[0].__r_.__value_.__l.__data_);
      realityio::mtlx::MtlxActionPayload::connectSubgraph((int8x8_t *)__x, (uint64_t *)&lpsrc);
      std::string::size_type size = __x[1].__r_.__value_.__l.__size_;
      objc_storeStrong((id *)v328, (id)__x[1].__r_.__value_.__l.__size_);
      if (size)
      {
LABEL_117:
        realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)__x);
        objc_storeStrong(&v315, (id)v327);
        int v263 = DWORD2(v327);
        unint64_t v264 = (realityio *)*(id *)&v328[0];

        uint64_t v85 = *((void *)&v328[0] + 1);
        uint64_t v86 = *(void *)&v328[1];
        unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v328[1] - *((void *)&v328[0] + 1)) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v314 - v312) >> 4) >= v87)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v313 - v312) >> 4) >= v87)
          {
            uint64_t v93 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,realityio::TexcoordID *,realityio::TexcoordID *,realityio::TexcoordID *,0>(*((char **)&v328[0] + 1), *(char **)&v328[1], v312);
            std::vector<realityio::TexcoordID>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v312, v93);
            uint64_t v92 = v313;
            goto LABEL_129;
          }
          int v91 = (char *)(*((void *)&v328[0] + 1) + 16 * ((v313 - v312) >> 4));
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,realityio::TexcoordID *,realityio::TexcoordID *,realityio::TexcoordID *,0>(*((char **)&v328[0] + 1), v91, v312);
          uint64_t v90 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*,realityio::TexcoordID*,realityio::TexcoordID*>((uint64_t)&v314, (uint64_t)v91, v86, v313);
        }
        else
        {
          std::vector<realityio::TexcoordID>::__vdeallocate(&v312);
          if (v87 > 0x555555555555555) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v88 = 0x5555555555555556 * ((v314 - v312) >> 4);
          if (v88 <= v87) {
            unint64_t v88 = v87;
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v314 - v312) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v89 = 0x555555555555555;
          }
          else {
            unint64_t v89 = v88;
          }
          std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](&v312, v89);
          uint64_t v90 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*,realityio::TexcoordID*,realityio::TexcoordID*>((uint64_t)&v314, v85, v86, v313);
        }
        uint64_t v92 = v90;
        uint64_t v313 = v90;
LABEL_129:
        uint64_t v310 = CullMode;
        __int16 v311 = v330;
        uint64_t v279 = 0;
        uint64_t v280 = 0;
        uint64_t v278 = 0;
        uint64_t v94 = v312;
        __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
        __x[0].__r_.__value_.__s.__data_[8] = 0;
        if (v92 != v312)
        {
          std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](&v278, 0xAAAAAAAAAAAAAAABLL * ((v92 - v312) >> 4));
          uint64_t v279 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*,realityio::TexcoordID*,realityio::TexcoordID*>((uint64_t)&v280, v94, v92, v279);
        }
        uint64_t v295 = 0;
        uint64_t v95 = objc_opt_new();
        v269 = (void *)v95;
        uint64_t v97 = v278;
        uint64_t v96 = v279;
        while (1)
        {
          if (v97 == v96)
          {
            id v146 = objc_alloc_init(MEMORY[0x263F6BC50]);
            int v147 = *(NSObject **)(realityio::logObjects((realityio *)[v146 setCustomGeometryProperties:v269])+ 48);
            if (os_log_type_enabled(v147, OS_LOG_TYPE_INFO))
            {
              LODWORD(__x[0].__r_.__value_.__l.__data_) = 138412290;
              *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v269;
              _os_log_impl(&dword_23F4EA000, v147, OS_LOG_TYPE_INFO, "SG property definitions %@", (uint8_t *)__x, 0xCu);
            }

            __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
            std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
            __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v328 + 8;
            std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);

            uint64_t v60 = v264;
            unint64_t v265 = v146;
            goto LABEL_247;
          }
          uint64_t v98 = *(void *)(v97 + 8);
          if ((v98 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v98 &= 0xFFFFFFFFFFFFFFF8;
          }
          long long v99 = (atomic_uint *)(v98 & 0xFFFFFFFFFFFFFFF8);
          if ((v98 & 0xFFFFFFFFFFFFFFF8) != 0) {
            Emptyuint64_t String = (uint64_t)(v99 + 4);
          }
          else {
            Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v95);
          }
          if (*(char *)(EmptyString + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v334, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
          }
          else
          {
            long long v101 = *(_OWORD *)EmptyString;
            *(void *)&v334[16] = *(void *)(EmptyString + 16);
            *(_OWORD *)float v334 = v101;
          }
          if ((v98 & 7) != 0) {
            atomic_fetch_add_explicit(v99, 0xFFFFFFFE, memory_order_release);
          }
          int v102 = *(_DWORD *)(v97 + 4);
          if (v102 != -1)
          {
            if (v102 >= 8)
            {
              long long v103 = *(NSObject **)(realityio::logObjects((realityio *)EmptyString) + 48);
              uint64_t v95 = os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT);
              if (v95)
              {
                if (v334[23] >= 0) {
                  long long v104 = v334;
                }
                else {
                  long long v104 = *(unsigned char **)v334;
                }
                LODWORD(__x[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
                WORD2(__x[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&__x[0].__r_.__value_.__r.__words[1] + 6) = v102;
                _os_log_impl(&dword_23F4EA000, v103, OS_LOG_TYPE_DEFAULT, "Texcoord specification '%s' specifies buffer '%d', which does not exist.", (uint8_t *)__x, 0x12u);
              }
              goto LABEL_241;
            }
            uint64_t v108 = *(void *)(v97 + 8);
            if ((v108 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v108 &= 0xFFFFFFFFFFFFFFF8;
            }
            if ((v108 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v108)
            {
              realityio::TexcoordID::getNormalizedName((realityio::TexcoordID *)v97, __x);
              if ((v334[23] & 0x80000000) != 0) {
                operator delete(*(void **)v334);
              }
              *(std::string *)float v334 = __x[0];
            }
            else
            {
              std::to_string(__x, *(_DWORD *)(v97 + 4));
              int v123 = std::string::insert(__x, 0, "UV");
              std::string::size_type v124 = v123->__r_.__value_.__r.__words[0];
              __str.__r_.__value_.__r.__words[0] = v123->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v123->__r_.__value_.__r.__words[1] + 7);
              char v125 = HIBYTE(v123->__r_.__value_.__r.__words[2]);
              v123->__r_.__value_.__l.__size_ = 0;
              v123->__r_.__value_.__r.__words[2] = 0;
              v123->__r_.__value_.__r.__words[0] = 0;
              if ((v334[23] & 0x80000000) != 0) {
                operator delete(*(void **)v334);
              }
              *(void *)float v334 = v124;
              *(void *)&v334[8] = __str.__r_.__value_.__r.__words[0];
              *(void *)&v334[15] = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
              v334[23] = v125;
              if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__x[0].__r_.__value_.__l.__data_);
              }
            }
            std::operator+<char>();
            uint64_t v126 = &buf[48 * v102];
            int v127 = (realityio *)(v126 + 24);
            if ((char)v126[47] < 0)
            {
              uint64_t v128 = *((void *)v126 + 4);
              if (v128) {
                goto LABEL_195;
              }
            }
            else
            {
              uint64_t v128 = v126[47];
              if (v126[47])
              {
LABEL_195:
                int v129 = *(NSObject **)(realityio::logObjects(v127) + 48);
                uint64_t v95 = os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT);
                if (v95)
                {
                  if (v334[23] >= 0) {
                    std::string v130 = v334;
                  }
                  else {
                    std::string v130 = *(unsigned char **)v334;
                  }
                  if ((char)v126[23] < 0) {
                    uint64_t v126 = *(uint8_t **)v126;
                  }
                  LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v130;
                  WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v126;
                  _os_log_impl(&dword_23F4EA000, v129, OS_LOG_TYPE_DEFAULT, "Texcoord specification '%s' specifies buffer '%s', which has already been assigned.", (uint8_t *)&__str, 0x16u);
                }
LABEL_214:
                if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__x[0].__r_.__value_.__l.__data_);
                }
                if (!v128) {
                  goto LABEL_224;
                }
                goto LABEL_241;
              }
            }
            uint64_t v95 = (uint64_t)std::string::operator=((std::string *)v127, __x);
            if (v102 > 1) {
              LODWORD(v295) = v295 + 1;
            }
            else {
              ++HIDWORD(v295);
            }
            goto LABEL_214;
          }
          uint64_t v105 = *(void *)(v97 + 8);
          if ((v105 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v105 &= 0xFFFFFFFFFFFFFFF8;
          }
          long long v106 = (atomic_uint *)(v105 & 0xFFFFFFFFFFFFFFF8);
          if ((v105 & 0xFFFFFFFFFFFFFFF8) != 0) {
            long long v107 = (const std::string *)(v106 + 4);
          }
          else {
            long long v107 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          }
          std::string::operator=((std::string *)v334, v107);
          if ((v105 & 7) != 0) {
            atomic_fetch_add_explicit(v106, 0xFFFFFFFE, memory_order_release);
          }
          long long v109 = (realityio *)std::operator+<char>();
          int v110 = HIDWORD(v295);
          if (!*(unsigned char *)(v97 + 40) && SHIDWORD(v295) <= 1) {
            break;
          }
          int v120 = v295;
          if ((int)v295 <= 5)
          {
            uint64_t v121 = 0;
            while (1)
            {
              uint64_t v122 = v302[v121 * 8 + 23];
              if ((v122 & 0x80u) != 0) {
                uint64_t v122 = *(void *)&v302[v121 * 8 + 8];
              }
              if (!v122) {
                break;
              }
              v121 += 6;
              if (v121 == 36)
              {
                char v116 = (std::string *)&v308;
                goto LABEL_219;
              }
            }
            char v116 = (std::string *)&v301[v121];
LABEL_219:
            uint64_t v95 = (uint64_t)std::string::operator=(v116 + 1, &__str);
            int v119 = &v295;
            int v110 = v295;
            goto LABEL_220;
          }
          int v131 = *(NSObject **)(realityio::logObjects(v109) + 48);
          uint64_t v95 = os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT);
          if (v95)
          {
            if (v334[23] >= 0) {
              std::string v132 = v334;
            }
            else {
              std::string v132 = *(unsigned char **)v334;
            }
            int v133 = "";
            if (*(unsigned char *)(v97 + 40)) {
              int v133 = " (which requires a 4D buffer)";
            }
            LODWORD(__x[0].__r_.__value_.__l.__data_) = 136316418;
            *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v132;
            WORD2(__x[0].__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&__x[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v133;
            HIWORD(__x[0].__r_.__value_.__r.__words[2]) = 1024;
            LODWORD(__x[1].__r_.__value_.__l.__data_) = 2 - v110;
            WORD2(__x[1].__r_.__value_.__r.__words[0]) = 1024;
            *(_DWORD *)((char *)__x[1].__r_.__value_.__r.__words + 6) = 2;
            WORD1(__x[1].__r_.__value_.__r.__words[1]) = 1024;
            HIDWORD(__x[1].__r_.__value_.__r.__words[1]) = 6 - v120;
            LOWORD(__x[1].__r_.__value_.__r.__words[2]) = 1024;
            *(_DWORD *)((char *)&__x[1].__r_.__value_.__r.__words[2] + 2) = 6;
            _os_log_impl(&dword_23F4EA000, v131, OS_LOG_TYPE_DEFAULT, "No material buffer available for '%s'%s.  %d of %d 2D float buffers, and %d of %d 4D float buffers are available.", (uint8_t *)__x, 0x2Eu);
          }
          char v134 = 0;
          int v102 = -1;
LABEL_221:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (v134)
          {
LABEL_224:
            int v135 = NSString;
            uint64_t v136 = *(void *)(v97 + 8);
            if ((v136 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v136 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v136 &= 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
            if ((v136 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v138 = (const char *)(v137 + 16);
              if (*(char *)(v137 + 39) < 0) {
                uint64_t v138 = *(const char **)v138;
              }
            }
            else
            {
              uint64_t v138 = "";
            }
            int v139 = [v135 stringWithUTF8String:v138];
            if ((v136 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)v137, 0xFFFFFFFE, memory_order_release);
            }
            long long v140 = NSString;
            std::to_string(&__str, v102);
            int v141 = std::string::insert(&__str, 0, "UV");
            long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
            __x[0].__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__x[0].__r_.__value_.__l.__data_ = v142;
            v141->__r_.__value_.__l.__size_ = 0;
            v141->__r_.__value_.__r.__words[2] = 0;
            v141->__r_.__value_.__r.__words[0] = 0;
            if ((__x[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v143 = __x;
            }
            else {
              int v143 = (std::string *)__x[0].__r_.__value_.__r.__words[0];
            }
            uint64_t v144 = [v140 stringWithUTF8String:v143];
            if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__x[0].__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            int v145 = [MEMORY[0x263F6BC38] geometryPropertyWithName:v139 mappingTo:v144];
            [v269 addObject:v145];
          }
LABEL_241:
          if ((v334[23] & 0x80000000) != 0) {
            operator delete(*(void **)v334);
          }
          v97 += 48;
        }
        char v111 = 0;
        uint64_t v112 = 0;
        do
        {
          uint64_t v113 = v112;
          uint64_t v114 = &buf[48 * v112];
          uint64_t v115 = v114[47];
          if ((v115 & 0x80u) != 0) {
            uint64_t v115 = *((void *)v114 + 4);
          }
          if (v111) {
            break;
          }
          char v111 = 1;
          uint64_t v112 = 1;
        }
        while (v115);
        if (v115) {
          char v116 = (std::string *)v301;
        }
        else {
          char v116 = (std::string *)v114;
        }
        int v117 = (std::string *)((char *)&v297 + 48 * v113 + 8);
        if (v115) {
          std::string v118 = (std::string *)v302;
        }
        else {
          std::string v118 = v117;
        }
        uint64_t v95 = (uint64_t)std::string::operator=(v118, &__str);
        int v119 = (uint64_t *)((char *)&v295 + 4);
LABEL_220:
        *(_DWORD *)int v119 = v110 + 1;
        int v102 = -1431655765 * ((unint64_t)((char *)v116 - (char *)buf) >> 4);
        char v134 = 1;
        goto LABEL_221;
      }
      std::unordered_map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>>>::unordered_map((uint64_t)&__str, (uint64_t)&v337);
      if (v333)
      {
        int v159 = &v320;
        uint64_t v320 = 0;
        uint64_t v321 = 0;
        unint64_t v319 = &v320;
        uint64_t v160 = (void *)__str.__r_.__value_.__r.__words[2];
        if (__str.__r_.__value_.__r.__words[2])
        {
          while (1)
          {
            realityio::TexcoordID::TexcoordID((uint64_t)v334, (uint64_t)(v160 + 3));
            uint64_t v161 = v334[39];
            if (v334[39] < 0) {
              uint64_t v161 = *(void *)&v334[24];
            }
            if (v161)
            {
              if ((v334[39] & 0x80) == 0) {
                goto LABEL_275;
              }
            }
            else
            {
              realityio::TexcoordID::computeNormalizedName((realityio::TexcoordID *)v334);
              if ((v334[39] & 0x80) == 0)
              {
LABEL_275:
                std::string v322 = *(std::string *)&v334[16];
                goto LABEL_278;
              }
            }
            std::string::__init_copy_ctor_external(&v322, *(const std::string::value_type **)&v334[16], *(std::string::size_type *)&v334[24]);
LABEL_278:
            if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v322.__r_.__value_.__l.__data_);
            }
            if (&v320 == v159
              || realityio::TexcoordID::operator<((realityio::TexcoordID *)v334, (realityio::TexcoordID *)(v159 + 4)))
            {
              double v162 = v159;
              if (v319 == v159) {
                goto LABEL_505;
              }
              int v163 = *v159;
              uint64_t v164 = v159;
              if (*v159)
              {
                do
                {
                  double v162 = (uint64_t **)v163;
                  int v163 = (uint64_t *)v163[1];
                }
                while (v163);
              }
              else
              {
                do
                {
                  double v162 = (uint64_t **)v164[2];
                  BOOL v27 = *v162 == (uint64_t *)v164;
                  uint64_t v164 = v162;
                }
                while (v27);
              }
              if (realityio::TexcoordID::operator<((realityio::TexcoordID *)(v162 + 4), (realityio::TexcoordID *)v334))
              {
LABEL_505:
                if (*v159)
                {
                  uint64_t v323 = v162;
                  int v159 = v162 + 1;
                }
                else
                {
                  uint64_t v323 = v159;
                }
                goto LABEL_306;
              }
LABEL_301:
              int v159 = (uint64_t **)std::__tree<realityio::TexcoordID>::__find_equal<realityio::TexcoordID>((uint64_t)&v319, &v323, (realityio::TexcoordID *)v334);
              goto LABEL_306;
            }
            if (realityio::TexcoordID::operator<((realityio::TexcoordID *)(v159 + 4), (realityio::TexcoordID *)v334))
            {
              int v165 = v159[1];
              uint64_t v166 = v165;
              int v167 = v159;
              if (v165)
              {
                do
                {
                  uint64_t v168 = (uint64_t **)v166;
                  uint64_t v166 = (uint64_t *)*v166;
                }
                while (v166);
              }
              else
              {
                do
                {
                  uint64_t v168 = (uint64_t **)v167[2];
                  BOOL v27 = *v168 == (uint64_t *)v167;
                  int v167 = v168;
                }
                while (!v27);
              }
              if (v168 != &v320)
              {
                if (!realityio::TexcoordID::operator<((realityio::TexcoordID *)v334, (realityio::TexcoordID *)(v168 + 4)))goto LABEL_301; {
                int v165 = v159[1];
                }
              }
              if (v165)
              {
                uint64_t v323 = v168;
                int v159 = v168;
              }
              else
              {
                uint64_t v323 = v159++;
              }
LABEL_306:
              int v169 = *v159;
              if (!*v159)
              {
                int v169 = (uint64_t *)operator new(0x50uLL);
                v322.__r_.__value_.__l.__size_ = (std::string::size_type)&v320;
                long long v170 = *(_OWORD *)v334;
                *(void *)&v334[8] = 0;
                long long v171 = *(_OWORD *)&v334[16];
                *((_OWORD *)v169 + 2) = v170;
                *((_OWORD *)v169 + 3) = v171;
                v169[8] = *(void *)&v334[32];
                memset(&v334[16], 0, 24);
                *((unsigned char *)v169 + 72) = v335;
                v322.__r_.__value_.__s.__data_[16] = 1;
                float v172 = v323;
                *int v169 = 0;
                v169[1] = 0;
                v169[2] = (uint64_t)v172;
                *int v159 = v169;
                int v173 = v169;
                if (*v319)
                {
                  unint64_t v319 = (uint64_t **)*v319;
                  int v173 = *v159;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v320, v173);
                ++v321;
                v322.__r_.__value_.__r.__words[0] = 0;
                std::unique_ptr<std::__tree_node<realityio::TexcoordID,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TexcoordID,void *>>>>::reset[abi:ne180100]((uint64_t)&v322, 0);
              }
              goto LABEL_310;
            }
            int v169 = (uint64_t *)v159;
LABEL_310:
            std::string::size_type v174 = (uint64_t *)v169[1];
            if (v174)
            {
              do
              {
                int v159 = (uint64_t **)v174;
                std::string::size_type v174 = (uint64_t *)*v174;
              }
              while (v174);
            }
            else
            {
              do
              {
                int v159 = (uint64_t **)v169[2];
                BOOL v27 = *v159 == v169;
                int v169 = (uint64_t *)v159;
              }
              while (!v27);
            }
            if ((v334[39] & 0x80000000) != 0) {
              operator delete(*(void **)&v334[16]);
            }
            if ((v334[8] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v334[8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v160 = (void *)*v160;
            if (!v160)
            {
              int v175 = v321;
              goto LABEL_323;
            }
          }
        }
        int v175 = 0;
LABEL_323:
        memset(v334, 0, 24);
        if (v175 >= 8) {
          int v175 = 8;
        }
        uint64_t v176 = v175;
        std::vector<realityio::TexcoordID>::reserve((uint64_t *)v334, v175);
        v322.__r_.__value_.__r.__words[0] = (std::string::size_type)v319;
        std::__advance[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>>(&v322, v176);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::back_insert_iterator<std::vector<realityio::TexcoordID>>>((uint64_t)&v323, v319, v322.__r_.__value_.__l.__data_, (uint64_t *)v334);
        std::__tree<realityio::TexcoordID>::destroy((uint64_t)&v319, v320);
      }
      else
      {
        memset(v334, 0, 24);
      }
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table((uint64_t)&__str);
      std::vector<realityio::TexcoordID>::__vdeallocate((uint64_t *)v328 + 1);
      *(_OWORD *)((char *)v328 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)v334;
      *((void *)&v328[1] + 1) = *(void *)&v334[16];
      memset(v334, 0, 24);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v334;
      std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      objc_storeStrong((id *)&v327, (id)__x[0].__r_.__value_.__r.__words[2]);
      int v75 = 0;
LABEL_109:
      DWORD2(v327) = v75;
      goto LABEL_117;
    }
    uint64_t v60 = 0;
    int v263 = 0;
    unint64_t v265 = 0;
LABEL_330:
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::~__hash_table((uint64_t)&v285);
    if (v32) {
      operator delete(v32);
    }
    realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph((uint64_t)&v288);
    if (v60)
    {
      *a3 = 0;
      a3[1] = 0;
      goto LABEL_487;
    }
    if (v263 == 1)
    {
      uint64_t v177 = "engine:occlusionMaterial.rematerial";
      goto LABEL_338;
    }
    if (v263 == 2)
    {
      uint64_t v177 = "engine:shadowReceiver.rematerial";
LABEL_338:
      uint64_t v60 = 0;
      goto LABEL_487;
    }
    id v277 = 0;
    long long v178 = [MEMORY[0x263F6BC70] materialFromGraph:v315 configuration:v265 error:&v277];
    float v179 = (realityio *)v277;
    lpsrc = v178;
    if (v179)
    {
      uint64_t v60 = v179;
      uint64_t v180 = *(id *)(realityio::logObjects(v179) + 48);
      if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v181 = [v315 name];
        int v182 = [(realityio *)v60 localizedDescription];
        LODWORD(__x[0].__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v181;
        WORD2(__x[0].__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&__x[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v182;
        _os_log_impl(&dword_23F4EA000, v180, OS_LOG_TYPE_DEFAULT, "Error attempting to validate '%@': %@", (uint8_t *)__x, 0x16u);
      }
      *a3 = 0;
      a3[1] = 0;
LABEL_486:

LABEL_487:
      uint64_t v256 = 384;
      do
      {
        uint64_t v257 = &buf[v256];
        if ((char)buf[v256 - 1] < 0) {
          operator delete(*((void **)v257 - 3));
        }
        if ((char)*(v257 - 25) < 0) {
          operator delete(*((void **)v257 - 6));
        }
        v256 -= 48;
      }
      while (v256);

      goto LABEL_494;
    }
    float v183 = [v178 uniforms];
    v331[0] = v183;
    int v184 = (void *)MEMORY[0x263EFF9A0];
    uint64_t v185 = [v178 textures];
    int v268 = [v184 dictionaryWithDictionary:v185];

    long long v275 = 0u;
    long long v276 = 0u;
    long long v273 = 0u;
    long long v274 = 0u;
    id v186 = v183;
    uint64_t v187 = [v186 countByEnumeratingWithState:&v273 objects:v326 count:16];
    if (v187)
    {
      uint64_t v188 = *(void *)v274;
      do
      {
        for (uint64_t i = 0; i != v187; ++i)
        {
          if (*(void *)v274 != v188) {
            objc_enumerationMutation(v186);
          }
          int v190 = *(void **)(*((void *)&v273 + 1) + 8 * i);
          if ([v190 type] == 13)
          {
            std::string::size_type v191 = NSString;
            (*(void (**)(std::string *__return_ptr))(*(void *)v308 + 16))(__x);
            uint64_t v192 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__x);
            long long v193 = [v190 name];
            int v194 = [v191 stringWithFormat:@"%s.inputs:%@", v192, v193];

            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__x);
            uint64_t v195 = [v190 name];
            [v268 setObject:v194 forKey:v195];
          }
        }
        uint64_t v187 = [v186 countByEnumeratingWithState:&v273 objects:v326 count:16];
      }
      while (v187);
    }

    id v196 = v268;
    long long v327 = 0u;
    v328[0] = 0u;
    LODWORD(v328[1]) = 1065353216;
    memset(&__str, 0, sizeof(__str));
    long long v288 = 0u;
    long long v289 = 0u;
    long long v290 = 0u;
    long long v291 = 0u;
    id v197 = v196;
    uint64_t v198 = [v197 countByEnumeratingWithState:&v288 objects:__x count:16];
    if (!v198)
    {
LABEL_457:

      if (*((void *)&v328[0] + 1))
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 40))(v334);
        std::string::size_type v238 = __str.__r_.__value_.__l.__size_;
        std::string::size_type v239 = __str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
        {
          unint64_t v240 = 0;
          do
          {
            if (*((void *)&v327 + 1))
            {
              float v241 = (unsigned int *)(v239 + 8 * v240);
              unint64_t v242 = bswap64(0x9E3779B97F4A7C55* (v241[1]+ ((v241[1]+ (unint64_t)*v241+ (v241[1] + (unint64_t)*v241) * (v241[1] + (unint64_t)*v241)) >> 1)));
              uint8x8_t v243 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v327 + 8));
              v243.i16[0] = vaddlv_u8(v243);
              if (v243.u32[0] > 1uLL)
              {
                unint64_t v244 = v242;
                if (v242 >= *((void *)&v327 + 1)) {
                  unint64_t v244 = v242 % *((void *)&v327 + 1);
                }
              }
              else
              {
                unint64_t v244 = v242 & (*((void *)&v327 + 1) - 1);
              }
              float v245 = *(void **)(v327 + 8 * v244);
              if (v245)
              {
                float32x2_t v246 = (void *)*v245;
                if (v246)
                {
                  uint64_t v247 = *(void *)v241;
                  do
                  {
                    unint64_t v248 = v246[1];
                    if (v248 == v242)
                    {
                      if (v246[2] == v247)
                      {
                        realityio::WrappedRERef<REAsset *>::operator=(v246 + 4, (uint64_t *)(*(void *)v334 + 8 * v240));
                        std::string::size_type v238 = __str.__r_.__value_.__l.__size_;
                        std::string::size_type v239 = __str.__r_.__value_.__r.__words[0];
                        break;
                      }
                    }
                    else
                    {
                      if (v243.u32[0] > 1uLL)
                      {
                        if (v248 >= *((void *)&v327 + 1)) {
                          v248 %= *((void *)&v327 + 1);
                        }
                      }
                      else
                      {
                        v248 &= *((void *)&v327 + 1) - 1;
                      }
                      if (v248 != v244) {
                        break;
                      }
                    }
                    float32x2_t v246 = (void *)*v246;
                  }
                  while (v246);
                }
              }
            }
            ++v240;
          }
          while (v240 < (uint64_t)(v238 - v239) >> 3);
        }
        *(void *)&long long v285 = v334;
        std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v285);
      }
      *(void *)float v334 = &__str;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v334);

      id v272 = 0;
      uint64_t v249 = [MEMORY[0x263F6BC70] archiveMaterial:lpsrc error:&v272];
      uint8x8_t v250 = (realityio *)v272;
      uint64_t v60 = v250;
      *(void *)&long long v288 = v249;
      if (v250)
      {
        unint64_t v251 = *(id *)(realityio::logObjects(v250) + 48);
        if (os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
        {
          uint8x8_t v252 = [v315 name];
          uint64_t v253 = [(realityio *)v60 localizedDescription];
          LODWORD(__x[0].__r_.__value_.__l.__data_) = 138412546;
          *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v252;
          WORD2(__x[0].__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&__x[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v253;
          _os_log_impl(&dword_23F4EA000, v251, OS_LOG_TYPE_DEFAULT, "Error attempting to archive '%@': %@", (uint8_t *)__x, 0x16u);
        }
        *a3 = 0;
        a3[1] = 0;
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
        uint64_t v325 = 0;
        v254 = operator new(0x70uLL);
        void *v254 = &unk_26F3343D0;
        v254[1] = &v316;
        v254[2] = a3;
        v254[3] = &v288;
        v254[4] = &v315;
        v254[5] = &lpsrc;
        v254[6] = a1;
        v254[7] = &v308;
        v254[8] = v331;
        v254[9] = &v327;
        v254[10] = &v295;
        v254[11] = (char *)&v295 + 4;
        v254[12] = buf;
        v254[13] = &v310;
        uint64_t v325 = v254;
        (*(void (**)(realityio *, void *))(*(void *)a1 + 8))(a1, v324);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v324);
        if (*a3)
        {
          (*(void (**)(std::string *__return_ptr))(*(void *)v308 + 16))(__x);
          uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__x);
          (*(void (**)(realityio *, uint64_t, void))(*(void *)a1 + 24))(a1, String, *a3);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__x);
        }
      }

      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>>>::~__hash_table((uint64_t)&v327);
      long long v178 = lpsrc;
      goto LABEL_486;
    }
    uint64_t v271 = *(void *)v289;
LABEL_357:
    uint64_t v199 = 0;
    while (1)
    {
      if (*(void *)v289 != v271) {
        objc_enumerationMutation(v197);
      }
      unint64_t v200 = *(void *)(*((void *)&v288 + 1) + 8 * v199);
      id v201 = [v197 objectForKeyedSubscript:v200];
      std::string::basic_string[abi:ne180100]<0>(v334, (char *)[v201 UTF8String]);
      MEMORY[0x2455CF7A0](&v319, v334);
      if ((v334[23] & 0x80000000) != 0) {
        operator delete(*(void **)v334);
      }
      uint64_t v202 = v308;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v317, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v319);
      uint64_t v203 = realityio::mtlx::NeoDataSource::primFromPath(v202, &v317);
      uint64_t v205 = v204;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v317);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v203 + 176))(v203, v205)) {
        goto LABEL_445;
      }
      NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v319);
      *(void *)&long long v285 = v203;
      DWORD2(v285) = v205;
      uint64_t v207 = *NameToken;
      *(void *)&long long v286 = v207;
      if ((v207 & 7) != 0)
      {
        uint64_t v208 = (atomic_uint *)(v207 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v208, 2u, memory_order_relaxed) & 1) == 0) {
          *(void *)&long long v286 = v208;
        }
      }
      if ((*(unsigned int (**)(void, void, long long *))(*(void *)v285 + 184))(v285, DWORD2(v285), &v286))
      {
        break;
      }
LABEL_443:
      if ((v286 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v286 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_445:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v319);

      if (++v199 == v198)
      {
        uint64_t v237 = [v197 countByEnumeratingWithState:&v288 objects:__x count:16];
        uint64_t v198 = v237;
        if (!v237) {
          goto LABEL_457;
        }
        goto LABEL_357;
      }
    }
    memset(&v322, 0, 17);
    v322.__r_.__value_.__s.__data_[16] = (*(uint64_t (**)(void, void, long long *))(*(void *)v285 + 32))(v285, DWORD2(v285), &v286);
    objc_storeStrong((id *)&v322.__r_.__value_.__l.__data_, (id)v200);
    unint64_t v209 = bswap64(0x9E3779B97F4A7C55* (HIDWORD(v319)+ ((HIDWORD(v319)+ (unint64_t)v319+ (HIDWORD(v319) + (unint64_t)v319)* (HIDWORD(v319) + (unint64_t)v319)) >> 1)));
    unint64_t v210 = *((void *)&v327 + 1);
    if (*((void *)&v327 + 1))
    {
      uint8x8_t v211 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v327 + 8));
      v211.i16[0] = vaddlv_u8(v211);
      if (v211.u32[0] > 1uLL)
      {
        unint64_t v200 = v209;
        if (v209 >= *((void *)&v327 + 1)) {
          unint64_t v200 = v209 % *((void *)&v327 + 1);
        }
      }
      else
      {
        unint64_t v200 = v209 & (*((void *)&v327 + 1) - 1);
      }
      uint64_t v212 = *(id ***)(v327 + 8 * v200);
      if (v212)
      {
        for (uint64_t j = *v212; j; uint64_t j = (id *)*j)
        {
          unint64_t v214 = (unint64_t)j[1];
          if (v214 == v209)
          {
            if (j[2] == v319) {
              goto LABEL_439;
            }
          }
          else
          {
            if (v211.u32[0] > 1uLL)
            {
              if (v214 >= *((void *)&v327 + 1)) {
                v214 %= *((void *)&v327 + 1);
              }
            }
            else
            {
              v214 &= *((void *)&v327 + 1) - 1;
            }
            if (v214 != v200) {
              break;
            }
          }
        }
      }
    }
    int v215 = operator new(0x30uLL);
    *(void *)float v334 = v215;
    *(void *)&v334[8] = v328;
    void *v215 = 0;
    v215[1] = v209;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v215 + 4, &v319);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v215 + 5, (_DWORD *)&v319 + 1);
    v215[3] = 0;
    v215[4] = 0;
    v215[5] = 0;
    v334[16] = 1;
    float v216 = (float)(unint64_t)(*((void *)&v328[0] + 1) + 1);
    if (v210 && (float)(*(float *)&v328[1] * (float)v210) >= v216)
    {
LABEL_429:
      std::string v232 = *(id ***)(v327 + 8 * v200);
      uint64_t j = *(id **)v334;
      if (v232)
      {
        **(void **)float v334 = *v232;
      }
      else
      {
        **(void **)float v334 = *(void *)&v328[0];
        *(void *)&v328[0] = j;
        *(void *)(v327 + 8 * v20std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = v328;
        if (!*j) {
          goto LABEL_438;
        }
        unint64_t v233 = *((void *)*j + 1);
        if ((v210 & (v210 - 1)) != 0)
        {
          if (v233 >= v210) {
            v233 %= v210;
          }
        }
        else
        {
          v233 &= v210 - 1;
        }
        std::string v232 = (id **)(v327 + 8 * v233);
      }
      *std::string v232 = j;
LABEL_438:
      *(void *)float v334 = 0;
      ++*((void *)&v328[0] + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,void *>>>>::reset[abi:ne180100]((uint64_t)v334);
LABEL_439:
      objc_storeStrong(j + 3, v322.__r_.__value_.__l.__data_);
      realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)j + 4, (uint64_t *)&v322.__r_.__value_.__l.__size_);
      *((unsigned char *)j + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = v322.__r_.__value_.__s.__data_[16];
      std::string::size_type v234 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v235 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&__str, &v319);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__str.__r_.__value_.__l.__size_, &v319);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v234 + 4), (_DWORD *)&v319 + 1);
        std::string::size_type v235 = v234 + 8;
      }
      __str.__r_.__value_.__l.__size_ = v235;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v322.__r_.__value_.__l.__size_);

      goto LABEL_443;
    }
    BOOL v217 = (v210 & (v210 - 1)) != 0;
    if (v210 < 3) {
      BOOL v217 = 1;
    }
    unint64_t v218 = v217 | (2 * v210);
    unint64_t v219 = vcvtps_u32_f32(v216 / *(float *)&v328[1]);
    if (v218 <= v219) {
      int8x8_t prime = (int8x8_t)v219;
    }
    else {
      int8x8_t prime = (int8x8_t)v218;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v210 = *((void *)&v327 + 1);
    if (*(void *)&prime > *((void *)&v327 + 1)) {
      goto LABEL_395;
    }
    if (*(void *)&prime < *((void *)&v327 + 1))
    {
      unint64_t v227 = vcvtps_u32_f32((float)*((unint64_t *)&v328[0] + 1) / *(float *)&v328[1]);
      if (*((void *)&v327 + 1) < 3uLL
        || (uint8x8_t v228 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v327 + 8)),
            v228.i16[0] = vaddlv_u8(v228),
            v228.u32[0] > 1uLL))
      {
        unint64_t v227 = std::__next_prime(v227);
      }
      else
      {
        uint64_t v229 = 1 << -(char)__clz(v227 - 1);
        if (v227 >= 2) {
          unint64_t v227 = v229;
        }
      }
      if (*(void *)&prime <= v227) {
        int8x8_t prime = (int8x8_t)v227;
      }
      if (*(void *)&prime >= v210)
      {
        unint64_t v210 = *((void *)&v327 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_395:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v221 = operator new(8 * *(void *)&prime);
          v222 = (void *)v327;
          *(void *)&long long v327 = v221;
          if (v222) {
            operator delete(v222);
          }
          uint64_t v223 = 0;
          *((int8x8_t *)&v327 + 1) = prime;
          do
            *(void *)(v327 + 8 * v223++) = 0;
          while (*(void *)&prime != v223);
          uint64_t v224 = *(void ***)&v328[0];
          if (*(void *)&v328[0])
          {
            unint64_t v225 = *(void *)(*(void *)&v328[0] + 8);
            uint8x8_t v226 = (uint8x8_t)vcnt_s8(prime);
            v226.i16[0] = vaddlv_u8(v226);
            if (v226.u32[0] > 1uLL)
            {
              if (v225 >= *(void *)&prime) {
                v225 %= *(void *)&prime;
              }
            }
            else
            {
              v225 &= *(void *)&prime - 1;
            }
            *(void *)(v327 + 8 * v225) = v328;
            for (k = *v224; k; unint64_t v225 = v231)
            {
              unint64_t v231 = k[1];
              if (v226.u32[0] > 1uLL)
              {
                if (v231 >= *(void *)&prime) {
                  v231 %= *(void *)&prime;
                }
              }
              else
              {
                v231 &= *(void *)&prime - 1;
              }
              if (v231 != v225)
              {
                if (!*(void *)(v327 + 8 * v231))
                {
                  *(void *)(v327 + 8 * v231) = v224;
                  goto LABEL_420;
                }
                *uint64_t v224 = (void *)*k;
                void *k = **(void **)(v327 + 8 * v231);
                **(void **)(v327 + 8 * v231) = k;
                k = v224;
              }
              unint64_t v231 = v225;
LABEL_420:
              uint64_t v224 = (void **)k;
              k = (void *)*k;
            }
          }
          unint64_t v210 = (unint64_t)prime;
          goto LABEL_424;
        }
        uint8x8_t v236 = (void *)v327;
        *(void *)&long long v327 = 0;
        if (v236) {
          operator delete(v236);
        }
        unint64_t v210 = 0;
        *((void *)&v327 + 1) = 0;
      }
    }
LABEL_424:
    if ((v210 & (v210 - 1)) != 0)
    {
      if (v209 >= v210) {
        unint64_t v200 = v209 % v210;
      }
      else {
        unint64_t v200 = v209;
      }
    }
    else
    {
      unint64_t v200 = (v210 - 1) & v209;
    }
    goto LABEL_429;
  }
  int v9 = (uint64_t *)(v288 + 16);
  while (1)
  {
    long long v327 = 0uLL;
    *(void *)&v328[0] = 0;
    if ((*(unsigned int (**)(void, void, uint64_t *, void, long long *))(*(void *)*(v9 - 2) + 80))(*(v9 - 2), *((unsigned int *)v9 - 2), v9, 0, &v327))
    {
      if (*((void *)&v327 + 1) != (void)v327) {
        break;
      }
    }
LABEL_15:
    *(void *)std::string buf = &v327;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    uint64_t v16 = v9 + 1;
    v9 += 3;
    if (v16 == v8) {
      goto LABEL_16;
    }
  }
  uint64_t v10 = *v9;
  if ((*v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::mtlx::NeoShadeOutput::GetValueProducingAttributes((realityio::mtlx::NeoShadeOutput *)(v9 - 2), (uint64_t)v334);
  if (*(void *)&v334[8] == *(void *)v334) {
    goto LABEL_13;
  }
  uint64_t v11 = v308;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v322, *(pxrInternal__aapl__pxrReserved__::SdfPath **)v334);
  uint64_t v12 = realityio::mtlx::NeoDataSource::primFromPath(v11, &v322);
  uint64_t v14 = v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v322);
  *(_OWORD *)&__x[0].__r_.__value_.__r.__words[1] = 0uLL;
  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__x[0].__r_.__value_.__l.__size_;
  long long v297 = 0u;
  long long v298 = 0u;
  *(_OWORD *)std::string buf = 0u;
  std::deque<realityio::mtlx::NeoShadeConnectable>::__add_back_capacity(buf);
  uint64_t v15 = *(void *)(*(void *)&buf[8] + ((((void)v298 + *((void *)&v298 + 1)) >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * (v298 + BYTE8(v298));
  *(void *)uint64_t v15 = v12;
  *(_DWORD *)(v15 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v14;
  ++*((void *)&v298 + 1);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 16))(&v285, v12, v14);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v285;
  *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>((uint64_t **)__x, &v285, &__str)+ 9) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v285);
  LOBYTE(v12) = realityio::_hasCyclesHelper((uint64_t **)__x, buf);
  std::deque<realityio::mtlx::NeoShadeConnectable>::~deque[abi:ne180100]((uint64_t)buf);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::destroy((void *)__x[0].__r_.__value_.__l.__size_);
  if ((v12 & 1) == 0)
  {
LABEL_13:
    *(void *)std::string buf = v334;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_15;
  }
  *(void *)std::string buf = v334;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)std::string buf = &v327;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v288;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *a3 = 0;
  a3[1] = 0;
LABEL_494:
  *(void *)std::string buf = &v312;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_23F55D17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a14 + 1);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a14);

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>>>::~__hash_table((uint64_t)&STACK[0x510]);
  std::array<std::pair<std::string,std::string>,8ul>::~array((uint64_t)&STACK[0x260]);

  STACK[0x260] = (unint64_t)&STACK[0x400];
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);

  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v14[16 * v10];
    uint64_t v18 = &v14[16 * v13];
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v16, a2);
    uint64_t v17 = (char *)v16 + 16;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__swap_out_circular_buffer(a1, &v15);
    unint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::VtValue(*(pxrInternal__aapl__pxrReserved__::VtValue **)(v4 - 8), a2);
    unint64_t v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_23F55D87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v11;
  _Unwind_Resume(exception_object);
}

void realityio::anonymous namespace'::logErrors(realityio::_anonymous_namespace_ *this, NSError *a2)
{
  int v2 = (int)a2;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = this;
  uint64_t v4 = [(realityio::_anonymous_namespace_ *)v3 userInfo];
  unint64_t v5 = [v4 objectForKeyedSubscript:@"NSMultipleUnderlyingErrorsKey"];
  unint64_t v6 = [&stru_26F34B2D0 stringByPaddingToLength:v2 withString:@" " startingAtIndex:0];
  unint64_t v7 = v6;
  if (v5)
  {
    int v8 = *(id *)(realityio::logObjects(v6) + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = [(realityio::_anonymous_namespace_ *)v3 localizedDescription];
      *(_DWORD *)std::string buf = 138412546;
      uint64_t v23 = v7;
      __int16 v24 = 2112;
      uint64_t v25 = v15;
      _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "%@%@ possibly due to the following:", buf, 0x16u);
    }
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    unint64_t v9 = v5;
    uint64_t v11 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v18;
      unint64_t v13 = (NSError *)(v2 + 1);
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v18 != v12) {
            objc_enumerationMutation(v9);
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v11);
    }
  }
  else
  {
    unint64_t v9 = *(id *)(realityio::logObjects(v6) + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = [(realityio::_anonymous_namespace_ *)v3 localizedDescription];
      *(_DWORD *)std::string buf = 138412546;
      uint64_t v23 = v7;
      __int16 v24 = 2112;
      uint64_t v25 = v16;
      _os_log_error_impl(&dword_23F4EA000, v9, OS_LOG_TYPE_ERROR, "%@%@", buf, 0x16u);
    }
  }
}

void sub_23F55DAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::array<std::pair<std::string,std::string>,8ul>::~array(uint64_t a1)
{
  uint64_t v2 = 384;
  do
  {
    uint64_t v3 = a1 + v2;
    if (*(char *)(a1 + v2 - 1) < 0) {
      operator delete(*(void **)(v3 - 24));
    }
    if (*(char *)(v3 - 25) < 0) {
      operator delete(*(void **)(v3 - 48));
    }
    v2 -= 48;
  }
  while (v2);
  return a1;
}

uint64_t realityio::buildMaterialXAsset@<X0>(realityio *this@<X0>, void *a2@<X8>)
{
  v14[0] = &unk_26F334220;
  v14[1] = this;
  uint64_t v4 = (realityio *)((char *)this + 32);
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)this + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v10, v5, v4);
  realityio::mtlx::USDDataSource::USDDataSource((realityio::mtlx::USDDataSource *)&v7, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10);
  realityio::buildMaterialXAsset((realityio *)v14, &v7, a2);
  unint64_t v7 = (uint64_t (**)(void))&unk_26F32F700;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)v9, v9[1]);
  uint64_t v15 = (void **)&v8;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100](&v15);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  uint64_t result = v11;
  if (v11) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  return result;
}

void sub_23F55DCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::mtlx::MtlxActionPayload>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio4mtlx17MtlxActionPayloadE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<realityio::mtlx::MtlxActionPayload>::Invoke()
{
}

void sub_23F55DEB4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v4);

  uint64_t v7 = *(void *)(v1 + 8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
  MEMORY[0x2455D2BD0](v8, 0x10E0C4080940666);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = (void **)(a1 + 16);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = (void **)(a1 + 16);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

realityio::mtlx::MtlxActionPayload *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::mtlx::MtlxActionPayload>(realityio::mtlx::MtlxActionPayload *result)
{
  if (result)
  {
    realityio::mtlx::MtlxActionPayload::~MtlxActionPayload(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::mtlx::MtlxActionPayload::MtlxActionPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = *(id *)(a2 + 16);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(id *)(a2 + 24);
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>>>::unordered_map(a1 + 40, a2 + 40);
  std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::unordered_map(a1 + 80, a2 + 80);
  std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>>>::unordered_map(a1 + 120, a2 + 120);
  std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::unordered_map(a1 + 160, a2 + 160);
  *(void *)(a1 + 20std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = *(id *)(a2 + 200);
  *(void *)(a1 + 20pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(id *)(a2 + 208);
  id v6 = *(id *)(a2 + 216);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1 + 232;
  *(void *)(a1 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v6;
  *(void *)(a1 + 24std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = 0;
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a1 + 224), *(const void ***)(a2 + 224), (const void ***)(a2 + 232));
  std::unordered_map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>>>::unordered_map(a1 + 248, a2 + 248);
  *(_WORD *)(a1 + 28pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_WORD *)(a2 + 288);
  return a1;
}

void sub_23F55E314(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v6, *(char **)(v1 + 232));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v2);

  uint64_t v8 = *(void *)(v1 + 8);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v1);
  _Unwind_Resume(a1);
}

void sub_23F55E3B8()
{
}

uint64_t std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23F55E420(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = v5 & (v6 - 1);
    }
    uint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      unint64_t v9 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(void *)a2) {
              return v9;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          unint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>(a1, v5, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  long long v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    void *v17 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v1pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v20[0];
    }
  }
  unint64_t v9 = (void *)v20[0];
  v20[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)v20, 0);
  return v9;
}

void sub_23F55E690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
  return result;
}

void sub_23F55E708(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  realityio::mtlx::MtlxActionPayload::Connectable::Connectable(a1 + 8, a2 + 8);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = *(id *)(a2 + 80);
  return a1;
}

void sub_23F55E770(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MtlxActionPayload::Connectable::Connectable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a1 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(unsigned char *)(a2 + 48);
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 56), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 56));
  return a1;
}

void sub_23F55E858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *((void *)v2 + 5);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)v2 + 4);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v2);
  _Unwind_Resume(a1);
}

void *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(void *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F55E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23F55E9F0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = v5 & (v6 - 1);
    }
    uint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t v9 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(void *)a2) {
              return v9;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>(a1, v5, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  long long v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    void *v17 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v1pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v20[0];
    }
  }
  uint64_t v9 = (void *)v20[0];
  v20[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)v20, 0);
  return v9;
}

void sub_23F55EC60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
  return result;
}

void sub_23F55ECD8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  realityio::mtlx::MtlxActionPayload::Connectable::Connectable(a1 + 8, a2 + 8);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = *(id *)(a2 + 80);
  return a1;
}

void sub_23F55ED40(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::unordered_map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_23F55EE98(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    BOOL v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>(a1, v6, a3, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *unint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  unint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100]((uint64_t)v21, 0);
  return v10;
}

void sub_23F55F100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>::pair[abi:ne180100](v8 + 2, a3);
  *(unsigned char *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 1;
  return result;
}

void sub_23F55F178(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>::pair[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::TexcoordID::TexcoordID((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void realityio::mtlx::MtlxActionPayload::~MtlxActionPayload(realityio::mtlx::MtlxActionPayload *this)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table((uint64_t)this + 248);
  std::__tree<std::string>::destroy((uint64_t)this + 224, *((char **)this + 29));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table((uint64_t)this + 40);

  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::foreachConnected(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  char v8 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a1 + 16))(v4);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t)v6, (unsigned int *)v4, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v4);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a1;
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v6);
}

void sub_23F55F4BC(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
  return a1;
}

uint64_t realityio::anonymous namespace'::ForeachConnectedWorker::traverse(uint64_t a1, uint64_t *a2)
{
  long long v13 = 0u;
  long long v14 = 0u;
  int v15 = 1065353216;
  realityio::mtlx::NeoDataSource::gatherSources(*a2, (uint64_t)a2, (uint64_t)&v13);
  uint64_t v4 = (uint64_t *)v14;
  if ((void)v14)
  {
    while (1)
    {
      if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((void *)(a1 + 8), (unsigned int *)v4 + 4))
      {
        if ((*(unsigned char *)(a1 + 48) & 1) == 0)
        {
          (*(void (**)(void *__return_ptr))(*(void *)*a2 + 16))(v12);
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 8, (unsigned int *)v12, v12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
        }
        uint64_t v5 = *a2;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, (_DWORD *)v4 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, (_DWORD *)v4 + 5);
        v12[0] = realityio::mtlx::NeoDataSource::primFromPath(v5, &v10);
        v12[1] = v6;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
        uint64_t v7 = *(void *)(*(void *)a1 + 24);
        if (!v7) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if (((*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v7 + 48))(v7, v12, a2) & 1) == 0
        {
          break;
        }
      }
      uint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = 0;
  }
  else
  {
LABEL_9:
    uint64_t v8 = 1;
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)&v13);
  return v8;
}

void sub_23F55F718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = v3;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = v3 & (*(void *)&v2 - 1);
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *(void *)a2) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__func(void *a1)
{
  *a1 = &unk_26F334110;
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__func(void *a1)
{
  *a1 = &unk_26F334110;
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int8x8_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26F334110;
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23F55F938(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F334110;
  return std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int8x8_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(void *a1, char *a2)
{
  unint64_t v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "");
  return a1;
}

void sub_23F55FB14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::addNode(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, (void *)a2);
  uint64_t v7 = v6;
  if ((uint64_t **)(a1 + 8) != v6) {
    return v6[8];
  }
  unint64_t v8 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v8 + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, (_DWORD *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, a3 + 1);
  LOBYTE(v33) = 0;
  *((void *)&v33 + 1) = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v23 + 1, (_DWORD *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, &v29);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, &v30);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, &v31);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, &v32);
  long long v28 = v33;
  BOOL v9 = *v7;
  if (*v7)
  {
    int v10 = (void **)v7;
    while (1)
    {
      while (1)
      {
        int v11 = v9;
        float v12 = v9 + 4;
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v23, v9 + 4)) {
          break;
        }
        BOOL v9 = (uint64_t *)*v11;
        int v10 = (void **)v11;
        if (!*v11) {
          goto LABEL_12;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v12, &v23)) {
        break;
      }
      int v10 = (void **)(v11 + 1);
      BOOL v9 = (uint64_t *)v11[1];
      if (!v9) {
        goto LABEL_12;
      }
    }
    long long v13 = (char *)*v10;
    if (*v10) {
      goto LABEL_15;
    }
  }
  else
  {
    int v10 = (void **)v7;
    int v11 = v7;
  }
LABEL_12:
  long long v13 = (char *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 8, &v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 9, (_DWORD *)&v23 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 10, &v24);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 11, &v25);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 12, &v26);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 13, &v27);
  *(_OWORD *)(v13 + 56) = v28;
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = v11;
  *int v10 = v13;
  uint64_t v14 = **(void **)a1;
  int v15 = (uint64_t *)v13;
  if (v14)
  {
    *(void *)a1 = v14;
    int v15 = (uint64_t *)*v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v7, v15);
  ++*(void *)(a1 + 16);
LABEL_15:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  size_t v17 = (uint64_t **)(a1 + 32);
  unint64_t v16 = *(uint64_t **)(a1 + 32);
  if (v16)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v18 = (uint64_t **)v16;
        unint64_t v19 = v16[4];
        if (v19 <= v8) {
          break;
        }
        unint64_t v16 = *v18;
        size_t v17 = v18;
        if (!*v18) {
          goto LABEL_23;
        }
      }
      if (v19 >= v8) {
        break;
      }
      unint64_t v16 = v18[1];
      if (!v16)
      {
        size_t v17 = v18 + 1;
        goto LABEL_23;
      }
    }
  }
  else
  {
    unint64_t v18 = (uint64_t **)(a1 + 32);
LABEL_23:
    long long v20 = (uint64_t *)operator new(0x30uLL);
    v20[4] = v8;
    v20[5] = (uint64_t)(v13 + 40);
    uint64_t *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v18;
    void *v17 = v20;
    uint64_t v21 = **(void **)(a1 + 24);
    if (v21)
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v21;
      long long v20 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v20);
    ++*(void *)(a1 + 40);
  }
  std::vector<std::set<unsigned long>>::resize((uint64_t *)(a1 + 72), *(void *)(a1 + 96));
  std::vector<std::set<unsigned long>>::resize((uint64_t *)(a1 + 48), *(void *)(a1 + 96));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  return (uint64_t *)v8;
}

void sub_23F55FE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::~NodeStorage((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<std::set<unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::set<unsigned long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 24;
        std::__tree<unsigned int>::destroy(v3 - 24, *(void **)(v3 - 16));
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::~NodeStorage(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void **std::vector<std::set<unsigned long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 24 * a2;
      uint64_t v14 = 24 * a2;
      int v15 = (void *)(v7 + 8);
      do
      {
        *int v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)result, v11);
    }
    else {
      float v12 = 0;
    }
    unint64_t v19 = v12;
    long long v20 = &v12[24 * v8];
    uint64_t v22 = &v12[24 * v11];
    unint64_t v16 = &v20[24 * a2];
    uint64_t v17 = 24 * a2;
    unint64_t v18 = v20 + 8;
    do
    {
      *unint64_t v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    uint64_t v21 = v16;
    std::vector<std::set<unsigned long>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::set<unsigned long>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_23F560150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::set<unsigned long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>,std::reverse_iterator<std::set<unsigned long>*>,std::reverse_iterator<std::set<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>,std::reverse_iterator<std::set<unsigned long>*>,std::reverse_iterator<std::set<unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v9;
      unint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v13;
      if (v13)
      {
        *(void *)(v11 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v12;
        *(void *)(a3 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
        *unint64_t v10 = 0;
        *(void *)(a3 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
      }
      else
      {
        *(void *)(v7 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<unsigned int>::destroy(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::set<unsigned long>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::set<unsigned long>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = i - 24;
    std::__tree<unsigned int>::destroy(i - 24, *(void **)(i - 16));
  }
}

void std::__function::__func<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__func()
{
}

void *std::__function::__func<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F3341A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3341A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v18);
  uint64_t v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6, &v18);
  if ((void *)(v6 + 8) == v7) {
    uint64_t v8 = (uint64_t **)&realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  }
  else {
    uint64_t v8 = (uint64_t **)(v7 + 8);
  }
  uint64_t v9 = *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v9 == (uint64_t *)-1)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v18);
    (*(void (**)(uint64_t **__return_ptr))(**(void **)a2 + 16))(&v17);
    uint64_t v9 = realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::addNode(v10, (uint64_t)&v18, &v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  }
  uint64_t v11 = *(void *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a3 + 16))(&v18);
  uint64_t v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v11, &v18);
  if ((void *)(v11 + 8) == v12) {
    uint64_t v13 = (uint64_t *)&realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  }
  else {
    uint64_t v13 = v12 + 8;
  }
  uint64_t v14 = *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v14 != -1)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    char v17 = v9;
    uint64_t v18 = v14;
    std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(*(void *)(v15 + 48) + 24 * v14), (unint64_t *)&v17, (uint64_t *)&v17);
    std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(*(void *)(v15 + 72) + 24 * (void)v17), (unint64_t *)&v18, &v18);
  }
  return 1;
}

void sub_23F560630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t std::__function::__func<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::target_type()
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::TextureAssetData>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::TextureAssetData>,0>(uint64_t a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(a1 + 16));

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t realityio::ContextFromSession::engine(realityio::ContextFromSession *this)
{
  return *(void *)(*(void *)(*(void *)(*((void *)this + 1) + 40) + 16) + 16);
}

uint64_t realityio::ContextFromSession::performBlockSyncOnEngineQueue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 48) + 16))();
}

BOOL realityio::ContextFromSession::addExtraAsset(uint64_t a1, const void **a2, uint64_t a3)
{
  return realityio::ImportSessionImpl::addExtraAsset(*(void *)(*(void *)(*(void *)(a1 + 8) + 40) + 16), a2, a3);
}

void realityio::ContextFromSession::addOrReplaceExtraAsset(uint64_t a1, long long *a2, uint64_t a3)
{
}

void realityio::ContextFromSession::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 40) + 16) + 40);
  if (v2) {
    realityio::LiveSceneManager::queueForDeferredAssetLoad(v2, a2);
  }
}

void realityio::ContextFromSession::resolveImageAssets(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v56 = 0;
  uint64_t v6 = v4 - v5;
  if (v6)
  {
    if (v6 < 0) {
      std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = v6 >> 3;
    unint64_t v68 = a3 + 2;
    uint64_t v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a3 + 2), v6 >> 3);
    uint64_t v64 = v8;
    unint64_t v65 = v8;
    std::string::size_type v66 = v8;
    long long v67 = &v8[v9];
    uint64_t v10 = &v8[v7];
    uint64_t v11 = 8 * v7;
    do
    {
      uint64_t v12 = v56;
      *uint64_t v8 = v56;
      if (v12) {
        RERetain();
      }
      ++v8;
      v11 -= 8;
    }
    while (v11);
    std::string::size_type v66 = v10;
    std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(a3, &v64);
    std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)&v64);
  }
  uint64_t v13 = (realityio::TextureBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v56);
  uint64_t v14 = realityio::TextureBuilder::kOutputName(v13);
  if (*(char *)(v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    v69.__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v15;
  }
  unint64_t v39 = a2;
  realityio::Inputs::getAccumulatedValues<realityio::TextureBuilder::TextureDataT const*>(*(void *)(a1 + 8), (uint64_t)&v69, (uint64_t)&v64);
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = &v62;
  if ((_BYTE)v64)
  {
    unint64_t v16 = v65;
    std::string v41 = v66;
    if (v65 != v66)
    {
      do
      {
        std::string v42 = v16;
        char v17 = *(void **)(*v16 + 16);
        uint64_t v18 = *v16 + 24;
        if (v17 != (void *)v18)
        {
          do
          {
            MEMORY[0x2455CF7A0](v60, v17 + 4);
            long long v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(**(void **)(a1 + 8) + 8));
            pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(&v56, v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v60);
            pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&v56, (uint64_t)&v44);
            MEMORY[0x2455CEB30](v48, &v44);
            realityio::TextureBuilder::findSourceInput((uint64_t)v48, (uint64_t)v52);
            if ((v51 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
            if (v49) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
            }
            if ((v47 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
            if (v45) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
            }
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v52, &v44);
              long long v20 = v62;
              uint64_t v21 = (void **)&v62;
              uint64_t v22 = &v62;
              if (!v62) {
                goto LABEL_32;
              }
              uint64_t v21 = (void **)&v62;
              while (1)
              {
                while (1)
                {
                  uint64_t v22 = (uint64_t **)v20;
                  uint64_t v23 = v20 + 4;
                  if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v44, v20 + 4)) {
                    break;
                  }
                  long long v20 = *v22;
                  uint64_t v21 = (void **)v22;
                  if (!*v22) {
                    goto LABEL_32;
                  }
                }
                if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v23, &v44)) {
                  break;
                }
                uint64_t v21 = (void **)(v22 + 1);
                long long v20 = v22[1];
                if (!v20) {
                  goto LABEL_32;
                }
              }
              int v24 = *v21;
              if (!*v21)
              {
LABEL_32:
                int v24 = operator new(0x30uLL);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v24 + 8, &v44);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v24 + 9, (_DWORD *)&v44 + 1);
                *((void *)v24 + 5) = 0;
                *(void *)int v24 = 0;
                *((void *)v24 + 1) = 0;
                *((void *)v24 + 2) = v22;
                char *v21 = v24;
                int v25 = (uint64_t *)v24;
                if (*v61)
                {
                  uint64_t v61 = (uint64_t **)*v61;
                  int v25 = (uint64_t *)*v21;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v62, v25);
                ++v63;
              }
              realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)v24 + 5, v17 + 7);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
            }
            if ((v55 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
            if (v53) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
            }
            if ((v59 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
            if (v57) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v60);
            int v26 = (void *)v17[1];
            if (v26)
            {
              do
              {
                int v27 = v26;
                int v26 = (void *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                int v27 = (void *)v17[2];
                BOOL v28 = *v27 == (void)v17;
                char v17 = v27;
              }
              while (!v28);
            }
            char v17 = v27;
          }
          while (v27 != (void *)v18);
        }
        unint64_t v16 = v42 + 1;
      }
      while (v42 + 1 != v41);
    }
  }
  uint64_t v29 = *v39;
  if (v39[1] != *v39)
  {
    unint64_t v30 = 0;
    do
    {
      int v31 = v62;
      if (v62)
      {
        int v32 = (void *)(v29 + 8 * v30);
        long long v33 = &v62;
        do
        {
          unint64_t v34 = v33;
          unsigned int v35 = v31 + 4;
          int v36 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v31 + 4, v32);
          uint64_t v37 = v31 + 1;
          if (!v36)
          {
            uint64_t v37 = v31;
            long long v33 = (uint64_t **)v31;
          }
          int v31 = (uint64_t *)*v37;
        }
        while (*v37);
        if (v33 != &v62)
        {
          uint64_t v38 = v36 ? v34 + 4 : (uint64_t **)v35;
          if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v32, v38) & 1) == 0) {
            realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)(*a3 + 8 * v30), (uint64_t *)v33 + 5);
          }
        }
      }
      ++v30;
      uint64_t v29 = *v39;
    }
    while (v30 < (v39[1] - *v39) >> 3);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>>>::destroy(v62);
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v64);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_23F560CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer(v33 - 160);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a33);
  a33 = a10;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 3)
  {
    return pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, 3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdObject::~UsdObject(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(uint64_t a1, int a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  *(_DWORD *)a1 = a2;
  uint64_t v8 = *a3;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *a3;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), a4 + 1);
  uint64_t v10 = *a5;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *a5;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11 && (*(unsigned char *)(v11 + 57) & 8) == 0 && *(void *)(v11 + 16) == *v9) {
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  return a1;
}

void sub_23F560FC0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v2);
  uint64_t v5 = *(void *)(v1 + 8);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>>>::destroy(a1[1]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *std::__function::__value_func<BOOL ()(realityio::mtlx::NeoPrim const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::TextureAssetData>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(void **)(a1 + 32));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(*(void **)(a1 + 8));
  return a1;
}

void std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        std::__tree<unsigned int>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 296), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_Move(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_Equal(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_EqualPtr(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 296));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F561424(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10E0C405B0E7B2ALL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio4mtlx17MtlxActionPayloadE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::mtlx::MtlxActionPayload>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>::_PlaceCopy();
}

atomic_uint **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>::~intrusive_ptr(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit(v2 + 74, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)v2);
    MEMORY[0x2455D2BD0]();
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>::_PlaceCopy()
{
}

void sub_23F5615DC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10E0C405B0E7B2ALL);
  _Unwind_Resume(a1);
}

void std::vector<realityio::TexcoordID>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<realityio::TexcoordID>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::~__func()
{
}

__n128 std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F334340;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F334340;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::operator()(uint64_t a1, uint64_t a2)
{
  realityio::mtlx::USDDataSource::getPrim(*(realityio::mtlx::USDDataSource **)(a1 + 8), *(_DWORD *)(a2 + 8), (uint64_t)v7);
  if (realityio::TextureBuilder::isMtlxImageShader((realityio::TextureBuilder *)v7, v3))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v7, &v6);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4, &v6, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return 1;
}

void sub_23F561788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a13);
  if (a12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, void *a2, _DWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v12, a2);
  unsigned int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unsigned int v6 = (uint64_t *)operator new(0x28uLL);
    v10[1] = a1 + 1;
    uint64_t v8 = *a3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 7, v8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, v8 + 1);
    *((_DWORD *)v6 + 9) = 0;
    char v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::CycleState>,0>((uint64_t)v1 + 28);
    }
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::CycleState>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::deque<realityio::mtlx::NeoShadeConnectable>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    unsigned int v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      std::string v42 = &v39[8 * v41];
      std::string v43 = (uint64_t *)a1[1];
      unsigned int v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        unsigned int v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    char v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    unsigned int v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  long long v20 = (char *)a1[2];
  long long v19 = (char *)a1[3];
  uint64_t v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    int v25 = operator new(0x1000uLL);
    int v26 = v25;
    if (v19 != v20)
    {
      *(void *)long long v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v49);
      uint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v53 = (uint64_t *)a1[1];
      uint64_t v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        uint64_t v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        uint64_t v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)uint64_t v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      uint64_t v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    unsigned int v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)unsigned int v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      std::string v42 = &v39[8 * v83];
      unint64_t v84 = (uint64_t *)a1[1];
      unsigned int v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        unsigned int v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        unint64_t v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)unint64_t v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      std::string v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        unsigned int v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v28);
  uint64_t v31 = v30;
  int v32 = operator new(0x1000uLL);
  uint64_t v33 = &v29[8 * v23];
  unint64_t v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v61);
      uint64_t v33 = &v62[8 * (v61 >> 2)];
      unint64_t v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      uint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)uint64_t v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v70);
        size_t v73 = v71;
        uint64_t v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          std::string::size_type v77 = v33;
          uint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)std::string::size_type v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        unint64_t v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        uint64_t v33 = &v29[8 * (v67 >> 1)];
        std::string v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          std::string v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  int v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_23F561DC0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>(uint64_t **a1, void *a2, _DWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v12, a2);
  unsigned int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unsigned int v6 = (uint64_t *)operator new(0x28uLL);
    v10[1] = a1 + 1;
    uint64_t v8 = *a3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 7, v8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, v8 + 1);
    *((_DWORD *)v6 + 9) = 0;
    char v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  return v6;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::CycleState>,0>((uint64_t)a1 + 28);
    operator delete(a1);
  }
}

uint64_t std::deque<realityio::mtlx::NeoShadeConnectable>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 256;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage()
{
  {
    realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::NodeStorage();
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    unint64_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_23F562108(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    std::vector<int>::size_type v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)std::vector<int>::size_type v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      std::vector<int>::size_type v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        std::vector<int>::size_type v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    std::vector<int>::size_type v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    std::vector<int>::size_type v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      std::string v48 = (uint64_t *)a1[1];
      std::vector<int>::size_type v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        std::vector<int>::size_type v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      std::string v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        std::vector<int>::size_type v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23F562434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(a1[4], v16);
      long long v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v17;
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v16;
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v5;
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::NodeStorage()
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  byte_268C403B8 = 0;
  qword_268C403C0 = 0;
  return result;
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v6 = (void **)(v2 + 24);
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((void *)v10 + 2) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = a1 + 2;
  uint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  *((void *)v10 + 2) = *(void *)a3;
  *(_OWORD *)(v10 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_OWORD *)(a3 + 8);
  *((void *)v10 + 5) = *(void *)(a3 + 24);
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = a1[1];
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          uint64_t v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          unint64_t v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            uint64_t v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *unint64_t v22 = *v28;
                  *uint64_t v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v29) = v28;
                  uint64_t v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                unint64_t v22 = v28;
                uint64_t v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v30 = *a1;
  long long v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    *(void *)uint64_t v10 = *v31;
LABEL_72:
    *long long v31 = v10;
    goto LABEL_73;
  }
  *(void *)uint64_t v10 = *v12;
  *unint64_t v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v32 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    long long v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_23F562EA4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    unint64_t v3 = __p + 3;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*,realityio::TexcoordID*,realityio::TexcoordID*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      realityio::TexcoordID::TexcoordID(v4, v6);
      v6 += 48;
      uint64_t v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23F562F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; v4 != i; v4 -= 48)
    {
      if (*(char *)(v4 - 9) < 0) {
        operator delete(*(void **)(v4 - 32));
      }
      uint64_t v6 = *(void *)(v4 - 40);
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,realityio::TexcoordID *,realityio::TexcoordID *,realityio::TexcoordID *,0>(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = a3;
      *(unsigned char *)a3 = *v4;
      *(_DWORD *)(a3 + 4) = *((_DWORD *)v4 + 1);
      pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(a3 + 8), (void *)v4 + 1);
      uint64_t v6 = (const std::string *)(v4 + 16);
      std::string::operator=((std::string *)(v5 + 16), v6);
      *(unsigned char *)(v5 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = v6[1].__r_.__value_.__s.__data_[0];
      uint64_t v4 = &v6[1].__r_.__value_.__s.__data_[8];
      a3 = v5 + 48;
    }
    while (v4 != a2);
    return v5 + 48;
  }
  return a3;
}

uint64_t *std::set<unsigned long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F5630F4(_Unwind_Exception *a1)
{
  std::__tree<unsigned int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint8x8_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint8x8_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__find_equal<std::shared_ptr<RIO_MTLX::Element const>>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint8x8_t v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x70uLL);
  *(void *)uint64_t v2 = &unk_26F3343D0;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 8pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 88);
  *((void *)v2 + 13) = *(void *)(a1 + 104);
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = result;
  return result;
}

__n128 std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3343D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v3;
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 104) = *(void *)(a1 + 104);
  *(_OWORD *)(a2 + 8pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

void std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::target_type()
{
}

void realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0::operator()(uint64_t a1)
{
  uint64_t v226 = *MEMORY[0x263EF8340];
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t v188 = a1;
  id v3 = [**(id **)(a1 + 24) name];
  [v3 UTF8String];
  __p[0] = (void *)REAssetManagerShaderGraphMemoryAssetCreate();
  realityio::WrappedRERef<REAsset *>::operator=((void *)(*(void *)(a1 + 8) + 8), (uint64_t *)__p);

  if (*(void *)(*(void *)(a1 + 8) + 8))
  {
    RERelease();
    id v4 = **(id **)(a1 + 32);
    uint64_t v5 = [v4 lightingModel];
    if (v5 == 1)
    {
      [v4 blending];
    }
    else if (v5 == 2 || v5 == 3)
    {
      [v4 blending];
    }

    uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
    if (AssetHandle) {
      RERetain();
    }
    (*(void (**)(void, uint64_t *))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), &AssetHandle);
    uint64_t v200 = REMaterialAssetBuilderCreate();
    if (v200) {
      RERetain();
    }
    RERelease();
    (*(void (**)(void **__return_ptr))(***(void ***)(a1 + 48) + 16))(__p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    REMaterialAssetBuilderSetName();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    if ([**(id **)(a1 + 32) hasSurfaceShaderUniforms]) {
      REMaterialAssetBuilderSetFunctionConstant();
    }
    if ([**(id **)(a1 + 32) hasGeometryModifierUniforms]) {
      REMaterialAssetBuilderSetFunctionConstant();
    }
    if ([**(id **)(a1 + 32) hasPremultipliedAlpha]) {
      REMaterialAssetBuilderSetFunctionConstant();
    }
    if ([**(id **)(a1 + 32) hasBackgroundBlur]) {
      REMaterialAssetBuilderSetNeedsVCABlur();
    }
    if ((objc_opt_respondsToSelector() & 1) != 0 && [**(id **)(a1 + 32) matchUnlitColor]) {
      REMaterialAssetBuilderSetFunctionConstant();
    }
    uint64_t v7 = *(void *)(a1 + 48);
    id v8 = **(id **)(a1 + 56);
    long long v205 = 0u;
    long long v206 = 0u;
    long long v207 = 0u;
    long long v208 = 0u;
    obuint64_t j = v8;
    uint64_t v9 = [obj countByEnumeratingWithState:&v205 objects:v212 count:16];
    if (v9)
    {
      uint64_t v190 = *(void *)v206;
LABEL_28:
      uint64_t v10 = 0;
      while (2)
      {
        if (*(void *)v206 != v190) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v205 + 1) + 8 * v10);
        id v12 = [v11 name];
        MEMORY[0x2455CF810](__p, [v12 UTF8String]);
        (*(void (**)(void **__return_ptr))(**(void **)v7 + 144))(&v202);
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }

        id v13 = v11;
        uint64_t v215 = 0;
        (*(void (**)(void *, void, unint64_t *, unsigned char *))(*(void *)v202 + 56))(v202, v203, &v204, v214);
        std::string::basic_string[abi:ne180100]<0>(&v210, "$1.");
        id v14 = [v13 name];
        std::string::append(&v210, (const std::string::value_type *)[v14 UTF8String]);

        char v209 = 1;
        switch([v13 type])
        {
          case 2:
          case 6:
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
            {
              pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
            }
            else
            {
              Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C260], v36))
              {
                unint64_t v37 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v37);
                pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                char v209 = 0;
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
              }
              else
              {
                char v209 = 1;
              }
            }
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetUInt();
            goto LABEL_198;
          case 3:
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
            {
              pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
            }
            else
            {
              uint64_t v49 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(v49, MEMORY[0x263F8C258], v50))
              {
                uint64_t v51 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v51);
                pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                char v209 = 0;
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
              }
              else
              {
                char v209 = 1;
              }
            }
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetInt();
            goto LABEL_198;
          case 4:
          case 5:
          case 8:
          case 10:
          case 16:
          case 19:
          case 23:
          case 27:
          case 34:
          case 37:
          case 40:
          case 43:
          case 46:
          case 48:
          case 51:
            __break(1u);
            return;
          case 7:
          case 9:
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
            {
              pxrInternal__aapl__pxrReserved__::VtValue::Get<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
            }
            else
            {
              unint64_t v38 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(v38, MEMORY[0x263F8C248], v39))
              {
                uint64_t v40 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v40);
                pxrInternal__aapl__pxrReserved__::VtValue::Get<float>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                char v209 = 0;
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
              }
              else
              {
                char v209 = 1;
              }
            }
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetFloat();
            goto LABEL_198;
          case 11:
          case 12:
          case 13:
            goto LABEL_201;
          case 14:
            if (!v215) {
              goto LABEL_179;
            }
            __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
            {
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
              {
                unint64_t v29 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                *(_OWORD *)std::string __p = *v29;
                *(_OWORD *)&__p[2] = v29[1];
                char v209 = 0;
              }
              else
              {
                std::string::size_type v77 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                uint64_t v79 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                uint64_t v80 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)v79);
                int v81 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(v80);
                *(_OWORD *)std::string __p = *v81;
                *(_OWORD *)&__p[2] = v81[1];
                char v209 = 0;
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
              }
              uint64_t v82 = 0;
              uint64_t v84 = *MEMORY[0x263EF8998];
              uint64_t v83 = *(void *)(MEMORY[0x263EF8998] + 8);
              char v85 = 1;
              do
              {
                char v86 = v85;
                unint64_t v87 = (double *)&__p[2 * v82];
                float v88 = *v87;
                uint64_t v195 = v84;
                *(float *)((unint64_t)&v195 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v82 & 1))) = v88;
                uint64_t v84 = v195;
                float v89 = v87[1];
                uint64_t v196 = v83;
                *(float *)((unint64_t)&v196 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v82 & 1))) = v89;
                uint64_t v83 = v196;
                uint64_t v82 = 1;
                char v85 = 0;
              }
              while ((v86 & 1) != 0);
            }
            else
            {
              __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              uint64_t IsA = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
              if (IsA)
              {
                if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
                {
                  *(_OWORD *)std::string __p = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  char v209 = 0;
                }
                else
                {
                  uint64_t v122 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  {
LABEL_178:
                    char v209 = 1;
                    goto LABEL_179;
                  }
                  std::string::size_type v124 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  char v125 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)v124);
                  *(_OWORD *)std::string __p = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(v125);
                  char v209 = 0;
                  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
                }
                uint64_t v126 = 0;
                uint64_t v128 = *MEMORY[0x263EF8998];
                uint64_t v127 = *(void *)(MEMORY[0x263EF8998] + 8);
                char v129 = 1;
                do
                {
                  char v130 = v129;
                  int v131 = &__p[v126];
                  int v132 = *(_DWORD *)v131;
                  uint64_t v197 = v128;
                  *(_DWORD *)((unint64_t)&v197 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v126 & 1))) = v132;
                  uint64_t v128 = v197;
                  int v133 = *((_DWORD *)v131 + 1);
                  uint64_t v198 = v127;
                  *(_DWORD *)((unint64_t)&v198 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v126 & 1))) = v133;
                  uint64_t v127 = v198;
                  uint64_t v126 = 1;
                  char v129 = 0;
                }
                while ((v130 & 1) != 0);
              }
              else
              {
                char v116 = *(id *)(realityio::logObjects(IsA) + 48);
                if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
                {
                  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  int v117 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)std::string buf = 136315138;
                  *(void *)&uint8_t buf[4] = v117;
                  _os_log_impl(&dword_23F4EA000, v116, OS_LOG_TYPE_INFO, "Could not convert a value of type '%s' for type SGDataTypeMatrix2f to a SIMD value. Substituting identity matrix.", buf, 0xCu);
                  if (SHIBYTE(__p[2]) < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
            }
LABEL_179:
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetFloat2x2();
            goto LABEL_198;
          case 15:
            if (!v215) {
              goto LABEL_188;
            }
            __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
            {
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
              {
                uint64_t v31 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                *(_OWORD *)&__p[2] = *(_OWORD *)(v31 + 16);
                long long v217 = *(_OWORD *)(v31 + 32);
                long long v218 = *(_OWORD *)(v31 + 48);
                *(void *)&long long v219 = *(void *)(v31 + 64);
                *(_OWORD *)std::string __p = *(_OWORD *)v31;
                char v209 = 0;
              }
              else
              {
                uint64_t v90 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                uint64_t v92 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                uint64_t v93 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)v92);
                uint64_t v94 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(v93);
                *(_OWORD *)&__p[2] = *(_OWORD *)(v94 + 16);
                long long v217 = *(_OWORD *)(v94 + 32);
                long long v218 = *(_OWORD *)(v94 + 48);
                *(void *)&long long v219 = *(void *)(v94 + 64);
                *(_OWORD *)std::string __p = *(_OWORD *)v94;
                char v209 = 0;
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
              }
              uint64_t v95 = 0;
              memset(buf, 0, sizeof(buf));
              long long v224 = 0u;
              long long v96 = *MEMORY[0x263EF89A0];
              long long v97 = *(_OWORD *)(MEMORY[0x263EF89A0] + 16);
              long long v98 = *(_OWORD *)(MEMORY[0x263EF89A0] + 32);
              *(_DWORD *)&uint8_t buf[8] = *(void *)(MEMORY[0x263EF89A0] + 8);
              *(_DWORD *)&unsigned char buf[24] = DWORD2(v97);
              *(void *)std::string buf = v96;
              *(void *)&uint8_t buf[16] = v97;
              DWORD2(v2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = DWORD2(v98);
              long long v99 = __p;
              *(void *)&long long v224 = v98;
              do
              {
                uint64_t v100 = 0;
                long long v101 = (double *)v99;
                do
                {
                  double v102 = *v101++;
                  float v103 = v102;
                  *(float *)&buf[4 * v95 + v100] = v103;
                  v100 += 16;
                }
                while (v100 != 48);
                ++v95;
                v99 += 3;
              }
              while (v95 != 3);
            }
            else
            {
              __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              uint64_t v72 = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
              if (v72)
              {
                if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
                {
                  uint64_t v73 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  *(_OWORD *)std::string buf = *(_OWORD *)v73;
                  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(v73 + 16);
                  LODWORD(v2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_DWORD *)(v73 + 32);
                  char v209 = 0;
                }
                else
                {
                  char v134 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  {
LABEL_187:
                    char v209 = 1;
                    goto LABEL_188;
                  }
                  uint64_t v136 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v136);
                  uint64_t v137 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                  *(_OWORD *)std::string buf = *(_OWORD *)v137;
                  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(v137 + 16);
                  LODWORD(v2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_DWORD *)(v137 + 32);
                  char v209 = 0;
                  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                }
                uint64_t v138 = 0;
                memset(__p, 0, sizeof(__p));
                long long v217 = 0u;
                long long v139 = *MEMORY[0x263EF89A0];
                long long v140 = *(_OWORD *)(MEMORY[0x263EF89A0] + 16);
                long long v141 = *(_OWORD *)(MEMORY[0x263EF89A0] + 32);
                LODWORD(__p[1]) = *(void *)(MEMORY[0x263EF89A0] + 8);
                LODWORD(__p[3]) = DWORD2(v140);
                __p[0] = (void *)v139;
                __p[2] = (void *)v140;
                DWORD2(v217) = DWORD2(v141);
                long long v142 = buf;
                *(void *)&long long v217 = v141;
                do
                {
                  uint64_t v143 = 0;
                  uint64_t v144 = v142;
                  do
                  {
                    int v145 = *(_DWORD *)v144;
                    v144 += 4;
                    *((_DWORD *)&__p[v143] + v13pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v145;
                    v143 += 2;
                  }
                  while (v143 != 6);
                  ++v138;
                  v142 += 12;
                }
                while (v138 != 3);
              }
              else
              {
                std::string v118 = *(id *)(realityio::logObjects(v72) + 48);
                if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
                {
                  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  int v119 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)std::string buf = 136315138;
                  *(void *)&uint8_t buf[4] = v119;
                  _os_log_impl(&dword_23F4EA000, v118, OS_LOG_TYPE_INFO, "Could not convert a value of type '%s' for type SGDataTypeMatrix3f to a SIMD value. Substituting identity matrix.", buf, 0xCu);
                  if (SHIBYTE(__p[2]) < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
            }
LABEL_188:
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetFloat3x3();
            goto LABEL_198;
          case 17:
            if (!v215) {
              goto LABEL_197;
            }
            __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
            {
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
              {
                unint64_t v33 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                long long v219 = v33[4];
                long long v220 = v33[5];
                long long v221 = v33[6];
                long long v222 = v33[7];
                *(_OWORD *)std::string __p = *v33;
                *(_OWORD *)&__p[2] = v33[1];
                long long v217 = v33[2];
                long long v218 = v33[3];
                char v209 = 0;
              }
              else
              {
                long long v104 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                long long v106 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                long long v107 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)v106);
                uint64_t v108 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v107);
                long long v219 = v108[4];
                long long v220 = v108[5];
                long long v221 = v108[6];
                long long v222 = v108[7];
                *(_OWORD *)std::string __p = *v108;
                *(_OWORD *)&__p[2] = v108[1];
                long long v217 = v108[2];
                long long v218 = v108[3];
                char v209 = 0;
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
              }
              uint64_t v109 = 0;
              long long v110 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
              long long v111 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
              long long v112 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
              *(_OWORD *)std::string buf = *MEMORY[0x263EF89A8];
              *(_OWORD *)&uint8_t buf[16] = v110;
              long long v224 = v111;
              long long v225 = v112;
              uint64_t v113 = __p;
              do
              {
                for (uint64_t i = 0; i != 4; ++i)
                {
                  float v115 = *(double *)&v113[i];
                  *(float *)&buf[16 * i + 4 * v109] = v115;
                }
                ++v109;
                v113 += 4;
              }
              while (v109 != 4);
            }
            else
            {
              __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              uint64_t v75 = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
              if (v75)
              {
                if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
                {
                  uint64_t v76 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  *(_OWORD *)std::string buf = *v76;
                  *(_OWORD *)&uint8_t buf[16] = v76[1];
                  long long v224 = v76[2];
                  long long v225 = v76[3];
                  char v209 = 0;
                }
                else
                {
                  id v146 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  {
LABEL_196:
                    char v209 = 1;
                    goto LABEL_197;
                  }
                  unint64_t v148 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v148);
                  int v149 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                  *(_OWORD *)std::string buf = *v149;
                  *(_OWORD *)&uint8_t buf[16] = v149[1];
                  long long v224 = v149[2];
                  long long v225 = v149[3];
                  char v209 = 0;
                  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                }
                uint64_t v150 = 0;
                long long v151 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
                long long v152 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
                long long v153 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
                *(_OWORD *)std::string __p = *MEMORY[0x263EF89A8];
                *(_OWORD *)&__p[2] = v151;
                long long v217 = v152;
                long long v218 = v153;
                long long v154 = buf;
                do
                {
                  for (uint64_t j = 0; j != 4; ++j)
                    *((_DWORD *)&__p[2 * j] + v15std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = *(_DWORD *)&v154[4 * j];
                  ++v150;
                  v154 += 16;
                }
                while (v150 != 4);
              }
              else
              {
                int v120 = *(id *)(realityio::logObjects(v75) + 48);
                if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
                {
                  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                  uint64_t v121 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)std::string buf = 136315138;
                  *(void *)&uint8_t buf[4] = v121;
                  _os_log_impl(&dword_23F4EA000, v120, OS_LOG_TYPE_INFO, "Could not convert a value of type '%s' for type SGDataTypeMatrix4f to a SIMD value. Substituting identity matrix.", buf, 0xCu);
                  if (SHIBYTE(__p[2]) < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
            }
LABEL_197:
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetFloat4x4();
LABEL_198:
            if (v209)
            {
              double v156 = *(id *)(realityio::logObjects(v15) + 48);
              if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
              {
                pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                if (SHIBYTE(__p[2]) >= 0) {
                  int v157 = __p;
                }
                else {
                  int v157 = (void **)__p[0];
                }
                uint64_t v158 = &v210;
                if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v158 = (std::string *)v210.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string buf = 136315394;
                *(void *)&uint8_t buf[4] = v157;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v158;
                _os_log_error_impl(&dword_23F4EA000, v156, OS_LOG_TYPE_ERROR, "Value type '%s' for input '%s' is not valid. Using placeholder value.", buf, 0x16u);
                if (SHIBYTE(__p[2]) < 0) {
                  operator delete(__p[0]);
                }
              }
            }
LABEL_201:
            if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v210.__r_.__value_.__l.__data_);
            }
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v214);

            if ((v204 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v204 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (++v10 != v9) {
              continue;
            }
            uint64_t v159 = [obj countByEnumeratingWithState:&v205 objects:v212 count:16];
            uint64_t v9 = v159;
            if (!v159) {
              goto LABEL_215;
            }
            goto LABEL_28;
          case 18:
          case 20:
          case 29:
          case 30:
            _ZN9realityio12_GLOBAL__N_112toSimdVectorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEET0_RNS2_7VtValueERb((pxrInternal__aapl__pxrReserved__::VtValue *)v214, &v209);
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetFloat4();
            goto LABEL_198;
          case 21:
          case 22:
          case 47:
          case 49:
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
            {
              *(void *)std::string buf = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
            }
            else
            {
              uint64_t v20 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              {
                char v209 = 1;
                goto LABEL_88;
              }
              unint64_t v22 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v22);
              *(void *)std::string buf = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
            }
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            char v25 = 1;
            do
            {
              char v26 = v25;
              int v27 = *(_DWORD *)&buf[4 * v23];
              uint64_t v192 = v24;
              *(_DWORD *)((unint64_t)&v192 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v23 & 1))) = v27;
              uint64_t v24 = v192;
              uint64_t v23 = 1;
              char v25 = 0;
            }
            while ((v26 & 1) != 0);
LABEL_88:
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetFloat2();
            goto LABEL_198;
          case 24:
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
            {
              *(void *)std::string buf = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
            }
            else
            {
              uint64_t v41 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              {
                char v209 = 1;
                goto LABEL_124;
              }
              std::string v43 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v43);
              *(void *)std::string buf = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
            }
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v46 = 1;
            do
            {
              char v47 = v46;
              int v48 = *(_DWORD *)&buf[4 * v44];
              uint64_t v191 = v45;
              *(_DWORD *)((unint64_t)&v191 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v44 & 1))) = v48;
              uint64_t v45 = v191;
              uint64_t v44 = 1;
              char v46 = 0;
            }
            while ((v47 & 1) != 0);
LABEL_124:
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetInt2();
            goto LABEL_198;
          case 25:
          case 26:
          case 32:
          case 33:
          case 35:
          case 36:
          case 38:
          case 39:
          case 50:
          case 52:
            _ZN9realityio12_GLOBAL__N_112toSimdVectorIN32pxrInternal__aapl__pxrReserved__7GfVec3fEDv3_fEET0_RNS2_7VtValueERb((pxrInternal__aapl__pxrReserved__::VtValue *)v214, &v209);
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetFloat3();
            goto LABEL_198;
          case 28:
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
            {
              uint64_t v34 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              *(void *)std::string buf = *(void *)v34;
              *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v34 + 8);
              char v209 = 0;
            }
            else
            {
              long long v55 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              {
                char v209 = 1;
                goto LABEL_130;
              }
              uint64_t v57 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v57);
              uint64_t v58 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              *(void *)std::string buf = *(void *)v58;
              *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v58 + 8);
              char v209 = 0;
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
            }
            uint64_t v59 = 0;
            long long v60 = 0uLL;
            do
            {
              int v61 = *(_DWORD *)&buf[4 * v59];
              long long v193 = v60;
              *(_DWORD *)((unint64_t)&v193 & 0xFFFFFFFFFFFFFFF3 | (4 * (v59 & 3))) = v61;
              long long v62 = v193;
              HIDWORD(v62) = HIDWORD(v60);
              ++v59;
              long long v60 = v62;
            }
            while (v59 != 3);
LABEL_130:
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetInt3();
            goto LABEL_198;
          case 31:
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
            {
              *(_OWORD *)std::string __p = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
            }
            else
            {
              uint64_t v63 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              {
                char v209 = 1;
                goto LABEL_132;
              }
              unint64_t v65 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)v65);
              *(_OWORD *)std::string __p = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
            }
            uint64_t v66 = 0;
            long long v67 = 0uLL;
            do
            {
              int v68 = *((_DWORD *)__p + v66);
              long long v194 = v67;
              *(_DWORD *)((unint64_t)&v194 & 0xFFFFFFFFFFFFFFF3 | (4 * (v66 & 3))) = v68;
              long long v67 = v194;
              ++v66;
            }
            while (v66 != 4);
LABEL_132:
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetInt4();
            goto LABEL_198;
          case 41:
          case 42:
            *(double *)&long long v16 = _ZN9realityio12_GLOBAL__N_112toSimdVectorIN32pxrInternal__aapl__pxrReserved__7GfVec3fEDv3_fEET0_RNS2_7VtValueERb((pxrInternal__aapl__pxrReserved__::VtValue *)v214, &v209);
            if (v215)
            {
              __p[0] = v202;
              LODWORD(__p[1]) = v203;
              __p[2] = (void *)v204;
              if ((v204 & 7) != 0)
              {
                unint64_t v17 = (void *)(v204 & 0xFFFFFFFFFFFFFFF8);
                if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v204 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)__p[2] = v17; {
              }
                }
              char v211 = 0;
              HIDWORD(vpxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0;
              *(_OWORD *)std::string buf = v16;
              (*(void (**)(void *, uint8_t *, char *, void **))(*(void *)__p[0] + 216))(__p[0], buf, &v211, __p);
              if (((uint64_t)__p[2] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetColor3F();
            goto LABEL_198;
          case 44:
          case 45:
            *(double *)&long long v18 = _ZN9realityio12_GLOBAL__N_112toSimdVectorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEET0_RNS2_7VtValueERb((pxrInternal__aapl__pxrReserved__::VtValue *)v214, &v209);
            if (v215)
            {
              __p[0] = v202;
              LODWORD(__p[1]) = v203;
              __p[2] = (void *)v204;
              if ((v204 & 7) != 0)
              {
                uint64_t v19 = (void *)(v204 & 0xFFFFFFFFFFFFFFF8);
                if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v204 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)__p[2] = v19; {
              }
                }
              char v211 = 0;
              *(_OWORD *)std::string buf = v18;
              (*(void (**)(void *, uint8_t *, char *, void **))(*(void *)__p[0] + 216))(__p[0], buf, &v211, __p);
              if (((uint64_t)__p[2] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetColor4F();
            goto LABEL_198;
          default:
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v214))
            {
              pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              char v209 = 0;
            }
            else
            {
              uint64_t v52 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
              if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(v52, MEMORY[0x263F8C230], v53))
              {
                long long v54 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v214);
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v54);
                pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                char v209 = 0;
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
              }
              else
              {
                char v209 = 1;
              }
            }
            BOOL v15 = (realityio *)REMaterialAssetBuilderSetBool();
            goto LABEL_198;
        }
      }
    }
LABEL_215:

    uint64_t v160 = REMaterialCreateDefaultSamplerDescriptor();
    REMaterialAssetBuilderSetSampler();

    uint64_t v199 = v200;
    if (v200) {
      RERetain();
    }
    for (k = *(uint64_t **)(*(void *)(a1 + 64) + 16); k; k = (uint64_t *)*k)
    {
      double v162 = (void *)k[3];
      if (v162)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v162 UTF8String]);
        if (SHIBYTE(__p[2]) >= 0) {
          int v163 = __p;
        }
        else {
          int v163 = (void **)__p[0];
        }
        objc_msgSend(NSString, "stringWithFormat:", @"$1.%s", v163);
        id v164 = objc_claimAutoreleasedReturnValue();
        std::string::basic_string[abi:ne180100]<0>(v212, (char *)[v164 UTF8String]);

        if (*((unsigned char *)k + 40) && k[4])
        {
          REMaterialAssetBuilderSetTextureFromAsset();
          REMaterialAssetBuilderBindTextureToSampler();
        }
        else
        {
          REMaterialAssetBuilderSetTextureFromBinding();
        }
        if (v213 < 0) {
          operator delete(v212[0]);
        }
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        int v165 = *(id *)(realityio::logObjects(0) + 48);
        if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(k + 2));
          if (*(char *)(String + 23) >= 0) {
            int v167 = (void *)String;
          }
          else {
            int v167 = *(void **)String;
          }
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v167;
          _os_log_impl(&dword_23F4EA000, v165, OS_LOG_TYPE_DEFAULT, "Error: ShaderGraphKey not found for %s.", (uint8_t *)__p, 0xCu);
        }
      }
    }
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&v199);
    REMaterialAssetBuilderSetMaterialDefinition();
    v212[0] = (void *)0x200000001;
    *(void *)std::string buf = REAssetManagerCreateAssetHandle();
    if (*(void *)buf) {
      RERetain();
    }
    RERelease();
    uint64_t v168 = [**(id **)(v188 + 32) surfaceShaderFunctionName];
    if (!v168)
    {
      int v169 = *(id *)(realityio::logObjects(0) + 48);
      if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_23F4EA000, v169, OS_LOG_TYPE_DEFAULT, "The surface shader hasn't been built.", (uint8_t *)__p, 2u);
      }

      uint64_t v168 = @"surfaceShader";
    }
    long long v170 = v168;
    [(__CFString *)v170 UTF8String];
    REMaterialAssetBuilderAddFunctionLink();
    long long v171 = [**(id **)(v188 + 32) geometryModifierFunctionName];
    if (!v171) {
      long long v171 = @"geometryModifier";
    }
    *(void *)&long long v205 = 0x800000004;
    float v172 = v171;
    [(__CFString *)v172 UTF8String];
    int v173 = (realityio *)REMaterialAssetBuilderAddFunctionLink();
    if (**(int **)(v188 + 72) >= 1) {
      int v173 = (realityio *)REMaterialAssetBuilderSetFunctionConstant();
    }
    if (**(int **)(v188 + 80) <= 1 && **(int **)(v188 + 72) <= 0)
    {
      uint64_t v174 = *(void *)(v188 + 88);
      if (*(char *)(v174 + 95) < 0)
      {
        if (!*(void *)(v174 + 80)) {
          goto LABEL_250;
        }
      }
      else if (!*(unsigned char *)(v174 + 95))
      {
        goto LABEL_250;
      }
    }
    int v173 = (realityio *)REMaterialAssetBuilderSetFunctionConstant();
    uint64_t v174 = *(void *)(v188 + 88);
LABEL_250:
    uint64_t v175 = 0;
    while (1)
    {
      uint64_t v176 = v174 + v175;
      if (*(char *)(v174 + v175 + 47) < 0)
      {
        if (*(void *)(v176 + 32))
        {
LABEL_255:
          uint64_t v177 = *(id *)(realityio::logObjects(v173) + 48);
          if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
          {
            long long v178 = (void *)(v174 + v175);
            if (*(char *)(v174 + v175 + 23) < 0) {
              long long v178 = *(void **)v176;
            }
            float v179 = (void *)(v176 + 24);
            if (*(char *)(v176 + 47) < 0) {
              float v179 = *(void **)(v176 + 24);
            }
            LODWORD(__p[0]) = 136315394;
            *(void **)((char *)__p + 4) = v178;
            WORD2(__p[1]) = 2080;
            *(void **)((char *)&__p[1] + 6) = v179;
            _os_log_impl(&dword_23F4EA000, v177, OS_LOG_TYPE_INFO, "key: %s, binding: %s", (uint8_t *)__p, 0x16u);
          }

          int v173 = (realityio *)REMaterialAssetBuilderSetBufferFromBinding();
        }
      }
      else if (*(unsigned char *)(v174 + v175 + 47))
      {
        goto LABEL_255;
      }
      v175 += 48;
      if (v175 == 384)
      {
        uint64_t v180 = *(void *)(v188 + 96);
        if (!*(unsigned char *)(v180 + 8) && !*(unsigned char *)(v180 + 9)) {
          REMaterialAssetBuilderSetMTLCullMode();
        }
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        uint64_t v181 = (void *)REAssetManagerMaterialAssetBuilderBuild();
        __p[0] = v181;
        if (v181) {
          RERetain();
        }
        int v182 = *(void ***)(v188 + 8);
        float v183 = *v182;
        if (*v182 != v181)
        {
          *int v182 = v181;
          __p[0] = v183;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(__p);
        (*(void (**)(void, void))(**(void **)(v188 + 40) + 32))(*(void *)(v188 + 40), *(void *)(v188 + 8));
        int v184 = **(realityio ***)(v188 + 8);
        if (v184) {
          int v184 = (realityio *)RERelease();
        }
        uint64_t v185 = *(id *)(realityio::logObjects(v184) + 48);
        if (os_log_type_enabled(v185, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_23F4EA000, v185, OS_LOG_TYPE_INFO, "Done.", (uint8_t *)__p, 2u);
        }

        realityio::WrappedRERef<REAsset *>::~WrappedRERef(buf);
        realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&v200);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&AssetHandle);
        return;
      }
    }
  }
  long long v6 = *(id *)(realityio::logObjects(0) + 48);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v186 = [**(id **)(a1 + 24) name];
    uint64_t v187 = (void *)[v186 UTF8String];
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v187;
    _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Error creating ShaderGraph asset for node \"%s\"", (uint8_t *)__p, 0xCu);
  }
}

void sub_23F56525C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v43 - 192));
  realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&a42);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a43);
  _Unwind_Resume(a1);
}

double _ZN9realityio12_GLOBAL__N_112toSimdVectorIN32pxrInternal__aapl__pxrReserved__7GfVec3fEDv3_fEET0_RNS2_7VtValueERb(pxrInternal__aapl__pxrReserved__::VtValue *a1, unsigned char *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1))
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1);
    uint64_t v15 = *(void *)v4;
    int v16 = *(_DWORD *)(v4 + 8);
    *a2 = 0;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    {
      *a2 = 1;
      return 0.0;
    }
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1);
    uint64_t v15 = *(void *)v8;
    int v16 = *(_DWORD *)(v8 + 8);
    *a2 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  }
  uint64_t v9 = 0;
  long long v10 = 0uLL;
  do
  {
    int v11 = *((_DWORD *)&v15 + v9);
    *(_OWORD *)id v14 = v10;
    *(_DWORD *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) = v11;
    double result = v14[0];
    long long v13 = *(_OWORD *)v14;
    HIDWORD(v13) = HIDWORD(v10);
    ++v9;
    long long v10 = v13;
  }
  while (v9 != 3);
  return result;
}

void sub_23F5656FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double _ZN9realityio12_GLOBAL__N_112toSimdVectorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEET0_RNS2_7VtValueERb(pxrInternal__aapl__pxrReserved__::VtValue *a1, unsigned char *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1))
  {
    long long v12 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1);
    *a2 = 0;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    {
      *a2 = 1;
      *(void *)&long long v8 = 0;
      return *(double *)&v8;
    }
    long long v6 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    long long v12 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1);
    *a2 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  }
  uint64_t v7 = 0;
  long long v8 = 0uLL;
  do
  {
    int v9 = *(_DWORD *)&v13[4 * v7 - 8];
    long long v11 = v8;
    *(_DWORD *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3))) = v9;
    long long v8 = v11;
    ++v7;
  }
  while (v7 != 4);
  return *(double *)&v8;
}

void sub_23F565808(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<BOOL>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C230], v1, v2);
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 5) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C258]);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C258], v1, v2);
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<int>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<int>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 6) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C260]);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C260], v1, v2);
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned int>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned int>(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 63) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 62) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 68) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 61) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 78) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 75) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 77) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 74) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 76) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 73) {
    return 1;
  }
  if ((v1 & 4) != 0) {
  else
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t realityio::SkeletonPoseDefinitionBuilder::kOutputName(realityio::SkeletonPoseDefinitionBuilder *this)
{
  {
    operator new();
  }
  return realityio::SkeletonPoseDefinitionBuilder::kOutputName(void)::kOutputName;
}

void sub_23F566A28(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName(realityio::SkeletonPoseDefinitionBuilder *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C403D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C403D0))
  {
    operator new();
  }
  return _MergedGlobals_6;
}

void sub_23F566AE0(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C403D0);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(realityio::SkeletonPoseDefinitionBuilder *this)
{
  {
    operator new();
  }
  return realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(void)::kOutputName;
}

void sub_23F566B98(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::SkeletonPoseDefinitionBuilder *realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(realityio::SkeletonPoseDefinitionBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  void v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "SkeletonPoseDefinitionBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSkeletonPoseDefinitionBuilderIdentifier);
  realityio::generateSkeletonDirtyStageSubscription(&v5);
  v12[0] = &unk_26F334558;
  void v12[3] = v12;
  v11[0] = &unk_26F334788;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F3344E0;
  *((void *)this + 35) = 0;
  return this;
}

void sub_23F566D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletonPoseDefinitionBuilder::run(realityio::SkeletonPoseDefinitionBuilder *this, realityio::Inputs *a2)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(id *)(realityio::logObjects(this) + 24);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_INFO, "Creating skeleton pose definition", buf, 2u);
  }

  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  PrimAtPath = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v52, v5, (realityio::Inputs *)((char *)a2 + 32));
  uint64_t v7 = (void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v7) {
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v7);
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(PrimAtPath);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
  {
    realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v51, 2030, (uint64_t)this);
    std::string::basic_string[abi:ne180100]<0>(buf, "SkeletalAnimationViaRelationship");
    realityio::Inputs::_getValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>((uint64_t)v47, (uint64_t)a2, (uint64_t)buf);
    if (SHIBYTE(v63) < 0) {
      operator delete(*(void **)buf);
    }
    if (!v47[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&v81, "SkeletalAnimationViaChildren");
      realityio::Inputs::_getValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>((uint64_t)buf, (uint64_t)a2, (uint64_t)&v81);
      if (buf[0])
      {
        if (SHIBYTE(v50) < 0) {
          operator delete((void *)__p);
        }
        v47[0] = 1;
        *(void *)&long long v48 = v63;
      }
      else
      {
        long long v48 = v63;
        if (SHIBYTE(v50) < 0) {
          operator delete((void *)__p);
        }
        long long __p = v64;
        uint64_t v50 = v65;
      }
      if ((v82[7] & 0x80000000) != 0) {
        operator delete((void *)v81);
      }
    }
    uint64_t v9 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v8);
    realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>((uint64_t)a2, v9, (uint64_t)v44);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v43[0] = MEMORY[0x263F90708] + 16;
    BOOL v74 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    int v68 = 0;
    std::string v69 = 0;
    uint64_t v70 = 0;
    MEMORY[0x2455CE910](v66);
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v66, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v43);
    if (!*(void *)buf)
    {
      uint64_t v34 = 0;
LABEL_51:
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64 + 8);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((atomic_uint **)&v63);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr((atomic_uint **)buf);
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      if (v68)
      {
        std::string v69 = v68;
        operator delete(v68);
      }
      if (v71)
      {
        uint64_t v72 = v71;
        operator delete(v71);
      }
      if (v74)
      {
        uint64_t v75 = v74;
        operator delete(v74);
      }
      if (v34)
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v43, &v81);
        operator new();
      }
      MEMORY[0x2455CEDD0](v43);
      if (!v44[0] && v46 < 0) {
        operator delete(v45);
      }
      if (!v47[0] && SHIBYTE(v50) < 0) {
        operator delete((void *)__p);
      }
      realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v51);
      goto LABEL_68;
    }
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder(v61, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)buf);
    unint64_t v10 = v61[0];
    std::vector<char const*>::resize((uint64_t)&v74, v61[0]);
    if (v61[0])
    {
      long long v11 = (void *)v61[4];
      long long v12 = (const char **)v74;
      for (uint64_t i = 8 * v61[0]; i; i -= 8)
      {
        unint64_t v14 = *v11 & 0xFFFFFFFFFFFFFFF8;
        if (v14)
        {
          int v15 = *(char *)(v14 + 39);
          if (v15 < 0)
          {
            unint64_t v17 = v14 + 16;
            int v16 = *(const char **)(v14 + 16);
            if (*(void *)(v17 + 8) > 1uLL)
            {
LABEL_27:
              if (*v16 == 47) {
                ++v16;
              }
            }
          }
          else
          {
            int v16 = (const char *)(v14 + 16);
            if (v15 >= 2u) {
              goto LABEL_27;
            }
          }
        }
        else
        {
          int v16 = "";
        }
        *v12++ = v16;
        ++v11;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(&v57, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v43);
    uint64_t v78 = 0;
    NumElements = (realityio *)pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    if (!NumElements
      || (NumElements = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v77),
          NumElements != (realityio *)v10)
      || (NumElements = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v77),
          !NumElements))
    {
      unint64_t v38 = *(id *)(realityio::logObjects(NumElements) + 24);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v43, &v80);
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v80);
        LODWORD(v81) = 136315138;
        *(void *)((char *)&v81 + 4) = Text;
        _os_log_error_impl(&dword_23F4EA000, v38, OS_LOG_TYPE_ERROR, "Skeleton at path (%s) does not have any rest transforms property.\n", (uint8_t *)&v81, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
      }

      uint64_t v34 = 0;
      goto LABEL_45;
    }
    std::vector<RESRT>::resize((uint64_t)&v71, v10);
    uint64_t v19 = (void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v77);
    if (*v19)
    {
      uint64_t v20 = v19[4];
      uint64_t v21 = v71;
      uint64_t v22 = *v19 << 7;
      __asm { FMOV            V0.4S, #1.0 }
      long long v42 = _Q0;
      do
      {
        MEMORY[0x2455CE5D0](&v81, v20);
        long long v80 = xmmword_23F7BDF00;
        long long v81 = v42;
        long long v79 = 0uLL;
        REDecomposeMatrix();
        long long v29 = v80;
        uint64_t v28 = v81;
        long long v30 = v79;
        v21[2] = DWORD2(v81);
        *(void *)uint64_t v21 = v28;
        *((_OWORD *)v21 + 1) = v29;
        v21[10] = DWORD2(v30);
        *((void *)v21 + 4) = v30;
        v20 += 128;
        v21 += 12;
        v22 -= 128;
      }
      while (v22);
    }
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr((uint64_t *)&v81, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v43);
    *((void *)&v80 + 1) = 0;
    uint64_t v31 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    if (v31
      && (uint64_t v31 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)&v80),
          v31 == (realityio *)v10)
      && (uint64_t v31 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v80),
          v31))
    {
      std::vector<simd_float4x4>::resize((uint64_t)&v68, v10);
      uint64_t v32 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v80);
      uint64_t v33 = RESkeletonDefinitionCreate();
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v43, &v79);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79);
      RESkeletonDefinitionSetName();
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79);
      RESkeletonDefinitionSetJointNames();
      RESkeletonDefinitionSetLocalRestPoses();
      RESkeletonDefinitionSetInverseBindPoses();
      uint64_t v34 = MEMORY[0x2455CDCD0](v33, 0);
      uint64_t v35 = (realityio *)RERelease();
      if (v34)
      {
LABEL_75:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v80);
        if ((v83 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v82);
        if (*((void *)&v81 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v81 + 1));
        }
LABEL_45:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v77);
        if ((v60 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
        if (v58) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v61);
        goto LABEL_51;
      }
      uint64_t v36 = *(id *)(realityio::logObjects(v35) + 24);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v43, &v56);
        uint64_t v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
        LODWORD(v79) = 136315138;
        *(void *)((char *)&v79 + 4) = v37;
        _os_log_impl(&dword_23F4EA000, v36, OS_LOG_TYPE_DEFAULT, "Could not create skeleton geom from definition for (Prim \"%s\")", (uint8_t *)&v79, 0xCu);
LABEL_80:
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
      }
    }
    else
    {
      uint64_t v36 = *(id *)(realityio::logObjects(v31) + 24);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v43, &v56);
        uint64_t v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
        LODWORD(v79) = 136315138;
        *(void *)((char *)&v79 + 4) = v41;
        _os_log_error_impl(&dword_23F4EA000, v36, OS_LOG_TYPE_ERROR, "Skeleton at path (%s) does not have any bind transforms property.\n", (uint8_t *)&v79, 0xCu);
        goto LABEL_80;
      }
    }

    uint64_t v34 = 0;
    goto LABEL_75;
  }
LABEL_68:
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  uint64_t result = v53;
  if (v53) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  }
  return result;
}

void sub_23F5677CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,int a42,__int16 a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a41);

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v67 - 176));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v67 - 160));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v67 - 208));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a43);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a47);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::~UsdSkelSkeletonQuery((atomic_uint **)&a52);
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a64);
  }
  if (__p)
  {
    a66 = (uint64_t)__p;
    operator delete(__p);
  }
  std::string v69 = *(void **)(v67 - 256);
  if (v69)
  {
    *(void *)(v67 - 24pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v69;
    operator delete(v69);
  }
  uint64_t v70 = *(void **)(v67 - 232);
  if (v70)
  {
    *(void *)(v67 - 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v70;
    operator delete(v70);
  }
  MEMORY[0x2455CEDD0](&a14);
  if (!a17 && a25 < 0) {
    operator delete(a20);
  }
  if (!a26 && a34 < 0) {
    operator delete(a29);
  }
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a35);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a37);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v7 = operator new(0x28uLL);
  v7[1] = 0;
  void v7[2] = 0;
  void *v7 = &unk_26F334808;
  uint64_t v8 = *a3;
  void v7[3] = &unk_26F334858;
  v7[4] = v8;
  long long v11 = a2;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  unint64_t v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F567B64(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::SkeletonPoseDefinitionBuilder::clear(realityio::SkeletonPoseDefinitionBuilder *this, realityio::Inputs *a2)
{
  id v3 = (void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v3) {
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v3);
  }
  uint64_t v5 = (std::mutex *)*((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(v5, v6, (uint64_t)v33);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (!v33[0]) {
    goto LABEL_43;
  }
  uint64_t v9 = *((void *)this + 2);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kOutputName(v7);
  std::mutex::lock((std::mutex *)(v9 + 64));
  if (v9 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v9 + 40, v10))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v9 + 40), v10); {
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v9, (unsigned __int8 *)v10);
  }
  std::mutex::unlock((std::mutex *)(v9 + 64));
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v13 = (std::mutex *)*((void *)this + 2);
  long long v12 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName(v11);
  realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(v13, v14, (uint64_t)v30);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!v30[0]) {
    goto LABEL_40;
  }
  uint64_t v17 = *((void *)this + 2);
  int v16 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName(v15);
  std::mutex::lock((std::mutex *)(v17 + 64));
  if (v17 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v17 + 40, v18))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v17 + 40), v18); {
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v17, (unsigned __int8 *)v18);
  }
  std::mutex::unlock((std::mutex *)(v17 + 64));
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v21 = (std::mutex *)*((void *)this + 2);
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v19);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v21, v22, (uint64_t)v27);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (!v27[0]) {
    goto LABEL_37;
  }
  uint64_t v25 = *((void *)this + 2);
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v26 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v23);
  std::mutex::lock((std::mutex *)(v25 + 64));
  if (v25 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v25 + 40, v26))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v25 + 40), v26); {
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v25, (unsigned __int8 *)v26);
  }
  std::mutex::unlock((std::mutex *)(v25 + 64));
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (!v27[0])
  {
LABEL_37:
    if (v29 < 0) {
      operator delete(__p);
    }
  }
  if (!v30[0])
  {
LABEL_40:
    if (v32 < 0) {
      operator delete(v31);
    }
  }
  if (!v33[0])
  {
LABEL_43:
    if (v35 < 0) {
      operator delete(v34);
    }
  }
}

void sub_23F567E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::mutex::unlock(v36);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (!a9 && a17 < 0) {
    operator delete(__p);
  }
  if (!a18 && a26 < 0) {
    operator delete(a21);
  }
  if (!a27 && a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void realityio::Outputs::getRawValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F568020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::SkeletonPoseDefinitionBuilder::~SkeletonPoseDefinitionBuilder(realityio::SkeletonPoseDefinitionBuilder *this)
{
  *(void *)this = &unk_26F3344E0;
  uint64_t v2 = (void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v2) {
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v2);
  }
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  id v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26F3344E0;
  uint64_t v2 = (void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v2) {
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v2);
  }
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  id v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::Builder::~Builder(this);

  JUMPOUT(0x2455D2BD0);
}

void std::vector<simd_float4x4>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(void *)a1 + (a2 << 6);
    }
  }
  else
  {
    std::vector<simd_float4x4>::__append((void **)a1, a2 - v2);
  }
}

double std::transform[abi:ne180100]<pxrInternal__aapl__pxrReserved__::GfMatrix4d const*,std::__wrap_iter<simd_float4x4 *>,anonymous namespace'::createGeomSkeletonFromUsdSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton const&)::$_2>(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, _OWORD *a3)
{
  if (this != a2)
  {
    uint64_t v14 = v3;
    uint64_t v15 = v4;
    uint64_t v7 = this;
    do
    {
      memset(v13, 0, sizeof(v13));
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((uint64_t *)v13, v7, 0, 0.0);
      MEMORY[0x2455CE5D0](v12, v13);
      double result = *(double *)v12;
      long long v9 = v12[1];
      long long v10 = v12[2];
      long long v11 = v12[3];
      *a3 = v12[0];
      a3[1] = v9;
      a3[2] = v10;
      a3[3] = v11;
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)v7 + 128);
      a3 += 4;
    }
    while (v7 != a2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::~UsdSkelSkeletonQuery(atomic_uint **this)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)(this + 4));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(this + 1);

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr(this);
}

void std::vector<simd_float4x4>::__append(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v14 = &v13[64 * v10];
    uint64_t v15 = &v13[64 * v12];
    bzero(v14, a2 << 6);
    uint64_t v16 = &v14[64 * a2];
    uint64_t v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 4);
        long long v20 = *((_OWORD *)v17 - 3);
        long long v21 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 4) = v19;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 64;
        v17 -= 64;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

atomic_uint **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr(atomic_uint **a1)
{
  return a1;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26F334558;
  return result;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F334558;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v5 = (unint64_t *)MEMORY[0x263F90540];
  unint64_t v6 = atomic_load(MEMORY[0x263F90540]);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
  }
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x50uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3345C8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "SkeletalAnimationViaRelationship");
  unint64_t v8 = *(void *)(v6 + 136);
  unint64_t v32 = v8;
  if ((v8 & 7) != 0)
  {
    unint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v32 = (unint64_t)v9;
    }
  }
  realityio::RelatedPrimInputDescriptor::RelatedPrimInputDescriptor(&v7[1].__vftable, (uint64_t)&__p, (uint64_t *)(v4 + 200), (uint64_t *)&v32, 1);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(__p);
  }
  uint64_t v37 = v7 + 1;
  unint64_t v38 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, &v37);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  unint64_t v10 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v11 = (unint64_t *)atomic_load(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v12 = (std::__shared_weak_count *)operator new(0x50uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334658;
  std::string::basic_string[abi:ne180100]<0>(&__p, "SkeletalAnimationViaChildren");
  unint64_t v13 = *v11;
  unint64_t v32 = v13;
  if ((v13 & 7) != 0)
  {
    uint64_t v14 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v32 = (unint64_t)v14;
    }
  }
  realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(&v12[1].__vftable, (uint64_t)&__p, (uint64_t *)(v10 + 200), (uint64_t *)&v32, 1);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(__p);
  }
  char v35 = v12 + 1;
  uint64_t v36 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, &v35);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  uint64_t v16 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v15);
  unint64_t v17 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v18 = atomic_load(v5);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
  }
  LODWORD(v32) = 1;
  long long v19 = (realityio::SkeletalAnimationAssetBuilder *)std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(v16, (uint64_t *)(v17 + 208), (uint64_t *)(v18 + 136), (int *)&v32, &__p);
  long long v21 = __p;
  long long v20 = v42;
  uint64_t v22 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v19);
  unint64_t v23 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v24 = (uint64_t *)atomic_load(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  if (!v24) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v32) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v22, (uint64_t *)(v23 + 208), v24, (int *)&v32, &__p);
  uint64_t v25 = __p;
  char v26 = v42;
  long long __p = v21;
  long long v42 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v43 = v25;
  uint64_t v44 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v39 = (void **)&v32;
  char v40 = 0;
  unint64_t v32 = (unint64_t)operator new(0x20uLL);
  uint64_t v33 = (void *)v32;
  uint64_t v34 = (void *)(v32 + 32);
  uint64_t v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::InputDescriptor const>>,std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*>((uint64_t)&v34, &__p, &v45, (void *)v32);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v28 = *(std::__shared_weak_count **)((char *)&__p + i);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
  uint64_t v29 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName((realityio::SkeletalAnimationAssetBuilder *)v28);
  unint64_t v30 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v30) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v39) = 1;
  std::allocate_shared[abi:ne180100]<realityio::UnionInputDescriptor,std::allocator<realityio::UnionInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,void>(v29, (uint64_t *)(v30 + 208), (int *)&v39, (void **)&v32, &__p);
  uint64_t v31 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &__p);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v39 = (void **)&v32;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v39);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
}

void sub_23F5689C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3345C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3345C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *realityio::RelatedPrimInputDescriptor::RelatedPrimInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F334618;
  uint64_t v9 = *a4;
  a1[6] = *a4;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    a1[6] &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_23F568CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::RelatedPrimInputDescriptor::~RelatedPrimInputDescriptor(realityio::RelatedPrimInputDescriptor *this)
{
  *(void *)this = &unk_26F334618;
  uint64_t v1 = *((void *)this + 6);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26F334618;
  uint64_t v1 = *((void *)this + 6);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::RelatedPrimInputDescriptor::resolvedPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v33, this, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v33))
  {
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 48);
    uint64_t v6 = _ZZNK9realityio26RelatedPrimInputDescriptor17resolvedPrimPathsERKN32pxrInternal__aapl__pxrReserved__8UsdStageERKNS1_7SdfPathERKNS_8internal15PrimToEntityMapEENKUlRKT_RT0_RNS1_9TfHashSetIS5_NS5_4HashENSt3__18equal_toIS5_EENSJ_9allocatorIS5_EEEEE_clINS1_7UsdPrimEKNS1_7TfTokenEEEDaSE_SG_SP_((uint64_t)&v32, &v33, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 48));
    if (v6)
    {
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    }
    else
    {
      uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate((pxrInternal__aapl__pxrReserved__ *)v6);
      unint64_t v9 = *(void *)UsdPrimDefaultPredicate;
      uint64_t v8 = *(void *)(UsdPrimDefaultPredicate + 8);
      uint64_t v10 = *(void *)(UsdPrimDefaultPredicate + 16);
      if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
        && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
      {
        v9 |= 0x2000uLL;
        v8 &= ~0x2000uLL;
      }
      unint64_t v18 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
      uint64_t v19 = v8;
      *(void *)&long long v20 = v10;
      pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v33, (uint64_t *)&v18, (uint64_t)&v22);
      unint64_t v18 = v22;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, &v23);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v19 + 1, &v24);
      long long v20 = v25;
      uint64_t v21 = v26;
      while (1)
      {
        uint64_t v14 = v27;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, &v28);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v15 + 1, &v29);
        long long v16 = v30;
        uint64_t v17 = v31;
        if (v18 == v14 && v19 == v15) {
          char v11 = pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v20, (uint64_t)&v16) ^ 1;
        }
        else {
          char v11 = 1;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
        if ((v11 & 1) == 0) {
          break;
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v18, (uint64_t)&v14);
        char v12 = _ZZNK9realityio26RelatedPrimInputDescriptor17resolvedPrimPathsERKN32pxrInternal__aapl__pxrReserved__8UsdStageERKNS1_7SdfPathERKNS_8internal15PrimToEntityMapEENKUlRKT_RT0_RNS1_9TfHashSetIS5_NS5_4HashENSt3__18equal_toIS5_EENSJ_9allocatorIS5_EEEEE_clINS1_7UsdPrimEKNS1_7TfTokenEEEDaSE_SG_SP_((uint64_t)&v32, (uint64_t *)&v14, v5);
        if ((BYTE8(v16) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v16 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
        if (v15) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
        }
        if (v12) {
          break;
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v18);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    }
  }
  else
  {
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
  uint64_t result = v34;
  if (v34) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
  }
  return result;
}

void sub_23F56907C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v2 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZNK9realityio26RelatedPrimInputDescriptor17resolvedPrimPathsERKN32pxrInternal__aapl__pxrReserved__8UsdStageERKNS1_7SdfPathERKNS_8internal15PrimToEntityMapEENKUlRKT_RT0_RNS1_9TfHashSetIS5_NS5_4HashENSt3__18equal_toIS5_EENSJ_9allocatorIS5_EEEEE_clINS1_7UsdPrimEKNS1_7TfTokenEEEDaSE_SG_SP_(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5 = *(void *)a3;
  uint64_t v12 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::RelatedPrimInputDescriptor::getPossiblyInheritedRelationship(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, &v13);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    v7[0] = (void **)&v8;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v7);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v8, (pxrInternal__aapl__pxrReserved__::UsdPrim *)a2, a3);
    memset(v7, 0, sizeof(v7));
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
    uint64_t v17 = v7;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
    if (v9) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
    }
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  }
  return 0;
}

void sub_23F569308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  *(void *)(v2 - 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0) = va;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va2);
  _Unwind_Resume(a1);
}

uint64_t realityio::RelatedPrimInputDescriptor::getPossiblyInheritedRelationship@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyuint64_t String = (*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    Emptyuint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  unint64_t v7 = *(unsigned __int8 *)(EmptyString + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    unint64_t v7 = *(void *)(EmptyString + 8);
  }
  if (v7 >= 5)
  {
    if (v8 < 0) {
      Emptyuint64_t String = *(void *)EmptyString;
    }
    BOOL v9 = strncmp((const char *)EmptyString, "skel:", 5uLL) == 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  int v19 = *(_DWORD *)a1;
  uint64_t v10 = a1[1];
  uint64_t v20 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, (_DWORD *)a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, (_DWORD *)a1 + 5);
  uint64_t v11 = a1[3];
  uint64_t v23 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19)
      || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19) & 1) != 0)
    {
LABEL_26:
      *(_DWORD *)a3 = 4;
      a3[1] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      a3[3] = 0;
      goto LABEL_28;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19, a2))break; {
    if (!v9)
    }
      goto LABEL_26;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19, (uint64_t)&v15);
    int v19 = v15;
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    uint64_t v13 = v20;
    uint64_t v20 = v12;
    if (v13) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v21, &v17);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v22);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v23 = v18;
    uint64_t v18 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    if (v16) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a3, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19, a2);
LABEL_28:
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  uint64_t result = v20;
  if (v20) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
  return result;
}

void sub_23F5695CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  int v8 = (atomic_ullong *)*((void *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, (_DWORD *)this + 5);
  pxrInternal__aapl__pxrReserved__::Usd_MoveToParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 6, 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, (uint64_t *)&v5, &v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
}

void sub_23F5696A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a3);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_PrimData *pxrInternal__aapl__pxrReserved__::Usd_MoveToParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(*a1);
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v8, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
    uint64_t v5 = *a1;
    if (*a1)
    {
      if ((*((unsigned char *)v5 + 57) & 0x10) != 0)
      {
        uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v5 + 16));
        if (result)
        {
          uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, a2);
          *a1 = result;
          if (!result)
          {
            v8[0] = (uint64_t)"usd/primData.h";
            v8[1] = (uint64_t)"Usd_MoveToParent";
            void v8[2] = 527;
            void v8[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::Usd_MoveToParent(PrimDataPtr &, SdfPath &) [PrimData"
                             "Ptr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
            char v9 = 0;
            uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v7, Text);
            uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
            if (!result) {
              return result;
            }
            uint64_t result = *a1;
          }
          if (*((void *)result + 2) == *(void *)a2)
          {
            v8[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v8);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            return (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
          }
        }
      }
    }
  }
  return result;
}

void std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F3346A8;
  uint64_t v9 = *a4;
  a1[6] = *a4;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    a1[6] &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_23F5699C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::ChildPrimInputDescriptor::~ChildPrimInputDescriptor(realityio::ChildPrimInputDescriptor *this)
{
  *(void *)this = &unk_26F3346A8;
  uint64_t v1 = *((void *)this + 6);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26F3346A8;
  uint64_t v1 = *((void *)this + 6);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::ChildPrimInputDescriptor::resolvedPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v37, this, a2);
  int IsValid = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37);
  if (IsValid)
  {
    UsdPrimAllPrimsPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(IsValid);
    uint64_t v9 = *UsdPrimAllPrimsPredicate;
    uint64_t v8 = UsdPrimAllPrimsPredicate[1];
    uint64_t v10 = UsdPrimAllPrimsPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    uint64_t v23 = v9;
    uint64_t v24 = v8;
    *(void *)&long long v25 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v37, &v23, (uint64_t)&v27);
    uint64_t v23 = v27;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, &v28);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v24 + 1, &v29);
    long long v25 = v30;
    uint64_t v26 = v31;
    uint64_t v19 = v32;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, &v33);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v20 + 1, &v34);
    long long v21 = v35;
    uint64_t v22 = v36;
    while (v23 != v19
         || v24 != v20
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v25, (uint64_t)&v21))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v23, (uint64_t)v15);
      uint64_t v12 = v16;
      if (!v16 || (*((unsigned char *)v16 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v16, v11);
      }
      if ((**((void **)v12 + 3) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a3 + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimPath = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v15);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a4, PrimPath, PrimPath);
      }
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
      if (v16) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v16);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v23);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  }
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  uint64_t result = v38;
  if (v38) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
  }
  return result;
}

void sub_23F569D34(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v2 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,std::allocator<realityio::RelatedPrimInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23F569DFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,std::allocator<realityio::RelatedPrimInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F3345C8;
  std::allocator<realityio::RelatedPrimInputDescriptor>::construct[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_23F569E78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::RelatedPrimInputDescriptor>::construct[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int *a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v13 = *(std::string *)a3;
  }
  uint64_t v10 = *a5;
  uint64_t v12 = v10;
  if ((v10 & 7) != 0)
  {
    uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v12 = (uint64_t)v11;
    }
  }
  realityio::RelatedPrimInputDescriptor::RelatedPrimInputDescriptor(a2, (uint64_t)&v13, a4, &v12, *a6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_23F569F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::ChildPrimInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23F569FF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::ChildPrimInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F334658;
  std::allocator<realityio::ChildPrimInputDescriptor>::construct[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_23F56A06C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::ChildPrimInputDescriptor>::construct[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int *a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v13 = *(std::string *)a3;
  }
  uint64_t v10 = *a5;
  uint64_t v12 = v10;
  if ((v10 & 7) != 0)
  {
    uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v12 = (uint64_t)v11;
    }
  }
  realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(a2, (uint64_t)&v13, a4, &v12, *a6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_23F56A148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<realityio::UnionInputDescriptor,std::allocator<realityio::UnionInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,std::allocator<realityio::UnionInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23F56A1E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,std::allocator<realityio::UnionInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, int *a4, void **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F3346E8;
  std::allocator<realityio::UnionInputDescriptor>::construct[abi:ne180100]<realityio::UnionInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}