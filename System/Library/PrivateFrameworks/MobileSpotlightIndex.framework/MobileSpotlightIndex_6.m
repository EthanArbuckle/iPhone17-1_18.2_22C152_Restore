uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,768>::shadow(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v9 = *(void *)(a1 + 144);
  v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v9 + 168))(v9, a2, a3);
  v10 = vi_onefixedsize_disk_allocator::shadow(*(void *)(*(void *)(a1 + 96) + 32), a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return v10;
    }
  }
  else if (!v7)
  {
    return v10;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v10;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,768>::validAddress(uint64_t a1, unint64_t a2)
{
  v4 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v6 = *(void *)(a1 + 128);
  v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 144);
  v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v9 = *(void *)(*(void *)(a1 + 96) + 32);
  unint64_t v10 = *(unsigned int *)(v9 + 72);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 12;
    do
    {
      v12 = *(void **)(v9 + 8 * v11);
      if (v12 && (unint64_t v13 = v12[1], v13 + 1 >= 2) && v13 <= a2 && (v14 = v12[2], v13 - v14 + v12[3] > a2)) {
        uint64_t v15 = a2 - v13 + v14;
      }
      else {
        uint64_t v15 = -1;
      }
      if (v11 - 11 >= v10) {
        break;
      }
      ++v11;
    }
    while (v15 == -1);
    if (v15 != -1) {
      goto LABEL_17;
    }
  }
  if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 144))(v8, a2) & 1) == 0)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v6 + 56))(v6, a2);
    if (!v7) {
      goto LABEL_21;
    }
  }
  else
  {
LABEL_17:
    uint64_t v16 = 1;
    if (!v7)
    {
LABEL_21:
      if (!v5) {
        return v16;
      }
      goto LABEL_22;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v5) {
    return v16;
  }
LABEL_22:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v16;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,768>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(v5, a2))
      {
        a2 += 3072;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(v5, a2))break; {
        a2 += 3072;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    uint64_t v15 = v14;
    uint64_t v16 = "";
    if (v14) {
      uint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int Vector = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(a1, a2, (int *)&v24, &v23, 0);
  if (Vector == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v9 = *(void *)(a1 + 80);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 96);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 104);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke;
    v20[3] = &unk_1E6345C20;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      v15[2] = ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke_1682;
      v15[3] = &unk_1F1816EB8;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      uint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      unint64_t v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return Vector != -1;
}

int *___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(const void **)(a1 + 48);
  uint64_t v8 = *(unsigned int *)a3;
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 3088) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 3088);
  result = (int *)memcmp(v7, v14, 0xC00uLL);
  if (!result)
  {
    int v16 = *__error();
    uint64_t v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v22 = a3[1];
      *(_DWORD *)buf = 136315906;
      v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2760;
      __int16 v37 = 1024;
      *(_DWORD *)v38 = a2;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v22;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v16;
    int v18 = *__error();
    unsigned int v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)(a1 + 56);
      double v24 = *(float *)(a1 + 60);
      *(_DWORD *)buf = 136315906;
      v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2761;
      __int16 v37 = 1024;
      *(_DWORD *)v38 = v23;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v24;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v18;
    int v20 = *__error();
    unsigned int v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      float v25 = *(float *)(a1 + 60);
      float v26 = a3[1];
      float v27 = vabds_f32(v25, v26);
      if (v25 == v26)
      {
        BOOL v28 = 1;
        BOOL v29 = 1;
      }
      else
      {
        float v30 = fabsf(v25);
        float v31 = fabsf(v26);
        BOOL v28 = v27 <= fmaxf(fminf(v31, v30) * 0.000015259, 0.000015259);
        BOOL v29 = v27 <= (float)(fmaxf(v30, v31) * 0.000015259);
      }
      *(_DWORD *)buf = 136317186;
      v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2762;
      __int16 v37 = 2048;
      *(double *)v38 = v27;
      *(_WORD *)&v38[8] = 2048;
      *(void *)&v38[10] = 0x3810000000000000;
      __int16 v39 = 2048;
      uint64_t v40 = 0x3E80000000000000;
      __int16 v41 = 1024;
      BOOL v42 = v27 < 1.1755e-38;
      __int16 v43 = 1024;
      BOOL v44 = v27 < 0.00000011921;
      __int16 v45 = 1024;
      BOOL v46 = v28;
      __int16 v47 = 1024;
      BOOL v48 = v29;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x48u);
    }
    result = __error();
    int *result = v20;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke_1682(uint64_t a1, int a2, unsigned int *a3, unsigned char *a4)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  int v6 = *(const void **)(a1 + 48);
  uint64_t v103 = *(void *)(a1 + 40);
  uint64_t v8 = *a3;
  uint64_t v9 = *(void **)(*(void *)(v103 + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 3088) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 3088);
  if (!memcmp(v6, v14, 0xC00uLL))
  {
    int v15 = *__error();
    int v16 = _SILogForLogForCategory(16);
    uint64_t v17 = a3;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      double v52 = *((float *)a3 + 1);
      float __C = 4.8153e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2770;
      __int16 v115 = 1024;
      float v116 = *(float *)&a2;
      __int16 v117 = 2048;
      *(double *)v118 = v52;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v15;
    int v18 = *(const float **)(a1 + 48);
    unsigned int v19 = (const float *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float __C = 3.4028e38;
    vDSP_distancesq(v18, 1, v19, 1, &__C, 0x300uLL);
    float v20 = __C;
    int v21 = *__error();
    double v22 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      float v53 = *(float *)(a1 + 88);
      float __C = 4.8153e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2772;
      __int16 v115 = 1024;
      float v116 = v53;
      __int16 v117 = 2048;
      *(double *)v118 = v20;
      _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v21;
    __p = 0;
    v109 = 0;
    uint64_t v110 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&__p);
    int v23 = *__error();
    double v24 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      float v54 = *(float *)__p;
      float v55 = *((float *)__p + 1);
      int v56 = *((_DWORD *)__p + 2);
      float v57 = *((float *)__p + 3);
      BOOL v58 = v55 == v57 || vabds_f32(v55, v57) <= fmaxf(fminf(fabsf(v57), fabsf(v55)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2774;
      __int16 v115 = 1024;
      float v116 = v54;
      __int16 v117 = 2048;
      *(double *)v118 = v55;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v56;
      __int16 v119 = 2048;
      double v120 = v57;
      __int16 v121 = 1024;
      LODWORD(v122) = v58;
      _os_log_error_impl(&dword_1BD672000, v24, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v23;
    int v25 = *__error();
    float v26 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      float v59 = *(float *)__p;
      int v60 = *((_DWORD *)__p + 2);
      BOOL v61 = *((float *)__p + 1) == *((float *)__p + 3);
      float __C = 4.8154e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2775;
      __int16 v115 = 1024;
      float v116 = v59;
      __int16 v117 = 1024;
      *(_DWORD *)v118 = v60;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v61;
      _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v25;
    int v27 = *__error();
    BOOL v28 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      float v62 = *(float *)__p;
      int v63 = *((_DWORD *)__p + 2);
      BOOL v64 = *((float *)__p + 1) < *((float *)__p + 3);
      float __C = 4.8154e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2776;
      __int16 v115 = 1024;
      float v116 = v62;
      __int16 v117 = 1024;
      *(_DWORD *)v118 = v63;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v64;
      _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v27;
    int v29 = *__error();
    float v30 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      float v65 = *(float *)__p;
      int v66 = *((_DWORD *)__p + 2);
      BOOL v67 = *((float *)__p + 1) > *((float *)__p + 3);
      float __C = 4.8154e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2777;
      __int16 v115 = 1024;
      float v116 = v65;
      __int16 v117 = 1024;
      *(_DWORD *)v118 = v66;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v67;
      _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v29;
    int v31 = *__error();
    v32 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      float v68 = *(float *)__p;
      int v69 = *((_DWORD *)__p + 2);
      float v70 = *((float *)__p + 1);
      float v71 = *((float *)__p + 3);
      double v72 = (float)(v70 - v71);
      float v73 = vabds_f32(v70, v71);
      if (v70 == v71)
      {
        BOOL v74 = 1;
        BOOL v75 = 1;
      }
      else
      {
        float v99 = fabsf(v70);
        float v100 = fabsf(v71);
        BOOL v74 = v73 <= fmaxf(fminf(v100, v99) * 0.000015259, 0.000015259);
        BOOL v75 = v73 <= (float)(fmaxf(v99, v100) * 0.000015259);
      }
      float __C = 4.8161e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2778;
      __int16 v115 = 1024;
      float v116 = v68;
      __int16 v117 = 1024;
      *(_DWORD *)v118 = v69;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v72;
      __int16 v119 = 2048;
      double v120 = 1.17549435e-38;
      __int16 v121 = 2048;
      uint64_t v122 = 0x3E80000000000000;
      __int16 v123 = 1024;
      BOOL v124 = v73 < 1.1755e-38;
      __int16 v125 = 1024;
      BOOL v126 = v73 < 0.00000011921;
      __int16 v127 = 1024;
      BOOL v128 = v74;
      __int16 v129 = 1024;
      BOOL v130 = v75;
      _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v31;
    v106 = 0;
    uint64_t v107 = 0;
    v105 = 0;
    uint64_t v33 = *(void *)(a1 + 56);
    uint64_t v34 = *a3;
    __int16 v35 = *(void **)(*(void *)(v103 + 48) + 32);
    unint64_t v36 = v35[3] + v35[2] * v34;
    bit_vector_set_10635(v35 + 525, (v36 >> 20));
    unint64_t v37 = (v36 + 3088) >> 20;
    if (v37 > (v36 >> 20))
    {
      unsigned int v38 = (v36 >> 20) + 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v35 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = _windowsResolvePtr((uint64_t)(v35 + 5), v35[3] + v35[2] * v34, 3088);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v33 + 80))(&v105, v33, v40, 2);
    int v41 = *__error();
    BOOL v42 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      float v76 = *v105;
      float v77 = v105[1];
      int v78 = *((_DWORD *)v105 + 2);
      float v79 = v105[3];
      float __C = 4.8156e-34;
      v112 = "exists_block_invoke";
      BOOL v80 = vabds_f32(v77, v79) <= fmaxf(fminf(fabsf(v79), fabsf(v77)) * 0.000015259, 0.000015259);
      int v114 = 2781;
      __int16 v113 = 1024;
      int v81 = v77 == v79 || v80;
      __int16 v115 = 1024;
      float v116 = v76;
      __int16 v117 = 2048;
      *(double *)v118 = v77;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v78;
      __int16 v119 = 2048;
      double v120 = v79;
      __int16 v121 = 1024;
      LODWORD(v122) = v81;
      _os_log_error_impl(&dword_1BD672000, v42, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v41;
    int v43 = *__error();
    BOOL v44 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      float v82 = *v105;
      int v83 = *((_DWORD *)v105 + 2);
      BOOL v84 = v105[1] == v105[3];
      float __C = 4.8154e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2782;
      __int16 v115 = 1024;
      float v116 = v82;
      __int16 v117 = 1024;
      *(_DWORD *)v118 = v83;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v84;
      _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v43;
    int v45 = *__error();
    BOOL v46 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      float v85 = *v105;
      int v86 = *((_DWORD *)v105 + 2);
      BOOL v87 = v105[1] < v105[3];
      float __C = 4.8154e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2783;
      __int16 v115 = 1024;
      float v116 = v85;
      __int16 v117 = 1024;
      *(_DWORD *)v118 = v86;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v87;
      _os_log_error_impl(&dword_1BD672000, v46, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v45;
    int v47 = *__error();
    BOOL v48 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      float v88 = *v105;
      int v89 = *((_DWORD *)v105 + 2);
      BOOL v90 = v105[1] > v105[3];
      float __C = 4.8154e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2784;
      __int16 v115 = 1024;
      float v116 = v88;
      __int16 v117 = 1024;
      *(_DWORD *)v118 = v89;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v90;
      _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v47;
    int v49 = *__error();
    v50 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      float v91 = *v105;
      int v92 = *((_DWORD *)v105 + 2);
      float v93 = v105[1];
      float v94 = v105[3];
      float v95 = vabds_f32(v93, v94);
      BOOL v96 = (float)(v93 - v94) < 1.1755e-38;
      if (v93 == v94)
      {
        BOOL v97 = 1;
        BOOL v98 = 1;
      }
      else
      {
        float v101 = fabsf(v93);
        float v102 = fabsf(v94);
        BOOL v97 = v95 <= fmaxf(fminf(v102, v101) * 0.000015259, 0.000015259);
        BOOL v98 = v95 <= (float)(fmaxf(v101, v102) * 0.000015259);
      }
      float __C = 4.8161e-34;
      v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2785;
      __int16 v115 = 1024;
      float v116 = v91;
      __int16 v117 = 1024;
      *(_DWORD *)v118 = v92;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v95;
      __int16 v119 = 2048;
      double v120 = 1.17549435e-38;
      __int16 v121 = 2048;
      uint64_t v122 = 0x3E80000000000000;
      __int16 v123 = 1024;
      BOOL v124 = v96;
      __int16 v125 = 1024;
      BOOL v126 = v95 < 0.00000011921;
      __int16 v127 = 1024;
      BOOL v128 = v97;
      __int16 v129 = 1024;
      BOOL v130 = v98;
      _os_log_error_impl(&dword_1BD672000, v50, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v49;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v17;
    v51 = v105;
    *a4 = 1;
    if (v51)
    {
      v106 = v51;
      operator delete(v51);
    }
    if (__p)
    {
      v109 = __p;
      operator delete(__p);
    }
  }
}

void __destroy_helper_block_8_56c60_ZTSN22IVFVectorIndexTemplateIfLi768EE19QuantizerPartitionsE(uint64_t a1)
{
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  else
  {
    v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_8_56c60_ZTSN22IVFVectorIndexTemplateIfLi768EE19QuantizerPartitionsE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,768>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,768>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,768>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F1816C90;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,768>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F1816C90;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::VectorStore<vi_onefixedsize_disk_allocator>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = a1 + 64;
  bzero(v6, 0x400uLL);
  uint64_t v5 = fd_name(*(void *)a2, v6, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  operator new();
}

void QuantizerManager<float,512>::sharedQuantizer(void *a1, uint64_t a2, int a3)
{
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x3802000000;
  int v15 = __Block_byref_object_copy__1002;
  uint64_t v17 = 0;
  int v18 = 0;
  int v16 = __Block_byref_object_dispose__1003;
  if (ZeroVectorQuantizer<float,512>::sharedInstance(void)::onceToken != -1) {
    dispatch_once(&ZeroVectorQuantizer<float,512>::sharedInstance(void)::onceToken, &__block_literal_global_923);
  }
  uint64_t v17 = *(void *)ZeroVectorQuantizer<float,512>::sharedInstance(void)::zvq;
  int v6 = *(std::__shared_weak_count **)(ZeroVectorQuantizer<float,512>::sharedInstance(void)::zvq + 8);
  int v18 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(NSObject **)(a2 + 16);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___ZN16QuantizerManagerIfLi512EE15sharedQuantizerEi_block_invoke;
  v10[3] = &unk_1E63454D8;
  int v11 = a3;
  v10[4] = &v12;
  v10[5] = a2;
  dispatch_sync(v7, v10);
  uint64_t v8 = v13[6];
  *a1 = v13[5];
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v12, 8);
  uint64_t v9 = v18;
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v8 = *a2;
  if (v6 != *a2)
  {
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v18 = *a2;
    unsigned int v19 = v9;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v14 = *a2;
      int v15 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v14 = v8;
      int v15 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 40))(&v16, a1, &v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v18, &v16);
    int v11 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    unint64_t v13 = v19;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

__n128 __Block_byref_object_copy__1002(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__1003(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN16QuantizerManagerIfLi512EE15sharedQuantizerEi_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v2) {
    goto LABEL_55;
  }
  int8x8_t v4 = *(int8x8_t *)(v3 + 120);
  if (!*(void *)&v4) {
    goto LABEL_22;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = *(int *)(a1 + 48);
    if (*(void *)&v4 <= v2) {
      unint64_t v6 = v2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v2;
  }
  uint64_t v7 = *(uint64_t ***)(*(void *)(v3 + 112) + 8 * v6);
  if (!v7 || (uint64_t v8 = *v7) == 0)
  {
LABEL_22:
    long long v50 = 0uLL;
    int64_t v51 = 0;
    int v12 = *(char *)(v3 + 71);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v13 = *(void *)(v3 + 56);
    }
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_99;
    }
    if (v14 >= 0x17)
    {
      uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v16 = v14 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v13 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
      if (!v13) {
        goto LABEL_36;
      }
    }
    if (v12 >= 0) {
      uint64_t v18 = (const void *)(v3 + 48);
    }
    else {
      uint64_t v18 = *(const void **)(v3 + 48);
    }
    memmove(p_dst, v18, v13);
LABEL_36:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 46;
    std::to_string(&v47, v2);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v19 = &v47;
    }
    else {
      unsigned int v19 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    int v21 = std::string::append(&__dst, (const std::string::value_type *)v19, size);
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = std::string::append(&v49, ".quantizer");
    int64_t v24 = v23->__r_.__value_.__r.__words[2];
    long long v50 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v51 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_45:
          if (v51 >= 0) {
            int v25 = (const char *)&v50;
          }
          else {
            int v25 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v25, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          goto LABEL_55;
        }
LABEL_52:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == v2)
      {
        if (*((_DWORD *)v8 + 4) == v2) {
          goto LABEL_92;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_22;
      }
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == v2) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_22;
    }
LABEL_12:
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v8 + 4) != v2) {
    goto LABEL_12;
  }
LABEL_92:
  BOOL v42 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v3 + 112, v2, (_DWORD *)(a1 + 48));
  int v43 = (std::__shared_weak_count *)v42[4];
  if (v43 && (int v43 = std::__shared_weak_count::lock(v43)) != 0) {
    uint64_t v44 = v42[3];
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v46 = *(std::__shared_weak_count **)(v45 + 48);
  *(void *)(v45 + 40) = v44;
  *(void *)(v45 + 48) = v43;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_55:
  uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
  if (ZeroVectorQuantizer<float,512>::sharedInstance(void)::onceToken != -1) {
    dispatch_once(&ZeroVectorQuantizer<float,512>::sharedInstance(void)::onceToken, &__block_literal_global_923);
  }
  uint64_t v28 = *(void *)ZeroVectorQuantizer<float,512>::sharedInstance(void)::zvq;
  int v27 = *(std::__shared_weak_count **)(ZeroVectorQuantizer<float,512>::sharedInstance(void)::zvq + 8);
  if (!v27)
  {
    if (*(void *)(v26 + 40) != v28) {
      return;
    }
LABEL_64:
    uint64_t v30 = *(void *)(v3 + 80);
    if (v30)
    {
      uint64_t v31 = *(void *)(v3 + 88);
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v33 = *(std::__shared_weak_count **)(v32 + 48);
      *(void *)(v32 + 40) = v30;
      *(void *)(v32 + 48) = v31;
      if (v33)
      {
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      return;
    }
    int v34 = *(char *)(v3 + 71);
    if (v34 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v35 = *(void *)(v3 + 56);
    }
    unint64_t v36 = v35 + 10;
    if (v35 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v36 >= 0x17)
      {
        uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17) {
          uint64_t v38 = v36 | 7;
        }
        uint64_t v39 = v38 + 1;
        unint64_t v37 = (char *)operator new(v38 + 1);
        *((void *)&v50 + 1) = v35 + 10;
        int64_t v51 = v39 | 0x8000000000000000;
        *(void *)&long long v50 = v37;
      }
      else
      {
        int64_t v51 = 0;
        long long v50 = 0uLL;
        unint64_t v37 = (char *)&v50;
        HIBYTE(v51) = v35 + 10;
        if (!v35)
        {
LABEL_84:
          strcpy(&v37[v35], ".quantizer");
          if (v51 >= 0) {
            int v41 = (const char *)&v50;
          }
          else {
            int v41 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v41, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          return;
        }
      }
      if (v34 >= 0) {
        unint64_t v40 = (const void *)(v3 + 48);
      }
      else {
        unint64_t v40 = *(const void **)(v3 + 48);
      }
      memmove(v37, v40, v35);
      goto LABEL_84;
    }
LABEL_99:
    abort();
  }
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v29 = *(void *)(v26 + 40);
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
}

void AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>::AllocatedVectorQuantizer(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = &unk_1F1815778;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(void *)(a1 + 64) = fd_dup(*(void *)a2);
  bzero(v9, 0x400uLL);
  uint8x8_t v5 = fd_name(*(void *)a2, v9, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  if (*(void *)(a1 + 64)) {
    operator new();
  }
  unint64_t v6 = __si_assert_copy_extra_329();
  uint64_t v7 = v6;
  uint64_t v8 = "";
  if (v6) {
    uint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 487, "fdPtr != nullptr", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t std::__shared_ptr_pointer<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512> *,std::shared_ptr<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>>::__shared_ptr_default_delete<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>,AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>>,std::allocator<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512> *,std::shared_ptr<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>>::__shared_ptr_default_delete<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>,AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>>,std::allocator<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void Quantizer<float,512>::topKPartitions(uint64_t a1@<X0>, const float *a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    uint64_t v7 = 0;
    BOOL v75 = 0;
    BOOL v74 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_74;
  }
  float v100 = a4;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = a3;
  int v12 = a2;
  do
  {
    size_t v13 = (const float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 72))(a1, v10);
    unsigned int __C = 2139095039;
    vDSP_distancesq(v13, 1, v12, 1, (float *)&__C, 0x200uLL);
    unint64_t v14 = (v10 | ((unint64_t)__C << 32)) >> 32;
    uint64_t v15 = v7 - v9;
    uint64_t v16 = (v7 - v9) >> 3;
    if (v16 < v11)
    {
      if (v7 < v8)
      {
        *(_DWORD *)uint64_t v7 = v10;
        *((_DWORD *)v7 + 1) = v14;
        v7 += 8;
LABEL_47:
        if (v7 - v9 >= 9)
        {
          unint64_t v48 = (((unint64_t)(v7 - v9) >> 3) - 2) >> 1;
          std::string v49 = (float *)&v9[8 * v48];
          int64_t v51 = v7 - 8;
          unsigned int v50 = *((_DWORD *)v7 - 2);
          float v52 = v49[1];
          float v53 = *((float *)v7 - 1);
          int v54 = *(_DWORD *)v49;
          BOOL v55 = *(_DWORD *)v49 < v50;
          if (v52 != v53) {
            BOOL v55 = v52 < v53;
          }
          if (v55)
          {
            do
            {
              int v56 = v49;
              *(_DWORD *)int64_t v51 = v54;
              *((float *)v51 + 1) = v49[1];
              if (!v48) {
                break;
              }
              unint64_t v48 = (v48 - 1) >> 1;
              std::string v49 = (float *)&v9[8 * v48];
              float v57 = v49[1];
              int v54 = *(_DWORD *)v49;
              BOOL v58 = v57 < v53;
              if (v57 == v53) {
                BOOL v58 = *(_DWORD *)v49 < v50;
              }
              int64_t v51 = (char *)v56;
            }
            while (v58);
            *(_DWORD *)int v56 = v50;
            v56[1] = v53;
          }
        }
        goto LABEL_4;
      }
      if ((v8 - v9) >> 2 <= (unint64_t)(v16 + 1)) {
        unint64_t v28 = v16 + 1;
      }
      else {
        unint64_t v28 = (v8 - v9) >> 2;
      }
      if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v28 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v29 = 8 * v28;
      uint64_t v30 = operator new(8 * v28);
      uint64_t v31 = &v30[8 * v16];
      *uint64_t v31 = v10;
      v31[1] = v14;
      if (v7 == v9)
      {
        unint64_t v36 = v7;
        uint64_t v9 = &v30[8 * v16];
        goto LABEL_44;
      }
      unint64_t v32 = v7 - v9 - 8;
      if (v32 >= 0x58 && (unint64_t)(v9 - v30) >= 0x20)
      {
        uint64_t v68 = (v32 >> 3) + 1;
        uint64_t v33 = &v7[-8 * (v68 & 0x3FFFFFFFFFFFFFFCLL)];
        int v69 = &v30[8 * v16 - 16];
        float v70 = v7 - 16;
        uint64_t v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v72 = *(_OWORD *)v70;
          *(v69 - 1) = *((_OWORD *)v70 - 1);
          *int v69 = v72;
          v69 -= 2;
          v70 -= 32;
          v71 -= 4;
        }
        while (v71);
        int v34 = (char *)&v31[-2 * (v68 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v33 = v7;
        int v34 = &v30[8 * v16];
      }
      do
      {
        uint64_t v35 = *((void *)v33 - 1);
        v33 -= 8;
        *((void *)v34 - 1) = v35;
        v34 -= 8;
      }
      while (v33 != v9);
LABEL_32:
      unint64_t v36 = v9;
      uint64_t v9 = v34;
LABEL_44:
      uint64_t v8 = &v30[v29];
      uint64_t v7 = (char *)(v31 + 2);
      if (v36) {
        operator delete(v36);
      }
      int v12 = a2;
      goto LABEL_47;
    }
    float v17 = *((float *)v9 + 1);
    int v18 = *(_DWORD *)v9;
    BOOL v19 = *(_DWORD *)v9 > v10;
    if (v17 != *(float *)&v14) {
      BOOL v19 = v17 > *(float *)&v14;
    }
    if (v19)
    {
      if (v15 <= 8)
      {
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v14;
      }
      else
      {
        uint64_t v20 = 0;
        int v21 = v9;
        do
        {
          uint64_t v26 = (float *)&v21[8 * v20 + 8];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v16)
          {
            float v22 = v26[1];
            float v23 = v26[3];
            float v24 = *v26;
            BOOL v25 = *(_DWORD *)v26 < *((_DWORD *)v26 + 2);
            if (v22 != v23) {
              BOOL v25 = v22 < v23;
            }
            if (v25)
            {
              float v24 = v26[2];
              v26 += 2;
            }
            else
            {
              uint64_t v20 = v27;
            }
          }
          else
          {
            float v24 = *v26;
            uint64_t v20 = v27;
          }
          *(float *)int v21 = v24;
          *((float *)v21 + 1) = v26[1];
          int v21 = (char *)v26;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v26 == (float *)(v7 - 8))
        {
          *(_DWORD *)uint64_t v26 = v18;
          v26[1] = v17;
        }
        else
        {
          *uint64_t v26 = *((float *)v7 - 2);
          v26[1] = *((float *)v7 - 1);
          *((_DWORD *)v7 - 2) = v18;
          *((float *)v7 - 1) = v17;
          uint64_t v37 = (char *)v26 - v9 + 8;
          if (v37 >= 9)
          {
            unint64_t v38 = (((unint64_t)v37 >> 3) - 2) >> 1;
            uint64_t v39 = (float *)&v9[8 * v38];
            float v40 = v39[1];
            float v41 = v26[1];
            int v42 = *(_DWORD *)v39;
            float v43 = *v26;
            BOOL v44 = *(_DWORD *)v39 < *(_DWORD *)v26;
            if (v40 != v41) {
              BOOL v44 = v40 < v41;
            }
            if (v44)
            {
              do
              {
                uint64_t v45 = v39;
                *(_DWORD *)uint64_t v26 = v42;
                v26[1] = v39[1];
                if (!v38) {
                  break;
                }
                unint64_t v38 = (v38 - 1) >> 1;
                uint64_t v39 = (float *)&v9[8 * v38];
                float v46 = v39[1];
                int v42 = *(_DWORD *)v39;
                BOOL v47 = v46 < v41;
                if (v46 == v41) {
                  BOOL v47 = *(_DWORD *)v39 < LODWORD(v43);
                }
                uint64_t v26 = v45;
              }
              while (v47);
              *uint64_t v45 = v43;
              v45[1] = v41;
            }
          }
        }
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v14;
        float v59 = v7 - 8;
        unint64_t v60 = (((unint64_t)v15 >> 3) - 2) >> 1;
        BOOL v61 = (float *)&v9[8 * v60];
        float v62 = v61[1];
        int v63 = *(_DWORD *)v61;
        BOOL v64 = *(_DWORD *)v61 < v10;
        if (v62 != *(float *)&v14) {
          BOOL v64 = v62 < *(float *)&v14;
        }
        if (v64)
        {
          do
          {
            float v65 = v61;
            *(_DWORD *)float v59 = v63;
            *((float *)v59 + 1) = v61[1];
            if (!v60) {
              break;
            }
            unint64_t v60 = (v60 - 1) >> 1;
            BOOL v61 = (float *)&v9[8 * v60];
            float v66 = v61[1];
            int v63 = *(_DWORD *)v61;
            BOOL v67 = v66 < *(float *)&v14;
            if (v66 == *(float *)&v14) {
              BOOL v67 = *(_DWORD *)v61 < v10;
            }
            float v59 = (char *)v65;
          }
          while (v67);
          *(_DWORD *)float v65 = v10;
          *((_DWORD *)v65 + 1) = v14;
        }
      }
    }
LABEL_4:
    ++v10;
  }
  while (v10 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1));
  *float v100 = 0;
  v100[1] = 0;
  v100[2] = 0;
  uint64_t v73 = v7 - v9;
  if (v7 == v9)
  {
    BOOL v75 = 0;
    BOOL v74 = 0;
  }
  else
  {
    if (v73 < 0) {
      abort();
    }
    BOOL v74 = (int *)operator new(v7 - v9);
    *float v100 = v74;
    v100[2] = &v74[2 * (v73 >> 3)];
    memcpy(v74, v9, v73 & 0xFFFFFFFFFFFFFFF8);
    BOOL v75 = (float *)((char *)v74 + (v73 & 0xFFFFFFFFFFFFFFF8));
    v100[1] = (int *)v75;
    uint64_t v7 = v9;
  }
LABEL_74:
  if ((char *)v75 - (char *)v74 >= 9)
  {
    uint64_t v76 = (unint64_t)((char *)v75 - (char *)v74) >> 3;
    do
    {
      uint64_t v78 = 0;
      int v79 = *v74;
      int v80 = v74[1];
      int v81 = (float *)v74;
      do
      {
        int v86 = &v81[2 * v78 + 2];
        uint64_t v87 = (2 * v78) | 1;
        uint64_t v78 = 2 * v78 + 2;
        if (v78 < v76)
        {
          float v82 = v86[1];
          float v83 = v86[3];
          float v84 = *v86;
          BOOL v85 = *(_DWORD *)v86 < *((_DWORD *)v86 + 2);
          if (v82 != v83) {
            BOOL v85 = v82 < v83;
          }
          if (v85)
          {
            float v84 = v86[2];
            v86 += 2;
          }
          else
          {
            uint64_t v78 = v87;
          }
        }
        else
        {
          float v84 = *v86;
          uint64_t v78 = v87;
        }
        *int v81 = v84;
        v81[1] = v86[1];
        int v81 = v86;
      }
      while (v78 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
      float v88 = (char *)(v75 - 2);
      if (v86 == v75 - 2)
      {
        *(_DWORD *)int v86 = v79;
        *((_DWORD *)v86 + 1) = v80;
      }
      else
      {
        *int v86 = *(v75 - 2);
        v86[1] = *(v75 - 1);
        *((_DWORD *)v75 - 2) = v79;
        *((_DWORD *)v75 - 1) = v80;
        uint64_t v89 = (char *)v86 - (char *)v74 + 8;
        if (v89 >= 9)
        {
          unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
          float v91 = (float *)&v74[2 * v90];
          float v92 = v91[1];
          float v93 = v86[1];
          float v94 = *v91;
          float v95 = *v86;
          BOOL v96 = *(_DWORD *)v91 < *(_DWORD *)v86;
          if (v92 != v93) {
            BOOL v96 = v92 < v93;
          }
          if (v96)
          {
            do
            {
              BOOL v97 = v91;
              *int v86 = v94;
              v86[1] = v91[1];
              if (!v90) {
                break;
              }
              unint64_t v90 = (v90 - 1) >> 1;
              float v91 = (float *)&v74[2 * v90];
              float v98 = v91[1];
              float v94 = *v91;
              BOOL v99 = v98 < v93;
              if (v98 == v93) {
                BOOL v99 = *(_DWORD *)v91 < LODWORD(v95);
              }
              int v86 = v97;
            }
            while (v99);
            *BOOL v97 = v95;
            v97[1] = v93;
          }
        }
      }
      BOOL v75 = (float *)v88;
    }
    while (v76-- > 2);
  }
  if (v7) {
    operator delete(v7);
  }
}

unint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>::getCentroid(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    uint8x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "i < nCentroids", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(v2 + 24) + *(void *)(v2 + 16) * a2;
  return _windowsResolvePtr(v2 + 40, v3, 2048);
}

BOOL Quantizer<float,512>::isPersistent(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  int v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8) {
      return 1;
    }
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(void *)(a1 + 16) == 8)
  {
    v1 = (void *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

BOOL AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>::validAddress(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(unsigned int *)(v2 + 72);
  if ((int)v3 < 1)
  {
    uint64_t v8 = -1;
  }
  else
  {
    uint64_t v4 = 12;
    do
    {
      uint8x8_t v5 = *(void **)(v2 + 8 * v4);
      if (v5 && (unint64_t v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2)) {
        uint64_t v8 = a2 - v6 + v7;
      }
      else {
        uint64_t v8 = -1;
      }
      if (v4 - 11 >= v3) {
        break;
      }
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

BOOL Quantizer<float,512>::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 512)
  {
    uint8x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 291, "D == other.dimension()", v7);
LABEL_12:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) != 4)
  {
    uint64_t v8 = __si_assert_copy_extra_329();
    unint64_t v6 = v8;
    uint64_t v9 = "";
    if (v8) {
      uint64_t v9 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 292, "sizeof(ELEM_TYPE) == other.elementSize()", v9);
    goto LABEL_12;
  }
  return Quantizer<float,512>::operator==(a1, a2);
}

{
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v8;
  BOOL result;

  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    return 1;
  }
  uint8x8_t v5 = 0;
  while (1)
  {
    unint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v5);
    uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v5);
    uint64_t v8 = memcmp(v6, v7, 0x800uLL);
    uint64_t result = v8 == 0;
    if (v8) {
      break;
    }
    uint8x8_t v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
      return 1;
    }
  }
  return result;
}

uint64_t Quantizer<float,512>::elementSize()
{
  return 4;
}

uint64_t Quantizer<float,512>::dimension()
{
  return 512;
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>::count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>::version(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>::~AllocatedVectorQuantizer(uint64_t a1)
{
  AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>::~AllocatedVectorQuantizer(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,512>::~AllocatedVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815778;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if (v2) {
    vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(a1 + 40));
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    uint64_t v4 = *(const void **)(v3 + 4216);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 4216) = 0;
    }
    *(_OWORD *)(v3 + 4200) = 0u;
    MEMORY[0x1C1881000](v3, 0x10A0C40112AF241);
  }
  fd_release(*(atomic_uint **)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    unint64_t v6 = *(const void **)(v5 + 4216);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v5 + 4216) = 0;
    }
    *(_OWORD *)(v5 + 4200) = 0u;
    MEMORY[0x1C1881000](v5, 0x10A0C40112AF241);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ___ZN19ZeroVectorQuantizerIfLi512EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t std::__shared_ptr_pointer<ZeroVectorQuantizer<float,512> *,std::shared_ptr<Quantizer<float,512>>::__shared_ptr_default_delete<Quantizer<float,512>,ZeroVectorQuantizer<float,512>>,std::allocator<ZeroVectorQuantizer<float,512>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ZeroVectorQuantizer<float,512> *,std::shared_ptr<Quantizer<float,512>>::__shared_ptr_default_delete<Quantizer<float,512>,ZeroVectorQuantizer<float,512>>,std::allocator<ZeroVectorQuantizer<float,512>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

float *SingleVectorQuantizer<float,512>::topKPartitions@<X0>(const float *__A@<X1>, uint64_t a2@<X0>, float **a3@<X8>)
{
  float __C = 3.4028e38;
  vDSP_distancesq(__A, 1, (const float *)(a2 + 33), 1, &__C, 0x200uLL);
  float v4 = __C;
  uint64_t result = (float *)operator new(8uLL);
  a3[1] = result + 2;
  a3[2] = result + 2;
  float *result = 0.0;
  result[1] = v4;
  *a3 = result;
  return result;
}

uint64_t SingleVectorQuantizer<float,512>::getCentroid(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    float v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 396, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

uint64_t SingleVectorQuantizer<float,512>::count()
{
  return 1;
}

void ZeroVectorQuantizer<float,512>::~ZeroVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t ZeroVectorQuantizer<float,512>::~ZeroVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void SingleVectorQuantizer<float,512>::~SingleVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t SingleVectorQuantizer<float,512>::~SingleVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ___ZN19ZeroVectorQuantizerIfLi512EE8centroidEv_block_invoke()
{
  ZeroVectorQuantizer<float,512>::centroid(void)::centroid = 1065353216;
}

uint64_t std::__shared_ptr_pointer<QuantizerManager<float,512> *,std::shared_ptr<QuantizerManager<float,512>>::__shared_ptr_default_delete<QuantizerManager<float,512>,QuantizerManager<float,512>>,std::allocator<QuantizerManager<float,512>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    unsigned __int8 v2 = *(NSObject **)(v1 + 16);
    if (v2) {
      dispatch_release(v2);
    }
    int v3 = *__error();
    float v4 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (void *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      unint64_t v6 = (void *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0) {
        unint64_t v6 = (void *)*v6;
      }
      int v13 = 136315394;
      unint64_t v14 = v5;
      __int16 v15 = 2080;
      uint64_t v16 = v6;
      _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v13, 0x16u);
    }
    *__error() = v3;
    uint64_t v7 = *(void **)(v1 + 128);
    if (v7)
    {
      do
      {
        unint64_t v11 = (void *)*v7;
        int v12 = (std::__shared_weak_count *)v7[4];
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        operator delete(v7);
        uint64_t v7 = v11;
      }
      while (v11);
    }
    uint64_t v8 = *(void **)(v1 + 112);
    *(void *)(v1 + 112) = 0;
    if (v8) {
      operator delete(v8);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(v1 + 104);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    unint64_t v10 = *(std::__shared_weak_count **)(v1 + 88);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_19:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_29:
        operator delete(*(void **)(v1 + 24));
LABEL_20:
        JUMPOUT(0x1C1881000);
      }
    }
    else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }
  return result;
}

void std::__shared_ptr_pointer<QuantizerManager<float,512> *,std::shared_ptr<QuantizerManager<float,512>>::__shared_ptr_default_delete<QuantizerManager<float,512>,QuantizerManager<float,512>>,std::allocator<QuantizerManager<float,512>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void ___ZN16QuantizerManagerIfLi512EE14sharedInstanceEijt_block_invoke()
{
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    int v3 = *(const void **)(v2 + 4216);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 4216) = 0;
    }
    *(_OWORD *)(v2 + 4200) = 0u;
    JUMPOUT(0x1C1881000);
  }
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1816B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1816B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  unint64_t v10 = *(char **)(a1 + 80);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v9 = (long long *)(a1 + 80);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *(_DWORD **)(a1 + 96);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  unint64_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    uint64_t v29 = __si_assert_copy_extra_329();
    uint64_t v30 = v29;
    uint64_t v31 = "";
    if (v29) {
      uint64_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 48) + 40) != v14[18])
  {
    unint64_t v32 = __si_assert_copy_extra_329();
    uint64_t v30 = v32;
    uint64_t v33 = "";
    if (v32) {
      uint64_t v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    __int16 v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = v10 + 8;
      if (v10[31] < 0) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      int v18 = (void *)(*a2 + 8);
      uint64_t v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        int v18 = (void *)*v18;
      }
      int v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      BOOL v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        BOOL v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      int v21 = __p;
      if (v45 < 0) {
        int v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)buf = 136317442;
      std::string v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      float v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      float v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      int v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    unint64_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  float v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  uint64_t v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::newPartitions(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  unint64_t v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    unint64_t v6 = ".tmp.partitions";
  }
  memset(v16, 0, sizeof(v16));
  long long v7 = *(_OWORD *)(a1 + 24);
  v15[0] = *(_OWORD *)(a1 + 8);
  v15[1] = v7;
  size_t v8 = strlen(v6);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    unint64_t v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    unint64_t v14 = v12 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v14) = v8;
    unint64_t v10 = __dst;
    if (!v8)
    {
LABEL_16:
      *((unsigned char *)v9 + (void)v10) = 0;
      IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)v16, (uint64_t)v15, (uint64_t)__dst, 1);
      if (SHIBYTE(v14) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v10, v6, (size_t)v9);
  goto LABEL_16;
}

unint64_t IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v3 = a2;
  unint64_t v4 = v2[3] + v2[2] * a2;
  bit_vector_set_10635(v2 + 525, (v4 >> 20));
  unint64_t v5 = (v4 + 2064) >> 20;
  if (v5 > (v4 >> 20))
  {
    unsigned int v6 = (v4 >> 20) + 1;
    do
    {
      unint64_t v7 = v6;
      bit_vector_set_10635(v2 + 525, v6++);
    }
    while (v5 > v7);
  }
  unint64_t v8 = v2[3] + v2[2] * v3;
  return _windowsResolvePtr((uint64_t)(v2 + 5), v8, 2064);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getQuantizer(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1C1881000);
}

void *IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  *a1 = &unk_1F1816B48;
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::diagnoseDump(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  __int16 v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v17 = "(readOnly)";
  }
  else {
    uint64_t v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  BOOL v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getQuantizer(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    uint64_t v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    unint64_t v28 = (void *)std::ostream::operator<<();
    uint64_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    uint64_t v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  unint64_t v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 96);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  uint64_t v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 40))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      float v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v52, 2064);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 40));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t v43 = _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v40, 2064);
        BOOL v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        float v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, v43, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, v43 + 2040, 8);
        if ((v71 & 0x80u) == 0) {
          std::string v49 = &v69;
        }
        else {
          std::string v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  float v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::status(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)__p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  BOOL v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(a1 + 48, &v31);
  if (v31)
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::updateVectorStorageOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 48;
  if (a2)
  {
    unint64_t v5 = 0;
    uint64_t v25 = a2 + 56;
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (v5 >= result) {
        break;
      }
      uint64_t v8 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v9 = v8[3] + v8[2] * v5;
      bit_vector_set_10635(v8 + 525, (v9 >> 20));
      unint64_t v10 = (v9 + 2064) >> 20;
      if (v10 > (v9 >> 20))
      {
        unsigned int v11 = (v9 >> 20) + 1;
        do
        {
          unint64_t v12 = v11;
          bit_vector_set_10635(v8 + 525, v11++);
        }
        while (v10 > v12);
      }
      unint64_t v6 = _windowsResolvePtr((uint64_t)(v8 + 5), v8[3] + v8[2] * v5, 2064);
      if (!*(unsigned char *)(a2 + 184))
      {
        unint64_t v13 = *(unsigned int *)(v6 + 2056);
        int v14 = *(_DWORD *)(a2 + 24);
        if (!v14 || !((*(void *)(a2 + 16) ^ v13) >> (-4 * v14)))
        {
          char v15 = (60 - 4 * v14) & 0xFC;
          uint64_t v16 = *(void *)(v25 + 8 * ((v13 >> v15) & 0xF));
          if (v16)
          {
            int v17 = v14 + 2;
            do
            {
              char v15 = (64 - 4 * v17) & 0xFC;
              uint64_t v16 = *(void *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v15) & 0xF));
              ++v17;
            }
            while ((v16 & 1) != 0);
          }
          if (v16)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(void *)v16 + 16))(v16, v13, ~(-1 << v15)))
            {
              data_map_set_offset_for_id(*(void *)(a1 + 192), v13, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * v5) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
      ++v5;
    }
  }
  else
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (i >= result) {
        break;
      }
      int v20 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v21 = v20[3] + v20[2] * i;
      bit_vector_set_10635(v20 + 525, (v21 >> 20));
      unint64_t v22 = (v21 + 2064) >> 20;
      if (v22 > (v21 >> 20))
      {
        unsigned int v23 = (v21 >> 20) + 1;
        do
        {
          unint64_t v24 = v23;
          bit_vector_set_10635(v20 + 525, v23++);
        }
        while (v22 > v24);
      }
      unint64_t v19 = _windowsResolvePtr((uint64_t)(v20 + 5), v20[3] + v20[2] * i, 2064);
      data_map_set_offset_for_id(*(void *)(a1 + 192), *(unsigned int *)(v19 + 2056), ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::getDataForOffset(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    unint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *unint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 2048;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(void *)(result + 192) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::storageSize(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 96) + 32) + 48);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  unint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v25, *((unsigned int *)v25 + 2), *((float *)v25 + 3));
        ++v25;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v16, *((unsigned int *)v16 + 2), *((float *)v16 + 3));
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          unint64_t v21 = v15;
          int v22 = *__error();
          unsigned int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            unint64_t v24 = __p;
            if (v49 < 0) {
              unint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        ++v16;
      }
      while (v16 != v12);
    }
  }
  uint64_t v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      uint64_t v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    unint64_t v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6345BD8;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNN(v9, a4, a7, a8, 0, a9);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[2044], a2[2045], a2[2046], a2[2047]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v12 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 10000;
  }
  if (10 * v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10 * v11;
  }
  unsigned int v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v120 = 0;
  __int16 v121 = &v120;
  if (v17 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v17;
  }
  int v123 = 0;
  uint64_t v122 = 0x2000000000;
  uint64_t v116 = 0;
  __int16 v117 = &v116;
  int v119 = 0;
  uint64_t v118 = 0x2000000000;
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v113);
  double Current = CFAbsoluteTimeGetCurrent();
  int v100 = v11;
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1) <= v14)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    LODWORD(v99) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    uint64_t v62 = 0;
    int v63 = 0;
    uint64_t v64 = *(void *)(a1 + 48);
    while (v63 != *(_DWORD *)(v64 + 40))
    {
      ++*((_DWORD *)v121 + 6);
      if (*(_DWORD *)(v64 + 40) <= v62)
      {
        float v93 = __si_assert_copy_extra_329();
        float v94 = v93;
        float v95 = "";
        if (v93) {
          float v95 = v93;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v95);
LABEL_127:
        free(v94);
        if (__valid_fs(-1)) {
          uint64_t v98 = 2989;
        }
        else {
          uint64_t v98 = 3072;
        }
        *(_DWORD *)uint64_t v98 = -559038737;
        abort();
      }
      unint64_t v65 = _windowsResolvePtr(*(void *)(v64 + 32) + 40, *(void *)(*(void *)(v64 + 32) + 24) + *(void *)(*(void *)(v64 + 32) + 16) * v62, 2064);
      unint64_t v66 = *(unsigned int *)(v65 + 2056);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v65, 1, (float *)keyExistsAndHasValidFormat, 0x200uLL);
      if (*((void *)&v113 + 1))
      {
        uint8x8_t v67 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v113 + 8));
        v67.i16[0] = vaddlv_u8(v67);
        if (v67.u32[0] > 1uLL)
        {
          unint64_t v68 = v66;
          if (*((void *)&v113 + 1) <= v66) {
            unint64_t v68 = v66 % *((void *)&v113 + 1);
          }
        }
        else
        {
          unint64_t v68 = (DWORD2(v113) - 1) & v66;
        }
        std::locale v69 = *(uint64_t **)(v113 + 8 * v68);
        if (v69)
        {
          std::locale v69 = (uint64_t *)*v69;
          if (v69)
          {
            if (v67.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v71 = v69[1];
                if (v71 == v66)
                {
                  if (*((_DWORD *)v69 + 4) == v66) {
                    goto LABEL_83;
                  }
                }
                else if ((v71 & (*((void *)&v113 + 1) - 1)) != v68)
                {
                  goto LABEL_82;
                }
                std::locale v69 = (uint64_t *)*v69;
                if (!v69) {
                  goto LABEL_83;
                }
              }
            }
            do
            {
              unint64_t v70 = v69[1];
              if (v70 == v66)
              {
                if (*((_DWORD *)v69 + 4) == v66) {
                  break;
                }
              }
              else
              {
                if (v70 >= *((void *)&v113 + 1)) {
                  v70 %= *((void *)&v113 + 1);
                }
                if (v70 != v68) {
                  goto LABEL_82;
                }
              }
              std::locale v69 = (uint64_t *)*v69;
            }
            while (v69);
          }
        }
      }
      else
      {
LABEL_82:
        std::locale v69 = 0;
      }
LABEL_83:
      float v72 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v69)
        {
          int v74 = *__error();
          BOOL v75 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v72;
            _os_log_impl(&dword_1BD672000, v75, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v74;
        }
        *(void *)keyExistsAndHasValidFormat = *(void *)(v65 + 2048);
        *(_DWORD *)&keyExistsAndHasValidFormat[8] = v66;
        *(float *)&keyExistsAndHasValidFormat[12] = v72;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(a4, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v69)
        {
          int v76 = *__error();
          float v77 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v72;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v77, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v76;
        }
        ++*((_DWORD *)v117 + 6);
      }
      uint64_t v62 = (v62 + 1);
      int v63 = v62;
      if (v64 != *(void *)(a1 + 48))
      {
        BOOL v96 = __si_assert_copy_extra_329();
        float v94 = v96;
        BOOL v97 = "";
        if (v96) {
          BOOL v97 = v96;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v97);
        goto LABEL_127;
      }
    }
    int v78 = v100;
  }
  else
  {
    if (!AppIntegerValue)
    {
      keyExistsAndHasValidFormat[0] = 0;
      unsigned int v22 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0]) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = 40;
      }
      keyExistsAndHasValidFormat[0] = 0;
      int v24 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0]) {
        int v25 = v24;
      }
      else {
        int v25 = 45;
      }
      keyExistsAndHasValidFormat[0] = 0;
      int v26 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
      int v27 = keyExistsAndHasValidFormat[0];
      int v28 = 8 * v26;
      int v29 = v25 * v25;
      keyExistsAndHasValidFormat[0] = 0;
      unsigned int v30 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
      int v31 = keyExistsAndHasValidFormat[0];
      if (v30 <= 0x12) {
        char v32 = 18;
      }
      else {
        char v32 = v30;
      }
      char v33 = v32 - 3;
      unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      if (v31) {
        char v35 = v33;
      }
      else {
        char v35 = 17;
      }
      unsigned int v36 = v34 >> v35;
      if (v36 <= 8) {
        int v37 = 8;
      }
      else {
        int v37 = v36;
      }
      int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      if (v27) {
        int v39 = v28;
      }
      else {
        int v39 = 800;
      }
      int v11 = v100;
      unsigned int v40 = v39 * v38 / (v29 * v37);
      if (v23 < v40) {
        unsigned int v40 = v23;
      }
      if (v40 <= v20) {
        CFIndex AppIntegerValue = v20;
      }
      else {
        CFIndex AppIntegerValue = v40;
      }
    }
    int v41 = *__error();
    uint64_t v42 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
      *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
      *(double *)&keyExistsAndHasValidFormat[38] = a6;
      _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
    }
    *__error() = v41;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v46 = *(void *)(a1 + 80);
    uint64_t v45 = *(std::__shared_weak_count **)(a1 + 88);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v48 = *(void *)(a1 + 96);
    long long v47 = *(std::__shared_weak_count **)(a1 + 104);
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    memset(keyExistsAndHasValidFormat, 0, 24);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
    uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
    uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
    uint64_t v110 = 0;
    v111 = 0;
    uint64_t v112 = 0;
    BOOL v124 = &v110;
    unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
    if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
    {
      v108 = 0;
      v109 = 0;
      uint64_t v107 = 0;
    }
    else
    {
      do
      {
        int v52 = *v50;
        v50 += 2;
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v124, v52);
      }
      while (v50 != v49);
      float v53 = v110;
      v108 = 0;
      v109 = 0;
      uint64_t v107 = 0;
      int64_t v54 = v111 - (unsigned char *)v110;
      if (v111 != v110)
      {
        if (v54 < 0) {
          abort();
        }
        long long v55 = (char *)operator new(v111 - (unsigned char *)v110);
        uint64_t v56 = &v55[4 * (v54 >> 2)];
        uint64_t v107 = v55;
        v109 = v56;
        memcpy(v55, v53, v54);
        v108 = v56;
      }
    }
    v102[0] = MEMORY[0x1E4F143A8];
    v102[1] = 1174405120;
    v102[2] = ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIfLi512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
    v102[3] = &unk_1F1816C50;
    v102[6] = a1;
    v102[7] = a2;
    v102[4] = &v120;
    std::unordered_set<unsigned int>::unordered_set((uint64_t)&v103, (uint64_t)&v113);
    float v106 = a6;
    v102[5] = &v116;
    v105 = a4;
    (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v107, v102);
    if (v107)
    {
      v108 = v107;
      operator delete(v107);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
    unint64_t v90 = v104;
    int v78 = v100;
    if (v104)
    {
      do
      {
        float v91 = (void *)*v90;
        operator delete(v90);
        unint64_t v90 = v91;
      }
      while (v91);
    }
    float v92 = v103;
    uint64_t v103 = 0;
    if (v92) {
      operator delete(v92);
    }
    if (v110)
    {
      v111 = v110;
      operator delete(v110);
    }
    if (*(void *)keyExistsAndHasValidFormat)
    {
      *(void *)&keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
      operator delete(*(void **)keyExistsAndHasValidFormat);
    }
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    unint64_t v99 = v51 >> 3;
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  int v79 = *__error();
  int v80 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    int v81 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    int v82 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    int v83 = *((_DWORD *)v117 + 6);
    int v84 = *((_DWORD *)v121 + 6);
    uint64_t v85 = (uint64_t)(a4[2] - a4[1]) >> 4;
    CFAbsoluteTime v86 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v78;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v81;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v99;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v82;
    __int16 v126 = 1024;
    int v127 = v83;
    __int16 v128 = 1024;
    int v129 = v84;
    __int16 v130 = 2048;
    uint64_t v131 = v85;
    __int16 v132 = 2048;
    CFAbsoluteTime v133 = v86 - Current;
    _os_log_impl(&dword_1BD672000, v80, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v79;
  uint64_t v87 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      float v88 = (void *)*v87;
      operator delete(v87);
      uint64_t v87 = v88;
    }
    while (v88);
  }
  uint64_t v89 = (void *)v113;
  *(void *)&long long v113 = 0;
  if (v89) {
    operator delete(v89);
  }
  _Block_object_dispose(&v116, 8);
  _Block_object_dispose(&v120, 8);
}

void ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIfLi512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v5 = *a3;
  uint64_t v6 = *(void **)(*(void *)(v4 + 48) + 32);
  unint64_t v7 = v6[3] + v6[2] * v5;
  bit_vector_set_10635(v6 + 525, (v7 >> 20));
  unint64_t v8 = (v7 + 2064) >> 20;
  if (v8 > (v7 >> 20))
  {
    unsigned int v9 = (v7 >> 20) + 1;
    do
    {
      unint64_t v10 = v9;
      bit_vector_set_10635(v6 + 525, v9++);
    }
    while (v8 > v10);
  }
  unint64_t v11 = _windowsResolvePtr((uint64_t)(v6 + 5), v6[3] + v6[2] * v5, 2064);
  unsigned int v12 = *(const float **)(a1 + 56);
  LODWORD(v29) = 2139095039;
  vDSP_distancesq(v12, 1, (const float *)v11, 1, (float *)&v29, 0x200uLL);
  float v13 = *(float *)&v29;
  unint64_t v14 = *(unsigned int *)(v11 + 2056);
  int8x8_t v15 = *(int8x8_t *)(a1 + 72);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v17 = *(unsigned int *)(v11 + 2056);
      if (*(void *)&v15 <= v14) {
        unint64_t v17 = v14 % *(void *)&v15;
      }
    }
    else
    {
      unint64_t v17 = (v15.i32[0] - 1) & v14;
    }
    unsigned int v18 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v17);
    if (v18)
    {
      unsigned int v18 = (uint64_t *)*v18;
      if (v18)
      {
        if (v16.u32[0] < 2uLL)
        {
          uint64_t v19 = *(void *)&v15 - 1;
          while (1)
          {
            uint64_t v21 = v18[1];
            if (v21 == v14)
            {
              if (*((_DWORD *)v18 + 4) == v14) {
                goto LABEL_25;
              }
            }
            else if ((v21 & v19) != v17)
            {
              goto LABEL_24;
            }
            unsigned int v18 = (uint64_t *)*v18;
            if (!v18) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v20 = v18[1];
          if (v20 == v14)
          {
            if (*((_DWORD *)v18 + 4) == v14) {
              break;
            }
          }
          else
          {
            if (v20 >= *(void *)&v15) {
              v20 %= *(void *)&v15;
            }
            if (v20 != v17) {
              goto LABEL_24;
            }
          }
          unsigned int v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
  else
  {
LABEL_24:
    unsigned int v18 = 0;
  }
LABEL_25:
  float v22 = *(float *)(a1 + 112);
  if (v22 == 0.0 || *(float *)&v29 <= v22)
  {
    if (v18)
    {
      int v24 = *__error();
      int v25 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v29) = 67109376;
        HIDWORD(v29) = v14;
        *(_WORD *)unsigned int v30 = 2048;
        *(double *)&v30[2] = v13;
        _os_log_impl(&dword_1BD672000, v25, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", (uint8_t *)&v29, 0x12u);
      }
      *__error() = v24;
    }
    uint64_t v29 = *(void *)(v11 + 2048);
    *(_DWORD *)unsigned int v30 = v14;
    *(float *)&v30[4] = v13;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(void **)(a1 + 104), (uint64_t)&v29);
  }
  else
  {
    if (v18)
    {
      int v26 = *__error();
      int v27 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        double v28 = *(float *)(a1 + 112);
        LODWORD(v29) = 67109632;
        HIDWORD(v29) = v14;
        *(_WORD *)unsigned int v30 = 2048;
        *(double *)&v30[2] = v13;
        __int16 v31 = 2048;
        double v32 = v28;
        _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", (uint8_t *)&v29, 0x1Cu);
      }
      *__error() = v26;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::createCandidateQueue()
{
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::aNNForTest(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  uint64_t v6 = __si_assert_copy_extra_329();
  unint64_t v7 = v6;
  unint64_t v8 = "";
  if (v6) {
    unint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::aNN(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    unint64_t v14 = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    int8x8_t v15 = &unk_1E6345BB0;
    uint64_t v16 = a9;
    operator new();
  }
  unsigned int v9 = __si_assert_copy_extra_329();
  unint64_t v10 = v9;
  unint64_t v11 = "";
  if (v9) {
    unint64_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::restoreUpdateSet()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3127, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::storeUpdateSet()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3122, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::rename(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 144);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 96);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 87) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 64), *(void *)(v16 + 72));
  }
  else {
    std::string buf = *(std::string *)(v16 + 64);
  }
  MEMORY[0x1C1880BF0](v16 + 64, a2);
  int v17 = *__error();
  unsigned int v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__s, v16);
    unint64_t v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)int v24 = 136315394;
    int v25 = v19;
    __int16 v26 = 2080;
    int v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  fd_rename(*(void *)(*(void *)(v16 + 32) + 40), a2);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::makePurgeable(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 96);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(void *)(v2 + 32) + 40));
  size_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::makeReadOnly(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 96);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v5);
      unint64_t v8 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      float v22 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    uint64_t v9 = *(void *)(v5 + 32);
    fd_make_readonly(*(void *)(v9 + 40));
    uint64_t v10 = *(void *)(v9 + 40);
    if (v10)
    {
      do
      {
        int v11 = fchmodat(*(_DWORD *)(v10 + 44), *(const char **)(v10 + 72), 0x100u, 2048);
        uint64_t v12 = g_prot_error_callback;
        if (v11 != -1 || g_prot_error_callback == 0) {
          break;
        }
        uint64_t v14 = *(unsigned int *)(v10 + 40);
        int8x8_t v15 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v12 + 16))(v12, v14, *v15, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 136);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a1 + 144);
    int v17 = *(std::__shared_weak_count **)(a1 + 152);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
    (*(void (**)(uint64_t))(*(void *)v18 + 120))(v18);
    *(unsigned char *)(a1 + 208) = 1;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::truncate(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(*(void *)(a1 + 96));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    int v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 144);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 152);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

BOOL IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::unlink(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  int v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 96);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    int8x8_t v15 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  BOOL v10 = vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(v6 + 32));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v10;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::subvert(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    BOOL v10 = __si_assert_copy_extra_329();
    int v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 152);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  int v7 = *(std::__shared_weak_count **)(a2 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 176))(v6, v9);
  vi_onefixedsize_disk_allocator::subvert(*(void *)(*(void *)(a2 + 96) + 32), *(void *)(*(void *)(a1 + 96) + 32));
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    int8x8_t v15 = "";
    if (v13) {
      int8x8_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  int v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    uint64_t v16 = __si_assert_copy_extra_329();
    int v17 = v16;
    __int16 v18 = "";
    if (v16) {
      __int16 v18 = v16;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2712, "target->nVectors() == 0", v18);
    free(v17);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = operator new(8uLL);
  v31[0] = v6;
  *int v6 = a1;
  v31[1] = v6 + 1;
  v31[2] = v6 + 1;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v31);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v8 = *(void *)(a1 + 80);
  int v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  int v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v30[0] = v8;
  v30[1] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v30);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v30);
  }
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  long long v27 = 0u;
  uint64_t v25 = v10;
  __int16 v26 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(std::__shared_weak_count **)(a1 + 56);
  v24[0] = v11;
  v24[1] = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
  }
  char v13 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  __int16 v20 = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  int v21 = &__block_descriptor_tmp_994_6947;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v34 = 0;
  do
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v32, (uint64_t)&v27);
    long long v35 = v32;
    long long v36 = v33;
    if (!(void)v33) {
      break;
    }
    v20((uint64_t)v19, (unsigned int *)&v35, (BOOL *)&v34);
  }
  while (!v34);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v29);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  int8x8_t v15 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v31[0]) {
    operator delete(v31[0]);
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(const void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v7 = v5 - *(void *)a3;
  if (v5 == *(void *)a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      goto LABEL_197;
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a3);
    size_t v9 = v7;
    uint64_t v7 = (uint64_t)&v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v9);
  }
  v144 = 0;
  v145 = 0;
  QuantizerManager<float,512>::sharedQuantizer(&v144, a1, 0);
  uint64_t v10 = v7 - (void)v8;
  if ((char *)v7 == v8)
  {
    int v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF9) {
      goto LABEL_197;
    }
    uint64_t v11 = (std::__shared_weak_count **)operator new(2 * v10);
    bzero(v11, 2 * v10);
    int v12 = (std::__shared_weak_count **)((char *)v11 + 2 * v10);
  }
  uint64_t v110 = a1;
  size_t __sz = v7 - (void)v8;
  unsigned int v114 = ((uint64_t (*)(std::__shared_weak_count *))v144->__get_deleter)(v144);
  v108 = (char *)v7;
  unint64_t v109 = v10 >> 3;
  v111 = a2;
  uint64_t v112 = v11;
  std::string __p = v8;
  if ((char *)v7 != v8)
  {
    if ((unint64_t)(v10 >> 3) <= 1) {
      unint64_t v13 = 1;
    }
    else {
      unint64_t v13 = v10 >> 3;
    }
    uint64_t v14 = v11 + 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v8 + 16))(keyExistsAndHasValidFormat);
      int8x8_t v15 = v144;
      int v17 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      uint64_t v16 = v122;
      if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v17 == v15) {
          goto LABEL_16;
        }
      }
      else if (v17 == v15)
      {
        goto LABEL_16;
      }
      *(void *)keyExistsAndHasValidFormat = 0;
      uint64_t v122 = 0;
      uint64_t v18 = *(void *)v8;
      v142 = v144;
      v143 = v145;
      if (v145) {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(Boolean *__return_ptr))(*(void *)v18 + 40))(keyExistsAndHasValidFormat);
      int v19 = v143;
      if (v143)
      {
        if (!atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      __int16 v20 = v122;
      if (v122) {
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v22 = *v14;
      *(v14 - 1) = v21;
      *uint64_t v14 = v20;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        uint64_t v23 = v122;
        if (v122)
        {
LABEL_29:
          if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      else
      {
        uint64_t v23 = v122;
        if (v122) {
          goto LABEL_29;
        }
      }
LABEL_16:
      v14 += 2;
      v8 += 8;
      if (!--v13)
      {
        if (v109 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v10 >> 3;
        }
        uint64_t v25 = __p;
        __int16 v26 = v112 + 1;
        while (1)
        {
          uint64_t v27 = (uint64_t)*(v26 - 1);
          if (v27)
          {
            uint64_t v28 = *(void *)v25;
            v140 = v144;
            v141 = v145;
            if (v145) {
              atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v138 = v27;
            v139 = *v26;
            if (v139) {
              atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t *))(*(void *)v28 + 48))(v28, &v140, &v138);
            uint64_t v29 = v139;
            if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
              unsigned int v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            else
            {
              unsigned int v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
LABEL_52:
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          __int16 v31 = v122;
          uint64_t v32 = *(unsigned int *)(*(void *)keyExistsAndHasValidFormat + 72);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          long long v33 = v122;
          int v34 = *(_DWORD *)(*(void *)keyExistsAndHasValidFormat + 68);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          if (v34 != v114)
          {
            float v91 = __si_assert_copy_extra_329();
            float v92 = v91;
            float v93 = "";
            if (v91) {
              float v93 = v91;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2199, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v93);
LABEL_185:
            free(v92);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v13 += v32;
          v25 += 8;
          v26 += 2;
          if (!--v24) {
            goto LABEL_62;
          }
        }
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
    __int16 v20 = v122;
    if (!v122) {
      goto LABEL_26;
    }
LABEL_25:
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_26;
  }
  unint64_t v13 = 0;
LABEL_62:
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v36 = AppIntegerValue;
  }
  else {
    unsigned int v36 = 45;
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v37 = CFPreferencesGetAppIntegerValue(@"IVFTrainingTimeBudget", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    double v38 = (double)v37;
  }
  else {
    double v38 = 30.0;
  }
  unsigned int v40 = v111;
  int v39 = v112;
  int v41 = __p;
  if (v13 >> 4 < 0x271 || v13 < v36 * (unint64_t)v114 * v36 * (unint64_t)v114 / 0x64)
  {
LABEL_87:
    if (!v112) {
      goto LABEL_95;
    }
    goto LABEL_88;
  }
  unsigned __int8 v42 = atomic_exchange((atomic_uchar *volatile)(v110 + 72), 1u);
  if ((v42 & 1) == 0 && *(void *)(v110 + 96))
  {
    float v94 = __si_assert_copy_extra_329();
    float v95 = v94;
    BOOL v96 = "";
    if (v94) {
      BOOL v96 = v94;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 737, "_trainingQuantizer == nullptr", v96);
    free(v95);
    if (__valid_fs(-1)) {
      uint64_t v97 = 2989;
    }
    else {
      uint64_t v97 = 3072;
    }
    *(_DWORD *)uint64_t v97 = -559038737;
    goto LABEL_197;
  }
  FdPtrForFile = (atomic_uint *)QuantizerManager<float,768>::createFdPtrForFile(v110, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, (unsigned __int8 *)(v110 + 72));
    goto LABEL_84;
  }
  int v44 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v44);
  if (v42)
  {
LABEL_84:
    int v56 = *__error();
    int v57 = _SILogForLogForCategory(16);
    os_log_type_t v58 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v57, v58))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1BD672000, v57, v58, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v56;
    goto LABEL_87;
  }
  unsigned int v106 = v36;
  uint64_t v45 = _SILogForLogForCategory(0);
  os_signpost_id_t v46 = os_signpost_id_make_with_pointer(v45, 0);
  long long v47 = _SILogForLogForCategory(0);
  unint64_t v101 = v46 - 1;
  if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v48 = v47;
    if (os_signpost_enabled(v47))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v48, OS_SIGNPOST_INTERVAL_BEGIN, v46, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  os_signpost_id_t spid = v46;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  uint64_t v127 = 0;
  long long v126 = 0u;
  long long v125 = 0u;
  memset(v124, 0, sizeof(v124));
  uint64_t v122 = 0;
  uint64_t v105 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v103 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v128 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v102 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v123 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v49 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v50 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)keyExistsAndHasValidFormat = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v50;
  uint64_t v122 = 0;
  unint64_t v51 = (std::ios_base *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v51, v124);
  v51[1].__vftable = 0;
  v51[1].__fmtflags_ = -1;
  uint64_t v52 = v49[5];
  uint64_t v123 = v49[4];
  *(void *)((char *)&v124[-1] + *(void *)(v123 - 24)) = v52;
  *(void *)keyExistsAndHasValidFormat = v49[1];
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v49[6];
  uint64_t v128 = v103;
  *(void *)keyExistsAndHasValidFormat = v105;
  uint64_t v123 = v102;
  std::streambuf::basic_streambuf();
  uint64_t v104 = MEMORY[0x1E4FBA470] + 16;
  v124[0] = MEMORY[0x1E4FBA470] + 16;
  long long v125 = 0u;
  long long v126 = 0u;
  LODWORD(v127) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"[", 1);
  unsigned int v40 = v111;
  if (v108 != __p)
  {
    float v53 = __p;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v53 + 24))(block);
      int64_t v54 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
      long long v55 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      v53 += 8;
    }
    while (v53 != v108);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"]", 1);
  int v61 = *__error();
  uint64_t v62 = _SILogForLogForCategory(16);
  os_log_type_t v63 = 2 * (dword_1E9FC90E4 < 4);
  int v41 = __p;
  if (os_log_type_enabled(v62, v63))
  {
    std::stringbuf::str();
    uint64_t v64 = v149[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v64;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v114;
    _os_log_impl(&dword_1BD672000, v62, v63, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v149[7] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  *__error() = v61;
  double Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v38)
  {
    int v68 = 0;
LABEL_147:
    int v39 = v112;
    uint64_t v66 = v110;
    goto LABEL_149;
  }
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
  uint64_t v66 = v110;
  uint64_t v119 = v110;
  uint64_t v120 = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(buf, 0, 24);
  if (v108 != __p)
  {
    if ((__sz & 0x8000000000000000) == 0)
    {
      uint8x8_t v67 = (char *)operator new(__sz);
      *(void *)std::string buf = v67;
      *(void *)&buf[16] = &v67[8 * v109];
      int v41 = __p;
      memcpy(v67, __p, __sz);
      *(void *)&buf[8] = &v67[8 * v109];
      uint64_t v66 = v110;
      goto LABEL_118;
    }
LABEL_197:
    abort();
  }
  uint8x8_t v67 = 0;
LABEL_118:
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
  int v69 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRootBase::trainOnce(&v119, (uint64_t *)buf);
  if (v67)
  {
    *(void *)&buf[8] = v67;
    operator delete(v67);
  }
  if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  int v39 = v112;
  if (v69)
  {
    QuantizerManager<float,512>::lastTrainedQuantizer(block, v66);
    unsigned int v70 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
    uint64_t v71 = (std::__shared_weak_count *)v148;
    if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    if (v13 < v36 * (unint64_t)v70 * v36 * (unint64_t)v70 / 0x64)
    {
      int v68 = 1;
LABEL_129:
      unsigned int v72 = v68;
      unsigned int v40 = v111;
      while (1)
      {
        int v68 = v72;
        if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
          goto LABEL_146;
        }
        v118[0] = v110;
        v118[1] = (uint64_t)v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        __int16 v117 = 0;
        if (v108 != __p) {
          break;
        }
        int v74 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRootBase::trainOnce(v118, (uint64_t *)&v115);
        if (v40) {
          goto LABEL_138;
        }
LABEL_140:
        if (v74)
        {
          ++v72;
          block[0] = 0;
          int v75 = CFPreferencesGetAppIntegerValue(@"IVFMaxTrainingIteration", @"com.apple.Spotlight", block);
          unsigned int v76 = block[0] ? v75 : 3;
          if (v72 <= v76) {
            continue;
          }
        }
        ++v68;
        goto LABEL_146;
      }
      if ((__sz & 0x8000000000000000) != 0) {
        goto LABEL_197;
      }
      uint64_t v73 = (char *)operator new(__sz);
      uint64_t v115 = v73;
      __int16 v117 = &v73[8 * v109];
      memcpy(v73, __p, __sz);
      uint64_t v116 = &v73[8 * v109];
      int v74 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRootBase::trainOnce(v118, (uint64_t *)&v115);
      uint64_t v116 = v73;
      operator delete(v73);
      unsigned int v40 = v111;
      if (!v111) {
        goto LABEL_140;
      }
LABEL_138:
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      goto LABEL_140;
    }
    int v68 = 1;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
        goto LABEL_129;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
      uint64_t v119 = v110;
      uint64_t v120 = v111;
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(buf, 0, 24);
      if (v108 == __p)
      {
        uint64_t v87 = 0;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_197;
        }
        uint64_t v87 = (char *)operator new(__sz);
        *(void *)std::string buf = v87;
        *(void *)&buf[16] = &v87[8 * v109];
        memcpy(v87, __p, __sz);
        *(void *)&buf[8] = &v87[8 * v109];
        unsigned int v36 = v106;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
      int v88 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRootBase::trainOnce(&v119, (uint64_t *)buf);
      if (v87)
      {
        *(void *)&buf[8] = v87;
        operator delete(v87);
      }
      unsigned int v40 = v111;
      if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      ++v68;
      if (!v88) {
        break;
      }
      QuantizerManager<float,512>::lastTrainedQuantizer(block, v110);
      unsigned int v89 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
      unint64_t v90 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      if (v13 < v36 * (unint64_t)v89 * v36 * (unint64_t)v89 / 0x64) {
        goto LABEL_129;
      }
    }
LABEL_146:
    int v41 = __p;
    goto LABEL_147;
  }
  int v68 = 1;
LABEL_149:
  unsigned __int8 v77 = atomic_load((unsigned __int8 *)(v66 + 72));
  if ((v77 & 1) == 0)
  {
    uint64_t v98 = __si_assert_copy_extra_329();
    float v92 = v98;
    unint64_t v99 = "";
    if (v98) {
      unint64_t v99 = v98;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 814, "_training.test()", v99);
    goto LABEL_185;
  }
  if (*(void *)(v66 + 96))
  {
    int v78 = *(NSObject **)(v66 + 16);
    *(void *)block = MEMORY[0x1E4F143A8];
    uint64_t v148 = 0x40000000;
    *(void *)v149 = ___ZN16QuantizerManagerIfLi512EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v149[8] = &__block_descriptor_tmp_1019_6948;
    *(void *)&v149[16] = v66;
    dispatch_sync(v78, block);
  }
  atomic_store(0, (unsigned __int8 *)(v66 + 72));
  QuantizerManager<float,512>::sharedQuantizer(block, v66, 0);
  unsigned int v79 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
  int v80 = (std::__shared_weak_count *)v148;
  if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  int v81 = _SILogForLogForCategory(0);
  if (v101 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v82 = v81;
    if (os_signpost_enabled(v81))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v82, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  int v83 = *__error();
  int v84 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v85 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v13;
    LOWORD(v148) = 1024;
    *(_DWORD *)((char *)&v148 + 2) = v79;
    HIWORD(v148) = 1024;
    *(_DWORD *)v149 = v13 / v79;
    *(_WORD *)&v149[4] = 1024;
    *(_DWORD *)&v149[6] = v68;
    *(_WORD *)&v149[10] = 2048;
    *(double *)&v149[12] = v85 - Current;
    _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v83;
  *(void *)keyExistsAndHasValidFormat = *MEMORY[0x1E4FBA408];
  uint64_t v86 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v123 = v86;
  v124[0] = v104;
  if (SBYTE7(v126) < 0) {
    operator delete((void *)v125);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1880F90](&v128);
  if (v39)
  {
LABEL_88:
    while (v12 != v39)
    {
      int v59 = *(v12 - 1);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v12 -= 2;
    }
    operator delete(v39);
  }
LABEL_95:
  int v60 = v145;
  if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v41) {
    operator delete(v41);
  }
  if (v40)
  {
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

unsigned int *___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  uint64_t v5 = **((void **)a2 + 3);
  uint64_t result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(*(void *)(a1 + 32), a2[2], *((void **)a2 + 2), *a2, 0, *((float *)a2 + 1));
  *((void *)result + 256) = v5;
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a2 + 64));
    *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (*(void *)(a2 + 72))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(a2 + 64));
        int v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        if (v6) {
          break;
        }
        uint64_t v7 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a2 + 40)
                                                      + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(a2 + 64)
                                          + 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(void *)(a2 + 72) - 1;
        unint64_t v9 = *(void *)(a2 + 64) + 1;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v8;
        if (v9 >= 0x200)
        {
          operator delete(**(void ***)(a2 + 40));
          *(void *)(a2 + 40) += 8;
          uint64_t v8 = *(void *)(a2 + 72);
          unint64_t v9 = *(void *)(a2 + 64) - 256;
          *(void *)(a2 + 64) = v9;
        }
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v9);
          *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          if (*(void *)(a2 + 72)) {
            continue;
          }
        }
        return;
      }
      *(_DWORD *)(a1 + 4) = v6[1];
      uint64_t v11 = *v6;
      int v12 = *(void **)(*(void *)(a2 + 16) + 32);
      unint64_t v13 = v12[3] + v12[2] * v11;
      bit_vector_set_10635(v12 + 525, (v13 >> 20));
      unint64_t v14 = (v13 + 2064) >> 20;
      if (v14 > (v13 >> 20))
      {
        unsigned int v15 = (v13 >> 20) + 1;
        do
        {
          unint64_t v16 = v15;
          bit_vector_set_10635(v12 + 525, v15++);
        }
        while (v14 > v16);
      }
      unint64_t v17 = _windowsResolvePtr((uint64_t)(v12 + 5), v12[3] + v12[2] * v11, 2064);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(v17 + 2056);
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v17 + 2048;
    }
  }
}

unsigned int *IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  unsigned int v123 = a4;
  float v122 = a6;
  if (*(unsigned char *)(a1 + 160))
  {
    BOOL v96 = __si_assert_copy_extra_329();
    uint64_t v97 = v96;
    uint64_t v98 = "";
    if (v96) {
      uint64_t v98 = v96;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v98);
    goto LABEL_127;
  }
  if (!a2)
  {
    unint64_t v99 = __si_assert_copy_extra_329();
    uint64_t v97 = v99;
    int v100 = "";
    if (v99) {
      int v100 = v99;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v100);
    goto LABEL_127;
  }
  if (a5)
  {
    uint64_t v9 = a4;
    if (a4 == -1) {
      goto LABEL_114;
    }
    goto LABEL_32;
  }
  unsigned int Vector = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(a1, (uint64_t)a3, (int *)&v123, &v122, a2);
  uint64_t v9 = v123;
  if (v123 == -1)
  {
LABEL_114:
    unint64_t v101 = __si_assert_copy_extra_329();
    uint64_t v102 = v101;
    uint64_t v103 = "";
    if (v101) {
      uint64_t v103 = v101;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v103);
    goto LABEL_117;
  }
  if (Vector == -1)
  {
LABEL_32:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 88);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v120 = a2;
    unsigned int v30 = *(std::__shared_weak_count **)(a1 + 104);
    uint64_t v118 = *(_DWORD **)(a1 + 96);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v116 = v30;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v32 = *(void **)(v31 + 32);
    uint64_t v115 = (uint64_t)(v32 + 1);
    unint64_t v33 = v32[2];
    uint64_t v34 = v32[7];
    uint64_t v35 = v34 + v33;
    __int16 v117 = v29;
    if (v34 + v33 >= v32[6])
    {
      if (!_storage_array_Expand(v115))
      {
        unint64_t v40 = 0;
        goto LABEL_41;
      }
      uint64_t v34 = v32[7];
      uint64_t v35 = v34 + v33;
    }
    v32[7] = v35;
    unint64_t v36 = v32[3];
    bit_vector_set_10635(v32 + 525, 0);
    if (v36 >= 0x100000)
    {
      unint64_t v37 = v36 >> 20;
      unsigned int v38 = 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v32 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = (v34 - v32[3]) / v33;
LABEL_41:
    unint64_t v41 = v32[2];
    if (v33 <= 0x80F && v41 <= 0x80F)
    {
      LODWORD(v42) = 2064;
      while (1)
      {
        unint64_t v43 = v32[7] + v41;
        if (v43 < v32[6]) {
          goto LABEL_46;
        }
        if (_storage_array_Expand(v115)) {
          break;
        }
LABEL_44:
        unint64_t v41 = v32[2];
        unint64_t v42 = (v42 - v41);
        if (v41 >= v42) {
          goto LABEL_52;
        }
      }
      unint64_t v43 = v32[7] + v41;
LABEL_46:
      v32[7] = v43;
      unint64_t v44 = v32[3];
      bit_vector_set_10635(v32 + 525, 0);
      if (v44 >= 0x100000)
      {
        unint64_t v45 = v44 >> 20;
        unsigned int v46 = 1;
        do
        {
          unint64_t v47 = v46;
          bit_vector_set_10635(v32 + 525, v46++);
        }
        while (v45 > v47);
      }
      goto LABEL_44;
    }
LABEL_52:
    unint64_t v48 = v32[3] + v41 * v40;
    uint64_t v49 = v32 + 525;
    bit_vector_set_10635(v49, (v48 >> 20));
    unint64_t v50 = (v48 + 2064) >> 20;
    if (v50 > (v48 >> 20))
    {
      unsigned int v51 = (v48 >> 20) + 1;
      do
      {
        unint64_t v52 = v51;
        bit_vector_set_10635(v49, v51++);
      }
      while (v50 > v52);
    }
    uint64_t v53 = *(unsigned int *)(v31 + 40);
    unint64_t v54 = v40;
    if (v40 != v53)
    {
      int v55 = *__error();
      int v56 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        int v93 = *(_DWORD *)(v31 + 40);
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "newEntry";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 1882;
        *(_WORD *)&v128[4] = 2048;
        *(void *)&v128[6] = v40;
        *(_WORD *)&v128[14] = 1024;
        *(_DWORD *)&v128[16] = v93;
        _os_log_error_impl(&dword_1BD672000, v56, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v55;
      int v57 = *(void **)(v31 + 32);
      int v58 = *__error();
      int v59 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = v57[6];
        uint64_t v61 = v57[7];
        uint64_t v63 = v57[2];
        uint64_t v62 = v57[3];
        *(_DWORD *)std::string __p = 134219008;
        *(void *)&__p[4] = v57;
        __int16 v127 = 2048;
        *(void *)uint64_t v128 = v60;
        *(_WORD *)&v128[8] = 2048;
        *(void *)&v128[10] = v61;
        *(_WORD *)&v128[18] = 2048;
        *(void *)long long v129 = v62;
        *(_WORD *)&v129[8] = 2048;
        uint64_t v130 = v63;
        _os_log_impl(&dword_1BD672000, v59, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v58;
      unint64_t v54 = *(unsigned int *)(v31 + 40);
      LODWORD(v53) = *(_DWORD *)(v31 + 40);
    }
    if (v40 == v54)
    {
      *(_DWORD *)(v31 + 40) = v53 + 1;
      uint64_t v64 = *(void **)(v31 + 32);
      unint64_t v65 = v64[3] + v64[2] * v40;
      bit_vector_set_10635(v64 + 525, (v65 >> 20));
      unint64_t v66 = (v65 + 2064) >> 20;
      if (v66 > (v65 >> 20))
      {
        unsigned int v67 = (v65 >> 20) + 1;
        do
        {
          unint64_t v68 = v67;
          bit_vector_set_10635(v64 + 525, v67++);
        }
        while (v66 > v68);
      }
      unint64_t v69 = _windowsResolvePtr((uint64_t)(v64 + 5), v64[3] + v64[2] * v40, 2064);
      memcpy((void *)v69, __src, 0x800uLL);
      *(void *)(v69 + 2048) = 0;
      *(_DWORD *)(v69 + 2056) = v120;
      if (*(_DWORD *)(v31 + 40) == 1) {
        *(_DWORD *)(v31 + 52) = v120;
      }
      *(_DWORD *)(v31 + 56) = v120;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(void *)v118 + 56))(v118, v9, v40, v122);
      uint64_t v70 = *(void *)(a1 + 48);
      if (v118[18] == *(_DWORD *)(v70 + 40))
      {
        uint64_t v71 = *(void **)(v70 + 32);
        unint64_t v72 = v71[3] + v71[2] * v40;
        bit_vector_set_10635(v71 + 525, (v72 >> 20));
        unint64_t v73 = (v72 + 2064) >> 20;
        if (v73 > (v72 >> 20))
        {
          unsigned int v74 = (v72 >> 20) + 1;
          do
          {
            unint64_t v75 = v74;
            bit_vector_set_10635(v71 + 525, v74++);
          }
          while (v73 > v75);
        }
        unint64_t v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v71 + 5), v71[3] + v71[2] * v40, 2064);
        data_map_set_offset_for_id(*(void *)(a1 + 144), v120, (16 * v40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4* (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
        return v17;
      }
      uint64_t v107 = __si_assert_copy_extra_329();
      uint64_t v97 = v107;
      v108 = "";
      if (v107) {
        v108 = v107;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v108);
    }
    else
    {
      uint64_t v105 = __si_assert_copy_extra_329();
      uint64_t v97 = v105;
      unsigned int v106 = "";
      if (v105) {
        unsigned int v106 = v105;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v106);
    }
LABEL_127:
    free(v97);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v12 = Vector;
  unint64_t v13 = v11[3] + v11[2] * Vector;
  bit_vector_set_10635(v11 + 525, (v13 >> 20));
  unint64_t v14 = (v13 + 2064) >> 20;
  if (v14 > (v13 >> 20))
  {
    unsigned int v15 = (v13 >> 20) + 1;
    do
    {
      unint64_t v16 = v15;
      bit_vector_set_10635(v11 + 525, v15++);
    }
    while (v14 > v16);
  }
  unint64_t v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v11 + 5), v11[3] + v11[2] * v12, 2064);
  if (v17[514] != a2)
  {
    uint64_t v121 = 0;
    data = (const void *)data_map_get_data(*(void *)(a1 + 144), a2, &v121);
    int v19 = *__error();
    __int16 v20 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v127 = 1024;
      *(_DWORD *)uint64_t v128 = 2586;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = a2;
      *(_WORD *)&v128[10] = 2048;
      *(void *)&v128[12] = data;
      *(_WORD *)long long v129 = 2048;
      *(void *)&v129[2] = v121;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v19;
    if (v121 < 1)
    {
      int v26 = *__error();
      unsigned int v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2595;
        _os_log_error_impl(&dword_1BD672000, v76, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v121 != 2048)
      {
        v111 = __si_assert_copy_extra_329();
        uint64_t v97 = v111;
        uint64_t v112 = "";
        if (v111) {
          uint64_t v112 = v111;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v112);
        goto LABEL_127;
      }
      if (!data || !memcmp(data, a3, 0x800uLL))
      {
LABEL_80:
        unsigned __int8 v77 = (const void *)data_map_get_data(*(void *)(a1 + 144), v17[514], &v121);
        int v78 = *__error();
        unsigned int v79 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          unsigned int v94 = v17[514];
          *(_DWORD *)std::string __p = 136316162;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2598;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = v94;
          *(_WORD *)&v128[10] = 2048;
          *(void *)&v128[12] = v77;
          *(_WORD *)long long v129 = 2048;
          *(void *)&v129[2] = v121;
          _os_log_error_impl(&dword_1BD672000, v79, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v78;
        if (v121 < 1)
        {
          int v86 = *__error();
          unsigned int v89 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2607;
            _os_log_error_impl(&dword_1BD672000, v89, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v121 != 2048)
          {
            long long v113 = __si_assert_copy_extra_329();
            uint64_t v97 = v113;
            unsigned int v114 = "";
            if (v113) {
              unsigned int v114 = v113;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v114);
            goto LABEL_127;
          }
          size_t v80 = 2048;
          if (!v77 || !memcmp(v77, v17, 0x800uLL)) {
            goto LABEL_103;
          }
          int v81 = *__error();
          int v82 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2602;
            _os_log_error_impl(&dword_1BD672000, v82, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v81;
          int v83 = *__error();
          int v84 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v77, v121);
            CFAbsoluteTime v85 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v85;
            _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          *__error() = v83;
          int v86 = *__error();
          uint64_t v87 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v17, v121);
            int v88 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v88;
            _os_log_impl(&dword_1BD672000, v87, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        *__error() = v86;
        size_t v80 = v121;
LABEL_103:
        if (memcmp(a3, v17, v80))
        {
          unint64_t v109 = __si_assert_copy_extra_329();
          uint64_t v102 = v109;
          uint64_t v110 = "";
          if (v109) {
            uint64_t v110 = v109;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v110);
LABEL_117:
          free(v102);
          if (__valid_fs(-1)) {
            uint64_t v104 = 2989;
          }
          else {
            uint64_t v104 = 3072;
          }
          *(_DWORD *)uint64_t v104 = -559038737;
          abort();
        }
        int v90 = *__error();
        float v91 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
        {
          unsigned int v95 = v17[514];
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2610;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = a2;
          *(_WORD *)&v128[10] = 1024;
          *(_DWORD *)&v128[12] = v95;
          _os_log_fault_impl(&dword_1BD672000, v91, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v90;
        return v17;
      }
      int v21 = *__error();
      uint64_t v22 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2590;
        _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v21;
      int v23 = *__error();
      uint64_t v24 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v121);
        uint64_t v25 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v25;
        _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v23;
      int v26 = *__error();
      uint64_t v27 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v121);
        uint64_t v28 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v28;
        _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v26;
    goto LABEL_80;
  }
  return v17;
}

uint64_t IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  uint64_t v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *(_DWORD **)(a1 + 96);
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      unint64_t v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          int v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          uint64_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      int v23 = __si_assert_copy_extra_329();
      int v21 = v23;
      uint64_t v24 = "";
      if (v23) {
        uint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      __int16 v20 = __si_assert_copy_extra_329();
      int v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  uint64_t v34 = 0;
  uint64_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIfLi512EERjRfj_block_invoke;
  v32[3] = &unk_1E6345520;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIfLi512EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156)) {
    goto LABEL_18;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (!v11 && v12 > v13) {
    return result;
  }
  int v15 = *(_DWORD *)(result + 64);
  if (v15)
  {
    unint64_t v16 = *(void **)(*(void *)(v5 + 48) + 32);
    unint64_t v17 = v16[3] + v16[2] * v6;
    bit_vector_set_10635(v16 + 525, (v17 >> 20));
    unint64_t v18 = (v17 + 2064) >> 20;
    if (v18 > (v17 >> 20))
    {
      unsigned int v19 = (v17 >> 20) + 1;
      do
      {
        unint64_t v20 = v19;
        bit_vector_set_10635(v16 + 525, v19++);
      }
      while (v18 > v20);
    }
    uint64_t result = _windowsResolvePtr((uint64_t)(v16 + 5), v16[3] + v16[2] * v6, 2064);
    uint64_t v4 = a4;
    if (v15 != *(_DWORD *)(result + 2056)) {
      return result;
    }
    *(float *)&uint64_t v6 = *a3;
  }
  int v21 = *(const void **)(v8 + 56);
  uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 32);
  unint64_t v23 = v22[3] + v22[2] * v6;
  bit_vector_set_10635(v22 + 525, (v23 >> 20));
  unint64_t v24 = (v23 + 2064) >> 20;
  if (v24 > (v23 >> 20))
  {
    unsigned int v25 = (v23 >> 20) + 1;
    do
    {
      unint64_t v26 = v25;
      bit_vector_set_10635(v22 + 525, v25++);
    }
    while (v24 > v26);
  }
  uint64_t v27 = (const void *)_windowsResolvePtr((uint64_t)(v22 + 5), v22[3] + v22[2] * v6, 2064);
  uint64_t result = memcmp(v21, v27, 0x800uLL);
  if (!result)
  {
    *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_18:
    unsigned char *v4 = 1;
  }
  return result;
}

uint64_t IVFVectorIndexTemplate<float,512>::IVFVectorIndexRootBase::trainOnce(uint64_t *a1, uint64_t *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CFAbsoluteTimeGetCurrent();
  uint64_t v56 = 0;
  int v57 = 0;
  QuantizerManager<float,512>::lastTrainedQuantizer(&v56, *a1);
  uint64_t v50 = *a2;
  uint64_t v51 = a2[1];
  uint64_t v4 = v51 - *a2;
  if (v51 == *a2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (v4 < 0) {
      goto LABEL_86;
    }
    uint64_t v5 = operator new((unint64_t)v4 >> 1);
    bzero(v5, (unint64_t)v4 >> 1);
  }
  unint64_t v49 = v4 >> 3;
  int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
  if (v51 != v50)
  {
    uint64_t v6 = 0;
    if (v49 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v49;
    }
    while (1)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 16))(v59);
      uint64_t v8 = v56;
      uint64_t v10 = *(void *)v59;
      float v9 = *(std::__shared_weak_count **)&v59[8];
      if (*(void *)&v59[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v59[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10 != v8) {
        break;
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 24))(v59);
      BOOL v11 = *(std::__shared_weak_count **)&v59[8];
      *((_DWORD *)v5 + v6) = *(_DWORD *)(*(void *)v59 + 72);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 24))(v59);
      float v12 = *(std::__shared_weak_count **)&v59[8];
      int v13 = *(_DWORD *)(*(void *)v59 + 68);
      if (*(void *)&v59[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v59[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v13 != v52)
      {
        unint64_t v43 = __si_assert_copy_extra_329();
        unint64_t v44 = v43;
        unint64_t v45 = "";
        if (v43) {
          unint64_t v45 = v43;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2086, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v45);
        free(v44);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 == ++v6) {
        goto LABEL_21;
      }
    }
    unint64_t v39 = __si_assert_copy_extra_329();
    unint64_t v40 = v39;
    unint64_t v41 = "";
    if (v39) {
      unint64_t v41 = v39;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2084, "vectorIndexes[i]->getQuantizer() == quantizer", v41);
LABEL_73:
    free(v40);
    if (__valid_fs(-1)) {
      uint64_t v42 = 2989;
    }
    else {
      uint64_t v42 = 3072;
    }
    *(_DWORD *)uint64_t v42 = -559038737;
    abort();
  }
LABEL_21:
  uint64_t v14 = *a1;
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)(*a1 + 72));
  if ((v15 & 1) == 0)
  {
    unint64_t v47 = __si_assert_copy_extra_329();
    unint64_t v40 = v47;
    unint64_t v48 = "";
    if (v47) {
      unint64_t v48 = v47;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 772, "_training.test()", v48);
    goto LABEL_73;
  }
  if (*(void *)(v14 + 96))
  {
    unint64_t v16 = *(NSObject **)(v14 + 16);
    *(void *)int v59 = MEMORY[0x1E4F143A8];
    *(void *)&v59[8] = 0x40000000;
    *(void *)&v59[16] = ___ZN16QuantizerManagerIfLi512EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v59[24] = &__block_descriptor_tmp_1019_6948;
    *(void *)&v59[32] = v14;
    dispatch_sync(v16, v59);
  }
  uint64_t v17 = *(void *)(v14 + 80);
  if (v17) {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17) + 1;
  }
  else {
    int v18 = 1;
  }
  int v19 = *(char *)(v14 + 71);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v14 + 71);
  }
  else {
    size_t v20 = *(void *)(v14 + 56);
  }
  unint64_t v21 = v20 + 1;
  if (v20 + 1 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_86:
  }
    abort();
  if (v21 >= 0x17)
  {
    uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v23 = v21 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = (std::string *)operator new(v23 + 1);
    v53[0].__r_.__value_.__l.__size_ = v20 + 1;
    v53[0].__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    v53[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  }
  else
  {
    memset(v53, 0, 24);
    uint64_t v22 = v53;
    *((unsigned char *)&v53[0].__r_.__value_.__s + 23) = v20 + 1;
    if (!v20) {
      goto LABEL_41;
    }
  }
  if (v19 >= 0) {
    unsigned int v25 = (const void *)(v14 + 48);
  }
  else {
    unsigned int v25 = *(const void **)(v14 + 48);
  }
  memmove(v22, v25, v20);
LABEL_41:
  *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v20) = 46;
  std::to_string(&v58, v18);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v26 = &v58;
  }
  else {
    unint64_t v26 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  int v28 = std::string::append(v53, (const std::string::value_type *)v26, size);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v59 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v59[16] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int v30 = std::string::append((std::string *)v59, ".quantizer");
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  long long v54 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  uint64_t v55 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((v59[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_56:
    operator delete(v58.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_57;
  }
  operator delete(*(void **)v59);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_56;
  }
LABEL_49:
  if ((SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_50;
  }
LABEL_57:
  operator delete(v53[0].__r_.__value_.__l.__data_);
LABEL_50:
  if (v55 >= 0) {
    uint64_t v32 = (const char *)&v54;
  }
  else {
    uint64_t v32 = (const char *)v54;
  }
  if (QuantizerManager<float,768>::createFdPtrForFile(v14, v32)) {
    operator new();
  }
  int v33 = *__error();
  uint64_t v34 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
  {
    int v37 = &v54;
    if (v55 < 0) {
      int v37 = (long long *)v54;
    }
    int v38 = *(_DWORD *)v14;
    *(_DWORD *)int v59 = 136315906;
    *(void *)&v59[4] = "newQuantizer";
    *(_WORD *)&v59[12] = 1024;
    *(_DWORD *)&v59[14] = 792;
    *(_WORD *)&v59[18] = 2080;
    *(void *)&v59[20] = v37;
    *(_WORD *)&v59[28] = 1024;
    *(_DWORD *)&v59[30] = v38;
    _os_log_fault_impl(&dword_1BD672000, v34, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", v59, 0x22u);
  }
  *__error() = v33;
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  if (v5) {
    operator delete(v5);
  }
  uint64_t v35 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return 0;
}

void *QuantizerManager<float,512>::lastTrainedQuantizer(void *result, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    uint64_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    uint64_t v8 = "";
    if (v6) {
      uint64_t v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 750, "_training.test()", v8);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v3 = *(void *)(a2 + 96);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 104);
    unsigned int *result = v3;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5)
  {
    uint64_t v4 = *(void *)(a2 + 88);
    unsigned int *result = v5;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  if (ZeroVectorQuantizer<float,512>::sharedInstance(void)::onceToken != -1)
  {
    float v9 = result;
    dispatch_once(&ZeroVectorQuantizer<float,512>::sharedInstance(void)::onceToken, &__block_literal_global_923);
    uint64_t result = v9;
  }
  uint64_t v4 = *(void *)(ZeroVectorQuantizer<float,512>::sharedInstance(void)::zvq + 8);
  unsigned int *result = *(void *)ZeroVectorQuantizer<float,512>::sharedInstance(void)::zvq;
  result[1] = v4;
  if (v4) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  return result;
}

void ___ZN16QuantizerManagerIfLi512EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 80);
  if (!v2) {
    goto LABEL_103;
  }
  int v3 = *(char *)(v1 + 71);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v4 = *(void *)(v1 + 56);
  }
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_138:
  }
    abort();
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_16;
    }
  }
  if (v3 >= 0) {
    float v9 = (const void *)(v1 + 48);
  }
  else {
    float v9 = *(const void **)(v1 + 48);
  }
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v15 = std::string::append(&v72, ".quantizer");
  int64_t v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v73 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v74 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_34:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_34;
  }
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_35:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  uint64_t v17 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    int v18 = v73;
  }
  else {
    int v18 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1C1880BF0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(void *)(v1 + 80) + 57));
  uint64_t v20 = *(void *)(v1 + 80);
  int v19 = *(std::__shared_weak_count **)(v1 + 88);
  uint64_t v21 = v20;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(void *)(v1 + 80);
  }
  uint64_t v22 = (uint64_t *)(v1 + 112);
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
  int v24 = v23;
  unint64_t v25 = v23;
  unint64_t v26 = *(void *)(v1 + 120);
  if (v26)
  {
    uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v28 = v23;
      if (v26 <= v23) {
        unint64_t v28 = v23 % v26;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v23;
    }
    std::string::size_type v29 = *(void ***)(*v22 + 8 * v28);
    if (v29)
    {
      int v30 = *v29;
      if (*v29)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v32 = *((void *)v30 + 1);
            if (v32 == v23)
            {
              if (*((_DWORD *)v30 + 4) == v23) {
                goto LABEL_92;
              }
            }
            else if ((v32 & (v26 - 1)) != v28)
            {
              goto LABEL_54;
            }
            int v30 = *(void **)v30;
            if (!v30) {
              goto LABEL_54;
            }
          }
        }
        do
        {
          unint64_t v31 = *((void *)v30 + 1);
          if (v31 == v23)
          {
            if (*((_DWORD *)v30 + 4) == v23) {
              goto LABEL_92;
            }
          }
          else
          {
            if (v31 >= v26) {
              v31 %= v26;
            }
            if (v31 != v28) {
              break;
            }
          }
          int v30 = *(void **)v30;
        }
        while (v30);
      }
    }
  }
  else
  {
    unint64_t v28 = 0;
  }
LABEL_54:
  int v30 = operator new(0x28uLL);
  *(void *)int v30 = 0;
  *((void *)v30 + 1) = v25;
  *((_DWORD *)v30 + 4) = v24;
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = 0;
  float v33 = (float)(unint64_t)(*(void *)(v1 + 136) + 1);
  float v34 = *(float *)(v1 + 144);
  if (!v26 || (float)(v34 * (float)v26) < v33)
  {
    BOOL v35 = 1;
    if (v26 >= 3) {
      BOOL v35 = (v26 & (v26 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v26);
    unint64_t v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v26 = *(void *)(v1 + 120);
    }
    if (prime > v26) {
      goto LABEL_76;
    }
    if (prime < v26)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v26 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < v26) {
LABEL_76:
      }
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    unint64_t v26 = *(void *)(v1 + 120);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v26 <= v25) {
        unint64_t v28 = v25 % v26;
      }
      else {
        unint64_t v28 = v25;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v25;
    }
  }
  uint64_t v42 = *v22;
  unint64_t v43 = *(void **)(*v22 + 8 * v28);
  if (v43)
  {
    *(void *)int v30 = *v43;
LABEL_90:
    *unint64_t v43 = v30;
    goto LABEL_91;
  }
  *(void *)int v30 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = v30;
  *(void *)(v42 + 8 * v28) = v1 + 128;
  if (*(void *)v30)
  {
    unint64_t v44 = *(void *)(*(void *)v30 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v44 >= v26) {
        v44 %= v26;
      }
    }
    else
    {
      v44 &= v26 - 1;
    }
    unint64_t v43 = (void *)(*v22 + 8 * v44);
    goto LABEL_90;
  }
LABEL_91:
  ++*(void *)(v1 + 136);
LABEL_92:
  if (v19)
  {
    unint64_t v45 = std::__shared_weak_count::lock(v19);
    unsigned int v46 = (atomic_ullong *)v45;
    if (!v45)
    {
      uint64_t v20 = 0;
      goto LABEL_98;
    }
    atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v19);
    if (!atomic_fetch_add(v46 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v46 + 16))(v46);
      int v19 = (std::__shared_weak_count *)v46;
LABEL_98:
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    uint64_t v20 = 0;
    unsigned int v46 = 0;
  }
  unint64_t v47 = (std::__shared_weak_count *)*((void *)v30 + 4);
  *((void *)v30 + 3) = v20;
  *((void *)v30 + 4) = v46;
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
LABEL_103:
  int v48 = *(char *)(v1 + 71);
  if (v48 >= 0) {
    size_t v49 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v49 = *(void *)(v1 + 56);
  }
  unint64_t v50 = v49 + 10;
  if (v49 + 10 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_138;
  }
  if (v50 >= 0x17)
  {
    uint64_t v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v52 = v50 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = operator new(v52 + 1);
    v73[1] = (void *)(v49 + 10);
    int64_t v74 = v53 | 0x8000000000000000;
    v73[0] = v51;
  }
  else
  {
    v73[1] = 0;
    int64_t v74 = 0;
    v73[0] = 0;
    uint64_t v51 = v73;
    HIBYTE(v74) = v49 + 10;
    if (!v49) {
      goto LABEL_117;
    }
  }
  if (v48 >= 0) {
    long long v54 = (const void *)(v1 + 48);
  }
  else {
    long long v54 = *(const void **)(v1 + 48);
  }
  memmove(v51, v54, v49);
LABEL_117:
  strcpy((char *)v51 + v49, ".quantizer");
  uint64_t v56 = *(void *)(v1 + 96);
  uint64_t v55 = *(void *)(v1 + 104);
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  int v57 = *(std::__shared_weak_count **)(v1 + 88);
  *(void *)(v1 + 80) = v56;
  *(void *)(v1 + 88) = v55;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  uint64_t v58 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    int v59 = v73;
  }
  else {
    int v59 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v58 + 40) + 40), (const char *)v59);
  MEMORY[0x1C1880BF0](v58 + 8, v59);
  uint64_t v60 = *(void *)(v1 + 80);
  uint64_t v61 = *(unint64_t **)(v60 + 40);
  *uint64_t v61 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v61);
  storage_array_SyncPages(*(void *)(v60 + 40) + 8, *(void *)(v60 + 40) + 4200);
  storage_array_Truncate((uint64_t *)(*(void *)(v60 + 40) + 8));
  uint64_t v62 = *(void *)(v60 + 40);
  fd_make_readonly(*(void *)(v62 + 40));
  uint64_t v63 = *(void *)(v62 + 40);
  if (v63)
  {
    do
    {
      int v64 = fchmodat(*(_DWORD *)(v63 + 44), *(const char **)(v63 + 72), 0x100u, 2048);
      uint64_t v65 = g_prot_error_callback;
      if (v64 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v67 = *(unsigned int *)(v63 + 40);
      unint64_t v68 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v65 + 16))(v65, v67, *v68, 19) & 1) != 0);
  }
  *(unsigned char *)(v60 + 56) = 1;
  unint64_t v69 = *(std::__shared_weak_count **)(v1 + 104);
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  if (!v69 || atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v74) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_134;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if (SHIBYTE(v74) < 0) {
LABEL_134:
  }
    operator delete(v73[0]);
}

float ___ZN22IVFVectorIndexTemplateIfLi512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIfLi512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  uint64_t v6 = (const void *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    std::string __p = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 80))(&__p);
    if (*((float *)__p + 1) < a3[1]) {
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p;
    }
    int v13 = __p;
    operator delete(__p);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = (float *)(v7 + 2052 * a2);
  float v9 = v8 + 512;
  float v10 = v8[512];
  if (v10 == 0.0)
  {
    memcpy((void *)(v7 + 2052 * a2), v6, 0x800uLL);
  }
  else
  {
    vDSP_vavlin((const float *)v6, 1, v8 + 512, v8, 1, 0x200uLL);
    float v10 = *v9;
  }
  float result = v10 + 1.0;
  *float v9 = v10 + 1.0;
  return result;
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRootBase::trainOnce(std::shared_ptr<QuantizerManager<float,512>>,std::vector<IVFVectorIndexTemplate<float,512>::IVFVectorIndexRootBase*,std::allocator<IVFVectorIndexTemplate<float,512>::IVFVectorIndexRootBase*>>,unsigned int,unsigned int)::{lambda(void *,unsigned long)#1}::__invoke(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1[1] + 8 * a2);
  unint64_t v5 = (std::__shared_weak_count *)a1[3];
  BOOL v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v12);
  uint64_t v6 = (void *)(*a1 + 16 * a2);
  uint64_t v8 = v12;
  uint64_t v7 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v9 = (std::__shared_weak_count *)v6[1];
  *uint64_t v6 = v8;
  v6[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    float v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    float v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void __destroy_helper_block_8_48c61_ZTSNSt3__110shared_ptrIA_23IVFVectorMeanCalculatorILi512EEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_8_48c61_ZTSNSt3__110shared_ptrIA_23IVFVectorMeanCalculatorILi512EEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<IVFVectorMeanCalculator<512> *,std::shared_ptr<IVFVectorMeanCalculator<512>[]>::__shared_ptr_default_delete<IVFVectorMeanCalculator<512>[],IVFVectorMeanCalculator<512>>,std::allocator<IVFVectorMeanCalculator<512>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1C1880FE0);
  }
  return result;
}

void std::__shared_ptr_pointer<IVFVectorMeanCalculator<512> *,std::shared_ptr<IVFVectorMeanCalculator<512>[]>::__shared_ptr_default_delete<IVFVectorMeanCalculator<512>[],IVFVectorMeanCalculator<512>>,std::allocator<IVFVectorMeanCalculator<512>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t ArrayVectorQuantizer<float,512>::getCentroid(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2 >= (unint64_t)((*(void *)(a1 + 48) - v2) >> 11))
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    unint64_t v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 452, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + ((unint64_t)a2 << 11);
}

uint64_t ArrayVectorQuantizer<float,512>::count(uint64_t a1)
{
  return (*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 11;
}

void ArrayVectorQuantizer<float,512>::~ArrayVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815848;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t ArrayVectorQuantizer<float,512>::~ArrayVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815848;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::compact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v10 = *__error();
  BOOL v11 = _SILogForLogForCategory(16);
  os_log_type_t v12 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v11, v12))
  {
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v13 = a4;
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v34;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v14;
    a4 = v13;
    HIWORD(v55) = 1024;
    LODWORD(v56) = v15;
    WORD2(v56) = 1024;
    *(_DWORD *)((char *)&v56 + 6) = v16;
    _os_log_impl(&dword_1BD672000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    std::string::size_type v29 = __si_assert_copy_extra_329();
    int v30 = v29;
    unint64_t v31 = "";
    if (v29) {
      unint64_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v31);
LABEL_49:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  long long v37 = *a5;
  long long v38 = a5[1];
  uint64_t v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    uint64_t v32 = __si_assert_copy_extra_329();
    int v30 = v32;
    float v33 = "";
    if (v32) {
      float v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "target->nVectors() == 0", v33);
    goto LABEL_49;
  }
  int v18 = operator new(8uLL);
  __p[0] = v18;
  *int v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v19 = *(void *)(a1 + 128);
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 136);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a1 + 144);
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 152);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v47[0] = v19;
  v47[1] = (uint64_t)v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v47);
    uint64_t v23 = a3;
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v47);
    uint64_t v23 = a3;
  }
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2000000000;
  char v46 = 1;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v42 = 0u;
  uint64_t v40 = v21;
  uint64_t v41 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(void *)(a1 + 96);
  unint64_t v25 = *(std::__shared_weak_count **)(a1 + 104);
  v39[0] = v24;
  v39[1] = v25;
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
  }
  unint64_t v26 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v55 = 0x40000000;
  *(void *)&long long v56 = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((void *)&v56 + 1) = &unk_1E6345B88;
  int v57 = v45;
  uint64_t v58 = v23;
  uint64_t v59 = a4;
  uint64_t v60 = v17;
  uint64_t v61 = a6;
  long long v62 = v37;
  long long v63 = v38;
  long long v52 = 0u;
  long long v53 = 0u;
  char v51 = 0;
  do
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v49, (uint64_t)&v42);
    long long v52 = v49;
    long long v53 = v50;
    if (!(void)v50) {
      break;
    }
    ((void (*)(uint8_t *, long long *, char *))v56)(buf, &v52, &v51);
  }
  while (!v51);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v44);
  uint8x8_t v27 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v28 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  _Block_object_dispose(v45, 8);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

uint64_t ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *v6;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      unsigned int v11 = uint32_map_get(v7, *v6);
      uint64_t v8 = *(void *)storageResolvePtr(v10, 8 * v11, 8, 1);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(*(void *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  uint64_t result = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64)) {
    uint64_t result = (*(uint64_t (**)(void))(a1 + 88))(*(void *)(a1 + 96));
  }
  *a3 = result;
  return result;
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_log_type_t v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v12);
  if (a5 == -1)
  {
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    int v18 = a3;
    uint64_t v19 = 0xFFFFFFFFLL;
    float v20 = a6;
    char v21 = 0;
  }
  else
  {
    if (*(_DWORD *)(v15 + 68) <= a5)
    {
      uint64_t v22 = __si_assert_copy_extra_329();
      uint64_t v23 = v22;
      uint64_t v24 = "";
      if (v22) {
        uint64_t v24 = v22;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2728, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v24);
      free(v23);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    int v18 = a3;
    uint64_t v19 = a5;
    float v20 = a6;
    char v21 = 1;
  }
  *((void *)IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v16, v17, v18, v19, v21, v20)+ 256) = a4;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13) {
      return;
    }
  }
  else if (!v13)
  {
    return;
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::flush(uint64_t a1, uint64_t a2)
{
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 144);
  unsigned int v11 = *(std::__shared_weak_count **)(a1 + 152);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  unint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  uint64_t v19 = ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  float v20 = &unk_1E6345B60;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    v19((uint64_t)v18, (uint64_t)&v32, (BOOL *)&v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result = (*(uint64_t (**)(float))(*(void *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  unsigned int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v16) = 1024;
      *(_DWORD *)((char *)&v16 + 2) = v8;
      HIWORD(v16) = 1024;
      *(_DWORD *)int v17 = v9;
      *(_WORD *)&v17[4] = 1024;
      *(_DWORD *)&v17[6] = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    unsigned int v11 = operator new(0x10uLL);
    uint64_t v16 = v11 + 2;
    *(void *)int v17 = v11 + 2;
    *unsigned int v11 = a1 + 48;
    v11[1] = a2 + 48;
    *(void *)std::string buf = v11;
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v11);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v12 = __si_assert_copy_extra_329();
  uint64_t v13 = v12;
  int v14 = "";
  if (v12) {
    int v14 = v12;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
  free(v13);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a2 + 64));
    *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (*(void *)(a2 + 72))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(a2 + 64));
        os_log_type_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        if (v6) {
          break;
        }
        int v7 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a2 + 40)
                                                      + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(a2 + 64)
                                          + 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(void *)(a2 + 72) - 1;
        unint64_t v9 = *(void *)(a2 + 64) + 1;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v8;
        if (v9 >= 0x200)
        {
          operator delete(**(void ***)(a2 + 40));
          *(void *)(a2 + 40) += 8;
          uint64_t v8 = *(void *)(a2 + 72);
          unint64_t v9 = *(void *)(a2 + 64) - 256;
          *(void *)(a2 + 64) = v9;
        }
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v9);
          *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          if (*(void *)(a2 + 72)) {
            continue;
          }
        }
        return;
      }
      *(_DWORD *)(a1 + 4) = v6[1];
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a2 + 16) + 16), *v6, 2068);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(Ptr + 2064);
      *(void *)(a1 + 16) = Ptr;
      *(void *)(a1 + 24) = Ptr + 2048;
    }
  }
}

int *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSet(int *result, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (int v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    uint64_t v5 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v5;
    int v7 = "";
    if (v5) {
      int v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (*(uint64_t (**)(int *))(*(void *)v3 + 16))(v3);
      int v11 = (*(uint64_t (**)(int *))(*(void *)v3 + 24))(v3);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v17 = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      __int16 v20 = 1024;
      int v21 = v12;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    uint64_t result = __error();
    unsigned int *result = v8;
  }
  uint64_t v4 = *(void *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    int v14 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v14;
    int v15 = "";
    if (v14) {
      int v15 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

unint64_t IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    uint64_t v5 = v4;
    os_log_type_t v6 = "";
    if (v4) {
      os_log_type_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1914, "offset < store->endOffset()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void **)(a1 + 16);
  return vi_onefixedsize_memory_allocator::getPtr(v2, a2, 2068);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSet(uint64_t a1, uint64_t a2)
{
  v18[254] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v8;
      HIWORD(v17) = 1024;
      LODWORD(v18[0]) = v9;
      WORD2(v18[0]) = 1024;
      *(_DWORD *)((char *)v18 + 6) = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    uint64_t v11 = a2 + 48;
    int v12 = operator new(0x10uLL);
    int v17 = v12 + 2;
    v18[0] = v12 + 2;
    void *v12 = a1 + 48;
    v12[1] = v11;
    *(void *)std::string buf = v12;
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v12);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v11);
  }
  int v13 = __si_assert_copy_extra_329();
  int v14 = v13;
  int v15 = "";
  if (v13) {
    int v15 = v13;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
  free(v14);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::train(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    long long v33 = __si_assert_copy_extra_329();
    int v34 = v33;
    BOOL v35 = "";
    if (v33) {
      BOOL v35 = v33;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v35);
    goto LABEL_55;
  }
  if (*v3 != a1)
  {
    unint64_t v36 = __si_assert_copy_extra_329();
    int v34 = v36;
    long long v37 = "";
    if (v36) {
      long long v37 = v36;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v37);
LABEL_55:
    free(v34);
    if (__valid_fs(-1)) {
      uint64_t v38 = 2989;
    }
    else {
      uint64_t v38 = 3072;
    }
    *(_DWORD *)uint64_t v38 = -559038737;
LABEL_59:
    abort();
  }
  int v7 = (char *)operator new(8uLL);
  *(void *)int v7 = a1 + 48;
  int v8 = v7 + 8;
  uint64_t v40 = v7 + 8;
  uint64_t v41 = v7 + 8;
  std::string __p = v7;
  if (v4 < 9) {
    goto LABEL_39;
  }
  unint64_t v9 = 1;
  do
  {
    uint64_t v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      long long v30 = __si_assert_copy_extra_329();
      char v31 = v30;
      long long v32 = "";
      if (v30) {
        long long v32 = v30;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v12 = v11 + 48;
    if (v8 < v41)
    {
      *(void *)int v8 = v12;
      int v10 = v8 + 8;
      goto LABEL_6;
    }
    int v13 = (char *)__p;
    int64_t v14 = v8 - (unsigned char *)__p;
    uint64_t v15 = (v8 - (unsigned char *)__p) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_59;
    }
    uint64_t v17 = v41 - (unsigned char *)__p;
    if ((v41 - (unsigned char *)__p) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v19 = operator new(8 * v18);
    }
    else
    {
      int v19 = 0;
    }
    __int16 v20 = &v19[8 * v15];
    int v21 = &v19[8 * v18];
    *__int16 v20 = v12;
    int v10 = v20 + 1;
    if (v8 == v13)
    {
      std::string __p = &v19[8 * v15];
      uint64_t v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    unint64_t v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      uint64_t v25 = (v22 >> 3) + 1;
      int v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      long long v26 = &v19[8 * v15 - 16];
      long long v27 = v8 - 16;
      uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *long long v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      int v23 = v8;
    }
    do
    {
      uint64_t v24 = *((void *)v23 - 1);
      v23 -= 8;
      *--__int16 v20 = v24;
    }
    while (v23 != v13);
    int v13 = (char *)__p;
LABEL_30:
    std::string __p = v20;
    uint64_t v41 = v21;
    int v8 = v13;
    if (v13) {
      goto LABEL_33;
    }
LABEL_6:
    uint64_t v40 = v10;
    ++v9;
    int v3 = *(void **)a2;
    int v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  int v7 = (char *)__p;
LABEL_39:
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
  {
    operator delete(v7);
  }
}

unsigned int *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::insertForTest(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    int v10 = v9;
    uint64_t v11 = "";
    if (v9) {
      uint64_t v11 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v7 = a7;
  uint64_t result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((void *)result + 256) = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::insertForMerge(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v11 = __si_assert_copy_extra_329();
    uint64_t v12 = v11;
    int v13 = "";
    if (v11) {
      int v13 = v11;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::insertVector(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == a1[4])
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    os_log_type_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    int v8 = "";
    if (v6) {
      int v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    uint64_t v7 = v9;
    int v10 = "";
    if (v9) {
      int v10 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

unsigned int *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::bulkInsertForTest(unsigned int *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v19 = *a5++;
        unsigned int v18 = v19;
        unsigned int v20 = *a3++;
        uint64_t result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 256) = v20;
        a2 += 2048;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v16 = *__error();
          uint64_t v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        unsigned int v13 = a5[v10];
        uint64_t v14 = a3[v10];
        uint64_t result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 256) = v14;
        a2 += 2048;
        uint64_t v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::shadow(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_log_type_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v9 + 168))(v9, a2, a3);
  uint64_t v10 = vi_onefixedsize_disk_allocator::shadow(*(void *)(*(void *)(a1 + 96) + 32), a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return v10;
    }
  }
  else if (!v7)
  {
    return v10;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v10;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::validAddress(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v9 = *(void *)(*(void *)(a1 + 96) + 32);
  unint64_t v10 = *(unsigned int *)(v9 + 72);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 12;
    do
    {
      float v12 = *(void **)(v9 + 8 * v11);
      if (v12 && (unint64_t v13 = v12[1], v13 + 1 >= 2) && v13 <= a2 && (v14 = v12[2], v13 - v14 + v12[3] > a2)) {
        uint64_t v15 = a2 - v13 + v14;
      }
      else {
        uint64_t v15 = -1;
      }
      if (v11 - 11 >= v10) {
        break;
      }
      ++v11;
    }
    while (v15 == -1);
    if (v15 != -1) {
      goto LABEL_17;
    }
  }
  if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 144))(v8, a2) & 1) == 0)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v6 + 56))(v6, a2);
    if (!v7) {
      goto LABEL_21;
    }
  }
  else
  {
LABEL_17:
    uint64_t v16 = 1;
    if (!v7)
    {
LABEL_21:
      if (!v5) {
        return v16;
      }
      goto LABEL_22;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v5) {
    return v16;
  }
LABEL_22:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v16;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(v5, a2))
      {
        a2 += 2048;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(v5, a2))break; {
        a2 += 2048;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    uint64_t v15 = v14;
    uint64_t v16 = "";
    if (v14) {
      uint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int Vector = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(a1, a2, (int *)&v24, &v23, 0);
  if (Vector == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v9 = *(void *)(a1 + 80);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 96);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 104);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke;
    v20[3] = &unk_1E6345B38;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke_1601;
      v15[3] = &unk_1F1816C18;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      uint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      unint64_t v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return Vector != -1;
}

int *___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(const void **)(a1 + 48);
  uint64_t v8 = *(unsigned int *)a3;
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 2064) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 2064);
  uint64_t result = (int *)memcmp(v7, v14, 0x800uLL);
  if (!result)
  {
    int v16 = *__error();
    uint64_t v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v22 = a3[1];
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2760;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = a2;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v22;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v16;
    int v18 = *__error();
    unsigned int v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)(a1 + 56);
      double v24 = *(float *)(a1 + 60);
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2761;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v23;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v24;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v18;
    int v20 = *__error();
    unsigned int v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      float v25 = *(float *)(a1 + 60);
      float v26 = a3[1];
      float v27 = vabds_f32(v25, v26);
      if (v25 == v26)
      {
        BOOL v28 = 1;
        BOOL v29 = 1;
      }
      else
      {
        float v30 = fabsf(v25);
        float v31 = fabsf(v26);
        BOOL v28 = v27 <= fmaxf(fminf(v31, v30) * 0.000015259, 0.000015259);
        BOOL v29 = v27 <= (float)(fmaxf(v30, v31) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317186;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2762;
      __int16 v37 = 2048;
      *(double *)uint64_t v38 = v27;
      *(_WORD *)&v38[8] = 2048;
      *(void *)&v38[10] = 0x3810000000000000;
      __int16 v39 = 2048;
      uint64_t v40 = 0x3E80000000000000;
      __int16 v41 = 1024;
      BOOL v42 = v27 < 1.1755e-38;
      __int16 v43 = 1024;
      BOOL v44 = v27 < 0.00000011921;
      __int16 v45 = 1024;
      BOOL v46 = v28;
      __int16 v47 = 1024;
      BOOL v48 = v29;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x48u);
    }
    uint64_t result = __error();
    int *result = v20;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke_1601(uint64_t a1, int a2, unsigned int *a3, unsigned char *a4)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  int v6 = *(const void **)(a1 + 48);
  uint64_t v103 = *(void *)(a1 + 40);
  uint64_t v8 = *a3;
  uint64_t v9 = *(void **)(*(void *)(v103 + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 2064) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 2064);
  if (!memcmp(v6, v14, 0x800uLL))
  {
    int v15 = *__error();
    int v16 = _SILogForLogForCategory(16);
    uint64_t v17 = a3;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      double v52 = *((float *)a3 + 1);
      float __C = 4.8153e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2770;
      __int16 v115 = 1024;
      float v116 = *(float *)&a2;
      __int16 v117 = 2048;
      *(double *)uint64_t v118 = v52;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v15;
    int v18 = *(const float **)(a1 + 48);
    unsigned int v19 = (const float *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float __C = 3.4028e38;
    vDSP_distancesq(v18, 1, v19, 1, &__C, 0x200uLL);
    float v20 = __C;
    int v21 = *__error();
    double v22 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      float v53 = *(float *)(a1 + 88);
      float __C = 4.8153e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2772;
      __int16 v115 = 1024;
      float v116 = v53;
      __int16 v117 = 2048;
      *(double *)uint64_t v118 = v20;
      _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v21;
    std::string __p = 0;
    unint64_t v109 = 0;
    uint64_t v110 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&__p);
    int v23 = *__error();
    double v24 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      float v54 = *(float *)__p;
      float v55 = *((float *)__p + 1);
      int v56 = *((_DWORD *)__p + 2);
      float v57 = *((float *)__p + 3);
      BOOL v58 = v55 == v57 || vabds_f32(v55, v57) <= fmaxf(fminf(fabsf(v57), fabsf(v55)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2774;
      __int16 v115 = 1024;
      float v116 = v54;
      __int16 v117 = 2048;
      *(double *)uint64_t v118 = v55;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v56;
      __int16 v119 = 2048;
      double v120 = v57;
      __int16 v121 = 1024;
      LODWORD(v122) = v58;
      _os_log_error_impl(&dword_1BD672000, v24, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v23;
    int v25 = *__error();
    float v26 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      float v59 = *(float *)__p;
      int v60 = *((_DWORD *)__p + 2);
      BOOL v61 = *((float *)__p + 1) == *((float *)__p + 3);
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2775;
      __int16 v115 = 1024;
      float v116 = v59;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v60;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v61;
      _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v25;
    int v27 = *__error();
    BOOL v28 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      float v62 = *(float *)__p;
      int v63 = *((_DWORD *)__p + 2);
      BOOL v64 = *((float *)__p + 1) < *((float *)__p + 3);
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2776;
      __int16 v115 = 1024;
      float v116 = v62;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v63;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v64;
      _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v27;
    int v29 = *__error();
    float v30 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      float v65 = *(float *)__p;
      int v66 = *((_DWORD *)__p + 2);
      BOOL v67 = *((float *)__p + 1) > *((float *)__p + 3);
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2777;
      __int16 v115 = 1024;
      float v116 = v65;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v66;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v67;
      _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v29;
    int v31 = *__error();
    long long v32 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      float v68 = *(float *)__p;
      int v69 = *((_DWORD *)__p + 2);
      float v70 = *((float *)__p + 1);
      float v71 = *((float *)__p + 3);
      double v72 = (float)(v70 - v71);
      float v73 = vabds_f32(v70, v71);
      if (v70 == v71)
      {
        BOOL v74 = 1;
        BOOL v75 = 1;
      }
      else
      {
        float v99 = fabsf(v70);
        float v100 = fabsf(v71);
        BOOL v74 = v73 <= fmaxf(fminf(v100, v99) * 0.000015259, 0.000015259);
        BOOL v75 = v73 <= (float)(fmaxf(v99, v100) * 0.000015259);
      }
      float __C = 4.8161e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2778;
      __int16 v115 = 1024;
      float v116 = v68;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v69;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v72;
      __int16 v119 = 2048;
      double v120 = 1.17549435e-38;
      __int16 v121 = 2048;
      uint64_t v122 = 0x3E80000000000000;
      __int16 v123 = 1024;
      BOOL v124 = v73 < 1.1755e-38;
      __int16 v125 = 1024;
      BOOL v126 = v73 < 0.00000011921;
      __int16 v127 = 1024;
      BOOL v128 = v74;
      __int16 v129 = 1024;
      BOOL v130 = v75;
      _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v31;
    unsigned int v106 = 0;
    uint64_t v107 = 0;
    uint64_t v105 = 0;
    uint64_t v33 = *(void *)(a1 + 56);
    uint64_t v34 = *a3;
    __int16 v35 = *(void **)(*(void *)(v103 + 48) + 32);
    unint64_t v36 = v35[3] + v35[2] * v34;
    bit_vector_set_10635(v35 + 525, (v36 >> 20));
    unint64_t v37 = (v36 + 2064) >> 20;
    if (v37 > (v36 >> 20))
    {
      unsigned int v38 = (v36 >> 20) + 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v35 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = _windowsResolvePtr((uint64_t)(v35 + 5), v35[3] + v35[2] * v34, 2064);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v33 + 80))(&v105, v33, v40, 2);
    int v41 = *__error();
    BOOL v42 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      float v76 = *v105;
      float v77 = v105[1];
      int v78 = *((_DWORD *)v105 + 2);
      float v79 = v105[3];
      float __C = 4.8156e-34;
      uint64_t v112 = "exists_block_invoke";
      BOOL v80 = vabds_f32(v77, v79) <= fmaxf(fminf(fabsf(v79), fabsf(v77)) * 0.000015259, 0.000015259);
      int v114 = 2781;
      __int16 v113 = 1024;
      int v81 = v77 == v79 || v80;
      __int16 v115 = 1024;
      float v116 = v76;
      __int16 v117 = 2048;
      *(double *)uint64_t v118 = v77;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v78;
      __int16 v119 = 2048;
      double v120 = v79;
      __int16 v121 = 1024;
      LODWORD(v122) = v81;
      _os_log_error_impl(&dword_1BD672000, v42, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v41;
    int v43 = *__error();
    BOOL v44 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      float v82 = *v105;
      int v83 = *((_DWORD *)v105 + 2);
      BOOL v84 = v105[1] == v105[3];
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2782;
      __int16 v115 = 1024;
      float v116 = v82;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v83;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v84;
      _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v43;
    int v45 = *__error();
    BOOL v46 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      float v85 = *v105;
      int v86 = *((_DWORD *)v105 + 2);
      BOOL v87 = v105[1] < v105[3];
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2783;
      __int16 v115 = 1024;
      float v116 = v85;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v86;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v87;
      _os_log_error_impl(&dword_1BD672000, v46, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v45;
    int v47 = *__error();
    BOOL v48 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      float v88 = *v105;
      int v89 = *((_DWORD *)v105 + 2);
      BOOL v90 = v105[1] > v105[3];
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2784;
      __int16 v115 = 1024;
      float v116 = v88;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v89;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v90;
      _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v47;
    int v49 = *__error();
    long long v50 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      float v91 = *v105;
      int v92 = *((_DWORD *)v105 + 2);
      float v93 = v105[1];
      float v94 = v105[3];
      float v95 = vabds_f32(v93, v94);
      BOOL v96 = (float)(v93 - v94) < 1.1755e-38;
      if (v93 == v94)
      {
        BOOL v97 = 1;
        BOOL v98 = 1;
      }
      else
      {
        float v101 = fabsf(v93);
        float v102 = fabsf(v94);
        BOOL v97 = v95 <= fmaxf(fminf(v102, v101) * 0.000015259, 0.000015259);
        BOOL v98 = v95 <= (float)(fmaxf(v101, v102) * 0.000015259);
      }
      float __C = 4.8161e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2785;
      __int16 v115 = 1024;
      float v116 = v91;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v92;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v95;
      __int16 v119 = 2048;
      double v120 = 1.17549435e-38;
      __int16 v121 = 2048;
      uint64_t v122 = 0x3E80000000000000;
      __int16 v123 = 1024;
      BOOL v124 = v96;
      __int16 v125 = 1024;
      BOOL v126 = v95 < 0.00000011921;
      __int16 v127 = 1024;
      BOOL v128 = v97;
      __int16 v129 = 1024;
      BOOL v130 = v98;
      _os_log_error_impl(&dword_1BD672000, v50, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v49;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v17;
    char v51 = v105;
    *a4 = 1;
    if (v51)
    {
      unsigned int v106 = v51;
      operator delete(v51);
    }
    if (__p)
    {
      unint64_t v109 = __p;
      operator delete(__p);
    }
  }
}

void __destroy_helper_block_8_56c60_ZTSN22IVFVectorIndexTemplateIfLi512EE19QuantizerPartitionsE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_8_56c60_ZTSN22IVFVectorIndexTemplateIfLi512EE19QuantizerPartitionsE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F18169F0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,512>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F18169F0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::VectorStore<vi_onefixedsize_disk_allocator>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = a1 + 64;
  bzero(v6, 0x400uLL);
  uint64_t v5 = fd_name(*(void *)a2, v6, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  operator new();
}

void QuantizerManager<float,256>::sharedQuantizer(void *a1, uint64_t a2, int a3)
{
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x3802000000;
  int v15 = __Block_byref_object_copy__847;
  uint64_t v17 = 0;
  int v18 = 0;
  int v16 = __Block_byref_object_dispose__848;
  if (ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken != -1) {
    dispatch_once(&ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken, &__block_literal_global_768);
  }
  uint64_t v17 = *(void *)ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq;
  int v6 = *(std::__shared_weak_count **)(ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq + 8);
  int v18 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(NSObject **)(a2 + 16);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___ZN16QuantizerManagerIfLi256EE15sharedQuantizerEi_block_invoke;
  v10[3] = &unk_1E6345340;
  int v11 = a3;
  v10[4] = &v12;
  v10[5] = a2;
  dispatch_sync(v7, v10);
  uint64_t v8 = v13[6];
  *a1 = v13[5];
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v12, 8);
  uint64_t v9 = v18;
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v8 = *a2;
  if (v6 != *a2)
  {
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v18 = *a2;
    unsigned int v19 = v9;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v14 = *a2;
      int v15 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v14 = v8;
      int v15 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 40))(&v16, a1, &v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v18, &v16);
    int v11 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    unint64_t v13 = v19;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

__n128 __Block_byref_object_copy__847(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__848(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN16QuantizerManagerIfLi256EE15sharedQuantizerEi_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v2) {
    goto LABEL_55;
  }
  int8x8_t v4 = *(int8x8_t *)(v3 + 120);
  if (!*(void *)&v4) {
    goto LABEL_22;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = *(int *)(a1 + 48);
    if (*(void *)&v4 <= v2) {
      unint64_t v6 = v2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v2;
  }
  uint64_t v7 = *(uint64_t ***)(*(void *)(v3 + 112) + 8 * v6);
  if (!v7 || (uint64_t v8 = *v7) == 0)
  {
LABEL_22:
    long long v50 = 0uLL;
    int64_t v51 = 0;
    int v12 = *(char *)(v3 + 71);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v13 = *(void *)(v3 + 56);
    }
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_99;
    }
    if (v14 >= 0x17)
    {
      uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v16 = v14 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v13 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
      if (!v13) {
        goto LABEL_36;
      }
    }
    if (v12 >= 0) {
      uint64_t v18 = (const void *)(v3 + 48);
    }
    else {
      uint64_t v18 = *(const void **)(v3 + 48);
    }
    memmove(p_dst, v18, v13);
LABEL_36:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 46;
    std::to_string(&v47, v2);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v19 = &v47;
    }
    else {
      unsigned int v19 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    int v21 = std::string::append(&__dst, (const std::string::value_type *)v19, size);
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = std::string::append(&v49, ".quantizer");
    int64_t v24 = v23->__r_.__value_.__r.__words[2];
    long long v50 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v51 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_45:
          if (v51 >= 0) {
            int v25 = (const char *)&v50;
          }
          else {
            int v25 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v25, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          goto LABEL_55;
        }
LABEL_52:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == v2)
      {
        if (*((_DWORD *)v8 + 4) == v2) {
          goto LABEL_92;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_22;
      }
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == v2) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_22;
    }
LABEL_12:
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v8 + 4) != v2) {
    goto LABEL_12;
  }
LABEL_92:
  BOOL v42 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v3 + 112, v2, (_DWORD *)(a1 + 48));
  int v43 = (std::__shared_weak_count *)v42[4];
  if (v43 && (int v43 = std::__shared_weak_count::lock(v43)) != 0) {
    uint64_t v44 = v42[3];
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v46 = *(std::__shared_weak_count **)(v45 + 48);
  *(void *)(v45 + 40) = v44;
  *(void *)(v45 + 48) = v43;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_55:
  uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
  if (ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken != -1) {
    dispatch_once(&ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken, &__block_literal_global_768);
  }
  uint64_t v28 = *(void *)ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq;
  int v27 = *(std::__shared_weak_count **)(ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq + 8);
  if (!v27)
  {
    if (*(void *)(v26 + 40) != v28) {
      return;
    }
LABEL_64:
    uint64_t v30 = *(void *)(v3 + 80);
    if (v30)
    {
      uint64_t v31 = *(void *)(v3 + 88);
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v33 = *(std::__shared_weak_count **)(v32 + 48);
      *(void *)(v32 + 40) = v30;
      *(void *)(v32 + 48) = v31;
      if (v33)
      {
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      return;
    }
    int v34 = *(char *)(v3 + 71);
    if (v34 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v35 = *(void *)(v3 + 56);
    }
    unint64_t v36 = v35 + 10;
    if (v35 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v36 >= 0x17)
      {
        uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17) {
          uint64_t v38 = v36 | 7;
        }
        uint64_t v39 = v38 + 1;
        unint64_t v37 = (char *)operator new(v38 + 1);
        *((void *)&v50 + 1) = v35 + 10;
        int64_t v51 = v39 | 0x8000000000000000;
        *(void *)&long long v50 = v37;
      }
      else
      {
        int64_t v51 = 0;
        long long v50 = 0uLL;
        unint64_t v37 = (char *)&v50;
        HIBYTE(v51) = v35 + 10;
        if (!v35)
        {
LABEL_84:
          strcpy(&v37[v35], ".quantizer");
          if (v51 >= 0) {
            int v41 = (const char *)&v50;
          }
          else {
            int v41 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v41, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          return;
        }
      }
      if (v34 >= 0) {
        unint64_t v40 = (const void *)(v3 + 48);
      }
      else {
        unint64_t v40 = *(const void **)(v3 + 48);
      }
      memmove(v37, v40, v35);
      goto LABEL_84;
    }
LABEL_99:
    abort();
  }
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v29 = *(void *)(v26 + 40);
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
}

void AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::AllocatedVectorQuantizer(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = &unk_1F18152B0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(void *)(a1 + 64) = fd_dup(*(void *)a2);
  bzero(v9, 0x400uLL);
  uint8x8_t v5 = fd_name(*(void *)a2, v9, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  if (*(void *)(a1 + 64)) {
    operator new();
  }
  unint64_t v6 = __si_assert_copy_extra_329();
  uint64_t v7 = v6;
  uint64_t v8 = "";
  if (v6) {
    uint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 487, "fdPtr != nullptr", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t std::__shared_ptr_pointer<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256> *,std::shared_ptr<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>::__shared_ptr_default_delete<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>,AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>,std::allocator<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256> *,std::shared_ptr<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>::__shared_ptr_default_delete<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>,AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>,std::allocator<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void Quantizer<float,256>::topKPartitions(uint64_t a1@<X0>, const float *a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    uint64_t v7 = 0;
    BOOL v75 = 0;
    BOOL v74 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_74;
  }
  float v100 = a4;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = a3;
  int v12 = a2;
  do
  {
    size_t v13 = (const float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 72))(a1, v10);
    unsigned int __C = 2139095039;
    vDSP_distancesq(v13, 1, v12, 1, (float *)&__C, 0x100uLL);
    unint64_t v14 = (v10 | ((unint64_t)__C << 32)) >> 32;
    uint64_t v15 = v7 - v9;
    uint64_t v16 = (v7 - v9) >> 3;
    if (v16 < v11)
    {
      if (v7 < v8)
      {
        *(_DWORD *)uint64_t v7 = v10;
        *((_DWORD *)v7 + 1) = v14;
        v7 += 8;
LABEL_47:
        if (v7 - v9 >= 9)
        {
          unint64_t v48 = (((unint64_t)(v7 - v9) >> 3) - 2) >> 1;
          std::string v49 = (float *)&v9[8 * v48];
          int64_t v51 = v7 - 8;
          unsigned int v50 = *((_DWORD *)v7 - 2);
          float v52 = v49[1];
          float v53 = *((float *)v7 - 1);
          int v54 = *(_DWORD *)v49;
          BOOL v55 = *(_DWORD *)v49 < v50;
          if (v52 != v53) {
            BOOL v55 = v52 < v53;
          }
          if (v55)
          {
            do
            {
              int v56 = v49;
              *(_DWORD *)int64_t v51 = v54;
              *((float *)v51 + 1) = v49[1];
              if (!v48) {
                break;
              }
              unint64_t v48 = (v48 - 1) >> 1;
              std::string v49 = (float *)&v9[8 * v48];
              float v57 = v49[1];
              int v54 = *(_DWORD *)v49;
              BOOL v58 = v57 < v53;
              if (v57 == v53) {
                BOOL v58 = *(_DWORD *)v49 < v50;
              }
              int64_t v51 = (char *)v56;
            }
            while (v58);
            *(_DWORD *)int v56 = v50;
            v56[1] = v53;
          }
        }
        goto LABEL_4;
      }
      if ((v8 - v9) >> 2 <= (unint64_t)(v16 + 1)) {
        unint64_t v28 = v16 + 1;
      }
      else {
        unint64_t v28 = (v8 - v9) >> 2;
      }
      if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v28 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v29 = 8 * v28;
      uint64_t v30 = operator new(8 * v28);
      uint64_t v31 = &v30[8 * v16];
      *uint64_t v31 = v10;
      v31[1] = v14;
      if (v7 == v9)
      {
        unint64_t v36 = v7;
        uint64_t v9 = &v30[8 * v16];
        goto LABEL_44;
      }
      unint64_t v32 = v7 - v9 - 8;
      if (v32 >= 0x58 && (unint64_t)(v9 - v30) >= 0x20)
      {
        uint64_t v68 = (v32 >> 3) + 1;
        uint64_t v33 = &v7[-8 * (v68 & 0x3FFFFFFFFFFFFFFCLL)];
        int v69 = &v30[8 * v16 - 16];
        float v70 = v7 - 16;
        uint64_t v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v72 = *(_OWORD *)v70;
          *(v69 - 1) = *((_OWORD *)v70 - 1);
          *int v69 = v72;
          v69 -= 2;
          v70 -= 32;
          v71 -= 4;
        }
        while (v71);
        int v34 = (char *)&v31[-2 * (v68 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v33 = v7;
        int v34 = &v30[8 * v16];
      }
      do
      {
        uint64_t v35 = *((void *)v33 - 1);
        v33 -= 8;
        *((void *)v34 - 1) = v35;
        v34 -= 8;
      }
      while (v33 != v9);
LABEL_32:
      unint64_t v36 = v9;
      uint64_t v9 = v34;
LABEL_44:
      uint64_t v8 = &v30[v29];
      uint64_t v7 = (char *)(v31 + 2);
      if (v36) {
        operator delete(v36);
      }
      int v12 = a2;
      goto LABEL_47;
    }
    float v17 = *((float *)v9 + 1);
    int v18 = *(_DWORD *)v9;
    BOOL v19 = *(_DWORD *)v9 > v10;
    if (v17 != *(float *)&v14) {
      BOOL v19 = v17 > *(float *)&v14;
    }
    if (v19)
    {
      if (v15 <= 8)
      {
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v14;
      }
      else
      {
        uint64_t v20 = 0;
        int v21 = v9;
        do
        {
          uint64_t v26 = (float *)&v21[8 * v20 + 8];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v16)
          {
            float v22 = v26[1];
            float v23 = v26[3];
            float v24 = *v26;
            BOOL v25 = *(_DWORD *)v26 < *((_DWORD *)v26 + 2);
            if (v22 != v23) {
              BOOL v25 = v22 < v23;
            }
            if (v25)
            {
              float v24 = v26[2];
              v26 += 2;
            }
            else
            {
              uint64_t v20 = v27;
            }
          }
          else
          {
            float v24 = *v26;
            uint64_t v20 = v27;
          }
          *(float *)int v21 = v24;
          *((float *)v21 + 1) = v26[1];
          int v21 = (char *)v26;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v26 == (float *)(v7 - 8))
        {
          *(_DWORD *)uint64_t v26 = v18;
          v26[1] = v17;
        }
        else
        {
          *uint64_t v26 = *((float *)v7 - 2);
          v26[1] = *((float *)v7 - 1);
          *((_DWORD *)v7 - 2) = v18;
          *((float *)v7 - 1) = v17;
          uint64_t v37 = (char *)v26 - v9 + 8;
          if (v37 >= 9)
          {
            unint64_t v38 = (((unint64_t)v37 >> 3) - 2) >> 1;
            uint64_t v39 = (float *)&v9[8 * v38];
            float v40 = v39[1];
            float v41 = v26[1];
            int v42 = *(_DWORD *)v39;
            float v43 = *v26;
            BOOL v44 = *(_DWORD *)v39 < *(_DWORD *)v26;
            if (v40 != v41) {
              BOOL v44 = v40 < v41;
            }
            if (v44)
            {
              do
              {
                uint64_t v45 = v39;
                *(_DWORD *)uint64_t v26 = v42;
                v26[1] = v39[1];
                if (!v38) {
                  break;
                }
                unint64_t v38 = (v38 - 1) >> 1;
                uint64_t v39 = (float *)&v9[8 * v38];
                float v46 = v39[1];
                int v42 = *(_DWORD *)v39;
                BOOL v47 = v46 < v41;
                if (v46 == v41) {
                  BOOL v47 = *(_DWORD *)v39 < LODWORD(v43);
                }
                uint64_t v26 = v45;
              }
              while (v47);
              *uint64_t v45 = v43;
              v45[1] = v41;
            }
          }
        }
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v14;
        float v59 = v7 - 8;
        unint64_t v60 = (((unint64_t)v15 >> 3) - 2) >> 1;
        BOOL v61 = (float *)&v9[8 * v60];
        float v62 = v61[1];
        int v63 = *(_DWORD *)v61;
        BOOL v64 = *(_DWORD *)v61 < v10;
        if (v62 != *(float *)&v14) {
          BOOL v64 = v62 < *(float *)&v14;
        }
        if (v64)
        {
          do
          {
            float v65 = v61;
            *(_DWORD *)float v59 = v63;
            *((float *)v59 + 1) = v61[1];
            if (!v60) {
              break;
            }
            unint64_t v60 = (v60 - 1) >> 1;
            BOOL v61 = (float *)&v9[8 * v60];
            float v66 = v61[1];
            int v63 = *(_DWORD *)v61;
            BOOL v67 = v66 < *(float *)&v14;
            if (v66 == *(float *)&v14) {
              BOOL v67 = *(_DWORD *)v61 < v10;
            }
            float v59 = (char *)v65;
          }
          while (v67);
          *(_DWORD *)float v65 = v10;
          *((_DWORD *)v65 + 1) = v14;
        }
      }
    }
LABEL_4:
    ++v10;
  }
  while (v10 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1));
  *float v100 = 0;
  v100[1] = 0;
  v100[2] = 0;
  uint64_t v73 = v7 - v9;
  if (v7 == v9)
  {
    BOOL v75 = 0;
    BOOL v74 = 0;
  }
  else
  {
    if (v73 < 0) {
      abort();
    }
    BOOL v74 = (int *)operator new(v7 - v9);
    *float v100 = v74;
    v100[2] = &v74[2 * (v73 >> 3)];
    memcpy(v74, v9, v73 & 0xFFFFFFFFFFFFFFF8);
    BOOL v75 = (float *)((char *)v74 + (v73 & 0xFFFFFFFFFFFFFFF8));
    v100[1] = (int *)v75;
    uint64_t v7 = v9;
  }
LABEL_74:
  if ((char *)v75 - (char *)v74 >= 9)
  {
    uint64_t v76 = (unint64_t)((char *)v75 - (char *)v74) >> 3;
    do
    {
      uint64_t v78 = 0;
      int v79 = *v74;
      int v80 = v74[1];
      int v81 = (float *)v74;
      do
      {
        int v86 = &v81[2 * v78 + 2];
        uint64_t v87 = (2 * v78) | 1;
        uint64_t v78 = 2 * v78 + 2;
        if (v78 < v76)
        {
          float v82 = v86[1];
          float v83 = v86[3];
          float v84 = *v86;
          BOOL v85 = *(_DWORD *)v86 < *((_DWORD *)v86 + 2);
          if (v82 != v83) {
            BOOL v85 = v82 < v83;
          }
          if (v85)
          {
            float v84 = v86[2];
            v86 += 2;
          }
          else
          {
            uint64_t v78 = v87;
          }
        }
        else
        {
          float v84 = *v86;
          uint64_t v78 = v87;
        }
        *int v81 = v84;
        v81[1] = v86[1];
        int v81 = v86;
      }
      while (v78 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
      float v88 = (char *)(v75 - 2);
      if (v86 == v75 - 2)
      {
        *(_DWORD *)int v86 = v79;
        *((_DWORD *)v86 + 1) = v80;
      }
      else
      {
        *int v86 = *(v75 - 2);
        v86[1] = *(v75 - 1);
        *((_DWORD *)v75 - 2) = v79;
        *((_DWORD *)v75 - 1) = v80;
        uint64_t v89 = (char *)v86 - (char *)v74 + 8;
        if (v89 >= 9)
        {
          unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
          float v91 = (float *)&v74[2 * v90];
          float v92 = v91[1];
          float v93 = v86[1];
          float v94 = *v91;
          float v95 = *v86;
          BOOL v96 = *(_DWORD *)v91 < *(_DWORD *)v86;
          if (v92 != v93) {
            BOOL v96 = v92 < v93;
          }
          if (v96)
          {
            do
            {
              BOOL v97 = v91;
              *int v86 = v94;
              v86[1] = v91[1];
              if (!v90) {
                break;
              }
              unint64_t v90 = (v90 - 1) >> 1;
              float v91 = (float *)&v74[2 * v90];
              float v98 = v91[1];
              float v94 = *v91;
              BOOL v99 = v98 < v93;
              if (v98 == v93) {
                BOOL v99 = *(_DWORD *)v91 < LODWORD(v95);
              }
              int v86 = v97;
            }
            while (v99);
            *BOOL v97 = v95;
            v97[1] = v93;
          }
        }
      }
      BOOL v75 = (float *)v88;
    }
    while (v76-- > 2);
  }
  if (v7) {
    operator delete(v7);
  }
}

unint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::getCentroid(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    uint8x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "i < nCentroids", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(v2 + 24) + *(void *)(v2 + 16) * a2;
  return _windowsResolvePtr(v2 + 40, v3, 1024);
}

BOOL Quantizer<float,256>::isPersistent(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  int v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8) {
      return 1;
    }
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(void *)(a1 + 16) == 8)
  {
    uint64_t v1 = (void *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

BOOL AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::validAddress(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(unsigned int *)(v2 + 72);
  if ((int)v3 < 1)
  {
    uint64_t v8 = -1;
  }
  else
  {
    uint64_t v4 = 12;
    do
    {
      uint8x8_t v5 = *(void **)(v2 + 8 * v4);
      if (v5 && (unint64_t v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2)) {
        uint64_t v8 = a2 - v6 + v7;
      }
      else {
        uint64_t v8 = -1;
      }
      if (v4 - 11 >= v3) {
        break;
      }
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

BOOL Quantizer<float,256>::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 256)
  {
    uint8x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 291, "D == other.dimension()", v7);
LABEL_12:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) != 4)
  {
    uint64_t v8 = __si_assert_copy_extra_329();
    unint64_t v6 = v8;
    uint64_t v9 = "";
    if (v8) {
      uint64_t v9 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 292, "sizeof(ELEM_TYPE) == other.elementSize()", v9);
    goto LABEL_12;
  }
  return Quantizer<float,256>::operator==(a1, a2);
}

{
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v8;
  BOOL result;

  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    return 1;
  }
  uint8x8_t v5 = 0;
  while (1)
  {
    unint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v5);
    uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v5);
    uint64_t v8 = memcmp(v6, v7, 0x400uLL);
    uint64_t result = v8 == 0;
    if (v8) {
      break;
    }
    uint8x8_t v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
      return 1;
    }
  }
  return result;
}

uint64_t Quantizer<float,256>::elementSize()
{
  return 4;
}

uint64_t Quantizer<float,256>::dimension()
{
  return 256;
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::version(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::~AllocatedVectorQuantizer(uint64_t a1)
{
  AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::~AllocatedVectorQuantizer(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::~AllocatedVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18152B0;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if (v2) {
    vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(a1 + 40));
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    uint64_t v4 = *(const void **)(v3 + 4216);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 4216) = 0;
    }
    *(_OWORD *)(v3 + 4200) = 0u;
    MEMORY[0x1C1881000](v3, 0x10A0C40112AF241);
  }
  fd_release(*(atomic_uint **)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    unint64_t v6 = *(const void **)(v5 + 4216);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v5 + 4216) = 0;
    }
    *(_OWORD *)(v5 + 4200) = 0u;
    MEMORY[0x1C1881000](v5, 0x10A0C40112AF241);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ___ZN19ZeroVectorQuantizerIfLi256EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t std::__shared_ptr_pointer<ZeroVectorQuantizer<float,256> *,std::shared_ptr<Quantizer<float,256>>::__shared_ptr_default_delete<Quantizer<float,256>,ZeroVectorQuantizer<float,256>>,std::allocator<ZeroVectorQuantizer<float,256>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ZeroVectorQuantizer<float,256> *,std::shared_ptr<Quantizer<float,256>>::__shared_ptr_default_delete<Quantizer<float,256>,ZeroVectorQuantizer<float,256>>,std::allocator<ZeroVectorQuantizer<float,256>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

float *SingleVectorQuantizer<float,256>::topKPartitions@<X0>(const float *__A@<X1>, uint64_t a2@<X0>, float **a3@<X8>)
{
  float __C = 3.4028e38;
  vDSP_distancesq(__A, 1, (const float *)(a2 + 33), 1, &__C, 0x100uLL);
  float v4 = __C;
  uint64_t result = (float *)operator new(8uLL);
  a3[1] = result + 2;
  a3[2] = result + 2;
  float *result = 0.0;
  result[1] = v4;
  *a3 = result;
  return result;
}

uint64_t SingleVectorQuantizer<float,256>::getCentroid(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    float v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 396, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

uint64_t SingleVectorQuantizer<float,256>::count()
{
  return 1;
}

void ZeroVectorQuantizer<float,256>::~ZeroVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t ZeroVectorQuantizer<float,256>::~ZeroVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void SingleVectorQuantizer<float,256>::~SingleVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t SingleVectorQuantizer<float,256>::~SingleVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ___ZN19ZeroVectorQuantizerIfLi256EE8centroidEv_block_invoke()
{
  ZeroVectorQuantizer<float,256>::centroid(void)::centroid = 1065353216;
}

uint64_t std::__shared_ptr_pointer<QuantizerManager<float,256> *,std::shared_ptr<QuantizerManager<float,256>>::__shared_ptr_default_delete<QuantizerManager<float,256>,QuantizerManager<float,256>>,std::allocator<QuantizerManager<float,256>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    unsigned __int8 v2 = *(NSObject **)(v1 + 16);
    if (v2) {
      dispatch_release(v2);
    }
    int v3 = *__error();
    float v4 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (void *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      unint64_t v6 = (void *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0) {
        unint64_t v6 = (void *)*v6;
      }
      int v13 = 136315394;
      unint64_t v14 = v5;
      __int16 v15 = 2080;
      uint64_t v16 = v6;
      _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v13, 0x16u);
    }
    *__error() = v3;
    uint64_t v7 = *(void **)(v1 + 128);
    if (v7)
    {
      do
      {
        unint64_t v11 = (void *)*v7;
        int v12 = (std::__shared_weak_count *)v7[4];
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        operator delete(v7);
        uint64_t v7 = v11;
      }
      while (v11);
    }
    uint64_t v8 = *(void **)(v1 + 112);
    *(void *)(v1 + 112) = 0;
    if (v8) {
      operator delete(v8);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(v1 + 104);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    unint64_t v10 = *(std::__shared_weak_count **)(v1 + 88);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_19:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_29:
        operator delete(*(void **)(v1 + 24));
LABEL_20:
        JUMPOUT(0x1C1881000);
      }
    }
    else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }
  return result;
}

void std::__shared_ptr_pointer<QuantizerManager<float,256> *,std::shared_ptr<QuantizerManager<float,256>>::__shared_ptr_default_delete<QuantizerManager<float,256>,QuantizerManager<float,256>>,std::allocator<QuantizerManager<float,256>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void ___ZN16QuantizerManagerIfLi256EE14sharedInstanceEijt_block_invoke()
{
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    int v3 = *(const void **)(v2 + 4216);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 4216) = 0;
    }
    *(_OWORD *)(v2 + 4200) = 0u;
    JUMPOUT(0x1C1881000);
  }
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F18168F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F18168F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  unint64_t v10 = *(char **)(a1 + 80);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v9 = (long long *)(a1 + 80);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *(_DWORD **)(a1 + 96);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  unint64_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    uint64_t v29 = __si_assert_copy_extra_329();
    uint64_t v30 = v29;
    uint64_t v31 = "";
    if (v29) {
      uint64_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 48) + 40) != v14[18])
  {
    unint64_t v32 = __si_assert_copy_extra_329();
    uint64_t v30 = v32;
    uint64_t v33 = "";
    if (v32) {
      uint64_t v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    __int16 v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = v10 + 8;
      if (v10[31] < 0) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      int v18 = (void *)(*a2 + 8);
      uint64_t v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        int v18 = (void *)*v18;
      }
      int v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      BOOL v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        BOOL v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      int v21 = __p;
      if (v45 < 0) {
        int v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      std::string v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      float v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      float v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      int v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    unint64_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  float v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  uint64_t v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::newPartitions(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  unint64_t v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    unint64_t v6 = ".tmp.partitions";
  }
  memset(v16, 0, sizeof(v16));
  long long v7 = *(_OWORD *)(a1 + 24);
  v15[0] = *(_OWORD *)(a1 + 8);
  v15[1] = v7;
  size_t v8 = strlen(v6);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    unint64_t v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    unint64_t v14 = v12 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v14) = v8;
    unint64_t v10 = __dst;
    if (!v8)
    {
LABEL_16:
      *((unsigned char *)v9 + (void)v10) = 0;
      IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)v16, (uint64_t)v15, (uint64_t)__dst, 1);
      if (SHIBYTE(v14) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v10, v6, (size_t)v9);
  goto LABEL_16;
}

unint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v3 = a2;
  unint64_t v4 = v2[3] + v2[2] * a2;
  bit_vector_set_10635(v2 + 525, (v4 >> 20));
  unint64_t v5 = (v4 + 1040) >> 20;
  if (v5 > (v4 >> 20))
  {
    unsigned int v6 = (v4 >> 20) + 1;
    do
    {
      unint64_t v7 = v6;
      bit_vector_set_10635(v2 + 525, v6++);
    }
    while (v5 > v7);
  }
  unint64_t v8 = v2[3] + v2[2] * v3;
  return _windowsResolvePtr((uint64_t)(v2 + 5), v8, 1040);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getQuantizer(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1C1881000);
}

void *IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  *a1 = &unk_1F18168A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::diagnoseDump(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  __int16 v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v17 = "(readOnly)";
  }
  else {
    uint64_t v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  BOOL v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getQuantizer(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    uint64_t v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    unint64_t v28 = (void *)std::ostream::operator<<();
    uint64_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    uint64_t v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  unint64_t v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 96);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  uint64_t v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 40))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      float v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v52, 1040);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 40));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t v43 = _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v40, 1040);
        BOOL v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        float v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, v43, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, v43 + 1016, 8);
        if ((v71 & 0x80u) == 0) {
          std::string v49 = &v69;
        }
        else {
          std::string v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  float v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::status(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  BOOL v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(a1 + 48, &v31);
  if (v31)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::updateVectorStorageOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 48;
  if (a2)
  {
    unint64_t v5 = 0;
    uint64_t v25 = a2 + 56;
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (v5 >= result) {
        break;
      }
      uint64_t v8 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v9 = v8[3] + v8[2] * v5;
      bit_vector_set_10635(v8 + 525, (v9 >> 20));
      unint64_t v10 = (v9 + 1040) >> 20;
      if (v10 > (v9 >> 20))
      {
        unsigned int v11 = (v9 >> 20) + 1;
        do
        {
          unint64_t v12 = v11;
          bit_vector_set_10635(v8 + 525, v11++);
        }
        while (v10 > v12);
      }
      unint64_t v6 = _windowsResolvePtr((uint64_t)(v8 + 5), v8[3] + v8[2] * v5, 1040);
      if (!*(unsigned char *)(a2 + 184))
      {
        unint64_t v13 = *(unsigned int *)(v6 + 1032);
        int v14 = *(_DWORD *)(a2 + 24);
        if (!v14 || !((*(void *)(a2 + 16) ^ v13) >> (-4 * v14)))
        {
          char v15 = (60 - 4 * v14) & 0xFC;
          uint64_t v16 = *(void *)(v25 + 8 * ((v13 >> v15) & 0xF));
          if (v16)
          {
            int v17 = v14 + 2;
            do
            {
              char v15 = (64 - 4 * v17) & 0xFC;
              uint64_t v16 = *(void *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v15) & 0xF));
              ++v17;
            }
            while ((v16 & 1) != 0);
          }
          if (v16)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(void *)v16 + 16))(v16, v13, ~(-1 << v15)))
            {
              data_map_set_offset_for_id(*(void *)(a1 + 192), v13, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * v5) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
      ++v5;
    }
  }
  else
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (i >= result) {
        break;
      }
      int v20 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v21 = v20[3] + v20[2] * i;
      bit_vector_set_10635(v20 + 525, (v21 >> 20));
      unint64_t v22 = (v21 + 1040) >> 20;
      if (v22 > (v21 >> 20))
      {
        unsigned int v23 = (v21 >> 20) + 1;
        do
        {
          unint64_t v24 = v23;
          bit_vector_set_10635(v20 + 525, v23++);
        }
        while (v22 > v24);
      }
      unint64_t v19 = _windowsResolvePtr((uint64_t)(v20 + 5), v20[3] + v20[2] * i, 1040);
      data_map_set_offset_for_id(*(void *)(a1 + 192), *(unsigned int *)(v19 + 1032), ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::getDataForOffset(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    unint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *unint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 1024;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(void *)(result + 192) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::storageSize(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 96) + 32) + 48);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  unint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v25, *((unsigned int *)v25 + 2), *((float *)v25 + 3));
        ++v25;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v16, *((unsigned int *)v16 + 2), *((float *)v16 + 3));
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          unint64_t v21 = v15;
          int v22 = *__error();
          unsigned int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            unint64_t v24 = __p;
            if (v49 < 0) {
              unint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        ++v16;
      }
      while (v16 != v12);
    }
  }
  uint64_t v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      uint64_t v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    unint64_t v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6345AF0;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNN(v9, a4, a7, a8, 0, a9);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[1020], a2[1021], a2[1022], a2[1023]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v12 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 10000;
  }
  if (10 * v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10 * v11;
  }
  unsigned int v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v120 = 0;
  __int16 v121 = &v120;
  if (v17 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v17;
  }
  int v123 = 0;
  uint64_t v122 = 0x2000000000;
  uint64_t v116 = 0;
  __int16 v117 = &v116;
  int v119 = 0;
  uint64_t v118 = 0x2000000000;
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v113);
  double Current = CFAbsoluteTimeGetCurrent();
  int v100 = v11;
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1) <= v14)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    LODWORD(v99) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    uint64_t v62 = 0;
    int v63 = 0;
    uint64_t v64 = *(void *)(a1 + 48);
    while (v63 != *(_DWORD *)(v64 + 40))
    {
      ++*((_DWORD *)v121 + 6);
      if (*(_DWORD *)(v64 + 40) <= v62)
      {
        float v93 = __si_assert_copy_extra_329();
        float v94 = v93;
        float v95 = "";
        if (v93) {
          float v95 = v93;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v95);
LABEL_127:
        free(v94);
        if (__valid_fs(-1)) {
          uint64_t v98 = 2989;
        }
        else {
          uint64_t v98 = 3072;
        }
        *(_DWORD *)uint64_t v98 = -559038737;
        abort();
      }
      unint64_t v65 = _windowsResolvePtr(*(void *)(v64 + 32) + 40, *(void *)(*(void *)(v64 + 32) + 24) + *(void *)(*(void *)(v64 + 32) + 16) * v62, 1040);
      unint64_t v66 = *(unsigned int *)(v65 + 1032);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v65, 1, (float *)keyExistsAndHasValidFormat, 0x100uLL);
      if (*((void *)&v113 + 1))
      {
        uint8x8_t v67 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v113 + 8));
        v67.i16[0] = vaddlv_u8(v67);
        if (v67.u32[0] > 1uLL)
        {
          unint64_t v68 = v66;
          if (*((void *)&v113 + 1) <= v66) {
            unint64_t v68 = v66 % *((void *)&v113 + 1);
          }
        }
        else
        {
          unint64_t v68 = (DWORD2(v113) - 1) & v66;
        }
        std::locale v69 = *(uint64_t **)(v113 + 8 * v68);
        if (v69)
        {
          std::locale v69 = (uint64_t *)*v69;
          if (v69)
          {
            if (v67.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v71 = v69[1];
                if (v71 == v66)
                {
                  if (*((_DWORD *)v69 + 4) == v66) {
                    goto LABEL_83;
                  }
                }
                else if ((v71 & (*((void *)&v113 + 1) - 1)) != v68)
                {
                  goto LABEL_82;
                }
                std::locale v69 = (uint64_t *)*v69;
                if (!v69) {
                  goto LABEL_83;
                }
              }
            }
            do
            {
              unint64_t v70 = v69[1];
              if (v70 == v66)
              {
                if (*((_DWORD *)v69 + 4) == v66) {
                  break;
                }
              }
              else
              {
                if (v70 >= *((void *)&v113 + 1)) {
                  v70 %= *((void *)&v113 + 1);
                }
                if (v70 != v68) {
                  goto LABEL_82;
                }
              }
              std::locale v69 = (uint64_t *)*v69;
            }
            while (v69);
          }
        }
      }
      else
      {
LABEL_82:
        std::locale v69 = 0;
      }
LABEL_83:
      float v72 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v69)
        {
          int v74 = *__error();
          BOOL v75 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v72;
            _os_log_impl(&dword_1BD672000, v75, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v74;
        }
        *(void *)keyExistsAndHasValidFormat = *(void *)(v65 + 1024);
        *(_DWORD *)&Boolean keyExistsAndHasValidFormat[8] = v66;
        *(float *)&keyExistsAndHasValidFormat[12] = v72;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(a4, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v69)
        {
          int v76 = *__error();
          float v77 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v72;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v77, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v76;
        }
        ++*((_DWORD *)v117 + 6);
      }
      uint64_t v62 = (v62 + 1);
      int v63 = v62;
      if (v64 != *(void *)(a1 + 48))
      {
        BOOL v96 = __si_assert_copy_extra_329();
        float v94 = v96;
        BOOL v97 = "";
        if (v96) {
          BOOL v97 = v96;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v97);
        goto LABEL_127;
      }
    }
    int v78 = v100;
  }
  else
  {
    if (!AppIntegerValue)
    {
      keyExistsAndHasValidFormat[0] = 0;
      unsigned int v22 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0]) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = 40;
      }
      keyExistsAndHasValidFormat[0] = 0;
      int v24 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0]) {
        int v25 = v24;
      }
      else {
        int v25 = 45;
      }
      keyExistsAndHasValidFormat[0] = 0;
      int v26 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
      int v27 = keyExistsAndHasValidFormat[0];
      int v28 = 8 * v26;
      int v29 = v25 * v25;
      keyExistsAndHasValidFormat[0] = 0;
      unsigned int v30 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
      int v31 = keyExistsAndHasValidFormat[0];
      if (v30 <= 0x12) {
        char v32 = 18;
      }
      else {
        char v32 = v30;
      }
      char v33 = v32 - 3;
      unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      if (v31) {
        char v35 = v33;
      }
      else {
        char v35 = 17;
      }
      unsigned int v36 = v34 >> v35;
      if (v36 <= 8) {
        int v37 = 8;
      }
      else {
        int v37 = v36;
      }
      int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      if (v27) {
        int v39 = v28;
      }
      else {
        int v39 = 800;
      }
      int v11 = v100;
      unsigned int v40 = v39 * v38 / (v29 * v37);
      if (v23 < v40) {
        unsigned int v40 = v23;
      }
      if (v40 <= v20) {
        CFIndex AppIntegerValue = v20;
      }
      else {
        CFIndex AppIntegerValue = v40;
      }
    }
    int v41 = *__error();
    uint64_t v42 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
      *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
      *(double *)&keyExistsAndHasValidFormat[38] = a6;
      _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
    }
    *__error() = v41;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v46 = *(void *)(a1 + 80);
    uint64_t v45 = *(std::__shared_weak_count **)(a1 + 88);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v48 = *(void *)(a1 + 96);
    long long v47 = *(std::__shared_weak_count **)(a1 + 104);
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    memset(keyExistsAndHasValidFormat, 0, 24);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
    uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
    uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
    uint64_t v110 = 0;
    v111 = 0;
    uint64_t v112 = 0;
    BOOL v124 = &v110;
    unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
    if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
    {
      v108 = 0;
      unint64_t v109 = 0;
      uint64_t v107 = 0;
    }
    else
    {
      do
      {
        int v52 = *v50;
        v50 += 2;
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v124, v52);
      }
      while (v50 != v49);
      float v53 = v110;
      v108 = 0;
      unint64_t v109 = 0;
      uint64_t v107 = 0;
      int64_t v54 = v111 - (unsigned char *)v110;
      if (v111 != v110)
      {
        if (v54 < 0) {
          abort();
        }
        long long v55 = (char *)operator new(v111 - (unsigned char *)v110);
        uint64_t v56 = &v55[4 * (v54 >> 2)];
        uint64_t v107 = v55;
        unint64_t v109 = v56;
        memcpy(v55, v53, v54);
        v108 = v56;
      }
    }
    v102[0] = MEMORY[0x1E4F143A8];
    v102[1] = 1174405120;
    v102[2] = ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIfLi256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
    v102[3] = &unk_1F18169B0;
    v102[6] = a1;
    v102[7] = a2;
    v102[4] = &v120;
    std::unordered_set<unsigned int>::unordered_set((uint64_t)&v103, (uint64_t)&v113);
    float v106 = a6;
    v102[5] = &v116;
    uint64_t v105 = a4;
    (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v107, v102);
    if (v107)
    {
      v108 = v107;
      operator delete(v107);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
    unint64_t v90 = v104;
    int v78 = v100;
    if (v104)
    {
      do
      {
        float v91 = (void *)*v90;
        operator delete(v90);
        unint64_t v90 = v91;
      }
      while (v91);
    }
    float v92 = v103;
    uint64_t v103 = 0;
    if (v92) {
      operator delete(v92);
    }
    if (v110)
    {
      v111 = v110;
      operator delete(v110);
    }
    if (*(void *)keyExistsAndHasValidFormat)
    {
      *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
      operator delete(*(void **)keyExistsAndHasValidFormat);
    }
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    unint64_t v99 = v51 >> 3;
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  int v79 = *__error();
  int v80 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    int v81 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    int v82 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    int v83 = *((_DWORD *)v117 + 6);
    int v84 = *((_DWORD *)v121 + 6);
    uint64_t v85 = (uint64_t)(a4[2] - a4[1]) >> 4;
    CFAbsoluteTime v86 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v78;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v81;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v99;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v82;
    __int16 v126 = 1024;
    int v127 = v83;
    __int16 v128 = 1024;
    int v129 = v84;
    __int16 v130 = 2048;
    uint64_t v131 = v85;
    __int16 v132 = 2048;
    CFAbsoluteTime v133 = v86 - Current;
    _os_log_impl(&dword_1BD672000, v80, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v79;
  uint64_t v87 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      float v88 = (void *)*v87;
      operator delete(v87);
      uint64_t v87 = v88;
    }
    while (v88);
  }
  uint64_t v89 = (void *)v113;
  *(void *)&long long v113 = 0;
  if (v89) {
    operator delete(v89);
  }
  _Block_object_dispose(&v116, 8);
  _Block_object_dispose(&v120, 8);
}

void ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIfLi256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v5 = *a3;
  uint64_t v6 = *(void **)(*(void *)(v4 + 48) + 32);
  unint64_t v7 = v6[3] + v6[2] * v5;
  bit_vector_set_10635(v6 + 525, (v7 >> 20));
  unint64_t v8 = (v7 + 1040) >> 20;
  if (v8 > (v7 >> 20))
  {
    unsigned int v9 = (v7 >> 20) + 1;
    do
    {
      unint64_t v10 = v9;
      bit_vector_set_10635(v6 + 525, v9++);
    }
    while (v8 > v10);
  }
  unint64_t v11 = _windowsResolvePtr((uint64_t)(v6 + 5), v6[3] + v6[2] * v5, 1040);
  unsigned int v12 = *(const float **)(a1 + 56);
  LODWORD(v29) = 2139095039;
  vDSP_distancesq(v12, 1, (const float *)v11, 1, (float *)&v29, 0x100uLL);
  float v13 = *(float *)&v29;
  unint64_t v14 = *(unsigned int *)(v11 + 1032);
  int8x8_t v15 = *(int8x8_t *)(a1 + 72);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v17 = *(unsigned int *)(v11 + 1032);
      if (*(void *)&v15 <= v14) {
        unint64_t v17 = v14 % *(void *)&v15;
      }
    }
    else
    {
      unint64_t v17 = (v15.i32[0] - 1) & v14;
    }
    unsigned int v18 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v17);
    if (v18)
    {
      unsigned int v18 = (uint64_t *)*v18;
      if (v18)
      {
        if (v16.u32[0] < 2uLL)
        {
          uint64_t v19 = *(void *)&v15 - 1;
          while (1)
          {
            uint64_t v21 = v18[1];
            if (v21 == v14)
            {
              if (*((_DWORD *)v18 + 4) == v14) {
                goto LABEL_25;
              }
            }
            else if ((v21 & v19) != v17)
            {
              goto LABEL_24;
            }
            unsigned int v18 = (uint64_t *)*v18;
            if (!v18) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v20 = v18[1];
          if (v20 == v14)
          {
            if (*((_DWORD *)v18 + 4) == v14) {
              break;
            }
          }
          else
          {
            if (v20 >= *(void *)&v15) {
              v20 %= *(void *)&v15;
            }
            if (v20 != v17) {
              goto LABEL_24;
            }
          }
          unsigned int v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
  else
  {
LABEL_24:
    unsigned int v18 = 0;
  }
LABEL_25:
  float v22 = *(float *)(a1 + 112);
  if (v22 == 0.0 || *(float *)&v29 <= v22)
  {
    if (v18)
    {
      int v24 = *__error();
      int v25 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v29) = 67109376;
        HIDWORD(v29) = v14;
        *(_WORD *)unsigned int v30 = 2048;
        *(double *)&uint64_t v30[2] = v13;
        _os_log_impl(&dword_1BD672000, v25, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", (uint8_t *)&v29, 0x12u);
      }
      *__error() = v24;
    }
    uint64_t v29 = *(void *)(v11 + 1024);
    *(_DWORD *)unsigned int v30 = v14;
    *(float *)&v30[4] = v13;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(void **)(a1 + 104), (uint64_t)&v29);
  }
  else
  {
    if (v18)
    {
      int v26 = *__error();
      int v27 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        double v28 = *(float *)(a1 + 112);
        LODWORD(v29) = 67109632;
        HIDWORD(v29) = v14;
        *(_WORD *)unsigned int v30 = 2048;
        *(double *)&uint64_t v30[2] = v13;
        __int16 v31 = 2048;
        double v32 = v28;
        _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", (uint8_t *)&v29, 0x1Cu);
      }
      *__error() = v26;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::createCandidateQueue()
{
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNNForTest(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  uint64_t v6 = __si_assert_copy_extra_329();
  unint64_t v7 = v6;
  unint64_t v8 = "";
  if (v6) {
    unint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNN(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    unint64_t v14 = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    int8x8_t v15 = &unk_1E6345AC8;
    uint64_t v16 = a9;
    operator new();
  }
  unsigned int v9 = __si_assert_copy_extra_329();
  unint64_t v10 = v9;
  unint64_t v11 = "";
  if (v9) {
    unint64_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::restoreUpdateSet()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3127, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::storeUpdateSet()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3122, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::rename(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 144);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 96);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 87) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 64), *(void *)(v16 + 72));
  }
  else {
    std::string buf = *(std::string *)(v16 + 64);
  }
  MEMORY[0x1C1880BF0](v16 + 64, a2);
  int v17 = *__error();
  unsigned int v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__s, v16);
    unint64_t v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)int v24 = 136315394;
    int v25 = v19;
    __int16 v26 = 2080;
    int v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  fd_rename(*(void *)(*(void *)(v16 + 32) + 40), a2);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::makePurgeable(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 96);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(void *)(v2 + 32) + 40));
  size_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::makeReadOnly(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 96);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v5);
      unint64_t v8 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      float v22 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    uint64_t v9 = *(void *)(v5 + 32);
    fd_make_readonly(*(void *)(v9 + 40));
    uint64_t v10 = *(void *)(v9 + 40);
    if (v10)
    {
      do
      {
        int v11 = fchmodat(*(_DWORD *)(v10 + 44), *(const char **)(v10 + 72), 0x100u, 2048);
        uint64_t v12 = g_prot_error_callback;
        if (v11 != -1 || g_prot_error_callback == 0) {
          break;
        }
        uint64_t v14 = *(unsigned int *)(v10 + 40);
        int8x8_t v15 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v12 + 16))(v12, v14, *v15, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 136);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a1 + 144);
    int v17 = *(std::__shared_weak_count **)(a1 + 152);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
    (*(void (**)(uint64_t))(*(void *)v18 + 120))(v18);
    *(unsigned char *)(a1 + 208) = 1;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::truncate(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(*(void *)(a1 + 96));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    int v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 144);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 152);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

BOOL IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::unlink(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  int v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 96);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    int8x8_t v15 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  BOOL v10 = vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(v6 + 32));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v10;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::subvert(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    BOOL v10 = __si_assert_copy_extra_329();
    int v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 152);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  int v7 = *(std::__shared_weak_count **)(a2 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 176))(v6, v9);
  vi_onefixedsize_disk_allocator::subvert(*(void *)(*(void *)(a2 + 96) + 32), *(void *)(*(void *)(a1 + 96) + 32));
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    int8x8_t v15 = "";
    if (v13) {
      int8x8_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  int v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    uint64_t v16 = __si_assert_copy_extra_329();
    int v17 = v16;
    __int16 v18 = "";
    if (v16) {
      __int16 v18 = v16;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2712, "target->nVectors() == 0", v18);
    free(v17);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = operator new(8uLL);
  v31[0] = v6;
  *int v6 = a1;
  v31[1] = v6 + 1;
  v31[2] = v6 + 1;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v31);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v8 = *(void *)(a1 + 80);
  int v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  int v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v30[0] = v8;
  v30[1] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v30);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v30);
  }
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  long long v27 = 0u;
  uint64_t v25 = v10;
  __int16 v26 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(std::__shared_weak_count **)(a1 + 56);
  v24[0] = v11;
  v24[1] = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
  }
  char v13 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  __int16 v20 = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  int v21 = &__block_descriptor_tmp_839;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v34 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v32, (uint64_t)&v27);
    long long v35 = v32;
    long long v36 = v33;
    if (!(void)v33) {
      break;
    }
    v20((uint64_t)v19, (unsigned int *)&v35, (BOOL *)&v34);
  }
  while (!v34);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v29);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  int8x8_t v15 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v31[0]) {
    operator delete(v31[0]);
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(const void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v7 = v5 - *(void *)a3;
  if (v5 == *(void *)a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      goto LABEL_197;
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a3);
    size_t v9 = v7;
    uint64_t v7 = (uint64_t)&v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v9);
  }
  v144 = 0;
  v145 = 0;
  QuantizerManager<float,256>::sharedQuantizer(&v144, a1, 0);
  uint64_t v10 = v7 - (void)v8;
  if ((char *)v7 == v8)
  {
    int v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF9) {
      goto LABEL_197;
    }
    uint64_t v11 = (std::__shared_weak_count **)operator new(2 * v10);
    bzero(v11, 2 * v10);
    int v12 = (std::__shared_weak_count **)((char *)v11 + 2 * v10);
  }
  uint64_t v110 = a1;
  size_t __sz = v7 - (void)v8;
  unsigned int v114 = ((uint64_t (*)(std::__shared_weak_count *))v144->__get_deleter)(v144);
  v108 = (char *)v7;
  unint64_t v109 = v10 >> 3;
  v111 = a2;
  uint64_t v112 = v11;
  std::string __p = v8;
  if ((char *)v7 != v8)
  {
    if ((unint64_t)(v10 >> 3) <= 1) {
      unint64_t v13 = 1;
    }
    else {
      unint64_t v13 = v10 >> 3;
    }
    uint64_t v14 = v11 + 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v8 + 16))(keyExistsAndHasValidFormat);
      int8x8_t v15 = v144;
      int v17 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      uint64_t v16 = v122;
      if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v17 == v15) {
          goto LABEL_16;
        }
      }
      else if (v17 == v15)
      {
        goto LABEL_16;
      }
      *(void *)keyExistsAndHasValidFormat = 0;
      uint64_t v122 = 0;
      uint64_t v18 = *(void *)v8;
      v142 = v144;
      v143 = v145;
      if (v145) {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(Boolean *__return_ptr))(*(void *)v18 + 40))(keyExistsAndHasValidFormat);
      int v19 = v143;
      if (v143)
      {
        if (!atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      __int16 v20 = v122;
      if (v122) {
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v22 = *v14;
      *(v14 - 1) = v21;
      *uint64_t v14 = v20;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        uint64_t v23 = v122;
        if (v122)
        {
LABEL_29:
          if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      else
      {
        uint64_t v23 = v122;
        if (v122) {
          goto LABEL_29;
        }
      }
LABEL_16:
      v14 += 2;
      v8 += 8;
      if (!--v13)
      {
        if (v109 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v10 >> 3;
        }
        uint64_t v25 = __p;
        __int16 v26 = v112 + 1;
        while (1)
        {
          uint64_t v27 = (uint64_t)*(v26 - 1);
          if (v27)
          {
            uint64_t v28 = *(void *)v25;
            v140 = v144;
            v141 = v145;
            if (v145) {
              atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v138 = v27;
            v139 = *v26;
            if (v139) {
              atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t *))(*(void *)v28 + 48))(v28, &v140, &v138);
            uint64_t v29 = v139;
            if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
              unsigned int v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            else
            {
              unsigned int v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
LABEL_52:
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          __int16 v31 = v122;
          uint64_t v32 = *(unsigned int *)(*(void *)keyExistsAndHasValidFormat + 72);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          long long v33 = v122;
          int v34 = *(_DWORD *)(*(void *)keyExistsAndHasValidFormat + 68);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          if (v34 != v114)
          {
            float v91 = __si_assert_copy_extra_329();
            float v92 = v91;
            float v93 = "";
            if (v91) {
              float v93 = v91;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2199, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v93);
LABEL_185:
            free(v92);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v13 += v32;
          v25 += 8;
          v26 += 2;
          if (!--v24) {
            goto LABEL_62;
          }
        }
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
    __int16 v20 = v122;
    if (!v122) {
      goto LABEL_26;
    }
LABEL_25:
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_26;
  }
  unint64_t v13 = 0;
LABEL_62:
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v36 = AppIntegerValue;
  }
  else {
    unsigned int v36 = 45;
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v37 = CFPreferencesGetAppIntegerValue(@"IVFTrainingTimeBudget", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    double v38 = (double)v37;
  }
  else {
    double v38 = 30.0;
  }
  unsigned int v40 = v111;
  int v39 = v112;
  int v41 = __p;
  if (v13 >> 4 < 0x271 || v13 < v36 * (unint64_t)v114 * v36 * (unint64_t)v114 / 0x64)
  {
LABEL_87:
    if (!v112) {
      goto LABEL_95;
    }
    goto LABEL_88;
  }
  unsigned __int8 v42 = atomic_exchange((atomic_uchar *volatile)(v110 + 72), 1u);
  if ((v42 & 1) == 0 && *(void *)(v110 + 96))
  {
    float v94 = __si_assert_copy_extra_329();
    float v95 = v94;
    BOOL v96 = "";
    if (v94) {
      BOOL v96 = v94;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 737, "_trainingQuantizer == nullptr", v96);
    free(v95);
    if (__valid_fs(-1)) {
      uint64_t v97 = 2989;
    }
    else {
      uint64_t v97 = 3072;
    }
    *(_DWORD *)uint64_t v97 = -559038737;
    goto LABEL_197;
  }
  FdPtrForFile = (atomic_uint *)QuantizerManager<float,768>::createFdPtrForFile(v110, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, (unsigned __int8 *)(v110 + 72));
    goto LABEL_84;
  }
  int v44 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v44);
  if (v42)
  {
LABEL_84:
    int v56 = *__error();
    int v57 = _SILogForLogForCategory(16);
    os_log_type_t v58 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v57, v58))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1BD672000, v57, v58, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v56;
    goto LABEL_87;
  }
  unsigned int v106 = v36;
  uint64_t v45 = _SILogForLogForCategory(0);
  os_signpost_id_t v46 = os_signpost_id_make_with_pointer(v45, 0);
  long long v47 = _SILogForLogForCategory(0);
  unint64_t v101 = v46 - 1;
  if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v48 = v47;
    if (os_signpost_enabled(v47))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v48, OS_SIGNPOST_INTERVAL_BEGIN, v46, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  os_signpost_id_t spid = v46;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  uint64_t v127 = 0;
  long long v126 = 0u;
  long long v125 = 0u;
  memset(v124, 0, sizeof(v124));
  uint64_t v122 = 0;
  uint64_t v105 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v103 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v128 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v102 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v123 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v49 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v50 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)keyExistsAndHasValidFormat = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v50;
  uint64_t v122 = 0;
  unint64_t v51 = (std::ios_base *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v51, v124);
  v51[1].__vftable = 0;
  v51[1].__fmtflags_ = -1;
  uint64_t v52 = v49[5];
  uint64_t v123 = v49[4];
  *(void *)((char *)&v124[-1] + *(void *)(v123 - 24)) = v52;
  *(void *)keyExistsAndHasValidFormat = v49[1];
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v49[6];
  uint64_t v128 = v103;
  *(void *)keyExistsAndHasValidFormat = v105;
  uint64_t v123 = v102;
  std::streambuf::basic_streambuf();
  uint64_t v104 = MEMORY[0x1E4FBA470] + 16;
  v124[0] = MEMORY[0x1E4FBA470] + 16;
  long long v125 = 0u;
  long long v126 = 0u;
  LODWORD(v127) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"[", 1);
  unsigned int v40 = v111;
  if (v108 != __p)
  {
    float v53 = __p;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v53 + 24))(block);
      int64_t v54 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
      long long v55 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      v53 += 8;
    }
    while (v53 != v108);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"]", 1);
  int v61 = *__error();
  uint64_t v62 = _SILogForLogForCategory(16);
  os_log_type_t v63 = 2 * (dword_1E9FC90E4 < 4);
  int v41 = __p;
  if (os_log_type_enabled(v62, v63))
  {
    std::stringbuf::str();
    uint64_t v64 = v149[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v64;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v114;
    _os_log_impl(&dword_1BD672000, v62, v63, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v149[7] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  *__error() = v61;
  double Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v38)
  {
    int v68 = 0;
LABEL_147:
    int v39 = v112;
    uint64_t v66 = v110;
    goto LABEL_149;
  }
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
  uint64_t v66 = v110;
  uint64_t v119 = v110;
  uint64_t v120 = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(buf, 0, 24);
  if (v108 != __p)
  {
    if ((__sz & 0x8000000000000000) == 0)
    {
      uint8x8_t v67 = (char *)operator new(__sz);
      *(void *)std::string buf = v67;
      *(void *)&buf[16] = &v67[8 * v109];
      int v41 = __p;
      memcpy(v67, __p, __sz);
      *(void *)&uint8_t buf[8] = &v67[8 * v109];
      uint64_t v66 = v110;
      goto LABEL_118;
    }
LABEL_197:
    abort();
  }
  uint8x8_t v67 = 0;
LABEL_118:
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
  int v69 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(&v119, (uint64_t *)buf);
  if (v67)
  {
    *(void *)&uint8_t buf[8] = v67;
    operator delete(v67);
  }
  if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  int v39 = v112;
  if (v69)
  {
    QuantizerManager<float,256>::lastTrainedQuantizer(block, v66);
    unsigned int v70 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
    uint64_t v71 = (std::__shared_weak_count *)v148;
    if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    if (v13 < v36 * (unint64_t)v70 * v36 * (unint64_t)v70 / 0x64)
    {
      int v68 = 1;
LABEL_129:
      unsigned int v72 = v68;
      unsigned int v40 = v111;
      while (1)
      {
        int v68 = v72;
        if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
          goto LABEL_146;
        }
        v118[0] = v110;
        v118[1] = (uint64_t)v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        __int16 v117 = 0;
        if (v108 != __p) {
          break;
        }
        int v74 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(v118, (uint64_t *)&v115);
        if (v40) {
          goto LABEL_138;
        }
LABEL_140:
        if (v74)
        {
          ++v72;
          block[0] = 0;
          int v75 = CFPreferencesGetAppIntegerValue(@"IVFMaxTrainingIteration", @"com.apple.Spotlight", block);
          unsigned int v76 = block[0] ? v75 : 3;
          if (v72 <= v76) {
            continue;
          }
        }
        ++v68;
        goto LABEL_146;
      }
      if ((__sz & 0x8000000000000000) != 0) {
        goto LABEL_197;
      }
      uint64_t v73 = (char *)operator new(__sz);
      uint64_t v115 = v73;
      __int16 v117 = &v73[8 * v109];
      memcpy(v73, __p, __sz);
      uint64_t v116 = &v73[8 * v109];
      int v74 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(v118, (uint64_t *)&v115);
      uint64_t v116 = v73;
      operator delete(v73);
      unsigned int v40 = v111;
      if (!v111) {
        goto LABEL_140;
      }
LABEL_138:
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      goto LABEL_140;
    }
    int v68 = 1;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
        goto LABEL_129;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
      uint64_t v119 = v110;
      uint64_t v120 = v111;
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(buf, 0, 24);
      if (v108 == __p)
      {
        uint64_t v87 = 0;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_197;
        }
        uint64_t v87 = (char *)operator new(__sz);
        *(void *)std::string buf = v87;
        *(void *)&buf[16] = &v87[8 * v109];
        memcpy(v87, __p, __sz);
        *(void *)&uint8_t buf[8] = &v87[8 * v109];
        unsigned int v36 = v106;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
      int v88 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(&v119, (uint64_t *)buf);
      if (v87)
      {
        *(void *)&uint8_t buf[8] = v87;
        operator delete(v87);
      }
      unsigned int v40 = v111;
      if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      ++v68;
      if (!v88) {
        break;
      }
      QuantizerManager<float,256>::lastTrainedQuantizer(block, v110);
      unsigned int v89 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
      unint64_t v90 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      if (v13 < v36 * (unint64_t)v89 * v36 * (unint64_t)v89 / 0x64) {
        goto LABEL_129;
      }
    }
LABEL_146:
    int v41 = __p;
    goto LABEL_147;
  }
  int v68 = 1;
LABEL_149:
  unsigned __int8 v77 = atomic_load((unsigned __int8 *)(v66 + 72));
  if ((v77 & 1) == 0)
  {
    uint64_t v98 = __si_assert_copy_extra_329();
    float v92 = v98;
    unint64_t v99 = "";
    if (v98) {
      unint64_t v99 = v98;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 814, "_training.test()", v99);
    goto LABEL_185;
  }
  if (*(void *)(v66 + 96))
  {
    int v78 = *(NSObject **)(v66 + 16);
    *(void *)block = MEMORY[0x1E4F143A8];
    uint64_t v148 = 0x40000000;
    *(void *)v149 = ___ZN16QuantizerManagerIfLi256EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v149[8] = &__block_descriptor_tmp_864_6951;
    *(void *)&v149[16] = v66;
    dispatch_sync(v78, block);
  }
  atomic_store(0, (unsigned __int8 *)(v66 + 72));
  QuantizerManager<float,256>::sharedQuantizer(block, v66, 0);
  unsigned int v79 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
  int v80 = (std::__shared_weak_count *)v148;
  if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  int v81 = _SILogForLogForCategory(0);
  if (v101 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v82 = v81;
    if (os_signpost_enabled(v81))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v82, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  int v83 = *__error();
  int v84 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v85 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v13;
    LOWORD(v148) = 1024;
    *(_DWORD *)((char *)&v148 + 2) = v79;
    HIWORD(v148) = 1024;
    *(_DWORD *)v149 = v13 / v79;
    *(_WORD *)&v149[4] = 1024;
    *(_DWORD *)&v149[6] = v68;
    *(_WORD *)&v149[10] = 2048;
    *(double *)&v149[12] = v85 - Current;
    _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v83;
  *(void *)keyExistsAndHasValidFormat = *MEMORY[0x1E4FBA408];
  uint64_t v86 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v123 = v86;
  v124[0] = v104;
  if (SBYTE7(v126) < 0) {
    operator delete((void *)v125);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1880F90](&v128);
  if (v39)
  {
LABEL_88:
    while (v12 != v39)
    {
      int v59 = *(v12 - 1);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v12 -= 2;
    }
    operator delete(v39);
  }
LABEL_95:
  int v60 = v145;
  if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v41) {
    operator delete(v41);
  }
  if (v40)
  {
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

unsigned int *___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  uint64_t v5 = **((void **)a2 + 3);
  uint64_t result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(*(void *)(a1 + 32), a2[2], *((void **)a2 + 2), *a2, 0, *((float *)a2 + 1));
  *((void *)result + 128) = v5;
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a2 + 64));
    *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (*(void *)(a2 + 72))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(a2 + 64));
        int v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        if (v6) {
          break;
        }
        uint64_t v7 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a2 + 40)
                                                      + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(a2 + 64)
                                          + 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(void *)(a2 + 72) - 1;
        unint64_t v9 = *(void *)(a2 + 64) + 1;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v8;
        if (v9 >= 0x200)
        {
          operator delete(**(void ***)(a2 + 40));
          *(void *)(a2 + 40) += 8;
          uint64_t v8 = *(void *)(a2 + 72);
          unint64_t v9 = *(void *)(a2 + 64) - 256;
          *(void *)(a2 + 64) = v9;
        }
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v9);
          *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          if (*(void *)(a2 + 72)) {
            continue;
          }
        }
        return;
      }
      *(_DWORD *)(a1 + 4) = v6[1];
      uint64_t v11 = *v6;
      int v12 = *(void **)(*(void *)(a2 + 16) + 32);
      unint64_t v13 = v12[3] + v12[2] * v11;
      bit_vector_set_10635(v12 + 525, (v13 >> 20));
      unint64_t v14 = (v13 + 1040) >> 20;
      if (v14 > (v13 >> 20))
      {
        unsigned int v15 = (v13 >> 20) + 1;
        do
        {
          unint64_t v16 = v15;
          bit_vector_set_10635(v12 + 525, v15++);
        }
        while (v14 > v16);
      }
      unint64_t v17 = _windowsResolvePtr((uint64_t)(v12 + 5), v12[3] + v12[2] * v11, 1040);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(v17 + 1032);
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v17 + 1024;
    }
  }
}

unsigned int *IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  unsigned int v123 = a4;
  float v122 = a6;
  if (*(unsigned char *)(a1 + 160))
  {
    BOOL v96 = __si_assert_copy_extra_329();
    uint64_t v97 = v96;
    uint64_t v98 = "";
    if (v96) {
      uint64_t v98 = v96;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v98);
    goto LABEL_127;
  }
  if (!a2)
  {
    unint64_t v99 = __si_assert_copy_extra_329();
    uint64_t v97 = v99;
    int v100 = "";
    if (v99) {
      int v100 = v99;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v100);
    goto LABEL_127;
  }
  if (a5)
  {
    uint64_t v9 = a4;
    if (a4 == -1) {
      goto LABEL_114;
    }
    goto LABEL_32;
  }
  unsigned int Vector = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(a1, (uint64_t)a3, (int *)&v123, &v122, a2);
  uint64_t v9 = v123;
  if (v123 == -1)
  {
LABEL_114:
    unint64_t v101 = __si_assert_copy_extra_329();
    uint64_t v102 = v101;
    uint64_t v103 = "";
    if (v101) {
      uint64_t v103 = v101;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v103);
    goto LABEL_117;
  }
  if (Vector == -1)
  {
LABEL_32:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 88);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v120 = a2;
    unsigned int v30 = *(std::__shared_weak_count **)(a1 + 104);
    uint64_t v118 = *(_DWORD **)(a1 + 96);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v116 = v30;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v32 = *(void **)(v31 + 32);
    uint64_t v115 = (uint64_t)(v32 + 1);
    unint64_t v33 = v32[2];
    uint64_t v34 = v32[7];
    uint64_t v35 = v34 + v33;
    __int16 v117 = v29;
    if (v34 + v33 >= v32[6])
    {
      if (!_storage_array_Expand(v115))
      {
        unint64_t v40 = 0;
        goto LABEL_41;
      }
      uint64_t v34 = v32[7];
      uint64_t v35 = v34 + v33;
    }
    v32[7] = v35;
    unint64_t v36 = v32[3];
    bit_vector_set_10635(v32 + 525, 0);
    if (v36 >= 0x100000)
    {
      unint64_t v37 = v36 >> 20;
      unsigned int v38 = 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v32 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = (v34 - v32[3]) / v33;
LABEL_41:
    unint64_t v41 = v32[2];
    if (v33 <= 0x40F && v41 <= 0x40F)
    {
      LODWORD(v42) = 1040;
      while (1)
      {
        unint64_t v43 = v32[7] + v41;
        if (v43 < v32[6]) {
          goto LABEL_46;
        }
        if (_storage_array_Expand(v115)) {
          break;
        }
LABEL_44:
        unint64_t v41 = v32[2];
        unint64_t v42 = (v42 - v41);
        if (v41 >= v42) {
          goto LABEL_52;
        }
      }
      unint64_t v43 = v32[7] + v41;
LABEL_46:
      v32[7] = v43;
      unint64_t v44 = v32[3];
      bit_vector_set_10635(v32 + 525, 0);
      if (v44 >= 0x100000)
      {
        unint64_t v45 = v44 >> 20;
        unsigned int v46 = 1;
        do
        {
          unint64_t v47 = v46;
          bit_vector_set_10635(v32 + 525, v46++);
        }
        while (v45 > v47);
      }
      goto LABEL_44;
    }
LABEL_52:
    unint64_t v48 = v32[3] + v41 * v40;
    uint64_t v49 = v32 + 525;
    bit_vector_set_10635(v49, (v48 >> 20));
    unint64_t v50 = (v48 + 1040) >> 20;
    if (v50 > (v48 >> 20))
    {
      unsigned int v51 = (v48 >> 20) + 1;
      do
      {
        unint64_t v52 = v51;
        bit_vector_set_10635(v49, v51++);
      }
      while (v50 > v52);
    }
    uint64_t v53 = *(unsigned int *)(v31 + 40);
    unint64_t v54 = v40;
    if (v40 != v53)
    {
      int v55 = *__error();
      int v56 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        int v93 = *(_DWORD *)(v31 + 40);
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "newEntry";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 1882;
        *(_WORD *)&v128[4] = 2048;
        *(void *)&v128[6] = v40;
        *(_WORD *)&v128[14] = 1024;
        *(_DWORD *)&v128[16] = v93;
        _os_log_error_impl(&dword_1BD672000, v56, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v55;
      int v57 = *(void **)(v31 + 32);
      int v58 = *__error();
      int v59 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = v57[6];
        uint64_t v61 = v57[7];
        uint64_t v63 = v57[2];
        uint64_t v62 = v57[3];
        *(_DWORD *)std::string __p = 134219008;
        *(void *)&__p[4] = v57;
        __int16 v127 = 2048;
        *(void *)uint64_t v128 = v60;
        *(_WORD *)&v128[8] = 2048;
        *(void *)&v128[10] = v61;
        *(_WORD *)&v128[18] = 2048;
        *(void *)long long v129 = v62;
        *(_WORD *)&v129[8] = 2048;
        uint64_t v130 = v63;
        _os_log_impl(&dword_1BD672000, v59, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v58;
      unint64_t v54 = *(unsigned int *)(v31 + 40);
      LODWORD(v53) = *(_DWORD *)(v31 + 40);
    }
    if (v40 == v54)
    {
      *(_DWORD *)(v31 + 40) = v53 + 1;
      uint64_t v64 = *(void **)(v31 + 32);
      unint64_t v65 = v64[3] + v64[2] * v40;
      bit_vector_set_10635(v64 + 525, (v65 >> 20));
      unint64_t v66 = (v65 + 1040) >> 20;
      if (v66 > (v65 >> 20))
      {
        unsigned int v67 = (v65 >> 20) + 1;
        do
        {
          unint64_t v68 = v67;
          bit_vector_set_10635(v64 + 525, v67++);
        }
        while (v66 > v68);
      }
      unint64_t v69 = _windowsResolvePtr((uint64_t)(v64 + 5), v64[3] + v64[2] * v40, 1040);
      memcpy((void *)v69, __src, 0x400uLL);
      *(void *)(v69 + 1024) = 0;
      *(_DWORD *)(v69 + 1032) = v120;
      if (*(_DWORD *)(v31 + 40) == 1) {
        *(_DWORD *)(v31 + 52) = v120;
      }
      *(_DWORD *)(v31 + 56) = v120;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(void *)v118 + 56))(v118, v9, v40, v122);
      uint64_t v70 = *(void *)(a1 + 48);
      if (v118[18] == *(_DWORD *)(v70 + 40))
      {
        uint64_t v71 = *(void **)(v70 + 32);
        unint64_t v72 = v71[3] + v71[2] * v40;
        bit_vector_set_10635(v71 + 525, (v72 >> 20));
        unint64_t v73 = (v72 + 1040) >> 20;
        if (v73 > (v72 >> 20))
        {
          unsigned int v74 = (v72 >> 20) + 1;
          do
          {
            unint64_t v75 = v74;
            bit_vector_set_10635(v71 + 525, v74++);
          }
          while (v73 > v75);
        }
        unint64_t v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v71 + 5), v71[3] + v71[2] * v40, 1040);
        data_map_set_offset_for_id(*(void *)(a1 + 144), v120, (16 * v40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4* (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
        return v17;
      }
      uint64_t v107 = __si_assert_copy_extra_329();
      uint64_t v97 = v107;
      v108 = "";
      if (v107) {
        v108 = v107;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v108);
    }
    else
    {
      uint64_t v105 = __si_assert_copy_extra_329();
      uint64_t v97 = v105;
      unsigned int v106 = "";
      if (v105) {
        unsigned int v106 = v105;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v106);
    }
LABEL_127:
    free(v97);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v12 = Vector;
  unint64_t v13 = v11[3] + v11[2] * Vector;
  bit_vector_set_10635(v11 + 525, (v13 >> 20));
  unint64_t v14 = (v13 + 1040) >> 20;
  if (v14 > (v13 >> 20))
  {
    unsigned int v15 = (v13 >> 20) + 1;
    do
    {
      unint64_t v16 = v15;
      bit_vector_set_10635(v11 + 525, v15++);
    }
    while (v14 > v16);
  }
  unint64_t v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v11 + 5), v11[3] + v11[2] * v12, 1040);
  if (v17[258] != a2)
  {
    uint64_t v121 = 0;
    data = (const void *)data_map_get_data(*(void *)(a1 + 144), a2, &v121);
    int v19 = *__error();
    __int16 v20 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v127 = 1024;
      *(_DWORD *)uint64_t v128 = 2586;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = a2;
      *(_WORD *)&v128[10] = 2048;
      *(void *)&v128[12] = data;
      *(_WORD *)long long v129 = 2048;
      *(void *)&v129[2] = v121;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v19;
    if (v121 < 1)
    {
      int v26 = *__error();
      unsigned int v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2595;
        _os_log_error_impl(&dword_1BD672000, v76, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v121 != 1024)
      {
        v111 = __si_assert_copy_extra_329();
        uint64_t v97 = v111;
        uint64_t v112 = "";
        if (v111) {
          uint64_t v112 = v111;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v112);
        goto LABEL_127;
      }
      if (!data || !memcmp(data, a3, 0x400uLL))
      {
LABEL_80:
        unsigned __int8 v77 = (const void *)data_map_get_data(*(void *)(a1 + 144), v17[258], &v121);
        int v78 = *__error();
        unsigned int v79 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          unsigned int v94 = v17[258];
          *(_DWORD *)std::string __p = 136316162;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2598;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = v94;
          *(_WORD *)&v128[10] = 2048;
          *(void *)&v128[12] = v77;
          *(_WORD *)long long v129 = 2048;
          *(void *)&v129[2] = v121;
          _os_log_error_impl(&dword_1BD672000, v79, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v78;
        if (v121 < 1)
        {
          int v86 = *__error();
          unsigned int v89 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2607;
            _os_log_error_impl(&dword_1BD672000, v89, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v121 != 1024)
          {
            long long v113 = __si_assert_copy_extra_329();
            uint64_t v97 = v113;
            unsigned int v114 = "";
            if (v113) {
              unsigned int v114 = v113;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v114);
            goto LABEL_127;
          }
          size_t v80 = 1024;
          if (!v77 || !memcmp(v77, v17, 0x400uLL)) {
            goto LABEL_103;
          }
          int v81 = *__error();
          int v82 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2602;
            _os_log_error_impl(&dword_1BD672000, v82, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v81;
          int v83 = *__error();
          int v84 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v77, v121);
            CFAbsoluteTime v85 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v85;
            _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          *__error() = v83;
          int v86 = *__error();
          uint64_t v87 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v17, v121);
            int v88 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v88;
            _os_log_impl(&dword_1BD672000, v87, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        *__error() = v86;
        size_t v80 = v121;
LABEL_103:
        if (memcmp(a3, v17, v80))
        {
          unint64_t v109 = __si_assert_copy_extra_329();
          uint64_t v102 = v109;
          uint64_t v110 = "";
          if (v109) {
            uint64_t v110 = v109;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v110);
LABEL_117:
          free(v102);
          if (__valid_fs(-1)) {
            uint64_t v104 = 2989;
          }
          else {
            uint64_t v104 = 3072;
          }
          *(_DWORD *)uint64_t v104 = -559038737;
          abort();
        }
        int v90 = *__error();
        float v91 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
        {
          unsigned int v95 = v17[258];
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2610;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = a2;
          *(_WORD *)&v128[10] = 1024;
          *(_DWORD *)&v128[12] = v95;
          _os_log_fault_impl(&dword_1BD672000, v91, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v90;
        return v17;
      }
      int v21 = *__error();
      uint64_t v22 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2590;
        _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v21;
      int v23 = *__error();
      uint64_t v24 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v121);
        uint64_t v25 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v25;
        _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v23;
      int v26 = *__error();
      uint64_t v27 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v121);
        uint64_t v28 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v28;
        _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v26;
    goto LABEL_80;
  }
  return v17;
}

uint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  uint64_t v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *(_DWORD **)(a1 + 96);
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      unint64_t v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          int v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          uint64_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      int v23 = __si_assert_copy_extra_329();
      int v21 = v23;
      uint64_t v24 = "";
      if (v23) {
        uint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      __int16 v20 = __si_assert_copy_extra_329();
      int v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  uint64_t v34 = 0;
  uint64_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIfLi256EERjRfj_block_invoke;
  v32[3] = &unk_1E6345388;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIfLi256EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156)) {
    goto LABEL_18;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (!v11 && v12 > v13) {
    return result;
  }
  int v15 = *(_DWORD *)(result + 64);
  if (v15)
  {
    unint64_t v16 = *(void **)(*(void *)(v5 + 48) + 32);
    unint64_t v17 = v16[3] + v16[2] * v6;
    bit_vector_set_10635(v16 + 525, (v17 >> 20));
    unint64_t v18 = (v17 + 1040) >> 20;
    if (v18 > (v17 >> 20))
    {
      unsigned int v19 = (v17 >> 20) + 1;
      do
      {
        unint64_t v20 = v19;
        bit_vector_set_10635(v16 + 525, v19++);
      }
      while (v18 > v20);
    }
    uint64_t result = _windowsResolvePtr((uint64_t)(v16 + 5), v16[3] + v16[2] * v6, 1040);
    uint64_t v4 = a4;
    if (v15 != *(_DWORD *)(result + 1032)) {
      return result;
    }
    *(float *)&uint64_t v6 = *a3;
  }
  int v21 = *(const void **)(v8 + 56);
  uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 32);
  unint64_t v23 = v22[3] + v22[2] * v6;
  bit_vector_set_10635(v22 + 525, (v23 >> 20));
  unint64_t v24 = (v23 + 1040) >> 20;
  if (v24 > (v23 >> 20))
  {
    unsigned int v25 = (v23 >> 20) + 1;
    do
    {
      unint64_t v26 = v25;
      bit_vector_set_10635(v22 + 525, v25++);
    }
    while (v24 > v26);
  }
  uint64_t v27 = (const void *)_windowsResolvePtr((uint64_t)(v22 + 5), v22[3] + v22[2] * v6, 1040);
  uint64_t result = memcmp(v21, v27, 0x400uLL);
  if (!result)
  {
    *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_18:
    unsigned char *v4 = 1;
  }
  return result;
}

uint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(uint64_t *a1, uint64_t *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CFAbsoluteTimeGetCurrent();
  uint64_t v56 = 0;
  int v57 = 0;
  QuantizerManager<float,256>::lastTrainedQuantizer(&v56, *a1);
  uint64_t v50 = *a2;
  uint64_t v51 = a2[1];
  uint64_t v4 = v51 - *a2;
  if (v51 == *a2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (v4 < 0) {
      goto LABEL_86;
    }
    uint64_t v5 = operator new((unint64_t)v4 >> 1);
    bzero(v5, (unint64_t)v4 >> 1);
  }
  unint64_t v49 = v4 >> 3;
  int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
  if (v51 != v50)
  {
    uint64_t v6 = 0;
    if (v49 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v49;
    }
    while (1)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 16))(v59);
      uint64_t v8 = v56;
      uint64_t v10 = *(void *)v59;
      float v9 = *(std::__shared_weak_count **)&v59[8];
      if (*(void *)&v59[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v59[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10 != v8) {
        break;
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 24))(v59);
      BOOL v11 = *(std::__shared_weak_count **)&v59[8];
      *((_DWORD *)v5 + v6) = *(_DWORD *)(*(void *)v59 + 72);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 24))(v59);
      float v12 = *(std::__shared_weak_count **)&v59[8];
      int v13 = *(_DWORD *)(*(void *)v59 + 68);
      if (*(void *)&v59[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v59[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v13 != v52)
      {
        unint64_t v43 = __si_assert_copy_extra_329();
        unint64_t v44 = v43;
        unint64_t v45 = "";
        if (v43) {
          unint64_t v45 = v43;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2086, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v45);
        free(v44);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 == ++v6) {
        goto LABEL_21;
      }
    }
    unint64_t v39 = __si_assert_copy_extra_329();
    unint64_t v40 = v39;
    unint64_t v41 = "";
    if (v39) {
      unint64_t v41 = v39;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2084, "vectorIndexes[i]->getQuantizer() == quantizer", v41);
LABEL_73:
    free(v40);
    if (__valid_fs(-1)) {
      uint64_t v42 = 2989;
    }
    else {
      uint64_t v42 = 3072;
    }
    *(_DWORD *)uint64_t v42 = -559038737;
    abort();
  }
LABEL_21:
  uint64_t v14 = *a1;
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)(*a1 + 72));
  if ((v15 & 1) == 0)
  {
    unint64_t v47 = __si_assert_copy_extra_329();
    unint64_t v40 = v47;
    unint64_t v48 = "";
    if (v47) {
      unint64_t v48 = v47;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 772, "_training.test()", v48);
    goto LABEL_73;
  }
  if (*(void *)(v14 + 96))
  {
    unint64_t v16 = *(NSObject **)(v14 + 16);
    *(void *)int v59 = MEMORY[0x1E4F143A8];
    *(void *)&v59[8] = 0x40000000;
    *(void *)&v59[16] = ___ZN16QuantizerManagerIfLi256EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v59[24] = &__block_descriptor_tmp_864_6951;
    *(void *)&v59[32] = v14;
    dispatch_sync(v16, v59);
  }
  uint64_t v17 = *(void *)(v14 + 80);
  if (v17) {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17) + 1;
  }
  else {
    int v18 = 1;
  }
  int v19 = *(char *)(v14 + 71);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v14 + 71);
  }
  else {
    size_t v20 = *(void *)(v14 + 56);
  }
  unint64_t v21 = v20 + 1;
  if (v20 + 1 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_86:
  }
    abort();
  if (v21 >= 0x17)
  {
    uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v23 = v21 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = (std::string *)operator new(v23 + 1);
    v53[0].__r_.__value_.__l.__size_ = v20 + 1;
    v53[0].__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    v53[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  }
  else
  {
    memset(v53, 0, 24);
    uint64_t v22 = v53;
    *((unsigned char *)&v53[0].__r_.__value_.__s + 23) = v20 + 1;
    if (!v20) {
      goto LABEL_41;
    }
  }
  if (v19 >= 0) {
    unsigned int v25 = (const void *)(v14 + 48);
  }
  else {
    unsigned int v25 = *(const void **)(v14 + 48);
  }
  memmove(v22, v25, v20);
LABEL_41:
  *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v20) = 46;
  std::to_string(&v58, v18);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v26 = &v58;
  }
  else {
    unint64_t v26 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  int v28 = std::string::append(v53, (const std::string::value_type *)v26, size);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v59 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v59[16] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int v30 = std::string::append((std::string *)v59, ".quantizer");
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  long long v54 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  uint64_t v55 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((v59[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_56:
    operator delete(v58.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_57;
  }
  operator delete(*(void **)v59);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_56;
  }
LABEL_49:
  if ((SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_50;
  }
LABEL_57:
  operator delete(v53[0].__r_.__value_.__l.__data_);
LABEL_50:
  if (v55 >= 0) {
    uint64_t v32 = (const char *)&v54;
  }
  else {
    uint64_t v32 = (const char *)v54;
  }
  if (QuantizerManager<float,768>::createFdPtrForFile(v14, v32)) {
    operator new();
  }
  int v33 = *__error();
  uint64_t v34 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
  {
    int v37 = &v54;
    if (v55 < 0) {
      int v37 = (long long *)v54;
    }
    int v38 = *(_DWORD *)v14;
    *(_DWORD *)int v59 = 136315906;
    *(void *)&v59[4] = "newQuantizer";
    *(_WORD *)&v59[12] = 1024;
    *(_DWORD *)&v59[14] = 792;
    *(_WORD *)&v59[18] = 2080;
    *(void *)&v59[20] = v37;
    *(_WORD *)&v59[28] = 1024;
    *(_DWORD *)&v59[30] = v38;
    _os_log_fault_impl(&dword_1BD672000, v34, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", v59, 0x22u);
  }
  *__error() = v33;
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  if (v5) {
    operator delete(v5);
  }
  uint64_t v35 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return 0;
}

void *QuantizerManager<float,256>::lastTrainedQuantizer(void *result, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    uint64_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    uint64_t v8 = "";
    if (v6) {
      uint64_t v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 750, "_training.test()", v8);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v3 = *(void *)(a2 + 96);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 104);
    unsigned int *result = v3;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5)
  {
    uint64_t v4 = *(void *)(a2 + 88);
    unsigned int *result = v5;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  if (ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken != -1)
  {
    float v9 = result;
    dispatch_once(&ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken, &__block_literal_global_768);
    uint64_t result = v9;
  }
  uint64_t v4 = *(void *)(ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq + 8);
  unsigned int *result = *(void *)ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq;
  result[1] = v4;
  if (v4) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  return result;
}

void ___ZN16QuantizerManagerIfLi256EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 80);
  if (!v2) {
    goto LABEL_103;
  }
  int v3 = *(char *)(v1 + 71);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v4 = *(void *)(v1 + 56);
  }
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_138:
  }
    abort();
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_16;
    }
  }
  if (v3 >= 0) {
    float v9 = (const void *)(v1 + 48);
  }
  else {
    float v9 = *(const void **)(v1 + 48);
  }
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v15 = std::string::append(&v72, ".quantizer");
  int64_t v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v73 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v74 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_34:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_34;
  }
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_35:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  uint64_t v17 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    int v18 = v73;
  }
  else {
    int v18 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1C1880BF0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(void *)(v1 + 80) + 57));
  uint64_t v20 = *(void *)(v1 + 80);
  int v19 = *(std::__shared_weak_count **)(v1 + 88);
  uint64_t v21 = v20;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(void *)(v1 + 80);
  }
  uint64_t v22 = (uint64_t *)(v1 + 112);
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
  int v24 = v23;
  unint64_t v25 = v23;
  unint64_t v26 = *(void *)(v1 + 120);
  if (v26)
  {
    uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v28 = v23;
      if (v26 <= v23) {
        unint64_t v28 = v23 % v26;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v23;
    }
    std::string::size_type v29 = *(void ***)(*v22 + 8 * v28);
    if (v29)
    {
      int v30 = *v29;
      if (*v29)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v32 = *((void *)v30 + 1);
            if (v32 == v23)
            {
              if (*((_DWORD *)v30 + 4) == v23) {
                goto LABEL_92;
              }
            }
            else if ((v32 & (v26 - 1)) != v28)
            {
              goto LABEL_54;
            }
            int v30 = *(void **)v30;
            if (!v30) {
              goto LABEL_54;
            }
          }
        }
        do
        {
          unint64_t v31 = *((void *)v30 + 1);
          if (v31 == v23)
          {
            if (*((_DWORD *)v30 + 4) == v23) {
              goto LABEL_92;
            }
          }
          else
          {
            if (v31 >= v26) {
              v31 %= v26;
            }
            if (v31 != v28) {
              break;
            }
          }
          int v30 = *(void **)v30;
        }
        while (v30);
      }
    }
  }
  else
  {
    unint64_t v28 = 0;
  }
LABEL_54:
  int v30 = operator new(0x28uLL);
  *(void *)int v30 = 0;
  *((void *)v30 + 1) = v25;
  *((_DWORD *)v30 + 4) = v24;
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = 0;
  float v33 = (float)(unint64_t)(*(void *)(v1 + 136) + 1);
  float v34 = *(float *)(v1 + 144);
  if (!v26 || (float)(v34 * (float)v26) < v33)
  {
    BOOL v35 = 1;
    if (v26 >= 3) {
      BOOL v35 = (v26 & (v26 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v26);
    unint64_t v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v26 = *(void *)(v1 + 120);
    }
    if (prime > v26) {
      goto LABEL_76;
    }
    if (prime < v26)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v26 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < v26) {
LABEL_76:
      }
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    unint64_t v26 = *(void *)(v1 + 120);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v26 <= v25) {
        unint64_t v28 = v25 % v26;
      }
      else {
        unint64_t v28 = v25;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v25;
    }
  }
  uint64_t v42 = *v22;
  unint64_t v43 = *(void **)(*v22 + 8 * v28);
  if (v43)
  {
    *(void *)int v30 = *v43;
LABEL_90:
    *unint64_t v43 = v30;
    goto LABEL_91;
  }
  *(void *)int v30 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = v30;
  *(void *)(v42 + 8 * v28) = v1 + 128;
  if (*(void *)v30)
  {
    unint64_t v44 = *(void *)(*(void *)v30 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v44 >= v26) {
        v44 %= v26;
      }
    }
    else
    {
      v44 &= v26 - 1;
    }
    unint64_t v43 = (void *)(*v22 + 8 * v44);
    goto LABEL_90;
  }
LABEL_91:
  ++*(void *)(v1 + 136);
LABEL_92:
  if (v19)
  {
    unint64_t v45 = std::__shared_weak_count::lock(v19);
    unsigned int v46 = (atomic_ullong *)v45;
    if (!v45)
    {
      uint64_t v20 = 0;
      goto LABEL_98;
    }
    atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v19);
    if (!atomic_fetch_add(v46 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v46 + 16))(v46);
      int v19 = (std::__shared_weak_count *)v46;
LABEL_98:
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    uint64_t v20 = 0;
    unsigned int v46 = 0;
  }
  unint64_t v47 = (std::__shared_weak_count *)*((void *)v30 + 4);
  *((void *)v30 + 3) = v20;
  *((void *)v30 + 4) = v46;
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
LABEL_103:
  int v48 = *(char *)(v1 + 71);
  if (v48 >= 0) {
    size_t v49 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v49 = *(void *)(v1 + 56);
  }
  unint64_t v50 = v49 + 10;
  if (v49 + 10 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_138;
  }
  if (v50 >= 0x17)
  {
    uint64_t v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v52 = v50 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = operator new(v52 + 1);
    v73[1] = (void *)(v49 + 10);
    int64_t v74 = v53 | 0x8000000000000000;
    v73[0] = v51;
  }
  else
  {
    v73[1] = 0;
    int64_t v74 = 0;
    v73[0] = 0;
    uint64_t v51 = v73;
    HIBYTE(v74) = v49 + 10;
    if (!v49) {
      goto LABEL_117;
    }
  }
  if (v48 >= 0) {
    long long v54 = (const void *)(v1 + 48);
  }
  else {
    long long v54 = *(const void **)(v1 + 48);
  }
  memmove(v51, v54, v49);
LABEL_117:
  strcpy((char *)v51 + v49, ".quantizer");
  uint64_t v56 = *(void *)(v1 + 96);
  uint64_t v55 = *(void *)(v1 + 104);
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  int v57 = *(std::__shared_weak_count **)(v1 + 88);
  *(void *)(v1 + 80) = v56;
  *(void *)(v1 + 88) = v55;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  uint64_t v58 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    int v59 = v73;
  }
  else {
    int v59 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v58 + 40) + 40), (const char *)v59);
  MEMORY[0x1C1880BF0](v58 + 8, v59);
  uint64_t v60 = *(void *)(v1 + 80);
  uint64_t v61 = *(unint64_t **)(v60 + 40);
  *uint64_t v61 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v61);
  storage_array_SyncPages(*(void *)(v60 + 40) + 8, *(void *)(v60 + 40) + 4200);
  storage_array_Truncate((uint64_t *)(*(void *)(v60 + 40) + 8));
  uint64_t v62 = *(void *)(v60 + 40);
  fd_make_readonly(*(void *)(v62 + 40));
  uint64_t v63 = *(void *)(v62 + 40);
  if (v63)
  {
    do
    {
      int v64 = fchmodat(*(_DWORD *)(v63 + 44), *(const char **)(v63 + 72), 0x100u, 2048);
      uint64_t v65 = g_prot_error_callback;
      if (v64 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v67 = *(unsigned int *)(v63 + 40);
      unint64_t v68 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v65 + 16))(v65, v67, *v68, 19) & 1) != 0);
  }
  *(unsigned char *)(v60 + 56) = 1;
  unint64_t v69 = *(std::__shared_weak_count **)(v1 + 104);
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  if (!v69 || atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v74) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_134;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if (SHIBYTE(v74) < 0) {
LABEL_134:
  }
    operator delete(v73[0]);
}

float ___ZN22IVFVectorIndexTemplateIfLi256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIfLi256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  uint64_t v6 = (const void *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    std::string __p = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 80))(&__p);
    if (*((float *)__p + 1) < a3[1]) {
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p;
    }
    int v13 = __p;
    operator delete(__p);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = (float *)(v7 + 1028 * a2);
  float v9 = v8 + 256;
  float v10 = v8[256];
  if (v10 == 0.0)
  {
    memcpy((void *)(v7 + 1028 * a2), v6, 0x400uLL);
  }
  else
  {
    vDSP_vavlin((const float *)v6, 1, v8 + 256, v8, 1, 0x100uLL);
    float v10 = *v9;
  }
  float result = v10 + 1.0;
  *float v9 = v10 + 1.0;
  return result;
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(std::shared_ptr<QuantizerManager<float,256>>,std::vector<IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase*,std::allocator<IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase*>>,unsigned int,unsigned int)::{lambda(void *,unsigned long)#1}::__invoke(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1[1] + 8 * a2);
  unint64_t v5 = (std::__shared_weak_count *)a1[3];
  BOOL v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v12);
  uint64_t v6 = (void *)(*a1 + 16 * a2);
  uint64_t v8 = v12;
  uint64_t v7 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v9 = (std::__shared_weak_count *)v6[1];
  *uint64_t v6 = v8;
  v6[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    float v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    float v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void __destroy_helper_block_8_48c61_ZTSNSt3__110shared_ptrIA_23IVFVectorMeanCalculatorILi256EEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_8_48c61_ZTSNSt3__110shared_ptrIA_23IVFVectorMeanCalculatorILi256EEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<IVFVectorMeanCalculator<256> *,std::shared_ptr<IVFVectorMeanCalculator<256>[]>::__shared_ptr_default_delete<IVFVectorMeanCalculator<256>[],IVFVectorMeanCalculator<256>>,std::allocator<IVFVectorMeanCalculator<256>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1C1880FE0);
  }
  return result;
}

void std::__shared_ptr_pointer<IVFVectorMeanCalculator<256> *,std::shared_ptr<IVFVectorMeanCalculator<256>[]>::__shared_ptr_default_delete<IVFVectorMeanCalculator<256>[],IVFVectorMeanCalculator<256>>,std::allocator<IVFVectorMeanCalculator<256>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t ArrayVectorQuantizer<float,256>::getCentroid(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2 >= (unint64_t)((*(void *)(a1 + 48) - v2) >> 10))
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    unint64_t v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 452, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + ((unint64_t)a2 << 10);
}

uint64_t ArrayVectorQuantizer<float,256>::count(uint64_t a1)
{
  return (*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 10;
}

void ArrayVectorQuantizer<float,256>::~ArrayVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815380;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t ArrayVectorQuantizer<float,256>::~ArrayVectorQuantizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815380;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::compact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v10 = *__error();
  BOOL v11 = _SILogForLogForCategory(16);
  os_log_type_t v12 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v11, v12))
  {
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v13 = a4;
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v34;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v14;
    a4 = v13;
    HIWORD(v55) = 1024;
    LODWORD(v56) = v15;
    WORD2(v56) = 1024;
    *(_DWORD *)((char *)&v56 + 6) = v16;
    _os_log_impl(&dword_1BD672000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    std::string::size_type v29 = __si_assert_copy_extra_329();
    int v30 = v29;
    unint64_t v31 = "";
    if (v29) {
      unint64_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v31);
LABEL_49:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  long long v37 = *a5;
  long long v38 = a5[1];
  uint64_t v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    uint64_t v32 = __si_assert_copy_extra_329();
    int v30 = v32;
    float v33 = "";
    if (v32) {
      float v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "target->nVectors() == 0", v33);
    goto LABEL_49;
  }
  int v18 = operator new(8uLL);
  __p[0] = v18;
  *int v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v19 = *(void *)(a1 + 128);
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 136);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a1 + 144);
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 152);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v47[0] = v19;
  v47[1] = (uint64_t)v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v47);
    uint64_t v23 = a3;
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v47);
    uint64_t v23 = a3;
  }
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2000000000;
  char v46 = 1;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v42 = 0u;
  uint64_t v40 = v21;
  uint64_t v41 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(void *)(a1 + 96);
  unint64_t v25 = *(std::__shared_weak_count **)(a1 + 104);
  v39[0] = v24;
  v39[1] = v25;
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
  }
  unint64_t v26 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v55 = 0x40000000;
  *(void *)&long long v56 = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((void *)&v56 + 1) = &unk_1E6345AA0;
  int v57 = v45;
  uint64_t v58 = v23;
  uint64_t v59 = a4;
  uint64_t v60 = v17;
  uint64_t v61 = a6;
  long long v62 = v37;
  long long v63 = v38;
  long long v52 = 0u;
  long long v53 = 0u;
  char v51 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v49, (uint64_t)&v42);
    long long v52 = v49;
    long long v53 = v50;
    if (!(void)v50) {
      break;
    }
    ((void (*)(uint8_t *, long long *, char *))v56)(buf, &v52, &v51);
  }
  while (!v51);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v44);
  uint8x8_t v27 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v28 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  _Block_object_dispose(v45, 8);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

uint64_t ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *v6;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      unsigned int v11 = uint32_map_get(v7, *v6);
      uint64_t v8 = *(void *)storageResolvePtr(v10, 8 * v11, 8, 1);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(*(void *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  uint64_t result = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64)) {
    uint64_t result = (*(uint64_t (**)(void))(a1 + 88))(*(void *)(a1 + 96));
  }
  *a3 = result;
  return result;
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_log_type_t v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v12);
  if (a5 == -1)
  {
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    int v18 = a3;
    uint64_t v19 = 0xFFFFFFFFLL;
    float v20 = a6;
    char v21 = 0;
  }
  else
  {
    if (*(_DWORD *)(v15 + 68) <= a5)
    {
      uint64_t v22 = __si_assert_copy_extra_329();
      uint64_t v23 = v22;
      uint64_t v24 = "";
      if (v22) {
        uint64_t v24 = v22;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2728, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v24);
      free(v23);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    int v18 = a3;
    uint64_t v19 = a5;
    float v20 = a6;
    char v21 = 1;
  }
  *((void *)IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v16, v17, v18, v19, v21, v20)+ 128) = a4;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13) {
      return;
    }
  }
  else if (!v13)
  {
    return;
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::flush(uint64_t a1, uint64_t a2)
{
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 144);
  unsigned int v11 = *(std::__shared_weak_count **)(a1 + 152);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  unint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  uint64_t v19 = ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  float v20 = &unk_1E6345A78;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    v19((uint64_t)v18, (uint64_t)&v32, (BOOL *)&v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result = (*(uint64_t (**)(float))(*(void *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  unsigned int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v16) = 1024;
      *(_DWORD *)((char *)&v16 + 2) = v8;
      HIWORD(v16) = 1024;
      *(_DWORD *)int v17 = v9;
      *(_WORD *)&v17[4] = 1024;
      *(_DWORD *)&v17[6] = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    unsigned int v11 = operator new(0x10uLL);
    uint64_t v16 = v11 + 2;
    *(void *)int v17 = v11 + 2;
    *unsigned int v11 = a1 + 48;
    v11[1] = a2 + 48;
    *(void *)std::string buf = v11;
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v11);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v12 = __si_assert_copy_extra_329();
  uint64_t v13 = v12;
  int v14 = "";
  if (v12) {
    int v14 = v12;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
  free(v13);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a2 + 64));
    *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (*(void *)(a2 + 72))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(a2 + 64));
        os_log_type_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        if (v6) {
          break;
        }
        int v7 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a2 + 40)
                                                      + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(a2 + 64)
                                          + 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(void *)(a2 + 72) - 1;
        unint64_t v9 = *(void *)(a2 + 64) + 1;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v8;
        if (v9 >= 0x200)
        {
          operator delete(**(void ***)(a2 + 40));
          *(void *)(a2 + 40) += 8;
          uint64_t v8 = *(void *)(a2 + 72);
          unint64_t v9 = *(void *)(a2 + 64) - 256;
          *(void *)(a2 + 64) = v9;
        }
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v9);
          *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          if (*(void *)(a2 + 72)) {
            continue;
          }
        }
        return;
      }
      *(_DWORD *)(a1 + 4) = v6[1];
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a2 + 16) + 16), *v6, 1044);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(Ptr + 1040);
      *(void *)(a1 + 16) = Ptr;
      *(void *)(a1 + 24) = Ptr + 1024;
    }
  }
}

int *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSet(int *result, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (int v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    uint64_t v5 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v5;
    int v7 = "";
    if (v5) {
      int v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (*(uint64_t (**)(int *))(*(void *)v3 + 16))(v3);
      int v11 = (*(uint64_t (**)(int *))(*(void *)v3 + 24))(v3);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v17 = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      __int16 v20 = 1024;
      int v21 = v12;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    uint64_t result = __error();
    unsigned int *result = v8;
  }
  uint64_t v4 = *(void *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    int v14 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v14;
    int v15 = "";
    if (v14) {
      int v15 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

unint64_t IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    uint64_t v5 = v4;
    os_log_type_t v6 = "";
    if (v4) {
      os_log_type_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1914, "offset < store->endOffset()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void **)(a1 + 16);
  return vi_onefixedsize_memory_allocator::getPtr(v2, a2, 1044);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSet(uint64_t a1, uint64_t a2)
{
  v18[126] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v8;
      HIWORD(v17) = 1024;
      LODWORD(v18[0]) = v9;
      WORD2(v18[0]) = 1024;
      *(_DWORD *)((char *)v18 + 6) = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    uint64_t v11 = a2 + 48;
    int v12 = operator new(0x10uLL);
    int v17 = v12 + 2;
    v18[0] = v12 + 2;
    void *v12 = a1 + 48;
    v12[1] = v11;
    *(void *)std::string buf = v12;
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v12);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v11);
  }
  int v13 = __si_assert_copy_extra_329();
  int v14 = v13;
  int v15 = "";
  if (v13) {
    int v15 = v13;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
  free(v14);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::train(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    long long v33 = __si_assert_copy_extra_329();
    int v34 = v33;
    BOOL v35 = "";
    if (v33) {
      BOOL v35 = v33;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v35);
    goto LABEL_55;
  }
  if (*v3 != a1)
  {
    unint64_t v36 = __si_assert_copy_extra_329();
    int v34 = v36;
    long long v37 = "";
    if (v36) {
      long long v37 = v36;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v37);
LABEL_55:
    free(v34);
    if (__valid_fs(-1)) {
      uint64_t v38 = 2989;
    }
    else {
      uint64_t v38 = 3072;
    }
    *(_DWORD *)uint64_t v38 = -559038737;
LABEL_59:
    abort();
  }
  int v7 = (char *)operator new(8uLL);
  *(void *)int v7 = a1 + 48;
  int v8 = v7 + 8;
  uint64_t v40 = v7 + 8;
  uint64_t v41 = v7 + 8;
  std::string __p = v7;
  if (v4 < 9) {
    goto LABEL_39;
  }
  unint64_t v9 = 1;
  do
  {
    uint64_t v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      long long v30 = __si_assert_copy_extra_329();
      char v31 = v30;
      long long v32 = "";
      if (v30) {
        long long v32 = v30;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v12 = v11 + 48;
    if (v8 < v41)
    {
      *(void *)int v8 = v12;
      int v10 = v8 + 8;
      goto LABEL_6;
    }
    int v13 = (char *)__p;
    int64_t v14 = v8 - (unsigned char *)__p;
    uint64_t v15 = (v8 - (unsigned char *)__p) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_59;
    }
    uint64_t v17 = v41 - (unsigned char *)__p;
    if ((v41 - (unsigned char *)__p) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v19 = operator new(8 * v18);
    }
    else
    {
      int v19 = 0;
    }
    __int16 v20 = &v19[8 * v15];
    int v21 = &v19[8 * v18];
    *__int16 v20 = v12;
    int v10 = v20 + 1;
    if (v8 == v13)
    {
      std::string __p = &v19[8 * v15];
      uint64_t v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    unint64_t v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      uint64_t v25 = (v22 >> 3) + 1;
      int v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      long long v26 = &v19[8 * v15 - 16];
      long long v27 = v8 - 16;
      uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *long long v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      int v23 = v8;
    }
    do
    {
      uint64_t v24 = *((void *)v23 - 1);
      v23 -= 8;
      *--__int16 v20 = v24;
    }
    while (v23 != v13);
    int v13 = (char *)__p;
LABEL_30:
    std::string __p = v20;
    uint64_t v41 = v21;
    int v8 = v13;
    if (v13) {
      goto LABEL_33;
    }
LABEL_6:
    uint64_t v40 = v10;
    ++v9;
    int v3 = *(void **)a2;
    int v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  int v7 = (char *)__p;
LABEL_39:
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
  {
    operator delete(v7);
  }
}

unsigned int *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::insertForTest(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    int v10 = v9;
    uint64_t v11 = "";
    if (v9) {
      uint64_t v11 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v7 = a7;
  uint64_t result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((void *)result + 128) = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::insertForMerge(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v11 = __si_assert_copy_extra_329();
    uint64_t v12 = v11;
    int v13 = "";
    if (v11) {
      int v13 = v11;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::insertVector(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == a1[4])
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    os_log_type_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    int v8 = "";
    if (v6) {
      int v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    uint64_t v7 = v9;
    int v10 = "";
    if (v9) {
      int v10 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

unsigned int *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::bulkInsertForTest(unsigned int *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v19 = *a5++;
        unsigned int v18 = v19;
        unsigned int v20 = *a3++;
        uint64_t result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 128) = v20;
        a2 += 1024;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v16 = *__error();
          uint64_t v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        unsigned int v13 = a5[v10];
        uint64_t v14 = a3[v10];
        uint64_t result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 128) = v14;
        a2 += 1024;
        uint64_t v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::shadow(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_log_type_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v9 + 168))(v9, a2, a3);
  uint64_t v10 = vi_onefixedsize_disk_allocator::shadow(*(void *)(*(void *)(a1 + 96) + 32), a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return v10;
    }
  }
  else if (!v7)
  {
    return v10;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v10;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::validAddress(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v9 = *(void *)(*(void *)(a1 + 96) + 32);
  unint64_t v10 = *(unsigned int *)(v9 + 72);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 12;
    do
    {
      float v12 = *(void **)(v9 + 8 * v11);
      if (v12 && (unint64_t v13 = v12[1], v13 + 1 >= 2) && v13 <= a2 && (v14 = v12[2], v13 - v14 + v12[3] > a2)) {
        uint64_t v15 = a2 - v13 + v14;
      }
      else {
        uint64_t v15 = -1;
      }
      if (v11 - 11 >= v10) {
        break;
      }
      ++v11;
    }
    while (v15 == -1);
    if (v15 != -1) {
      goto LABEL_17;
    }
  }
  if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 144))(v8, a2) & 1) == 0)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v6 + 56))(v6, a2);
    if (!v7) {
      goto LABEL_21;
    }
  }
  else
  {
LABEL_17:
    uint64_t v16 = 1;
    if (!v7)
    {
LABEL_21:
      if (!v5) {
        return v16;
      }
      goto LABEL_22;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v5) {
    return v16;
  }
LABEL_22:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v16;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(v5, a2))
      {
        a2 += 1024;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(v5, a2))break; {
        a2 += 1024;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    uint64_t v15 = v14;
    uint64_t v16 = "";
    if (v14) {
      uint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int Vector = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(a1, a2, (int *)&v24, &v23, 0);
  if (Vector == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v9 = *(void *)(a1 + 80);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 96);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 104);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke;
    v20[3] = &unk_1E6345A50;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke_1520;
      v15[3] = &unk_1F1816978;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      uint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      unint64_t v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return Vector != -1;
}

int *___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(const void **)(a1 + 48);
  uint64_t v8 = *(unsigned int *)a3;
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 1040) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 1040);
  uint64_t result = (int *)memcmp(v7, v14, 0x400uLL);
  if (!result)
  {
    int v16 = *__error();
    uint64_t v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v22 = a3[1];
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2760;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = a2;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v22;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v16;
    int v18 = *__error();
    unsigned int v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)(a1 + 56);
      double v24 = *(float *)(a1 + 60);
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2761;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v23;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v24;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v18;
    int v20 = *__error();
    unsigned int v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      float v25 = *(float *)(a1 + 60);
      float v26 = a3[1];
      float v27 = vabds_f32(v25, v26);
      if (v25 == v26)
      {
        BOOL v28 = 1;
        BOOL v29 = 1;
      }
      else
      {
        float v30 = fabsf(v25);
        float v31 = fabsf(v26);
        BOOL v28 = v27 <= fmaxf(fminf(v31, v30) * 0.000015259, 0.000015259);
        BOOL v29 = v27 <= (float)(fmaxf(v30, v31) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317186;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2762;
      __int16 v37 = 2048;
      *(double *)uint64_t v38 = v27;
      *(_WORD *)&v38[8] = 2048;
      *(void *)&v38[10] = 0x3810000000000000;
      __int16 v39 = 2048;
      uint64_t v40 = 0x3E80000000000000;
      __int16 v41 = 1024;
      BOOL v42 = v27 < 1.1755e-38;
      __int16 v43 = 1024;
      BOOL v44 = v27 < 0.00000011921;
      __int16 v45 = 1024;
      BOOL v46 = v28;
      __int16 v47 = 1024;
      BOOL v48 = v29;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x48u);
    }
    uint64_t result = __error();
    int *result = v20;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke_1520(uint64_t a1, int a2, unsigned int *a3, unsigned char *a4)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  int v6 = *(const void **)(a1 + 48);
  uint64_t v103 = *(void *)(a1 + 40);
  uint64_t v8 = *a3;
  uint64_t v9 = *(void **)(*(void *)(v103 + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 1040) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 1040);
  if (!memcmp(v6, v14, 0x400uLL))
  {
    int v15 = *__error();
    int v16 = _SILogForLogForCategory(16);
    uint64_t v17 = a3;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      double v52 = *((float *)a3 + 1);
      float __C = 4.8153e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2770;
      __int16 v115 = 1024;
      float v116 = *(float *)&a2;
      __int16 v117 = 2048;
      *(double *)uint64_t v118 = v52;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v15;
    int v18 = *(const float **)(a1 + 48);
    unsigned int v19 = (const float *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float __C = 3.4028e38;
    vDSP_distancesq(v18, 1, v19, 1, &__C, 0x100uLL);
    float v20 = __C;
    int v21 = *__error();
    double v22 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      float v53 = *(float *)(a1 + 88);
      float __C = 4.8153e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2772;
      __int16 v115 = 1024;
      float v116 = v53;
      __int16 v117 = 2048;
      *(double *)uint64_t v118 = v20;
      _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v21;
    std::string __p = 0;
    unint64_t v109 = 0;
    uint64_t v110 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&__p);
    int v23 = *__error();
    double v24 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      float v54 = *(float *)__p;
      float v55 = *((float *)__p + 1);
      int v56 = *((_DWORD *)__p + 2);
      float v57 = *((float *)__p + 3);
      BOOL v58 = v55 == v57 || vabds_f32(v55, v57) <= fmaxf(fminf(fabsf(v57), fabsf(v55)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2774;
      __int16 v115 = 1024;
      float v116 = v54;
      __int16 v117 = 2048;
      *(double *)uint64_t v118 = v55;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v56;
      __int16 v119 = 2048;
      double v120 = v57;
      __int16 v121 = 1024;
      LODWORD(v122) = v58;
      _os_log_error_impl(&dword_1BD672000, v24, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v23;
    int v25 = *__error();
    float v26 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      float v59 = *(float *)__p;
      int v60 = *((_DWORD *)__p + 2);
      BOOL v61 = *((float *)__p + 1) == *((float *)__p + 3);
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2775;
      __int16 v115 = 1024;
      float v116 = v59;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v60;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v61;
      _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v25;
    int v27 = *__error();
    BOOL v28 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      float v62 = *(float *)__p;
      int v63 = *((_DWORD *)__p + 2);
      BOOL v64 = *((float *)__p + 1) < *((float *)__p + 3);
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2776;
      __int16 v115 = 1024;
      float v116 = v62;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v63;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v64;
      _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v27;
    int v29 = *__error();
    float v30 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      float v65 = *(float *)__p;
      int v66 = *((_DWORD *)__p + 2);
      BOOL v67 = *((float *)__p + 1) > *((float *)__p + 3);
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2777;
      __int16 v115 = 1024;
      float v116 = v65;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v66;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v67;
      _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v29;
    int v31 = *__error();
    long long v32 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      float v68 = *(float *)__p;
      int v69 = *((_DWORD *)__p + 2);
      float v70 = *((float *)__p + 1);
      float v71 = *((float *)__p + 3);
      double v72 = (float)(v70 - v71);
      float v73 = vabds_f32(v70, v71);
      if (v70 == v71)
      {
        BOOL v74 = 1;
        BOOL v75 = 1;
      }
      else
      {
        float v99 = fabsf(v70);
        float v100 = fabsf(v71);
        BOOL v74 = v73 <= fmaxf(fminf(v100, v99) * 0.000015259, 0.000015259);
        BOOL v75 = v73 <= (float)(fmaxf(v99, v100) * 0.000015259);
      }
      float __C = 4.8161e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2778;
      __int16 v115 = 1024;
      float v116 = v68;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v69;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v72;
      __int16 v119 = 2048;
      double v120 = 1.17549435e-38;
      __int16 v121 = 2048;
      uint64_t v122 = 0x3E80000000000000;
      __int16 v123 = 1024;
      BOOL v124 = v73 < 1.1755e-38;
      __int16 v125 = 1024;
      BOOL v126 = v73 < 0.00000011921;
      __int16 v127 = 1024;
      BOOL v128 = v74;
      __int16 v129 = 1024;
      BOOL v130 = v75;
      _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v31;
    unsigned int v106 = 0;
    uint64_t v107 = 0;
    uint64_t v105 = 0;
    uint64_t v33 = *(void *)(a1 + 56);
    uint64_t v34 = *a3;
    __int16 v35 = *(void **)(*(void *)(v103 + 48) + 32);
    unint64_t v36 = v35[3] + v35[2] * v34;
    bit_vector_set_10635(v35 + 525, (v36 >> 20));
    unint64_t v37 = (v36 + 1040) >> 20;
    if (v37 > (v36 >> 20))
    {
      unsigned int v38 = (v36 >> 20) + 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v35 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = _windowsResolvePtr((uint64_t)(v35 + 5), v35[3] + v35[2] * v34, 1040);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v33 + 80))(&v105, v33, v40, 2);
    int v41 = *__error();
    BOOL v42 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      float v76 = *v105;
      float v77 = v105[1];
      int v78 = *((_DWORD *)v105 + 2);
      float v79 = v105[3];
      float __C = 4.8156e-34;
      uint64_t v112 = "exists_block_invoke";
      BOOL v80 = vabds_f32(v77, v79) <= fmaxf(fminf(fabsf(v79), fabsf(v77)) * 0.000015259, 0.000015259);
      int v114 = 2781;
      __int16 v113 = 1024;
      int v81 = v77 == v79 || v80;
      __int16 v115 = 1024;
      float v116 = v76;
      __int16 v117 = 2048;
      *(double *)uint64_t v118 = v77;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v78;
      __int16 v119 = 2048;
      double v120 = v79;
      __int16 v121 = 1024;
      LODWORD(v122) = v81;
      _os_log_error_impl(&dword_1BD672000, v42, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v41;
    int v43 = *__error();
    BOOL v44 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      float v82 = *v105;
      int v83 = *((_DWORD *)v105 + 2);
      BOOL v84 = v105[1] == v105[3];
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2782;
      __int16 v115 = 1024;
      float v116 = v82;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v83;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v84;
      _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v43;
    int v45 = *__error();
    BOOL v46 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      float v85 = *v105;
      int v86 = *((_DWORD *)v105 + 2);
      BOOL v87 = v105[1] < v105[3];
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2783;
      __int16 v115 = 1024;
      float v116 = v85;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v86;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v87;
      _os_log_error_impl(&dword_1BD672000, v46, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v45;
    int v47 = *__error();
    BOOL v48 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      float v88 = *v105;
      int v89 = *((_DWORD *)v105 + 2);
      BOOL v90 = v105[1] > v105[3];
      float __C = 4.8154e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2784;
      __int16 v115 = 1024;
      float v116 = v88;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v89;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v90;
      _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v47;
    int v49 = *__error();
    long long v50 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      float v91 = *v105;
      int v92 = *((_DWORD *)v105 + 2);
      float v93 = v105[1];
      float v94 = v105[3];
      float v95 = vabds_f32(v93, v94);
      BOOL v96 = (float)(v93 - v94) < 1.1755e-38;
      if (v93 == v94)
      {
        BOOL v97 = 1;
        BOOL v98 = 1;
      }
      else
      {
        float v101 = fabsf(v93);
        float v102 = fabsf(v94);
        BOOL v97 = v95 <= fmaxf(fminf(v102, v101) * 0.000015259, 0.000015259);
        BOOL v98 = v95 <= (float)(fmaxf(v101, v102) * 0.000015259);
      }
      float __C = 4.8161e-34;
      uint64_t v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2785;
      __int16 v115 = 1024;
      float v116 = v91;
      __int16 v117 = 1024;
      *(_DWORD *)uint64_t v118 = v92;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v95;
      __int16 v119 = 2048;
      double v120 = 1.17549435e-38;
      __int16 v121 = 2048;
      uint64_t v122 = 0x3E80000000000000;
      __int16 v123 = 1024;
      BOOL v124 = v96;
      __int16 v125 = 1024;
      BOOL v126 = v95 < 0.00000011921;
      __int16 v127 = 1024;
      BOOL v128 = v97;
      __int16 v129 = 1024;
      BOOL v130 = v98;
      _os_log_error_impl(&dword_1BD672000, v50, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v49;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v17;
    char v51 = v105;
    *a4 = 1;
    if (v51)
    {
      unsigned int v106 = v51;
      operator delete(v51);
    }
    if (__p)
    {
      unint64_t v109 = __p;
      operator delete(__p);
    }
  }
}

void __destroy_helper_block_8_56c60_ZTSN22IVFVectorIndexTemplateIfLi256EE19QuantizerPartitionsE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_8_56c60_ZTSN22IVFVectorIndexTemplateIfLi256EE19QuantizerPartitionsE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F1816750;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F1816750;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEC2IS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueES8_E4type11meta_info_sEP16vector_storage_s(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = a1 + 64;
  bzero(v6, 0x400uLL);
  uint64_t v5 = fd_name(*(void *)a2, v6, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  operator new();
}

void _ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi(void *a1, uint64_t a2, int a3)
{
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x3802000000;
  int v15 = __Block_byref_object_copy__693;
  uint64_t v17 = 0;
  int v18 = 0;
  int v16 = __Block_byref_object_dispose__694;
  if (_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken != -1) {
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken, &__block_literal_global_614);
  }
  uint64_t v17 = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq;
  int v6 = *(std::__shared_weak_count **)(_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq + 8);
  int v18 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(NSObject **)(a2 + 16);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi_block_invoke;
  v10[3] = &unk_1E63451A8;
  int v11 = a3;
  v10[4] = &v12;
  v10[5] = a2;
  dispatch_sync(v7, v10);
  uint64_t v8 = v13[6];
  *a1 = v13[5];
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v12, 8);
  uint64_t v9 = v18;
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEE(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v8 = *a2;
  if (v6 != *a2)
  {
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v18 = *a2;
    unsigned int v19 = v9;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v14 = *a2;
      int v15 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v14 = v8;
      int v15 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 40))(&v16, a1, &v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v18, &v16);
    int v11 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    unint64_t v13 = v19;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

__n128 __Block_byref_object_copy__693(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__694(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v2) {
    goto LABEL_55;
  }
  int8x8_t v4 = *(int8x8_t *)(v3 + 120);
  if (!*(void *)&v4) {
    goto LABEL_22;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = *(int *)(a1 + 48);
    if (*(void *)&v4 <= v2) {
      unint64_t v6 = v2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v2;
  }
  uint64_t v7 = *(uint64_t ***)(*(void *)(v3 + 112) + 8 * v6);
  if (!v7 || (uint64_t v8 = *v7) == 0)
  {
LABEL_22:
    long long v50 = 0uLL;
    int64_t v51 = 0;
    int v12 = *(char *)(v3 + 71);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v13 = *(void *)(v3 + 56);
    }
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_99;
    }
    if (v14 >= 0x17)
    {
      uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v16 = v14 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v13 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
      if (!v13) {
        goto LABEL_36;
      }
    }
    if (v12 >= 0) {
      uint64_t v18 = (const void *)(v3 + 48);
    }
    else {
      uint64_t v18 = *(const void **)(v3 + 48);
    }
    memmove(p_dst, v18, v13);
LABEL_36:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 46;
    std::to_string(&v47, v2);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v19 = &v47;
    }
    else {
      unsigned int v19 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    int v21 = std::string::append(&__dst, (const std::string::value_type *)v19, size);
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = std::string::append(&v49, ".quantizer");
    int64_t v24 = v23->__r_.__value_.__r.__words[2];
    long long v50 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v51 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_45:
          if (v51 >= 0) {
            int v25 = (const char *)&v50;
          }
          else {
            int v25 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v25, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          goto LABEL_55;
        }
LABEL_52:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == v2)
      {
        if (*((_DWORD *)v8 + 4) == v2) {
          goto LABEL_92;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_22;
      }
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == v2) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_22;
    }
LABEL_12:
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v8 + 4) != v2) {
    goto LABEL_12;
  }
LABEL_92:
  BOOL v42 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v3 + 112, v2, (_DWORD *)(a1 + 48));
  int v43 = (std::__shared_weak_count *)v42[4];
  if (v43 && (int v43 = std::__shared_weak_count::lock(v43)) != 0) {
    uint64_t v44 = v42[3];
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v46 = *(std::__shared_weak_count **)(v45 + 48);
  *(void *)(v45 + 40) = v44;
  *(void *)(v45 + 48) = v43;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_55:
  uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
  if (_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken != -1) {
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken, &__block_literal_global_614);
  }
  uint64_t v28 = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq;
  int v27 = *(std::__shared_weak_count **)(_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq + 8);
  if (!v27)
  {
    if (*(void *)(v26 + 40) != v28) {
      return;
    }
LABEL_64:
    uint64_t v30 = *(void *)(v3 + 80);
    if (v30)
    {
      uint64_t v31 = *(void *)(v3 + 88);
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v33 = *(std::__shared_weak_count **)(v32 + 48);
      *(void *)(v32 + 40) = v30;
      *(void *)(v32 + 48) = v31;
      if (v33)
      {
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      return;
    }
    int v34 = *(char *)(v3 + 71);
    if (v34 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v35 = *(void *)(v3 + 56);
    }
    unint64_t v36 = v35 + 10;
    if (v35 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v36 >= 0x17)
      {
        uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17) {
          uint64_t v38 = v36 | 7;
        }
        uint64_t v39 = v38 + 1;
        unint64_t v37 = (char *)operator new(v38 + 1);
        *((void *)&v50 + 1) = v35 + 10;
        int64_t v51 = v39 | 0x8000000000000000;
        *(void *)&long long v50 = v37;
      }
      else
      {
        int64_t v51 = 0;
        long long v50 = 0uLL;
        unint64_t v37 = (char *)&v50;
        HIBYTE(v51) = v35 + 10;
        if (!v35)
        {
LABEL_84:
          strcpy(&v37[v35], ".quantizer");
          if (v51 >= 0) {
            int v41 = (const char *)&v50;
          }
          else {
            int v41 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v41, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          return;
        }
      }
      if (v34 >= 0) {
        unint64_t v40 = (const void *)(v3 + 48);
      }
      else {
        unint64_t v40 = *(const void **)(v3 + 48);
      }
      memmove(v37, v40, v35);
      goto LABEL_84;
    }
LABEL_99:
    abort();
  }
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v29 = *(void *)(v26 + 40);
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EEC2EN19vi_ondisk_allocator11meta_info_sE(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = &unk_1F1814DF0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(void *)(a1 + 64) = fd_dup(*(void *)a2);
  bzero(v9, 0x400uLL);
  uint8x8_t v5 = fd_name(*(void *)a2, v9, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  if (*(void *)(a1 + 64)) {
    operator new();
  }
  unint64_t v6 = __si_assert_copy_extra_329();
  uint64_t v7 = v6;
  uint64_t v8 = "";
  if (v6) {
    uint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 487, "fdPtr != nullptr", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void _ZNK9QuantizerIDF16_Li768EE14topKPartitionsERK10CIVector_sIDF16_Li768EEi(uint64_t a1@<X0>, float16x8_t *a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    uint64_t v7 = 0;
    int v83 = 0;
    float v82 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_76;
  }
  v108 = a4;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = a3;
  int v12 = a2;
  do
  {
    size_t v13 = (float16x8_t *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 72))(a1, v10);
    float16x8_t v14 = 0uLL;
    unint64_t v15 = -8;
    uint64_t v16 = v12;
    do
    {
      float16x8_t v17 = *v13++;
      float16x8_t v18 = v17;
      float16x8_t v19 = *v16++;
      float16x8_t v20 = vsubq_f16(v18, v19);
      float16x8_t v14 = vmlaq_f16(v14, v20, v20);
      v15 += 8;
    }
    while (v15 < 0x2F8);
    float32x4_t v21 = vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v14.i8), vcvt_hight_f32_f16(v14));
    unint64_t v22 = (v10 | ((unint64_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21))) << 32)) >> 32;
    uint64_t v23 = v7 - v9;
    uint64_t v24 = (v7 - v9) >> 3;
    if (v24 < v11)
    {
      if (v7 < v8)
      {
        *(_DWORD *)uint64_t v7 = v10;
        *((_DWORD *)v7 + 1) = v22;
        v7 += 8;
LABEL_49:
        if (v7 - v9 >= 9)
        {
          unint64_t v56 = (((unint64_t)(v7 - v9) >> 3) - 2) >> 1;
          float v57 = (float *)&v9[8 * v56];
          float v59 = v7 - 8;
          unsigned int v58 = *((_DWORD *)v7 - 2);
          float v60 = v57[1];
          float v61 = *((float *)v7 - 1);
          int v62 = *(_DWORD *)v57;
          BOOL v63 = *(_DWORD *)v57 < v58;
          if (v60 != v61) {
            BOOL v63 = v60 < v61;
          }
          if (v63)
          {
            do
            {
              BOOL v64 = v57;
              *(_DWORD *)float v59 = v62;
              *((float *)v59 + 1) = v57[1];
              if (!v56) {
                break;
              }
              unint64_t v56 = (v56 - 1) >> 1;
              float v57 = (float *)&v9[8 * v56];
              float v65 = v57[1];
              int v62 = *(_DWORD *)v57;
              BOOL v66 = v65 < v61;
              if (v65 == v61) {
                BOOL v66 = *(_DWORD *)v57 < v58;
              }
              float v59 = (char *)v64;
            }
            while (v66);
            *(_DWORD *)BOOL v64 = v58;
            v64[1] = v61;
          }
        }
        goto LABEL_4;
      }
      if ((v8 - v9) >> 2 <= (unint64_t)(v24 + 1)) {
        unint64_t v36 = v24 + 1;
      }
      else {
        unint64_t v36 = (v8 - v9) >> 2;
      }
      if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v36 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v37 = 8 * v36;
      uint64_t v38 = operator new(8 * v36);
      uint64_t v39 = &v38[8 * v24];
      *uint64_t v39 = v10;
      v39[1] = v22;
      if (v7 == v9)
      {
        uint64_t v44 = v7;
        uint64_t v9 = &v38[8 * v24];
        goto LABEL_46;
      }
      unint64_t v40 = v7 - v9 - 8;
      if (v40 >= 0x58 && (unint64_t)(v9 - v38) >= 0x20)
      {
        uint64_t v76 = (v40 >> 3) + 1;
        int v41 = &v7[-8 * (v76 & 0x3FFFFFFFFFFFFFFCLL)];
        float v77 = &v38[8 * v24 - 16];
        int v78 = v7 - 16;
        uint64_t v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *float v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        BOOL v42 = (char *)&v39[-2 * (v76 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_34;
        }
      }
      else
      {
        int v41 = v7;
        BOOL v42 = &v38[8 * v24];
      }
      do
      {
        uint64_t v43 = *((void *)v41 - 1);
        v41 -= 8;
        *((void *)v42 - 1) = v43;
        v42 -= 8;
      }
      while (v41 != v9);
LABEL_34:
      uint64_t v44 = v9;
      uint64_t v9 = v42;
LABEL_46:
      uint64_t v8 = &v38[v37];
      uint64_t v7 = (char *)(v39 + 2);
      if (v44) {
        operator delete(v44);
      }
      int v12 = a2;
      goto LABEL_49;
    }
    float v25 = *((float *)v9 + 1);
    int v26 = *(_DWORD *)v9;
    BOOL v27 = *(_DWORD *)v9 > v10;
    if (v25 != *(float *)&v22) {
      BOOL v27 = v25 > *(float *)&v22;
    }
    if (v27)
    {
      if (v23 <= 8)
      {
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v22;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = v9;
        do
        {
          int v34 = (float *)&v29[8 * v28 + 8];
          uint64_t v35 = (2 * v28) | 1;
          uint64_t v28 = 2 * v28 + 2;
          if (v28 < v24)
          {
            float v30 = v34[1];
            float v31 = v34[3];
            float v32 = *v34;
            BOOL v33 = *(_DWORD *)v34 < *((_DWORD *)v34 + 2);
            if (v30 != v31) {
              BOOL v33 = v30 < v31;
            }
            if (v33)
            {
              float v32 = v34[2];
              v34 += 2;
            }
            else
            {
              uint64_t v28 = v35;
            }
          }
          else
          {
            float v32 = *v34;
            uint64_t v28 = v35;
          }
          *(float *)uint64_t v29 = v32;
          *((float *)v29 + 1) = v34[1];
          uint64_t v29 = (char *)v34;
        }
        while (v28 <= (uint64_t)((unint64_t)(v24 - 2) >> 1));
        if (v34 == (float *)(v7 - 8))
        {
          *(_DWORD *)int v34 = v26;
          v34[1] = v25;
        }
        else
        {
          float *v34 = *((float *)v7 - 2);
          v34[1] = *((float *)v7 - 1);
          *((_DWORD *)v7 - 2) = v26;
          *((float *)v7 - 1) = v25;
          uint64_t v45 = (char *)v34 - v9 + 8;
          if (v45 >= 9)
          {
            unint64_t v46 = (((unint64_t)v45 >> 3) - 2) >> 1;
            std::string v47 = (float *)&v9[8 * v46];
            float v48 = v47[1];
            float v49 = v34[1];
            int v50 = *(_DWORD *)v47;
            float v51 = *v34;
            BOOL v52 = *(_DWORD *)v47 < *(_DWORD *)v34;
            if (v48 != v49) {
              BOOL v52 = v48 < v49;
            }
            if (v52)
            {
              do
              {
                float v53 = v47;
                *(_DWORD *)int v34 = v50;
                v34[1] = v47[1];
                if (!v46) {
                  break;
                }
                unint64_t v46 = (v46 - 1) >> 1;
                std::string v47 = (float *)&v9[8 * v46];
                float v54 = v47[1];
                int v50 = *(_DWORD *)v47;
                BOOL v55 = v54 < v49;
                if (v54 == v49) {
                  BOOL v55 = *(_DWORD *)v47 < LODWORD(v51);
                }
                int v34 = v53;
              }
              while (v55);
              *float v53 = v51;
              v53[1] = v49;
            }
          }
        }
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v22;
        BOOL v67 = v7 - 8;
        unint64_t v68 = (((unint64_t)v23 >> 3) - 2) >> 1;
        int v69 = (float *)&v9[8 * v68];
        float v70 = v69[1];
        int v71 = *(_DWORD *)v69;
        BOOL v72 = *(_DWORD *)v69 < v10;
        if (v70 != *(float *)&v22) {
          BOOL v72 = v70 < *(float *)&v22;
        }
        if (v72)
        {
          do
          {
            float v73 = v69;
            *(_DWORD *)BOOL v67 = v71;
            *((float *)v67 + 1) = v69[1];
            if (!v68) {
              break;
            }
            unint64_t v68 = (v68 - 1) >> 1;
            int v69 = (float *)&v9[8 * v68];
            float v74 = v69[1];
            int v71 = *(_DWORD *)v69;
            BOOL v75 = v74 < *(float *)&v22;
            if (v74 == *(float *)&v22) {
              BOOL v75 = *(_DWORD *)v69 < v10;
            }
            BOOL v67 = (char *)v73;
          }
          while (v75);
          *(_DWORD *)float v73 = v10;
          *((_DWORD *)v73 + 1) = v22;
        }
      }
    }
LABEL_4:
    ++v10;
  }
  while (v10 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1));
  const char *v108 = 0;
  v108[1] = 0;
  v108[2] = 0;
  uint64_t v81 = v7 - v9;
  if (v7 == v9)
  {
    int v83 = 0;
    float v82 = 0;
  }
  else
  {
    if (v81 < 0) {
      abort();
    }
    float v82 = (int *)operator new(v7 - v9);
    const char *v108 = v82;
    v108[2] = &v82[2 * (v81 >> 3)];
    memcpy(v82, v9, v81 & 0xFFFFFFFFFFFFFFF8);
    int v83 = (float *)((char *)v82 + (v81 & 0xFFFFFFFFFFFFFFF8));
    v108[1] = (int *)v83;
    uint64_t v7 = v9;
  }
LABEL_76:
  if ((char *)v83 - (char *)v82 >= 9)
  {
    uint64_t v84 = (unint64_t)((char *)v83 - (char *)v82) >> 3;
    do
    {
      uint64_t v86 = 0;
      int v87 = *v82;
      int v88 = v82[1];
      int v89 = (float *)v82;
      do
      {
        float v94 = &v89[2 * v86 + 2];
        uint64_t v95 = (2 * v86) | 1;
        uint64_t v86 = 2 * v86 + 2;
        if (v86 < v84)
        {
          float v90 = v94[1];
          float v91 = v94[3];
          float v92 = *v94;
          BOOL v93 = *(_DWORD *)v94 < *((_DWORD *)v94 + 2);
          if (v90 != v91) {
            BOOL v93 = v90 < v91;
          }
          if (v93)
          {
            float v92 = v94[2];
            v94 += 2;
          }
          else
          {
            uint64_t v86 = v95;
          }
        }
        else
        {
          float v92 = *v94;
          uint64_t v86 = v95;
        }
        *int v89 = v92;
        v89[1] = v94[1];
        int v89 = v94;
      }
      while (v86 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
      BOOL v96 = (char *)(v83 - 2);
      if (v94 == v83 - 2)
      {
        *(_DWORD *)float v94 = v87;
        *((_DWORD *)v94 + 1) = v88;
      }
      else
      {
        *float v94 = *(v83 - 2);
        v94[1] = *(v83 - 1);
        *((_DWORD *)v83 - 2) = v87;
        *((_DWORD *)v83 - 1) = v88;
        uint64_t v97 = (char *)v94 - (char *)v82 + 8;
        if (v97 >= 9)
        {
          unint64_t v98 = (((unint64_t)v97 >> 3) - 2) >> 1;
          float v99 = (float *)&v82[2 * v98];
          float v100 = v99[1];
          float v101 = v94[1];
          float v102 = *v99;
          float v103 = *v94;
          BOOL v104 = *(_DWORD *)v99 < *(_DWORD *)v94;
          if (v100 != v101) {
            BOOL v104 = v100 < v101;
          }
          if (v104)
          {
            do
            {
              uint64_t v105 = v99;
              *float v94 = v102;
              v94[1] = v99[1];
              if (!v98) {
                break;
              }
              unint64_t v98 = (v98 - 1) >> 1;
              float v99 = (float *)&v82[2 * v98];
              float v106 = v99[1];
              float v102 = *v99;
              BOOL v107 = v106 < v101;
              if (v106 == v101) {
                BOOL v107 = *(_DWORD *)v99 < LODWORD(v103);
              }
              float v94 = v105;
            }
            while (v107);
            float *v105 = v103;
            v105[1] = v101;
          }
        }
      }
      int v83 = (float *)v96;
    }
    while (v84-- > 2);
  }
  if (v7)
  {
    operator delete(v7);
  }
}

unint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    uint8x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "i < nCentroids", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(v2 + 24) + *(void *)(v2 + 16) * a2;
  return _windowsResolvePtr(v2 + 40, v3, 1536);
}

BOOL _ZNK9QuantizerIDF16_Li768EE12isPersistentEv(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  int v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8) {
      return 1;
    }
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(void *)(a1 + 16) == 8)
  {
    uint64_t v1 = (void *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

BOOL _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(unsigned int *)(v2 + 72);
  if ((int)v3 < 1)
  {
    uint64_t v8 = -1;
  }
  else
  {
    uint64_t v4 = 12;
    do
    {
      uint8x8_t v5 = *(void **)(v2 + 8 * v4);
      if (v5 && (unint64_t v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2)) {
        uint64_t v8 = a2 - v6 + v7;
      }
      else {
        uint64_t v8 = -1;
      }
      if (v4 - 11 >= v3) {
        break;
      }
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

BOOL _ZNK9QuantizerIDF16_Li768EEeqERK12AnyQuantizer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 768)
  {
    uint8x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 291, "D == other.dimension()", v7);
LABEL_12:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) != 2)
  {
    uint64_t v8 = __si_assert_copy_extra_329();
    unint64_t v6 = v8;
    uint64_t v9 = "";
    if (v8) {
      uint64_t v9 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 292, "sizeof(ELEM_TYPE) == other.elementSize()", v9);
    goto LABEL_12;
  }
  return _ZNK9QuantizerIDF16_Li768EEeqERKS0_(a1, a2);
}

BOOL _ZNK9QuantizerIDF16_Li768EEeqERKS0_(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    return 1;
  }
  uint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v5);
    uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v5);
    int v8 = memcmp(v6, v7, 0x600uLL);
    BOOL result = v8 == 0;
    if (v8) {
      break;
    }
    uint64_t v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
      return 1;
    }
  }
  return result;
}

uint64_t _ZNK9QuantizerIDF16_Li768EE11elementSizeEv()
{
  return 2;
}

uint64_t _ZNK9QuantizerIDF16_Li768EE9dimensionEv()
{
  return 768;
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EE5countEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EE7versionEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EED0Ev(uint64_t a1)
{
  _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EED2Ev(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EED2Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814DF0;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if (v2) {
    vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(a1 + 40));
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    int v4 = *(const void **)(v3 + 4216);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 4216) = 0;
    }
    *(_OWORD *)(v3 + 4200) = 0u;
    MEMORY[0x1C1881000](v3, 0x10A0C40112AF241);
  }
  fd_release(*(atomic_uint **)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    unint64_t v6 = *(const void **)(v5 + 4216);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v5 + 4216) = 0;
    }
    *(_OWORD *)(v5 + 4200) = 0u;
    MEMORY[0x1C1881000](v5, 0x10A0C40112AF241);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ___ZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li768EENS_10shared_ptrI9QuantizerIDF16_Li768EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li768EENS_10shared_ptrI9QuantizerIDF16_Li768EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

float *_ZNK21SingleVectorQuantizerIDF16_Li768EE14topKPartitionsERK10CIVector_sIDF16_Li768EEi@<X0>(uint64_t a1@<X0>, float16x8_t *a2@<X1>, float **a3@<X8>)
{
  int v4 = (float16x8_t *)(a1 + 33);
  _Q0 = 0uLL;
  unint64_t v6 = -8;
  do
  {
    float16x8_t v7 = *a2++;
    float16x8_t v8 = v7;
    float16x8_t v9 = *v4++;
    float16x8_t v10 = vsubq_f16(v8, v9);
    _Q0 = vmlaq_f16(_Q0, v10, v10);
    v6 += 8;
  }
  while (v6 < 0x2F8);
  __asm { FCVT            S1, H0 }
  _H2 = _Q0.i16[1];
  __asm { FCVT            S2, H2 }
  float v18 = _S1 + _S2;
  LOWORD(_S2) = _Q0.i16[2];
  __asm { FCVT            S2, H2 }
  _H3 = _Q0.i16[3];
  __asm { FCVT            S3, H3 }
  float v22 = v18 + (float)(_S2 + _S3);
  LOWORD(_S2) = _Q0.i16[4];
  __asm { FCVT            S2, H2 }
  LOWORD(_S3) = _Q0.i16[5];
  __asm { FCVT            S3, H3 }
  float v25 = _S2 + _S3;
  LOWORD(_S3) = _Q0.i16[6];
  __asm { FCVT            S3, H3 }
  _H0 = _Q0.i16[7];
  __asm { FCVT            S0, H0 }
  float v29 = (float)(v22 + (float)(v25 + _S3)) + _S0;
  uint64_t result = (float *)operator new(8uLL);
  a3[1] = result + 2;
  a3[2] = result + 2;
  float *result = 0.0;
  result[1] = v29;
  *a3 = result;
  return result;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li768EE11getCentroidEj(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    int v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 396, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li768EE5countEv()
{
  return 1;
}

void _ZN19ZeroVectorQuantizerIDF16_Li768EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN19ZeroVectorQuantizerIDF16_Li768EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZN21SingleVectorQuantizerIDF16_Li768EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN21SingleVectorQuantizerIDF16_Li768EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

__int16 ___ZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEv_block_invoke@<H0>()
{
  bzero((char *)&_ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid + 2, 0x5FEuLL);
  __int16 result = COERCE_UNSIGNED_INT(1.0);
  LOWORD(_ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid) = COERCE_UNSIGNED_INT(1.0);
  return result;
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li768EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    unsigned __int8 v2 = *(NSObject **)(v1 + 16);
    if (v2) {
      dispatch_release(v2);
    }
    int v3 = *__error();
    int v4 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (void *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      unint64_t v6 = (void *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0) {
        unint64_t v6 = (void *)*v6;
      }
      int v13 = 136315394;
      float16x8_t v14 = v5;
      __int16 v15 = 2080;
      uint64_t v16 = v6;
      _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v13, 0x16u);
    }
    *__error() = v3;
    float16x8_t v7 = *(void **)(v1 + 128);
    if (v7)
    {
      do
      {
        unint64_t v11 = (void *)*v7;
        int v12 = (std::__shared_weak_count *)v7[4];
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        operator delete(v7);
        float16x8_t v7 = v11;
      }
      while (v11);
    }
    float16x8_t v8 = *(void **)(v1 + 112);
    *(void *)(v1 + 112) = 0;
    if (v8) {
      operator delete(v8);
    }
    float16x8_t v9 = *(std::__shared_weak_count **)(v1 + 104);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    float16x8_t v10 = *(std::__shared_weak_count **)(v1 + 88);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_19:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_29:
        operator delete(*(void **)(v1 + 24));
LABEL_20:
        JUMPOUT(0x1C1881000);
      }
    }
    else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li768EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void ___ZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijt_block_invoke()
{
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEE16__on_zero_sharedEv(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    int v3 = *(const void **)(v2 + 4216);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 4216) = 0;
    }
    *(_OWORD *)(v2 + 4200) = 0u;
    JUMPOUT(0x1C1881000);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1816670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1816670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEENS6_I17AnyPartitionStoreEE(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  float16x8_t v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  float16x8_t v10 = *(char **)(a1 + 80);
  float16x8_t v8 = *(std::__shared_weak_count **)(a1 + 88);
  float16x8_t v9 = (long long *)(a1 + 80);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *(_DWORD **)(a1 + 96);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  float16x8_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    float v29 = __si_assert_copy_extra_329();
    float v30 = v29;
    float v31 = "";
    if (v29) {
      float v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 48) + 40) != v14[18])
  {
    float v32 = __si_assert_copy_extra_329();
    float v30 = v32;
    BOOL v33 = "";
    if (v32) {
      BOOL v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    __int16 v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = v10 + 8;
      if (v10[31] < 0) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      float v18 = (void *)(*a2 + 8);
      uint64_t v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        float v18 = (void *)*v18;
      }
      int v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      float16x8_t v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        float16x8_t v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      float32x4_t v21 = __p;
      if (v45 < 0) {
        float32x4_t v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      float v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      float v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      float v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      BOOL v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    float16x8_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  int v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  uint64_t v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  BOOL v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13newPartitionsENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEE(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  unint64_t v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    unint64_t v6 = ".tmp.partitions";
  }
  memset(v16, 0, sizeof(v16));
  long long v7 = *(_OWORD *)(a1 + 24);
  v15[0] = *(_OWORD *)(a1 + 8);
  v15[1] = v7;
  size_t v8 = strlen(v6);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  float16x8_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    float16x8_t v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    unint64_t v14 = v12 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v14) = v8;
    float16x8_t v10 = __dst;
    if (!v8)
    {
LABEL_16:
      *((unsigned char *)v9 + (void)v10) = 0;
      IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)v16, (uint64_t)v15, (uint64_t)__dst, 1);
      if (SHIBYTE(v14) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v10, v6, (size_t)v9);
  goto LABEL_16;
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE17getVectorAtOffsetEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v3 = a2;
  unint64_t v4 = v2[3] + v2[2] * a2;
  bit_vector_set_10635(v2 + 525, (v4 >> 20));
  unint64_t v5 = (v4 + 1552) >> 20;
  if (v5 > (v4 >> 20))
  {
    unsigned int v6 = (v4 >> 20) + 1;
    do
    {
      unint64_t v7 = v6;
      bit_vector_set_10635(v2 + 525, v6++);
    }
    while (v5 > v7);
  }
  unint64_t v8 = v2[3] + v2[2] * v3;
  return _windowsResolvePtr((uint64_t)(v2 + 5), v8, 1552);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED0Ev(void *a1)
{
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(a1);
  JUMPOUT(0x1C1881000);
}

void *_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(void *a1)
{
  *a1 = &unk_1F1816628;
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12diagnoseDumpERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS5_13basic_ostreamIcS8_EEi(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  float16x8_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  __int16 v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v17 = "(readOnly)";
  }
  else {
    uint64_t v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  float16x8_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    int v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    BOOL v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    uint64_t v28 = (void *)std::ostream::operator<<();
    float v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    float v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  float v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 96);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  uint64_t v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 40))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      float v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v52, 1552);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 40));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t v43 = _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v40, 1552);
        uint64_t v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        unint64_t v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, v43, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, v43 + 1528, 8);
        if ((v71 & 0x80u) == 0) {
          float v49 = &v69;
        }
        else {
          float v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  float v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6statusERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float16x8_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v31);
  if (v31)
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE26updateVectorStorageOffsetsEP13__SIUINT64Set(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 48;
  if (a2)
  {
    unint64_t v5 = 0;
    uint64_t v25 = a2 + 56;
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (v5 >= result) {
        break;
      }
      uint64_t v8 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v9 = v8[3] + v8[2] * v5;
      bit_vector_set_10635(v8 + 525, (v9 >> 20));
      unint64_t v10 = (v9 + 1552) >> 20;
      if (v10 > (v9 >> 20))
      {
        unsigned int v11 = (v9 >> 20) + 1;
        do
        {
          unint64_t v12 = v11;
          bit_vector_set_10635(v8 + 525, v11++);
        }
        while (v10 > v12);
      }
      unint64_t v6 = _windowsResolvePtr((uint64_t)(v8 + 5), v8[3] + v8[2] * v5, 1552);
      if (!*(unsigned char *)(a2 + 184))
      {
        unint64_t v13 = *(unsigned int *)(v6 + 1544);
        int v14 = *(_DWORD *)(a2 + 24);
        if (!v14 || !((*(void *)(a2 + 16) ^ v13) >> (-4 * v14)))
        {
          char v15 = (60 - 4 * v14) & 0xFC;
          uint64_t v16 = *(void *)(v25 + 8 * ((v13 >> v15) & 0xF));
          if (v16)
          {
            int v17 = v14 + 2;
            do
            {
              char v15 = (64 - 4 * v17) & 0xFC;
              uint64_t v16 = *(void *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v15) & 0xF));
              ++v17;
            }
            while ((v16 & 1) != 0);
          }
          if (v16)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(void *)v16 + 16))(v16, v13, ~(-1 << v15)))
            {
              data_map_set_offset_for_id(*(void *)(a1 + 192), v13, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * v5) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
      ++v5;
    }
  }
  else
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (i >= result) {
        break;
      }
      int v20 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v21 = v20[3] + v20[2] * i;
      bit_vector_set_10635(v20 + 525, (v21 >> 20));
      unint64_t v22 = (v21 + 1552) >> 20;
      if (v22 > (v21 >> 20))
      {
        unsigned int v23 = (v21 >> 20) + 1;
        do
        {
          unint64_t v24 = v23;
          bit_vector_set_10635(v20 + 525, v23++);
        }
        while (v22 > v24);
      }
      unint64_t v19 = _windowsResolvePtr((uint64_t)(v20 + 5), v20[3] + v20[2] * i, 1552);
      data_map_set_offset_for_id(*(void *)(a1 + 192), *(unsigned int *)(v19 + 1544), ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
    }
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16getDataForOffsetEjPj(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    unint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *unint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 1536;
  }
  *a3 = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14setVectorStoreEP10data_map_s(uint64_t result, uint64_t a2)
{
  *(void *)(result + 192) = a2;
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE11storageSizeEv(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 96) + 32) + 48);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE24aNNForDebugProcessResultEPvU13block_pointerFvjjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  unint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v25, *((unsigned int *)v25 + 2), *((float *)v25 + 3));
        ++v25;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v16, *((unsigned int *)v16 + 2), *((float *)v16 + 3));
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          unint64_t v21 = v15;
          int v22 = *__error();
          unsigned int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            unint64_t v24 = __p;
            if (v49 < 0) {
              unint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        ++v16;
      }
      while (v16 != v12);
    }
  }
  int v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      float v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    float v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE23aNNForTestProcessResultEPvU13block_pointerFvjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6345A08;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfbPv(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9, a4, a7, a8, 0, a9);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[1532], a2[1533], a2[1534], a2[1535]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  int v126 = v11;
  unsigned int v12 = 10 * v11;
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v13 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10000;
  }
  if (v12 <= v14) {
    unsigned int v12 = v14;
  }
  unsigned int v15 = v12
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v146 = 0;
  v147 = &v146;
  if (v17 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v17;
  }
  int v149 = 0;
  uint64_t v148 = 0x2000000000;
  uint64_t v142 = 0;
  v143 = &v142;
  int v145 = 0;
  uint64_t v144 = 0x2000000000;
  uint64_t v141 = 0;
  long long v139 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v139);
  double Current = CFAbsoluteTimeGetCurrent();
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1) <= v12)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    LODWORD(v125) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    uint64_t v62 = 0;
    int v63 = 0;
    uint64_t v64 = *(void *)(a1 + 48);
    while (1)
    {
      if (v63 == *(_DWORD *)(v64 + 40)) {
        goto LABEL_98;
      }
      ++*((_DWORD *)v147 + 6);
      if (*(_DWORD *)(v64 + 40) <= v62) {
        break;
      }
      unint64_t v65 = _windowsResolvePtr(*(void *)(v64 + 32) + 40, *(void *)(*(void *)(v64 + 32) + 24) + *(void *)(*(void *)(v64 + 32) + 16) * v62, 1552);
      unint64_t v66 = v65;
      unint64_t v67 = *(unsigned int *)(v65 + 1544);
      _Q0 = 0uLL;
      unint64_t v69 = -8;
      uint64_t v70 = (float16x8_t *)a2;
      unsigned __int8 v71 = (float16x8_t *)v65;
      do
      {
        float16x8_t v72 = *v70++;
        float16x8_t v73 = v72;
        float16x8_t v74 = *v71++;
        float16x8_t v75 = vsubq_f16(v73, v74);
        _Q0 = vmlaq_f16(_Q0, v75, v75);
        v69 += 8;
      }
      while (v69 < 0x2F8);
      if (*((void *)&v139 + 1))
      {
        uint8x8_t v76 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v139 + 8));
        v76.i16[0] = vaddlv_u8(v76);
        if (v76.u32[0] > 1uLL)
        {
          if (*((void *)&v139 + 1) <= v67) {
            unint64_t v77 = v67 % *((void *)&v139 + 1);
          }
          else {
            unint64_t v77 = *(unsigned int *)(v65 + 1544);
          }
        }
        else
        {
          unint64_t v77 = (DWORD2(v139) - 1) & v67;
        }
        int v78 = *(uint64_t **)(v139 + 8 * v77);
        if (v78)
        {
          int v78 = (uint64_t *)*v78;
          if (v78)
          {
            if (v76.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v80 = v78[1];
                if (v80 == v67)
                {
                  if (*((_DWORD *)v78 + 4) == v67) {
                    goto LABEL_85;
                  }
                }
                else if ((v80 & (*((void *)&v139 + 1) - 1)) != v77)
                {
                  goto LABEL_84;
                }
                int v78 = (uint64_t *)*v78;
                if (!v78) {
                  goto LABEL_85;
                }
              }
            }
            do
            {
              unint64_t v79 = v78[1];
              if (v79 == v67)
              {
                if (*((_DWORD *)v78 + 4) == v67) {
                  break;
                }
              }
              else
              {
                if (v79 >= *((void *)&v139 + 1)) {
                  v79 %= *((void *)&v139 + 1);
                }
                if (v79 != v77) {
                  goto LABEL_84;
                }
              }
              int v78 = (uint64_t *)*v78;
            }
            while (v78);
          }
        }
      }
      else
      {
LABEL_84:
        int v78 = 0;
      }
LABEL_85:
      __asm { FCVT            S1, H0 }
      _H2 = _Q0.i16[1];
      __asm { FCVT            S2, H2 }
      float v88 = _S1 + _S2;
      LOWORD(_S2) = _Q0.i16[2];
      __asm { FCVT            S2, H2 }
      _H3 = _Q0.i16[3];
      __asm { FCVT            S3, H3 }
      float v92 = v88 + (float)(_S2 + _S3);
      LOWORD(_S2) = _Q0.i16[4];
      __asm { FCVT            S2, H2 }
      LOWORD(_S3) = _Q0.i16[5];
      __asm { FCVT            S3, H3 }
      float v95 = _S2 + _S3;
      LOWORD(_S3) = _Q0.i16[6];
      __asm { FCVT            S3, H3 }
      _H0 = _Q0.i16[7];
      __asm { FCVT            S0, H0 }
      float v99 = (float)(v92 + (float)(v95 + _S3)) + _S0;
      if (a6 == 0.0 || v99 <= a6)
      {
        if (v78)
        {
          int v101 = *__error();
          float v102 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v67;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v99;
            _os_log_impl(&dword_1BD672000, v102, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v101;
        }
        *(void *)keyExistsAndHasValidFormat = *(void *)(v66 + 1536);
        *(_DWORD *)&Boolean keyExistsAndHasValidFormat[8] = v67;
        *(float *)&keyExistsAndHasValidFormat[12] = v99;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(a4, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v78)
        {
          int v103 = *__error();
          BOOL v104 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v67;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v99;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v104, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v103;
        }
        ++*((_DWORD *)v143 + 6);
      }
      uint64_t v62 = (v62 + 1);
      int v63 = v62;
      if (v64 != *(void *)(a1 + 48))
      {
        uint64_t v122 = __si_assert_copy_extra_329();
        double v120 = v122;
        __int16 v123 = "";
        if (v122) {
          __int16 v123 = v122;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v123);
        goto LABEL_128;
      }
    }
    __int16 v119 = __si_assert_copy_extra_329();
    double v120 = v119;
    __int16 v121 = "";
    if (v119) {
      __int16 v121 = v119;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v121);
LABEL_128:
    free(v120);
    if (__valid_fs(-1)) {
      uint64_t v124 = 2989;
    }
    else {
      uint64_t v124 = 3072;
    }
    *(_DWORD *)uint64_t v124 = -559038737;
    abort();
  }
  if (!AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v22 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = 40;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v24 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      int v25 = v24;
    }
    else {
      int v25 = 45;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v26 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v27 = keyExistsAndHasValidFormat[0];
    int v28 = 8 * v26;
    int v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v30 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12) {
      char v32 = 18;
    }
    else {
      char v32 = v30;
    }
    char v33 = v32 - 3;
    unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    if (v31) {
      char v35 = v33;
    }
    else {
      char v35 = 17;
    }
    unsigned int v36 = v34 >> v35;
    if (v36 <= 8) {
      int v37 = 8;
    }
    else {
      int v37 = v36;
    }
    int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    if (v27) {
      int v39 = v28;
    }
    else {
      int v39 = 800;
    }
    unsigned int v40 = v39 * v38 / (v29 * v37);
    if (v23 < v40) {
      unsigned int v40 = v23;
    }
    if (v40 <= v20) {
      CFIndex AppIntegerValue = v20;
    }
    else {
      CFIndex AppIntegerValue = v40;
    }
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v46 = *(void *)(a1 + 80);
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 88);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = *(void *)(a1 + 96);
  long long v47 = *(std::__shared_weak_count **)(a1 + 104);
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
  uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
  long long v136 = 0;
  long long v137 = 0;
  uint64_t v138 = 0;
  uint64_t v150 = &v136;
  unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
  if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
  {
    long long v134 = 0;
    long long v135 = 0;
    long long v133 = 0;
  }
  else
  {
    do
    {
      int v52 = *v50;
      v50 += 2;
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v150, v52);
    }
    while (v50 != v49);
    float v53 = v136;
    long long v134 = 0;
    long long v135 = 0;
    long long v133 = 0;
    int64_t v54 = v137 - (unsigned char *)v136;
    if (v137 != v136)
    {
      if (v54 < 0) {
        abort();
      }
      long long v55 = (char *)operator new(v137 - (unsigned char *)v136);
      uint64_t v56 = &v55[4 * (v54 >> 2)];
      long long v133 = v55;
      long long v135 = v56;
      memcpy(v55, v53, v54);
      long long v134 = v56;
    }
  }
  v128[0] = MEMORY[0x1E4F143A8];
  v128[1] = 1174405120;
  v128[2] = ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v128[3] = &unk_1F1816710;
  v128[6] = a1;
  v128[7] = a2;
  v128[4] = &v146;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v129, (uint64_t)&v139);
  float v132 = a6;
  v128[5] = &v142;
  uint64_t v131 = a4;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v133, v128);
  if (v133)
  {
    long long v134 = v133;
    operator delete(v133);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
  float v116 = v130;
  if (v130)
  {
    do
    {
      __int16 v117 = (void *)*v116;
      operator delete(v116);
      float v116 = v117;
    }
    while (v117);
  }
  uint64_t v118 = v129;
  __int16 v129 = 0;
  if (v118) {
    operator delete(v118);
  }
  if (v136)
  {
    long long v137 = v136;
    operator delete(v136);
  }
  if (*(void *)keyExistsAndHasValidFormat)
  {
    *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  unint64_t v125 = v51 >> 3;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_98:
  int v105 = *__error();
  float v106 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
  {
    int v107 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    int v108 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    int v109 = *((_DWORD *)v143 + 6);
    int v110 = *((_DWORD *)v147 + 6);
    uint64_t v111 = (uint64_t)(a4[2] - a4[1]) >> 4;
    CFAbsoluteTime v112 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v126;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v107;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v125;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v108;
    __int16 v152 = 1024;
    int v153 = v109;
    __int16 v154 = 1024;
    int v155 = v110;
    __int16 v156 = 2048;
    uint64_t v157 = v111;
    __int16 v158 = 2048;
    CFAbsoluteTime v159 = v112 - Current;
    _os_log_impl(&dword_1BD672000, v106, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v105;
  __int16 v113 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      int v114 = (void *)*v113;
      operator delete(v113);
      __int16 v113 = v114;
    }
    while (v114);
  }
  __int16 v115 = (void *)v139;
  *(void *)&long long v139 = 0;
  if (v115) {
    operator delete(v115);
  }
  _Block_object_dispose(&v142, 8);
  _Block_object_dispose(&v146, 8);
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v5 = *a3;
  uint64_t v6 = *(void **)(*(void *)(v4 + 48) + 32);
  unint64_t v7 = v6[3] + v6[2] * v5;
  bit_vector_set_10635(v6 + 525, (v7 >> 20));
  unint64_t v8 = (v7 + 1552) >> 20;
  if (v8 > (v7 >> 20))
  {
    unsigned int v9 = (v7 >> 20) + 1;
    do
    {
      unint64_t v10 = v9;
      bit_vector_set_10635(v6 + 525, v9++);
    }
    while (v8 > v10);
  }
  unint64_t v11 = _windowsResolvePtr((uint64_t)(v6 + 5), v6[3] + v6[2] * v5, 1552);
  unint64_t v12 = v11;
  unsigned int v13 = *(float16x8_t **)(a1 + 56);
  _Q0 = 0uLL;
  unint64_t v15 = -8;
  unsigned int v16 = (float16x8_t *)v11;
  do
  {
    float16x8_t v17 = *v13++;
    float16x8_t v18 = v17;
    float16x8_t v19 = *v16++;
    float16x8_t v20 = vsubq_f16(v18, v19);
    _Q0 = vmlaq_f16(_Q0, v20, v20);
    v15 += 8;
  }
  while (v15 < 0x2F8);
  __asm { FCVT            S1, H0 }
  _H2 = _Q0.i16[1];
  __asm { FCVT            S2, H2 }
  float v28 = _S1 + _S2;
  LOWORD(_S2) = _Q0.i16[2];
  __asm { FCVT            S2, H2 }
  _H3 = _Q0.i16[3];
  __asm { FCVT            S3, H3 }
  float v32 = v28 + (float)(_S2 + _S3);
  LOWORD(_S2) = _Q0.i16[4];
  __asm { FCVT            S2, H2 }
  LOWORD(_S3) = _Q0.i16[5];
  __asm { FCVT            S3, H3 }
  float v35 = _S2 + _S3;
  LOWORD(_S3) = _Q0.i16[6];
  __asm { FCVT            S3, H3 }
  _H0 = _Q0.i16[7];
  __asm { FCVT            S0, H0 }
  float v39 = (float)(v32 + (float)(v35 + _S3)) + _S0;
  unint64_t v40 = *(unsigned int *)(v11 + 1544);
  int8x8_t v41 = *(int8x8_t *)(a1 + 72);
  if (v41)
  {
    uint8x8_t v42 = (uint8x8_t)vcnt_s8(v41);
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.u32[0] > 1uLL)
    {
      unint64_t v43 = *(unsigned int *)(v11 + 1544);
      if (*(void *)&v41 <= v40) {
        unint64_t v43 = v40 % *(void *)&v41;
      }
    }
    else
    {
      unint64_t v43 = (v41.i32[0] - 1) & v40;
    }
    int v44 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v43);
    if (v44)
    {
      int v44 = (uint64_t *)*v44;
      if (v44)
      {
        if (v42.u32[0] < 2uLL)
        {
          uint64_t v45 = *(void *)&v41 - 1;
          while (1)
          {
            uint64_t v47 = v44[1];
            if (v47 == v40)
            {
              if (*((_DWORD *)v44 + 4) == v40) {
                goto LABEL_27;
              }
            }
            else if ((v47 & v45) != v43)
            {
              goto LABEL_26;
            }
            int v44 = (uint64_t *)*v44;
            if (!v44) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v46 = v44[1];
          if (v46 == v40)
          {
            if (*((_DWORD *)v44 + 4) == v40) {
              break;
            }
          }
          else
          {
            if (v46 >= *(void *)&v41) {
              v46 %= *(void *)&v41;
            }
            if (v46 != v43) {
              goto LABEL_26;
            }
          }
          int v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
    }
  }
  else
  {
LABEL_26:
    int v44 = 0;
  }
LABEL_27:
  float v48 = *(float *)(a1 + 112);
  if (v48 == 0.0 || v39 <= v48)
  {
    if (v44)
    {
      int v50 = *__error();
      unint64_t v51 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v55) = 67109376;
        HIDWORD(v55) = v40;
        *(_WORD *)uint64_t v56 = 2048;
        *(double *)&v56[2] = v39;
        _os_log_impl(&dword_1BD672000, v51, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", (uint8_t *)&v55, 0x12u);
      }
      *__error() = v50;
    }
    uint64_t v55 = *(void *)(v12 + 1536);
    *(_DWORD *)uint64_t v56 = v40;
    *(float *)&v56[4] = v39;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(void **)(a1 + 104), (uint64_t)&v55);
  }
  else
  {
    if (v44)
    {
      int v52 = *__error();
      float v53 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        double v54 = *(float *)(a1 + 112);
        LODWORD(v55) = 67109632;
        HIDWORD(v55) = v40;
        *(_WORD *)uint64_t v56 = 2048;
        *(double *)&v56[2] = v39;
        __int16 v57 = 2048;
        double v58 = v54;
        _os_log_impl(&dword_1BD672000, v53, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", (uint8_t *)&v55, 0x1Cu);
      }
      *__error() = v52;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE20createCandidateQueueEj()
{
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE10aNNForTestEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvjfEj(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  uint64_t v6 = __si_assert_copy_extra_329();
  unint64_t v7 = v6;
  unint64_t v8 = "";
  if (v6) {
    unint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    unsigned int v14 = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    unint64_t v15 = &unk_1E63459E0;
    uint64_t v16 = a9;
    operator new();
  }
  unsigned int v9 = __si_assert_copy_extra_329();
  unint64_t v10 = v9;
  unint64_t v11 = "";
  if (v9) {
    unint64_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16restoreUpdateSetEP15PostingBaseInfoP14store_stream_t()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3127, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14storeUpdateSetEP15RelativePostingP14store_stream_t()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3122, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6renameEPKc(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 144);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 96);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 87) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 64), *(void *)(v16 + 72));
  }
  else {
    std::string buf = *(std::string *)(v16 + 64);
  }
  MEMORY[0x1C1880BF0](v16 + 64, a2);
  int v17 = *__error();
  float16x8_t v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    float16x8_t v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__s, v16);
    float16x8_t v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)int v24 = 136315394;
    int v25 = v19;
    __int16 v26 = 2080;
    int v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  fd_rename(*(void *)(*(void *)(v16 + 32) + 40), a2);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE13makePurgeableEv(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 96);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(void *)(v2 + 32) + 40));
  size_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12makeReadOnlyEv(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 96);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v5);
      unint64_t v8 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      unsigned int v22 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    uint64_t v9 = *(void *)(v5 + 32);
    fd_make_readonly(*(void *)(v9 + 40));
    uint64_t v10 = *(void *)(v9 + 40);
    if (v10)
    {
      do
      {
        int v11 = fchmodat(*(_DWORD *)(v10 + 44), *(const char **)(v10 + 72), 0x100u, 2048);
        uint64_t v12 = g_prot_error_callback;
        if (v11 != -1 || g_prot_error_callback == 0) {
          break;
        }
        uint64_t v14 = *(unsigned int *)(v10 + 40);
        unint64_t v15 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v12 + 16))(v12, v14, *v15, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 136);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a1 + 144);
    int v17 = *(std::__shared_weak_count **)(a1 + 152);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
    (*(void (**)(uint64_t))(*(void *)v18 + 120))(v18);
    *(unsigned char *)(a1 + 208) = 1;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8truncateEv(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(*(void *)(a1 + 96));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    int v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 144);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 152);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

BOOL _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6unlinkEv(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  int v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 96);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v15 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  BOOL v10 = vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(v6 + 32));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v10;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE7subvertEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    BOOL v10 = __si_assert_copy_extra_329();
    int v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 152);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  int v7 = *(std::__shared_weak_count **)(a2 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 176))(v6, v9);
  vi_onefixedsize_disk_allocator::subvert(*(void *)(*(void *)(a2 + 96) + 32), *(void *)(*(void *)(a1 + 96) + 32));
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14compactForTestEP22AnyVectorIndexInstancePVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    unint64_t v15 = "";
    if (v13) {
      unint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  int v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(a1 + 48, a2 + 48, a3);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    uint64_t v16 = __si_assert_copy_extra_329();
    int v17 = v16;
    __int16 v18 = "";
    if (v16) {
      __int16 v18 = v16;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2712, "target->nVectors() == 0", v18);
    free(v17);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = operator new(8uLL);
  v31[0] = v6;
  *int v6 = a1;
  v31[1] = v6 + 1;
  v31[2] = v6 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v31);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v8 = *(void *)(a1 + 80);
  int v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  int v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v30[0] = v8;
  v30[1] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEE(a2, v30);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEE(a2, v30);
  }
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  long long v27 = 0u;
  uint64_t v25 = v10;
  __int16 v26 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(std::__shared_weak_count **)(a1 + 56);
  v24[0] = v11;
  v24[1] = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
  }
  char v13 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  __int16 v20 = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  int v21 = &__block_descriptor_tmp_685;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v34 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v32, (uint64_t)&v27);
    long long v35 = v32;
    long long v36 = v33;
    if (!(void)v33) {
      break;
    }
    v20((uint64_t)v19, (unsigned int *)&v35, (BOOL *)&v34);
  }
  while (!v34);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v29);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  unint64_t v15 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v31[0]) {
    operator delete(v31[0]);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(const void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v7 = v5 - *(void *)a3;
  if (v5 == *(void *)a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      goto LABEL_197;
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a3);
    size_t v9 = v7;
    uint64_t v7 = (uint64_t)&v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v9);
  }
  uint64_t v144 = 0;
  int v145 = 0;
  _ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi(&v144, a1, 0);
  uint64_t v10 = v7 - (void)v8;
  if ((char *)v7 == v8)
  {
    int v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF9) {
      goto LABEL_197;
    }
    uint64_t v11 = (std::__shared_weak_count **)operator new(2 * v10);
    bzero(v11, 2 * v10);
    int v12 = (std::__shared_weak_count **)((char *)v11 + 2 * v10);
  }
  uint64_t v110 = a1;
  size_t __sz = v7 - (void)v8;
  unsigned int v114 = ((uint64_t (*)(std::__shared_weak_count *))v144->__get_deleter)(v144);
  int v108 = (char *)v7;
  unint64_t v109 = v10 >> 3;
  uint64_t v111 = a2;
  CFAbsoluteTime v112 = v11;
  std::string __p = v8;
  if ((char *)v7 != v8)
  {
    if ((unint64_t)(v10 >> 3) <= 1) {
      unint64_t v13 = 1;
    }
    else {
      unint64_t v13 = v10 >> 3;
    }
    uint64_t v14 = v11 + 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v8 + 16))(keyExistsAndHasValidFormat);
      unint64_t v15 = v144;
      int v17 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      uint64_t v16 = v122;
      if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v17 == v15) {
          goto LABEL_16;
        }
      }
      else if (v17 == v15)
      {
        goto LABEL_16;
      }
      *(void *)keyExistsAndHasValidFormat = 0;
      uint64_t v122 = 0;
      uint64_t v18 = *(void *)v8;
      uint64_t v142 = v144;
      v143 = v145;
      if (v145) {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(Boolean *__return_ptr))(*(void *)v18 + 40))(keyExistsAndHasValidFormat);
      int v19 = v143;
      if (v143)
      {
        if (!atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      __int16 v20 = v122;
      if (v122) {
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v22 = *v14;
      *(v14 - 1) = v21;
      *uint64_t v14 = v20;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        uint64_t v23 = v122;
        if (v122)
        {
LABEL_29:
          if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      else
      {
        uint64_t v23 = v122;
        if (v122) {
          goto LABEL_29;
        }
      }
LABEL_16:
      v14 += 2;
      v8 += 8;
      if (!--v13)
      {
        if (v109 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v10 >> 3;
        }
        uint64_t v25 = __p;
        __int16 v26 = v112 + 1;
        while (1)
        {
          uint64_t v27 = (uint64_t)*(v26 - 1);
          if (v27)
          {
            uint64_t v28 = *(void *)v25;
            v140 = v144;
            uint64_t v141 = v145;
            if (v145) {
              atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v138 = v27;
            long long v139 = *v26;
            if (v139) {
              atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t *))(*(void *)v28 + 48))(v28, &v140, &v138);
            uint64_t v29 = v139;
            if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
              unsigned int v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            else
            {
              unsigned int v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
LABEL_52:
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          int v31 = v122;
          uint64_t v32 = *(unsigned int *)(*(void *)keyExistsAndHasValidFormat + 72);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          long long v33 = v122;
          int v34 = *(_DWORD *)(*(void *)keyExistsAndHasValidFormat + 68);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          if (v34 != v114)
          {
            float v91 = __si_assert_copy_extra_329();
            float v92 = v91;
            BOOL v93 = "";
            if (v91) {
              BOOL v93 = v91;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2199, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v93);
LABEL_185:
            free(v92);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v13 += v32;
          v25 += 8;
          v26 += 2;
          if (!--v24) {
            goto LABEL_62;
          }
        }
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
    __int16 v20 = v122;
    if (!v122) {
      goto LABEL_26;
    }
LABEL_25:
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_26;
  }
  unint64_t v13 = 0;
LABEL_62:
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v36 = AppIntegerValue;
  }
  else {
    unsigned int v36 = 45;
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v37 = CFPreferencesGetAppIntegerValue(@"IVFTrainingTimeBudget", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    double v38 = (double)v37;
  }
  else {
    double v38 = 30.0;
  }
  unint64_t v40 = v111;
  float v39 = v112;
  int8x8_t v41 = __p;
  if (v13 >> 4 < 0x271 || v13 < v36 * (unint64_t)v114 * v36 * (unint64_t)v114 / 0x64)
  {
LABEL_87:
    if (!v112) {
      goto LABEL_95;
    }
    goto LABEL_88;
  }
  unsigned __int8 v42 = atomic_exchange((atomic_uchar *volatile)(v110 + 72), 1u);
  if ((v42 & 1) == 0 && *(void *)(v110 + 96))
  {
    float v94 = __si_assert_copy_extra_329();
    float v95 = v94;
    BOOL v96 = "";
    if (v94) {
      BOOL v96 = v94;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 737, "_trainingQuantizer == nullptr", v96);
    free(v95);
    if (__valid_fs(-1)) {
      uint64_t v97 = 2989;
    }
    else {
      uint64_t v97 = 3072;
    }
    *(_DWORD *)uint64_t v97 = -559038737;
    goto LABEL_197;
  }
  FdPtrForFile = (atomic_uint *)QuantizerManager<float,768>::createFdPtrForFile(v110, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, (unsigned __int8 *)(v110 + 72));
    goto LABEL_84;
  }
  int v44 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v44);
  if (v42)
  {
LABEL_84:
    int v56 = *__error();
    __int16 v57 = _SILogForLogForCategory(16);
    os_log_type_t v58 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v57, v58))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1BD672000, v57, v58, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v56;
    goto LABEL_87;
  }
  unsigned int v106 = v36;
  uint64_t v45 = _SILogForLogForCategory(0);
  os_signpost_id_t v46 = os_signpost_id_make_with_pointer(v45, 0);
  uint64_t v47 = _SILogForLogForCategory(0);
  unint64_t v101 = v46 - 1;
  if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    float v48 = v47;
    if (os_signpost_enabled(v47))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v48, OS_SIGNPOST_INTERVAL_BEGIN, v46, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  os_signpost_id_t spid = v46;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  uint64_t v127 = 0;
  long long v126 = 0u;
  long long v125 = 0u;
  memset(v124, 0, sizeof(v124));
  uint64_t v122 = 0;
  uint64_t v105 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v103 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v128 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v102 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v123 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v49 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v50 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)keyExistsAndHasValidFormat = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v50;
  uint64_t v122 = 0;
  unint64_t v51 = (std::ios_base *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v51, v124);
  v51[1].__vftable = 0;
  v51[1].__fmtflags_ = -1;
  uint64_t v52 = v49[5];
  uint64_t v123 = v49[4];
  *(void *)((char *)&v124[-1] + *(void *)(v123 - 24)) = v52;
  *(void *)keyExistsAndHasValidFormat = v49[1];
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v49[6];
  uint64_t v128 = v103;
  *(void *)keyExistsAndHasValidFormat = v105;
  uint64_t v123 = v102;
  std::streambuf::basic_streambuf();
  uint64_t v104 = MEMORY[0x1E4FBA470] + 16;
  v124[0] = MEMORY[0x1E4FBA470] + 16;
  long long v125 = 0u;
  long long v126 = 0u;
  LODWORD(v127) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"[", 1);
  unint64_t v40 = v111;
  if (v108 != __p)
  {
    float v53 = __p;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v53 + 24))(block);
      double v54 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
      uint64_t v55 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      v53 += 8;
    }
    while (v53 != v108);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"]", 1);
  int v61 = *__error();
  uint64_t v62 = _SILogForLogForCategory(16);
  os_log_type_t v63 = 2 * (dword_1E9FC90E4 < 4);
  int8x8_t v41 = __p;
  if (os_log_type_enabled(v62, v63))
  {
    std::stringbuf::str();
    uint64_t v64 = v149[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v64;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v114;
    _os_log_impl(&dword_1BD672000, v62, v63, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v149[7] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  *__error() = v61;
  double Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v38)
  {
    int v68 = 0;
LABEL_147:
    float v39 = v112;
    uint64_t v66 = v110;
    goto LABEL_149;
  }
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
  uint64_t v66 = v110;
  uint64_t v119 = v110;
  double v120 = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(buf, 0, 24);
  if (v108 != __p)
  {
    if ((__sz & 0x8000000000000000) == 0)
    {
      unint64_t v67 = (char *)operator new(__sz);
      *(void *)std::string buf = v67;
      *(void *)&buf[16] = &v67[8 * v109];
      int8x8_t v41 = __p;
      memcpy(v67, __p, __sz);
      *(void *)&uint8_t buf[8] = &v67[8 * v109];
      uint64_t v66 = v110;
      goto LABEL_118;
    }
LABEL_197:
    abort();
  }
  unint64_t v67 = 0;
LABEL_118:
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
  int v69 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v119, (uint64_t *)buf);
  if (v67)
  {
    *(void *)&uint8_t buf[8] = v67;
    operator delete(v67);
  }
  if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  float v39 = v112;
  if (v69)
  {
    _ZN16QuantizerManagerIDF16_Li768EE20lastTrainedQuantizerEv(block, v66);
    unsigned int v70 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
    unsigned __int8 v71 = (std::__shared_weak_count *)v148;
    if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    if (v13 < v36 * (unint64_t)v70 * v36 * (unint64_t)v70 / 0x64)
    {
      int v68 = 1;
LABEL_129:
      unsigned int v72 = v68;
      unint64_t v40 = v111;
      while (1)
      {
        int v68 = v72;
        if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
          goto LABEL_146;
        }
        v118[0] = v110;
        v118[1] = (uint64_t)v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __int16 v115 = 0;
        float v116 = 0;
        __int16 v117 = 0;
        if (v108 != __p) {
          break;
        }
        int v74 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v118, (uint64_t *)&v115);
        if (v40) {
          goto LABEL_138;
        }
LABEL_140:
        if (v74)
        {
          ++v72;
          block[0] = 0;
          int v75 = CFPreferencesGetAppIntegerValue(@"IVFMaxTrainingIteration", @"com.apple.Spotlight", block);
          unsigned int v76 = block[0] ? v75 : 3;
          if (v72 <= v76) {
            continue;
          }
        }
        ++v68;
        goto LABEL_146;
      }
      if ((__sz & 0x8000000000000000) != 0) {
        goto LABEL_197;
      }
      float16x8_t v73 = (char *)operator new(__sz);
      __int16 v115 = v73;
      __int16 v117 = &v73[8 * v109];
      memcpy(v73, __p, __sz);
      float v116 = &v73[8 * v109];
      int v74 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v118, (uint64_t *)&v115);
      float v116 = v73;
      operator delete(v73);
      unint64_t v40 = v111;
      if (!v111) {
        goto LABEL_140;
      }
LABEL_138:
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      goto LABEL_140;
    }
    int v68 = 1;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
        goto LABEL_129;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
      uint64_t v119 = v110;
      double v120 = v111;
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(buf, 0, 24);
      if (v108 == __p)
      {
        int v87 = 0;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_197;
        }
        int v87 = (char *)operator new(__sz);
        *(void *)std::string buf = v87;
        *(void *)&buf[16] = &v87[8 * v109];
        memcpy(v87, __p, __sz);
        *(void *)&uint8_t buf[8] = &v87[8 * v109];
        unsigned int v36 = v106;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
      int v88 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v119, (uint64_t *)buf);
      if (v87)
      {
        *(void *)&uint8_t buf[8] = v87;
        operator delete(v87);
      }
      unint64_t v40 = v111;
      if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      ++v68;
      if (!v88) {
        break;
      }
      _ZN16QuantizerManagerIDF16_Li768EE20lastTrainedQuantizerEv(block, v110);
      unsigned int v89 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
      float v90 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      if (v13 < v36 * (unint64_t)v89 * v36 * (unint64_t)v89 / 0x64) {
        goto LABEL_129;
      }
    }
LABEL_146:
    int8x8_t v41 = __p;
    goto LABEL_147;
  }
  int v68 = 1;
LABEL_149:
  unsigned __int8 v77 = atomic_load((unsigned __int8 *)(v66 + 72));
  if ((v77 & 1) == 0)
  {
    unint64_t v98 = __si_assert_copy_extra_329();
    float v92 = v98;
    float v99 = "";
    if (v98) {
      float v99 = v98;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 814, "_training.test()", v99);
    goto LABEL_185;
  }
  if (*(void *)(v66 + 96))
  {
    int v78 = *(NSObject **)(v66 + 16);
    *(void *)block = MEMORY[0x1E4F143A8];
    uint64_t v148 = 0x40000000;
    *(void *)int v149 = ___ZN16QuantizerManagerIDF16_Li768EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v149[8] = &__block_descriptor_tmp_708_6952;
    *(void *)&v149[16] = v66;
    dispatch_sync(v78, block);
  }
  atomic_store(0, (unsigned __int8 *)(v66 + 72));
  _ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi(block, v66, 0);
  unsigned int v79 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
  uint64_t v80 = (std::__shared_weak_count *)v148;
  if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  uint64_t v81 = _SILogForLogForCategory(0);
  if (v101 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    float v82 = v81;
    if (os_signpost_enabled(v81))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v82, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  int v83 = *__error();
  uint64_t v84 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v85 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v13;
    LOWORD(v148) = 1024;
    *(_DWORD *)((char *)&v148 + 2) = v79;
    HIWORD(v148) = 1024;
    *(_DWORD *)int v149 = v13 / v79;
    *(_WORD *)&v149[4] = 1024;
    *(_DWORD *)&v149[6] = v68;
    *(_WORD *)&v149[10] = 2048;
    *(double *)&v149[12] = v85 - Current;
    _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v83;
  *(void *)keyExistsAndHasValidFormat = *MEMORY[0x1E4FBA408];
  uint64_t v86 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v123 = v86;
  v124[0] = v104;
  if (SBYTE7(v126) < 0) {
    operator delete((void *)v125);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1880F90](&v128);
  if (v39)
  {
LABEL_88:
    while (v12 != v39)
    {
      uint64_t v59 = *(v12 - 1);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v12 -= 2;
    }
    operator delete(v39);
  }
LABEL_95:
  int v60 = v145;
  if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v41) {
    operator delete(v41);
  }
  if (v40)
  {
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

unsigned int *___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  uint64_t v5 = **((void **)a2 + 3);
  uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(*(void *)(a1 + 32), a2[2], *((void **)a2 + 2), *a2, 0, *((float *)a2 + 1));
  *((void *)result + 192) = v5;
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a2 + 64));
    *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (*(void *)(a2 + 72))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(a2 + 64));
        int v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        if (v6) {
          break;
        }
        uint64_t v7 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a2 + 40)
                                                      + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(a2 + 64)
                                          + 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(void *)(a2 + 72) - 1;
        unint64_t v9 = *(void *)(a2 + 64) + 1;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v8;
        if (v9 >= 0x200)
        {
          operator delete(**(void ***)(a2 + 40));
          *(void *)(a2 + 40) += 8;
          uint64_t v8 = *(void *)(a2 + 72);
          unint64_t v9 = *(void *)(a2 + 64) - 256;
          *(void *)(a2 + 64) = v9;
        }
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v9);
          *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          if (*(void *)(a2 + 72)) {
            continue;
          }
        }
        return;
      }
      *(_DWORD *)(a1 + 4) = v6[1];
      uint64_t v11 = *v6;
      int v12 = *(void **)(*(void *)(a2 + 16) + 32);
      unint64_t v13 = v12[3] + v12[2] * v11;
      bit_vector_set_10635(v12 + 525, (v13 >> 20));
      unint64_t v14 = (v13 + 1552) >> 20;
      if (v14 > (v13 >> 20))
      {
        unsigned int v15 = (v13 >> 20) + 1;
        do
        {
          unint64_t v16 = v15;
          bit_vector_set_10635(v12 + 525, v15++);
        }
        while (v14 > v16);
      }
      unint64_t v17 = _windowsResolvePtr((uint64_t)(v12 + 5), v12[3] + v12[2] * v11, 1552);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(v17 + 1544);
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v17 + 1536;
    }
  }
}

unsigned int *_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  unsigned int v123 = a4;
  float v122 = a6;
  if (*(unsigned char *)(a1 + 160))
  {
    BOOL v96 = __si_assert_copy_extra_329();
    uint64_t v97 = v96;
    unint64_t v98 = "";
    if (v96) {
      unint64_t v98 = v96;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v98);
    goto LABEL_127;
  }
  if (!a2)
  {
    float v99 = __si_assert_copy_extra_329();
    uint64_t v97 = v99;
    float v100 = "";
    if (v99) {
      float v100 = v99;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v100);
    goto LABEL_127;
  }
  if (a5)
  {
    uint64_t v9 = a4;
    if (a4 == -1) {
      goto LABEL_114;
    }
    goto LABEL_32;
  }
  unsigned int v10 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(a1, (uint64_t)a3, (int *)&v123, &v122, a2);
  uint64_t v9 = v123;
  if (v123 == -1)
  {
LABEL_114:
    unint64_t v101 = __si_assert_copy_extra_329();
    uint64_t v102 = v101;
    uint64_t v103 = "";
    if (v101) {
      uint64_t v103 = v101;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v103);
    goto LABEL_117;
  }
  if (v10 == -1)
  {
LABEL_32:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 88);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v120 = a2;
    unsigned int v30 = *(std::__shared_weak_count **)(a1 + 104);
    uint64_t v118 = *(_DWORD **)(a1 + 96);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v116 = v30;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v32 = *(void **)(v31 + 32);
    uint64_t v115 = (uint64_t)(v32 + 1);
    unint64_t v33 = v32[2];
    uint64_t v34 = v32[7];
    uint64_t v35 = v34 + v33;
    __int16 v117 = v29;
    if (v34 + v33 >= v32[6])
    {
      if (!_storage_array_Expand(v115))
      {
        unint64_t v40 = 0;
        goto LABEL_41;
      }
      uint64_t v34 = v32[7];
      uint64_t v35 = v34 + v33;
    }
    v32[7] = v35;
    unint64_t v36 = v32[3];
    bit_vector_set_10635(v32 + 525, 0);
    if (v36 >= 0x100000)
    {
      unint64_t v37 = v36 >> 20;
      unsigned int v38 = 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v32 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = (v34 - v32[3]) / v33;
LABEL_41:
    unint64_t v41 = v32[2];
    if (v33 <= 0x60F && v41 <= 0x60F)
    {
      LODWORD(v42) = 1552;
      while (1)
      {
        unint64_t v43 = v32[7] + v41;
        if (v43 < v32[6]) {
          goto LABEL_46;
        }
        if (_storage_array_Expand(v115)) {
          break;
        }
LABEL_44:
        unint64_t v41 = v32[2];
        unint64_t v42 = (v42 - v41);
        if (v41 >= v42) {
          goto LABEL_52;
        }
      }
      unint64_t v43 = v32[7] + v41;
LABEL_46:
      v32[7] = v43;
      unint64_t v44 = v32[3];
      bit_vector_set_10635(v32 + 525, 0);
      if (v44 >= 0x100000)
      {
        unint64_t v45 = v44 >> 20;
        unsigned int v46 = 1;
        do
        {
          unint64_t v47 = v46;
          bit_vector_set_10635(v32 + 525, v46++);
        }
        while (v45 > v47);
      }
      goto LABEL_44;
    }
LABEL_52:
    unint64_t v48 = v32[3] + v41 * v40;
    uint64_t v49 = v32 + 525;
    bit_vector_set_10635(v49, (v48 >> 20));
    unint64_t v50 = (v48 + 1552) >> 20;
    if (v50 > (v48 >> 20))
    {
      unsigned int v51 = (v48 >> 20) + 1;
      do
      {
        unint64_t v52 = v51;
        bit_vector_set_10635(v49, v51++);
      }
      while (v50 > v52);
    }
    uint64_t v53 = *(unsigned int *)(v31 + 40);
    unint64_t v54 = v40;
    if (v40 != v53)
    {
      int v55 = *__error();
      int v56 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        int v93 = *(_DWORD *)(v31 + 40);
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "newEntry";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 1882;
        *(_WORD *)&v128[4] = 2048;
        *(void *)&v128[6] = v40;
        *(_WORD *)&v128[14] = 1024;
        *(_DWORD *)&v128[16] = v93;
        _os_log_error_impl(&dword_1BD672000, v56, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v55;
      __int16 v57 = *(void **)(v31 + 32);
      int v58 = *__error();
      uint64_t v59 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = v57[6];
        uint64_t v61 = v57[7];
        uint64_t v63 = v57[2];
        uint64_t v62 = v57[3];
        *(_DWORD *)std::string __p = 134219008;
        *(void *)&__p[4] = v57;
        __int16 v127 = 2048;
        *(void *)uint64_t v128 = v60;
        *(_WORD *)&void v128[8] = 2048;
        *(void *)&v128[10] = v61;
        *(_WORD *)&v128[18] = 2048;
        *(void *)long long v129 = v62;
        *(_WORD *)&v129[8] = 2048;
        uint64_t v130 = v63;
        _os_log_impl(&dword_1BD672000, v59, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v58;
      unint64_t v54 = *(unsigned int *)(v31 + 40);
      LODWORD(v53) = *(_DWORD *)(v31 + 40);
    }
    if (v40 == v54)
    {
      *(_DWORD *)(v31 + 40) = v53 + 1;
      uint64_t v64 = *(void **)(v31 + 32);
      unint64_t v65 = v64[3] + v64[2] * v40;
      bit_vector_set_10635(v64 + 525, (v65 >> 20));
      unint64_t v66 = (v65 + 1552) >> 20;
      if (v66 > (v65 >> 20))
      {
        unsigned int v67 = (v65 >> 20) + 1;
        do
        {
          unint64_t v68 = v67;
          bit_vector_set_10635(v64 + 525, v67++);
        }
        while (v66 > v68);
      }
      unint64_t v69 = _windowsResolvePtr((uint64_t)(v64 + 5), v64[3] + v64[2] * v40, 1552);
      memcpy((void *)v69, __src, 0x600uLL);
      *(void *)(v69 + 1536) = 0;
      *(_DWORD *)(v69 + 1544) = v120;
      if (*(_DWORD *)(v31 + 40) == 1) {
        *(_DWORD *)(v31 + 52) = v120;
      }
      *(_DWORD *)(v31 + 56) = v120;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(void *)v118 + 56))(v118, v9, v40, v122);
      uint64_t v70 = *(void *)(a1 + 48);
      if (v118[18] == *(_DWORD *)(v70 + 40))
      {
        unsigned __int8 v71 = *(void **)(v70 + 32);
        unint64_t v72 = v71[3] + v71[2] * v40;
        bit_vector_set_10635(v71 + 525, (v72 >> 20));
        unint64_t v73 = (v72 + 1552) >> 20;
        if (v73 > (v72 >> 20))
        {
          unsigned int v74 = (v72 >> 20) + 1;
          do
          {
            unint64_t v75 = v74;
            bit_vector_set_10635(v71 + 525, v74++);
          }
          while (v73 > v75);
        }
        unint64_t v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v71 + 5), v71[3] + v71[2] * v40, 1552);
        data_map_set_offset_for_id(*(void *)(a1 + 144), v120, (16 * v40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4* (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
        return v17;
      }
      int v107 = __si_assert_copy_extra_329();
      uint64_t v97 = v107;
      int v108 = "";
      if (v107) {
        int v108 = v107;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v108);
    }
    else
    {
      uint64_t v105 = __si_assert_copy_extra_329();
      uint64_t v97 = v105;
      unsigned int v106 = "";
      if (v105) {
        unsigned int v106 = v105;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v106);
    }
LABEL_127:
    free(v97);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v12 = v10;
  unint64_t v13 = v11[3] + v11[2] * v10;
  bit_vector_set_10635(v11 + 525, (v13 >> 20));
  unint64_t v14 = (v13 + 1552) >> 20;
  if (v14 > (v13 >> 20))
  {
    unsigned int v15 = (v13 >> 20) + 1;
    do
    {
      unint64_t v16 = v15;
      bit_vector_set_10635(v11 + 525, v15++);
    }
    while (v14 > v16);
  }
  unint64_t v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v11 + 5), v11[3] + v11[2] * v12, 1552);
  if (v17[386] != a2)
  {
    uint64_t v121 = 0;
    data = (const void *)data_map_get_data(*(void *)(a1 + 144), a2, &v121);
    int v19 = *__error();
    __int16 v20 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v127 = 1024;
      *(_DWORD *)uint64_t v128 = 2586;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = a2;
      *(_WORD *)&v128[10] = 2048;
      *(void *)&v128[12] = data;
      *(_WORD *)long long v129 = 2048;
      *(void *)&v129[2] = v121;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v19;
    if (v121 < 1)
    {
      int v26 = *__error();
      unsigned int v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2595;
        _os_log_error_impl(&dword_1BD672000, v76, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v121 != 1536)
      {
        uint64_t v111 = __si_assert_copy_extra_329();
        uint64_t v97 = v111;
        CFAbsoluteTime v112 = "";
        if (v111) {
          CFAbsoluteTime v112 = v111;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v112);
        goto LABEL_127;
      }
      if (!data || !memcmp(data, a3, 0x600uLL))
      {
LABEL_80:
        unsigned __int8 v77 = (const void *)data_map_get_data(*(void *)(a1 + 144), v17[386], &v121);
        int v78 = *__error();
        unsigned int v79 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          unsigned int v94 = v17[386];
          *(_DWORD *)std::string __p = 136316162;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2598;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = v94;
          *(_WORD *)&v128[10] = 2048;
          *(void *)&v128[12] = v77;
          *(_WORD *)long long v129 = 2048;
          *(void *)&v129[2] = v121;
          _os_log_error_impl(&dword_1BD672000, v79, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v78;
        if (v121 < 1)
        {
          int v86 = *__error();
          unsigned int v89 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2607;
            _os_log_error_impl(&dword_1BD672000, v89, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v121 != 1536)
          {
            __int16 v113 = __si_assert_copy_extra_329();
            uint64_t v97 = v113;
            unsigned int v114 = "";
            if (v113) {
              unsigned int v114 = v113;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v114);
            goto LABEL_127;
          }
          size_t v80 = 1536;
          if (!v77 || !memcmp(v77, v17, 0x600uLL)) {
            goto LABEL_103;
          }
          int v81 = *__error();
          float v82 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2602;
            _os_log_error_impl(&dword_1BD672000, v82, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v81;
          int v83 = *__error();
          uint64_t v84 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v77, v121);
            CFAbsoluteTime v85 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v85;
            _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          *__error() = v83;
          int v86 = *__error();
          int v87 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v17, v121);
            int v88 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v88;
            _os_log_impl(&dword_1BD672000, v87, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        *__error() = v86;
        size_t v80 = v121;
LABEL_103:
        if (memcmp(a3, v17, v80))
        {
          unint64_t v109 = __si_assert_copy_extra_329();
          uint64_t v102 = v109;
          uint64_t v110 = "";
          if (v109) {
            uint64_t v110 = v109;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v110);
LABEL_117:
          free(v102);
          if (__valid_fs(-1)) {
            uint64_t v104 = 2989;
          }
          else {
            uint64_t v104 = 3072;
          }
          *(_DWORD *)uint64_t v104 = -559038737;
          abort();
        }
        int v90 = *__error();
        float v91 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
        {
          unsigned int v95 = v17[386];
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2610;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = a2;
          *(_WORD *)&v128[10] = 1024;
          *(_DWORD *)&v128[12] = v95;
          _os_log_fault_impl(&dword_1BD672000, v91, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v90;
        return v17;
      }
      int v21 = *__error();
      uint64_t v22 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2590;
        _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v21;
      int v23 = *__error();
      uint64_t v24 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v121);
        uint64_t v25 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v25;
        _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v23;
      int v26 = *__error();
      uint64_t v27 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v121);
        uint64_t v28 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v28;
        _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v26;
    goto LABEL_80;
  }
  return v17;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  unsigned int v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *(_DWORD **)(a1 + 96);
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      unint64_t v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          int v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          uint64_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      int v23 = __si_assert_copy_extra_329();
      int v21 = v23;
      uint64_t v24 = "";
      if (v23) {
        uint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      __int16 v20 = __si_assert_copy_extra_329();
      int v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  uint64_t v34 = 0;
  uint64_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj_block_invoke;
  v32[3] = &unk_1E63451F0;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156)) {
    goto LABEL_18;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (!v11 && v12 > v13) {
    return result;
  }
  int v15 = *(_DWORD *)(result + 64);
  if (v15)
  {
    unint64_t v16 = *(void **)(*(void *)(v5 + 48) + 32);
    unint64_t v17 = v16[3] + v16[2] * v6;
    bit_vector_set_10635(v16 + 525, (v17 >> 20));
    unint64_t v18 = (v17 + 1552) >> 20;
    if (v18 > (v17 >> 20))
    {
      unsigned int v19 = (v17 >> 20) + 1;
      do
      {
        unint64_t v20 = v19;
        bit_vector_set_10635(v16 + 525, v19++);
      }
      while (v18 > v20);
    }
    uint64_t result = _windowsResolvePtr((uint64_t)(v16 + 5), v16[3] + v16[2] * v6, 1552);
    uint64_t v4 = a4;
    if (v15 != *(_DWORD *)(result + 1544)) {
      return result;
    }
    *(float *)&uint64_t v6 = *a3;
  }
  int v21 = *(const void **)(v8 + 56);
  uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 32);
  unint64_t v23 = v22[3] + v22[2] * v6;
  bit_vector_set_10635(v22 + 525, (v23 >> 20));
  unint64_t v24 = (v23 + 1552) >> 20;
  if (v24 > (v23 >> 20))
  {
    unsigned int v25 = (v23 >> 20) + 1;
    do
    {
      unint64_t v26 = v25;
      bit_vector_set_10635(v22 + 525, v25++);
    }
    while (v24 > v26);
  }
  uint64_t v27 = (const void *)_windowsResolvePtr((uint64_t)(v22 + 5), v22[3] + v22[2] * v6, 1552);
  uint64_t result = memcmp(v21, v27, 0x600uLL);
  if (!result)
  {
    *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_18:
    unsigned char *v4 = 1;
  }
  return result;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(uint64_t *a1, uint64_t *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CFAbsoluteTimeGetCurrent();
  uint64_t v56 = 0;
  __int16 v57 = 0;
  _ZN16QuantizerManagerIDF16_Li768EE20lastTrainedQuantizerEv(&v56, *a1);
  uint64_t v50 = *a2;
  uint64_t v51 = a2[1];
  uint64_t v4 = v51 - *a2;
  if (v51 == *a2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (v4 < 0) {
      goto LABEL_86;
    }
    uint64_t v5 = operator new((unint64_t)v4 >> 1);
    bzero(v5, (unint64_t)v4 >> 1);
  }
  unint64_t v49 = v4 >> 3;
  int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
  if (v51 != v50)
  {
    uint64_t v6 = 0;
    if (v49 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v49;
    }
    while (1)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 16))(v59);
      uint64_t v8 = v56;
      uint64_t v10 = *(void *)v59;
      float v9 = *(std::__shared_weak_count **)&v59[8];
      if (*(void *)&v59[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v59[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10 != v8) {
        break;
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 24))(v59);
      BOOL v11 = *(std::__shared_weak_count **)&v59[8];
      *((_DWORD *)v5 + v6) = *(_DWORD *)(*(void *)v59 + 72);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 24))(v59);
      float v12 = *(std::__shared_weak_count **)&v59[8];
      int v13 = *(_DWORD *)(*(void *)v59 + 68);
      if (*(void *)&v59[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v59[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v13 != v52)
      {
        unint64_t v43 = __si_assert_copy_extra_329();
        unint64_t v44 = v43;
        unint64_t v45 = "";
        if (v43) {
          unint64_t v45 = v43;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2086, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v45);
        free(v44);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 == ++v6) {
        goto LABEL_21;
      }
    }
    unint64_t v39 = __si_assert_copy_extra_329();
    unint64_t v40 = v39;
    unint64_t v41 = "";
    if (v39) {
      unint64_t v41 = v39;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2084, "vectorIndexes[i]->getQuantizer() == quantizer", v41);
LABEL_73:
    free(v40);
    if (__valid_fs(-1)) {
      uint64_t v42 = 2989;
    }
    else {
      uint64_t v42 = 3072;
    }
    *(_DWORD *)uint64_t v42 = -559038737;
    abort();
  }
LABEL_21:
  uint64_t v14 = *a1;
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v14 + 72));
  if ((v15 & 1) == 0)
  {
    unint64_t v47 = __si_assert_copy_extra_329();
    unint64_t v40 = v47;
    unint64_t v48 = "";
    if (v47) {
      unint64_t v48 = v47;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 772, "_training.test()", v48);
    goto LABEL_73;
  }
  if (*(void *)(v14 + 96))
  {
    unint64_t v16 = *(NSObject **)(v14 + 16);
    *(void *)uint64_t v59 = MEMORY[0x1E4F143A8];
    *(void *)&v59[8] = 0x40000000;
    *(void *)&v59[16] = ___ZN16QuantizerManagerIDF16_Li768EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v59[24] = &__block_descriptor_tmp_708_6952;
    *(void *)&v59[32] = v14;
    dispatch_sync(v16, v59);
  }
  uint64_t v17 = *(void *)(v14 + 80);
  if (v17) {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17) + 1;
  }
  else {
    int v18 = 1;
  }
  int v19 = *(char *)(v14 + 71);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v14 + 71);
  }
  else {
    size_t v20 = *(void *)(v14 + 56);
  }
  unint64_t v21 = v20 + 1;
  if (v20 + 1 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_86:
  }
    abort();
  if (v21 >= 0x17)
  {
    uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v23 = v21 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = (std::string *)operator new(v23 + 1);
    v53[0].__r_.__value_.__l.__size_ = v20 + 1;
    v53[0].__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    v53[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  }
  else
  {
    memset(v53, 0, 24);
    uint64_t v22 = v53;
    *((unsigned char *)&v53[0].__r_.__value_.__s + 23) = v20 + 1;
    if (!v20) {
      goto LABEL_41;
    }
  }
  if (v19 >= 0) {
    unsigned int v25 = (const void *)(v14 + 48);
  }
  else {
    unsigned int v25 = *(const void **)(v14 + 48);
  }
  memmove(v22, v25, v20);
LABEL_41:
  *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v20) = 46;
  std::to_string(&v58, v18);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v26 = &v58;
  }
  else {
    unint64_t v26 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  int v28 = std::string::append(v53, (const std::string::value_type *)v26, size);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v59 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v59[16] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int v30 = std::string::append((std::string *)v59, ".quantizer");
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  long long v54 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  uint64_t v55 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((v59[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_56:
    operator delete(v58.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_57;
  }
  operator delete(*(void **)v59);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_56;
  }
LABEL_49:
  if ((SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_50;
  }
LABEL_57:
  operator delete(v53[0].__r_.__value_.__l.__data_);
LABEL_50:
  if (v55 >= 0) {
    uint64_t v32 = (const char *)&v54;
  }
  else {
    uint64_t v32 = (const char *)v54;
  }
  if (QuantizerManager<float,768>::createFdPtrForFile(v14, v32)) {
    operator new();
  }
  int v33 = *__error();
  uint64_t v34 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
  {
    int v37 = &v54;
    if (v55 < 0) {
      int v37 = (long long *)v54;
    }
    int v38 = *(_DWORD *)v14;
    *(_DWORD *)uint64_t v59 = 136315906;
    *(void *)&v59[4] = "newQuantizer";
    *(_WORD *)&v59[12] = 1024;
    *(_DWORD *)&v59[14] = 792;
    *(_WORD *)&v59[18] = 2080;
    *(void *)&v59[20] = v37;
    *(_WORD *)&v59[28] = 1024;
    *(_DWORD *)&v59[30] = v38;
    _os_log_fault_impl(&dword_1BD672000, v34, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", v59, 0x22u);
  }
  *__error() = v33;
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  if (v5) {
    operator delete(v5);
  }
  uint64_t v35 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return 0;
}

void *_ZN16QuantizerManagerIDF16_Li768EE20lastTrainedQuantizerEv(void *result, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    uint64_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    uint64_t v8 = "";
    if (v6) {
      uint64_t v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 750, "_training.test()", v8);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v3 = *(void *)(a2 + 96);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 104);
    unsigned int *result = v3;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5)
  {
    uint64_t v4 = *(void *)(a2 + 88);
    unsigned int *result = v5;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken != -1)
  {
    float v9 = result;
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken, &__block_literal_global_614);
    uint64_t result = v9;
  }
  uint64_t v4 = *(void *)(_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq + 8);
  unsigned int *result = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq;
  result[1] = v4;
  if (v4) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  return result;
}

void ___ZN16QuantizerManagerIDF16_Li768EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 80);
  if (!v2) {
    goto LABEL_103;
  }
  int v3 = *(char *)(v1 + 71);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v4 = *(void *)(v1 + 56);
  }
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_138:
  }
    abort();
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_16;
    }
  }
  if (v3 >= 0) {
    float v9 = (const void *)(v1 + 48);
  }
  else {
    float v9 = *(const void **)(v1 + 48);
  }
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v15 = std::string::append(&v72, ".quantizer");
  int64_t v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v73 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v74 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_34:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_34;
  }
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_35:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  uint64_t v17 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    int v18 = v73;
  }
  else {
    int v18 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1C1880BF0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(void *)(v1 + 80) + 57));
  uint64_t v20 = *(void *)(v1 + 80);
  int v19 = *(std::__shared_weak_count **)(v1 + 88);
  uint64_t v21 = v20;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(void *)(v1 + 80);
  }
  uint64_t v22 = (uint64_t *)(v1 + 112);
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
  int v24 = v23;
  unint64_t v25 = v23;
  unint64_t v26 = *(void *)(v1 + 120);
  if (v26)
  {
    uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v28 = v23;
      if (v26 <= v23) {
        unint64_t v28 = v23 % v26;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v23;
    }
    std::string::size_type v29 = *(void ***)(*v22 + 8 * v28);
    if (v29)
    {
      int v30 = *v29;
      if (*v29)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v32 = *((void *)v30 + 1);
            if (v32 == v23)
            {
              if (*((_DWORD *)v30 + 4) == v23) {
                goto LABEL_92;
              }
            }
            else if ((v32 & (v26 - 1)) != v28)
            {
              goto LABEL_54;
            }
            int v30 = *(void **)v30;
            if (!v30) {
              goto LABEL_54;
            }
          }
        }
        do
        {
          unint64_t v31 = *((void *)v30 + 1);
          if (v31 == v23)
          {
            if (*((_DWORD *)v30 + 4) == v23) {
              goto LABEL_92;
            }
          }
          else
          {
            if (v31 >= v26) {
              v31 %= v26;
            }
            if (v31 != v28) {
              break;
            }
          }
          int v30 = *(void **)v30;
        }
        while (v30);
      }
    }
  }
  else
  {
    unint64_t v28 = 0;
  }
LABEL_54:
  int v30 = operator new(0x28uLL);
  *(void *)int v30 = 0;
  *((void *)v30 + 1) = v25;
  *((_DWORD *)v30 + 4) = v24;
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = 0;
  float v33 = (float)(unint64_t)(*(void *)(v1 + 136) + 1);
  float v34 = *(float *)(v1 + 144);
  if (!v26 || (float)(v34 * (float)v26) < v33)
  {
    BOOL v35 = 1;
    if (v26 >= 3) {
      BOOL v35 = (v26 & (v26 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v26);
    unint64_t v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v26 = *(void *)(v1 + 120);
    }
    if (prime > v26) {
      goto LABEL_76;
    }
    if (prime < v26)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v26 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < v26) {
LABEL_76:
      }
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    unint64_t v26 = *(void *)(v1 + 120);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v26 <= v25) {
        unint64_t v28 = v25 % v26;
      }
      else {
        unint64_t v28 = v25;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v25;
    }
  }
  uint64_t v42 = *v22;
  unint64_t v43 = *(void **)(*v22 + 8 * v28);
  if (v43)
  {
    *(void *)int v30 = *v43;
LABEL_90:
    *unint64_t v43 = v30;
    goto LABEL_91;
  }
  *(void *)int v30 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = v30;
  *(void *)(v42 + 8 * v28) = v1 + 128;
  if (*(void *)v30)
  {
    unint64_t v44 = *(void *)(*(void *)v30 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v44 >= v26) {
        v44 %= v26;
      }
    }
    else
    {
      v44 &= v26 - 1;
    }
    unint64_t v43 = (void *)(*v22 + 8 * v44);
    goto LABEL_90;
  }
LABEL_91:
  ++*(void *)(v1 + 136);
LABEL_92:
  if (v19)
  {
    unint64_t v45 = std::__shared_weak_count::lock(v19);
    unsigned int v46 = (atomic_ullong *)v45;
    if (!v45)
    {
      uint64_t v20 = 0;
      goto LABEL_98;
    }
    atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v19);
    if (!atomic_fetch_add(v46 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v46 + 16))(v46);
      int v19 = (std::__shared_weak_count *)v46;
LABEL_98:
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    uint64_t v20 = 0;
    unsigned int v46 = 0;
  }
  unint64_t v47 = (std::__shared_weak_count *)*((void *)v30 + 4);
  *((void *)v30 + 3) = v20;
  *((void *)v30 + 4) = v46;
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
LABEL_103:
  int v48 = *(char *)(v1 + 71);
  if (v48 >= 0) {
    size_t v49 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v49 = *(void *)(v1 + 56);
  }
  unint64_t v50 = v49 + 10;
  if (v49 + 10 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_138;
  }
  if (v50 >= 0x17)
  {
    uint64_t v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v52 = v50 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = operator new(v52 + 1);
    v73[1] = (void *)(v49 + 10);
    int64_t v74 = v53 | 0x8000000000000000;
    v73[0] = v51;
  }
  else
  {
    v73[1] = 0;
    int64_t v74 = 0;
    v73[0] = 0;
    uint64_t v51 = v73;
    HIBYTE(v74) = v49 + 10;
    if (!v49) {
      goto LABEL_117;
    }
  }
  if (v48 >= 0) {
    long long v54 = (const void *)(v1 + 48);
  }
  else {
    long long v54 = *(const void **)(v1 + 48);
  }
  memmove(v51, v54, v49);
LABEL_117:
  strcpy((char *)v51 + v49, ".quantizer");
  uint64_t v56 = *(void *)(v1 + 96);
  uint64_t v55 = *(void *)(v1 + 104);
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v57 = *(std::__shared_weak_count **)(v1 + 88);
  *(void *)(v1 + 80) = v56;
  *(void *)(v1 + 88) = v55;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  uint64_t v58 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    uint64_t v59 = v73;
  }
  else {
    uint64_t v59 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v58 + 40) + 40), (const char *)v59);
  MEMORY[0x1C1880BF0](v58 + 8, v59);
  uint64_t v60 = *(void *)(v1 + 80);
  uint64_t v61 = *(unint64_t **)(v60 + 40);
  *uint64_t v61 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v61);
  storage_array_SyncPages(*(void *)(v60 + 40) + 8, *(void *)(v60 + 40) + 4200);
  storage_array_Truncate((uint64_t *)(*(void *)(v60 + 40) + 8));
  uint64_t v62 = *(void *)(v60 + 40);
  fd_make_readonly(*(void *)(v62 + 40));
  uint64_t v63 = *(void *)(v62 + 40);
  if (v63)
  {
    do
    {
      int v64 = fchmodat(*(_DWORD *)(v63 + 44), *(const char **)(v63 + 72), 0x100u, 2048);
      uint64_t v65 = g_prot_error_callback;
      if (v64 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v67 = *(unsigned int *)(v63 + 40);
      unint64_t v68 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v65 + 16))(v65, v67, *v68, 19) & 1) != 0);
  }
  *(unsigned char *)(v60 + 56) = 1;
  unint64_t v69 = *(std::__shared_weak_count **)(v1 + 104);
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  if (!v69 || atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v74) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_134;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if (SHIBYTE(v74) < 0) {
LABEL_134:
  }
    operator delete(v73[0]);
}

float ___ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    memset(__p, 0, 24);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 80))(__p);
    if (*((float *)__p[0] + 1) < a3[1]) {
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p[0];
    }
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  bzero(__p, 0xC00uLL);
  uint64_t v8 = 0;
  float v9 = (float16x4_t *)(v6 + 16);
  do
  {
    float16x8_t v10 = *(float16x8_t *)v9[-2].i8;
    float32x4_t v11 = vcvtq_f32_f16(*v9);
    float32x4_t v12 = vcvt_hight_f32_f16(*(float16x8_t *)v9->i8);
    int v13 = &__p[v8];
    *(float32x4_t *)int v13 = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
    *((float32x4_t *)v13 + 1) = vcvt_hight_f32_f16(v10);
    *((float32x4_t *)v13 + 2) = v11;
    *((float32x4_t *)v13 + 3) = v12;
    v8 += 8;
    v9 += 4;
  }
  while (v8 != 384);
  std::string::size_type v14 = (float *)(v7 + 3076 * a2);
  unsigned __int8 v15 = v14 + 768;
  float v16 = v14[768];
  if (v16 == 0.0)
  {
    memcpy(v14, __p, 0xC00uLL);
  }
  else
  {
    vDSP_vavlin((const float *)__p, 1, v14 + 768, v14, 1, 0x300uLL);
    float v16 = *v15;
  }
  float result = v16 + 1.0;
  *unsigned __int8 v15 = v16 + 1.0;
  return result;
}

void _ZZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1[1] + 8 * a2);
  unint64_t v5 = (std::__shared_weak_count *)a1[3];
  float32x4_t v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v12);
  uint64_t v6 = (void *)(*a1 + 16 * a2);
  uint64_t v8 = v12;
  uint64_t v7 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v9 = (std::__shared_weak_count *)v6[1];
  *uint64_t v6 = v8;
  v6[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    float16x8_t v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    float16x8_t v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li768EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 48) - v2) >> 9) <= a2)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    unint64_t v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 452, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + 1536 * a2;
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li768EE5countEv(uint64_t a1)
{
  return -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 9);
}

void _ZN20ArrayVectorQuantizerIDF16_Li768EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814EC0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN20ArrayVectorQuantizerIDF16_Li768EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814EC0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE7compactEP22AnyVectorIndexInstanceP12uint32_map_tP11TermIdStore18CICompactCallbacksPVi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v10 = *__error();
  float32x4_t v11 = _SILogForLogForCategory(16);
  os_log_type_t v12 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v11, v12))
  {
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v13 = a4;
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v34;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v14;
    a4 = v13;
    HIWORD(v55) = 1024;
    LODWORD(v56) = v15;
    WORD2(v56) = 1024;
    *(_DWORD *)((char *)&v56 + 6) = v16;
    _os_log_impl(&dword_1BD672000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    std::string::size_type v29 = __si_assert_copy_extra_329();
    int v30 = v29;
    unint64_t v31 = "";
    if (v29) {
      unint64_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v31);
LABEL_49:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  long long v37 = *a5;
  long long v38 = a5[1];
  uint64_t v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    uint64_t v32 = __si_assert_copy_extra_329();
    int v30 = v32;
    float v33 = "";
    if (v32) {
      float v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "target->nVectors() == 0", v33);
    goto LABEL_49;
  }
  int v18 = operator new(8uLL);
  __p[0] = v18;
  *int v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v19 = *(void *)(a1 + 128);
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 136);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a1 + 144);
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 152);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v47[0] = v19;
  v47[1] = (uint64_t)v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEE(v17, v47);
    uint64_t v23 = a3;
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEE(v17, v47);
    uint64_t v23 = a3;
  }
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2000000000;
  char v46 = 1;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v42 = 0u;
  uint64_t v40 = v21;
  uint64_t v41 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(void *)(a1 + 96);
  unint64_t v25 = *(std::__shared_weak_count **)(a1 + 104);
  v39[0] = v24;
  v39[1] = v25;
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
  }
  unint64_t v26 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v55 = 0x40000000;
  *(void *)&long long v56 = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((void *)&v56 + 1) = &unk_1E63459B8;
  __int16 v57 = v45;
  uint64_t v58 = v23;
  uint64_t v59 = a4;
  uint64_t v60 = v17;
  uint64_t v61 = a6;
  long long v62 = v37;
  long long v63 = v38;
  long long v52 = 0u;
  long long v53 = 0u;
  char v51 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v49, (uint64_t)&v42);
    long long v52 = v49;
    long long v53 = v50;
    if (!(void)v50) {
      break;
    }
    ((void (*)(uint8_t *, long long *, char *))v56)(buf, &v52, &v51);
  }
  while (!v51);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v44);
  uint8x8_t v27 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v28 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  _Block_object_dispose(v45, 8);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

uint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *v6;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      unsigned int v11 = uint32_map_get(v7, *v6);
      uint64_t v8 = *(void *)storageResolvePtr(v10, 8 * v11, 8, 1);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li768EEyjf(*(void *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  uint64_t result = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64)) {
    uint64_t result = (*(uint64_t (**)(void))(a1 + 88))(*(void *)(a1 + 96));
  }
  *a3 = result;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li768EEyjf(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_log_type_t v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v12);
  if (a5 == -1)
  {
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    int v18 = a3;
    uint64_t v19 = 0xFFFFFFFFLL;
    float v20 = a6;
    char v21 = 0;
  }
  else
  {
    if (*(_DWORD *)(v15 + 68) <= a5)
    {
      uint64_t v22 = __si_assert_copy_extra_329();
      uint64_t v23 = v22;
      uint64_t v24 = "";
      if (v22) {
        uint64_t v24 = v22;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2728, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v24);
      free(v23);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    int v18 = a3;
    uint64_t v19 = a5;
    float v20 = a6;
    char v21 = 1;
  }
  *((void *)_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v16, v17, v18, v19, v21, v20)+ 192) = a4;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13) {
      return;
    }
  }
  else if (!v13)
  {
    return;
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE5flushEy(uint64_t a1, uint64_t a2)
{
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE4dumpEbbPViPvU13block_pointerFbjPKvybjfE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 144);
  unsigned int v11 = *(std::__shared_weak_count **)(a1 + 152);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  unint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  uint64_t v19 = ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  float v20 = &unk_1E6345990;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    v19((uint64_t)v18, (uint64_t)&v32, (BOOL *)&v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result = (*(uint64_t (**)(float))(*(void *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE17mergeIndexForTestEP22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  unsigned int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE21mergeUpdateSetForTestEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v16) = 1024;
      *(_DWORD *)((char *)&v16 + 2) = v8;
      HIWORD(v16) = 1024;
      *(_DWORD *)int v17 = v9;
      *(_WORD *)&v17[4] = 1024;
      *(_DWORD *)&v17[6] = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    unsigned int v11 = operator new(0x10uLL);
    uint64_t v16 = v11 + 2;
    *(void *)int v17 = v11 + 2;
    *unsigned int v11 = a1 + 48;
    v11[1] = a2 + 48;
    *(void *)std::string buf = v11;
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v11);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v12 = __si_assert_copy_extra_329();
  uint64_t v13 = v12;
  int v14 = "";
  if (v12) {
    int v14 = v12;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
  free(v13);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a2 + 64));
    *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (*(void *)(a2 + 72))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(a2 + 64));
        os_log_type_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        if (v6) {
          break;
        }
        int v7 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a2 + 40)
                                                      + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(a2 + 64)
                                          + 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(void *)(a2 + 72) - 1;
        unint64_t v9 = *(void *)(a2 + 64) + 1;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v8;
        if (v9 >= 0x200)
        {
          operator delete(**(void ***)(a2 + 40));
          *(void *)(a2 + 40) += 8;
          uint64_t v8 = *(void *)(a2 + 72);
          unint64_t v9 = *(void *)(a2 + 64) - 256;
          *(void *)(a2 + 64) = v9;
        }
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v9);
          *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          if (*(void *)(a2 + 72)) {
            continue;
          }
        }
        return;
      }
      *(_DWORD *)(a1 + 4) = v6[1];
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a2 + 16) + 16), *v6, 1556);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(Ptr + 1552);
      *(void *)(a1 + 16) = Ptr;
      *(void *)(a1 + 24) = Ptr + 1536;
    }
  }
}

int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfojy(int *result, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (int v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    uint64_t v5 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v5;
    int v7 = "";
    if (v5) {
      int v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (*(uint64_t (**)(int *))(*(void *)v3 + 16))(v3);
      int v11 = (*(uint64_t (**)(int *))(*(void *)v3 + 24))(v3);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v17 = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      __int16 v20 = 1024;
      int v21 = v12;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    uint64_t result = __error();
    unsigned int *result = v8;
  }
  uint64_t v4 = *(void *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    int v14 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v14;
    int v15 = "";
    if (v14) {
      int v15 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    uint64_t v5 = v4;
    os_log_type_t v6 = "";
    if (v4) {
      os_log_type_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1914, "offset < store->endOffset()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void **)(a1 + 16);
  return vi_onefixedsize_memory_allocator::getPtr(v2, a2, 1556);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfoP17TermIdContainer_s(uint64_t a1, uint64_t a2)
{
  v18[190] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v8;
      HIWORD(v17) = 1024;
      LODWORD(v18[0]) = v9;
      WORD2(v18[0]) = 1024;
      *(_DWORD *)((char *)v18 + 6) = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    uint64_t v11 = a2 + 48;
    int v12 = operator new(0x10uLL);
    int v17 = v12 + 2;
    v18[0] = v12 + 2;
    void *v12 = a1 + 48;
    v12[1] = v11;
    *(void *)std::string buf = v12;
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v12);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v11);
  }
  int v13 = __si_assert_copy_extra_329();
  int v14 = v13;
  int v15 = "";
  if (v13) {
    int v15 = v13;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
  free(v14);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE5trainERKNSt3__16vectorIP22AnyVectorIndexInstanceNS5_9allocatorIS8_EEEE(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    long long v33 = __si_assert_copy_extra_329();
    int v34 = v33;
    BOOL v35 = "";
    if (v33) {
      BOOL v35 = v33;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v35);
    goto LABEL_55;
  }
  if (*v3 != a1)
  {
    unint64_t v36 = __si_assert_copy_extra_329();
    int v34 = v36;
    long long v37 = "";
    if (v36) {
      long long v37 = v36;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v37);
LABEL_55:
    free(v34);
    if (__valid_fs(-1)) {
      uint64_t v38 = 2989;
    }
    else {
      uint64_t v38 = 3072;
    }
    *(_DWORD *)uint64_t v38 = -559038737;
LABEL_59:
    abort();
  }
  int v7 = (char *)operator new(8uLL);
  *(void *)int v7 = a1 + 48;
  int v8 = v7 + 8;
  uint64_t v40 = v7 + 8;
  uint64_t v41 = v7 + 8;
  std::string __p = v7;
  if (v4 < 9) {
    goto LABEL_39;
  }
  unint64_t v9 = 1;
  do
  {
    uint64_t v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      long long v30 = __si_assert_copy_extra_329();
      char v31 = v30;
      long long v32 = "";
      if (v30) {
        long long v32 = v30;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v12 = v11 + 48;
    if (v8 < v41)
    {
      *(void *)int v8 = v12;
      int v10 = v8 + 8;
      goto LABEL_6;
    }
    int v13 = (char *)__p;
    int64_t v14 = v8 - (unsigned char *)__p;
    uint64_t v15 = (v8 - (unsigned char *)__p) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_59;
    }
    uint64_t v17 = v41 - (unsigned char *)__p;
    if ((v41 - (unsigned char *)__p) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v19 = operator new(8 * v18);
    }
    else
    {
      int v19 = 0;
    }
    __int16 v20 = &v19[8 * v15];
    int v21 = &v19[8 * v18];
    *__int16 v20 = v12;
    int v10 = v20 + 1;
    if (v8 == v13)
    {
      std::string __p = &v19[8 * v15];
      uint64_t v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    unint64_t v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      uint64_t v25 = (v22 >> 3) + 1;
      int v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      long long v26 = &v19[8 * v15 - 16];
      long long v27 = v8 - 16;
      uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *long long v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      int v23 = v8;
    }
    do
    {
      uint64_t v24 = *((void *)v23 - 1);
      v23 -= 8;
      *--__int16 v20 = v24;
    }
    while (v23 != v13);
    int v13 = (char *)__p;
LABEL_30:
    std::string __p = v20;
    uint64_t v41 = v21;
    int v8 = v13;
    if (v13) {
      goto LABEL_33;
    }
LABEL_6:
    uint64_t v40 = v10;
    ++v9;
    int v3 = *(void **)a2;
    int v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  int v7 = (char *)__p;
LABEL_39:
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
  {
    operator delete(v7);
  }
}

unsigned int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE13insertForTestEjjPKv14vec_dimensions15vec_data_formatj(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    int v10 = v9;
    uint64_t v11 = "";
    if (v9) {
      uint64_t v11 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v7 = a7;
  uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((void *)result + 192) = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14insertForMergeEjtjPKv14vec_dimensions15vec_data_formatyjf(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v11 = __si_assert_copy_extra_329();
    uint64_t v12 = v11;
    int v13 = "";
    if (v11) {
      int v13 = v11;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li768EEyjf(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12insertVectorEjjPKv14vec_dimensions15vec_data_format14docInvertStateyP15PostingBaseInfo(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == a1[4])
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    os_log_type_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    int v8 = "";
    if (v6) {
      int v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    uint64_t v7 = v9;
    int v10 = "";
    if (v9) {
      int v10 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

unsigned int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE17bulkInsertForTestEPKvPKjjS8_(unsigned int *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v19 = *a5++;
        unsigned int v18 = v19;
        unsigned int v20 = *a3++;
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 192) = v20;
        a2 += 1536;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v16 = *__error();
          uint64_t v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        unsigned int v13 = a5[v10];
        uint64_t v14 = a3[v10];
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 192) = v14;
        a2 += 1536;
        uint64_t v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6shadowEbPVi(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_log_type_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v9 + 168))(v9, a2, a3);
  uint64_t v10 = vi_onefixedsize_disk_allocator::shadow(*(void *)(*(void *)(a1 + 96) + 32), a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return v10;
    }
  }
  else if (!v7)
  {
    return v10;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v10;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v9 = *(void *)(*(void *)(a1 + 96) + 32);
  unint64_t v10 = *(unsigned int *)(v9 + 72);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 12;
    do
    {
      float v12 = *(void **)(v9 + 8 * v11);
      if (v12 && (unint64_t v13 = v12[1], v13 + 1 >= 2) && v13 <= a2 && (v14 = v12[2], v13 - v14 + v12[3] > a2)) {
        uint64_t v15 = a2 - v13 + v14;
      }
      else {
        uint64_t v15 = -1;
      }
      if (v11 - 11 >= v10) {
        break;
      }
      ++v11;
    }
    while (v15 == -1);
    if (v15 != -1) {
      goto LABEL_17;
    }
  }
  if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 144))(v8, a2) & 1) == 0)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v6 + 56))(v6, a2);
    if (!v7) {
      goto LABEL_21;
    }
  }
  else
  {
LABEL_17:
    uint64_t v16 = 1;
    if (!v7)
    {
LABEL_21:
      if (!v5) {
        return v16;
      }
      goto LABEL_22;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v5) {
    return v16;
  }
LABEL_22:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v16;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8allExistEPKvj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE(v5, a2))
      {
        a2 += 1536;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE(v5, a2))break; {
        a2 += 1536;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    uint64_t v15 = v14;
    uint64_t v16 = "";
    if (v14) {
      uint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int v4 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(a1, a2, (int *)&v24, &v23, 0);
  if (v4 == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v9 = *(void *)(a1 + 80);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 96);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 104);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke;
    v20[3] = &unk_1E6345968;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke_1439;
      v15[3] = &unk_1F18166D8;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      uint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      unint64_t v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 != -1;
}

int *___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(const void **)(a1 + 48);
  uint64_t v8 = *(unsigned int *)a3;
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 1552) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 1552);
  uint64_t result = (int *)memcmp(v7, v14, 0x600uLL);
  if (!result)
  {
    int v16 = *__error();
    uint64_t v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v22 = a3[1];
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2760;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = a2;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v22;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v16;
    int v18 = *__error();
    unsigned int v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)(a1 + 56);
      double v24 = *(float *)(a1 + 60);
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2761;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v23;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v24;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v18;
    int v20 = *__error();
    unsigned int v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      float v25 = *(float *)(a1 + 60);
      float v26 = a3[1];
      float v27 = vabds_f32(v25, v26);
      if (v25 == v26)
      {
        BOOL v28 = 1;
        BOOL v29 = 1;
      }
      else
      {
        float v30 = fabsf(v25);
        float v31 = fabsf(v26);
        BOOL v28 = v27 <= fmaxf(fminf(v31, v30) * 0.000015259, 0.000015259);
        BOOL v29 = v27 <= (float)(fmaxf(v30, v31) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317186;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2762;
      __int16 v37 = 2048;
      *(double *)uint64_t v38 = v27;
      *(_WORD *)&v38[8] = 2048;
      *(void *)&v38[10] = 0x3810000000000000;
      __int16 v39 = 2048;
      uint64_t v40 = 0x3E80000000000000;
      __int16 v41 = 1024;
      BOOL v42 = v27 < 1.1755e-38;
      __int16 v43 = 1024;
      BOOL v44 = v27 < 0.00000011921;
      __int16 v45 = 1024;
      BOOL v46 = v28;
      __int16 v47 = 1024;
      BOOL v48 = v29;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x48u);
    }
    uint64_t result = __error();
    int *result = v20;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke_1439(uint64_t a1, int a2, unsigned int *a3, unsigned char *a4)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  int v6 = *(const void **)(a1 + 48);
  uint64_t v129 = *(void *)(a1 + 40);
  uint64_t v8 = *a3;
  uint64_t v9 = *(void **)(*(void *)(v129 + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 1552) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 1552);
  if (!memcmp(v6, v14, 0x600uLL))
  {
    int v15 = *__error();
    int v16 = _SILogForLogForCategory(16);
    uint64_t v17 = a3;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      double v57 = *((float *)a3 + 1);
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2770;
      __int16 v141 = 1024;
      float v142 = *(float *)&a2;
      __int16 v143 = 2048;
      *(double *)uint64_t v144 = v57;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v15;
    int v18 = *(float16x8_t **)(a1 + 48);
    unsigned int v19 = (float16x8_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float16x8_t v20 = 0uLL;
    unint64_t v21 = -8;
    do
    {
      float16x8_t v22 = *v18++;
      float16x8_t v23 = v22;
      float16x8_t v24 = *v19++;
      float16x8_t v25 = vsubq_f16(v23, v24);
      float16x8_t v20 = vmlaq_f16(v20, v25, v25);
      v21 += 8;
    }
    while (v21 < 0x2F8);
    float16x8_t v128 = v20;
    int v26 = *__error();
    float v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      _H3 = v128.i16[0];
      __asm { FCVT            S0, H3 }
      _H1 = v128.i16[1];
      __asm { FCVT            S1, H1 }
      float v66 = _S0 + _S1;
      LOWORD(_S1) = v128.i16[2];
      __asm { FCVT            S1, H1 }
      _H2 = v128.i16[3];
      __asm { FCVT            S2, H2 }
      float v70 = v66 + (float)(_S1 + _S2);
      LOWORD(_S1) = v128.i16[4];
      __asm { FCVT            S1, H1 }
      LOWORD(_S2) = v128.i16[5];
      __asm { FCVT            S2, H2 }
      _S1 = _S1 + _S2;
      LOWORD(_S2) = v128.i16[6];
      __asm { FCVT            S2, H2 }
      float v75 = v70 + (float)(_S1 + _S2);
      LOWORD(_S1) = v128.i16[7];
      __asm { FCVT            S1, H1 }
      float v77 = *(float *)(a1 + 88);
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2772;
      __int16 v141 = 1024;
      float v142 = v77;
      __int16 v143 = 2048;
      *(double *)uint64_t v144 = (float)(v75 + _S1);
      _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v26;
    std::string __p = 0;
    long long v135 = 0;
    uint64_t v136 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&__p);
    int v28 = *__error();
    BOOL v29 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      float v78 = *(float *)__p;
      float v79 = *((float *)__p + 1);
      int v80 = *((_DWORD *)__p + 2);
      float v81 = *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316674;
      uint64_t v138 = "exists_block_invoke";
      BOOL v82 = vabds_f32(v79, v81) <= fmaxf(fminf(fabsf(v81), fabsf(v79)) * 0.000015259, 0.000015259);
      int v140 = 2774;
      __int16 v139 = 1024;
      int v83 = v79 == v81 || v82;
      __int16 v141 = 1024;
      float v142 = v78;
      __int16 v143 = 2048;
      *(double *)uint64_t v144 = v79;
      *(_WORD *)&v144[8] = 1024;
      *(_DWORD *)&v144[10] = v80;
      __int16 v145 = 2048;
      double v146 = v81;
      __int16 v147 = 1024;
      LODWORD(v148) = v83;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", buf, 0x38u);
    }
    *__error() = v28;
    int v30 = *__error();
    float v31 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      float v84 = *(float *)__p;
      int v85 = *((_DWORD *)__p + 2);
      BOOL v86 = *((float *)__p + 1) == *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2775;
      __int16 v141 = 1024;
      float v142 = v84;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v85;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v86;
      _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v30;
    int v32 = *__error();
    long long v33 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      float v87 = *(float *)__p;
      int v88 = *((_DWORD *)__p + 2);
      BOOL v89 = *((float *)__p + 1) < *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2776;
      __int16 v141 = 1024;
      float v142 = v87;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v88;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v89;
      _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v32;
    int v34 = *__error();
    __int16 v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      float v90 = *(float *)__p;
      int v91 = *((_DWORD *)__p + 2);
      BOOL v92 = *((float *)__p + 1) > *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2777;
      __int16 v141 = 1024;
      float v142 = v90;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v91;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v92;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v34;
    int v36 = *__error();
    __int16 v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      float v93 = *(float *)__p;
      int v94 = *((_DWORD *)__p + 2);
      float v95 = *((float *)__p + 1);
      float v96 = *((float *)__p + 3);
      double v97 = (float)(v95 - v96);
      float v98 = vabds_f32(v95, v96);
      if (v95 == v96)
      {
        BOOL v99 = 1;
        BOOL v100 = 1;
      }
      else
      {
        float v124 = fabsf(v95);
        float v125 = fabsf(v96);
        BOOL v99 = v98 <= fmaxf(fminf(v125, v124) * 0.000015259, 0.000015259);
        BOOL v100 = v98 <= (float)(fmaxf(v124, v125) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317698;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2778;
      __int16 v141 = 1024;
      float v142 = v93;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v94;
      *(_WORD *)&v144[4] = 2048;
      *(double *)&v144[6] = v97;
      __int16 v145 = 2048;
      double v146 = 1.17549435e-38;
      __int16 v147 = 2048;
      uint64_t v148 = 0x3E80000000000000;
      __int16 v149 = 1024;
      BOOL v150 = v98 < 1.1755e-38;
      __int16 v151 = 1024;
      BOOL v152 = v98 < 0.00000011921;
      __int16 v153 = 1024;
      BOOL v154 = v99;
      __int16 v155 = 1024;
      BOOL v156 = v100;
      _os_log_error_impl(&dword_1BD672000, v37, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x54u);
    }
    *__error() = v36;
    long long v132 = 0;
    uint64_t v133 = 0;
    uint64_t v131 = 0;
    uint64_t v38 = *(void *)(a1 + 56);
    uint64_t v39 = *a3;
    uint64_t v40 = *(void **)(*(void *)(v129 + 48) + 32);
    unint64_t v41 = v40[3] + v40[2] * v39;
    bit_vector_set_10635(v40 + 525, (v41 >> 20));
    unint64_t v42 = (v41 + 1552) >> 20;
    if (v42 > (v41 >> 20))
    {
      unsigned int v43 = (v41 >> 20) + 1;
      do
      {
        unint64_t v44 = v43;
        bit_vector_set_10635(v40 + 525, v43++);
      }
      while (v42 > v44);
    }
    unint64_t v45 = _windowsResolvePtr((uint64_t)(v40 + 5), v40[3] + v40[2] * v39, 1552);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v38 + 80))(&v131, v38, v45, 2);
    int v46 = *__error();
    __int16 v47 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      float v101 = *v131;
      float v102 = v131[1];
      int v103 = *((_DWORD *)v131 + 2);
      float v104 = v131[3];
      *(_DWORD *)std::string buf = 136316674;
      uint64_t v138 = "exists_block_invoke";
      BOOL v105 = vabds_f32(v102, v104) <= fmaxf(fminf(fabsf(v104), fabsf(v102)) * 0.000015259, 0.000015259);
      int v140 = 2781;
      __int16 v139 = 1024;
      int v106 = v102 == v104 || v105;
      __int16 v141 = 1024;
      float v142 = v101;
      __int16 v143 = 2048;
      *(double *)uint64_t v144 = v102;
      *(_WORD *)&v144[8] = 1024;
      *(_DWORD *)&v144[10] = v103;
      __int16 v145 = 2048;
      double v146 = v104;
      __int16 v147 = 1024;
      LODWORD(v148) = v106;
      _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", buf, 0x38u);
    }
    *__error() = v46;
    int v48 = *__error();
    uint64_t v49 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      float v107 = *v131;
      int v108 = *((_DWORD *)v131 + 2);
      BOOL v109 = v131[1] == v131[3];
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2782;
      __int16 v141 = 1024;
      float v142 = v107;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v108;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v109;
      _os_log_error_impl(&dword_1BD672000, v49, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v48;
    int v50 = *__error();
    char v51 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      float v110 = *v131;
      int v111 = *((_DWORD *)v131 + 2);
      BOOL v112 = v131[1] < v131[3];
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2783;
      __int16 v141 = 1024;
      float v142 = v110;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v111;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v112;
      _os_log_error_impl(&dword_1BD672000, v51, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v50;
    int v52 = *__error();
    long long v53 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      float v113 = *v131;
      int v114 = *((_DWORD *)v131 + 2);
      BOOL v115 = v131[1] > v131[3];
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2784;
      __int16 v141 = 1024;
      float v142 = v113;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v114;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v115;
      _os_log_error_impl(&dword_1BD672000, v53, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v52;
    int v54 = *__error();
    uint64_t v55 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      float v116 = *v131;
      int v117 = *((_DWORD *)v131 + 2);
      float v118 = v131[1];
      float v119 = v131[3];
      float v120 = vabds_f32(v118, v119);
      BOOL v121 = (float)(v118 - v119) < 1.1755e-38;
      if (v118 == v119)
      {
        BOOL v122 = 1;
        BOOL v123 = 1;
      }
      else
      {
        float v126 = fabsf(v118);
        float v127 = fabsf(v119);
        BOOL v122 = v120 <= fmaxf(fminf(v127, v126) * 0.000015259, 0.000015259);
        BOOL v123 = v120 <= (float)(fmaxf(v126, v127) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317698;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2785;
      __int16 v141 = 1024;
      float v142 = v116;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v117;
      *(_WORD *)&v144[4] = 2048;
      *(double *)&v144[6] = v120;
      __int16 v145 = 2048;
      double v146 = 1.17549435e-38;
      __int16 v147 = 2048;
      uint64_t v148 = 0x3E80000000000000;
      __int16 v149 = 1024;
      BOOL v150 = v121;
      __int16 v151 = 1024;
      BOOL v152 = v120 < 0.00000011921;
      __int16 v153 = 1024;
      BOOL v154 = v122;
      __int16 v155 = 1024;
      BOOL v156 = v123;
      _os_log_error_impl(&dword_1BD672000, v55, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x54u);
    }
    *__error() = v54;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v17;
    long long v56 = v131;
    *a4 = 1;
    if (v56)
    {
      long long v132 = v56;
      operator delete(v56);
    }
    if (__p)
    {
      long long v135 = __p;
      operator delete(__p);
    }
  }
}

void __destroy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li768EE19QuantizerPartitionsE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li768EE19QuantizerPartitionsE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE11nPartitionsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8nVectorsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18164D0;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18164D0;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void _ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi(void *a1, uint64_t a2, int a3)
{
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x3802000000;
  int v15 = __Block_byref_object_copy__539;
  uint64_t v17 = 0;
  int v18 = 0;
  int v16 = __Block_byref_object_dispose__540;
  if (_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken != -1) {
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken, &__block_literal_global_460);
  }
  uint64_t v17 = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq;
  int v6 = *(std::__shared_weak_count **)(_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq + 8);
  int v18 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(NSObject **)(a2 + 16);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi_block_invoke;
  v10[3] = &unk_1E6345010;
  int v11 = a3;
  v10[4] = &v12;
  v10[5] = a2;
  dispatch_sync(v7, v10);
  uint64_t v8 = v13[6];
  *a1 = v13[5];
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v12, 8);
  uint64_t v9 = v18;
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEE(uint64_t a1, uint64_t *a2)
{
  int v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v8 = *a2;
  if (v6 != *a2)
  {
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v18 = *a2;
    unsigned int v19 = v9;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v14 = *a2;
      int v15 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v14 = v8;
      int v15 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 40))(&v16, a1, &v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v18, &v16);
    int v11 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    unint64_t v13 = v19;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

__n128 __Block_byref_object_copy__539(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__540(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v2) {
    goto LABEL_55;
  }
  int8x8_t v4 = *(int8x8_t *)(v3 + 120);
  if (!*(void *)&v4) {
    goto LABEL_22;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = *(int *)(a1 + 48);
    if (*(void *)&v4 <= v2) {
      unint64_t v6 = v2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v2;
  }
  uint64_t v7 = *(uint64_t ***)(*(void *)(v3 + 112) + 8 * v6);
  if (!v7 || (uint64_t v8 = *v7) == 0)
  {
LABEL_22:
    long long v50 = 0uLL;
    int64_t v51 = 0;
    int v12 = *(char *)(v3 + 71);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v13 = *(void *)(v3 + 56);
    }
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_99;
    }
    if (v14 >= 0x17)
    {
      uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v16 = v14 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v13 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
      if (!v13) {
        goto LABEL_36;
      }
    }
    if (v12 >= 0) {
      uint64_t v18 = (const void *)(v3 + 48);
    }
    else {
      uint64_t v18 = *(const void **)(v3 + 48);
    }
    memmove(p_dst, v18, v13);
LABEL_36:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 46;
    std::to_string(&v47, v2);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v19 = &v47;
    }
    else {
      unsigned int v19 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    unint64_t v21 = std::string::append(&__dst, (const std::string::value_type *)v19, size);
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    float16x8_t v23 = std::string::append(&v49, ".quantizer");
    int64_t v24 = v23->__r_.__value_.__r.__words[2];
    long long v50 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v51 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_45:
          if (v51 >= 0) {
            float16x8_t v25 = (const char *)&v50;
          }
          else {
            float16x8_t v25 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v25, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          goto LABEL_55;
        }
LABEL_52:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == v2)
      {
        if (*((_DWORD *)v8 + 4) == v2) {
          goto LABEL_92;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_22;
      }
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == v2) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_22;
    }
LABEL_12:
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v8 + 4) != v2) {
    goto LABEL_12;
  }
LABEL_92:
  unint64_t v42 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v3 + 112, v2, (_DWORD *)(a1 + 48));
  unsigned int v43 = (std::__shared_weak_count *)v42[4];
  if (v43 && (unsigned int v43 = std::__shared_weak_count::lock(v43)) != 0) {
    uint64_t v44 = v42[3];
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = *(void *)(*(void *)(a1 + 32) + 8);
  int v46 = *(std::__shared_weak_count **)(v45 + 48);
  *(void *)(v45 + 40) = v44;
  *(void *)(v45 + 48) = v43;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_55:
  uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
  if (_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken != -1) {
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken, &__block_literal_global_460);
  }
  uint64_t v28 = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq;
  float v27 = *(std::__shared_weak_count **)(_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq + 8);
  if (!v27)
  {
    if (*(void *)(v26 + 40) != v28) {
      return;
    }
LABEL_64:
    uint64_t v30 = *(void *)(v3 + 80);
    if (v30)
    {
      uint64_t v31 = *(void *)(v3 + 88);
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8);
      long long v33 = *(std::__shared_weak_count **)(v32 + 48);
      *(void *)(v32 + 40) = v30;
      *(void *)(v32 + 48) = v31;
      if (v33)
      {
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      return;
    }
    int v34 = *(char *)(v3 + 71);
    if (v34 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v35 = *(void *)(v3 + 56);
    }
    unint64_t v36 = v35 + 10;
    if (v35 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v36 >= 0x17)
      {
        uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17) {
          uint64_t v38 = v36 | 7;
        }
        uint64_t v39 = v38 + 1;
        __int16 v37 = (char *)operator new(v38 + 1);
        *((void *)&v50 + 1) = v35 + 10;
        int64_t v51 = v39 | 0x8000000000000000;
        *(void *)&long long v50 = v37;
      }
      else
      {
        int64_t v51 = 0;
        long long v50 = 0uLL;
        __int16 v37 = (char *)&v50;
        HIBYTE(v51) = v35 + 10;
        if (!v35)
        {
LABEL_84:
          strcpy(&v37[v35], ".quantizer");
          if (v51 >= 0) {
            unint64_t v41 = (const char *)&v50;
          }
          else {
            unint64_t v41 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v41, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          return;
        }
      }
      if (v34 >= 0) {
        uint64_t v40 = (const void *)(v3 + 48);
      }
      else {
        uint64_t v40 = *(const void **)(v3 + 48);
      }
      memmove(v37, v40, v35);
      goto LABEL_84;
    }
LABEL_99:
    abort();
  }
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v29 = *(void *)(v26 + 40);
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EEC2EN19vi_ondisk_allocator11meta_info_sE(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = &unk_1F1814910;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(void *)(a1 + 64) = fd_dup(*(void *)a2);
  bzero(v9, 0x400uLL);
  uint8x8_t v5 = fd_name(*(void *)a2, v9, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  if (*(void *)(a1 + 64)) {
    operator new();
  }
  unint64_t v6 = __si_assert_copy_extra_329();
  uint64_t v7 = v6;
  uint64_t v8 = "";
  if (v6) {
    uint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 487, "fdPtr != nullptr", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void _ZNK9QuantizerIDF16_Li512EE14topKPartitionsERK10CIVector_sIDF16_Li512EEi(uint64_t a1@<X0>, float16x8_t *a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    uint64_t v7 = 0;
    int v83 = 0;
    BOOL v82 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_76;
  }
  int v108 = a4;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = a3;
  int v12 = a2;
  do
  {
    size_t v13 = (float16x8_t *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 72))(a1, v10);
    float16x8_t v14 = 0uLL;
    unint64_t v15 = -8;
    uint64_t v16 = v12;
    do
    {
      float16x8_t v17 = *v13++;
      float16x8_t v18 = v17;
      float16x8_t v19 = *v16++;
      float16x8_t v20 = vsubq_f16(v18, v19);
      float16x8_t v14 = vmlaq_f16(v14, v20, v20);
      v15 += 8;
    }
    while (v15 < 0x1F8);
    float32x4_t v21 = vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v14.i8), vcvt_hight_f32_f16(v14));
    unint64_t v22 = (v10 | ((unint64_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21))) << 32)) >> 32;
    uint64_t v23 = v7 - v9;
    uint64_t v24 = (v7 - v9) >> 3;
    if (v24 < v11)
    {
      if (v7 < v8)
      {
        *(_DWORD *)uint64_t v7 = v10;
        *((_DWORD *)v7 + 1) = v22;
        v7 += 8;
LABEL_49:
        if (v7 - v9 >= 9)
        {
          unint64_t v56 = (((unint64_t)(v7 - v9) >> 3) - 2) >> 1;
          double v57 = (float *)&v9[8 * v56];
          uint64_t v59 = v7 - 8;
          unsigned int v58 = *((_DWORD *)v7 - 2);
          float v60 = v57[1];
          float v61 = *((float *)v7 - 1);
          int v62 = *(_DWORD *)v57;
          BOOL v63 = *(_DWORD *)v57 < v58;
          if (v60 != v61) {
            BOOL v63 = v60 < v61;
          }
          if (v63)
          {
            do
            {
              uint64_t v64 = v57;
              *(_DWORD *)uint64_t v59 = v62;
              *((float *)v59 + 1) = v57[1];
              if (!v56) {
                break;
              }
              unint64_t v56 = (v56 - 1) >> 1;
              double v57 = (float *)&v9[8 * v56];
              float v65 = v57[1];
              int v62 = *(_DWORD *)v57;
              BOOL v66 = v65 < v61;
              if (v65 == v61) {
                BOOL v66 = *(_DWORD *)v57 < v58;
              }
              uint64_t v59 = (char *)v64;
            }
            while (v66);
            *(_DWORD *)uint64_t v64 = v58;
            v64[1] = v61;
          }
        }
        goto LABEL_4;
      }
      if ((v8 - v9) >> 2 <= (unint64_t)(v24 + 1)) {
        unint64_t v36 = v24 + 1;
      }
      else {
        unint64_t v36 = (v8 - v9) >> 2;
      }
      if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v36 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v37 = 8 * v36;
      uint64_t v38 = operator new(8 * v36);
      uint64_t v39 = &v38[8 * v24];
      *uint64_t v39 = v10;
      v39[1] = v22;
      if (v7 == v9)
      {
        uint64_t v44 = v7;
        uint64_t v9 = &v38[8 * v24];
        goto LABEL_46;
      }
      unint64_t v40 = v7 - v9 - 8;
      if (v40 >= 0x58 && (unint64_t)(v9 - v38) >= 0x20)
      {
        uint64_t v76 = (v40 >> 3) + 1;
        unint64_t v41 = &v7[-8 * (v76 & 0x3FFFFFFFFFFFFFFCLL)];
        float v77 = &v38[8 * v24 - 16];
        float v78 = v7 - 16;
        uint64_t v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *float v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        unint64_t v42 = (char *)&v39[-2 * (v76 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v41 = v7;
        unint64_t v42 = &v38[8 * v24];
      }
      do
      {
        uint64_t v43 = *((void *)v41 - 1);
        v41 -= 8;
        *((void *)v42 - 1) = v43;
        v42 -= 8;
      }
      while (v41 != v9);
LABEL_34:
      uint64_t v44 = v9;
      uint64_t v9 = v42;
LABEL_46:
      uint64_t v8 = &v38[v37];
      uint64_t v7 = (char *)(v39 + 2);
      if (v44) {
        operator delete(v44);
      }
      int v12 = a2;
      goto LABEL_49;
    }
    float v25 = *((float *)v9 + 1);
    int v26 = *(_DWORD *)v9;
    BOOL v27 = *(_DWORD *)v9 > v10;
    if (v25 != *(float *)&v22) {
      BOOL v27 = v25 > *(float *)&v22;
    }
    if (v27)
    {
      if (v23 <= 8)
      {
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v22;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = v9;
        do
        {
          int v34 = (float *)&v29[8 * v28 + 8];
          uint64_t v35 = (2 * v28) | 1;
          uint64_t v28 = 2 * v28 + 2;
          if (v28 < v24)
          {
            float v30 = v34[1];
            float v31 = v34[3];
            float v32 = *v34;
            BOOL v33 = *(_DWORD *)v34 < *((_DWORD *)v34 + 2);
            if (v30 != v31) {
              BOOL v33 = v30 < v31;
            }
            if (v33)
            {
              float v32 = v34[2];
              v34 += 2;
            }
            else
            {
              uint64_t v28 = v35;
            }
          }
          else
          {
            float v32 = *v34;
            uint64_t v28 = v35;
          }
          *(float *)uint64_t v29 = v32;
          *((float *)v29 + 1) = v34[1];
          uint64_t v29 = (char *)v34;
        }
        while (v28 <= (uint64_t)((unint64_t)(v24 - 2) >> 1));
        if (v34 == (float *)(v7 - 8))
        {
          *(_DWORD *)int v34 = v26;
          v34[1] = v25;
        }
        else
        {
          float *v34 = *((float *)v7 - 2);
          v34[1] = *((float *)v7 - 1);
          *((_DWORD *)v7 - 2) = v26;
          *((float *)v7 - 1) = v25;
          uint64_t v45 = (char *)v34 - v9 + 8;
          if (v45 >= 9)
          {
            unint64_t v46 = (((unint64_t)v45 >> 3) - 2) >> 1;
            std::string v47 = (float *)&v9[8 * v46];
            float v48 = v47[1];
            float v49 = v34[1];
            int v50 = *(_DWORD *)v47;
            float v51 = *v34;
            BOOL v52 = *(_DWORD *)v47 < *(_DWORD *)v34;
            if (v48 != v49) {
              BOOL v52 = v48 < v49;
            }
            if (v52)
            {
              do
              {
                long long v53 = v47;
                *(_DWORD *)int v34 = v50;
                v34[1] = v47[1];
                if (!v46) {
                  break;
                }
                unint64_t v46 = (v46 - 1) >> 1;
                std::string v47 = (float *)&v9[8 * v46];
                float v54 = v47[1];
                int v50 = *(_DWORD *)v47;
                BOOL v55 = v54 < v49;
                if (v54 == v49) {
                  BOOL v55 = *(_DWORD *)v47 < LODWORD(v51);
                }
                int v34 = v53;
              }
              while (v55);
              *long long v53 = v51;
              v53[1] = v49;
            }
          }
        }
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v22;
        uint64_t v67 = v7 - 8;
        unint64_t v68 = (((unint64_t)v23 >> 3) - 2) >> 1;
        unint64_t v69 = (float *)&v9[8 * v68];
        float v70 = v69[1];
        int v71 = *(_DWORD *)v69;
        BOOL v72 = *(_DWORD *)v69 < v10;
        if (v70 != *(float *)&v22) {
          BOOL v72 = v70 < *(float *)&v22;
        }
        if (v72)
        {
          do
          {
            unint64_t v73 = v69;
            *(_DWORD *)uint64_t v67 = v71;
            *((float *)v67 + 1) = v69[1];
            if (!v68) {
              break;
            }
            unint64_t v68 = (v68 - 1) >> 1;
            unint64_t v69 = (float *)&v9[8 * v68];
            float v74 = v69[1];
            int v71 = *(_DWORD *)v69;
            BOOL v75 = v74 < *(float *)&v22;
            if (v74 == *(float *)&v22) {
              BOOL v75 = *(_DWORD *)v69 < v10;
            }
            uint64_t v67 = (char *)v73;
          }
          while (v75);
          *(_DWORD *)unint64_t v73 = v10;
          *((_DWORD *)v73 + 1) = v22;
        }
      }
    }
LABEL_4:
    ++v10;
  }
  while (v10 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1));
  const char *v108 = 0;
  v108[1] = 0;
  v108[2] = 0;
  uint64_t v81 = v7 - v9;
  if (v7 == v9)
  {
    int v83 = 0;
    BOOL v82 = 0;
  }
  else
  {
    if (v81 < 0) {
      abort();
    }
    BOOL v82 = (int *)operator new(v7 - v9);
    const char *v108 = v82;
    v108[2] = &v82[2 * (v81 >> 3)];
    memcpy(v82, v9, v81 & 0xFFFFFFFFFFFFFFF8);
    int v83 = (float *)((char *)v82 + (v81 & 0xFFFFFFFFFFFFFFF8));
    v108[1] = (int *)v83;
    uint64_t v7 = v9;
  }
LABEL_76:
  if ((char *)v83 - (char *)v82 >= 9)
  {
    uint64_t v84 = (unint64_t)((char *)v83 - (char *)v82) >> 3;
    do
    {
      uint64_t v86 = 0;
      int v87 = *v82;
      int v88 = v82[1];
      BOOL v89 = (float *)v82;
      do
      {
        int v94 = &v89[2 * v86 + 2];
        uint64_t v95 = (2 * v86) | 1;
        uint64_t v86 = 2 * v86 + 2;
        if (v86 < v84)
        {
          float v90 = v94[1];
          float v91 = v94[3];
          float v92 = *v94;
          BOOL v93 = *(_DWORD *)v94 < *((_DWORD *)v94 + 2);
          if (v90 != v91) {
            BOOL v93 = v90 < v91;
          }
          if (v93)
          {
            float v92 = v94[2];
            v94 += 2;
          }
          else
          {
            uint64_t v86 = v95;
          }
        }
        else
        {
          float v92 = *v94;
          uint64_t v86 = v95;
        }
        *BOOL v89 = v92;
        v89[1] = v94[1];
        BOOL v89 = v94;
      }
      while (v86 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
      float v96 = (char *)(v83 - 2);
      if (v94 == v83 - 2)
      {
        *(_DWORD *)int v94 = v87;
        *((_DWORD *)v94 + 1) = v88;
      }
      else
      {
        *int v94 = *(v83 - 2);
        v94[1] = *(v83 - 1);
        *((_DWORD *)v83 - 2) = v87;
        *((_DWORD *)v83 - 1) = v88;
        uint64_t v97 = (char *)v94 - (char *)v82 + 8;
        if (v97 >= 9)
        {
          unint64_t v98 = (((unint64_t)v97 >> 3) - 2) >> 1;
          BOOL v99 = (float *)&v82[2 * v98];
          float v100 = v99[1];
          float v101 = v94[1];
          float v102 = *v99;
          float v103 = *v94;
          BOOL v104 = *(_DWORD *)v99 < *(_DWORD *)v94;
          if (v100 != v101) {
            BOOL v104 = v100 < v101;
          }
          if (v104)
          {
            do
            {
              BOOL v105 = v99;
              *int v94 = v102;
              v94[1] = v99[1];
              if (!v98) {
                break;
              }
              unint64_t v98 = (v98 - 1) >> 1;
              BOOL v99 = (float *)&v82[2 * v98];
              float v106 = v99[1];
              float v102 = *v99;
              BOOL v107 = v106 < v101;
              if (v106 == v101) {
                BOOL v107 = *(_DWORD *)v99 < LODWORD(v103);
              }
              int v94 = v105;
            }
            while (v107);
            float *v105 = v103;
            v105[1] = v101;
          }
        }
      }
      int v83 = (float *)v96;
    }
    while (v84-- > 2);
  }
  if (v7)
  {
    operator delete(v7);
  }
}

unint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    uint8x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "i < nCentroids", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(v2 + 24) + *(void *)(v2 + 16) * a2;
  return _windowsResolvePtr(v2 + 40, v3, 1024);
}

BOOL _ZNK9QuantizerIDF16_Li512EE12isPersistentEv(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  int v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8) {
      return 1;
    }
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(void *)(a1 + 16) == 8)
  {
    uint64_t v1 = (void *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

BOOL _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(unsigned int *)(v2 + 72);
  if ((int)v3 < 1)
  {
    uint64_t v8 = -1;
  }
  else
  {
    uint64_t v4 = 12;
    do
    {
      uint8x8_t v5 = *(void **)(v2 + 8 * v4);
      if (v5 && (unint64_t v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2)) {
        uint64_t v8 = a2 - v6 + v7;
      }
      else {
        uint64_t v8 = -1;
      }
      if (v4 - 11 >= v3) {
        break;
      }
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

BOOL _ZNK9QuantizerIDF16_Li512EEeqERK12AnyQuantizer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 512)
  {
    uint8x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 291, "D == other.dimension()", v7);
LABEL_12:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) != 2)
  {
    uint64_t v8 = __si_assert_copy_extra_329();
    unint64_t v6 = v8;
    uint64_t v9 = "";
    if (v8) {
      uint64_t v9 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 292, "sizeof(ELEM_TYPE) == other.elementSize()", v9);
    goto LABEL_12;
  }
  return _ZNK9QuantizerIDF16_Li512EEeqERKS0_(a1, a2);
}

BOOL _ZNK9QuantizerIDF16_Li512EEeqERKS0_(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    return 1;
  }
  uint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v5);
    uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v5);
    int v8 = memcmp(v6, v7, 0x400uLL);
    BOOL result = v8 == 0;
    if (v8) {
      break;
    }
    uint64_t v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
      return 1;
    }
  }
  return result;
}

uint64_t _ZNK9QuantizerIDF16_Li512EE11elementSizeEv()
{
  return 2;
}

uint64_t _ZNK9QuantizerIDF16_Li512EE9dimensionEv()
{
  return 512;
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EE5countEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EE7versionEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EED0Ev(uint64_t a1)
{
  _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EED2Ev(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EED2Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814910;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if (v2) {
    vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(a1 + 40));
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    int v4 = *(const void **)(v3 + 4216);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 4216) = 0;
    }
    *(_OWORD *)(v3 + 4200) = 0u;
    MEMORY[0x1C1881000](v3, 0x10A0C40112AF241);
  }
  fd_release(*(atomic_uint **)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    unint64_t v6 = *(const void **)(v5 + 4216);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v5 + 4216) = 0;
    }
    *(_OWORD *)(v5 + 4200) = 0u;
    MEMORY[0x1C1881000](v5, 0x10A0C40112AF241);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ___ZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li512EENS_10shared_ptrI9QuantizerIDF16_Li512EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li512EENS_10shared_ptrI9QuantizerIDF16_Li512EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

float *_ZNK21SingleVectorQuantizerIDF16_Li512EE14topKPartitionsERK10CIVector_sIDF16_Li512EEi@<X0>(uint64_t a1@<X0>, float16x8_t *a2@<X1>, float **a3@<X8>)
{
  int v4 = (float16x8_t *)(a1 + 33);
  _Q0 = 0uLL;
  unint64_t v6 = -8;
  do
  {
    float16x8_t v7 = *a2++;
    float16x8_t v8 = v7;
    float16x8_t v9 = *v4++;
    float16x8_t v10 = vsubq_f16(v8, v9);
    _Q0 = vmlaq_f16(_Q0, v10, v10);
    v6 += 8;
  }
  while (v6 < 0x1F8);
  __asm { FCVT            S1, H0 }
  _H2 = _Q0.i16[1];
  __asm { FCVT            S2, H2 }
  float v18 = _S1 + _S2;
  LOWORD(_S2) = _Q0.i16[2];
  __asm { FCVT            S2, H2 }
  _H3 = _Q0.i16[3];
  __asm { FCVT            S3, H3 }
  float v22 = v18 + (float)(_S2 + _S3);
  LOWORD(_S2) = _Q0.i16[4];
  __asm { FCVT            S2, H2 }
  LOWORD(_S3) = _Q0.i16[5];
  __asm { FCVT            S3, H3 }
  float v25 = _S2 + _S3;
  LOWORD(_S3) = _Q0.i16[6];
  __asm { FCVT            S3, H3 }
  _H0 = _Q0.i16[7];
  __asm { FCVT            S0, H0 }
  float v29 = (float)(v22 + (float)(v25 + _S3)) + _S0;
  uint64_t result = (float *)operator new(8uLL);
  a3[1] = result + 2;
  a3[2] = result + 2;
  float *result = 0.0;
  result[1] = v29;
  *a3 = result;
  return result;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li512EE11getCentroidEj(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    int v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 396, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li512EE5countEv()
{
  return 1;
}

void _ZN19ZeroVectorQuantizerIDF16_Li512EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN19ZeroVectorQuantizerIDF16_Li512EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZN21SingleVectorQuantizerIDF16_Li512EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN21SingleVectorQuantizerIDF16_Li512EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

__int16 ___ZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEv_block_invoke@<H0>()
{
  bzero((char *)&_ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid + 2, 0x3FEuLL);
  __int16 result = COERCE_UNSIGNED_INT(1.0);
  LOWORD(_ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid) = COERCE_UNSIGNED_INT(1.0);
  return result;
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li512EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    unsigned __int8 v2 = *(NSObject **)(v1 + 16);
    if (v2) {
      dispatch_release(v2);
    }
    int v3 = *__error();
    int v4 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (void *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      unint64_t v6 = (void *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0) {
        unint64_t v6 = (void *)*v6;
      }
      int v13 = 136315394;
      float16x8_t v14 = v5;
      __int16 v15 = 2080;
      uint64_t v16 = v6;
      _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v13, 0x16u);
    }
    *__error() = v3;
    float16x8_t v7 = *(void **)(v1 + 128);
    if (v7)
    {
      do
      {
        unint64_t v11 = (void *)*v7;
        int v12 = (std::__shared_weak_count *)v7[4];
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        operator delete(v7);
        float16x8_t v7 = v11;
      }
      while (v11);
    }
    float16x8_t v8 = *(void **)(v1 + 112);
    *(void *)(v1 + 112) = 0;
    if (v8) {
      operator delete(v8);
    }
    float16x8_t v9 = *(std::__shared_weak_count **)(v1 + 104);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    float16x8_t v10 = *(std::__shared_weak_count **)(v1 + 88);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_19:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_29:
        operator delete(*(void **)(v1 + 24));
LABEL_20:
        JUMPOUT(0x1C1881000);
      }
    }
    else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li512EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void ___ZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijt_block_invoke()
{
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEE16__on_zero_sharedEv(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    int v3 = *(const void **)(v2 + 4216);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 4216) = 0;
    }
    *(_OWORD *)(v2 + 4200) = 0u;
    JUMPOUT(0x1C1881000);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F18163D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F18163D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEENS6_I17AnyPartitionStoreEE(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  float16x8_t v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  float16x8_t v10 = *(char **)(a1 + 80);
  float16x8_t v8 = *(std::__shared_weak_count **)(a1 + 88);
  float16x8_t v9 = (long long *)(a1 + 80);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *(_DWORD **)(a1 + 96);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  float16x8_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    float v29 = __si_assert_copy_extra_329();
    float v30 = v29;
    float v31 = "";
    if (v29) {
      float v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 48) + 40) != v14[18])
  {
    float v32 = __si_assert_copy_extra_329();
    float v30 = v32;
    BOOL v33 = "";
    if (v32) {
      BOOL v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    __int16 v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = v10 + 8;
      if (v10[31] < 0) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      float v18 = (void *)(*a2 + 8);
      uint64_t v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        float v18 = (void *)*v18;
      }
      int v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      float16x8_t v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        float16x8_t v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      float32x4_t v21 = __p;
      if (v45 < 0) {
        float32x4_t v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      float v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      long long v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      double v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      BOOL v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    float16x8_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  int v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  uint64_t v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  BOOL v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13newPartitionsENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEE(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  unint64_t v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    unint64_t v6 = ".tmp.partitions";
  }
  memset(v16, 0, sizeof(v16));
  long long v7 = *(_OWORD *)(a1 + 24);
  v15[0] = *(_OWORD *)(a1 + 8);
  v15[1] = v7;
  size_t v8 = strlen(v6);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  float16x8_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    float16x8_t v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    unint64_t v14 = v12 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v14) = v8;
    float16x8_t v10 = __dst;
    if (!v8)
    {
LABEL_16:
      *((unsigned char *)v9 + (void)v10) = 0;
      IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)v16, (uint64_t)v15, (uint64_t)__dst, 1);
      if (SHIBYTE(v14) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v10, v6, (size_t)v9);
  goto LABEL_16;
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE17getVectorAtOffsetEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v3 = a2;
  unint64_t v4 = v2[3] + v2[2] * a2;
  bit_vector_set_10635(v2 + 525, (v4 >> 20));
  unint64_t v5 = (v4 + 1040) >> 20;
  if (v5 > (v4 >> 20))
  {
    unsigned int v6 = (v4 >> 20) + 1;
    do
    {
      unint64_t v7 = v6;
      bit_vector_set_10635(v2 + 525, v6++);
    }
    while (v5 > v7);
  }
  unint64_t v8 = v2[3] + v2[2] * v3;
  return _windowsResolvePtr((uint64_t)(v2 + 5), v8, 1040);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED0Ev(void *a1)
{
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(a1);
  JUMPOUT(0x1C1881000);
}

void *_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(void *a1)
{
  *a1 = &unk_1F1816388;
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12diagnoseDumpERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS5_13basic_ostreamIcS8_EEi(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  float16x8_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  __int16 v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v17 = "(readOnly)";
  }
  else {
    uint64_t v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  float16x8_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    int v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    BOOL v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    uint64_t v28 = (void *)std::ostream::operator<<();
    float v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    float v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  float v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 96);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  uint64_t v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 40))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      long long v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v52, 1040);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 40));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t v43 = _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v40, 1040);
        uint64_t v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        unint64_t v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, v43, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, v43 + 1016, 8);
        if ((v71 & 0x80u) == 0) {
          float v49 = &v69;
        }
        else {
          float v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  double v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6statusERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float16x8_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v31);
  if (v31)
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE26updateVectorStorageOffsetsEP13__SIUINT64Set(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 48;
  if (a2)
  {
    unint64_t v5 = 0;
    uint64_t v25 = a2 + 56;
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (v5 >= result) {
        break;
      }
      uint64_t v8 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v9 = v8[3] + v8[2] * v5;
      bit_vector_set_10635(v8 + 525, (v9 >> 20));
      unint64_t v10 = (v9 + 1040) >> 20;
      if (v10 > (v9 >> 20))
      {
        unsigned int v11 = (v9 >> 20) + 1;
        do
        {
          unint64_t v12 = v11;
          bit_vector_set_10635(v8 + 525, v11++);
        }
        while (v10 > v12);
      }
      unint64_t v6 = _windowsResolvePtr((uint64_t)(v8 + 5), v8[3] + v8[2] * v5, 1040);
      if (!*(unsigned char *)(a2 + 184))
      {
        unint64_t v13 = *(unsigned int *)(v6 + 1032);
        int v14 = *(_DWORD *)(a2 + 24);
        if (!v14 || !((*(void *)(a2 + 16) ^ v13) >> (-4 * v14)))
        {
          char v15 = (60 - 4 * v14) & 0xFC;
          uint64_t v16 = *(void *)(v25 + 8 * ((v13 >> v15) & 0xF));
          if (v16)
          {
            int v17 = v14 + 2;
            do
            {
              char v15 = (64 - 4 * v17) & 0xFC;
              uint64_t v16 = *(void *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v15) & 0xF));
              ++v17;
            }
            while ((v16 & 1) != 0);
          }
          if (v16)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(void *)v16 + 16))(v16, v13, ~(-1 << v15)))
            {
              data_map_set_offset_for_id(*(void *)(a1 + 192), v13, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * v5) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
      ++v5;
    }
  }
  else
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (i >= result) {
        break;
      }
      int v20 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v21 = v20[3] + v20[2] * i;
      bit_vector_set_10635(v20 + 525, (v21 >> 20));
      unint64_t v22 = (v21 + 1040) >> 20;
      if (v22 > (v21 >> 20))
      {
        unsigned int v23 = (v21 >> 20) + 1;
        do
        {
          unint64_t v24 = v23;
          bit_vector_set_10635(v20 + 525, v23++);
        }
        while (v22 > v24);
      }
      unint64_t v19 = _windowsResolvePtr((uint64_t)(v20 + 5), v20[3] + v20[2] * i, 1040);
      data_map_set_offset_for_id(*(void *)(a1 + 192), *(unsigned int *)(v19 + 1032), ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
    }
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16getDataForOffsetEjPj(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    unint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *unint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 1024;
  }
  *a3 = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14setVectorStoreEP10data_map_s(uint64_t result, uint64_t a2)
{
  *(void *)(result + 192) = a2;
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE11storageSizeEv(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 96) + 32) + 48);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE24aNNForDebugProcessResultEPvU13block_pointerFvjjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  unint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v25, *((unsigned int *)v25 + 2), *((float *)v25 + 3));
        ++v25;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v16, *((unsigned int *)v16 + 2), *((float *)v16 + 3));
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          unint64_t v21 = v15;
          int v22 = *__error();
          unsigned int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            unint64_t v24 = __p;
            if (v49 < 0) {
              unint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        ++v16;
      }
      while (v16 != v12);
    }
  }
  int v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      float v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    float v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE23aNNForTestProcessResultEPvU13block_pointerFvjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6345920;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfbPv(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9, a4, a7, a8, 0, a9);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[1020], a2[1021], a2[1022], a2[1023]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  int v126 = v11;
  unsigned int v12 = 10 * v11;
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v13 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10000;
  }
  if (v12 <= v14) {
    unsigned int v12 = v14;
  }
  unsigned int v15 = v12
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v146 = 0;
  __int16 v147 = &v146;
  if (v17 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v17;
  }
  int v149 = 0;
  uint64_t v148 = 0x2000000000;
  uint64_t v142 = 0;
  __int16 v143 = &v142;
  int v145 = 0;
  uint64_t v144 = 0x2000000000;
  uint64_t v141 = 0;
  long long v139 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v139);
  double Current = CFAbsoluteTimeGetCurrent();
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1) <= v12)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    LODWORD(v125) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    uint64_t v62 = 0;
    int v63 = 0;
    uint64_t v64 = *(void *)(a1 + 48);
    while (1)
    {
      if (v63 == *(_DWORD *)(v64 + 40)) {
        goto LABEL_98;
      }
      ++*((_DWORD *)v147 + 6);
      if (*(_DWORD *)(v64 + 40) <= v62) {
        break;
      }
      unint64_t v65 = _windowsResolvePtr(*(void *)(v64 + 32) + 40, *(void *)(*(void *)(v64 + 32) + 24) + *(void *)(*(void *)(v64 + 32) + 16) * v62, 1040);
      unint64_t v66 = v65;
      unint64_t v67 = *(unsigned int *)(v65 + 1032);
      _Q0 = 0uLL;
      unint64_t v69 = -8;
      uint64_t v70 = (float16x8_t *)a2;
      unsigned __int8 v71 = (float16x8_t *)v65;
      do
      {
        float16x8_t v72 = *v70++;
        float16x8_t v73 = v72;
        float16x8_t v74 = *v71++;
        float16x8_t v75 = vsubq_f16(v73, v74);
        _Q0 = vmlaq_f16(_Q0, v75, v75);
        v69 += 8;
      }
      while (v69 < 0x1F8);
      if (*((void *)&v139 + 1))
      {
        uint8x8_t v76 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v139 + 8));
        v76.i16[0] = vaddlv_u8(v76);
        if (v76.u32[0] > 1uLL)
        {
          if (*((void *)&v139 + 1) <= v67) {
            unint64_t v77 = v67 % *((void *)&v139 + 1);
          }
          else {
            unint64_t v77 = *(unsigned int *)(v65 + 1032);
          }
        }
        else
        {
          unint64_t v77 = (DWORD2(v139) - 1) & v67;
        }
        float v78 = *(uint64_t **)(v139 + 8 * v77);
        if (v78)
        {
          float v78 = (uint64_t *)*v78;
          if (v78)
          {
            if (v76.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v80 = v78[1];
                if (v80 == v67)
                {
                  if (*((_DWORD *)v78 + 4) == v67) {
                    goto LABEL_85;
                  }
                }
                else if ((v80 & (*((void *)&v139 + 1) - 1)) != v77)
                {
                  goto LABEL_84;
                }
                float v78 = (uint64_t *)*v78;
                if (!v78) {
                  goto LABEL_85;
                }
              }
            }
            do
            {
              unint64_t v79 = v78[1];
              if (v79 == v67)
              {
                if (*((_DWORD *)v78 + 4) == v67) {
                  break;
                }
              }
              else
              {
                if (v79 >= *((void *)&v139 + 1)) {
                  v79 %= *((void *)&v139 + 1);
                }
                if (v79 != v77) {
                  goto LABEL_84;
                }
              }
              float v78 = (uint64_t *)*v78;
            }
            while (v78);
          }
        }
      }
      else
      {
LABEL_84:
        float v78 = 0;
      }
LABEL_85:
      __asm { FCVT            S1, H0 }
      _H2 = _Q0.i16[1];
      __asm { FCVT            S2, H2 }
      float v88 = _S1 + _S2;
      LOWORD(_S2) = _Q0.i16[2];
      __asm { FCVT            S2, H2 }
      _H3 = _Q0.i16[3];
      __asm { FCVT            S3, H3 }
      float v92 = v88 + (float)(_S2 + _S3);
      LOWORD(_S2) = _Q0.i16[4];
      __asm { FCVT            S2, H2 }
      LOWORD(_S3) = _Q0.i16[5];
      __asm { FCVT            S3, H3 }
      float v95 = _S2 + _S3;
      LOWORD(_S3) = _Q0.i16[6];
      __asm { FCVT            S3, H3 }
      _H0 = _Q0.i16[7];
      __asm { FCVT            S0, H0 }
      float v99 = (float)(v92 + (float)(v95 + _S3)) + _S0;
      if (a6 == 0.0 || v99 <= a6)
      {
        if (v78)
        {
          int v101 = *__error();
          float v102 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v67;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v99;
            _os_log_impl(&dword_1BD672000, v102, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v101;
        }
        *(void *)keyExistsAndHasValidFormat = *(void *)(v66 + 1024);
        *(_DWORD *)&Boolean keyExistsAndHasValidFormat[8] = v67;
        *(float *)&keyExistsAndHasValidFormat[12] = v99;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(a4, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v78)
        {
          int v103 = *__error();
          BOOL v104 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v67;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v99;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v104, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v103;
        }
        ++*((_DWORD *)v143 + 6);
      }
      uint64_t v62 = (v62 + 1);
      int v63 = v62;
      if (v64 != *(void *)(a1 + 48))
      {
        BOOL v122 = __si_assert_copy_extra_329();
        float v120 = v122;
        BOOL v123 = "";
        if (v122) {
          BOOL v123 = v122;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v123);
        goto LABEL_128;
      }
    }
    float v119 = __si_assert_copy_extra_329();
    float v120 = v119;
    BOOL v121 = "";
    if (v119) {
      BOOL v121 = v119;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v121);
LABEL_128:
    free(v120);
    if (__valid_fs(-1)) {
      uint64_t v124 = 2989;
    }
    else {
      uint64_t v124 = 3072;
    }
    *(_DWORD *)uint64_t v124 = -559038737;
    abort();
  }
  if (!AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v22 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = 40;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v24 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      int v25 = v24;
    }
    else {
      int v25 = 45;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v26 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v27 = keyExistsAndHasValidFormat[0];
    int v28 = 8 * v26;
    int v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v30 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12) {
      char v32 = 18;
    }
    else {
      char v32 = v30;
    }
    char v33 = v32 - 3;
    unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    if (v31) {
      char v35 = v33;
    }
    else {
      char v35 = 17;
    }
    unsigned int v36 = v34 >> v35;
    if (v36 <= 8) {
      int v37 = 8;
    }
    else {
      int v37 = v36;
    }
    int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    if (v27) {
      int v39 = v28;
    }
    else {
      int v39 = 800;
    }
    unsigned int v40 = v39 * v38 / (v29 * v37);
    if (v23 < v40) {
      unsigned int v40 = v23;
    }
    if (v40 <= v20) {
      CFIndex AppIntegerValue = v20;
    }
    else {
      CFIndex AppIntegerValue = v40;
    }
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v46 = *(void *)(a1 + 80);
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 88);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = *(void *)(a1 + 96);
  long long v47 = *(std::__shared_weak_count **)(a1 + 104);
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
  uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
  uint64_t v136 = 0;
  long long v137 = 0;
  uint64_t v138 = 0;
  BOOL v150 = &v136;
  unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
  if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
  {
    long long v134 = 0;
    long long v135 = 0;
    uint64_t v133 = 0;
  }
  else
  {
    do
    {
      int v52 = *v50;
      v50 += 2;
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v150, v52);
    }
    while (v50 != v49);
    long long v53 = v136;
    long long v134 = 0;
    long long v135 = 0;
    uint64_t v133 = 0;
    int64_t v54 = v137 - (unsigned char *)v136;
    if (v137 != v136)
    {
      if (v54 < 0) {
        abort();
      }
      long long v55 = (char *)operator new(v137 - (unsigned char *)v136);
      uint64_t v56 = &v55[4 * (v54 >> 2)];
      uint64_t v133 = v55;
      long long v135 = v56;
      memcpy(v55, v53, v54);
      long long v134 = v56;
    }
  }
  v128[0] = MEMORY[0x1E4F143A8];
  v128[1] = 1174405120;
  v128[2] = ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v128[3] = &unk_1F1816490;
  v128[6] = a1;
  v128[7] = a2;
  v128[4] = &v146;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v129, (uint64_t)&v139);
  float v132 = a6;
  v128[5] = &v142;
  uint64_t v131 = a4;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v133, v128);
  if (v133)
  {
    long long v134 = v133;
    operator delete(v133);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
  float v116 = v130;
  if (v130)
  {
    do
    {
      int v117 = (void *)*v116;
      operator delete(v116);
      float v116 = v117;
    }
    while (v117);
  }
  float v118 = v129;
  uint64_t v129 = 0;
  if (v118) {
    operator delete(v118);
  }
  if (v136)
  {
    long long v137 = v136;
    operator delete(v136);
  }
  if (*(void *)keyExistsAndHasValidFormat)
  {
    *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  unint64_t v125 = v51 >> 3;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_98:
  int v105 = *__error();
  float v106 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
  {
    int v107 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    int v108 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    int v109 = *((_DWORD *)v143 + 6);
    int v110 = *((_DWORD *)v147 + 6);
    uint64_t v111 = (uint64_t)(a4[2] - a4[1]) >> 4;
    CFAbsoluteTime v112 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v126;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v107;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v125;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v108;
    __int16 v152 = 1024;
    int v153 = v109;
    __int16 v154 = 1024;
    int v155 = v110;
    __int16 v156 = 2048;
    uint64_t v157 = v111;
    __int16 v158 = 2048;
    CFAbsoluteTime v159 = v112 - Current;
    _os_log_impl(&dword_1BD672000, v106, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v105;
  float v113 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      int v114 = (void *)*v113;
      operator delete(v113);
      float v113 = v114;
    }
    while (v114);
  }
  BOOL v115 = (void *)v139;
  *(void *)&long long v139 = 0;
  if (v115) {
    operator delete(v115);
  }
  _Block_object_dispose(&v142, 8);
  _Block_object_dispose(&v146, 8);
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v5 = *a3;
  uint64_t v6 = *(void **)(*(void *)(v4 + 48) + 32);
  unint64_t v7 = v6[3] + v6[2] * v5;
  bit_vector_set_10635(v6 + 525, (v7 >> 20));
  unint64_t v8 = (v7 + 1040) >> 20;
  if (v8 > (v7 >> 20))
  {
    unsigned int v9 = (v7 >> 20) + 1;
    do
    {
      unint64_t v10 = v9;
      bit_vector_set_10635(v6 + 525, v9++);
    }
    while (v8 > v10);
  }
  unint64_t v11 = _windowsResolvePtr((uint64_t)(v6 + 5), v6[3] + v6[2] * v5, 1040);
  unint64_t v12 = v11;
  unsigned int v13 = *(float16x8_t **)(a1 + 56);
  _Q0 = 0uLL;
  unint64_t v15 = -8;
  unsigned int v16 = (float16x8_t *)v11;
  do
  {
    float16x8_t v17 = *v13++;
    float16x8_t v18 = v17;
    float16x8_t v19 = *v16++;
    float16x8_t v20 = vsubq_f16(v18, v19);
    _Q0 = vmlaq_f16(_Q0, v20, v20);
    v15 += 8;
  }
  while (v15 < 0x1F8);
  __asm { FCVT            S1, H0 }
  _H2 = _Q0.i16[1];
  __asm { FCVT            S2, H2 }
  float v28 = _S1 + _S2;
  LOWORD(_S2) = _Q0.i16[2];
  __asm { FCVT            S2, H2 }
  _H3 = _Q0.i16[3];
  __asm { FCVT            S3, H3 }
  float v32 = v28 + (float)(_S2 + _S3);
  LOWORD(_S2) = _Q0.i16[4];
  __asm { FCVT            S2, H2 }
  LOWORD(_S3) = _Q0.i16[5];
  __asm { FCVT            S3, H3 }
  float v35 = _S2 + _S3;
  LOWORD(_S3) = _Q0.i16[6];
  __asm { FCVT            S3, H3 }
  _H0 = _Q0.i16[7];
  __asm { FCVT            S0, H0 }
  float v39 = (float)(v32 + (float)(v35 + _S3)) + _S0;
  unint64_t v40 = *(unsigned int *)(v11 + 1032);
  int8x8_t v41 = *(int8x8_t *)(a1 + 72);
  if (v41)
  {
    uint8x8_t v42 = (uint8x8_t)vcnt_s8(v41);
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.u32[0] > 1uLL)
    {
      unint64_t v43 = *(unsigned int *)(v11 + 1032);
      if (*(void *)&v41 <= v40) {
        unint64_t v43 = v40 % *(void *)&v41;
      }
    }
    else
    {
      unint64_t v43 = (v41.i32[0] - 1) & v40;
    }
    int v44 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v43);
    if (v44)
    {
      int v44 = (uint64_t *)*v44;
      if (v44)
      {
        if (v42.u32[0] < 2uLL)
        {
          uint64_t v45 = *(void *)&v41 - 1;
          while (1)
          {
            uint64_t v47 = v44[1];
            if (v47 == v40)
            {
              if (*((_DWORD *)v44 + 4) == v40) {
                goto LABEL_27;
              }
            }
            else if ((v47 & v45) != v43)
            {
              goto LABEL_26;
            }
            int v44 = (uint64_t *)*v44;
            if (!v44) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v46 = v44[1];
          if (v46 == v40)
          {
            if (*((_DWORD *)v44 + 4) == v40) {
              break;
            }
          }
          else
          {
            if (v46 >= *(void *)&v41) {
              v46 %= *(void *)&v41;
            }
            if (v46 != v43) {
              goto LABEL_26;
            }
          }
          int v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
    }
  }
  else
  {
LABEL_26:
    int v44 = 0;
  }
LABEL_27:
  float v48 = *(float *)(a1 + 112);
  if (v48 == 0.0 || v39 <= v48)
  {
    if (v44)
    {
      int v50 = *__error();
      unint64_t v51 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v55) = 67109376;
        HIDWORD(v55) = v40;
        *(_WORD *)uint64_t v56 = 2048;
        *(double *)&v56[2] = v39;
        _os_log_impl(&dword_1BD672000, v51, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", (uint8_t *)&v55, 0x12u);
      }
      *__error() = v50;
    }
    uint64_t v55 = *(void *)(v12 + 1024);
    *(_DWORD *)uint64_t v56 = v40;
    *(float *)&v56[4] = v39;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(void **)(a1 + 104), (uint64_t)&v55);
  }
  else
  {
    if (v44)
    {
      int v52 = *__error();
      long long v53 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        double v54 = *(float *)(a1 + 112);
        LODWORD(v55) = 67109632;
        HIDWORD(v55) = v40;
        *(_WORD *)uint64_t v56 = 2048;
        *(double *)&v56[2] = v39;
        __int16 v57 = 2048;
        double v58 = v54;
        _os_log_impl(&dword_1BD672000, v53, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", (uint8_t *)&v55, 0x1Cu);
      }
      *__error() = v52;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE20createCandidateQueueEj()
{
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE10aNNForTestEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvjfEj(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  uint64_t v6 = __si_assert_copy_extra_329();
  unint64_t v7 = v6;
  unint64_t v8 = "";
  if (v6) {
    unint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    unsigned int v14 = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    unint64_t v15 = &unk_1E63458F8;
    uint64_t v16 = a9;
    operator new();
  }
  unsigned int v9 = __si_assert_copy_extra_329();
  unint64_t v10 = v9;
  unint64_t v11 = "";
  if (v9) {
    unint64_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16restoreUpdateSetEP15PostingBaseInfoP14store_stream_t()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3127, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14storeUpdateSetEP15RelativePostingP14store_stream_t()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3122, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6renameEPKc(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 144);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 96);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 87) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 64), *(void *)(v16 + 72));
  }
  else {
    std::string buf = *(std::string *)(v16 + 64);
  }
  MEMORY[0x1C1880BF0](v16 + 64, a2);
  int v17 = *__error();
  float16x8_t v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    float16x8_t v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__s, v16);
    float16x8_t v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)int v24 = 136315394;
    int v25 = v19;
    __int16 v26 = 2080;
    int v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  fd_rename(*(void *)(*(void *)(v16 + 32) + 40), a2);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE13makePurgeableEv(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 96);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(void *)(v2 + 32) + 40));
  size_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12makeReadOnlyEv(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 96);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v5);
      unint64_t v8 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      unsigned int v22 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    uint64_t v9 = *(void *)(v5 + 32);
    fd_make_readonly(*(void *)(v9 + 40));
    uint64_t v10 = *(void *)(v9 + 40);
    if (v10)
    {
      do
      {
        int v11 = fchmodat(*(_DWORD *)(v10 + 44), *(const char **)(v10 + 72), 0x100u, 2048);
        uint64_t v12 = g_prot_error_callback;
        if (v11 != -1 || g_prot_error_callback == 0) {
          break;
        }
        uint64_t v14 = *(unsigned int *)(v10 + 40);
        unint64_t v15 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v12 + 16))(v12, v14, *v15, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 136);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a1 + 144);
    int v17 = *(std::__shared_weak_count **)(a1 + 152);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
    (*(void (**)(uint64_t))(*(void *)v18 + 120))(v18);
    *(unsigned char *)(a1 + 208) = 1;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE8truncateEv(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(*(void *)(a1 + 96));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    int v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 144);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 152);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

BOOL _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6unlinkEv(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  int v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 96);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v15 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  BOOL v10 = vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(v6 + 32));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v10;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE7subvertEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    BOOL v10 = __si_assert_copy_extra_329();
    int v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 152);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  int v7 = *(std::__shared_weak_count **)(a2 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 176))(v6, v9);
  vi_onefixedsize_disk_allocator::subvert(*(void *)(*(void *)(a2 + 96) + 32), *(void *)(*(void *)(a1 + 96) + 32));
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14compactForTestEP22AnyVectorIndexInstancePVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    unint64_t v15 = "";
    if (v13) {
      unint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  int v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(a1 + 48, a2 + 48, a3);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    uint64_t v16 = __si_assert_copy_extra_329();
    int v17 = v16;
    __int16 v18 = "";
    if (v16) {
      __int16 v18 = v16;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2712, "target->nVectors() == 0", v18);
    free(v17);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = operator new(8uLL);
  v31[0] = v6;
  *int v6 = a1;
  v31[1] = v6 + 1;
  v31[2] = v6 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v31);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v8 = *(void *)(a1 + 80);
  int v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  int v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v30[0] = v8;
  v30[1] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEE(a2, v30);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEE(a2, v30);
  }
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  long long v27 = 0u;
  uint64_t v25 = v10;
  __int16 v26 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(std::__shared_weak_count **)(a1 + 56);
  v24[0] = v11;
  v24[1] = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
  }
  char v13 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  __int16 v20 = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  int v21 = &__block_descriptor_tmp_531;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v34 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v32, (uint64_t)&v27);
    long long v35 = v32;
    long long v36 = v33;
    if (!(void)v33) {
      break;
    }
    v20((uint64_t)v19, (unsigned int *)&v35, (BOOL *)&v34);
  }
  while (!v34);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v29);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  unint64_t v15 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v31[0]) {
    operator delete(v31[0]);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(const void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v7 = v5 - *(void *)a3;
  if (v5 == *(void *)a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      goto LABEL_197;
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a3);
    size_t v9 = v7;
    uint64_t v7 = (uint64_t)&v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v9);
  }
  uint64_t v144 = 0;
  int v145 = 0;
  _ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi(&v144, a1, 0);
  uint64_t v10 = v7 - (void)v8;
  if ((char *)v7 == v8)
  {
    int v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF9) {
      goto LABEL_197;
    }
    uint64_t v11 = (std::__shared_weak_count **)operator new(2 * v10);
    bzero(v11, 2 * v10);
    int v12 = (std::__shared_weak_count **)((char *)v11 + 2 * v10);
  }
  uint64_t v110 = a1;
  size_t __sz = v7 - (void)v8;
  unsigned int v114 = ((uint64_t (*)(std::__shared_weak_count *))v144->__get_deleter)(v144);
  int v108 = (char *)v7;
  unint64_t v109 = v10 >> 3;
  uint64_t v111 = a2;
  CFAbsoluteTime v112 = v11;
  std::string __p = v8;
  if ((char *)v7 != v8)
  {
    if ((unint64_t)(v10 >> 3) <= 1) {
      unint64_t v13 = 1;
    }
    else {
      unint64_t v13 = v10 >> 3;
    }
    uint64_t v14 = v11 + 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v8 + 16))(keyExistsAndHasValidFormat);
      unint64_t v15 = v144;
      int v17 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      uint64_t v16 = v122;
      if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v17 == v15) {
          goto LABEL_16;
        }
      }
      else if (v17 == v15)
      {
        goto LABEL_16;
      }
      *(void *)keyExistsAndHasValidFormat = 0;
      BOOL v122 = 0;
      uint64_t v18 = *(void *)v8;
      uint64_t v142 = v144;
      __int16 v143 = v145;
      if (v145) {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(Boolean *__return_ptr))(*(void *)v18 + 40))(keyExistsAndHasValidFormat);
      int v19 = v143;
      if (v143)
      {
        if (!atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      __int16 v20 = v122;
      if (v122) {
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v22 = *v14;
      *(v14 - 1) = v21;
      *uint64_t v14 = v20;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        uint64_t v23 = v122;
        if (v122)
        {
LABEL_29:
          if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      else
      {
        uint64_t v23 = v122;
        if (v122) {
          goto LABEL_29;
        }
      }
LABEL_16:
      v14 += 2;
      v8 += 8;
      if (!--v13)
      {
        if (v109 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v10 >> 3;
        }
        uint64_t v25 = __p;
        __int16 v26 = v112 + 1;
        while (1)
        {
          uint64_t v27 = (uint64_t)*(v26 - 1);
          if (v27)
          {
            uint64_t v28 = *(void *)v25;
            int v140 = v144;
            uint64_t v141 = v145;
            if (v145) {
              atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v138 = v27;
            long long v139 = *v26;
            if (v139) {
              atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t *))(*(void *)v28 + 48))(v28, &v140, &v138);
            uint64_t v29 = v139;
            if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
              unsigned int v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            else
            {
              unsigned int v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
LABEL_52:
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          int v31 = v122;
          uint64_t v32 = *(unsigned int *)(*(void *)keyExistsAndHasValidFormat + 72);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          long long v33 = v122;
          int v34 = *(_DWORD *)(*(void *)keyExistsAndHasValidFormat + 68);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          if (v34 != v114)
          {
            float v91 = __si_assert_copy_extra_329();
            float v92 = v91;
            BOOL v93 = "";
            if (v91) {
              BOOL v93 = v91;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2199, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v93);
LABEL_185:
            free(v92);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v13 += v32;
          v25 += 8;
          v26 += 2;
          if (!--v24) {
            goto LABEL_62;
          }
        }
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
    __int16 v20 = v122;
    if (!v122) {
      goto LABEL_26;
    }
LABEL_25:
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_26;
  }
  unint64_t v13 = 0;
LABEL_62:
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v36 = AppIntegerValue;
  }
  else {
    unsigned int v36 = 45;
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v37 = CFPreferencesGetAppIntegerValue(@"IVFTrainingTimeBudget", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    double v38 = (double)v37;
  }
  else {
    double v38 = 30.0;
  }
  unint64_t v40 = v111;
  float v39 = v112;
  int8x8_t v41 = __p;
  if (v13 >> 4 < 0x271 || v13 < v36 * (unint64_t)v114 * v36 * (unint64_t)v114 / 0x64)
  {
LABEL_87:
    if (!v112) {
      goto LABEL_95;
    }
    goto LABEL_88;
  }
  unsigned __int8 v42 = atomic_exchange((atomic_uchar *volatile)(v110 + 72), 1u);
  if ((v42 & 1) == 0 && *(void *)(v110 + 96))
  {
    int v94 = __si_assert_copy_extra_329();
    float v95 = v94;
    float v96 = "";
    if (v94) {
      float v96 = v94;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 737, "_trainingQuantizer == nullptr", v96);
    free(v95);
    if (__valid_fs(-1)) {
      uint64_t v97 = 2989;
    }
    else {
      uint64_t v97 = 3072;
    }
    *(_DWORD *)uint64_t v97 = -559038737;
    goto LABEL_197;
  }
  FdPtrForFile = (atomic_uint *)QuantizerManager<float,768>::createFdPtrForFile(v110, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, (unsigned __int8 *)(v110 + 72));
    goto LABEL_84;
  }
  int v44 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v44);
  if (v42)
  {
LABEL_84:
    int v56 = *__error();
    __int16 v57 = _SILogForLogForCategory(16);
    os_log_type_t v58 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v57, v58))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1BD672000, v57, v58, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v56;
    goto LABEL_87;
  }
  unsigned int v106 = v36;
  uint64_t v45 = _SILogForLogForCategory(0);
  os_signpost_id_t v46 = os_signpost_id_make_with_pointer(v45, 0);
  uint64_t v47 = _SILogForLogForCategory(0);
  unint64_t v101 = v46 - 1;
  if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    float v48 = v47;
    if (os_signpost_enabled(v47))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v48, OS_SIGNPOST_INTERVAL_BEGIN, v46, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  os_signpost_id_t spid = v46;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  uint64_t v127 = 0;
  long long v126 = 0u;
  long long v125 = 0u;
  memset(v124, 0, sizeof(v124));
  BOOL v122 = 0;
  uint64_t v105 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v103 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v128 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v102 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v123 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v49 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v50 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)keyExistsAndHasValidFormat = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v50;
  BOOL v122 = 0;
  unint64_t v51 = (std::ios_base *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v51, v124);
  v51[1].__vftable = 0;
  v51[1].__fmtflags_ = -1;
  uint64_t v52 = v49[5];
  uint64_t v123 = v49[4];
  *(void *)((char *)&v124[-1] + *(void *)(v123 - 24)) = v52;
  *(void *)keyExistsAndHasValidFormat = v49[1];
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v49[6];
  uint64_t v128 = v103;
  *(void *)keyExistsAndHasValidFormat = v105;
  uint64_t v123 = v102;
  std::streambuf::basic_streambuf();
  uint64_t v104 = MEMORY[0x1E4FBA470] + 16;
  v124[0] = MEMORY[0x1E4FBA470] + 16;
  long long v125 = 0u;
  long long v126 = 0u;
  LODWORD(v127) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"[", 1);
  unint64_t v40 = v111;
  if (v108 != __p)
  {
    long long v53 = __p;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v53 + 24))(block);
      double v54 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
      uint64_t v55 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      v53 += 8;
    }
    while (v53 != v108);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"]", 1);
  int v61 = *__error();
  uint64_t v62 = _SILogForLogForCategory(16);
  os_log_type_t v63 = 2 * (dword_1E9FC90E4 < 4);
  int8x8_t v41 = __p;
  if (os_log_type_enabled(v62, v63))
  {
    std::stringbuf::str();
    uint64_t v64 = v149[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v64;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v114;
    _os_log_impl(&dword_1BD672000, v62, v63, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v149[7] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  *__error() = v61;
  double Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v38)
  {
    int v68 = 0;
LABEL_147:
    float v39 = v112;
    uint64_t v66 = v110;
    goto LABEL_149;
  }
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
  uint64_t v66 = v110;
  uint64_t v119 = v110;
  float v120 = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(buf, 0, 24);
  if (v108 != __p)
  {
    if ((__sz & 0x8000000000000000) == 0)
    {
      unint64_t v67 = (char *)operator new(__sz);
      *(void *)std::string buf = v67;
      *(void *)&buf[16] = &v67[8 * v109];
      int8x8_t v41 = __p;
      memcpy(v67, __p, __sz);
      *(void *)&uint8_t buf[8] = &v67[8 * v109];
      uint64_t v66 = v110;
      goto LABEL_118;
    }
LABEL_197:
    abort();
  }
  unint64_t v67 = 0;
LABEL_118:
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
  int v69 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v119, (uint64_t *)buf);
  if (v67)
  {
    *(void *)&uint8_t buf[8] = v67;
    operator delete(v67);
  }
  if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  float v39 = v112;
  if (v69)
  {
    _ZN16QuantizerManagerIDF16_Li512EE20lastTrainedQuantizerEv(block, v66);
    unsigned int v70 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
    unsigned __int8 v71 = (std::__shared_weak_count *)v148;
    if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    if (v13 < v36 * (unint64_t)v70 * v36 * (unint64_t)v70 / 0x64)
    {
      int v68 = 1;
LABEL_129:
      unsigned int v72 = v68;
      unint64_t v40 = v111;
      while (1)
      {
        int v68 = v72;
        if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
          goto LABEL_146;
        }
        v118[0] = v110;
        v118[1] = (uint64_t)v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v115 = 0;
        float v116 = 0;
        int v117 = 0;
        if (v108 != __p) {
          break;
        }
        int v74 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v118, (uint64_t *)&v115);
        if (v40) {
          goto LABEL_138;
        }
LABEL_140:
        if (v74)
        {
          ++v72;
          block[0] = 0;
          int v75 = CFPreferencesGetAppIntegerValue(@"IVFMaxTrainingIteration", @"com.apple.Spotlight", block);
          unsigned int v76 = block[0] ? v75 : 3;
          if (v72 <= v76) {
            continue;
          }
        }
        ++v68;
        goto LABEL_146;
      }
      if ((__sz & 0x8000000000000000) != 0) {
        goto LABEL_197;
      }
      float16x8_t v73 = (char *)operator new(__sz);
      BOOL v115 = v73;
      int v117 = &v73[8 * v109];
      memcpy(v73, __p, __sz);
      float v116 = &v73[8 * v109];
      int v74 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v118, (uint64_t *)&v115);
      float v116 = v73;
      operator delete(v73);
      unint64_t v40 = v111;
      if (!v111) {
        goto LABEL_140;
      }
LABEL_138:
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      goto LABEL_140;
    }
    int v68 = 1;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
        goto LABEL_129;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
      uint64_t v119 = v110;
      float v120 = v111;
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(buf, 0, 24);
      if (v108 == __p)
      {
        int v87 = 0;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_197;
        }
        int v87 = (char *)operator new(__sz);
        *(void *)std::string buf = v87;
        *(void *)&buf[16] = &v87[8 * v109];
        memcpy(v87, __p, __sz);
        *(void *)&uint8_t buf[8] = &v87[8 * v109];
        unsigned int v36 = v106;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
      int v88 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v119, (uint64_t *)buf);
      if (v87)
      {
        *(void *)&uint8_t buf[8] = v87;
        operator delete(v87);
      }
      unint64_t v40 = v111;
      if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      ++v68;
      if (!v88) {
        break;
      }
      _ZN16QuantizerManagerIDF16_Li512EE20lastTrainedQuantizerEv(block, v110);
      unsigned int v89 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
      float v90 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      if (v13 < v36 * (unint64_t)v89 * v36 * (unint64_t)v89 / 0x64) {
        goto LABEL_129;
      }
    }
LABEL_146:
    int8x8_t v41 = __p;
    goto LABEL_147;
  }
  int v68 = 1;
LABEL_149:
  unsigned __int8 v77 = atomic_load((unsigned __int8 *)(v66 + 72));
  if ((v77 & 1) == 0)
  {
    unint64_t v98 = __si_assert_copy_extra_329();
    float v92 = v98;
    float v99 = "";
    if (v98) {
      float v99 = v98;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 814, "_training.test()", v99);
    goto LABEL_185;
  }
  if (*(void *)(v66 + 96))
  {
    float v78 = *(NSObject **)(v66 + 16);
    *(void *)block = MEMORY[0x1E4F143A8];
    uint64_t v148 = 0x40000000;
    *(void *)int v149 = ___ZN16QuantizerManagerIDF16_Li512EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v149[8] = &__block_descriptor_tmp_554;
    *(void *)&v149[16] = v66;
    dispatch_sync(v78, block);
  }
  atomic_store(0, (unsigned __int8 *)(v66 + 72));
  _ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi(block, v66, 0);
  unsigned int v79 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
  uint64_t v80 = (std::__shared_weak_count *)v148;
  if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  uint64_t v81 = _SILogForLogForCategory(0);
  if (v101 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    BOOL v82 = v81;
    if (os_signpost_enabled(v81))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v82, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  int v83 = *__error();
  uint64_t v84 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v85 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v13;
    LOWORD(v148) = 1024;
    *(_DWORD *)((char *)&v148 + 2) = v79;
    HIWORD(v148) = 1024;
    *(_DWORD *)int v149 = v13 / v79;
    *(_WORD *)&v149[4] = 1024;
    *(_DWORD *)&v149[6] = v68;
    *(_WORD *)&v149[10] = 2048;
    *(double *)&v149[12] = v85 - Current;
    _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v83;
  *(void *)keyExistsAndHasValidFormat = *MEMORY[0x1E4FBA408];
  uint64_t v86 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v123 = v86;
  v124[0] = v104;
  if (SBYTE7(v126) < 0) {
    operator delete((void *)v125);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1880F90](&v128);
  if (v39)
  {
LABEL_88:
    while (v12 != v39)
    {
      uint64_t v59 = *(v12 - 1);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v12 -= 2;
    }
    operator delete(v39);
  }
LABEL_95:
  int v60 = v145;
  if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v41) {
    operator delete(v41);
  }
  if (v40)
  {
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

unsigned int *___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  uint64_t v5 = **((void **)a2 + 3);
  uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(*(void *)(a1 + 32), a2[2], *((void **)a2 + 2), *a2, 0, *((float *)a2 + 1));
  *((void *)result + 128) = v5;
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

unsigned int *_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  unsigned int v123 = a4;
  float v122 = a6;
  if (*(unsigned char *)(a1 + 160))
  {
    float v96 = __si_assert_copy_extra_329();
    uint64_t v97 = v96;
    unint64_t v98 = "";
    if (v96) {
      unint64_t v98 = v96;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v98);
    goto LABEL_127;
  }
  if (!a2)
  {
    float v99 = __si_assert_copy_extra_329();
    uint64_t v97 = v99;
    float v100 = "";
    if (v99) {
      float v100 = v99;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v100);
    goto LABEL_127;
  }
  if (a5)
  {
    uint64_t v9 = a4;
    if (a4 == -1) {
      goto LABEL_114;
    }
    goto LABEL_32;
  }
  unsigned int v10 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj(a1, (uint64_t)a3, (int *)&v123, &v122, a2);
  uint64_t v9 = v123;
  if (v123 == -1)
  {
LABEL_114:
    unint64_t v101 = __si_assert_copy_extra_329();
    uint64_t v102 = v101;
    uint64_t v103 = "";
    if (v101) {
      uint64_t v103 = v101;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v103);
    goto LABEL_117;
  }
  if (v10 == -1)
  {
LABEL_32:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 88);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v120 = a2;
    unsigned int v30 = *(std::__shared_weak_count **)(a1 + 104);
    float v118 = *(_DWORD **)(a1 + 96);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v116 = v30;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v32 = *(void **)(v31 + 32);
    uint64_t v115 = (uint64_t)(v32 + 1);
    unint64_t v33 = v32[2];
    uint64_t v34 = v32[7];
    uint64_t v35 = v34 + v33;
    int v117 = v29;
    if (v34 + v33 >= v32[6])
    {
      if (!_storage_array_Expand(v115))
      {
        unint64_t v40 = 0;
        goto LABEL_41;
      }
      uint64_t v34 = v32[7];
      uint64_t v35 = v34 + v33;
    }
    v32[7] = v35;
    unint64_t v36 = v32[3];
    bit_vector_set_10635(v32 + 525, 0);
    if (v36 >= 0x100000)
    {
      unint64_t v37 = v36 >> 20;
      unsigned int v38 = 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v32 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = (v34 - v32[3]) / v33;
LABEL_41:
    unint64_t v41 = v32[2];
    if (v33 <= 0x40F && v41 <= 0x40F)
    {
      LODWORD(v42) = 1040;
      while (1)
      {
        unint64_t v43 = v32[7] + v41;
        if (v43 < v32[6]) {
          goto LABEL_46;
        }
        if (_storage_array_Expand(v115)) {
          break;
        }
LABEL_44:
        unint64_t v41 = v32[2];
        unint64_t v42 = (v42 - v41);
        if (v41 >= v42) {
          goto LABEL_52;
        }
      }
      unint64_t v43 = v32[7] + v41;
LABEL_46:
      v32[7] = v43;
      unint64_t v44 = v32[3];
      bit_vector_set_10635(v32 + 525, 0);
      if (v44 >= 0x100000)
      {
        unint64_t v45 = v44 >> 20;
        unsigned int v46 = 1;
        do
        {
          unint64_t v47 = v46;
          bit_vector_set_10635(v32 + 525, v46++);
        }
        while (v45 > v47);
      }
      goto LABEL_44;
    }
LABEL_52:
    unint64_t v48 = v32[3] + v41 * v40;
    uint64_t v49 = v32 + 525;
    bit_vector_set_10635(v49, (v48 >> 20));
    unint64_t v50 = (v48 + 1040) >> 20;
    if (v50 > (v48 >> 20))
    {
      unsigned int v51 = (v48 >> 20) + 1;
      do
      {
        unint64_t v52 = v51;
        bit_vector_set_10635(v49, v51++);
      }
      while (v50 > v52);
    }
    uint64_t v53 = *(unsigned int *)(v31 + 40);
    unint64_t v54 = v40;
    if (v40 != v53)
    {
      int v55 = *__error();
      int v56 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        int v93 = *(_DWORD *)(v31 + 40);
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "newEntry";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 1882;
        *(_WORD *)&v128[4] = 2048;
        *(void *)&v128[6] = v40;
        *(_WORD *)&v128[14] = 1024;
        *(_DWORD *)&v128[16] = v93;
        _os_log_error_impl(&dword_1BD672000, v56, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v55;
      __int16 v57 = *(void **)(v31 + 32);
      int v58 = *__error();
      uint64_t v59 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = v57[6];
        uint64_t v61 = v57[7];
        uint64_t v63 = v57[2];
        uint64_t v62 = v57[3];
        *(_DWORD *)std::string __p = 134219008;
        *(void *)&__p[4] = v57;
        __int16 v127 = 2048;
        *(void *)uint64_t v128 = v60;
        *(_WORD *)&void v128[8] = 2048;
        *(void *)&v128[10] = v61;
        *(_WORD *)&v128[18] = 2048;
        *(void *)long long v129 = v62;
        *(_WORD *)&v129[8] = 2048;
        uint64_t v130 = v63;
        _os_log_impl(&dword_1BD672000, v59, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v58;
      unint64_t v54 = *(unsigned int *)(v31 + 40);
      LODWORD(v53) = *(_DWORD *)(v31 + 40);
    }
    if (v40 == v54)
    {
      *(_DWORD *)(v31 + 40) = v53 + 1;
      uint64_t v64 = *(void **)(v31 + 32);
      unint64_t v65 = v64[3] + v64[2] * v40;
      bit_vector_set_10635(v64 + 525, (v65 >> 20));
      unint64_t v66 = (v65 + 1040) >> 20;
      if (v66 > (v65 >> 20))
      {
        unsigned int v67 = (v65 >> 20) + 1;
        do
        {
          unint64_t v68 = v67;
          bit_vector_set_10635(v64 + 525, v67++);
        }
        while (v66 > v68);
      }
      unint64_t v69 = _windowsResolvePtr((uint64_t)(v64 + 5), v64[3] + v64[2] * v40, 1040);
      memcpy((void *)v69, __src, 0x400uLL);
      *(void *)(v69 + 1024) = 0;
      *(_DWORD *)(v69 + 1032) = v120;
      if (*(_DWORD *)(v31 + 40) == 1) {
        *(_DWORD *)(v31 + 52) = v120;
      }
      *(_DWORD *)(v31 + 56) = v120;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(void *)v118 + 56))(v118, v9, v40, v122);
      uint64_t v70 = *(void *)(a1 + 48);
      if (v118[18] == *(_DWORD *)(v70 + 40))
      {
        unsigned __int8 v71 = *(void **)(v70 + 32);
        unint64_t v72 = v71[3] + v71[2] * v40;
        bit_vector_set_10635(v71 + 525, (v72 >> 20));
        unint64_t v73 = (v72 + 1040) >> 20;
        if (v73 > (v72 >> 20))
        {
          unsigned int v74 = (v72 >> 20) + 1;
          do
          {
            unint64_t v75 = v74;
            bit_vector_set_10635(v71 + 525, v74++);
          }
          while (v73 > v75);
        }
        int v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v71 + 5), v71[3] + v71[2] * v40, 1040);
        data_map_set_offset_for_id(*(void *)(a1 + 144), v120, (16 * v40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4* (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
        return v17;
      }
      int v107 = __si_assert_copy_extra_329();
      uint64_t v97 = v107;
      int v108 = "";
      if (v107) {
        int v108 = v107;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v108);
    }
    else
    {
      uint64_t v105 = __si_assert_copy_extra_329();
      uint64_t v97 = v105;
      unsigned int v106 = "";
      if (v105) {
        unsigned int v106 = v105;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v106);
    }
LABEL_127:
    free(v97);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v12 = v10;
  unint64_t v13 = v11[3] + v11[2] * v10;
  bit_vector_set_10635(v11 + 525, (v13 >> 20));
  unint64_t v14 = (v13 + 1040) >> 20;
  if (v14 > (v13 >> 20))
  {
    unsigned int v15 = (v13 >> 20) + 1;
    do
    {
      unint64_t v16 = v15;
      bit_vector_set_10635(v11 + 525, v15++);
    }
    while (v14 > v16);
  }
  int v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v11 + 5), v11[3] + v11[2] * v12, 1040);
  if (v17[258] != a2)
  {
    uint64_t v121 = 0;
    data = (const void *)data_map_get_data(*(void *)(a1 + 144), a2, &v121);
    int v19 = *__error();
    __int16 v20 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v127 = 1024;
      *(_DWORD *)uint64_t v128 = 2586;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = a2;
      *(_WORD *)&v128[10] = 2048;
      *(void *)&v128[12] = data;
      *(_WORD *)long long v129 = 2048;
      *(void *)&v129[2] = v121;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v19;
    if (v121 < 1)
    {
      int v26 = *__error();
      unsigned int v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2595;
        _os_log_error_impl(&dword_1BD672000, v76, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v121 != 1024)
      {
        uint64_t v111 = __si_assert_copy_extra_329();
        uint64_t v97 = v111;
        CFAbsoluteTime v112 = "";
        if (v111) {
          CFAbsoluteTime v112 = v111;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v112);
        goto LABEL_127;
      }
      if (!data || !memcmp(data, a3, 0x400uLL))
      {
LABEL_80:
        unsigned __int8 v77 = (const void *)data_map_get_data(*(void *)(a1 + 144), v17[258], &v121);
        int v78 = *__error();
        unsigned int v79 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          unsigned int v94 = v17[258];
          *(_DWORD *)std::string __p = 136316162;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2598;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = v94;
          *(_WORD *)&v128[10] = 2048;
          *(void *)&v128[12] = v77;
          *(_WORD *)long long v129 = 2048;
          *(void *)&v129[2] = v121;
          _os_log_error_impl(&dword_1BD672000, v79, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v78;
        if (v121 < 1)
        {
          int v86 = *__error();
          unsigned int v89 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2607;
            _os_log_error_impl(&dword_1BD672000, v89, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v121 != 1024)
          {
            float v113 = __si_assert_copy_extra_329();
            uint64_t v97 = v113;
            unsigned int v114 = "";
            if (v113) {
              unsigned int v114 = v113;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v114);
            goto LABEL_127;
          }
          size_t v80 = 1024;
          if (!v77 || !memcmp(v77, v17, 0x400uLL)) {
            goto LABEL_103;
          }
          int v81 = *__error();
          BOOL v82 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2602;
            _os_log_error_impl(&dword_1BD672000, v82, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v81;
          int v83 = *__error();
          uint64_t v84 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v77, v121);
            CFAbsoluteTime v85 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v85;
            _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          *__error() = v83;
          int v86 = *__error();
          int v87 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v17, v121);
            int v88 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v88;
            _os_log_impl(&dword_1BD672000, v87, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        *__error() = v86;
        size_t v80 = v121;
LABEL_103:
        if (memcmp(a3, v17, v80))
        {
          unint64_t v109 = __si_assert_copy_extra_329();
          uint64_t v102 = v109;
          uint64_t v110 = "";
          if (v109) {
            uint64_t v110 = v109;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v110);
LABEL_117:
          free(v102);
          if (__valid_fs(-1)) {
            uint64_t v104 = 2989;
          }
          else {
            uint64_t v104 = 3072;
          }
          *(_DWORD *)uint64_t v104 = -559038737;
          abort();
        }
        int v90 = *__error();
        float v91 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
        {
          unsigned int v95 = v17[258];
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2610;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = a2;
          *(_WORD *)&v128[10] = 1024;
          *(_DWORD *)&v128[12] = v95;
          _os_log_fault_impl(&dword_1BD672000, v91, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v90;
        return v17;
      }
      int v21 = *__error();
      uint64_t v22 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2590;
        _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v21;
      int v23 = *__error();
      uint64_t v24 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v121);
        uint64_t v25 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v25;
        _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v23;
      int v26 = *__error();
      uint64_t v27 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v121);
        uint64_t v28 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v28;
        _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v26;
    goto LABEL_80;
  }
  return v17;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  unsigned int v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *(_DWORD **)(a1 + 96);
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      unint64_t v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          int v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          uint64_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      int v23 = __si_assert_copy_extra_329();
      int v21 = v23;
      uint64_t v24 = "";
      if (v23) {
        uint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      __int16 v20 = __si_assert_copy_extra_329();
      int v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  uint64_t v34 = 0;
  uint64_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj_block_invoke;
  v32[3] = &unk_1E6345058;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  int v4 = a4;
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156)) {
    goto LABEL_18;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (!v11 && v12 > v13) {
    return result;
  }
  int v15 = *(_DWORD *)(result + 64);
  if (v15)
  {
    unint64_t v16 = *(void **)(*(void *)(v5 + 48) + 32);
    unint64_t v17 = v16[3] + v16[2] * v6;
    bit_vector_set_10635(v16 + 525, (v17 >> 20));
    unint64_t v18 = (v17 + 1040) >> 20;
    if (v18 > (v17 >> 20))
    {
      unsigned int v19 = (v17 >> 20) + 1;
      do
      {
        unint64_t v20 = v19;
        bit_vector_set_10635(v16 + 525, v19++);
      }
      while (v18 > v20);
    }
    uint64_t result = _windowsResolvePtr((uint64_t)(v16 + 5), v16[3] + v16[2] * v6, 1040);
    int v4 = a4;
    if (v15 != *(_DWORD *)(result + 1032)) {
      return result;
    }
    *(float *)&uint64_t v6 = *a3;
  }
  int v21 = *(const void **)(v8 + 56);
  uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 32);
  unint64_t v23 = v22[3] + v22[2] * v6;
  bit_vector_set_10635(v22 + 525, (v23 >> 20));
  unint64_t v24 = (v23 + 1040) >> 20;
  if (v24 > (v23 >> 20))
  {
    unsigned int v25 = (v23 >> 20) + 1;
    do
    {
      unint64_t v26 = v25;
      bit_vector_set_10635(v22 + 525, v25++);
    }
    while (v24 > v26);
  }
  uint64_t v27 = (const void *)_windowsResolvePtr((uint64_t)(v22 + 5), v22[3] + v22[2] * v6, 1040);
  uint64_t result = memcmp(v21, v27, 0x400uLL);
  if (!result)
  {
    *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_18:
    unsigned char *v4 = 1;
  }
  return result;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(uint64_t *a1, uint64_t *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CFAbsoluteTimeGetCurrent();
  __int16 v57 = 0;
  uint64_t v56 = 0;
  _ZN16QuantizerManagerIDF16_Li512EE20lastTrainedQuantizerEv(&v56, *a1);
  uint64_t v50 = *a2;
  uint64_t v51 = a2[1];
  uint64_t v4 = v51 - *a2;
  if (v51 == *a2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (v4 < 0) {
      goto LABEL_86;
    }
    uint64_t v5 = operator new((unint64_t)v4 >> 1);
    bzero(v5, (unint64_t)v4 >> 1);
  }
  unint64_t v49 = v4 >> 3;
  int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
  if (v51 != v50)
  {
    uint64_t v6 = 0;
    if (v49 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v49;
    }
    while (1)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 16))(v59);
      uint64_t v8 = v56;
      uint64_t v9 = *(void *)v59;
      float v10 = *(std::__shared_weak_count **)&v59[8];
      if (*(void *)&v59[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v59[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v9 != v8) {
        break;
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 24))(v59);
      BOOL v11 = *(std::__shared_weak_count **)&v59[8];
      *((_DWORD *)v5 + v6) = *(_DWORD *)(*(void *)v59 + 72);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*a2 + 8 * v6) + 24))(v59);
      float v12 = *(std::__shared_weak_count **)&v59[8];
      int v13 = *(_DWORD *)(*(void *)v59 + 68);
      if (*(void *)&v59[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v59[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v13 != v52)
      {
        unint64_t v43 = __si_assert_copy_extra_329();
        unint64_t v44 = v43;
        unint64_t v45 = "";
        if (v43) {
          unint64_t v45 = v43;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2086, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v45);
        free(v44);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 == ++v6) {
        goto LABEL_21;
      }
    }
    unint64_t v39 = __si_assert_copy_extra_329();
    unint64_t v40 = v39;
    unint64_t v41 = "";
    if (v39) {
      unint64_t v41 = v39;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2084, "vectorIndexes[i]->getQuantizer() == quantizer", v41);
LABEL_73:
    free(v40);
    if (__valid_fs(-1)) {
      uint64_t v42 = 2989;
    }
    else {
      uint64_t v42 = 3072;
    }
    *(_DWORD *)uint64_t v42 = -559038737;
    abort();
  }
LABEL_21:
  uint64_t v14 = *a1;
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v14 + 72));
  if ((v15 & 1) == 0)
  {
    unint64_t v47 = __si_assert_copy_extra_329();
    unint64_t v40 = v47;
    unint64_t v48 = "";
    if (v47) {
      unint64_t v48 = v47;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 772, "_training.test()", v48);
    goto LABEL_73;
  }
  if (*(void *)(v14 + 96))
  {
    unint64_t v16 = *(NSObject **)(v14 + 16);
    *(void *)uint64_t v59 = MEMORY[0x1E4F143A8];
    *(void *)&v59[8] = 0x40000000;
    *(void *)&v59[16] = ___ZN16QuantizerManagerIDF16_Li512EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v59[24] = &__block_descriptor_tmp_554;
    *(void *)&v59[32] = v14;
    dispatch_sync(v16, v59);
  }
  uint64_t v17 = *(void *)(v14 + 80);
  if (v17) {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17) + 1;
  }
  else {
    int v18 = 1;
  }
  int v19 = *(char *)(v14 + 71);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v14 + 71);
  }
  else {
    size_t v20 = *(void *)(v14 + 56);
  }
  unint64_t v21 = v20 + 1;
  if (v20 + 1 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_86:
  }
    abort();
  if (v21 >= 0x17)
  {
    uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v23 = v21 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = (std::string *)operator new(v23 + 1);
    v53[0].__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    v53[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    v53[0].__r_.__value_.__l.__size_ = v20 + 1;
  }
  else
  {
    memset(v53, 0, 24);
    uint64_t v22 = v53;
    *((unsigned char *)&v53[0].__r_.__value_.__s + 23) = v20 + 1;
    if (!v20) {
      goto LABEL_41;
    }
  }
  if (v19 >= 0) {
    unsigned int v25 = (const void *)(v14 + 48);
  }
  else {
    unsigned int v25 = *(const void **)(v14 + 48);
  }
  memmove(v22, v25, v20);
LABEL_41:
  *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v20) = 46;
  std::to_string(&v58, v18);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v26 = &v58;
  }
  else {
    unint64_t v26 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  int v28 = std::string::append(v53, (const std::string::value_type *)v26, size);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v59 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v59[16] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int v30 = std::string::append((std::string *)v59, ".quantizer");
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  long long v54 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  uint64_t v55 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((v59[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_56:
    operator delete(v58.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_57;
  }
  operator delete(*(void **)v59);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_56;
  }
LABEL_49:
  if ((SHIBYTE(v53[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_50;
  }
LABEL_57:
  operator delete(v53[0].__r_.__value_.__l.__data_);
LABEL_50:
  if (v55 >= 0) {
    uint64_t v32 = (const char *)&v54;
  }
  else {
    uint64_t v32 = (const char *)v54;
  }
  if (QuantizerManager<float,768>::createFdPtrForFile(v14, v32)) {
    operator new();
  }
  int v33 = *__error();
  uint64_t v34 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
  {
    int v37 = &v54;
    if (v55 < 0) {
      int v37 = (long long *)v54;
    }
    int v38 = *(_DWORD *)v14;
    *(_DWORD *)uint64_t v59 = 136315906;
    *(void *)&v59[4] = "newQuantizer";
    *(_WORD *)&v59[12] = 1024;
    *(_DWORD *)&v59[14] = 792;
    *(_WORD *)&v59[18] = 2080;
    *(void *)&v59[20] = v37;
    *(_WORD *)&v59[28] = 1024;
    *(_DWORD *)&v59[30] = v38;
    _os_log_fault_impl(&dword_1BD672000, v34, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", v59, 0x22u);
  }
  *__error() = v33;
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  if (v5) {
    operator delete(v5);
  }
  uint64_t v35 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return 0;
}

void *_ZN16QuantizerManagerIDF16_Li512EE20lastTrainedQuantizerEv(void *result, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    uint64_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    uint64_t v8 = "";
    if (v6) {
      uint64_t v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 750, "_training.test()", v8);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v3 = *(void *)(a2 + 96);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 104);
    unsigned int *result = v3;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5)
  {
    uint64_t v4 = *(void *)(a2 + 88);
    unsigned int *result = v5;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken != -1)
  {
    uint64_t v9 = result;
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken, &__block_literal_global_460);
    uint64_t result = v9;
  }
  uint64_t v4 = *(void *)(_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq + 8);
  unsigned int *result = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq;
  result[1] = v4;
  if (v4) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  return result;
}

void ___ZN16QuantizerManagerIDF16_Li512EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 80);
  if (!v2) {
    goto LABEL_103;
  }
  int v3 = *(char *)(v1 + 71);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v4 = *(void *)(v1 + 56);
  }
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_138:
  }
    abort();
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_16;
    }
  }
  if (v3 >= 0) {
    uint64_t v9 = (const void *)(v1 + 48);
  }
  else {
    uint64_t v9 = *(const void **)(v1 + 48);
  }
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v15 = std::string::append(&v72, ".quantizer");
  int64_t v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v73 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v74 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_34:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_34;
  }
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_35:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  uint64_t v17 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    int v18 = v73;
  }
  else {
    int v18 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1C1880BF0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(void *)(v1 + 80) + 57));
  uint64_t v20 = *(void *)(v1 + 80);
  int v19 = *(std::__shared_weak_count **)(v1 + 88);
  uint64_t v21 = v20;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(void *)(v1 + 80);
  }
  uint64_t v22 = (uint64_t *)(v1 + 112);
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
  int v24 = v23;
  unint64_t v25 = v23;
  unint64_t v26 = *(void *)(v1 + 120);
  if (v26)
  {
    uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v28 = v23;
      if (v26 <= v23) {
        unint64_t v28 = v23 % v26;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v23;
    }
    std::string::size_type v29 = *(void ***)(*v22 + 8 * v28);
    if (v29)
    {
      int v30 = *v29;
      if (*v29)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v32 = *((void *)v30 + 1);
            if (v32 == v23)
            {
              if (*((_DWORD *)v30 + 4) == v23) {
                goto LABEL_92;
              }
            }
            else if ((v32 & (v26 - 1)) != v28)
            {
              goto LABEL_54;
            }
            int v30 = *(void **)v30;
            if (!v30) {
              goto LABEL_54;
            }
          }
        }
        do
        {
          unint64_t v31 = *((void *)v30 + 1);
          if (v31 == v23)
          {
            if (*((_DWORD *)v30 + 4) == v23) {
              goto LABEL_92;
            }
          }
          else
          {
            if (v31 >= v26) {
              v31 %= v26;
            }
            if (v31 != v28) {
              break;
            }
          }
          int v30 = *(void **)v30;
        }
        while (v30);
      }
    }
  }
  else
  {
    unint64_t v28 = 0;
  }
LABEL_54:
  int v30 = operator new(0x28uLL);
  *(void *)int v30 = 0;
  *((void *)v30 + 1) = v25;
  *((_DWORD *)v30 + 4) = v24;
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = 0;
  float v33 = (float)(unint64_t)(*(void *)(v1 + 136) + 1);
  float v34 = *(float *)(v1 + 144);
  if (!v26 || (float)(v34 * (float)v26) < v33)
  {
    BOOL v35 = 1;
    if (v26 >= 3) {
      BOOL v35 = (v26 & (v26 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v26);
    unint64_t v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v26 = *(void *)(v1 + 120);
    }
    if (prime > v26) {
      goto LABEL_76;
    }
    if (prime < v26)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v26 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < v26) {
LABEL_76:
      }
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    unint64_t v26 = *(void *)(v1 + 120);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v26 <= v25) {
        unint64_t v28 = v25 % v26;
      }
      else {
        unint64_t v28 = v25;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v25;
    }
  }
  uint64_t v42 = *v22;
  unint64_t v43 = *(void **)(*v22 + 8 * v28);
  if (v43)
  {
    *(void *)int v30 = *v43;
LABEL_90:
    *unint64_t v43 = v30;
    goto LABEL_91;
  }
  *(void *)int v30 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = v30;
  *(void *)(v42 + 8 * v28) = v1 + 128;
  if (*(void *)v30)
  {
    unint64_t v44 = *(void *)(*(void *)v30 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v44 >= v26) {
        v44 %= v26;
      }
    }
    else
    {
      v44 &= v26 - 1;
    }
    unint64_t v43 = (void *)(*v22 + 8 * v44);
    goto LABEL_90;
  }
LABEL_91:
  ++*(void *)(v1 + 136);
LABEL_92:
  if (v19)
  {
    unint64_t v45 = std::__shared_weak_count::lock(v19);
    unsigned int v46 = (atomic_ullong *)v45;
    if (!v45)
    {
      uint64_t v20 = 0;
      goto LABEL_98;
    }
    atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v19);
    if (!atomic_fetch_add(v46 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v46 + 16))(v46);
      int v19 = (std::__shared_weak_count *)v46;
LABEL_98:
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    uint64_t v20 = 0;
    unsigned int v46 = 0;
  }
  unint64_t v47 = (std::__shared_weak_count *)*((void *)v30 + 4);
  *((void *)v30 + 3) = v20;
  *((void *)v30 + 4) = v46;
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
LABEL_103:
  int v48 = *(char *)(v1 + 71);
  if (v48 >= 0) {
    size_t v49 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v49 = *(void *)(v1 + 56);
  }
  unint64_t v50 = v49 + 10;
  if (v49 + 10 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_138;
  }
  if (v50 >= 0x17)
  {
    uint64_t v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v52 = v50 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = operator new(v52 + 1);
    v73[1] = (void *)(v49 + 10);
    int64_t v74 = v53 | 0x8000000000000000;
    v73[0] = v51;
  }
  else
  {
    v73[1] = 0;
    int64_t v74 = 0;
    v73[0] = 0;
    uint64_t v51 = v73;
    HIBYTE(v74) = v49 + 10;
    if (!v49) {
      goto LABEL_117;
    }
  }
  if (v48 >= 0) {
    long long v54 = (const void *)(v1 + 48);
  }
  else {
    long long v54 = *(const void **)(v1 + 48);
  }
  memmove(v51, v54, v49);
LABEL_117:
  strcpy((char *)v51 + v49, ".quantizer");
  uint64_t v56 = *(void *)(v1 + 96);
  uint64_t v55 = *(void *)(v1 + 104);
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v57 = *(std::__shared_weak_count **)(v1 + 88);
  *(void *)(v1 + 80) = v56;
  *(void *)(v1 + 88) = v55;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  uint64_t v58 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    uint64_t v59 = v73;
  }
  else {
    uint64_t v59 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v58 + 40) + 40), (const char *)v59);
  MEMORY[0x1C1880BF0](v58 + 8, v59);
  uint64_t v60 = *(void *)(v1 + 80);
  uint64_t v61 = *(unint64_t **)(v60 + 40);
  *uint64_t v61 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v61);
  storage_array_SyncPages(*(void *)(v60 + 40) + 8, *(void *)(v60 + 40) + 4200);
  storage_array_Truncate((uint64_t *)(*(void *)(v60 + 40) + 8));
  uint64_t v62 = *(void *)(v60 + 40);
  fd_make_readonly(*(void *)(v62 + 40));
  uint64_t v63 = *(void *)(v62 + 40);
  if (v63)
  {
    do
    {
      int v64 = fchmodat(*(_DWORD *)(v63 + 44), *(const char **)(v63 + 72), 0x100u, 2048);
      uint64_t v65 = g_prot_error_callback;
      if (v64 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v67 = *(unsigned int *)(v63 + 40);
      unint64_t v68 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v65 + 16))(v65, v67, *v68, 19) & 1) != 0);
  }
  *(unsigned char *)(v60 + 56) = 1;
  unint64_t v69 = *(std::__shared_weak_count **)(v1 + 104);
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  if (!v69 || atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v74) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_134;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if (SHIBYTE(v74) < 0) {
LABEL_134:
  }
    operator delete(v73[0]);
}

float ___ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    memset(__p, 0, 24);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 80))(__p);
    if (*((float *)__p[0] + 1) < a3[1]) {
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p[0];
    }
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  bzero(__p, 0x800uLL);
  float16x8_t v8 = *(float16x8_t *)(v6 + 16);
  float32x4_t v9 = vcvt_hight_f32_f16(*(float16x8_t *)v6);
  *(float32x4_t *)std::string __p = vcvtq_f32_f16(*(float16x4_t *)v6);
  *(float32x4_t *)&__p[2] = v9;
  *(float32x4_t *)&__p[4] = vcvtq_f32_f16(*(float16x4_t *)v8.i8);
  *(float32x4_t *)&__p[6] = vcvt_hight_f32_f16(v8);
  float16x8_t v10 = *(float16x8_t *)(v6 + 32);
  float16x8_t v11 = *(float16x8_t *)(v6 + 48);
  *(float32x4_t *)&__p[8] = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
  *(float32x4_t *)&__p[10] = vcvt_hight_f32_f16(v10);
  *(float32x4_t *)&unsigned char __p[12] = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
  *(float32x4_t *)&__p[14] = vcvt_hight_f32_f16(v11);
  float16x8_t v12 = *(float16x8_t *)(v6 + 64);
  float16x8_t v13 = *(float16x8_t *)(v6 + 80);
  *(float32x4_t *)&__p[16] = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  *(float32x4_t *)&__p[18] = vcvt_hight_f32_f16(v12);
  *(float32x4_t *)&__p[20] = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
  *(float32x4_t *)&__p[22] = vcvt_hight_f32_f16(v13);
  float16x8_t v14 = *(float16x8_t *)(v6 + 96);
  float16x8_t v15 = *(float16x8_t *)(v6 + 112);
  *(float32x4_t *)&__p[24] = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
  *(float32x4_t *)&__p[26] = vcvt_hight_f32_f16(v14);
  *(float32x4_t *)&__p[28] = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
  *(float32x4_t *)&__p[30] = vcvt_hight_f32_f16(v15);
  float16x8_t v16 = *(float16x8_t *)(v6 + 128);
  float16x8_t v17 = *(float16x8_t *)(v6 + 144);
  *(float32x4_t *)&__p[32] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
  *(float32x4_t *)&__p[34] = vcvt_hight_f32_f16(v16);
  *(float32x4_t *)&__p[36] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
  *(float32x4_t *)&__p[38] = vcvt_hight_f32_f16(v17);
  float16x8_t v18 = *(float16x8_t *)(v6 + 160);
  float16x8_t v19 = *(float16x8_t *)(v6 + 176);
  *(float32x4_t *)&__p[40] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
  *(float32x4_t *)&__p[42] = vcvt_hight_f32_f16(v18);
  *(float32x4_t *)&__p[44] = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
  *(float32x4_t *)&__p[46] = vcvt_hight_f32_f16(v19);
  float16x8_t v20 = *(float16x8_t *)(v6 + 192);
  float16x8_t v21 = *(float16x8_t *)(v6 + 208);
  *(float32x4_t *)&__p[48] = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
  *(float32x4_t *)&__p[50] = vcvt_hight_f32_f16(v20);
  *(float32x4_t *)&__p[52] = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
  *(float32x4_t *)&__p[54] = vcvt_hight_f32_f16(v21);
  float16x8_t v22 = *(float16x8_t *)(v6 + 224);
  float16x8_t v23 = *(float16x8_t *)(v6 + 240);
  *(float32x4_t *)&__p[56] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
  *(float32x4_t *)&__p[58] = vcvt_hight_f32_f16(v22);
  *(float32x4_t *)&__p[60] = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
  *(float32x4_t *)&__p[62] = vcvt_hight_f32_f16(v23);
  float16x8_t v24 = *(float16x8_t *)(v6 + 256);
  float16x8_t v25 = *(float16x8_t *)(v6 + 272);
  *(float32x4_t *)&__p[64] = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
  *(float32x4_t *)&__p[66] = vcvt_hight_f32_f16(v24);
  *(float32x4_t *)&__p[68] = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
  *(float32x4_t *)&__p[70] = vcvt_hight_f32_f16(v25);
  float16x8_t v26 = *(float16x8_t *)(v6 + 288);
  float16x8_t v27 = *(float16x8_t *)(v6 + 304);
  *(float32x4_t *)&__p[72] = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
  *(float32x4_t *)&__p[74] = vcvt_hight_f32_f16(v26);
  *(float32x4_t *)&__p[76] = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
  *(float32x4_t *)&__p[78] = vcvt_hight_f32_f16(v27);
  float16x8_t v28 = *(float16x8_t *)(v6 + 320);
  float16x8_t v29 = *(float16x8_t *)(v6 + 336);
  *(float32x4_t *)&__p[80] = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
  *(float32x4_t *)&__p[82] = vcvt_hight_f32_f16(v28);
  *(float32x4_t *)&__p[84] = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
  *(float32x4_t *)&__p[86] = vcvt_hight_f32_f16(v29);
  float16x8_t v30 = *(float16x8_t *)(v6 + 352);
  float16x8_t v31 = *(float16x8_t *)(v6 + 368);
  *(float32x4_t *)&__p[88] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
  *(float32x4_t *)&__p[90] = vcvt_hight_f32_f16(v30);
  *(float32x4_t *)&__p[92] = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
  *(float32x4_t *)&__p[94] = vcvt_hight_f32_f16(v31);
  float16x8_t v32 = *(float16x8_t *)(v6 + 384);
  float16x8_t v33 = *(float16x8_t *)(v6 + 400);
  *(float32x4_t *)&__p[96] = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
  *(float32x4_t *)&__p[98] = vcvt_hight_f32_f16(v32);
  *(float32x4_t *)&__p[100] = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
  *(float32x4_t *)&__p[102] = vcvt_hight_f32_f16(v33);
  float16x8_t v34 = *(float16x8_t *)(v6 + 416);
  float16x8_t v35 = *(float16x8_t *)(v6 + 432);
  *(float32x4_t *)&__p[104] = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
  *(float32x4_t *)&__p[106] = vcvt_hight_f32_f16(v34);
  *(float32x4_t *)&__p[108] = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
  *(float32x4_t *)&__p[110] = vcvt_hight_f32_f16(v35);
  float16x8_t v36 = *(float16x8_t *)(v6 + 448);
  float16x8_t v37 = *(float16x8_t *)(v6 + 464);
  *(float32x4_t *)&__p[112] = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
  *(float32x4_t *)&__p[114] = vcvt_hight_f32_f16(v36);
  *(float32x4_t *)&__p[116] = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
  *(float32x4_t *)&__p[118] = vcvt_hight_f32_f16(v37);
  float16x8_t v38 = *(float16x8_t *)(v6 + 480);
  float16x8_t v39 = *(float16x8_t *)(v6 + 496);
  *(float32x4_t *)&__p[120] = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
  *(float32x4_t *)&__p[122] = vcvt_hight_f32_f16(v38);
  *(float32x4_t *)&__p[124] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
  *(float32x4_t *)&__p[126] = vcvt_hight_f32_f16(v39);
  float16x8_t v40 = *(float16x8_t *)(v6 + 512);
  float16x8_t v41 = *(float16x8_t *)(v6 + 528);
  *(float32x4_t *)&__p[130] = vcvt_hight_f32_f16(v40);
  *(float32x4_t *)&__p[128] = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
  *(float32x4_t *)&__p[134] = vcvt_hight_f32_f16(v41);
  *(float32x4_t *)&__p[132] = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
  float16x8_t v42 = *(float16x8_t *)(v6 + 544);
  float16x8_t v43 = *(float16x8_t *)(v6 + 560);
  *(float32x4_t *)&__p[138] = vcvt_hight_f32_f16(v42);
  *(float32x4_t *)&__p[136] = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
  *(float32x4_t *)&__p[142] = vcvt_hight_f32_f16(v43);
  *(float32x4_t *)&__p[140] = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
  float16x8_t v44 = *(float16x8_t *)(v6 + 576);
  float16x8_t v45 = *(float16x8_t *)(v6 + 592);
  *(float32x4_t *)&__p[146] = vcvt_hight_f32_f16(v44);
  *(float32x4_t *)&__p[144] = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
  *(float32x4_t *)&__p[150] = vcvt_hight_f32_f16(v45);
  *(float32x4_t *)&__p[148] = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
  float16x8_t v46 = *(float16x8_t *)(v6 + 608);
  float16x8_t v47 = *(float16x8_t *)(v6 + 624);
  *(float32x4_t *)&__p[154] = vcvt_hight_f32_f16(v46);
  *(float32x4_t *)&__p[152] = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
  *(float32x4_t *)&__p[158] = vcvt_hight_f32_f16(v47);
  *(float32x4_t *)&__p[156] = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
  float16x8_t v48 = *(float16x8_t *)(v6 + 640);
  float16x8_t v49 = *(float16x8_t *)(v6 + 656);
  *(float32x4_t *)&__p[162] = vcvt_hight_f32_f16(v48);
  *(float32x4_t *)&__p[160] = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
  *(float32x4_t *)&__p[166] = vcvt_hight_f32_f16(v49);
  *(float32x4_t *)&__p[164] = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
  float16x8_t v50 = *(float16x8_t *)(v6 + 672);
  float16x8_t v51 = *(float16x8_t *)(v6 + 688);
  *(float32x4_t *)&__p[170] = vcvt_hight_f32_f16(v50);
  *(float32x4_t *)&__p[168] = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
  *(float32x4_t *)&__p[174] = vcvt_hight_f32_f16(v51);
  *(float32x4_t *)&__p[172] = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
  float16x8_t v52 = *(float16x8_t *)(v6 + 704);
  float16x8_t v53 = *(float16x8_t *)(v6 + 720);
  *(float32x4_t *)&__p[178] = vcvt_hight_f32_f16(v52);
  *(float32x4_t *)&__p[176] = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
  *(float32x4_t *)&__p[182] = vcvt_hight_f32_f16(v53);
  *(float32x4_t *)&__p[180] = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
  float16x8_t v54 = *(float16x8_t *)(v6 + 736);
  float16x8_t v55 = *(float16x8_t *)(v6 + 752);
  *(float32x4_t *)&__p[186] = vcvt_hight_f32_f16(v54);
  *(float32x4_t *)&__p[184] = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
  *(float32x4_t *)&__p[190] = vcvt_hight_f32_f16(v55);
  *(float32x4_t *)&__p[188] = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
  float16x8_t v56 = *(float16x8_t *)(v6 + 768);
  float16x8_t v57 = *(float16x8_t *)(v6 + 784);
  *(float32x4_t *)&__p[194] = vcvt_hight_f32_f16(v56);
  *(float32x4_t *)&__p[192] = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
  *(float32x4_t *)&__p[198] = vcvt_hight_f32_f16(v57);
  *(float32x4_t *)&__p[196] = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
  float16x8_t v58 = *(float16x8_t *)(v6 + 800);
  float16x8_t v59 = *(float16x8_t *)(v6 + 816);
  *(float32x4_t *)&__p[202] = vcvt_hight_f32_f16(v58);
  *(float32x4_t *)&__p[200] = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
  *(float32x4_t *)&__p[206] = vcvt_hight_f32_f16(v59);
  *(float32x4_t *)&__p[204] = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
  float16x8_t v60 = *(float16x8_t *)(v6 + 832);
  float16x8_t v61 = *(float16x8_t *)(v6 + 848);
  *(float32x4_t *)&__p[210] = vcvt_hight_f32_f16(v60);
  *(float32x4_t *)&__p[208] = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
  *(float32x4_t *)&__p[214] = vcvt_hight_f32_f16(v61);
  *(float32x4_t *)&__p[212] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
  float16x8_t v62 = *(float16x8_t *)(v6 + 864);
  float16x8_t v63 = *(float16x8_t *)(v6 + 880);
  *(float32x4_t *)&__p[218] = vcvt_hight_f32_f16(v62);
  *(float32x4_t *)&__p[216] = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
  *(float32x4_t *)&__p[222] = vcvt_hight_f32_f16(v63);
  *(float32x4_t *)&__p[220] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
  float16x8_t v64 = *(float16x8_t *)(v6 + 896);
  float16x8_t v65 = *(float16x8_t *)(v6 + 912);
  *(float32x4_t *)&__p[226] = vcvt_hight_f32_f16(v64);
  *(float32x4_t *)&__p[224] = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
  *(float32x4_t *)&__p[230] = vcvt_hight_f32_f16(v65);
  *(float32x4_t *)&__p[228] = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
  float16x8_t v66 = *(float16x8_t *)(v6 + 928);
  float16x8_t v67 = *(float16x8_t *)(v6 + 944);
  *(float32x4_t *)&__p[234] = vcvt_hight_f32_f16(v66);
  *(float32x4_t *)&__p[232] = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
  *(float32x4_t *)&__p[238] = vcvt_hight_f32_f16(v67);
  *(float32x4_t *)&__p[236] = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
  float16x8_t v68 = *(float16x8_t *)(v6 + 960);
  float16x8_t v69 = *(float16x8_t *)(v6 + 976);
  *(float32x4_t *)&__p[242] = vcvt_hight_f32_f16(v68);
  *(float32x4_t *)&__p[240] = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
  *(float32x4_t *)&__p[246] = vcvt_hight_f32_f16(v69);
  *(float32x4_t *)&__p[244] = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
  float16x8_t v70 = *(float16x8_t *)(v6 + 992);
  float16x8_t v71 = *(float16x8_t *)(v6 + 1008);
  *(float32x4_t *)&__p[250] = vcvt_hight_f32_f16(v70);
  *(float32x4_t *)&__p[248] = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
  *(float32x4_t *)&__p[254] = vcvt_hight_f32_f16(v71);
  *(float32x4_t *)&__p[252] = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
  std::string v72 = (float *)(v7 + 2052 * a2);
  unint64_t v73 = v72 + 512;
  float v74 = v72[512];
  if (v74 == 0.0)
  {
    memcpy(v72, __p, 0x800uLL);
  }
  else
  {
    vDSP_vavlin((const float *)__p, 1, v72 + 512, v72, 1, 0x200uLL);
    float v74 = *v73;
  }
  float result = v74 + 1.0;
  *unint64_t v73 = v74 + 1.0;
  return result;
}

void _ZZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1[1] + 8 * a2);
  unint64_t v5 = (std::__shared_weak_count *)a1[3];
  float16x8_t v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v12);
  uint64_t v6 = (void *)(*a1 + 16 * a2);
  uint64_t v8 = v12;
  uint64_t v7 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float32x4_t v9 = (std::__shared_weak_count *)v6[1];
  *uint64_t v6 = v8;
  v6[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    float16x8_t v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    float16x8_t v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li512EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2 >= (unint64_t)((*(void *)(a1 + 48) - v2) >> 10))
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    unint64_t v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 452, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + ((unint64_t)a2 << 10);
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li512EE5countEv(uint64_t a1)
{
  return (*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 10;
}

void _ZN20ArrayVectorQuantizerIDF16_Li512EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18149E0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN20ArrayVectorQuantizerIDF16_Li512EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18149E0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE7compactEP22AnyVectorIndexInstanceP12uint32_map_tP11TermIdStore18CICompactCallbacksPVi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v10 = *__error();
  float16x8_t v11 = _SILogForLogForCategory(16);
  os_log_type_t v12 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v11, v12))
  {
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v13 = a4;
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v34;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v14;
    a4 = v13;
    HIWORD(v55) = 1024;
    LODWORD(v56) = v15;
    WORD2(v56) = 1024;
    *(_DWORD *)((char *)&v56 + 6) = v16;
    _os_log_impl(&dword_1BD672000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    float16x8_t v29 = __si_assert_copy_extra_329();
    float16x8_t v30 = v29;
    float16x8_t v31 = "";
    if (v29) {
      float16x8_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v31);
LABEL_49:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  long long v37 = *a5;
  long long v38 = a5[1];
  uint64_t v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    float16x8_t v32 = __si_assert_copy_extra_329();
    float16x8_t v30 = v32;
    float16x8_t v33 = "";
    if (v32) {
      float16x8_t v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "target->nVectors() == 0", v33);
    goto LABEL_49;
  }
  float16x8_t v18 = operator new(8uLL);
  __p[0] = v18;
  *float16x8_t v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v19 = *(void *)(a1 + 128);
  float16x8_t v20 = *(std::__shared_weak_count **)(a1 + 136);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a1 + 144);
  float16x8_t v22 = *(std::__shared_weak_count **)(a1 + 152);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v47[0] = v19;
  v47[1] = (uint64_t)v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEE(v17, v47);
    uint64_t v23 = a3;
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEE(v17, v47);
    uint64_t v23 = a3;
  }
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2000000000;
  char v46 = 1;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v42 = 0u;
  uint64_t v40 = v21;
  float16x8_t v41 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(void *)(a1 + 96);
  float16x8_t v25 = *(std::__shared_weak_count **)(a1 + 104);
  v39[0] = v24;
  v39[1] = v25;
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
  }
  float16x8_t v26 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v55 = 0x40000000;
  *(void *)&long long v56 = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((void *)&v56 + 1) = &unk_1E63458D0;
  float16x8_t v57 = v45;
  uint64_t v58 = v23;
  uint64_t v59 = a4;
  uint64_t v60 = v17;
  uint64_t v61 = a6;
  long long v62 = v37;
  long long v63 = v38;
  long long v52 = 0u;
  long long v53 = 0u;
  char v51 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v49, (uint64_t)&v42);
    long long v52 = v49;
    long long v53 = v50;
    if (!(void)v50) {
      break;
    }
    ((void (*)(uint8_t *, long long *, char *))v56)(buf, &v52, &v51);
  }
  while (!v51);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v44);
  float16x8_t v27 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  float16x8_t v28 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  _Block_object_dispose(v45, 8);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

uint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *v6;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      unsigned int v11 = uint32_map_get(v7, *v6);
      uint64_t v8 = *(void *)storageResolvePtr(v10, 8 * v11, 8, 1);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li512EEyjf(*(void *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  uint64_t result = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64)) {
    uint64_t result = (*(uint64_t (**)(void))(a1 + 88))(*(void *)(a1 + 96));
  }
  *a3 = result;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li512EEyjf(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_log_type_t v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v12);
  if (a5 == -1)
  {
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    float16x8_t v18 = a3;
    uint64_t v19 = 0xFFFFFFFFLL;
    float v20 = a6;
    char v21 = 0;
  }
  else
  {
    if (*(_DWORD *)(v15 + 68) <= a5)
    {
      float16x8_t v22 = __si_assert_copy_extra_329();
      uint64_t v23 = v22;
      uint64_t v24 = "";
      if (v22) {
        uint64_t v24 = v22;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2728, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v24);
      free(v23);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    float16x8_t v18 = a3;
    uint64_t v19 = a5;
    float v20 = a6;
    char v21 = 1;
  }
  *((void *)_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v16, v17, v18, v19, v21, v20)+ 128) = a4;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13) {
      return;
    }
  }
  else if (!v13)
  {
    return;
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE5flushEy(uint64_t a1, uint64_t a2)
{
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE4dumpEbbPViPvU13block_pointerFbjPKvybjfE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 144);
  unsigned int v11 = *(std::__shared_weak_count **)(a1 + 152);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  float16x8_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  uint64_t v19 = ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  float v20 = &unk_1E63458A8;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    v19((uint64_t)v18, (uint64_t)&v32, (BOOL *)&v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result = (*(uint64_t (**)(float))(*(void *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE17mergeIndexForTestEP22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  unsigned int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE21mergeUpdateSetForTestEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v16) = 1024;
      *(_DWORD *)((char *)&v16 + 2) = v8;
      HIWORD(v16) = 1024;
      *(_DWORD *)int v17 = v9;
      *(_WORD *)&v17[4] = 1024;
      *(_DWORD *)&v17[6] = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    unsigned int v11 = operator new(0x10uLL);
    uint64_t v16 = v11 + 2;
    *(void *)int v17 = v11 + 2;
    *unsigned int v11 = a1 + 48;
    v11[1] = a2 + 48;
    *(void *)std::string buf = v11;
    _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v11);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v12 = __si_assert_copy_extra_329();
  uint64_t v13 = v12;
  int v14 = "";
  if (v12) {
    int v14 = v12;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
  free(v13);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfojy(int *result, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (int v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    unint64_t v5 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v5;
    int v7 = "";
    if (v5) {
      int v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v8 = *__error();
    int v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (*(uint64_t (**)(int *))(*(void *)v3 + 16))(v3);
      int v11 = (*(uint64_t (**)(int *))(*(void *)v3 + 24))(v3);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v17 = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      __int16 v20 = 1024;
      int v21 = v12;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    uint64_t result = __error();
    unsigned int *result = v8;
  }
  uint64_t v4 = *(void *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    int v14 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v14;
    int v15 = "";
    if (v14) {
      int v15 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfoP17TermIdContainer_s(uint64_t a1, uint64_t a2)
{
  v18[126] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v8;
      HIWORD(v17) = 1024;
      LODWORD(v18[0]) = v9;
      WORD2(v18[0]) = 1024;
      *(_DWORD *)((char *)v18 + 6) = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    uint64_t v11 = a2 + 48;
    int v12 = operator new(0x10uLL);
    int v17 = v12 + 2;
    v18[0] = v12 + 2;
    void *v12 = a1 + 48;
    v12[1] = v11;
    *(void *)std::string buf = v12;
    _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v12);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v11);
  }
  int v13 = __si_assert_copy_extra_329();
  int v14 = v13;
  int v15 = "";
  if (v13) {
    int v15 = v13;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
  free(v14);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE5trainERKNSt3__16vectorIP22AnyVectorIndexInstanceNS5_9allocatorIS8_EEEE(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    long long v33 = __si_assert_copy_extra_329();
    int v34 = v33;
    float16x8_t v35 = "";
    if (v33) {
      float16x8_t v35 = v33;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v35);
    goto LABEL_55;
  }
  if (*v3 != a1)
  {
    float16x8_t v36 = __si_assert_copy_extra_329();
    int v34 = v36;
    long long v37 = "";
    if (v36) {
      long long v37 = v36;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v37);
LABEL_55:
    free(v34);
    if (__valid_fs(-1)) {
      uint64_t v38 = 2989;
    }
    else {
      uint64_t v38 = 3072;
    }
    *(_DWORD *)uint64_t v38 = -559038737;
LABEL_59:
    abort();
  }
  int v7 = (char *)operator new(8uLL);
  *(void *)int v7 = a1 + 48;
  int v8 = v7 + 8;
  uint64_t v40 = v7 + 8;
  float16x8_t v41 = v7 + 8;
  std::string __p = v7;
  if (v4 < 9) {
    goto LABEL_39;
  }
  unint64_t v9 = 1;
  do
  {
    uint64_t v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      long long v30 = __si_assert_copy_extra_329();
      char v31 = v30;
      long long v32 = "";
      if (v30) {
        long long v32 = v30;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v12 = v11 + 48;
    if (v8 < v41)
    {
      *(void *)int v8 = v12;
      int v10 = v8 + 8;
      goto LABEL_6;
    }
    int v13 = (char *)__p;
    int64_t v14 = v8 - (unsigned char *)__p;
    uint64_t v15 = (v8 - (unsigned char *)__p) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_59;
    }
    uint64_t v17 = v41 - (unsigned char *)__p;
    if ((v41 - (unsigned char *)__p) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v19 = operator new(8 * v18);
    }
    else
    {
      int v19 = 0;
    }
    __int16 v20 = &v19[8 * v15];
    int v21 = &v19[8 * v18];
    *__int16 v20 = v12;
    int v10 = v20 + 1;
    if (v8 == v13)
    {
      std::string __p = &v19[8 * v15];
      float16x8_t v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    unint64_t v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      uint64_t v25 = (v22 >> 3) + 1;
      int v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      long long v26 = &v19[8 * v15 - 16];
      long long v27 = v8 - 16;
      uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *long long v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      int v23 = v8;
    }
    do
    {
      uint64_t v24 = *((void *)v23 - 1);
      v23 -= 8;
      *--__int16 v20 = v24;
    }
    while (v23 != v13);
    int v13 = (char *)__p;
LABEL_30:
    std::string __p = v20;
    float16x8_t v41 = v21;
    int v8 = v13;
    if (v13) {
      goto LABEL_33;
    }
LABEL_6:
    uint64_t v40 = v10;
    ++v9;
    int v3 = *(void **)a2;
    int v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  int v7 = (char *)__p;
LABEL_39:
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
  {
    operator delete(v7);
  }
}

unsigned int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE13insertForTestEjjPKv14vec_dimensions15vec_data_formatj(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    int v10 = v9;
    uint64_t v11 = "";
    if (v9) {
      uint64_t v11 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v7 = a7;
  uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((void *)result + 128) = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14insertForMergeEjtjPKv14vec_dimensions15vec_data_formatyjf(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v11 = __si_assert_copy_extra_329();
    uint64_t v12 = v11;
    int v13 = "";
    if (v11) {
      int v13 = v11;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li512EEyjf(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12insertVectorEjjPKv14vec_dimensions15vec_data_format14docInvertStateyP15PostingBaseInfo(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == a1[4])
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    os_log_type_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    int v8 = "";
    if (v6) {
      int v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    uint64_t v7 = v9;
    int v10 = "";
    if (v9) {
      int v10 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

unsigned int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE17bulkInsertForTestEPKvPKjjS8_(unsigned int *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v19 = *a5++;
        unsigned int v18 = v19;
        unsigned int v20 = *a3++;
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 128) = v20;
        a2 += 1024;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v16 = *__error();
          uint64_t v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        unsigned int v13 = a5[v10];
        uint64_t v14 = a3[v10];
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 128) = v14;
        a2 += 1024;
        uint64_t v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6shadowEbPVi(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_log_type_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v9 + 168))(v9, a2, a3);
  uint64_t v10 = vi_onefixedsize_disk_allocator::shadow(*(void *)(*(void *)(a1 + 96) + 32), a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return v10;
    }
  }
  else if (!v7)
  {
    return v10;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v10;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v6 = *(void *)(a1 + 128);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v9 = *(void *)(*(void *)(a1 + 96) + 32);
  unint64_t v10 = *(unsigned int *)(v9 + 72);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 12;
    do
    {
      float v12 = *(void **)(v9 + 8 * v11);
      if (v12 && (unint64_t v13 = v12[1], v13 + 1 >= 2) && v13 <= a2 && (v14 = v12[2], v13 - v14 + v12[3] > a2)) {
        uint64_t v15 = a2 - v13 + v14;
      }
      else {
        uint64_t v15 = -1;
      }
      if (v11 - 11 >= v10) {
        break;
      }
      ++v11;
    }
    while (v15 == -1);
    if (v15 != -1) {
      goto LABEL_17;
    }
  }
  if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 144))(v8, a2) & 1) == 0)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v6 + 56))(v6, a2);
    if (!v7) {
      goto LABEL_21;
    }
  }
  else
  {
LABEL_17:
    uint64_t v16 = 1;
    if (!v7)
    {
LABEL_21:
      if (!v5) {
        return v16;
      }
      goto LABEL_22;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v5) {
    return v16;
  }
LABEL_22:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v16;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE8allExistEPKvj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE(v5, a2))
      {
        a2 += 1024;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE(v5, a2))break; {
        a2 += 1024;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    uint64_t v15 = v14;
    uint64_t v16 = "";
    if (v14) {
      uint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int v4 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj(a1, a2, (int *)&v24, &v23, 0);
  if (v4 == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v9 = *(void *)(a1 + 80);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 96);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 104);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE_block_invoke;
    v20[3] = &unk_1E6345880;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE_block_invoke_1358;
      v15[3] = &unk_1F1816458;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      uint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      unint64_t v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 != -1;
}

int *___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(const void **)(a1 + 48);
  uint64_t v8 = *(unsigned int *)a3;
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 1040) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 1040);
  uint64_t result = (int *)memcmp(v7, v14, 0x400uLL);
  if (!result)
  {
    int v16 = *__error();
    uint64_t v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v22 = a3[1];
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2760;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = a2;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v22;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v16;
    int v18 = *__error();
    unsigned int v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)(a1 + 56);
      double v24 = *(float *)(a1 + 60);
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2761;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v23;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v24;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v18;
    int v20 = *__error();
    unsigned int v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      float v25 = *(float *)(a1 + 60);
      float v26 = a3[1];
      float v27 = vabds_f32(v25, v26);
      if (v25 == v26)
      {
        BOOL v28 = 1;
        BOOL v29 = 1;
      }
      else
      {
        float v30 = fabsf(v25);
        float v31 = fabsf(v26);
        BOOL v28 = v27 <= fmaxf(fminf(v31, v30) * 0.000015259, 0.000015259);
        BOOL v29 = v27 <= (float)(fmaxf(v30, v31) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317186;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2762;
      __int16 v37 = 2048;
      *(double *)uint64_t v38 = v27;
      *(_WORD *)&v38[8] = 2048;
      *(void *)&v38[10] = 0x3810000000000000;
      __int16 v39 = 2048;
      uint64_t v40 = 0x3E80000000000000;
      __int16 v41 = 1024;
      BOOL v42 = v27 < 1.1755e-38;
      __int16 v43 = 1024;
      BOOL v44 = v27 < 0.00000011921;
      __int16 v45 = 1024;
      BOOL v46 = v28;
      __int16 v47 = 1024;
      BOOL v48 = v29;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x48u);
    }
    uint64_t result = __error();
    int *result = v20;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE_block_invoke_1358(uint64_t a1, int a2, unsigned int *a3, unsigned char *a4)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  int v6 = *(const void **)(a1 + 48);
  uint64_t v129 = *(void *)(a1 + 40);
  uint64_t v8 = *a3;
  uint64_t v9 = *(void **)(*(void *)(v129 + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 1040) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 1040);
  if (!memcmp(v6, v14, 0x400uLL))
  {
    int v15 = *__error();
    int v16 = _SILogForLogForCategory(16);
    uint64_t v17 = a3;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      double v57 = *((float *)a3 + 1);
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2770;
      __int16 v141 = 1024;
      float v142 = *(float *)&a2;
      __int16 v143 = 2048;
      *(double *)uint64_t v144 = v57;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v15;
    int v18 = *(float16x8_t **)(a1 + 48);
    unsigned int v19 = (float16x8_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float16x8_t v20 = 0uLL;
    unint64_t v21 = -8;
    do
    {
      float16x8_t v22 = *v18++;
      float16x8_t v23 = v22;
      float16x8_t v24 = *v19++;
      float16x8_t v25 = vsubq_f16(v23, v24);
      float16x8_t v20 = vmlaq_f16(v20, v25, v25);
      v21 += 8;
    }
    while (v21 < 0x1F8);
    float16x8_t v128 = v20;
    int v26 = *__error();
    float v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      _H3 = v128.i16[0];
      __asm { FCVT            S0, H3 }
      _H1 = v128.i16[1];
      __asm { FCVT            S1, H1 }
      float v66 = _S0 + _S1;
      LOWORD(_S1) = v128.i16[2];
      __asm { FCVT            S1, H1 }
      _H2 = v128.i16[3];
      __asm { FCVT            S2, H2 }
      float v70 = v66 + (float)(_S1 + _S2);
      LOWORD(_S1) = v128.i16[4];
      __asm { FCVT            S1, H1 }
      LOWORD(_S2) = v128.i16[5];
      __asm { FCVT            S2, H2 }
      _S1 = _S1 + _S2;
      LOWORD(_S2) = v128.i16[6];
      __asm { FCVT            S2, H2 }
      float v75 = v70 + (float)(_S1 + _S2);
      LOWORD(_S1) = v128.i16[7];
      __asm { FCVT            S1, H1 }
      float v77 = *(float *)(a1 + 88);
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2772;
      __int16 v141 = 1024;
      float v142 = v77;
      __int16 v143 = 2048;
      *(double *)uint64_t v144 = (float)(v75 + _S1);
      _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v26;
    std::string __p = 0;
    long long v135 = 0;
    uint64_t v136 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&__p);
    int v28 = *__error();
    BOOL v29 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      float v78 = *(float *)__p;
      float v79 = *((float *)__p + 1);
      int v80 = *((_DWORD *)__p + 2);
      float v81 = *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316674;
      uint64_t v138 = "exists_block_invoke";
      BOOL v82 = vabds_f32(v79, v81) <= fmaxf(fminf(fabsf(v81), fabsf(v79)) * 0.000015259, 0.000015259);
      int v140 = 2774;
      __int16 v139 = 1024;
      int v83 = v79 == v81 || v82;
      __int16 v141 = 1024;
      float v142 = v78;
      __int16 v143 = 2048;
      *(double *)uint64_t v144 = v79;
      *(_WORD *)&v144[8] = 1024;
      *(_DWORD *)&v144[10] = v80;
      __int16 v145 = 2048;
      double v146 = v81;
      __int16 v147 = 1024;
      LODWORD(v148) = v83;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", buf, 0x38u);
    }
    *__error() = v28;
    int v30 = *__error();
    float v31 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      float v84 = *(float *)__p;
      int v85 = *((_DWORD *)__p + 2);
      BOOL v86 = *((float *)__p + 1) == *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2775;
      __int16 v141 = 1024;
      float v142 = v84;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v85;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v86;
      _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v30;
    int v32 = *__error();
    long long v33 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      float v87 = *(float *)__p;
      int v88 = *((_DWORD *)__p + 2);
      BOOL v89 = *((float *)__p + 1) < *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2776;
      __int16 v141 = 1024;
      float v142 = v87;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v88;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v89;
      _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v32;
    int v34 = *__error();
    __int16 v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      float v90 = *(float *)__p;
      int v91 = *((_DWORD *)__p + 2);
      BOOL v92 = *((float *)__p + 1) > *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2777;
      __int16 v141 = 1024;
      float v142 = v90;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v91;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v92;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v34;
    int v36 = *__error();
    __int16 v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      float v93 = *(float *)__p;
      int v94 = *((_DWORD *)__p + 2);
      float v95 = *((float *)__p + 1);
      float v96 = *((float *)__p + 3);
      double v97 = (float)(v95 - v96);
      float v98 = vabds_f32(v95, v96);
      if (v95 == v96)
      {
        BOOL v99 = 1;
        BOOL v100 = 1;
      }
      else
      {
        float v124 = fabsf(v95);
        float v125 = fabsf(v96);
        BOOL v99 = v98 <= fmaxf(fminf(v125, v124) * 0.000015259, 0.000015259);
        BOOL v100 = v98 <= (float)(fmaxf(v124, v125) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317698;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2778;
      __int16 v141 = 1024;
      float v142 = v93;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v94;
      *(_WORD *)&v144[4] = 2048;
      *(double *)&v144[6] = v97;
      __int16 v145 = 2048;
      double v146 = 1.17549435e-38;
      __int16 v147 = 2048;
      uint64_t v148 = 0x3E80000000000000;
      __int16 v149 = 1024;
      BOOL v150 = v98 < 1.1755e-38;
      __int16 v151 = 1024;
      BOOL v152 = v98 < 0.00000011921;
      __int16 v153 = 1024;
      BOOL v154 = v99;
      __int16 v155 = 1024;
      BOOL v156 = v100;
      _os_log_error_impl(&dword_1BD672000, v37, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x54u);
    }
    *__error() = v36;
    long long v132 = 0;
    uint64_t v133 = 0;
    uint64_t v131 = 0;
    uint64_t v38 = *(void *)(a1 + 56);
    uint64_t v39 = *a3;
    uint64_t v40 = *(void **)(*(void *)(v129 + 48) + 32);
    unint64_t v41 = v40[3] + v40[2] * v39;
    bit_vector_set_10635(v40 + 525, (v41 >> 20));
    unint64_t v42 = (v41 + 1040) >> 20;
    if (v42 > (v41 >> 20))
    {
      unsigned int v43 = (v41 >> 20) + 1;
      do
      {
        unint64_t v44 = v43;
        bit_vector_set_10635(v40 + 525, v43++);
      }
      while (v42 > v44);
    }
    unint64_t v45 = _windowsResolvePtr((uint64_t)(v40 + 5), v40[3] + v40[2] * v39, 1040);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v38 + 80))(&v131, v38, v45, 2);
    int v46 = *__error();
    __int16 v47 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      float v101 = *v131;
      float v102 = v131[1];
      int v103 = *((_DWORD *)v131 + 2);
      float v104 = v131[3];
      *(_DWORD *)std::string buf = 136316674;
      uint64_t v138 = "exists_block_invoke";
      BOOL v105 = vabds_f32(v102, v104) <= fmaxf(fminf(fabsf(v104), fabsf(v102)) * 0.000015259, 0.000015259);
      int v140 = 2781;
      __int16 v139 = 1024;
      int v106 = v102 == v104 || v105;
      __int16 v141 = 1024;
      float v142 = v101;
      __int16 v143 = 2048;
      *(double *)uint64_t v144 = v102;
      *(_WORD *)&v144[8] = 1024;
      *(_DWORD *)&v144[10] = v103;
      __int16 v145 = 2048;
      double v146 = v104;
      __int16 v147 = 1024;
      LODWORD(v148) = v106;
      _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", buf, 0x38u);
    }
    *__error() = v46;
    int v48 = *__error();
    uint64_t v49 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      float v107 = *v131;
      int v108 = *((_DWORD *)v131 + 2);
      BOOL v109 = v131[1] == v131[3];
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2782;
      __int16 v141 = 1024;
      float v142 = v107;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v108;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v109;
      _os_log_error_impl(&dword_1BD672000, v49, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v48;
    int v50 = *__error();
    char v51 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      float v110 = *v131;
      int v111 = *((_DWORD *)v131 + 2);
      BOOL v112 = v131[1] < v131[3];
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2783;
      __int16 v141 = 1024;
      float v142 = v110;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v111;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v112;
      _os_log_error_impl(&dword_1BD672000, v51, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v50;
    int v52 = *__error();
    long long v53 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      float v113 = *v131;
      int v114 = *((_DWORD *)v131 + 2);
      BOOL v115 = v131[1] > v131[3];
      *(_DWORD *)std::string buf = 136316162;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2784;
      __int16 v141 = 1024;
      float v142 = v113;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v114;
      *(_WORD *)&v144[4] = 1024;
      *(_DWORD *)&v144[6] = v115;
      _os_log_error_impl(&dword_1BD672000, v53, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v52;
    int v54 = *__error();
    uint64_t v55 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      float v116 = *v131;
      int v117 = *((_DWORD *)v131 + 2);
      float v118 = v131[1];
      float v119 = v131[3];
      float v120 = vabds_f32(v118, v119);
      BOOL v121 = (float)(v118 - v119) < 1.1755e-38;
      if (v118 == v119)
      {
        BOOL v122 = 1;
        BOOL v123 = 1;
      }
      else
      {
        float v126 = fabsf(v118);
        float v127 = fabsf(v119);
        BOOL v122 = v120 <= fmaxf(fminf(v127, v126) * 0.000015259, 0.000015259);
        BOOL v123 = v120 <= (float)(fmaxf(v126, v127) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317698;
      uint64_t v138 = "exists_block_invoke";
      __int16 v139 = 1024;
      int v140 = 2785;
      __int16 v141 = 1024;
      float v142 = v116;
      __int16 v143 = 1024;
      *(_DWORD *)uint64_t v144 = v117;
      *(_WORD *)&v144[4] = 2048;
      *(double *)&v144[6] = v120;
      __int16 v145 = 2048;
      double v146 = 1.17549435e-38;
      __int16 v147 = 2048;
      uint64_t v148 = 0x3E80000000000000;
      __int16 v149 = 1024;
      BOOL v150 = v121;
      __int16 v151 = 1024;
      BOOL v152 = v120 < 0.00000011921;
      __int16 v153 = 1024;
      BOOL v154 = v122;
      __int16 v155 = 1024;
      BOOL v156 = v123;
      _os_log_error_impl(&dword_1BD672000, v55, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x54u);
    }
    *__error() = v54;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v17;
    long long v56 = v131;
    *a4 = 1;
    if (v56)
    {
      long long v132 = v56;
      operator delete(v56);
    }
    if (__p)
    {
      long long v135 = __p;
      operator delete(__p);
    }
  }
}

void __destroy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li512EE19QuantizerPartitionsE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li512EE19QuantizerPartitionsE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE11nPartitionsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE8nVectorsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1816230;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1816230;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEC2IS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueES8_E4type11meta_info_sEP16vector_storage_s(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = a1 + 64;
  bzero(v6, 0x400uLL);
  uint64_t v5 = fd_name(*(void *)a2, v6, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  operator new();
}

void _ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi(void *a1, uint64_t a2, int a3)
{
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x3802000000;
  int v15 = __Block_byref_object_copy__330;
  uint64_t v17 = 0;
  int v18 = 0;
  int v16 = __Block_byref_object_dispose__331;
  if (_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken != -1) {
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken, &__block_literal_global_221);
  }
  uint64_t v17 = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq;
  int v6 = *(std::__shared_weak_count **)(_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq + 8);
  int v18 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(NSObject **)(a2 + 16);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi_block_invoke;
  v10[3] = &unk_1E6344E78;
  int v11 = a3;
  v10[4] = &v12;
  v10[5] = a2;
  dispatch_sync(v7, v10);
  uint64_t v8 = v13[6];
  *a1 = v13[5];
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v12, 8);
  uint64_t v9 = v18;
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEE(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v8 = *a2;
  if (v6 != *a2)
  {
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v18 = *a2;
    unsigned int v19 = v9;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v14 = *a2;
      int v15 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v14 = v8;
      int v15 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 40))(&v16, a1, &v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v18, &v16);
    int v11 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    unint64_t v13 = v19;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

__n128 __Block_byref_object_copy__330(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__331(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v2) {
    goto LABEL_55;
  }
  int8x8_t v4 = *(int8x8_t *)(v3 + 120);
  if (!*(void *)&v4) {
    goto LABEL_22;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = *(int *)(a1 + 48);
    if (*(void *)&v4 <= v2) {
      unint64_t v6 = v2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v2;
  }
  uint64_t v7 = *(uint64_t ***)(*(void *)(v3 + 112) + 8 * v6);
  if (!v7 || (uint64_t v8 = *v7) == 0)
  {
LABEL_22:
    long long v50 = 0uLL;
    int64_t v51 = 0;
    int v12 = *(char *)(v3 + 71);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v13 = *(void *)(v3 + 56);
    }
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_99;
    }
    if (v14 >= 0x17)
    {
      uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v16 = v14 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v13 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
      if (!v13) {
        goto LABEL_36;
      }
    }
    if (v12 >= 0) {
      uint64_t v18 = (const void *)(v3 + 48);
    }
    else {
      uint64_t v18 = *(const void **)(v3 + 48);
    }
    memmove(p_dst, v18, v13);
LABEL_36:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 46;
    std::to_string(&v47, v2);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v19 = &v47;
    }
    else {
      unsigned int v19 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    unint64_t v21 = std::string::append(&__dst, (const std::string::value_type *)v19, size);
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    float16x8_t v23 = std::string::append(&v49, ".quantizer");
    int64_t v24 = v23->__r_.__value_.__r.__words[2];
    long long v50 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v51 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_45:
          if (v51 >= 0) {
            float16x8_t v25 = (const char *)&v50;
          }
          else {
            float16x8_t v25 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v25, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          goto LABEL_55;
        }
LABEL_52:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == v2)
      {
        if (*((_DWORD *)v8 + 4) == v2) {
          goto LABEL_92;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_22;
      }
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == v2) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_22;
    }
LABEL_12:
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v8 + 4) != v2) {
    goto LABEL_12;
  }
LABEL_92:
  unint64_t v42 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v3 + 112, v2, (_DWORD *)(a1 + 48));
  unsigned int v43 = (std::__shared_weak_count *)v42[4];
  if (v43 && (unsigned int v43 = std::__shared_weak_count::lock(v43)) != 0) {
    uint64_t v44 = v42[3];
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = *(void *)(*(void *)(a1 + 32) + 8);
  int v46 = *(std::__shared_weak_count **)(v45 + 48);
  *(void *)(v45 + 40) = v44;
  *(void *)(v45 + 48) = v43;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_55:
  uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
  if (_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken != -1) {
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken, &__block_literal_global_221);
  }
  uint64_t v28 = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq;
  float v27 = *(std::__shared_weak_count **)(_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq + 8);
  if (!v27)
  {
    if (*(void *)(v26 + 40) != v28) {
      return;
    }
LABEL_64:
    uint64_t v30 = *(void *)(v3 + 80);
    if (v30)
    {
      uint64_t v31 = *(void *)(v3 + 88);
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8);
      long long v33 = *(std::__shared_weak_count **)(v32 + 48);
      *(void *)(v32 + 40) = v30;
      *(void *)(v32 + 48) = v31;
      if (v33)
      {
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      return;
    }
    int v34 = *(char *)(v3 + 71);
    if (v34 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v3 + 71);
    }
    else {
      size_t v35 = *(void *)(v3 + 56);
    }
    unint64_t v36 = v35 + 10;
    if (v35 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v36 >= 0x17)
      {
        uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17) {
          uint64_t v38 = v36 | 7;
        }
        uint64_t v39 = v38 + 1;
        __int16 v37 = (char *)operator new(v38 + 1);
        *((void *)&v50 + 1) = v35 + 10;
        int64_t v51 = v39 | 0x8000000000000000;
        *(void *)&long long v50 = v37;
      }
      else
      {
        int64_t v51 = 0;
        long long v50 = 0uLL;
        __int16 v37 = (char *)&v50;
        HIBYTE(v51) = v35 + 10;
        if (!v35)
        {
LABEL_84:
          strcpy(&v37[v35], ".quantizer");
          if (v51 >= 0) {
            unint64_t v41 = (const char *)&v50;
          }
          else {
            unint64_t v41 = (const char *)v50;
          }
          if (fd_create_protected(*(_DWORD *)v3, v41, 0, 3u)) {
            operator new();
          }
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)v50);
          }
          return;
        }
      }
      if (v34 >= 0) {
        uint64_t v40 = (const void *)(v3 + 48);
      }
      else {
        uint64_t v40 = *(const void **)(v3 + 48);
      }
      memmove(v37, v40, v35);
      goto LABEL_84;
    }
LABEL_99:
    abort();
  }
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v29 = *(void *)(v26 + 40);
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v29 == v28) {
      goto LABEL_64;
    }
  }
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EEC2EN19vi_ondisk_allocator11meta_info_sE(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = &unk_1F1814430;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(void *)(a1 + 64) = fd_dup(*(void *)a2);
  bzero(v9, 0x400uLL);
  uint8x8_t v5 = fd_name(*(void *)a2, v9, 0x400uLL);
  MEMORY[0x1C1880BF0](v4, v5);
  if (*(void *)(a1 + 64)) {
    operator new();
  }
  unint64_t v6 = __si_assert_copy_extra_329();
  uint64_t v7 = v6;
  uint64_t v8 = "";
  if (v6) {
    uint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 487, "fdPtr != nullptr", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void _ZNK9QuantizerIDF16_Li256EE14topKPartitionsERK10CIVector_sIDF16_Li256EEi(uint64_t a1@<X0>, float16x8_t *a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    uint64_t v7 = 0;
    float v75 = 0;
    float v74 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_74;
  }
  BOOL v100 = a4;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = a3;
  int v12 = a2;
  do
  {
    size_t v13 = (float16x8_t *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 72))(a1, v10);
    unint64_t v14 = (v10 | ((unint64_t)COERCE_UNSIGNED_INT(_ZNK10CIVector_sIDF16_Li256EE8distanceERKS0_(v13, v12)) << 32)) >> 32;
    uint64_t v15 = v7 - v9;
    uint64_t v16 = (v7 - v9) >> 3;
    if (v16 < v11)
    {
      if (v7 < v8)
      {
        *(_DWORD *)uint64_t v7 = v10;
        *((_DWORD *)v7 + 1) = v14;
        v7 += 8;
LABEL_47:
        if (v7 - v9 >= 9)
        {
          unint64_t v48 = (((unint64_t)(v7 - v9) >> 3) - 2) >> 1;
          std::string v49 = (float *)&v9[8 * v48];
          int64_t v51 = v7 - 8;
          unsigned int v50 = *((_DWORD *)v7 - 2);
          float v52 = v49[1];
          float v53 = *((float *)v7 - 1);
          int v54 = *(_DWORD *)v49;
          BOOL v55 = *(_DWORD *)v49 < v50;
          if (v52 != v53) {
            BOOL v55 = v52 < v53;
          }
          if (v55)
          {
            do
            {
              long long v56 = v49;
              *(_DWORD *)int64_t v51 = v54;
              *((float *)v51 + 1) = v49[1];
              if (!v48) {
                break;
              }
              unint64_t v48 = (v48 - 1) >> 1;
              std::string v49 = (float *)&v9[8 * v48];
              float v57 = v49[1];
              int v54 = *(_DWORD *)v49;
              BOOL v58 = v57 < v53;
              if (v57 == v53) {
                BOOL v58 = *(_DWORD *)v49 < v50;
              }
              int64_t v51 = (char *)v56;
            }
            while (v58);
            *(_DWORD *)long long v56 = v50;
            v56[1] = v53;
          }
        }
        goto LABEL_4;
      }
      if ((v8 - v9) >> 2 <= (unint64_t)(v16 + 1)) {
        unint64_t v28 = v16 + 1;
      }
      else {
        unint64_t v28 = (v8 - v9) >> 2;
      }
      if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v28 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v29 = 8 * v28;
      uint64_t v30 = operator new(8 * v28);
      uint64_t v31 = &v30[8 * v16];
      *uint64_t v31 = v10;
      v31[1] = v14;
      if (v7 == v9)
      {
        unint64_t v36 = v7;
        uint64_t v9 = &v30[8 * v16];
        goto LABEL_44;
      }
      unint64_t v32 = v7 - v9 - 8;
      if (v32 >= 0x58 && (unint64_t)(v9 - v30) >= 0x20)
      {
        uint64_t v68 = (v32 >> 3) + 1;
        long long v33 = &v7[-8 * (v68 & 0x3FFFFFFFFFFFFFFCLL)];
        float16x8_t v69 = &v30[8 * v16 - 16];
        float v70 = v7 - 16;
        uint64_t v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v72 = *(_OWORD *)v70;
          *(v69 - 1) = *((_OWORD *)v70 - 1);
          *float16x8_t v69 = v72;
          v69 -= 2;
          v70 -= 32;
          v71 -= 4;
        }
        while (v71);
        int v34 = (char *)&v31[-2 * (v68 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_32;
        }
      }
      else
      {
        long long v33 = v7;
        int v34 = &v30[8 * v16];
      }
      do
      {
        uint64_t v35 = *((void *)v33 - 1);
        v33 -= 8;
        *((void *)v34 - 1) = v35;
        v34 -= 8;
      }
      while (v33 != v9);
LABEL_32:
      unint64_t v36 = v9;
      uint64_t v9 = v34;
LABEL_44:
      uint64_t v8 = &v30[v29];
      uint64_t v7 = (char *)(v31 + 2);
      if (v36) {
        operator delete(v36);
      }
      int v12 = a2;
      goto LABEL_47;
    }
    float v17 = *((float *)v9 + 1);
    int v18 = *(_DWORD *)v9;
    BOOL v19 = *(_DWORD *)v9 > v10;
    if (v17 != *(float *)&v14) {
      BOOL v19 = v17 > *(float *)&v14;
    }
    if (v19)
    {
      if (v15 <= 8)
      {
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v14;
      }
      else
      {
        uint64_t v20 = 0;
        unint64_t v21 = v9;
        do
        {
          uint64_t v26 = (float *)&v21[8 * v20 + 8];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v16)
          {
            float v22 = v26[1];
            float v23 = v26[3];
            float v24 = *v26;
            BOOL v25 = *(_DWORD *)v26 < *((_DWORD *)v26 + 2);
            if (v22 != v23) {
              BOOL v25 = v22 < v23;
            }
            if (v25)
            {
              float v24 = v26[2];
              v26 += 2;
            }
            else
            {
              uint64_t v20 = v27;
            }
          }
          else
          {
            float v24 = *v26;
            uint64_t v20 = v27;
          }
          *(float *)unint64_t v21 = v24;
          *((float *)v21 + 1) = v26[1];
          unint64_t v21 = (char *)v26;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v26 == (float *)(v7 - 8))
        {
          *(_DWORD *)uint64_t v26 = v18;
          v26[1] = v17;
        }
        else
        {
          *uint64_t v26 = *((float *)v7 - 2);
          v26[1] = *((float *)v7 - 1);
          *((_DWORD *)v7 - 2) = v18;
          *((float *)v7 - 1) = v17;
          uint64_t v37 = (char *)v26 - v9 + 8;
          if (v37 >= 9)
          {
            unint64_t v38 = (((unint64_t)v37 >> 3) - 2) >> 1;
            uint64_t v39 = (float *)&v9[8 * v38];
            float v40 = v39[1];
            float v41 = v26[1];
            int v42 = *(_DWORD *)v39;
            float v43 = *v26;
            BOOL v44 = *(_DWORD *)v39 < *(_DWORD *)v26;
            if (v40 != v41) {
              BOOL v44 = v40 < v41;
            }
            if (v44)
            {
              do
              {
                uint64_t v45 = v39;
                *(_DWORD *)uint64_t v26 = v42;
                v26[1] = v39[1];
                if (!v38) {
                  break;
                }
                unint64_t v38 = (v38 - 1) >> 1;
                uint64_t v39 = (float *)&v9[8 * v38];
                float v46 = v39[1];
                int v42 = *(_DWORD *)v39;
                BOOL v47 = v46 < v41;
                if (v46 == v41) {
                  BOOL v47 = *(_DWORD *)v39 < LODWORD(v43);
                }
                uint64_t v26 = v45;
              }
              while (v47);
              *uint64_t v45 = v43;
              v45[1] = v41;
            }
          }
        }
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v14;
        uint64_t v59 = v7 - 8;
        unint64_t v60 = (((unint64_t)v15 >> 3) - 2) >> 1;
        uint64_t v61 = (float *)&v9[8 * v60];
        float v62 = v61[1];
        int v63 = *(_DWORD *)v61;
        BOOL v64 = *(_DWORD *)v61 < v10;
        if (v62 != *(float *)&v14) {
          BOOL v64 = v62 < *(float *)&v14;
        }
        if (v64)
        {
          do
          {
            float16x8_t v65 = v61;
            *(_DWORD *)uint64_t v59 = v63;
            *((float *)v59 + 1) = v61[1];
            if (!v60) {
              break;
            }
            unint64_t v60 = (v60 - 1) >> 1;
            uint64_t v61 = (float *)&v9[8 * v60];
            float v66 = v61[1];
            int v63 = *(_DWORD *)v61;
            BOOL v67 = v66 < *(float *)&v14;
            if (v66 == *(float *)&v14) {
              BOOL v67 = *(_DWORD *)v61 < v10;
            }
            uint64_t v59 = (char *)v65;
          }
          while (v67);
          *(_DWORD *)float16x8_t v65 = v10;
          *((_DWORD *)v65 + 1) = v14;
        }
      }
    }
LABEL_4:
    ++v10;
  }
  while (v10 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1));
  *BOOL v100 = 0;
  v100[1] = 0;
  v100[2] = 0;
  uint64_t v73 = v7 - v9;
  if (v7 == v9)
  {
    float v75 = 0;
    float v74 = 0;
  }
  else
  {
    if (v73 < 0) {
      abort();
    }
    float v74 = (int *)operator new(v7 - v9);
    *BOOL v100 = v74;
    v100[2] = &v74[2 * (v73 >> 3)];
    memcpy(v74, v9, v73 & 0xFFFFFFFFFFFFFFF8);
    float v75 = (float *)((char *)v74 + (v73 & 0xFFFFFFFFFFFFFFF8));
    v100[1] = (int *)v75;
    uint64_t v7 = v9;
  }
LABEL_74:
  if ((char *)v75 - (char *)v74 >= 9)
  {
    uint64_t v76 = (unint64_t)((char *)v75 - (char *)v74) >> 3;
    do
    {
      uint64_t v78 = 0;
      int v79 = *v74;
      int v80 = v74[1];
      float v81 = (float *)v74;
      do
      {
        BOOL v86 = &v81[2 * v78 + 2];
        uint64_t v87 = (2 * v78) | 1;
        uint64_t v78 = 2 * v78 + 2;
        if (v78 < v76)
        {
          float v82 = v86[1];
          float v83 = v86[3];
          float v84 = *v86;
          BOOL v85 = *(_DWORD *)v86 < *((_DWORD *)v86 + 2);
          if (v82 != v83) {
            BOOL v85 = v82 < v83;
          }
          if (v85)
          {
            float v84 = v86[2];
            v86 += 2;
          }
          else
          {
            uint64_t v78 = v87;
          }
        }
        else
        {
          float v84 = *v86;
          uint64_t v78 = v87;
        }
        *float v81 = v84;
        v81[1] = v86[1];
        float v81 = v86;
      }
      while (v78 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
      int v88 = (char *)(v75 - 2);
      if (v86 == v75 - 2)
      {
        *(_DWORD *)BOOL v86 = v79;
        *((_DWORD *)v86 + 1) = v80;
      }
      else
      {
        *BOOL v86 = *(v75 - 2);
        v86[1] = *(v75 - 1);
        *((_DWORD *)v75 - 2) = v79;
        *((_DWORD *)v75 - 1) = v80;
        uint64_t v89 = (char *)v86 - (char *)v74 + 8;
        if (v89 >= 9)
        {
          unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
          int v91 = (float *)&v74[2 * v90];
          float v92 = v91[1];
          float v93 = v86[1];
          float v94 = *v91;
          float v95 = *v86;
          BOOL v96 = *(_DWORD *)v91 < *(_DWORD *)v86;
          if (v92 != v93) {
            BOOL v96 = v92 < v93;
          }
          if (v96)
          {
            do
            {
              double v97 = v91;
              *BOOL v86 = v94;
              v86[1] = v91[1];
              if (!v90) {
                break;
              }
              unint64_t v90 = (v90 - 1) >> 1;
              int v91 = (float *)&v74[2 * v90];
              float v98 = v91[1];
              float v94 = *v91;
              BOOL v99 = v98 < v93;
              if (v98 == v93) {
                BOOL v99 = *(_DWORD *)v91 < LODWORD(v95);
              }
              BOOL v86 = v97;
            }
            while (v99);
            *double v97 = v95;
            v97[1] = v93;
          }
        }
      }
      float v75 = (float *)v88;
    }
    while (v76-- > 2);
  }
  if (v7)
  {
    operator delete(v7);
  }
}

float _ZNK10CIVector_sIDF16_Li256EE8distanceERKS0_(float16x8_t *a1, float16x8_t *a2)
{
  float16x8_t v2 = vsubq_f16(*a1, *a2);
  float16x8_t v3 = vsubq_f16(a1[1], a2[1]);
  float16x8_t v4 = vmlaq_f16(vmulq_f16(v2, v2), v3, v3);
  float16x8_t v5 = vsubq_f16(a1[2], a2[2]);
  float16x8_t v6 = vmlaq_f16(v4, v5, v5);
  float16x8_t v7 = vsubq_f16(a1[3], a2[3]);
  float16x8_t v8 = vmlaq_f16(v6, v7, v7);
  float16x8_t v9 = vsubq_f16(a1[4], a2[4]);
  float16x8_t v10 = vmlaq_f16(v8, v9, v9);
  float16x8_t v11 = vsubq_f16(a1[5], a2[5]);
  float16x8_t v12 = vmlaq_f16(v10, v11, v11);
  float16x8_t v13 = vsubq_f16(a1[6], a2[6]);
  float16x8_t v14 = vmlaq_f16(v12, v13, v13);
  float16x8_t v15 = vsubq_f16(a1[7], a2[7]);
  float16x8_t v16 = vmlaq_f16(v14, v15, v15);
  float16x8_t v17 = vsubq_f16(a1[8], a2[8]);
  float16x8_t v18 = vmlaq_f16(v16, v17, v17);
  float16x8_t v19 = vsubq_f16(a1[9], a2[9]);
  float16x8_t v20 = vmlaq_f16(v18, v19, v19);
  float16x8_t v21 = vsubq_f16(a1[10], a2[10]);
  float16x8_t v22 = vmlaq_f16(v20, v21, v21);
  float16x8_t v23 = vsubq_f16(a1[11], a2[11]);
  float16x8_t v24 = vmlaq_f16(v22, v23, v23);
  float16x8_t v25 = vsubq_f16(a1[12], a2[12]);
  float16x8_t v26 = vmlaq_f16(v24, v25, v25);
  float16x8_t v27 = vsubq_f16(a1[13], a2[13]);
  float16x8_t v28 = vmlaq_f16(v26, v27, v27);
  float16x8_t v29 = vsubq_f16(a1[14], a2[14]);
  float16x8_t v30 = vmlaq_f16(v28, v29, v29);
  float16x8_t v31 = vsubq_f16(a1[15], a2[15]);
  float16x8_t v32 = vmlaq_f16(v30, v31, v31);
  float16x8_t v33 = vsubq_f16(a1[16], a2[16]);
  float16x8_t v34 = vmlaq_f16(v32, v33, v33);
  float16x8_t v35 = vsubq_f16(a1[17], a2[17]);
  float16x8_t v36 = vmlaq_f16(v34, v35, v35);
  float16x8_t v37 = vsubq_f16(a1[18], a2[18]);
  float16x8_t v38 = vmlaq_f16(v36, v37, v37);
  float16x8_t v39 = vsubq_f16(a1[19], a2[19]);
  float16x8_t v40 = vmlaq_f16(v38, v39, v39);
  float16x8_t v41 = vsubq_f16(a1[20], a2[20]);
  float16x8_t v42 = vmlaq_f16(v40, v41, v41);
  float16x8_t v43 = vsubq_f16(a1[21], a2[21]);
  float16x8_t v44 = vmlaq_f16(v42, v43, v43);
  float16x8_t v45 = vsubq_f16(a1[22], a2[22]);
  float16x8_t v46 = vmlaq_f16(v44, v45, v45);
  float16x8_t v47 = vsubq_f16(a1[23], a2[23]);
  float16x8_t v48 = vmlaq_f16(v46, v47, v47);
  float16x8_t v49 = vsubq_f16(a1[24], a2[24]);
  float16x8_t v50 = vmlaq_f16(v48, v49, v49);
  float16x8_t v51 = vsubq_f16(a1[25], a2[25]);
  float16x8_t v52 = vmlaq_f16(v50, v51, v51);
  float16x8_t v53 = vsubq_f16(a1[26], a2[26]);
  float16x8_t v54 = vmlaq_f16(v52, v53, v53);
  float16x8_t v55 = vsubq_f16(a1[27], a2[27]);
  float16x8_t v56 = vmlaq_f16(v54, v55, v55);
  float16x8_t v57 = vsubq_f16(a1[28], a2[28]);
  float16x8_t v58 = vmlaq_f16(v56, v57, v57);
  float16x8_t v59 = vsubq_f16(a1[29], a2[29]);
  float16x8_t v60 = vmlaq_f16(v58, v59, v59);
  float16x8_t v61 = vsubq_f16(a1[30], a2[30]);
  float16x8_t v62 = vmlaq_f16(v60, v61, v61);
  float16x8_t v63 = vsubq_f16(a1[31], a2[31]);
  float16x8_t v64 = vmlaq_f16(v62, v63, v63);
  float32x4_t v65 = vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v64.i8), vcvt_hight_f32_f16(v64));
  return vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v65, v65));
}

unint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    float16x8_t v5 = __si_assert_copy_extra_329();
    float16x8_t v6 = v5;
    float16x8_t v7 = "";
    if (v5) {
      float16x8_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "i < nCentroids", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(v2 + 24) + *(void *)(v2 + 16) * a2;
  return _windowsResolvePtr(v2 + 40, v3, 512);
}

BOOL _ZNK9QuantizerIDF16_Li256EE12isPersistentEv(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  int v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8) {
      return 1;
    }
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(void *)(a1 + 16) == 8)
  {
    uint64_t v1 = (void *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

BOOL _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(unsigned int *)(v2 + 72);
  if ((int)v3 < 1)
  {
    uint64_t v8 = -1;
  }
  else
  {
    uint64_t v4 = 12;
    do
    {
      float16x8_t v5 = *(void **)(v2 + 8 * v4);
      if (v5 && (unint64_t v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2)) {
        uint64_t v8 = a2 - v6 + v7;
      }
      else {
        uint64_t v8 = -1;
      }
      if (v4 - 11 >= v3) {
        break;
      }
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

BOOL _ZNK9QuantizerIDF16_Li256EEeqERK12AnyQuantizer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 256)
  {
    float16x8_t v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 291, "D == other.dimension()", v7);
LABEL_12:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) != 2)
  {
    uint64_t v8 = __si_assert_copy_extra_329();
    unint64_t v6 = v8;
    float16x8_t v9 = "";
    if (v8) {
      float16x8_t v9 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 292, "sizeof(ELEM_TYPE) == other.elementSize()", v9);
    goto LABEL_12;
  }
  return _ZNK9QuantizerIDF16_Li256EEeqERKS0_(a1, a2);
}

BOOL _ZNK9QuantizerIDF16_Li256EEeqERKS0_(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    return 1;
  }
  uint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v5);
    uint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v5);
    int v8 = memcmp(v6, v7, 0x200uLL);
    BOOL result = v8 == 0;
    if (v8) {
      break;
    }
    uint64_t v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
      return 1;
    }
  }
  return result;
}

uint64_t _ZNK9QuantizerIDF16_Li256EE11elementSizeEv()
{
  return 2;
}

uint64_t _ZNK9QuantizerIDF16_Li256EE9dimensionEv()
{
  return 256;
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EE5countEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EE7versionEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EED0Ev(uint64_t a1)
{
  _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EED2Ev(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EED2Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814430;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if (v2) {
    vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(a1 + 40));
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    int v4 = *(const void **)(v3 + 4216);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 4216) = 0;
    }
    *(_OWORD *)(v3 + 4200) = 0u;
    MEMORY[0x1C1881000](v3, 0x10A0C40112AF241);
  }
  fd_release(*(atomic_uint **)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    unint64_t v6 = *(const void **)(v5 + 4216);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v5 + 4216) = 0;
    }
    *(_OWORD *)(v5 + 4200) = 0u;
    MEMORY[0x1C1881000](v5, 0x10A0C40112AF241);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ___ZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li256EENS_10shared_ptrI9QuantizerIDF16_Li256EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li256EENS_10shared_ptrI9QuantizerIDF16_Li256EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

float *_ZNK21SingleVectorQuantizerIDF16_Li256EE14topKPartitionsERK10CIVector_sIDF16_Li256EEi@<X0>(uint64_t a1@<X0>, float16x8_t *a2@<X1>, float **a3@<X8>)
{
  float v4 = _ZNK10CIVector_sIDF16_Li256EE8distanceERKS0_(a2, (float16x8_t *)(a1 + 33));
  uint64_t result = (float *)operator new(8uLL);
  a3[1] = result + 2;
  a3[2] = result + 2;
  float *result = 0.0;
  result[1] = v4;
  *a3 = result;
  return result;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li256EE11getCentroidEj(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    float v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 396, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li256EE5countEv()
{
  return 1;
}

void _ZN19ZeroVectorQuantizerIDF16_Li256EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN19ZeroVectorQuantizerIDF16_Li256EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZN21SingleVectorQuantizerIDF16_Li256EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN21SingleVectorQuantizerIDF16_Li256EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

double ___ZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEv_block_invoke()
{
  LOWORD(_ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid) = COERCE_UNSIGNED_INT(1.0);
  double result = 0.0;
  unk_1E9FE4120 = 0u;
  unk_1E9FE4022 = 0u;
  *(long long *)((char *)&xmmword_1E9FE4010 + 2) = 0u;
  unk_1E9FE4002 = 0u;
  *(long long *)((char *)&xmmword_1E9FE3FF0 + 2) = 0u;
  unk_1E9FE3FE2 = 0u;
  *(long long *)((char *)&xmmword_1E9FE3FD0 + 2) = 0u;
  unk_1E9FE3FC2 = 0u;
  *(long long *)((char *)&xmmword_1E9FE3FB0 + 2) = 0u;
  unk_1E9FE3FA2 = 0u;
  *(long long *)((char *)&xmmword_1E9FE3F90 + 2) = 0u;
  unk_1E9FE3F82 = 0u;
  *(long long *)((char *)&xmmword_1E9FE3F70 + 2) = 0u;
  unk_1E9FE3F62 = 0u;
  *(long long *)((char *)&xmmword_1E9FE3F50 + 2) = 0u;
  unk_1E9FE3F42 = 0u;
  *(long long *)((char *)&_ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid + 2) = 0u;
  xmmword_1E9FE4102 = 0u;
  unk_1E9FE4112 = 0u;
  xmmword_1E9FE40E2 = 0u;
  unk_1E9FE40F2 = 0u;
  xmmword_1E9FE40C2 = 0u;
  unk_1E9FE40D2 = 0u;
  xmmword_1E9FE40A2 = 0u;
  unk_1E9FE40B2 = 0u;
  xmmword_1E9FE4082 = 0u;
  unk_1E9FE4092 = 0u;
  xmmword_1E9FE4062 = 0u;
  unk_1E9FE4072 = 0u;
  xmmword_1E9FE4042 = 0u;
  unk_1E9FE4052 = 0u;
  *(long long *)((char *)&xmmword_1E9FE4030 + 2) = 0u;
  return result;
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li256EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    unsigned __int8 v2 = *(NSObject **)(v1 + 16);
    if (v2) {
      dispatch_release(v2);
    }
    int v3 = *__error();
    float v4 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (void *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      unint64_t v6 = (void *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0) {
        unint64_t v6 = (void *)*v6;
      }
      int v13 = 136315394;
      float16x8_t v14 = v5;
      __int16 v15 = 2080;
      float16x8_t v16 = v6;
      _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v13, 0x16u);
    }
    *__error() = v3;
    uint64_t v7 = *(void **)(v1 + 128);
    if (v7)
    {
      do
      {
        float16x8_t v11 = (void *)*v7;
        float16x8_t v12 = (std::__shared_weak_count *)v7[4];
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        operator delete(v7);
        uint64_t v7 = v11;
      }
      while (v11);
    }
    int v8 = *(void **)(v1 + 112);
    *(void *)(v1 + 112) = 0;
    if (v8) {
      operator delete(v8);
    }
    float16x8_t v9 = *(std::__shared_weak_count **)(v1 + 104);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    float16x8_t v10 = *(std::__shared_weak_count **)(v1 + 88);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_19:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_29:
        operator delete(*(void **)(v1 + 24));
LABEL_20:
        JUMPOUT(0x1C1881000);
      }
    }
    else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }
  return result;
}

void _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li256EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void ___ZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijt_block_invoke()
{
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEE16__on_zero_sharedEv(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    int v3 = *(const void **)(v2 + 4216);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 4216) = 0;
    }
    *(_OWORD *)(v2 + 4200) = 0u;
    JUMPOUT(0x1C1881000);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1815F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1815F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEENS6_I17AnyPartitionStoreEE(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  float16x8_t v10 = *(char **)(a1 + 80);
  int v8 = *(std::__shared_weak_count **)(a1 + 88);
  float16x8_t v9 = (long long *)(a1 + 80);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float16x8_t v12 = *(_DWORD **)(a1 + 96);
  float16x8_t v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  float16x8_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    float16x8_t v29 = __si_assert_copy_extra_329();
    float16x8_t v30 = v29;
    float16x8_t v31 = "";
    if (v29) {
      float16x8_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 48) + 40) != v14[18])
  {
    float16x8_t v32 = __si_assert_copy_extra_329();
    float16x8_t v30 = v32;
    float16x8_t v33 = "";
    if (v32) {
      float16x8_t v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    __int16 v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      float16x8_t v16 = v10 + 8;
      if (v10[31] < 0) {
        float16x8_t v16 = (void *)*v16;
      }
      float16x8_t v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      float16x8_t v18 = (void *)(*a2 + 8);
      float16x8_t v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        float16x8_t v18 = (void *)*v18;
      }
      float16x8_t v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      float16x8_t v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        float16x8_t v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      float16x8_t v21 = __p;
      if (v45 < 0) {
        float16x8_t v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      float16x8_t v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      float16x8_t v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      float16x8_t v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      float16x8_t v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    float16x8_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  float16x8_t v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  float16x8_t v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  float16x8_t v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  float16x8_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13newPartitionsENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEE(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  unint64_t v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    unint64_t v6 = ".tmp.partitions";
  }
  memset(v16, 0, sizeof(v16));
  long long v7 = *(_OWORD *)(a1 + 24);
  v15[0] = *(_OWORD *)(a1 + 8);
  v15[1] = v7;
  size_t v8 = strlen(v6);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  float16x8_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    float16x8_t v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    unint64_t v14 = v12 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v14) = v8;
    float16x8_t v10 = __dst;
    if (!v8)
    {
LABEL_16:
      *((unsigned char *)v9 + (void)v10) = 0;
      IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)v16, (uint64_t)v15, (uint64_t)__dst, 1);
      if (SHIBYTE(v14) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v10, v6, (size_t)v9);
  goto LABEL_16;
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE17getVectorAtOffsetEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v3 = a2;
  unint64_t v4 = v2[3] + v2[2] * a2;
  bit_vector_set_10635(v2 + 525, (v4 >> 20));
  unint64_t v5 = (v4 + 528) >> 20;
  if (v5 > (v4 >> 20))
  {
    unsigned int v6 = (v4 >> 20) + 1;
    do
    {
      unint64_t v7 = v6;
      bit_vector_set_10635(v2 + 525, v6++);
    }
    while (v5 > v7);
  }
  unint64_t v8 = v2[3] + v2[2] * v3;
  return _windowsResolvePtr((uint64_t)(v2 + 5), v8, 528);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED0Ev(void *a1)
{
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(a1);
  JUMPOUT(0x1C1881000);
}

void *_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(void *a1)
{
  *a1 = &unk_1F1815F08;
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    unint64_t v5 = (std::__shared_weak_count *)a1[7];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE12diagnoseDumpERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS5_13basic_ostreamIcS8_EEi(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  float16x8_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  __int16 v15 = (void *)std::ostream::operator<<();
  float16x8_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v17 = "(readOnly)";
  }
  else {
    uint64_t v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 208)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  float16x8_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    float16x8_t v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    float16x8_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    float16x8_t v28 = (void *)std::ostream::operator<<();
    float16x8_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    float16x8_t v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  float16x8_t v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  float16x8_t v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 96);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  float16x8_t v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 40))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      float16x8_t v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v52, 528);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 40));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t v43 = _windowsResolvePtr(*(void *)(v35 + 32) + 40, *(void *)(*(void *)(v35 + 32) + 24) + *(void *)(*(void *)(v35 + 32) + 16) * v40, 528);
        float16x8_t v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        float16x8_t v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, v43, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, v43 + 504, 8);
        if ((v71 & 0x80u) == 0) {
          float16x8_t v49 = &v69;
        }
        else {
          float16x8_t v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  float16x8_t v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE6statusERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  int v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float16x8_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v31);
  if (v31)
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE26updateVectorStorageOffsetsEP13__SIUINT64Set(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 48;
  if (a2)
  {
    unint64_t v5 = 0;
    uint64_t v25 = a2 + 56;
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (v5 >= result) {
        break;
      }
      uint64_t v8 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v9 = v8[3] + v8[2] * v5;
      bit_vector_set_10635(v8 + 525, (v9 >> 20));
      unint64_t v10 = (v9 + 528) >> 20;
      if (v10 > (v9 >> 20))
      {
        unsigned int v11 = (v9 >> 20) + 1;
        do
        {
          unint64_t v12 = v11;
          bit_vector_set_10635(v8 + 525, v11++);
        }
        while (v10 > v12);
      }
      unint64_t v6 = _windowsResolvePtr((uint64_t)(v8 + 5), v8[3] + v8[2] * v5, 528);
      if (!*(unsigned char *)(a2 + 184))
      {
        unint64_t v13 = *(unsigned int *)(v6 + 520);
        int v14 = *(_DWORD *)(a2 + 24);
        if (!v14 || !((*(void *)(a2 + 16) ^ v13) >> (-4 * v14)))
        {
          char v15 = (60 - 4 * v14) & 0xFC;
          uint64_t v16 = *(void *)(v25 + 8 * ((v13 >> v15) & 0xF));
          if (v16)
          {
            int v17 = v14 + 2;
            do
            {
              char v15 = (64 - 4 * v17) & 0xFC;
              uint64_t v16 = *(void *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v15) & 0xF));
              ++v17;
            }
            while ((v16 & 1) != 0);
          }
          if (v16)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(void *)v16 + 16))(v16, v13, ~(-1 << v15)))
            {
              data_map_set_offset_for_id(*(void *)(a1 + 192), v13, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * v5) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
      ++v5;
    }
  }
  else
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v3);
      if (i >= result) {
        break;
      }
      int v20 = *(void **)(*(void *)(a1 + 96) + 32);
      unint64_t v21 = v20[3] + v20[2] * i;
      bit_vector_set_10635(v20 + 525, (v21 >> 20));
      unint64_t v22 = (v21 + 528) >> 20;
      if (v22 > (v21 >> 20))
      {
        unsigned int v23 = (v21 >> 20) + 1;
        do
        {
          unint64_t v24 = v23;
          bit_vector_set_10635(v20 + 525, v23++);
        }
        while (v22 > v24);
      }
      unint64_t v19 = _windowsResolvePtr((uint64_t)(v20 + 5), v20[3] + v20[2] * i, 528);
      data_map_set_offset_for_id(*(void *)(a1 + 192), *(unsigned int *)(v19 + 520), ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
    }
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16getDataForOffsetEjPj(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    unint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *unint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 512;
  }
  *a3 = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14setVectorStoreEP10data_map_s(uint64_t result, uint64_t a2)
{
  *(void *)(result + 192) = a2;
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE11storageSizeEv(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 96) + 32) + 48);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE24aNNForDebugProcessResultEPvU13block_pointerFvjjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  unint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v25, *((unsigned int *)v25 + 2), *((float *)v25 + 3));
        ++v25;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *(unsigned int *)v16, *((unsigned int *)v16 + 2), *((float *)v16 + 3));
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          unint64_t v21 = v15;
          int v22 = *__error();
          unsigned int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            unint64_t v24 = __p;
            if (v49 < 0) {
              unint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        ++v16;
      }
      while (v16 != v12);
    }
  }
  float16x8_t v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      float16x8_t v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    float16x8_t v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE23aNNForTestProcessResultEPvU13block_pointerFvjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16aNNProcessResultEPvU13block_pointerFvS5_fE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6345838;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfbPv(uint64_t a1, int a2, int a3, float16x8_t *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9, a4, a7, a8, 0, a9);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(uint64_t a1, float16x8_t *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", a2->u8[0], a2->u8[1], a2->u8[2], a2->u8[3], a2[31].u8[12], a2[31].u8[13], a2[31].u8[14], a2[31].u8[15]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  int v99 = v11;
  unsigned int v12 = 10 * v11;
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v13 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10000;
  }
  if (v12 <= v14) {
    unsigned int v12 = v14;
  }
  unsigned int v15 = v12
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v119 = 0;
  float v120 = &v119;
  if (v17 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v17;
  }
  int v122 = 0;
  uint64_t v121 = 0x2000000000;
  uint64_t v115 = 0;
  float v116 = &v115;
  int v118 = 0;
  uint64_t v117 = 0x2000000000;
  uint64_t v114 = 0;
  long long v112 = 0u;
  long long v113 = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v112);
  double Current = CFAbsoluteTimeGetCurrent();
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1) <= v12)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    LODWORD(v98) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    uint64_t v62 = 0;
    int v63 = 0;
    uint64_t v64 = *(void *)(a1 + 48);
    while (1)
    {
      if (v63 == *(_DWORD *)(v64 + 40)) {
        goto LABEL_112;
      }
      ++*((_DWORD *)v120 + 6);
      if (*(_DWORD *)(v64 + 40) <= v62) {
        break;
      }
      long long v65 = (float16x8_t *)_windowsResolvePtr(*(void *)(v64 + 32) + 40, *(void *)(*(void *)(v64 + 32) + 24) + *(void *)(*(void *)(v64 + 32) + 16) * v62, 528);
      unint64_t v66 = v65[32].u32[2];
      float v67 = _ZNK10CIVector_sIDF16_Li256EE8distanceERKS0_(a2, v65);
      if (*((void *)&v112 + 1))
      {
        uint8x8_t v68 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v112 + 8));
        v68.i16[0] = vaddlv_u8(v68);
        if (v68.u32[0] > 1uLL)
        {
          unint64_t v69 = v66;
          if (*((void *)&v112 + 1) <= v66) {
            unint64_t v69 = v66 % *((void *)&v112 + 1);
          }
        }
        else
        {
          unint64_t v69 = (DWORD2(v112) - 1) & v66;
        }
        uint64_t v70 = *(uint64_t **)(v112 + 8 * v69);
        if (v70)
        {
          uint64_t v70 = (uint64_t *)*v70;
          if (v70)
          {
            if (v68.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v72 = v70[1];
                if (v72 == v66)
                {
                  if (*((_DWORD *)v70 + 4) == v66) {
                    goto LABEL_82;
                  }
                }
                else if ((v72 & (*((void *)&v112 + 1) - 1)) != v69)
                {
                  goto LABEL_81;
                }
                uint64_t v70 = (uint64_t *)*v70;
                if (!v70) {
                  goto LABEL_82;
                }
              }
            }
            do
            {
              unint64_t v71 = v70[1];
              if (v71 == v66)
              {
                if (*((_DWORD *)v70 + 4) == v66) {
                  break;
                }
              }
              else
              {
                if (v71 >= *((void *)&v112 + 1)) {
                  v71 %= *((void *)&v112 + 1);
                }
                if (v71 != v69) {
                  goto LABEL_81;
                }
              }
              uint64_t v70 = (uint64_t *)*v70;
            }
            while (v70);
          }
        }
      }
      else
      {
LABEL_81:
        uint64_t v70 = 0;
      }
LABEL_82:
      if (a6 == 0.0 || v67 <= a6)
      {
        if (v70)
        {
          int v74 = *__error();
          float v75 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v67;
            _os_log_impl(&dword_1BD672000, v75, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v74;
        }
        *(void *)keyExistsAndHasValidFormat = v65[32].i64[0];
        *(_DWORD *)&Boolean keyExistsAndHasValidFormat[8] = v66;
        *(float *)&keyExistsAndHasValidFormat[12] = v67;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(a4, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v70)
        {
          int v76 = *__error();
          float v77 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v67;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v77, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v76;
        }
        ++*((_DWORD *)v116 + 6);
      }
      uint64_t v62 = (v62 + 1);
      int v63 = v62;
      if (v64 != *(void *)(a1 + 48))
      {
        float v95 = __si_assert_copy_extra_329();
        float v93 = v95;
        BOOL v96 = "";
        if (v95) {
          BOOL v96 = v95;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v96);
        goto LABEL_125;
      }
    }
    float v92 = __si_assert_copy_extra_329();
    float v93 = v92;
    float v94 = "";
    if (v92) {
      float v94 = v92;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v94);
LABEL_125:
    free(v93);
    if (__valid_fs(-1)) {
      uint64_t v97 = 2989;
    }
    else {
      uint64_t v97 = 3072;
    }
    *(_DWORD *)uint64_t v97 = -559038737;
    abort();
  }
  if (!AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v22 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = 40;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v24 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      int v25 = v24;
    }
    else {
      int v25 = 45;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v26 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v27 = keyExistsAndHasValidFormat[0];
    int v28 = 8 * v26;
    int v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v30 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12) {
      char v32 = 18;
    }
    else {
      char v32 = v30;
    }
    char v33 = v32 - 3;
    unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    if (v31) {
      char v35 = v33;
    }
    else {
      char v35 = 17;
    }
    unsigned int v36 = v34 >> v35;
    if (v36 <= 8) {
      int v37 = 8;
    }
    else {
      int v37 = v36;
    }
    int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    if (v27) {
      int v39 = v28;
    }
    else {
      int v39 = 800;
    }
    unsigned int v40 = v39 * v38 / (v29 * v37);
    if (v23 < v40) {
      unsigned int v40 = v23;
    }
    if (v40 <= v20) {
      CFIndex AppIntegerValue = v20;
    }
    else {
      CFIndex AppIntegerValue = v40;
    }
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v46 = *(void *)(a1 + 80);
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 88);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = *(void *)(a1 + 96);
  long long v47 = *(std::__shared_weak_count **)(a1 + 104);
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, float16x8_t *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
  uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
  BOOL v109 = 0;
  float v110 = 0;
  uint64_t v111 = 0;
  BOOL v123 = &v109;
  unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
  if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
  {
    float v107 = 0;
    int v108 = 0;
    std::string __p = 0;
  }
  else
  {
    do
    {
      int v52 = *v50;
      v50 += 2;
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v123, v52);
    }
    while (v50 != v49);
    float16x8_t v53 = v109;
    float v107 = 0;
    int v108 = 0;
    std::string __p = 0;
    int64_t v54 = v110 - (unsigned char *)v109;
    if (v110 != v109)
    {
      if (v54 < 0) {
        abort();
      }
      long long v55 = (char *)operator new(v110 - (unsigned char *)v109);
      uint64_t v56 = &v55[4 * (v54 >> 2)];
      std::string __p = v55;
      int v108 = v56;
      memcpy(v55, v53, v54);
      float v107 = v56;
    }
  }
  v101[0] = MEMORY[0x1E4F143A8];
  v101[1] = 1174405120;
  v101[2] = ___ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v101[3] = &unk_1F18161F0;
  v101[6] = a1;
  v101[7] = a2;
  v101[4] = &v119;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v102, (uint64_t)&v112);
  float v105 = a6;
  v101[5] = &v115;
  float v104 = a4;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &__p, v101);
  if (__p)
  {
    float v107 = __p;
    operator delete(__p);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
  uint64_t v78 = v103;
  if (v103)
  {
    do
    {
      int v79 = (void *)*v78;
      operator delete(v78);
      uint64_t v78 = v79;
    }
    while (v79);
  }
  int v80 = v102;
  float v102 = 0;
  if (v80) {
    operator delete(v80);
  }
  if (v109)
  {
    float v110 = v109;
    operator delete(v109);
  }
  if (*(void *)keyExistsAndHasValidFormat)
  {
    *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  unint64_t v98 = v51 >> 3;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_112:
  int v81 = *__error();
  float v82 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    int v83 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    int v84 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    int v85 = *((_DWORD *)v116 + 6);
    int v86 = *((_DWORD *)v120 + 6);
    uint64_t v87 = (uint64_t)(a4[2] - a4[1]) >> 4;
    CFAbsoluteTime v88 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v99;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v83;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v98;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v84;
    __int16 v125 = 1024;
    int v126 = v85;
    __int16 v127 = 1024;
    int v128 = v86;
    __int16 v129 = 2048;
    uint64_t v130 = v87;
    __int16 v131 = 2048;
    CFAbsoluteTime v132 = v88 - Current;
    _os_log_impl(&dword_1BD672000, v82, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v81;
  uint64_t v89 = (void *)v113;
  if ((void)v113)
  {
    do
    {
      unint64_t v90 = (void *)*v89;
      operator delete(v89);
      uint64_t v89 = v90;
    }
    while (v90);
  }
  int v91 = (void *)v112;
  *(void *)&long long v112 = 0;
  if (v91) {
    operator delete(v91);
  }
  _Block_object_dispose(&v115, 8);
  _Block_object_dispose(&v119, 8);
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v5 = *a3;
  uint64_t v6 = *(void **)(*(void *)(v4 + 48) + 32);
  unint64_t v7 = v6[3] + v6[2] * v5;
  bit_vector_set_10635(v6 + 525, (v7 >> 20));
  unint64_t v8 = (v7 + 528) >> 20;
  if (v8 > (v7 >> 20))
  {
    unsigned int v9 = (v7 >> 20) + 1;
    do
    {
      unint64_t v10 = v9;
      bit_vector_set_10635(v6 + 525, v9++);
    }
    while (v8 > v10);
  }
  int v11 = (float16x8_t *)_windowsResolvePtr((uint64_t)(v6 + 5), v6[3] + v6[2] * v5, 528);
  float v12 = _ZNK10CIVector_sIDF16_Li256EE8distanceERKS0_(*(float16x8_t **)(a1 + 56), v11);
  unint64_t v13 = v11[32].u32[2];
  int8x8_t v14 = *(int8x8_t *)(a1 + 72);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v16 = v11[32].u32[2];
      if (*(void *)&v14 <= v13) {
        unint64_t v16 = v13 % *(void *)&v14;
      }
    }
    else
    {
      unint64_t v16 = (v14.i32[0] - 1) & v13;
    }
    unsigned int v17 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v16);
    if (v17)
    {
      unsigned int v17 = (uint64_t *)*v17;
      if (v17)
      {
        if (v15.u32[0] < 2uLL)
        {
          uint64_t v18 = *(void *)&v14 - 1;
          while (1)
          {
            uint64_t v20 = v17[1];
            if (v20 == v13)
            {
              if (*((_DWORD *)v17 + 4) == v13) {
                goto LABEL_25;
              }
            }
            else if ((v20 & v18) != v16)
            {
              goto LABEL_24;
            }
            unsigned int v17 = (uint64_t *)*v17;
            if (!v17) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v19 = v17[1];
          if (v19 == v13)
          {
            if (*((_DWORD *)v17 + 4) == v13) {
              break;
            }
          }
          else
          {
            if (v19 >= *(void *)&v14) {
              v19 %= *(void *)&v14;
            }
            if (v19 != v16) {
              goto LABEL_24;
            }
          }
          unsigned int v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
    }
  }
  else
  {
LABEL_24:
    unsigned int v17 = 0;
  }
LABEL_25:
  float v21 = *(float *)(a1 + 112);
  if (v21 == 0.0 || v12 <= v21)
  {
    if (v17)
    {
      int v23 = *__error();
      int v24 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v28) = 67109376;
        HIDWORD(v28) = v13;
        *(_WORD *)int v29 = 2048;
        *(double *)&v29[2] = v12;
        _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", (uint8_t *)&v28, 0x12u);
      }
      *__error() = v23;
    }
    uint64_t v28 = v11[32].i64[0];
    *(_DWORD *)int v29 = v13;
    *(float *)&v29[4] = v12;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(void **)(a1 + 104), (uint64_t)&v28);
  }
  else
  {
    if (v17)
    {
      int v25 = *__error();
      int v26 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        double v27 = *(float *)(a1 + 112);
        LODWORD(v28) = 67109632;
        HIDWORD(v28) = v13;
        *(_WORD *)int v29 = 2048;
        *(double *)&v29[2] = v12;
        __int16 v30 = 2048;
        double v31 = v27;
        _os_log_impl(&dword_1BD672000, v26, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", (uint8_t *)&v28, 0x1Cu);
      }
      *__error() = v25;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE20createCandidateQueueEj()
{
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE10aNNForTestEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvjfEj(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  uint64_t v6 = __si_assert_copy_extra_329();
  unint64_t v7 = v6;
  unint64_t v8 = "";
  if (v6) {
    unint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    int8x8_t v14 = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    uint8x8_t v15 = &unk_1E6345810;
    uint64_t v16 = a9;
    operator new();
  }
  unsigned int v9 = __si_assert_copy_extra_329();
  unint64_t v10 = v9;
  int v11 = "";
  if (v9) {
    int v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16restoreUpdateSetEP15PostingBaseInfoP14store_stream_t()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3127, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14storeUpdateSetEP15RelativePostingP14store_stream_t()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  uint64_t v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3122, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE6renameEPKc(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 144);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 96);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 87) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 64), *(void *)(v16 + 72));
  }
  else {
    std::string buf = *(std::string *)(v16 + 64);
  }
  MEMORY[0x1C1880BF0](v16 + 64, a2);
  int v17 = *__error();
  uint64_t v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__s, v16);
    uint64_t v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)int v24 = 136315394;
    int v25 = v19;
    __int16 v26 = 2080;
    double v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  fd_rename(*(void *)(*(void *)(v16 + 32) + 40), a2);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE13makePurgeableEv(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 96);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(void *)(v2 + 32) + 40));
  size_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE12makeReadOnlyEv(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 96);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v5);
      unint64_t v8 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      unsigned int v22 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    uint64_t v9 = *(void *)(v5 + 32);
    fd_make_readonly(*(void *)(v9 + 40));
    uint64_t v10 = *(void *)(v9 + 40);
    if (v10)
    {
      do
      {
        int v11 = fchmodat(*(_DWORD *)(v10 + 44), *(const char **)(v10 + 72), 0x100u, 2048);
        uint64_t v12 = g_prot_error_callback;
        if (v11 != -1 || g_prot_error_callback == 0) {
          break;
        }
        uint64_t v14 = *(unsigned int *)(v10 + 40);
        uint8x8_t v15 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v12 + 16))(v12, v14, *v15, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 136);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a1 + 144);
    int v17 = *(std::__shared_weak_count **)(a1 + 152);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
    (*(void (**)(uint64_t))(*(void *)v18 + 120))(v18);
    *(unsigned char *)(a1 + 208) = 1;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE8truncateEv(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(*(void *)(a1 + 96));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    int v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 144);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 152);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

BOOL _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE6unlinkEv(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  int v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 96);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint8x8_t v15 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  BOOL v10 = vi_onefixedsize_disk_allocator::unlinkStorage(*(void *)(v6 + 32));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v10;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE7subvertEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    BOOL v10 = __si_assert_copy_extra_329();
    int v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 152);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  int v7 = *(std::__shared_weak_count **)(a2 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 176))(v6, v9);
  vi_onefixedsize_disk_allocator::subvert(*(void *)(*(void *)(a2 + 96) + 32), *(void *)(*(void *)(a1 + 96) + 32));
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14compactForTestEP22AnyVectorIndexInstancePVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint8x8_t v15 = "";
    if (v13) {
      uint8x8_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  int v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(a1 + 48, a2 + 48, a3);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    uint64_t v16 = __si_assert_copy_extra_329();
    int v17 = v16;
    __int16 v18 = "";
    if (v16) {
      __int16 v18 = v16;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2712, "target->nVectors() == 0", v18);
    free(v17);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = operator new(8uLL);
  v31[0] = v6;
  *int v6 = a1;
  v31[1] = v6 + 1;
  v31[2] = v6 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v31);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v8 = *(void *)(a1 + 80);
  int v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  int v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v30[0] = v8;
  v30[1] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEE(a2, v30);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEE(a2, v30);
  }
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  long long v27 = 0u;
  uint64_t v25 = v10;
  __int16 v26 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(std::__shared_weak_count **)(a1 + 56);
  v24[0] = v11;
  v24[1] = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v27, &v25, v24);
  }
  char v13 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  __int16 v20 = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  int v21 = &__block_descriptor_tmp_326;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v34 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v32, (uint64_t)&v27);
    long long v35 = v32;
    long long v36 = v33;
    if (!(void)v33) {
      break;
    }
    v20((uint64_t)v19, (unsigned int *)&v35, (BOOL *)&v34);
  }
  while (!v34);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v29);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint8x8_t v15 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v31[0]) {
    operator delete(v31[0]);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(const void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v7 = v5 - *(void *)a3;
  if (v5 == *(void *)a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      goto LABEL_197;
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a3);
    size_t v9 = v7;
    uint64_t v7 = (uint64_t)&v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v9);
  }
  uint64_t v144 = 0;
  __int16 v145 = 0;
  _ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi(&v144, a1, 0);
  uint64_t v10 = v7 - (void)v8;
  if ((char *)v7 == v8)
  {
    int v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF9) {
      goto LABEL_197;
    }
    uint64_t v11 = (std::__shared_weak_count **)operator new(2 * v10);
    bzero(v11, 2 * v10);
    int v12 = (std::__shared_weak_count **)((char *)v11 + 2 * v10);
  }
  uint64_t v110 = a1;
  size_t __sz = v7 - (void)v8;
  unsigned int v114 = ((uint64_t (*)(std::__shared_weak_count *))v144->__get_deleter)(v144);
  int v108 = (char *)v7;
  unint64_t v109 = v10 >> 3;
  uint64_t v111 = a2;
  long long v112 = v11;
  std::string __p = v8;
  if ((char *)v7 != v8)
  {
    if ((unint64_t)(v10 >> 3) <= 1) {
      unint64_t v13 = 1;
    }
    else {
      unint64_t v13 = v10 >> 3;
    }
    uint64_t v14 = v11 + 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v8 + 16))(keyExistsAndHasValidFormat);
      uint8x8_t v15 = v144;
      int v17 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      uint64_t v16 = v122;
      if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v17 == v15) {
          goto LABEL_16;
        }
      }
      else if (v17 == v15)
      {
        goto LABEL_16;
      }
      *(void *)keyExistsAndHasValidFormat = 0;
      int v122 = 0;
      uint64_t v18 = *(void *)v8;
      float v142 = v144;
      __int16 v143 = v145;
      if (v145) {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(Boolean *__return_ptr))(*(void *)v18 + 40))(keyExistsAndHasValidFormat);
      int v19 = v143;
      if (v143)
      {
        if (!atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
      __int16 v20 = v122;
      if (v122) {
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v22 = *v14;
      *(v14 - 1) = v21;
      *uint64_t v14 = v20;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        uint64_t v23 = v122;
        if (v122)
        {
LABEL_29:
          if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      else
      {
        uint64_t v23 = v122;
        if (v122) {
          goto LABEL_29;
        }
      }
LABEL_16:
      v14 += 2;
      v8 += 8;
      if (!--v13)
      {
        if (v109 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v10 >> 3;
        }
        uint64_t v25 = __p;
        __int16 v26 = v112 + 1;
        while (1)
        {
          uint64_t v27 = (uint64_t)*(v26 - 1);
          if (v27)
          {
            uint64_t v28 = *(void *)v25;
            int v140 = v144;
            __int16 v141 = v145;
            if (v145) {
              atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v138 = v27;
            __int16 v139 = *v26;
            if (v139) {
              atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t *))(*(void *)v28 + 48))(v28, &v140, &v138);
            uint64_t v29 = v139;
            if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
              __int16 v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            else
            {
              __int16 v30 = v141;
              if (!v141) {
                goto LABEL_52;
              }
            }
            if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
LABEL_52:
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          double v31 = v122;
          uint64_t v32 = *(unsigned int *)(*(void *)keyExistsAndHasValidFormat + 72);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          (*(void (**)(Boolean *__return_ptr))(**(void **)v25 + 24))(keyExistsAndHasValidFormat);
          long long v33 = v122;
          int v34 = *(_DWORD *)(*(void *)keyExistsAndHasValidFormat + 68);
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          if (v34 != v114)
          {
            int v91 = __si_assert_copy_extra_329();
            float v92 = v91;
            float v93 = "";
            if (v91) {
              float v93 = v91;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2199, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v93);
LABEL_185:
            free(v92);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v13 += v32;
          v25 += 8;
          v26 += 2;
          if (!--v24) {
            goto LABEL_62;
          }
        }
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    int v21 = *(std::__shared_weak_count **)keyExistsAndHasValidFormat;
    __int16 v20 = v122;
    if (!v122) {
      goto LABEL_26;
    }
LABEL_25:
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_26;
  }
  unint64_t v13 = 0;
LABEL_62:
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v36 = AppIntegerValue;
  }
  else {
    unsigned int v36 = 45;
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v37 = CFPreferencesGetAppIntegerValue(@"IVFTrainingTimeBudget", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    double v38 = (double)v37;
  }
  else {
    double v38 = 30.0;
  }
  unsigned int v40 = v111;
  int v39 = v112;
  int v41 = __p;
  if (v13 >> 4 < 0x271 || v13 < v36 * (unint64_t)v114 * v36 * (unint64_t)v114 / 0x64)
  {
LABEL_87:
    if (!v112) {
      goto LABEL_95;
    }
    goto LABEL_88;
  }
  unsigned __int8 v42 = atomic_exchange((atomic_uchar *volatile)(v110 + 72), 1u);
  if ((v42 & 1) == 0 && *(void *)(v110 + 96))
  {
    float v94 = __si_assert_copy_extra_329();
    float v95 = v94;
    BOOL v96 = "";
    if (v94) {
      BOOL v96 = v94;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 737, "_trainingQuantizer == nullptr", v96);
    free(v95);
    if (__valid_fs(-1)) {
      uint64_t v97 = 2989;
    }
    else {
      uint64_t v97 = 3072;
    }
    *(_DWORD *)uint64_t v97 = -559038737;
    goto LABEL_197;
  }
  FdPtrForFile = (atomic_uint *)QuantizerManager<float,768>::createFdPtrForFile(v110, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, (unsigned __int8 *)(v110 + 72));
    goto LABEL_84;
  }
  int v44 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v44);
  if (v42)
  {
LABEL_84:
    int v56 = *__error();
    int v57 = _SILogForLogForCategory(16);
    os_log_type_t v58 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v57, v58))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1BD672000, v57, v58, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v56;
    goto LABEL_87;
  }
  unsigned int v106 = v36;
  uint64_t v45 = _SILogForLogForCategory(0);
  os_signpost_id_t v46 = os_signpost_id_make_with_pointer(v45, 0);
  long long v47 = _SILogForLogForCategory(0);
  unint64_t v101 = v46 - 1;
  if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v48 = v47;
    if (os_signpost_enabled(v47))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v48, OS_SIGNPOST_INTERVAL_BEGIN, v46, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  os_signpost_id_t spid = v46;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  uint64_t v127 = 0;
  long long v126 = 0u;
  long long v125 = 0u;
  memset(v124, 0, sizeof(v124));
  int v122 = 0;
  uint64_t v105 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v103 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v128 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v102 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v123 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v49 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v50 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)keyExistsAndHasValidFormat = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v50;
  int v122 = 0;
  unint64_t v51 = (std::ios_base *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v51, v124);
  v51[1].__vftable = 0;
  v51[1].__fmtflags_ = -1;
  uint64_t v52 = v49[5];
  uint64_t v123 = v49[4];
  *(void *)((char *)&v124[-1] + *(void *)(v123 - 24)) = v52;
  *(void *)keyExistsAndHasValidFormat = v49[1];
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = v49[6];
  uint64_t v128 = v103;
  *(void *)keyExistsAndHasValidFormat = v105;
  uint64_t v123 = v102;
  std::streambuf::basic_streambuf();
  uint64_t v104 = MEMORY[0x1E4FBA470] + 16;
  v124[0] = MEMORY[0x1E4FBA470] + 16;
  long long v125 = 0u;
  long long v126 = 0u;
  LODWORD(v127) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"[", 1);
  unsigned int v40 = v111;
  if (v108 != __p)
  {
    float16x8_t v53 = __p;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(void **)v53 + 24))(block);
      int64_t v54 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
      long long v55 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      v53 += 8;
    }
    while (v53 != v108);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v123, (uint64_t)"]", 1);
  int v61 = *__error();
  uint64_t v62 = _SILogForLogForCategory(16);
  os_log_type_t v63 = 2 * (dword_1E9FC90E4 < 4);
  int v41 = __p;
  if (os_log_type_enabled(v62, v63))
  {
    std::stringbuf::str();
    uint64_t v64 = v149[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v64;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v114;
    _os_log_impl(&dword_1BD672000, v62, v63, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v149[7] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  *__error() = v61;
  double Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v38)
  {
    int v68 = 0;
LABEL_147:
    int v39 = v112;
    uint64_t v66 = v110;
    goto LABEL_149;
  }
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
  uint64_t v66 = v110;
  uint64_t v119 = v110;
  float v120 = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(buf, 0, 24);
  if (v108 != __p)
  {
    if ((__sz & 0x8000000000000000) == 0)
    {
      float v67 = (char *)operator new(__sz);
      *(void *)std::string buf = v67;
      *(void *)&buf[16] = &v67[8 * v109];
      int v41 = __p;
      memcpy(v67, __p, __sz);
      *(void *)&uint8_t buf[8] = &v67[8 * v109];
      uint64_t v66 = v110;
      goto LABEL_118;
    }
LABEL_197:
    abort();
  }
  float v67 = 0;
LABEL_118:
  block[0] = 0;
  CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
  int v69 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v119, buf);
  if (v67)
  {
    *(void *)&uint8_t buf[8] = v67;
    operator delete(v67);
  }
  if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  int v39 = v112;
  if (v69)
  {
    _ZN16QuantizerManagerIDF16_Li256EE20lastTrainedQuantizerEv(block, v66);
    unsigned int v70 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
    unint64_t v71 = (std::__shared_weak_count *)v148;
    if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    if (v13 < v36 * (unint64_t)v70 * v36 * (unint64_t)v70 / 0x64)
    {
      int v68 = 1;
LABEL_129:
      unsigned int v72 = v68;
      unsigned int v40 = v111;
      while (1)
      {
        int v68 = v72;
        if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
          goto LABEL_146;
        }
        v118[0] = v110;
        v118[1] = (uint64_t)v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v115 = 0;
        float v116 = 0;
        uint64_t v117 = 0;
        if (v108 != __p) {
          break;
        }
        int v74 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v118, &v115);
        if (v40) {
          goto LABEL_138;
        }
LABEL_140:
        if (v74)
        {
          ++v72;
          block[0] = 0;
          int v75 = CFPreferencesGetAppIntegerValue(@"IVFMaxTrainingIteration", @"com.apple.Spotlight", block);
          unsigned int v76 = block[0] ? v75 : 3;
          if (v72 <= v76) {
            continue;
          }
        }
        ++v68;
        goto LABEL_146;
      }
      if ((__sz & 0x8000000000000000) != 0) {
        goto LABEL_197;
      }
      uint64_t v73 = (char *)operator new(__sz);
      uint64_t v115 = v73;
      uint64_t v117 = &v73[8 * v109];
      memcpy(v73, __p, __sz);
      float v116 = &v73[8 * v109];
      int v74 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v118, &v115);
      float v116 = v73;
      operator delete(v73);
      unsigned int v40 = v111;
      if (!v111) {
        goto LABEL_140;
      }
LABEL_138:
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      goto LABEL_140;
    }
    int v68 = 1;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v38) {
        goto LABEL_129;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFSeedCentroidPerTraining", @"com.apple.Spotlight", block);
      uint64_t v119 = v110;
      float v120 = v111;
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(buf, 0, 24);
      if (v108 == __p)
      {
        uint64_t v87 = 0;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_197;
        }
        uint64_t v87 = (char *)operator new(__sz);
        *(void *)std::string buf = v87;
        *(void *)&buf[16] = &v87[8 * v109];
        memcpy(v87, __p, __sz);
        *(void *)&uint8_t buf[8] = &v87[8 * v109];
        unsigned int v36 = v106;
      }
      block[0] = 0;
      CFPreferencesGetAppIntegerValue(@"IVFPartitionRecycleTheshold", @"com.apple.Spotlight", block);
      int v88 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v119, buf);
      if (v87)
      {
        *(void *)&uint8_t buf[8] = v87;
        operator delete(v87);
      }
      unsigned int v40 = v111;
      if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      ++v68;
      if (!v88) {
        break;
      }
      _ZN16QuantizerManagerIDF16_Li256EE20lastTrainedQuantizerEv(block, v110);
      unsigned int v89 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
      unint64_t v90 = (std::__shared_weak_count *)v148;
      if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      if (v13 < v36 * (unint64_t)v89 * v36 * (unint64_t)v89 / 0x64) {
        goto LABEL_129;
      }
    }
LABEL_146:
    int v41 = __p;
    goto LABEL_147;
  }
  int v68 = 1;
LABEL_149:
  unsigned __int8 v77 = atomic_load((unsigned __int8 *)(v66 + 72));
  if ((v77 & 1) == 0)
  {
    unint64_t v98 = __si_assert_copy_extra_329();
    float v92 = v98;
    int v99 = "";
    if (v98) {
      int v99 = v98;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 814, "_training.test()", v99);
    goto LABEL_185;
  }
  if (*(void *)(v66 + 96))
  {
    uint64_t v78 = *(NSObject **)(v66 + 16);
    *(void *)block = MEMORY[0x1E4F143A8];
    uint64_t v148 = 0x40000000;
    *(void *)__int16 v149 = ___ZN16QuantizerManagerIDF16_Li256EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v149[8] = &__block_descriptor_tmp_367;
    *(void *)&v149[16] = v66;
    dispatch_sync(v78, block);
  }
  atomic_store(0, (unsigned __int8 *)(v66 + 72));
  _ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi(block, v66, 0);
  unsigned int v79 = (*(uint64_t (**)(void))(**(void **)block + 24))(*(void *)block);
  int v80 = (std::__shared_weak_count *)v148;
  if (v148 && !atomic_fetch_add((atomic_ullong *volatile)(v148 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  int v81 = _SILogForLogForCategory(0);
  if (v101 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    float v82 = v81;
    if (os_signpost_enabled(v81))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v82, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  int v83 = *__error();
  int v84 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v85 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v13;
    LOWORD(v148) = 1024;
    *(_DWORD *)((char *)&v148 + 2) = v79;
    HIWORD(v148) = 1024;
    *(_DWORD *)__int16 v149 = v13 / v79;
    *(_WORD *)&v149[4] = 1024;
    *(_DWORD *)&v149[6] = v68;
    *(_WORD *)&v149[10] = 2048;
    *(double *)&v149[12] = v85 - Current;
    _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v83;
  *(void *)keyExistsAndHasValidFormat = *MEMORY[0x1E4FBA408];
  uint64_t v86 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&keyExistsAndHasValidFormat[*(void *)(*(void *)keyExistsAndHasValidFormat - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v123 = v86;
  v124[0] = v104;
  if (SBYTE7(v126) < 0) {
    operator delete((void *)v125);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1880F90](&v128);
  if (v39)
  {
LABEL_88:
    while (v12 != v39)
    {
      int v59 = *(v12 - 1);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      v12 -= 2;
    }
    operator delete(v39);
  }
LABEL_95:
  int v60 = v145;
  if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v41) {
    operator delete(v41);
  }
  if (v40)
  {
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

unsigned int *___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  uint64_t v5 = **((void **)a2 + 3);
  uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(*(void *)(a1 + 32), a2[2], *((void **)a2 + 2), *a2, 0, *((float *)a2 + 1));
  *((void *)result + 64) = v5;
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a2 + 64));
    *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (*(void *)(a2 + 72))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(a2 + 64));
        int v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        if (v6) {
          break;
        }
        uint64_t v7 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a2 + 40)
                                                      + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(a2 + 64)
                                          + 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(void *)(a2 + 72) - 1;
        unint64_t v9 = *(void *)(a2 + 64) + 1;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v8;
        if (v9 >= 0x200)
        {
          operator delete(**(void ***)(a2 + 40));
          *(void *)(a2 + 40) += 8;
          uint64_t v8 = *(void *)(a2 + 72);
          unint64_t v9 = *(void *)(a2 + 64) - 256;
          *(void *)(a2 + 64) = v9;
        }
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v9);
          *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          if (*(void *)(a2 + 72)) {
            continue;
          }
        }
        return;
      }
      *(_DWORD *)(a1 + 4) = v6[1];
      uint64_t v11 = *v6;
      int v12 = *(void **)(*(void *)(a2 + 16) + 32);
      unint64_t v13 = v12[3] + v12[2] * v11;
      bit_vector_set_10635(v12 + 525, (v13 >> 20));
      unint64_t v14 = (v13 + 528) >> 20;
      if (v14 > (v13 >> 20))
      {
        unsigned int v15 = (v13 >> 20) + 1;
        do
        {
          unint64_t v16 = v15;
          bit_vector_set_10635(v12 + 525, v15++);
        }
        while (v14 > v16);
      }
      unint64_t v17 = _windowsResolvePtr((uint64_t)(v12 + 5), v12[3] + v12[2] * v11, 528);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(v17 + 520);
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v17 + 512;
    }
  }
}

unsigned int *_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  unsigned int v123 = a4;
  float v122 = a6;
  if (*(unsigned char *)(a1 + 160))
  {
    BOOL v96 = __si_assert_copy_extra_329();
    uint64_t v97 = v96;
    unint64_t v98 = "";
    if (v96) {
      unint64_t v98 = v96;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v98);
    goto LABEL_127;
  }
  if (!a2)
  {
    int v99 = __si_assert_copy_extra_329();
    uint64_t v97 = v99;
    BOOL v100 = "";
    if (v99) {
      BOOL v100 = v99;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v100);
    goto LABEL_127;
  }
  if (a5)
  {
    uint64_t v9 = a4;
    if (a4 == -1) {
      goto LABEL_114;
    }
    goto LABEL_32;
  }
  unsigned int v10 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj(a1, (uint64_t)a3, (int *)&v123, &v122, a2);
  uint64_t v9 = v123;
  if (v123 == -1)
  {
LABEL_114:
    unint64_t v101 = __si_assert_copy_extra_329();
    uint64_t v102 = v101;
    uint64_t v103 = "";
    if (v101) {
      uint64_t v103 = v101;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v103);
    goto LABEL_117;
  }
  if (v10 == -1)
  {
LABEL_32:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 88);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v120 = a2;
    __int16 v30 = *(std::__shared_weak_count **)(a1 + 104);
    int v118 = *(_DWORD **)(a1 + 96);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v116 = v30;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v32 = *(void **)(v31 + 32);
    uint64_t v115 = (uint64_t)(v32 + 1);
    unint64_t v33 = v32[2];
    uint64_t v34 = v32[7];
    uint64_t v35 = v34 + v33;
    uint64_t v117 = v29;
    if (v34 + v33 >= v32[6])
    {
      if (!_storage_array_Expand(v115))
      {
        unint64_t v40 = 0;
        goto LABEL_41;
      }
      uint64_t v34 = v32[7];
      uint64_t v35 = v34 + v33;
    }
    v32[7] = v35;
    unint64_t v36 = v32[3];
    bit_vector_set_10635(v32 + 525, 0);
    if (v36 >= 0x100000)
    {
      unint64_t v37 = v36 >> 20;
      unsigned int v38 = 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v32 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = (v34 - v32[3]) / v33;
LABEL_41:
    unint64_t v41 = v32[2];
    if (v33 <= 0x20F && v41 <= 0x20F)
    {
      LODWORD(v42) = 528;
      while (1)
      {
        unint64_t v43 = v32[7] + v41;
        if (v43 < v32[6]) {
          goto LABEL_46;
        }
        if (_storage_array_Expand(v115)) {
          break;
        }
LABEL_44:
        unint64_t v41 = v32[2];
        unint64_t v42 = (v42 - v41);
        if (v41 >= v42) {
          goto LABEL_52;
        }
      }
      unint64_t v43 = v32[7] + v41;
LABEL_46:
      v32[7] = v43;
      unint64_t v44 = v32[3];
      bit_vector_set_10635(v32 + 525, 0);
      if (v44 >= 0x100000)
      {
        unint64_t v45 = v44 >> 20;
        unsigned int v46 = 1;
        do
        {
          unint64_t v47 = v46;
          bit_vector_set_10635(v32 + 525, v46++);
        }
        while (v45 > v47);
      }
      goto LABEL_44;
    }
LABEL_52:
    unint64_t v48 = v32[3] + v41 * v40;
    uint64_t v49 = v32 + 525;
    bit_vector_set_10635(v49, (v48 >> 20));
    unint64_t v50 = (v48 + 528) >> 20;
    if (v50 > (v48 >> 20))
    {
      unsigned int v51 = (v48 >> 20) + 1;
      do
      {
        unint64_t v52 = v51;
        bit_vector_set_10635(v49, v51++);
      }
      while (v50 > v52);
    }
    uint64_t v53 = *(unsigned int *)(v31 + 40);
    unint64_t v54 = v40;
    if (v40 != v53)
    {
      int v55 = *__error();
      int v56 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        int v93 = *(_DWORD *)(v31 + 40);
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "newEntry";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 1882;
        *(_WORD *)&v128[4] = 2048;
        *(void *)&v128[6] = v40;
        *(_WORD *)&v128[14] = 1024;
        *(_DWORD *)&v128[16] = v93;
        _os_log_error_impl(&dword_1BD672000, v56, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v55;
      int v57 = *(void **)(v31 + 32);
      int v58 = *__error();
      int v59 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = v57[6];
        uint64_t v61 = v57[7];
        uint64_t v63 = v57[2];
        uint64_t v62 = v57[3];
        *(_DWORD *)std::string __p = 134219008;
        *(void *)&__p[4] = v57;
        __int16 v127 = 2048;
        *(void *)uint64_t v128 = v60;
        *(_WORD *)&void v128[8] = 2048;
        *(void *)&v128[10] = v61;
        *(_WORD *)&v128[18] = 2048;
        *(void *)long long v129 = v62;
        *(_WORD *)&v129[8] = 2048;
        uint64_t v130 = v63;
        _os_log_impl(&dword_1BD672000, v59, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v58;
      unint64_t v54 = *(unsigned int *)(v31 + 40);
      LODWORD(v53) = *(_DWORD *)(v31 + 40);
    }
    if (v40 == v54)
    {
      *(_DWORD *)(v31 + 40) = v53 + 1;
      uint64_t v64 = *(void **)(v31 + 32);
      unint64_t v65 = v64[3] + v64[2] * v40;
      bit_vector_set_10635(v64 + 525, (v65 >> 20));
      unint64_t v66 = (v65 + 528) >> 20;
      if (v66 > (v65 >> 20))
      {
        unsigned int v67 = (v65 >> 20) + 1;
        do
        {
          unint64_t v68 = v67;
          bit_vector_set_10635(v64 + 525, v67++);
        }
        while (v66 > v68);
      }
      unint64_t v69 = _windowsResolvePtr((uint64_t)(v64 + 5), v64[3] + v64[2] * v40, 528);
      memcpy((void *)v69, __src, 0x200uLL);
      *(void *)(v69 + 512) = 0;
      *(_DWORD *)(v69 + 520) = v120;
      if (*(_DWORD *)(v31 + 40) == 1) {
        *(_DWORD *)(v31 + 52) = v120;
      }
      *(_DWORD *)(v31 + 56) = v120;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(void *)v118 + 56))(v118, v9, v40, v122);
      uint64_t v70 = *(void *)(a1 + 48);
      if (v118[18] == *(_DWORD *)(v70 + 40))
      {
        unint64_t v71 = *(void **)(v70 + 32);
        unint64_t v72 = v71[3] + v71[2] * v40;
        bit_vector_set_10635(v71 + 525, (v72 >> 20));
        unint64_t v73 = (v72 + 528) >> 20;
        if (v73 > (v72 >> 20))
        {
          unsigned int v74 = (v72 >> 20) + 1;
          do
          {
            unint64_t v75 = v74;
            bit_vector_set_10635(v71 + 525, v74++);
          }
          while (v73 > v75);
        }
        unint64_t v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v71 + 5), v71[3] + v71[2] * v40, 528);
        data_map_set_offset_for_id(*(void *)(a1 + 144), v120, (16 * v40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4* (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
        return v17;
      }
      float v107 = __si_assert_copy_extra_329();
      uint64_t v97 = v107;
      int v108 = "";
      if (v107) {
        int v108 = v107;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v108);
    }
    else
    {
      uint64_t v105 = __si_assert_copy_extra_329();
      uint64_t v97 = v105;
      unsigned int v106 = "";
      if (v105) {
        unsigned int v106 = v105;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v106);
    }
LABEL_127:
    free(v97);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 32);
  uint64_t v12 = v10;
  unint64_t v13 = v11[3] + v11[2] * v10;
  bit_vector_set_10635(v11 + 525, (v13 >> 20));
  unint64_t v14 = (v13 + 528) >> 20;
  if (v14 > (v13 >> 20))
  {
    unsigned int v15 = (v13 >> 20) + 1;
    do
    {
      unint64_t v16 = v15;
      bit_vector_set_10635(v11 + 525, v15++);
    }
    while (v14 > v16);
  }
  unint64_t v17 = (unsigned int *)_windowsResolvePtr((uint64_t)(v11 + 5), v11[3] + v11[2] * v12, 528);
  if (v17[130] != a2)
  {
    uint64_t v121 = 0;
    data = (const void *)data_map_get_data(*(void *)(a1 + 144), a2, &v121);
    int v19 = *__error();
    __int16 v20 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v127 = 1024;
      *(_DWORD *)uint64_t v128 = 2586;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = a2;
      *(_WORD *)&v128[10] = 2048;
      *(void *)&v128[12] = data;
      *(_WORD *)long long v129 = 2048;
      *(void *)&v129[2] = v121;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v19;
    if (v121 < 1)
    {
      int v26 = *__error();
      unsigned int v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2595;
        _os_log_error_impl(&dword_1BD672000, v76, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v121 != 512)
      {
        uint64_t v111 = __si_assert_copy_extra_329();
        uint64_t v97 = v111;
        long long v112 = "";
        if (v111) {
          long long v112 = v111;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v112);
        goto LABEL_127;
      }
      if (!data || !memcmp(data, a3, 0x200uLL))
      {
LABEL_80:
        unsigned __int8 v77 = (const void *)data_map_get_data(*(void *)(a1 + 144), v17[130], &v121);
        int v78 = *__error();
        unsigned int v79 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          unsigned int v94 = v17[130];
          *(_DWORD *)std::string __p = 136316162;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2598;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = v94;
          *(_WORD *)&v128[10] = 2048;
          *(void *)&v128[12] = v77;
          *(_WORD *)long long v129 = 2048;
          *(void *)&v129[2] = v121;
          _os_log_error_impl(&dword_1BD672000, v79, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v78;
        if (v121 < 1)
        {
          int v86 = *__error();
          unsigned int v89 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2607;
            _os_log_error_impl(&dword_1BD672000, v89, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v121 != 512)
          {
            long long v113 = __si_assert_copy_extra_329();
            uint64_t v97 = v113;
            unsigned int v114 = "";
            if (v113) {
              unsigned int v114 = v113;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v114);
            goto LABEL_127;
          }
          size_t v80 = 512;
          if (!v77 || !memcmp(v77, v17, 0x200uLL)) {
            goto LABEL_103;
          }
          int v81 = *__error();
          float v82 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "lookupForInsert";
            __int16 v127 = 1024;
            *(_DWORD *)uint64_t v128 = 2602;
            _os_log_error_impl(&dword_1BD672000, v82, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v81;
          int v83 = *__error();
          int v84 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v77, v121);
            CFAbsoluteTime v85 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v85;
            _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          *__error() = v83;
          int v86 = *__error();
          uint64_t v87 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v17, v121);
            int v88 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136315138;
            long long v125 = v88;
            _os_log_impl(&dword_1BD672000, v87, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v128[9] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        *__error() = v86;
        size_t v80 = v121;
LABEL_103:
        if (memcmp(a3, v17, v80))
        {
          unint64_t v109 = __si_assert_copy_extra_329();
          uint64_t v102 = v109;
          uint64_t v110 = "";
          if (v109) {
            uint64_t v110 = v109;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v110);
LABEL_117:
          free(v102);
          if (__valid_fs(-1)) {
            uint64_t v104 = 2989;
          }
          else {
            uint64_t v104 = 3072;
          }
          *(_DWORD *)uint64_t v104 = -559038737;
          abort();
        }
        int v90 = *__error();
        int v91 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
        {
          unsigned int v95 = v17[130];
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v127 = 1024;
          *(_DWORD *)uint64_t v128 = 2610;
          *(_WORD *)&v128[4] = 1024;
          *(_DWORD *)&v128[6] = a2;
          *(_WORD *)&v128[10] = 1024;
          *(_DWORD *)&v128[12] = v95;
          _os_log_fault_impl(&dword_1BD672000, v91, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v90;
        return v17;
      }
      int v21 = *__error();
      uint64_t v22 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v127 = 1024;
        *(_DWORD *)uint64_t v128 = 2590;
        _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v21;
      int v23 = *__error();
      uint64_t v24 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v121);
        uint64_t v25 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v25;
        _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v23;
      int v26 = *__error();
      uint64_t v27 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v121);
        uint64_t v28 = v128[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        long long v125 = v28;
        _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v128[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v26;
    goto LABEL_80;
  }
  return v17;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  unsigned int v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *(_DWORD **)(a1 + 96);
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      unint64_t v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          int v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          uint64_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      int v23 = __si_assert_copy_extra_329();
      int v21 = v23;
      uint64_t v24 = "";
      if (v23) {
        uint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      __int16 v20 = __si_assert_copy_extra_329();
      int v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  uint64_t v34 = 0;
  uint64_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj_block_invoke;
  v32[3] = &unk_1E6344EC0;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156)) {
    goto LABEL_18;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (!v11 && v12 > v13) {
    return result;
  }
  int v15 = *(_DWORD *)(result + 64);
  if (v15)
  {
    unint64_t v16 = *(void **)(*(void *)(v5 + 48) + 32);
    unint64_t v17 = v16[3] + v16[2] * v6;
    bit_vector_set_10635(v16 + 525, (v17 >> 20));
    unint64_t v18 = (v17 + 528) >> 20;
    if (v18 > (v17 >> 20))
    {
      unsigned int v19 = (v17 >> 20) + 1;
      do
      {
        unint64_t v20 = v19;
        bit_vector_set_10635(v16 + 525, v19++);
      }
      while (v18 > v20);
    }
    uint64_t result = _windowsResolvePtr((uint64_t)(v16 + 5), v16[3] + v16[2] * v6, 528);
    uint64_t v4 = a4;
    if (v15 != *(_DWORD *)(result + 520)) {
      return result;
    }
    *(float *)&uint64_t v6 = *a3;
  }
  int v21 = *(const void **)(v8 + 56);
  uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 32);
  unint64_t v23 = v22[3] + v22[2] * v6;
  bit_vector_set_10635(v22 + 525, (v23 >> 20));
  unint64_t v24 = (v23 + 528) >> 20;
  if (v24 > (v23 >> 20))
  {
    unsigned int v25 = (v23 >> 20) + 1;
    do
    {
      unint64_t v26 = v25;
      bit_vector_set_10635(v22 + 525, v25++);
    }
    while (v24 > v26);
  }
  uint64_t v27 = (const void *)_windowsResolvePtr((uint64_t)(v22 + 5), v22[3] + v22[2] * v6, 528);
  uint64_t result = memcmp(v21, v27, 0x200uLL);
  if (!result)
  {
    *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_18:
    unsigned char *v4 = 1;
  }
  return result;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(uint64_t *a1, void *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  CFAbsoluteTimeGetCurrent();
  int v58 = 0;
  uint64_t v57 = 0;
  _ZN16QuantizerManagerIDF16_Li256EE20lastTrainedQuantizerEv(&v57, *a1);
  uint64_t v53 = a2;
  uint64_t v50 = *a2;
  uint64_t v51 = a2[1];
  uint64_t v4 = v51 - *a2;
  if (v51 == *a2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (v4 < 0) {
      goto LABEL_86;
    }
    uint64_t v5 = operator new((unint64_t)v4 >> 1);
    bzero(v5, (unint64_t)v4 >> 1);
  }
  unint64_t v49 = v4 >> 3;
  int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 24))(v57);
  if (v51 != v50)
  {
    uint64_t v6 = 0;
    if (v49 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v49;
    }
    while (1)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*v53 + 8 * v6) + 16))(v60);
      uint64_t v8 = v57;
      uint64_t v9 = *(void *)v60;
      float v10 = *(std::__shared_weak_count **)&v60[8];
      if (*(void *)&v60[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v60[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v9 != v8) {
        break;
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*v53 + 8 * v6) + 24))(v60);
      BOOL v11 = *(std::__shared_weak_count **)&v60[8];
      *((_DWORD *)v5 + v6) = *(_DWORD *)(*(void *)v60 + 72);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(*v53 + 8 * v6) + 24))(v60);
      float v12 = *(std::__shared_weak_count **)&v60[8];
      int v13 = *(_DWORD *)(*(void *)v60 + 68);
      if (*(void *)&v60[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v60[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v13 != v52)
      {
        unint64_t v43 = __si_assert_copy_extra_329();
        unint64_t v44 = v43;
        unint64_t v45 = "";
        if (v43) {
          unint64_t v45 = v43;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2086, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v45);
        free(v44);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 == ++v6) {
        goto LABEL_21;
      }
    }
    unint64_t v39 = __si_assert_copy_extra_329();
    unint64_t v40 = v39;
    unint64_t v41 = "";
    if (v39) {
      unint64_t v41 = v39;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2084, "vectorIndexes[i]->getQuantizer() == quantizer", v41);
LABEL_73:
    free(v40);
    if (__valid_fs(-1)) {
      uint64_t v42 = 2989;
    }
    else {
      uint64_t v42 = 3072;
    }
    *(_DWORD *)uint64_t v42 = -559038737;
    abort();
  }
LABEL_21:
  uint64_t v14 = *a1;
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v14 + 72));
  if ((v15 & 1) == 0)
  {
    unint64_t v47 = __si_assert_copy_extra_329();
    unint64_t v40 = v47;
    unint64_t v48 = "";
    if (v47) {
      unint64_t v48 = v47;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 772, "_training.test()", v48);
    goto LABEL_73;
  }
  if (*(void *)(v14 + 96))
  {
    unint64_t v16 = *(NSObject **)(v14 + 16);
    *(void *)uint64_t v60 = MEMORY[0x1E4F143A8];
    *(void *)&v60[8] = 0x40000000;
    *(void *)&v60[16] = ___ZN16QuantizerManagerIDF16_Li256EE23commitTrainingQuantizerEv_block_invoke;
    *(void *)&v60[24] = &__block_descriptor_tmp_367;
    *(void *)&v60[32] = v14;
    dispatch_sync(v16, v60);
  }
  uint64_t v17 = *(void *)(v14 + 80);
  if (v17) {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17) + 1;
  }
  else {
    int v18 = 1;
  }
  int v19 = *(char *)(v14 + 71);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v14 + 71);
  }
  else {
    size_t v20 = *(void *)(v14 + 56);
  }
  unint64_t v21 = v20 + 1;
  if (v20 + 1 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_86:
  }
    abort();
  if (v21 >= 0x17)
  {
    uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v23 = v21 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = (std::string *)operator new(v23 + 1);
    v54[0].__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    v54[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    v54[0].__r_.__value_.__l.__size_ = v20 + 1;
  }
  else
  {
    memset(v54, 0, 24);
    uint64_t v22 = v54;
    *((unsigned char *)&v54[0].__r_.__value_.__s + 23) = v20 + 1;
    if (!v20) {
      goto LABEL_41;
    }
  }
  if (v19 >= 0) {
    unsigned int v25 = (const void *)(v14 + 48);
  }
  else {
    unsigned int v25 = *(const void **)(v14 + 48);
  }
  memmove(v22, v25, v20);
LABEL_41:
  *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v20) = 46;
  std::to_string(&v59, v18);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v26 = &v59;
  }
  else {
    unint64_t v26 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v59.__r_.__value_.__l.__size_;
  }
  int v28 = std::string::append(v54, (const std::string::value_type *)v26, size);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v60 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v60[16] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int v30 = std::string::append((std::string *)v60, ".quantizer");
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  long long v55 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  uint64_t v56 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((v60[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_56:
    operator delete(v59.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v54[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_57;
  }
  operator delete(*(void **)v60);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_56;
  }
LABEL_49:
  if ((SHIBYTE(v54[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_50;
  }
LABEL_57:
  operator delete(v54[0].__r_.__value_.__l.__data_);
LABEL_50:
  if (v56 >= 0) {
    uint64_t v32 = (const char *)&v55;
  }
  else {
    uint64_t v32 = (const char *)v55;
  }
  if (QuantizerManager<float,768>::createFdPtrForFile(v14, v32)) {
    operator new();
  }
  int v33 = *__error();
  uint64_t v34 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
  {
    int v37 = &v55;
    if (v56 < 0) {
      int v37 = (long long *)v55;
    }
    int v38 = *(_DWORD *)v14;
    *(_DWORD *)uint64_t v60 = 136315906;
    *(void *)&v60[4] = "newQuantizer";
    *(_WORD *)&v60[12] = 1024;
    *(_DWORD *)&v60[14] = 792;
    *(_WORD *)&v60[18] = 2080;
    *(void *)&v60[20] = v37;
    *(_WORD *)&v60[28] = 1024;
    *(_DWORD *)&v60[30] = v38;
    _os_log_fault_impl(&dword_1BD672000, v34, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", v60, 0x22u);
  }
  *__error() = v33;
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
  if (v5) {
    operator delete(v5);
  }
  uint64_t v35 = v58;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return 0;
}

void *_ZN16QuantizerManagerIDF16_Li256EE20lastTrainedQuantizerEv(void *result, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    uint64_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    uint64_t v8 = "";
    if (v6) {
      uint64_t v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 750, "_training.test()", v8);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v3 = *(void *)(a2 + 96);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 104);
    unsigned int *result = v3;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5)
  {
    uint64_t v4 = *(void *)(a2 + 88);
    unsigned int *result = v5;
    result[1] = v4;
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken != -1)
  {
    uint64_t v9 = result;
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken, &__block_literal_global_221);
    uint64_t result = v9;
  }
  uint64_t v4 = *(void *)(_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq + 8);
  unsigned int *result = *(void *)_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq;
  result[1] = v4;
  if (v4) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  return result;
}

void ___ZN16QuantizerManagerIDF16_Li256EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 80);
  if (!v2) {
    goto LABEL_103;
  }
  int v3 = *(char *)(v1 + 71);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v4 = *(void *)(v1 + 56);
  }
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_138:
  }
    abort();
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_16;
    }
  }
  if (v3 >= 0) {
    uint64_t v9 = (const void *)(v1 + 48);
  }
  else {
    uint64_t v9 = *(const void **)(v1 + 48);
  }
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v15 = std::string::append(&v72, ".quantizer");
  int64_t v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v73 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v74 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_34:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_34;
  }
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_35:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  uint64_t v17 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    int v18 = v73;
  }
  else {
    int v18 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1C1880BF0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(void *)(v1 + 80) + 57));
  uint64_t v20 = *(void *)(v1 + 80);
  int v19 = *(std::__shared_weak_count **)(v1 + 88);
  uint64_t v21 = v20;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(void *)(v1 + 80);
  }
  uint64_t v22 = (uint64_t *)(v1 + 112);
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
  int v24 = v23;
  unint64_t v25 = v23;
  unint64_t v26 = *(void *)(v1 + 120);
  if (v26)
  {
    uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v28 = v23;
      if (v26 <= v23) {
        unint64_t v28 = v23 % v26;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v23;
    }
    std::string::size_type v29 = *(void ***)(*v22 + 8 * v28);
    if (v29)
    {
      int v30 = *v29;
      if (*v29)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v32 = *((void *)v30 + 1);
            if (v32 == v23)
            {
              if (*((_DWORD *)v30 + 4) == v23) {
                goto LABEL_92;
              }
            }
            else if ((v32 & (v26 - 1)) != v28)
            {
              goto LABEL_54;
            }
            int v30 = *(void **)v30;
            if (!v30) {
              goto LABEL_54;
            }
          }
        }
        do
        {
          unint64_t v31 = *((void *)v30 + 1);
          if (v31 == v23)
          {
            if (*((_DWORD *)v30 + 4) == v23) {
              goto LABEL_92;
            }
          }
          else
          {
            if (v31 >= v26) {
              v31 %= v26;
            }
            if (v31 != v28) {
              break;
            }
          }
          int v30 = *(void **)v30;
        }
        while (v30);
      }
    }
  }
  else
  {
    unint64_t v28 = 0;
  }
LABEL_54:
  int v30 = operator new(0x28uLL);
  *(void *)int v30 = 0;
  *((void *)v30 + 1) = v25;
  *((_DWORD *)v30 + 4) = v24;
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = 0;
  float v33 = (float)(unint64_t)(*(void *)(v1 + 136) + 1);
  float v34 = *(float *)(v1 + 144);
  if (!v26 || (float)(v34 * (float)v26) < v33)
  {
    BOOL v35 = 1;
    if (v26 >= 3) {
      BOOL v35 = (v26 & (v26 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v26);
    unint64_t v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v26 = *(void *)(v1 + 120);
    }
    if (prime > v26) {
      goto LABEL_76;
    }
    if (prime < v26)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v26 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < v26) {
LABEL_76:
      }
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    unint64_t v26 = *(void *)(v1 + 120);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v26 <= v25) {
        unint64_t v28 = v25 % v26;
      }
      else {
        unint64_t v28 = v25;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v25;
    }
  }
  uint64_t v42 = *v22;
  unint64_t v43 = *(void **)(*v22 + 8 * v28);
  if (v43)
  {
    *(void *)int v30 = *v43;
LABEL_90:
    *unint64_t v43 = v30;
    goto LABEL_91;
  }
  *(void *)int v30 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = v30;
  *(void *)(v42 + 8 * v28) = v1 + 128;
  if (*(void *)v30)
  {
    unint64_t v44 = *(void *)(*(void *)v30 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v44 >= v26) {
        v44 %= v26;
      }
    }
    else
    {
      v44 &= v26 - 1;
    }
    unint64_t v43 = (void *)(*v22 + 8 * v44);
    goto LABEL_90;
  }
LABEL_91:
  ++*(void *)(v1 + 136);
LABEL_92:
  if (v19)
  {
    unint64_t v45 = std::__shared_weak_count::lock(v19);
    unsigned int v46 = (atomic_ullong *)v45;
    if (!v45)
    {
      uint64_t v20 = 0;
      goto LABEL_98;
    }
    atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v19);
    if (!atomic_fetch_add(v46 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v46 + 16))(v46);
      int v19 = (std::__shared_weak_count *)v46;
LABEL_98:
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    uint64_t v20 = 0;
    unsigned int v46 = 0;
  }
  unint64_t v47 = (std::__shared_weak_count *)*((void *)v30 + 4);
  *((void *)v30 + 3) = v20;
  *((void *)v30 + 4) = v46;
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
LABEL_103:
  int v48 = *(char *)(v1 + 71);
  if (v48 >= 0) {
    size_t v49 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    size_t v49 = *(void *)(v1 + 56);
  }
  unint64_t v50 = v49 + 10;
  if (v49 + 10 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_138;
  }
  if (v50 >= 0x17)
  {
    uint64_t v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v52 = v50 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = operator new(v52 + 1);
    v73[1] = (void *)(v49 + 10);
    int64_t v74 = v53 | 0x8000000000000000;
    v73[0] = v51;
  }
  else
  {
    v73[1] = 0;
    int64_t v74 = 0;
    v73[0] = 0;
    uint64_t v51 = v73;
    HIBYTE(v74) = v49 + 10;
    if (!v49) {
      goto LABEL_117;
    }
  }
  if (v48 >= 0) {
    unint64_t v54 = (const void *)(v1 + 48);
  }
  else {
    unint64_t v54 = *(const void **)(v1 + 48);
  }
  memmove(v51, v54, v49);
LABEL_117:
  strcpy((char *)v51 + v49, ".quantizer");
  uint64_t v56 = *(void *)(v1 + 96);
  uint64_t v55 = *(void *)(v1 + 104);
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v57 = *(std::__shared_weak_count **)(v1 + 88);
  *(void *)(v1 + 80) = v56;
  *(void *)(v1 + 88) = v55;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  uint64_t v58 = *(void *)(v1 + 80);
  if (v74 >= 0) {
    std::string v59 = v73;
  }
  else {
    std::string v59 = (void **)v73[0];
  }
  fd_rename(*(void *)(*(void *)(v58 + 40) + 40), (const char *)v59);
  MEMORY[0x1C1880BF0](v58 + 8, v59);
  uint64_t v60 = *(void *)(v1 + 80);
  uint64_t v61 = *(unint64_t **)(v60 + 40);
  *uint64_t v61 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v61);
  storage_array_SyncPages(*(void *)(v60 + 40) + 8, *(void *)(v60 + 40) + 4200);
  storage_array_Truncate((uint64_t *)(*(void *)(v60 + 40) + 8));
  uint64_t v62 = *(void *)(v60 + 40);
  fd_make_readonly(*(void *)(v62 + 40));
  uint64_t v63 = *(void *)(v62 + 40);
  if (v63)
  {
    do
    {
      int v64 = fchmodat(*(_DWORD *)(v63 + 44), *(const char **)(v63 + 72), 0x100u, 2048);
      uint64_t v65 = g_prot_error_callback;
      if (v64 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v67 = *(unsigned int *)(v63 + 40);
      unint64_t v68 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v65 + 16))(v65, v67, *v68, 19) & 1) != 0);
  }
  *(unsigned char *)(v60 + 56) = 1;
  unint64_t v69 = *(std::__shared_weak_count **)(v1 + 104);
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  if (!v69 || atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v74) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_134;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if (SHIBYTE(v74) < 0) {
LABEL_134:
  }
    operator delete(v73[0]);
}

float ___ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    memset(__p, 0, 24);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 80))(__p);
    if (*((float *)__p[0] + 1) < a3[1]) {
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p[0];
    }
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  float16x8_t v8 = *(float16x8_t *)(v6 + 16);
  float32x4_t v9 = vcvt_hight_f32_f16(*(float16x8_t *)v6);
  *(float32x4_t *)std::string __p = vcvtq_f32_f16(*(float16x4_t *)v6);
  *(float32x4_t *)&__p[2] = v9;
  *(float32x4_t *)&__p[4] = vcvtq_f32_f16(*(float16x4_t *)v8.i8);
  *(float32x4_t *)&__p[6] = vcvt_hight_f32_f16(v8);
  float16x8_t v10 = *(float16x8_t *)(v6 + 32);
  float16x8_t v11 = *(float16x8_t *)(v6 + 48);
  *(float32x4_t *)&__p[8] = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
  *(float32x4_t *)&__p[10] = vcvt_hight_f32_f16(v10);
  *(float32x4_t *)&unsigned char __p[12] = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
  *(float32x4_t *)&__p[14] = vcvt_hight_f32_f16(v11);
  float16x8_t v12 = *(float16x8_t *)(v6 + 64);
  float16x8_t v13 = *(float16x8_t *)(v6 + 80);
  *(float32x4_t *)&__p[16] = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  *(float32x4_t *)&__p[18] = vcvt_hight_f32_f16(v12);
  *(float32x4_t *)&__p[20] = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
  *(float32x4_t *)&__p[22] = vcvt_hight_f32_f16(v13);
  float16x8_t v14 = *(float16x8_t *)(v6 + 96);
  float16x8_t v15 = *(float16x8_t *)(v6 + 112);
  *(float32x4_t *)&__p[24] = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
  *(float32x4_t *)&__p[26] = vcvt_hight_f32_f16(v14);
  *(float32x4_t *)&__p[28] = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
  *(float32x4_t *)&__p[30] = vcvt_hight_f32_f16(v15);
  float16x8_t v16 = *(float16x8_t *)(v6 + 128);
  float16x8_t v17 = *(float16x8_t *)(v6 + 144);
  *(float32x4_t *)&__p[32] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
  *(float32x4_t *)&__p[34] = vcvt_hight_f32_f16(v16);
  *(float32x4_t *)&__p[36] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
  *(float32x4_t *)&__p[38] = vcvt_hight_f32_f16(v17);
  float16x8_t v18 = *(float16x8_t *)(v6 + 160);
  float16x8_t v19 = *(float16x8_t *)(v6 + 176);
  *(float32x4_t *)&__p[40] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
  *(float32x4_t *)&__p[42] = vcvt_hight_f32_f16(v18);
  *(float32x4_t *)&__p[44] = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
  *(float32x4_t *)&__p[46] = vcvt_hight_f32_f16(v19);
  float16x8_t v20 = *(float16x8_t *)(v6 + 192);
  float16x8_t v21 = *(float16x8_t *)(v6 + 208);
  *(float32x4_t *)&__p[48] = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
  *(float32x4_t *)&__p[50] = vcvt_hight_f32_f16(v20);
  *(float32x4_t *)&__p[52] = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
  *(float32x4_t *)&__p[54] = vcvt_hight_f32_f16(v21);
  float16x8_t v22 = *(float16x8_t *)(v6 + 224);
  float16x8_t v23 = *(float16x8_t *)(v6 + 240);
  *(float32x4_t *)&__p[56] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
  *(float32x4_t *)&__p[58] = vcvt_hight_f32_f16(v22);
  *(float32x4_t *)&__p[60] = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
  *(float32x4_t *)&__p[62] = vcvt_hight_f32_f16(v23);
  float16x8_t v24 = *(float16x8_t *)(v6 + 256);
  float16x8_t v25 = *(float16x8_t *)(v6 + 272);
  *(float32x4_t *)&__p[64] = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
  *(float32x4_t *)&__p[66] = vcvt_hight_f32_f16(v24);
  *(float32x4_t *)&__p[68] = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
  *(float32x4_t *)&__p[70] = vcvt_hight_f32_f16(v25);
  float16x8_t v26 = *(float16x8_t *)(v6 + 288);
  float16x8_t v27 = *(float16x8_t *)(v6 + 304);
  *(float32x4_t *)&__p[72] = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
  *(float32x4_t *)&__p[74] = vcvt_hight_f32_f16(v26);
  *(float32x4_t *)&__p[76] = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
  *(float32x4_t *)&__p[78] = vcvt_hight_f32_f16(v27);
  float16x8_t v28 = *(float16x8_t *)(v6 + 320);
  float16x8_t v29 = *(float16x8_t *)(v6 + 336);
  *(float32x4_t *)&__p[80] = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
  *(float32x4_t *)&__p[82] = vcvt_hight_f32_f16(v28);
  *(float32x4_t *)&__p[84] = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
  *(float32x4_t *)&__p[86] = vcvt_hight_f32_f16(v29);
  float16x8_t v30 = *(float16x8_t *)(v6 + 352);
  float16x8_t v31 = *(float16x8_t *)(v6 + 368);
  *(float32x4_t *)&__p[88] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
  *(float32x4_t *)&__p[90] = vcvt_hight_f32_f16(v30);
  *(float32x4_t *)&__p[92] = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
  *(float32x4_t *)&__p[94] = vcvt_hight_f32_f16(v31);
  float16x8_t v32 = *(float16x8_t *)(v6 + 384);
  float16x8_t v33 = *(float16x8_t *)(v6 + 400);
  *(float32x4_t *)&__p[96] = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
  *(float32x4_t *)&__p[98] = vcvt_hight_f32_f16(v32);
  *(float32x4_t *)&__p[100] = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
  *(float32x4_t *)&__p[102] = vcvt_hight_f32_f16(v33);
  float16x8_t v34 = *(float16x8_t *)(v6 + 416);
  float16x8_t v35 = *(float16x8_t *)(v6 + 432);
  *(float32x4_t *)&__p[104] = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
  *(float32x4_t *)&__p[106] = vcvt_hight_f32_f16(v34);
  *(float32x4_t *)&__p[108] = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
  *(float32x4_t *)&__p[110] = vcvt_hight_f32_f16(v35);
  float16x8_t v36 = *(float16x8_t *)(v6 + 448);
  float16x8_t v37 = *(float16x8_t *)(v6 + 464);
  *(float32x4_t *)&__p[112] = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
  *(float32x4_t *)&__p[114] = vcvt_hight_f32_f16(v36);
  *(float32x4_t *)&__p[116] = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
  *(float32x4_t *)&__p[118] = vcvt_hight_f32_f16(v37);
  float16x8_t v38 = *(float16x8_t *)(v6 + 480);
  float16x8_t v39 = *(float16x8_t *)(v6 + 496);
  *(float32x4_t *)&__p[120] = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
  *(float32x4_t *)&__p[122] = vcvt_hight_f32_f16(v38);
  *(float32x4_t *)&__p[124] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
  *(float32x4_t *)&__p[126] = vcvt_hight_f32_f16(v39);
  uint8x8_t v40 = (float *)(v7 + 1028 * a2);
  uint64_t v41 = v40 + 256;
  float v42 = v40[256];
  if (v42 == 0.0)
  {
    memcpy(v40, __p, 0x400uLL);
  }
  else
  {
    vDSP_vavlin((const float *)__p, 1, v40 + 256, v40, 1, 0x100uLL);
    float v42 = *v41;
  }
  float result = v42 + 1.0;
  *uint64_t v41 = v42 + 1.0;
  return result;
}

void _ZZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1[1] + 8 * a2);
  unint64_t v5 = (std::__shared_weak_count *)a1[3];
  float16x8_t v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v12);
  uint64_t v6 = (void *)(*a1 + 16 * a2);
  uint64_t v8 = v12;
  uint64_t v7 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float32x4_t v9 = (std::__shared_weak_count *)v6[1];
  *uint64_t v6 = v8;
  v6[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    float16x8_t v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    float16x8_t v10 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li256EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2 >= (unint64_t)((*(void *)(a1 + 48) - v2) >> 9))
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    unint64_t v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 452, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + ((unint64_t)a2 << 9);
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li256EE5countEv(uint64_t a1)
{
  return (*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 9;
}

void _ZN20ArrayVectorQuantizerIDF16_Li256EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814500;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN20ArrayVectorQuantizerIDF16_Li256EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814500;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_1F18140F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE7compactEP22AnyVectorIndexInstanceP12uint32_map_tP11TermIdStore18CICompactCallbacksPVi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v10 = *__error();
  float16x8_t v11 = _SILogForLogForCategory(16);
  os_log_type_t v12 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v11, v12))
  {
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v13 = a4;
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v34;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v14;
    a4 = v13;
    HIWORD(v55) = 1024;
    LODWORD(v56) = v15;
    WORD2(v56) = 1024;
    *(_DWORD *)((char *)&v56 + 6) = v16;
    _os_log_impl(&dword_1BD672000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    float16x8_t v29 = __si_assert_copy_extra_329();
    float16x8_t v30 = v29;
    float16x8_t v31 = "";
    if (v29) {
      float16x8_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v31);
LABEL_49:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  long long v37 = *a5;
  long long v38 = a5[1];
  uint64_t v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    float16x8_t v32 = __si_assert_copy_extra_329();
    float16x8_t v30 = v32;
    float16x8_t v33 = "";
    if (v32) {
      float16x8_t v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "target->nVectors() == 0", v33);
    goto LABEL_49;
  }
  float16x8_t v18 = operator new(8uLL);
  __p[0] = v18;
  *float16x8_t v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v19 = *(void *)(a1 + 128);
  float16x8_t v20 = *(std::__shared_weak_count **)(a1 + 136);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a1 + 144);
  float16x8_t v22 = *(std::__shared_weak_count **)(a1 + 152);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v47[0] = v19;
  v47[1] = (uint64_t)v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEE(v17, v47);
    uint64_t v23 = a3;
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEE(v17, v47);
    uint64_t v23 = a3;
  }
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2000000000;
  char v46 = 1;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v42 = 0u;
  uint64_t v40 = v21;
  uint64_t v41 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(void *)(a1 + 96);
  float16x8_t v25 = *(std::__shared_weak_count **)(a1 + 104);
  v39[0] = v24;
  v39[1] = v25;
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v42, &v40, v39);
  }
  float16x8_t v26 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v55 = 0x40000000;
  *(void *)&long long v56 = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((void *)&v56 + 1) = &unk_1E63457E8;
  uint64_t v57 = v45;
  uint64_t v58 = v23;
  uint64_t v59 = a4;
  uint64_t v60 = v17;
  uint64_t v61 = a6;
  long long v62 = v37;
  long long v63 = v38;
  long long v52 = 0u;
  long long v53 = 0u;
  char v51 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v49, (uint64_t)&v42);
    long long v52 = v49;
    long long v53 = v50;
    if (!(void)v50) {
      break;
    }
    ((void (*)(uint8_t *, long long *, char *))v56)(buf, &v52, &v51);
  }
  while (!v51);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v44);
  float16x8_t v27 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  float16x8_t v28 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  _Block_object_dispose(v45, 8);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

uint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *v6;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      unsigned int v11 = uint32_map_get(v7, *v6);
      uint64_t v8 = *(void *)storageResolvePtr(v10, 8 * v11, 8, 1);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li256EEyjf(*(void *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  uint64_t result = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64)) {
    uint64_t result = (*(uint64_t (**)(void))(a1 + 88))(*(void *)(a1 + 96));
  }
  *a3 = result;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li256EEyjf(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_log_type_t v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v12);
  if (a5 == -1)
  {
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    float16x8_t v18 = a3;
    uint64_t v19 = 0xFFFFFFFFLL;
    float v20 = a6;
    char v21 = 0;
  }
  else
  {
    if (*(_DWORD *)(v15 + 68) <= a5)
    {
      float16x8_t v22 = __si_assert_copy_extra_329();
      uint64_t v23 = v22;
      uint64_t v24 = "";
      if (v22) {
        uint64_t v24 = v22;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2728, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v24);
      free(v23);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v16 = a1;
    unsigned int v17 = a2;
    float16x8_t v18 = a3;
    uint64_t v19 = a5;
    float v20 = a6;
    char v21 = 1;
  }
  *((void *)_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(v16, v17, v18, v19, v21, v20)+ 64) = a4;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13) {
      return;
    }
  }
  else if (!v13)
  {
    return;
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE5flushEy(uint64_t a1, uint64_t a2)
{
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE4dumpEbbPViPvU13block_pointerFbjPKvybjfE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 144);
  unsigned int v11 = *(std::__shared_weak_count **)(a1 + 152);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  float16x8_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 96);
  int v14 = *(std::__shared_weak_count **)(a1 + 104);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  uint64_t v19 = ___ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  float v20 = &unk_1E63457C0;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    v19((uint64_t)v18, (uint64_t)&v32, (BOOL *)&v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result = (*(uint64_t (**)(float))(*(void *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE17mergeIndexForTestEP22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  unsigned int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE21mergeUpdateSetForTestEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v16) = 1024;
      *(_DWORD *)((char *)&v16 + 2) = v8;
      HIWORD(v16) = 1024;
      *(_DWORD *)int v17 = v9;
      *(_WORD *)&v17[4] = 1024;
      *(_DWORD *)&v17[6] = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    unsigned int v11 = operator new(0x10uLL);
    uint64_t v16 = v11 + 2;
    *(void *)int v17 = v11 + 2;
    *unsigned int v11 = a1 + 48;
    v11[1] = a2 + 48;
    *(void *)std::string buf = v11;
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v11);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v12 = __si_assert_copy_extra_329();
  uint64_t v13 = v12;
  int v14 = "";
  if (v12) {
    int v14 = v12;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
  free(v13);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a2 + 64));
    *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (*(void *)(a2 + 72))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(a2 + 64));
        os_log_type_t v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        if (v6) {
          break;
        }
        int v7 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a2 + 40)
                                                      + ((*(void *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(a2 + 64)
                                          + 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(void *)(a2 + 72) - 1;
        unint64_t v9 = *(void *)(a2 + 64) + 1;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v8;
        if (v9 >= 0x200)
        {
          operator delete(**(void ***)(a2 + 40));
          *(void *)(a2 + 40) += 8;
          uint64_t v8 = *(void *)(a2 + 72);
          unint64_t v9 = *(void *)(a2 + 64) - 256;
          *(void *)(a2 + 64) = v9;
        }
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 40) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v9);
          *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          if (*(void *)(a2 + 72)) {
            continue;
          }
        }
        return;
      }
      *(_DWORD *)(a1 + 4) = v6[1];
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a2 + 16) + 16), *v6, 532);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(Ptr + 528);
      *(void *)(a1 + 16) = Ptr;
      *(void *)(a1 + 24) = Ptr + 512;
    }
  }
}

int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfojy(int *result, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (int v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    uint64_t v5 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v5;
    int v7 = "";
    if (v5) {
      int v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (*(uint64_t (**)(int *))(*(void *)v3 + 16))(v3);
      int v11 = (*(uint64_t (**)(int *))(*(void *)v3 + 24))(v3);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v17 = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      __int16 v20 = 1024;
      int v21 = v12;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    uint64_t result = __error();
    unsigned int *result = v8;
  }
  uint64_t v4 = *(void *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    _ZNK22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    _ZNK22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    int v14 = __si_assert_copy_extra_329();
    os_log_type_t v6 = v14;
    int v15 = "";
    if (v14) {
      int v15 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    uint64_t v5 = v4;
    os_log_type_t v6 = "";
    if (v4) {
      os_log_type_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1914, "offset < store->endOffset()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v2 = *(void **)(a1 + 16);
  return vi_onefixedsize_memory_allocator::getPtr(v2, a2, 532);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfoP17TermIdContainer_s(uint64_t a1, uint64_t a2)
{
  v18[62] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v8;
      HIWORD(v17) = 1024;
      LODWORD(v18[0]) = v9;
      WORD2(v18[0]) = 1024;
      *(_DWORD *)((char *)v18 + 6) = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    uint64_t v11 = a2 + 48;
    int v12 = operator new(0x10uLL);
    int v17 = v12 + 2;
    v18[0] = v12 + 2;
    void *v12 = a1 + 48;
    v12[1] = v11;
    *(void *)std::string buf = v12;
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
    operator delete(v12);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v11);
  }
  int v13 = __si_assert_copy_extra_329();
  int v14 = v13;
  int v15 = "";
  if (v13) {
    int v15 = v13;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
  free(v14);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE5trainERKNSt3__16vectorIP22AnyVectorIndexInstanceNS5_9allocatorIS8_EEEE(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    long long v33 = __si_assert_copy_extra_329();
    int v34 = v33;
    float16x8_t v35 = "";
    if (v33) {
      float16x8_t v35 = v33;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v35);
    goto LABEL_55;
  }
  if (*v3 != a1)
  {
    float16x8_t v36 = __si_assert_copy_extra_329();
    int v34 = v36;
    long long v37 = "";
    if (v36) {
      long long v37 = v36;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v37);
LABEL_55:
    free(v34);
    if (__valid_fs(-1)) {
      uint64_t v38 = 2989;
    }
    else {
      uint64_t v38 = 3072;
    }
    *(_DWORD *)uint64_t v38 = -559038737;
LABEL_59:
    abort();
  }
  int v7 = (char *)operator new(8uLL);
  *(void *)int v7 = a1 + 48;
  int v8 = v7 + 8;
  uint64_t v40 = v7 + 8;
  uint64_t v41 = v7 + 8;
  std::string __p = v7;
  if (v4 < 9) {
    goto LABEL_39;
  }
  unint64_t v9 = 1;
  do
  {
    uint64_t v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      long long v30 = __si_assert_copy_extra_329();
      char v31 = v30;
      long long v32 = "";
      if (v30) {
        long long v32 = v30;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v12 = v11 + 48;
    if (v8 < v41)
    {
      *(void *)int v8 = v12;
      int v10 = v8 + 8;
      goto LABEL_6;
    }
    int v13 = (char *)__p;
    int64_t v14 = v8 - (unsigned char *)__p;
    uint64_t v15 = (v8 - (unsigned char *)__p) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_59;
    }
    uint64_t v17 = v41 - (unsigned char *)__p;
    if ((v41 - (unsigned char *)__p) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v19 = operator new(8 * v18);
    }
    else
    {
      int v19 = 0;
    }
    __int16 v20 = &v19[8 * v15];
    int v21 = &v19[8 * v18];
    *__int16 v20 = v12;
    int v10 = v20 + 1;
    if (v8 == v13)
    {
      std::string __p = &v19[8 * v15];
      uint64_t v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    unint64_t v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      uint64_t v25 = (v22 >> 3) + 1;
      int v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      long long v26 = &v19[8 * v15 - 16];
      long long v27 = v8 - 16;
      uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *long long v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      int v23 = v8;
    }
    do
    {
      uint64_t v24 = *((void *)v23 - 1);
      v23 -= 8;
      *--__int16 v20 = v24;
    }
    while (v23 != v13);
    int v13 = (char *)__p;
LABEL_30:
    std::string __p = v20;
    uint64_t v41 = v21;
    int v8 = v13;
    if (v13) {
      goto LABEL_33;
    }
LABEL_6:
    uint64_t v40 = v10;
    ++v9;
    int v3 = *(void **)a2;
    int v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  int v7 = (char *)__p;
LABEL_39:
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(void *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
  {
    operator delete(v7);
  }
}

unsigned int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE13insertForTestEjjPKv14vec_dimensions15vec_data_formatj(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    int v10 = v9;
    uint64_t v11 = "";
    if (v9) {
      uint64_t v11 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v7 = a7;
  uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((void *)result + 64) = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14insertForMergeEjtjPKv14vec_dimensions15vec_data_formatyjf(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v11 = __si_assert_copy_extra_329();
    uint64_t v12 = v11;
    int v13 = "";
    if (v11) {
      int v13 = v11;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li256EEyjf(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE12insertVectorEjjPKv14vec_dimensions15vec_data_format14docInvertStateyP15PostingBaseInfo(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == a1[4])
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    os_log_type_t v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    int v8 = "";
    if (v6) {
      int v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    unint64_t v9 = __si_assert_copy_extra_329();
    uint64_t v7 = v9;
    int v10 = "";
    if (v9) {
      int v10 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

unsigned int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE17bulkInsertForTestEPKvPKjjS8_(unsigned int *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v19 = *a5++;
        unsigned int v18 = v19;
        unsigned int v20 = *a3++;
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 64) = v20;
        a2 += 512;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v16 = *__error();
          uint64_t v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        unsigned int v13 = a5[v10];
        uint64_t v14 = a3[v10];
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((void *)result + 64) = v14;
        a2 += 512;
        uint64_t v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE6shadowEbPVi(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_log_type_t v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v9 + 168))(v9, a2, a3);
  uint64_t v10 = vi_onefixedsize_disk_allocator::shadow(*(void *)(*(void *)(a1 + 96) + 32), a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return v10;
    }
  }
  else if (!v7)
  {
    return v10;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v10;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v9 = *(void *)(*(void *)(a1 + 96) + 32);
  unint64_t v10 = *(unsigned int *)(v9 + 72);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 12;
    do
    {
      float v12 = *(void **)(v9 + 8 * v11);
      if (v12 && (unint64_t v13 = v12[1], v13 + 1 >= 2) && v13 <= a2 && (v14 = v12[2], v13 - v14 + v12[3] > a2)) {
        uint64_t v15 = a2 - v13 + v14;
      }
      else {
        uint64_t v15 = -1;
      }
      if (v11 - 11 >= v10) {
        break;
      }
      ++v11;
    }
    while (v15 == -1);
    if (v15 != -1) {
      goto LABEL_17;
    }
  }
  if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 144))(v8, a2) & 1) == 0)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v6 + 56))(v6, a2);
    if (!v7) {
      goto LABEL_21;
    }
  }
  else
  {
LABEL_17:
    uint64_t v16 = 1;
    if (!v7)
    {
LABEL_21:
      if (!v5) {
        return v16;
      }
      goto LABEL_22;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v5) {
    return v16;
  }
LABEL_22:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v16;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE8allExistEPKvj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE(v5, a2))
      {
        a2 += 512;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE(v5, a2))break; {
        a2 += 512;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    uint64_t v15 = v14;
    uint64_t v16 = "";
    if (v14) {
      uint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int v4 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj(a1, a2, (int *)&v24, &v23, 0);
  if (v4 == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    uint64_t v9 = *(void *)(a1 + 80);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 96);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 104);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE_block_invoke;
    v20[3] = &unk_1E6345778;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE_block_invoke_1271;
      v15[3] = &unk_1F18161B8;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      uint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      unint64_t v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 != -1;
}

int *___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(const void **)(a1 + 48);
  uint64_t v8 = *(unsigned int *)a3;
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 528) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 528);
  uint64_t result = (int *)memcmp(v7, v14, 0x200uLL);
  if (!result)
  {
    int v16 = *__error();
    uint64_t v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v22 = a3[1];
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2760;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = a2;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v22;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v16;
    int v18 = *__error();
    unsigned int v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)(a1 + 56);
      double v24 = *(float *)(a1 + 60);
      *(_DWORD *)std::string buf = 136315906;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2761;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v23;
      *(_WORD *)&v38[4] = 2048;
      *(double *)&v38[6] = v24;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v18;
    int v20 = *__error();
    unsigned int v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      float v25 = *(float *)(a1 + 60);
      float v26 = a3[1];
      float v27 = vabds_f32(v25, v26);
      if (v25 == v26)
      {
        BOOL v28 = 1;
        BOOL v29 = 1;
      }
      else
      {
        float v30 = fabsf(v25);
        float v31 = fabsf(v26);
        BOOL v28 = v27 <= fmaxf(fminf(v31, v30) * 0.000015259, 0.000015259);
        BOOL v29 = v27 <= (float)(fmaxf(v30, v31) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317186;
      int v34 = "exists_block_invoke";
      __int16 v35 = 1024;
      int v36 = 2762;
      __int16 v37 = 2048;
      *(double *)uint64_t v38 = v27;
      *(_WORD *)&v38[8] = 2048;
      *(void *)&v38[10] = 0x3810000000000000;
      __int16 v39 = 2048;
      uint64_t v40 = 0x3E80000000000000;
      __int16 v41 = 1024;
      BOOL v42 = v27 < 1.1755e-38;
      __int16 v43 = 1024;
      BOOL v44 = v27 < 0.00000011921;
      __int16 v45 = 1024;
      BOOL v46 = v28;
      __int16 v47 = 1024;
      BOOL v48 = v29;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x48u);
    }
    uint64_t result = __error();
    int *result = v20;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE_block_invoke_1271(uint64_t a1, int a2, unsigned int *a3, unsigned char *a4)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  int v6 = *(const void **)(a1 + 48);
  uint64_t v103 = *(void *)(a1 + 40);
  uint64_t v8 = *a3;
  uint64_t v9 = *(void **)(*(void *)(v103 + 48) + 32);
  unint64_t v10 = v9[3] + v9[2] * v8;
  bit_vector_set_10635(v9 + 525, (v10 >> 20));
  unint64_t v11 = (v10 + 528) >> 20;
  if (v11 > (v10 >> 20))
  {
    unsigned int v12 = (v10 >> 20) + 1;
    do
    {
      unint64_t v13 = v12;
      bit_vector_set_10635(v9 + 525, v12++);
    }
    while (v11 > v13);
  }
  uint64_t v14 = (const void *)_windowsResolvePtr((uint64_t)(v9 + 5), v9[3] + v9[2] * v8, 528);
  if (!memcmp(v6, v14, 0x200uLL))
  {
    int v15 = *__error();
    int v16 = _SILogForLogForCategory(16);
    uint64_t v17 = a3;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      double v52 = *((float *)a3 + 1);
      *(_DWORD *)std::string buf = 136315906;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2770;
      __int16 v115 = 1024;
      float v116 = *(float *)&a2;
      __int16 v117 = 2048;
      *(double *)int v118 = v52;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v15;
    int v18 = *(float16x8_t **)(a1 + 48);
    unsigned int v19 = (float16x8_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float v20 = _ZNK10CIVector_sIDF16_Li256EE8distanceERKS0_(v18, v19);
    int v21 = *__error();
    double v22 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      float v53 = *(float *)(a1 + 88);
      *(_DWORD *)std::string buf = 136315906;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2772;
      __int16 v115 = 1024;
      float v116 = v53;
      __int16 v117 = 2048;
      *(double *)int v118 = v20;
      _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v21;
    std::string __p = 0;
    unint64_t v109 = 0;
    uint64_t v110 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&__p);
    int v23 = *__error();
    double v24 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      float v54 = *(float *)__p;
      float v55 = *((float *)__p + 1);
      int v56 = *((_DWORD *)__p + 2);
      float v57 = *((float *)__p + 3);
      BOOL v58 = v55 == v57 || vabds_f32(v55, v57) <= fmaxf(fminf(fabsf(v57), fabsf(v55)) * 0.000015259, 0.000015259);
      *(_DWORD *)std::string buf = 136316674;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2774;
      __int16 v115 = 1024;
      float v116 = v54;
      __int16 v117 = 2048;
      *(double *)int v118 = v55;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v56;
      __int16 v119 = 2048;
      double v120 = v57;
      __int16 v121 = 1024;
      LODWORD(v122) = v58;
      _os_log_error_impl(&dword_1BD672000, v24, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", buf, 0x38u);
    }
    *__error() = v23;
    int v25 = *__error();
    float v26 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      float v59 = *(float *)__p;
      int v60 = *((_DWORD *)__p + 2);
      BOOL v61 = *((float *)__p + 1) == *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2775;
      __int16 v115 = 1024;
      float v116 = v59;
      __int16 v117 = 1024;
      *(_DWORD *)int v118 = v60;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v61;
      _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v25;
    int v27 = *__error();
    BOOL v28 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      float v62 = *(float *)__p;
      int v63 = *((_DWORD *)__p + 2);
      BOOL v64 = *((float *)__p + 1) < *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2776;
      __int16 v115 = 1024;
      float v116 = v62;
      __int16 v117 = 1024;
      *(_DWORD *)int v118 = v63;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v64;
      _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v27;
    int v29 = *__error();
    float v30 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      float v65 = *(float *)__p;
      int v66 = *((_DWORD *)__p + 2);
      BOOL v67 = *((float *)__p + 1) > *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2777;
      __int16 v115 = 1024;
      float v116 = v65;
      __int16 v117 = 1024;
      *(_DWORD *)int v118 = v66;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v67;
      _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v29;
    int v31 = *__error();
    long long v32 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      float v68 = *(float *)__p;
      int v69 = *((_DWORD *)__p + 2);
      float v70 = *((float *)__p + 1);
      float v71 = *((float *)__p + 3);
      double v72 = (float)(v70 - v71);
      float v73 = vabds_f32(v70, v71);
      if (v70 == v71)
      {
        BOOL v74 = 1;
        BOOL v75 = 1;
      }
      else
      {
        float v99 = fabsf(v70);
        float v100 = fabsf(v71);
        BOOL v74 = v73 <= fmaxf(fminf(v100, v99) * 0.000015259, 0.000015259);
        BOOL v75 = v73 <= (float)(fmaxf(v99, v100) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317698;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2778;
      __int16 v115 = 1024;
      float v116 = v68;
      __int16 v117 = 1024;
      *(_DWORD *)int v118 = v69;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v72;
      __int16 v119 = 2048;
      double v120 = 1.17549435e-38;
      __int16 v121 = 2048;
      uint64_t v122 = 0x3E80000000000000;
      __int16 v123 = 1024;
      BOOL v124 = v73 < 1.1755e-38;
      __int16 v125 = 1024;
      BOOL v126 = v73 < 0.00000011921;
      __int16 v127 = 1024;
      BOOL v128 = v74;
      __int16 v129 = 1024;
      BOOL v130 = v75;
      _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x54u);
    }
    *__error() = v31;
    unsigned int v106 = 0;
    uint64_t v107 = 0;
    uint64_t v105 = 0;
    uint64_t v33 = *(void *)(a1 + 56);
    uint64_t v34 = *a3;
    __int16 v35 = *(void **)(*(void *)(v103 + 48) + 32);
    unint64_t v36 = v35[3] + v35[2] * v34;
    bit_vector_set_10635(v35 + 525, (v36 >> 20));
    unint64_t v37 = (v36 + 528) >> 20;
    if (v37 > (v36 >> 20))
    {
      unsigned int v38 = (v36 >> 20) + 1;
      do
      {
        unint64_t v39 = v38;
        bit_vector_set_10635(v35 + 525, v38++);
      }
      while (v37 > v39);
    }
    unint64_t v40 = _windowsResolvePtr((uint64_t)(v35 + 5), v35[3] + v35[2] * v34, 528);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v33 + 80))(&v105, v33, v40, 2);
    int v41 = *__error();
    BOOL v42 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      float v76 = *v105;
      float v77 = v105[1];
      int v78 = *((_DWORD *)v105 + 2);
      float v79 = v105[3];
      *(_DWORD *)std::string buf = 136316674;
      long long v112 = "exists_block_invoke";
      BOOL v80 = vabds_f32(v77, v79) <= fmaxf(fminf(fabsf(v79), fabsf(v77)) * 0.000015259, 0.000015259);
      int v114 = 2781;
      __int16 v113 = 1024;
      int v81 = v77 == v79 || v80;
      __int16 v115 = 1024;
      float v116 = v76;
      __int16 v117 = 2048;
      *(double *)int v118 = v77;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v78;
      __int16 v119 = 2048;
      double v120 = v79;
      __int16 v121 = 1024;
      LODWORD(v122) = v81;
      _os_log_error_impl(&dword_1BD672000, v42, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", buf, 0x38u);
    }
    *__error() = v41;
    int v43 = *__error();
    BOOL v44 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      float v82 = *v105;
      int v83 = *((_DWORD *)v105 + 2);
      BOOL v84 = v105[1] == v105[3];
      *(_DWORD *)std::string buf = 136316162;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2782;
      __int16 v115 = 1024;
      float v116 = v82;
      __int16 v117 = 1024;
      *(_DWORD *)int v118 = v83;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v84;
      _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v43;
    int v45 = *__error();
    BOOL v46 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      float v85 = *v105;
      int v86 = *((_DWORD *)v105 + 2);
      BOOL v87 = v105[1] < v105[3];
      *(_DWORD *)std::string buf = 136316162;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2783;
      __int16 v115 = 1024;
      float v116 = v85;
      __int16 v117 = 1024;
      *(_DWORD *)int v118 = v86;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v87;
      _os_log_error_impl(&dword_1BD672000, v46, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v45;
    int v47 = *__error();
    BOOL v48 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      float v88 = *v105;
      int v89 = *((_DWORD *)v105 + 2);
      BOOL v90 = v105[1] > v105[3];
      *(_DWORD *)std::string buf = 136316162;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2784;
      __int16 v115 = 1024;
      float v116 = v88;
      __int16 v117 = 1024;
      *(_DWORD *)int v118 = v89;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v90;
      _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v47;
    int v49 = *__error();
    long long v50 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      float v91 = *v105;
      int v92 = *((_DWORD *)v105 + 2);
      float v93 = v105[1];
      float v94 = v105[3];
      float v95 = vabds_f32(v93, v94);
      BOOL v96 = (float)(v93 - v94) < 1.1755e-38;
      if (v93 == v94)
      {
        BOOL v97 = 1;
        BOOL v98 = 1;
      }
      else
      {
        float v101 = fabsf(v93);
        float v102 = fabsf(v94);
        BOOL v97 = v95 <= fmaxf(fminf(v102, v101) * 0.000015259, 0.000015259);
        BOOL v98 = v95 <= (float)(fmaxf(v101, v102) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317698;
      long long v112 = "exists_block_invoke";
      __int16 v113 = 1024;
      int v114 = 2785;
      __int16 v115 = 1024;
      float v116 = v91;
      __int16 v117 = 1024;
      *(_DWORD *)int v118 = v92;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v95;
      __int16 v119 = 2048;
      double v120 = 1.17549435e-38;
      __int16 v121 = 2048;
      uint64_t v122 = 0x3E80000000000000;
      __int16 v123 = 1024;
      BOOL v124 = v96;
      __int16 v125 = 1024;
      BOOL v126 = v95 < 0.00000011921;
      __int16 v127 = 1024;
      BOOL v128 = v97;
      __int16 v129 = 1024;
      BOOL v130 = v98;
      _os_log_error_impl(&dword_1BD672000, v50, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x54u);
    }
    *__error() = v49;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v17;
    char v51 = v105;
    *a4 = 1;
    if (v51)
    {
      unsigned int v106 = v51;
      operator delete(v51);
    }
    if (__p)
    {
      unint64_t v109 = __p;
      operator delete(__p);
    }
  }
}

void __destroy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li256EE19QuantizerPartitionsE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li256EE19QuantizerPartitionsE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE11nPartitionsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE8nVectorsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815DB0;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815DB0;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12indexVersionIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEiE4typeEiRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE(int a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (!fd_create_protected(a1, a2, 0, 0))
  {
    if (*__error() == 1) {
      return 4294967293;
    }
    else {
      return 4294967294;
    }
  }
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v2);
  unsigned int v5 = v4;
  unint64_t v6 = v3;
  unsigned int v8 = v7;
  uint64_t v9 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v10 = v9 + 320 * HIDWORD(v3);
  int v19 = *(_DWORD *)(v10 + 312);
  unint64_t v11 = *(void (**)(void))(v10 + 224);
  if (v11) {
    v11(*(void *)(v9 + 320 * HIDWORD(v3) + 288));
  }
  int v20 = v2;
  if (!_setjmp((int *)v10)) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v10 + 312) = v19;
  if (__THREAD_SLOT_KEY)
  {
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12)
    {
LABEL_20:
      makeThreadId();
      unint64_t v13 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_12;
    }
  }
  else
  {
    makeThreadId();
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12) {
      goto LABEL_20;
    }
  }
  unint64_t v13 = v12;
  if ((unint64_t)v12 >= 0x801) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v14 = (uint64_t)v13 - 1;
  int v15 = &threadData[18 * ((uint64_t)v13 - 1)];
  unsigned int v17 = v15[14];
  int v16 = v15 + 14;
  if (v17 > v5)
  {
    do
      CIOnThreadCleanUpPop(v14);
    while (*v16 > v5);
  }
  dropThreadId(v6, 1, v20);
  CICleanUpReset(v6, v8);
  return 0xFFFFFFFFLL;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12indexVersionIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEiE4typeEiRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE(int a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (!fd_create_protected(a1, a2, 0, 0))
  {
    if (*__error() == 1) {
      return 4294967293;
    }
    else {
      return 4294967294;
    }
  }
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v2);
  unsigned int v5 = v4;
  unint64_t v6 = v3;
  unsigned int v8 = v7;
  uint64_t v9 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v10 = v9 + 320 * HIDWORD(v3);
  int v19 = *(_DWORD *)(v10 + 312);
  unint64_t v11 = *(void (**)(void))(v10 + 224);
  if (v11) {
    v11(*(void *)(v9 + 320 * HIDWORD(v3) + 288));
  }
  int v20 = v2;
  if (!_setjmp((int *)v10)) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v10 + 312) = v19;
  if (__THREAD_SLOT_KEY)
  {
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12)
    {
LABEL_20:
      makeThreadId();
      unint64_t v13 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_12;
    }
  }
  else
  {
    makeThreadId();
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12) {
      goto LABEL_20;
    }
  }
  unint64_t v13 = v12;
  if ((unint64_t)v12 >= 0x801) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v14 = (uint64_t)v13 - 1;
  int v15 = &threadData[18 * ((uint64_t)v13 - 1)];
  unsigned int v17 = v15[14];
  int v16 = v15 + 14;
  if (v17 > v5)
  {
    do
      CIOnThreadCleanUpPop(v14);
    while (*v16 > v5);
  }
  dropThreadId(v6, 1, v20);
  CICleanUpReset(v6, v8);
  return 0xFFFFFFFFLL;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12indexVersionIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEiE4typeEiRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE(int a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (!fd_create_protected(a1, a2, 0, 0))
  {
    if (*__error() == 1) {
      return 4294967293;
    }
    else {
      return 4294967294;
    }
  }
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v2);
  unsigned int v5 = v4;
  unint64_t v6 = v3;
  unsigned int v8 = v7;
  uint64_t v9 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v10 = v9 + 320 * HIDWORD(v3);
  int v19 = *(_DWORD *)(v10 + 312);
  unint64_t v11 = *(void (**)(void))(v10 + 224);
  if (v11) {
    v11(*(void *)(v9 + 320 * HIDWORD(v3) + 288));
  }
  int v20 = v2;
  if (!_setjmp((int *)v10)) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v10 + 312) = v19;
  if (__THREAD_SLOT_KEY)
  {
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12)
    {
LABEL_20:
      makeThreadId();
      unint64_t v13 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_12;
    }
  }
  else
  {
    makeThreadId();
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12) {
      goto LABEL_20;
    }
  }
  unint64_t v13 = v12;
  if ((unint64_t)v12 >= 0x801) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v14 = (uint64_t)v13 - 1;
  int v15 = &threadData[18 * ((uint64_t)v13 - 1)];
  unsigned int v17 = v15[14];
  int v16 = v15 + 14;
  if (v17 > v5)
  {
    do
      CIOnThreadCleanUpPop(v14);
    while (*v16 > v5);
  }
  dropThreadId(v6, 1, v20);
  CICleanUpReset(v6, v8);
  return 0xFFFFFFFFLL;
}

uint64_t IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::indexVersion<vi_onefixedsize_disk_allocator>(int a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (!fd_create_protected(a1, a2, 0, 0))
  {
    if (*__error() == 1) {
      return 4294967293;
    }
    else {
      return 4294967294;
    }
  }
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v2);
  unsigned int v5 = v4;
  unint64_t v6 = v3;
  unsigned int v8 = v7;
  uint64_t v9 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v10 = v9 + 320 * HIDWORD(v3);
  int v19 = *(_DWORD *)(v10 + 312);
  unint64_t v11 = *(void (**)(void))(v10 + 224);
  if (v11) {
    v11(*(void *)(v9 + 320 * HIDWORD(v3) + 288));
  }
  int v20 = v2;
  if (!_setjmp((int *)v10)) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v10 + 312) = v19;
  if (__THREAD_SLOT_KEY)
  {
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12)
    {
LABEL_20:
      makeThreadId();
      unint64_t v13 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_12;
    }
  }
  else
  {
    makeThreadId();
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12) {
      goto LABEL_20;
    }
  }
  unint64_t v13 = v12;
  if ((unint64_t)v12 >= 0x801) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v14 = (uint64_t)v13 - 1;
  int v15 = &threadData[18 * ((uint64_t)v13 - 1)];
  unsigned int v17 = v15[14];
  int v16 = v15 + 14;
  if (v17 > v5)
  {
    do
      CIOnThreadCleanUpPop(v14);
    while (*v16 > v5);
  }
  dropThreadId(v6, 1, v20);
  CICleanUpReset(v6, v8);
  return 0xFFFFFFFFLL;
}

uint64_t IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::indexVersion<vi_onefixedsize_disk_allocator>(int a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (!fd_create_protected(a1, a2, 0, 0))
  {
    if (*__error() == 1) {
      return 4294967293;
    }
    else {
      return 4294967294;
    }
  }
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v2);
  unsigned int v5 = v4;
  unint64_t v6 = v3;
  unsigned int v8 = v7;
  uint64_t v9 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v10 = v9 + 320 * HIDWORD(v3);
  int v19 = *(_DWORD *)(v10 + 312);
  unint64_t v11 = *(void (**)(void))(v10 + 224);
  if (v11) {
    v11(*(void *)(v9 + 320 * HIDWORD(v3) + 288));
  }
  int v20 = v2;
  if (!_setjmp((int *)v10)) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v10 + 312) = v19;
  if (__THREAD_SLOT_KEY)
  {
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12)
    {
LABEL_20:
      makeThreadId();
      unint64_t v13 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_12;
    }
  }
  else
  {
    makeThreadId();
    unsigned int v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v12) {
      goto LABEL_20;
    }
  }
  unint64_t v13 = v12;
  if ((unint64_t)v12 >= 0x801) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v14 = (uint64_t)v13 - 1;
  int v15 = &threadData[18 * ((uint64_t)v13 - 1)];
  unsigned int v17 = v15[14];
  int v16 = v15 + 14;
  if (v17 > v5)
  {
    do
      CIOnThreadCleanUpPop(v14);
    while (*v16 > v5);
  }
  dropThreadId(v6, 1, v20);
  CICleanUpReset(v6, v8);
  return 0xFFFFFFFFLL;
}

uint64_t freeVectorIndex(uint64_t result)
{
  if (result)
  {
    IVFVectorIndex_s::~IVFVectorIndex_s((IVFVectorIndex_s *)(result + 8));
    JUMPOUT(0x1C1881000);
  }
  return result;
}

void IVFVectorIndex_s::~IVFVectorIndex_s(IVFVectorIndex_s *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v2 = *__error();
  unint64_t v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)((char *)this + 120);
    if (*((char *)this + 143) < 0) {
      unsigned int v4 = (void *)*v4;
    }
    IVFVectorIndex_s::name(&__p, (uint64_t)this);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    unsigned int v8 = v4;
    __int16 v9 = 2048;
    uint64_t v10 = this;
    __int16 v11 = 2080;
    unsigned int v12 = p_p;
    _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "[%s] close %p with prefix %s", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  *__error() = v2;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>>>::destroy(*((void **)this + 19));
  if ((*((char *)this + 143) & 0x80000000) == 0)
  {
    if ((*((char *)this + 119) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    operator delete(*((void **)this + 12));
    if ((*((char *)this + 95) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_15:
    operator delete(*((void **)this + 9));
    goto LABEL_12;
  }
  operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0) {
    goto LABEL_14;
  }
LABEL_11:
  if (*((char *)this + 95) < 0) {
    goto LABEL_15;
  }
LABEL_12:
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

BOOL recoverVectorIndex(int a1, const char *a2, uint64_t a3)
{
  v71[76] = *MEMORY[0x1E4F143B8];
  bzero(v65, 0x400uLL);
  int v6 = fcntl(a1, 50, v65);
  if (v65[0]) {
    BOOL v7 = v6 < 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    unsigned int v8 = "";
  }
  else {
    unsigned int v8 = v65;
  }
  size_t v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_114;
  }
  std::string::size_type v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_14;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9) {
LABEL_14:
  }
    memcpy(p_dst, v8, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  v61.__pn_ = __dst;
  int v14 = *__error();
  int v15 = _SILogForLogForCategory(16);
  if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_24;
  }
  if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, v61.__pn_.__r_.__value_.__l.__data_, v61.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v61.__pn_;
  }
  IVFVectorIndex_s::protectionClassForParentPath(v65, (uint64_t)&__dst);
  if (v65[23] >= 0) {
    int v16 = v65;
  }
  else {
    int v16 = *(unsigned char **)v65;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a2;
  _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "[%s] recoverFromShadow: %s", (uint8_t *)&buf, 0x16u);
  if ((v65[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v65);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
  *__error() = v14;
  memset(&v60, 0, sizeof(v60));
  size_t v17 = strlen(a2);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_114;
  }
  std::string::size_type v18 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_std::string buf = (std::string *)operator new(v20 + 1);
    buf.__r_.__value_.__l.__size_ = v18;
    buf.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_31;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v17;
  p_std::string buf = &buf;
  if (v17) {
LABEL_31:
  }
    memcpy(p_buf, a2, v18);
  p_buf->__r_.__value_.__s.__data_[v18] = 0;
  double v22 = std::string::append(&buf, "ivf-vector-indexes");
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  *(void *)std::string __p = v22->__r_.__value_.__l.__size_;
  *(void *)&__p[7] = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  __dst.__r_.__value_.__r.__words[0] = v23;
  __dst.__r_.__value_.__l.__size_ = *(void *)__p;
  *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(void *)&__p[7];
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v24;
  std::__fs::filesystem::operator/[abi:nn180100]((std::string *)v65, (uint64_t)&v61, (std::__fs::filesystem::path *)&__dst);
  if ((v65[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v65, *(std::string::size_type *)&v65[8]);
    if ((v65[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v65);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_99;
      }
    }
    else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_99;
    }
  }
  else
  {
    std::string v60 = *(std::string *)v65;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_99:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_100;
    }
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_38;
  }
LABEL_100:
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_38:
  *(void *)&__ec.__val_ = 0;
  __ec.__cat_ = 0;
  __ec.__cat_ = std::system_category();
  std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v26 = &v60;
  }
  else {
    float v26 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  uint64_t v58 = 0;
  memset(v65, 0, 24);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v60.__r_.__value_.__l.__size_;
  }
  std::string::append[abi:nn180100]<char const*,0>((std::string *)v65, (char *)v26, (char *)v26 + size);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v65, &__ec);
  if ((v65[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v65);
    if (__ec.__val_)
    {
LABEL_45:
      int v27 = *__error();
      BOOL v28 = _SILogForLogForCategory(16);
      os_log_type_t v29 = dword_1E9FC90E4 < 3;
      if (os_log_type_enabled(v28, (os_log_type_t)(dword_1E9FC90E4 < 3)))
      {
        float v30 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v60
            : (std::string *)v60.__r_.__value_.__r.__words[0];
        int val = __ec.__val_;
        std::error_code::message(&__dst, &__ec);
        long long v32 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__dst
            : (std::string *)__dst.__r_.__value_.__r.__words[0];
        *(_DWORD *)float v65 = 136315650;
        *(void *)&v65[4] = v30;
        *(_WORD *)&v65[12] = 1024;
        *(_DWORD *)&v65[14] = val;
        *(_WORD *)&v65[18] = 2080;
        *(void *)&v65[20] = v32;
        _os_log_impl(&dword_1BD672000, v28, v29, "*warn* check status %s failed %d %s", v65, 0x1Cu);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      *__error() = v27;
      goto LABEL_55;
    }
  }
  else if (__ec.__val_)
  {
    goto LABEL_45;
  }
  if ((_BYTE)v58 && v58 != 255)
  {
    uint64_t v53 = a3;
    bzero(&v65[8], 0x238uLL);
    uint64_t v38 = MEMORY[0x1E4FBA460] + 24;
    uint64_t v39 = MEMORY[0x1E4FBA460] + 64;
    v71[0] = MEMORY[0x1E4FBA460] + 64;
    uint64_t v40 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
    *(void *)float v65 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
    *(void *)&v65[*(void *)(*(void *)v65 - 24)] = v40;
    *(void *)&v65[8] = 0;
    int v41 = (std::ios_base *)&v65[*(void *)(*(void *)v65 - 24)];
    std::ios_base::init(v41, &v65[16]);
    v41[1].__vftable = 0;
    v41[1].__fmtflags_ = -1;
    *(void *)float v65 = v38;
    v71[0] = v39;
    MEMORY[0x1C1880C90](&v65[16]);
    std::ifstream::open();
    if (v70)
    {
      std::istream::seekg();
      uint64_t v57 = 1;
      std::istream::read();
      if (!v57)
      {
        int v49 = *__error();
        long long v50 = _SILogForLogForCategory(16);
        os_log_type_t v51 = dword_1E9FC90E4 < 3;
        if (os_log_type_enabled(v50, (os_log_type_t)(dword_1E9FC90E4 < 3)))
        {
          if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&buf, v61.__pn_.__r_.__value_.__l.__data_, v61.__pn_.__r_.__value_.__l.__size_);
          }
          else {
            std::string buf = v61.__pn_;
          }
          IVFVectorIndex_s::protectionClassForParentPath((char *)&__dst, (uint64_t)&buf);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v52 = &__dst;
          }
          else {
            double v52 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = v52;
          *(_WORD *)&unsigned char __p[12] = 2080;
          *(void *)&__p[14] = a2;
          _os_log_impl(&dword_1BD672000, v50, v51, "*warn* [%s] recoverFromShadow try to recover readOnly %s", __p, 0x16u);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        *__error() = v49;
        *(void *)float v65 = *MEMORY[0x1E4FBA3F8];
        *(void *)&v65[*(void *)(*(void *)v65 - 24)] = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
        MEMORY[0x1C1880CA0](&v65[16]);
        std::istream::~istream();
        MEMORY[0x1C1880F90](v71);
        BOOL v47 = 1;
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_94;
        }
        goto LABEL_91;
      }
    }
    *(void *)float v65 = *MEMORY[0x1E4FBA3F8];
    *(void *)&v65[*(void *)(*(void *)v65 - 24)] = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
    MEMORY[0x1C1880CA0](&v65[16]);
    std::istream::~istream();
    MEMORY[0x1C1880F90](v71);
    a3 = v53;
  }
LABEL_55:
  size_t v33 = strlen(a2);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_114;
  }
  size_t v34 = v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    __int16 v35 = operator new(v36 + 1);
    *(void *)&v65[8] = v34;
    *(void *)&v65[16] = v37 | 0x8000000000000000;
    *(void *)float v65 = v35;
    goto LABEL_62;
  }
  v65[23] = v33;
  __int16 v35 = v65;
  if (v33) {
LABEL_62:
  }
    memcpy(v35, a2, v34);
  v35[v34] = 0;
  __dst.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __dst.__r_.__value_.__l.__size_ = 1174405120;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16IVFVectorIndex_s17recoverFromShadowEiPKcPVi_block_invoke;
  float v55 = &__block_descriptor_tmp_112_6970;
  if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v61.__pn_.__r_.__value_.__l.__data_, v61.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v61.__pn_;
  }
  IVFVectorIndex_s::enumerateIndexes(&v61);
  if ((v65[23] & 0x80000000) != 0) {
    operator delete(*(void **)v65);
  }
  buf.__r_.__value_.__r.__words[0] = 0;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
  buf.__r_.__value_.__r.__words[2] = 0x2000000000;
  char v64 = 1;
  size_t v42 = strlen(a2);
  if (v42 > 0x7FFFFFFFFFFFFFF7) {
LABEL_114:
  }
    abort();
  size_t v43 = v42;
  if (v42 >= 0x17)
  {
    uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v45 = v42 | 7;
    }
    uint64_t v46 = v45 + 1;
    BOOL v44 = operator new(v45 + 1);
    *(void *)&__p[8] = v43;
    *(void *)&__p[16] = v46 | 0x8000000000000000;
    *(void *)std::string __p = v44;
  }
  else
  {
    __p[23] = v42;
    BOOL v44 = __p;
    if (!v42) {
      goto LABEL_82;
    }
  }
  memcpy(v44, a2, v43);
LABEL_82:
  v44[v43] = 0;
  *(void *)float v65 = MEMORY[0x1E4F143A8];
  *(void *)&v65[8] = 1174405120;
  *(void *)&v65[16] = ___ZN16IVFVectorIndex_s17recoverFromShadowEiPKcPVi_block_invoke_113;
  *(void *)&v65[24] = &unk_1F1813C80;
  if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v67, v61.__pn_.__r_.__value_.__l.__data_, v61.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v67 = v61.__pn_;
  }
  int v69 = a1;
  uint64_t v68 = a3;
  int v66 = &buf;
  IVFVectorIndex_s::enumerateIndexes(&v61);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  BOOL v47 = *(unsigned char *)(buf.__r_.__value_.__l.__size_ + 24) != 0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&buf, 8);
  if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_94:
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v47;
    }
LABEL_95:
    operator delete(v61.__pn_.__r_.__value_.__l.__data_);
    return v47;
  }
  operator delete(pn.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_94;
  }
LABEL_91:
  if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_95;
  }
  return v47;
}

void ___ZN16IVFVectorIndex_s17recoverFromShadowEiPKcPVi_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((a8 & 0x80) == 0) {
    return;
  }
  int v10 = *__error();
  __int16 v11 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a7 + 23) >= 0) {
      uint64_t v12 = (const std::string::value_type *)a7;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a7;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    _os_log_impl(&dword_1BD672000, v11, OS_LOG_TYPE_DEFAULT, "remove: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v10;
  uint64_t v13 = a1 + 32;
  memset(&v24, 0, sizeof(v24));
  uint64_t v14 = *(unsigned __int8 *)(a7 + 23);
  if ((v14 & 0x80u) == 0) {
    int v15 = (char *)a7;
  }
  else {
    int v15 = *(char **)a7;
  }
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a7 + 8);
  }
  std::string::append[abi:nn180100]<char const*,0>(&v24, v15, &v15[v14]);
  std::__fs::filesystem::operator/[abi:nn180100](&__p, v13, (std::__fs::filesystem::path *)&v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = __p;
  }
  IVFVectorIndex_s::unlink((char *)&buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_18;
      }
LABEL_22:
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((*(char *)(a7 + 23) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_18:
  if ((*(char *)(a7 + 23) & 0x80000000) == 0)
  {
LABEL_19:
    std::string __p = *(std::string *)a7;
    goto LABEL_24;
  }
LABEL_23:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
LABEL_24:
  int v16 = std::string::append(&__p, ".partitions");
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v18 = *__error();
  int v19 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    p_std::string buf = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    _os_log_impl(&dword_1BD672000, v19, OS_LOG_TYPE_DEFAULT, "remove partitions: %s", (uint8_t *)&__p, 0xCu);
  }
  *__error() = v18;
  memset(&v23, 0, sizeof(v23));
  std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v22 = &buf;
  }
  else {
    double v22 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  std::string::append[abi:nn180100]<char const*,0>(&v23, (char *)v22, (char *)v22 + size);
  std::__fs::filesystem::operator/[abi:nn180100](&v24, v13, (std::__fs::filesystem::path *)&v23);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v24;
  }
  IVFVectorIndex_s::unlink((char *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_40;
    }
LABEL_44:
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_46:
      operator delete(buf.__r_.__value_.__l.__data_);
      return;
    }
    goto LABEL_45;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_44;
  }
LABEL_40:
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_41;
  }
LABEL_45:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
}

void ___ZN16IVFVectorIndex_s17recoverFromShadowEiPKcPVi_block_invoke_113(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v7 = *((char *)a7 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a7 + 23);
  }
  else {
    size_t v8 = (size_t)a7[1];
  }
  unint64_t v9 = v8 + 7;
  if (v8 + 7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v10 = a7;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    size_t v36 = v8 + 7;
    int64_t v37 = v15 | 0x8000000000000000;
    std::string __dst = p_dst;
    uint64_t v12 = (void **)*v10;
    goto LABEL_11;
  }
  size_t v36 = 0;
  int64_t v37 = 0;
  std::string __dst = 0;
  HIBYTE(v37) = v8 + 7;
  uint64_t v12 = (void **)*a7;
  if (v8)
  {
    p_dst = (void **)&__dst;
LABEL_11:
    if (v7 >= 0) {
      int v16 = v10;
    }
    else {
      int v16 = v12;
    }
    memmove(p_dst, v16, v8);
    goto LABEL_15;
  }
  if (v7 >= 0) {
    int v16 = a7;
  }
  else {
    int v16 = (void **)*a7;
  }
  p_dst = (void **)&__dst;
LABEL_15:
  strcpy((char *)p_dst + v8, ".shadow");
  uint64_t v17 = a1 + 40;
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:nn180100]<char const*,0>(&__p, (char *)v16, (char *)v16 + v8);
  std::__fs::filesystem::operator/[abi:nn180100]((std::string *)v38, a1 + 40, (std::__fs::filesystem::path *)&__p);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v38, 0);
  if ((v38[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v38);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_38:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_38;
  }
LABEL_17:
  if (v33.__r_.__value_.__s.__data_[0] == 255 || !v33.__r_.__value_.__s.__data_[0])
  {
    int v18 = *__error();
    int v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = (void **)&__dst;
      if (v37 < 0) {
        uint64_t v20 = __dst;
      }
      if (*((char *)v10 + 23) >= 0) {
        uint64_t v21 = v10;
      }
      else {
        uint64_t v21 = *v10;
      }
      *(_DWORD *)uint64_t v38 = 136315394;
      *(void *)&v38[4] = v20;
      *(_WORD *)&v38[12] = 2080;
      *(void *)&v38[14] = v21;
      _os_log_impl(&dword_1BD672000, v19, OS_LOG_TYPE_DEFAULT, "copy file: %s to %s", v38, 0x16u);
    }
    *__error() = v18;
    if (v37 >= 0) {
      double v22 = (const char *)&__dst;
    }
    else {
      double v22 = (const char *)__dst;
    }
    if (*((char *)v10 + 23) >= 0) {
      std::string v23 = (const char *)v10;
    }
    else {
      std::string v23 = (const char *)*v10;
    }
    if ((copyFileFallback(*(unsigned int *)(a1 + 72), v22, *(_DWORD *)(a1 + 72), v23, *(_DWORD **)(a1 + 64), 1, 1) & 1) == 0)
    {
      int v24 = *__error();
      int v25 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v10 + 23) >= 0) {
          long long v32 = v10;
        }
        else {
          long long v32 = *v10;
        }
        *(_DWORD *)uint64_t v38 = 136315650;
        *(void *)&v38[4] = "recoverFromShadow_block_invoke";
        *(_WORD *)&v38[12] = 1024;
        *(_DWORD *)&v38[14] = 4028;
        *(_WORD *)&unsigned char v38[18] = 2080;
        *(void *)&v38[20] = v32;
        _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: Could not recover file from shadow: %s", v38, 0x1Cu);
      }
      *__error() = v24;
      if (*((char *)v10 + 23) < 0)
      {
        unint64_t v26 = (unint64_t)v10[1];
        if (v26 < 0xB) {
          goto LABEL_57;
        }
        int v10 = (void **)*v10;
      }
      else
      {
        unint64_t v26 = *((unsigned __int8 *)v10 + 23);
        if (v26 < 0xB)
        {
LABEL_57:
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
          if ((SHIBYTE(v37) & 0x80000000) == 0) {
            return;
          }
          goto LABEL_64;
        }
      }
      if (strcmp((const char *)v10 + v26 - 11, ".partitions")) {
        goto LABEL_57;
      }
    }
LABEL_63:
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_64;
  }
  int v27 = *__error();
  BOOL v28 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v29 = (void **)&__dst;
    if (v37 < 0) {
      os_log_type_t v29 = __dst;
    }
    *(_DWORD *)uint64_t v38 = 136315138;
    *(void *)&v38[4] = v29;
    _os_log_impl(&dword_1BD672000, v28, OS_LOG_TYPE_DEFAULT, "remove: %s", v38, 0xCu);
  }
  *__error() = v27;
  memset(&v33, 0, sizeof(v33));
  size_t v30 = HIBYTE(v37);
  if (v37 >= 0) {
    int v31 = (char *)&__dst;
  }
  else {
    int v31 = (char *)__dst;
  }
  if (v37 < 0) {
    size_t v30 = v36;
  }
  std::string::append[abi:nn180100]<char const*,0>(&v33, v31, &v31[v30]);
  std::__fs::filesystem::operator/[abi:nn180100](&__p, v17, (std::__fs::filesystem::path *)&v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v38 = __p;
  }
  IVFVectorIndex_s::unlink(v38);
  if ((v38[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v38);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_68;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_68:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37) < 0) {
LABEL_64:
  }
    operator delete(__dst);
}

void __destroy_helper_block_8_40c34_ZTSNSt3__14__fs10filesystem4pathE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void __copy_helper_block_8_40c34_ZTSNSt3__14__fs10filesystem4pathE(uint64_t a1, uint64_t a2)
{
  int v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void openVectorIndex()
{
}

void si_analytics_log(const char *a1, ...)
{
  va_start(va, a1);
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  string[0] = 0;
  va_copy((va_list)&string[1], va);
  vasprintf(string, "[%s] open %s indexId %u doesn't match previous assigned %u", va);
  SISetCrashCStr(string[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)keys = 136315138;
    *(char **)&keys[4] = string[0];
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "%s", keys, 0xCu);
  }
  *(void *)keys = "crash_string";
  xpc_object_t v1 = xpc_string_create(string[0]);
  xpc_object_t values = v1;
  xpc_object_t v2 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  analytics_send_event();
  xpc_release(v2);
  xpc_release(v1);
  free(string[0]);
}

uint64_t __Block_byref_object_copy__120(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v5 = a2[7];
  long long v3 = a2 + 7;
  uint64_t v4 = v5;
  *(void *)(result + 56) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 56;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__121(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void ___ZN16IVFVectorIndex_sC2EiPKcbbPViP10data_map_sjU13block_pointerFvS1_jt14vec_dimensions15vec_data_formatb20VectorIndexOpenErrorjE_block_invoke(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, char *a7, char a8)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 72);
  unsigned int v106 = 4;
  int v11 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v12 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v11);
  unsigned int v14 = v13;
  unint64_t v15 = v12;
  int v17 = v16;
  uint64_t v18 = *(void *)&threadData[18 * v12 + 2];
  uint64_t v19 = v18 + 320 * HIDWORD(v12);
  int v94 = *(_DWORD *)(v19 + 312);
  uint64_t v20 = *(void (**)(void))(v19 + 224);
  if (v20) {
    v20(*(void *)(v18 + 320 * HIDWORD(v12) + 288));
  }
  uint64_t v97 = v10;
  LODWORD(__dst.__r_.__value_.__l.__data_) = HIDWORD(v15);
  *(_DWORD *)std::string __p = v15;
  LODWORD(buf.__r_.__value_.__l.__data_) = v17;
  unsigned int v105 = v14;
  if (_setjmp((int *)v19))
  {
    uint64_t v21 = a1;
    uint64_t v22 = a5;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v103 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v103, 2u);
    }
    *(_DWORD *)(v19 + 312) = v94;
    unsigned int v23 = v105;
    pthread_key_t v24 = __THREAD_SLOT_KEY;
    uint64_t v25 = v10;
    if (!__THREAD_SLOT_KEY)
    {
      makeThreadId();
      pthread_key_t v24 = __THREAD_SLOT_KEY;
    }
    unint64_t v26 = pthread_getspecific(v24);
    unsigned int v27 = a2;
    if (!v26 || (BOOL v28 = v26, (unint64_t)v26 >= 0x801))
    {
      makeThreadId();
      BOOL v28 = pthread_getspecific(__THREAD_SLOT_KEY);
    }
    uint64_t v29 = (uint64_t)v28 - 1;
    size_t v30 = &threadData[18 * ((uint64_t)v28 - 1)];
    unsigned int v32 = v30[14];
    int v31 = v30 + 14;
    if (v32 > v23)
    {
      do
        CIOnThreadCleanUpPop(v29);
      while (*v31 > v23);
    }
    dropThreadId(*(unsigned int *)__p, 1, v11);
    CICleanUpReset(*(unsigned int *)__p, LODWORD(buf.__r_.__value_.__l.__data_));
    uint64_t IVFDiskOne = 0;
    char v34 = a4;
  }
  else
  {
    uint64_t v21 = a1;
    uint64_t v22 = a5;
    if ((a8 & 0x80) == 0) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    uint64_t v25 = v10;
    long long v35 = *(_OWORD *)(v10 + 192);
    v104[0] = *(_OWORD *)(v10 + 176);
    v104[1] = v35;
    int v36 = *(_DWORD *)v10;
    uint64_t v37 = v10 + 96;
    unsigned __int8 v39 = (a8 & 0x80) == 0 || *(unsigned char *)(a1 + 96) != 0;
    unsigned int v27 = a2;
    char v34 = a4;
    uint64_t IVFDiskOne = makeIVFDiskOne((uint64_t)v104, v36, v37, a2, a3, a4, a5, a6, 0, v39, (int *)&v106);
    uint64_t v40 = *(void *)&threadData[18 * *(unsigned int *)__p + 2];
    unsigned int data = __dst.__r_.__value_.__l.__data_;
    uint64_t v42 = v40 + 320 * LODWORD(__dst.__r_.__value_.__l.__data_);
    *(_DWORD *)(v42 + 312) = v94;
    size_t v43 = *(void (**)(void))(v42 + 232);
    if (v43) {
      v43(*(void *)(v40 + 320 * data + 288));
    }
    dropThreadId(*(unsigned int *)__p, 0, v11);
  }
  unint64_t v44 = a6 | (2
            * (((unint64_t)(v34 & 3) << 50) | ((unint64_t)(v22 & 3) << 48) | ((unint64_t)a3 << 32) | v27));
  if (IVFDiskOne)
  {
    int v45 = *__error();
    uint64_t v46 = _SILogForLogForCategory(16);
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    if (*(char *)(v25 + 143) < 0) {
      std::string::size_type v47 = *(void *)(v97 + 120);
    }
    else {
      std::string::size_type v47 = v97 + 120;
    }
    long long v50 = *(const char **)(v21 + 80);
    std::string::size_type v51 = strlen(v50);
    if (v51 <= 0x7FFFFFFFFFFFFFF7)
    {
      size_t v52 = v51;
      if (v51 >= 0x17)
      {
        uint64_t v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17) {
          uint64_t v54 = v51 | 7;
        }
        __dst.__r_.__value_.__l.__size_ = v51;
        __dst.__r_.__value_.__r.__words[2] = (v54 + 1) | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v54 + 1);
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v51;
        p_dst = &__dst;
        if (!v51)
        {
          p_dst = &__dst;
          goto LABEL_46;
        }
      }
      memmove(p_dst, v50, v52);
LABEL_46:
      p_dst->__r_.__value_.__s.__data_[v52] = 0;
      (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *))(*(void *)IVFDiskOne + 312))(__p, IVFDiskOne, &__dst);
      if (__p[23] >= 0) {
        float v55 = __p;
      }
      else {
        float v55 = *(unsigned char **)__p;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v47;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v55;
      _os_log_impl(&dword_1BD672000, v46, OS_LOG_TYPE_DEFAULT, "[%s] %s opened", (uint8_t *)&buf, 0x16u);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_51;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_51;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_51:
      *__error() = v45;
      operator new();
    }
LABEL_127:
    abort();
  }
  if (v106 == 6)
  {
    *(unsigned char *)(*(void *)(*(void *)(v21 + 56) + 8) + 24) = 1;
    goto LABEL_119;
  }
  memset(&__dst, 0, sizeof(__dst));
  memset(&buf, 0, sizeof(buf));
  uint64_t v48 = a7[23];
  if ((v48 & 0x80u) == 0) {
    int v49 = a7;
  }
  else {
    int v49 = *(char **)a7;
  }
  if ((v48 & 0x80u) != 0) {
    uint64_t v48 = *((void *)a7 + 1);
  }
  std::string::append[abi:nn180100]<char const*,0>(&buf, v49, &v49[v48]);
  std::__fs::filesystem::operator/[abi:nn180100]((std::string *)__p, v97 + 72, (std::__fs::filesystem::path *)&buf);
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  else
  {
    std::string __dst = *(std::string *)__p;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v56 = &__dst;
  }
  else {
    int v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  uint64_t v57 = (atomic_uint *)fd_create_protected(*(_DWORD *)(v21 + 88), (const char *)v56, 0, 0);
  if (v57)
  {
    fd_release(v57);
    IVFVectorIndex_s::unlink((char *)&__dst);
    int v58 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    unint64_t v60 = size + 7;
    if (size + 7 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_127;
    }
    if (v60 >= 0x17)
    {
      unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
      uint64_t v63 = v60 | 7;
      if (v63 == 23) {
        uint64_t v63 = v62;
      }
      uint64_t v64 = v63 + 1;
      float v65 = operator new(v63 + 1);
      *(void *)&__p[8] = size + 7;
      *(void *)&__p[16] = v64 | 0x8000000000000000;
      *(void *)std::string __p = v65;
      std::__fs::filesystem::path v61 = v65;
    }
    else
    {
      memset(__p, 0, 24);
      __p[23] = size + 7;
      std::__fs::filesystem::path v61 = __p;
      if (!size)
      {
        std::__fs::filesystem::path v61 = __p;
        goto LABEL_77;
      }
    }
    if (v58 >= 0) {
      int v66 = &__dst;
    }
    else {
      int v66 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v61, v66, size);
LABEL_77:
    strcpy(&v61[size], ".shadow");
    IVFVectorIndex_s::unlink(__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    int v67 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = __dst.__r_.__value_.__l.__size_;
    }
    unint64_t v69 = v68 + 11;
    if (v68 + 11 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_127;
    }
    if (v69 >= 0x17)
    {
      unint64_t v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
      uint64_t v72 = v69 | 7;
      if (v72 == 23) {
        uint64_t v72 = v71;
      }
      uint64_t v73 = v72 + 1;
      BOOL v74 = operator new(v72 + 1);
      *(void *)&__p[8] = v68 + 11;
      *(void *)&__p[16] = v73 | 0x8000000000000000;
      *(void *)std::string __p = v74;
      uint64_t v70 = v74;
    }
    else
    {
      memset(__p, 0, 24);
      __p[23] = v68 + 11;
      uint64_t v70 = __p;
      if (!v68)
      {
        uint64_t v70 = __p;
        goto LABEL_93;
      }
    }
    if (v67 >= 0) {
      BOOL v75 = &__dst;
    }
    else {
      BOOL v75 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v70, v75, v68);
LABEL_93:
    strcpy(&v70[v68], ".partitions");
    IVFVectorIndex_s::unlink(__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    int v76 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v77 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v77 = __dst.__r_.__value_.__l.__size_;
    }
    unint64_t v78 = v77 + 18;
    if (v77 + 18 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_127;
    }
    if (v78 >= 0x17)
    {
      unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      uint64_t v81 = v78 | 7;
      if (v81 == 23) {
        uint64_t v81 = v80;
      }
      uint64_t v82 = v81 + 1;
      int v83 = operator new(v81 + 1);
      *(void *)&__p[8] = v77 + 18;
      *(void *)&__p[16] = v82 | 0x8000000000000000;
      *(void *)std::string __p = v83;
      float v79 = v83;
    }
    else
    {
      memset(__p, 0, 24);
      __p[23] = v77 + 18;
      float v79 = __p;
      if (!v77)
      {
        float v79 = __p;
LABEL_109:
        strcpy(&v79[v77], ".partitions.shadow");
        IVFVectorIndex_s::unlink(__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(unsigned char *)(*(void *)(*(void *)(v21 + 48) + 8) + 24) = 1;
        LODWORD(v85) = a3 | 0x80000000;
        if (a6) {
          uint64_t v85 = v85;
        }
        else {
          uint64_t v85 = a3;
        }
        int v86 = data_map_drop_vectors(*(void *)(v25 + 200), v34 & 3 | (4 * (v22 & 3)), *(unsigned int *)(v21 + 92) | (unint64_t)(v85 << 32));
        uint64_t v87 = v21;
        int v88 = *__error();
        int v89 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
        {
          float v91 = (void *)(v97 + 120);
          if (*(char *)(v25 + 143) < 0) {
            float v91 = (void *)*v91;
          }
          if (a7[23] >= 0) {
            int v92 = a7;
          }
          else {
            int v92 = *(char **)a7;
          }
          float v93 = kVectorIndexError[v106];
          *(_DWORD *)std::string __p = 136316418;
          *(void *)&__p[4] = "IVFVectorIndex_s_block_invoke";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 4324;
          *(_WORD *)&__p[18] = 2080;
          *(void *)&__p[20] = v91;
          __int16 v108 = 2080;
          unint64_t v109 = v92;
          __int16 v110 = 1024;
          int v111 = v86;
          __int16 v112 = 2080;
          __int16 v113 = v93;
          _os_log_error_impl(&dword_1BD672000, v89, OS_LOG_TYPE_ERROR, "%s:%d: [%s] %s with %u vectors reset for error: %s", __p, 0x36u);
          uint64_t v87 = a1;
        }
        *__error() = v88;
        uint64_t v90 = *(void *)(v87 + 32);
        uint64_t v21 = v87;
        if (v90) {
          (*(void (**)(uint64_t, void, void, void, void, uint64_t, void, void, int))(v90 + 16))(v90, *(void *)(v87 + 80), a2, a3, a4, v22, a6, v106, v86);
        }
        goto LABEL_117;
      }
    }
    if (v76 >= 0) {
      BOOL v84 = &__dst;
    }
    else {
      BOOL v84 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v79, v84, v77);
    goto LABEL_109;
  }
  *(unsigned char *)(*(void *)(*(void *)(v21 + 56) + 8) + 24) = 1;
LABEL_117:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_119:
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*(void *)(*(void *)(v21 + 64) + 8) + 40, v44, v44);
}

void ___ZN16IVFVectorIndex_sC2EiPKcbbPViP10data_map_sjU13block_pointerFvS1_jt14vec_dimensions15vec_data_formatb20VectorIndexOpenErrorjE_block_invoke_123(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  int v11 = a1;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1[7];
  uint64_t v13 = a4 & 3;
  unint64_t v14 = a6 | (2 * ((v13 << 50) | ((unint64_t)(a5 & 3) << 48) | (a3 << 32) | a2));
  unint64_t v15 = *(void **)(v12 + 152);
  if (!v15) {
    goto LABEL_12;
  }
  int v16 = (void *)(v12 + 152);
  do
  {
    unint64_t v17 = v15[4];
    BOOL v18 = v17 >= v14;
    if (v17 >= v14) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = v15 + 1;
    }
    if (v18) {
      int v16 = v15;
    }
    unint64_t v15 = (void *)*v19;
  }
  while (*v19);
  if (v16 == (void *)(v12 + 152) || v14 < v16[4])
  {
LABEL_12:
    uint64_t v20 = *(int8x8_t **)(a1[5] + 8);
    int8x8_t v21 = v20[6];
    if (v21)
    {
      uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        uint64_t v23 = a6 | (2 * ((v13 << 50) | ((unint64_t)(a5 & 3) << 48) | (a3 << 32) | a2));
        if (v14 >= *(void *)&v21) {
          uint64_t v23 = v14 % *(void *)&v21;
        }
      }
      else
      {
        uint64_t v23 = (*(void *)&v21 + 0x7FFFFFFFFFFFFFFFLL) & v14;
      }
      pthread_key_t v24 = *(void **)(*(void *)&v20[5] + 8 * v23);
      if (v24)
      {
        uint64_t v25 = (void *)*v24;
        if (v25)
        {
          if (v22.u32[0] < 2uLL)
          {
            uint64_t v26 = *(void *)&v21 - 1;
            while (1)
            {
              uint64_t v28 = v25[1];
              if (v28 == v14)
              {
                if (v25[2] == v14) {
                  return;
                }
              }
              else if ((v28 & v26) != v23)
              {
                goto LABEL_32;
              }
              uint64_t v25 = (void *)*v25;
              if (!v25) {
                goto LABEL_32;
              }
            }
          }
          do
          {
            unint64_t v27 = v25[1];
            if (v27 == v14)
            {
              if (v25[2] == v14) {
                return;
              }
            }
            else
            {
              if (v27 >= *(void *)&v21) {
                v27 %= *(void *)&v21;
              }
              if (v27 != v23) {
                break;
              }
            }
            uint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_32:
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    uint64_t v29 = (const char *)a1[8];
    size_t v30 = strlen(v29);
    if (v30 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v31 = v30;
    int v56 = v13;
    if (v30 >= 0x17)
    {
      uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v33 = v30 | 7;
      }
      uint64_t v54 = v11;
      uint64_t v34 = v9;
      uint64_t v35 = v12;
      uint64_t v36 = v7;
      uint64_t v37 = v6;
      uint64_t v38 = v10;
      uint64_t v39 = v8;
      uint64_t v40 = v33 + 1;
      p_dst = (void **)operator new(v33 + 1);
      unint64_t v41 = v40 | 0x8000000000000000;
      uint64_t v8 = v39;
      uint64_t v10 = v38;
      uint64_t v6 = v37;
      uint64_t v7 = v36;
      uint64_t v12 = v35;
      uint64_t v9 = v34;
      int v11 = v54;
      std::string::size_type v58 = v31;
      int64_t v59 = v41;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v59) = v30;
      p_dst = (void **)&__dst;
      if (!v30) {
        goto LABEL_40;
      }
    }
    memmove(p_dst, v29, v31);
LABEL_40:
    *((unsigned char *)p_dst + v31) = 0;
    IVFIndexName((uint64_t)&v62, v10, v9, v8, v7);
    if (v59 >= 0) {
      uint64_t v42 = (const std::string::value_type *)&__dst;
    }
    else {
      uint64_t v42 = (const std::string::value_type *)__dst;
    }
    if (v59 >= 0) {
      std::string::size_type v43 = HIBYTE(v59);
    }
    else {
      std::string::size_type v43 = v58;
    }
    unint64_t v44 = std::string::insert(&v62, 0, v42, v43);
    std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    uint64_t v61 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    unsigned int v55 = v10;
    if (SHIBYTE(v59) < 0) {
      operator delete(__dst);
    }
    LODWORD(v46) = v9 | 0x80000000;
    if (v6) {
      uint64_t v46 = v46;
    }
    else {
      uint64_t v46 = v9;
    }
    int v47 = data_map_drop_vectors(*(void *)(v12 + 200), v56 & 0xFFFFFFF3 | (4 * (v7 & 3)), *((unsigned int *)v11 + 18) | (unint64_t)(v46 << 32));
    int v48 = *__error();
    int v49 = _SILogForLogForCategory(16);
    os_log_type_t v50 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v49, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      std::string::size_type v51 = (void *)(v12 + 120);
      if (*(char *)(v12 + 143) < 0) {
        std::string::size_type v51 = (void *)*v51;
      }
      size_t v52 = __p;
      if (v61 < 0) {
        size_t v52 = (void **)__p[0];
      }
      LODWORD(v62.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
      WORD2(v62.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v62.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v52;
      HIWORD(v62.__r_.__value_.__r.__words[2]) = 1024;
      int v63 = v47;
      __int16 v64 = 2080;
      float v65 = "Purged";
      _os_log_impl(&dword_1BD672000, v49, v50, "*warn* [%s] %s with %u vectors dropped for error: %s", (uint8_t *)&v62, 0x26u);
    }
    *__error() = v48;
    uint64_t v53 = v11[4];
    if (v53) {
      (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(v53 + 16))(v53, v11[8], v55, v9, v8, v7, v6, 5, v47);
    }
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t IVFVectorIndex_s::readIndexId(uint64_t **a1)
{
  v15[19] = *MEMORY[0x1E4F143B8];
  bzero(&v13, 0x238uLL);
  uint64_t v2 = MEMORY[0x1E4FBA460] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA460] + 64;
  v15[0] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v4 = (uint64_t *)MEMORY[0x1E4FBA3F8];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(uint64_t *)((char *)&v12 + *(void *)(v12 - 24)) = v5;
  uint64_t v13 = 0;
  uint64_t v6 = (std::ios_base *)((char *)&v12 + *(void *)(v12 - 24));
  std::ios_base::init(v6, v14);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  uint64_t v12 = v2;
  v15[0] = v3;
  MEMORY[0x1C1880C90](v14);
  std::ifstream::open();
  if (v14[15])
  {
    *(void *)int v11 = -1;
    std::istream::read();
  }
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  os_log_type_t v9 = dword_1E9FC90E4 < 3;
  if (os_log_type_enabled(v8, (os_log_type_t)(dword_1E9FC90E4 < 3)))
  {
    if (*((char *)a1 + 23) < 0) {
      a1 = (uint64_t **)*a1;
    }
    *(_DWORD *)int v11 = 136315138;
    *(void *)&v11[4] = a1;
    _os_log_impl(&dword_1BD672000, v8, v9, "*warn* metaFile %s not valid", v11, 0xCu);
  }
  *__error() = v7;
  uint64_t v12 = *v4;
  *(uint64_t *)((char *)&v12 + *(void *)(v12 - 24)) = v4[3];
  MEMORY[0x1C1880CA0](v14);
  std::istream::~istream();
  MEMORY[0x1C1880F90](v15);
  return 0xFFFFFFFFLL;
}

void *IVFVectorIndex_s::flush(void *this, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)this[18];
  uint64_t v3 = this + 19;
  if (v2 != this + 19)
  {
    uint64_t v5 = (uint64_t)this;
    uint64_t v6 = this + 15;
    int v7 = this + 12;
    do
    {
      uint64_t v8 = v2[5];
      int v9 = *__error();
      uint64_t v10 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = v6;
        if (*(char *)(v5 + 143) < 0) {
          int v11 = (void *)*v6;
        }
        (*(void (**)(void **__return_ptr, uint64_t, void *))(*(void *)v8 + 312))(__p, v8, v7);
        uint64_t v12 = __p;
        if (v17 < 0) {
          uint64_t v12 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v11;
        __int16 v20 = 2080;
        int8x8_t v21 = v12;
        _os_log_impl(&dword_1BD672000, v10, OS_LOG_TYPE_DEFAULT, "[%s] flush %s", buf, 0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v9;
      this = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 136))(v8, a2);
      uint64_t v13 = (void *)v2[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)v2[2];
          BOOL v15 = *v14 == (void)v2;
          uint64_t v2 = v14;
        }
        while (!v15);
      }
      uint64_t v2 = v14;
    }
    while (v14 != v3);
  }
  return this;
}

uint64_t shadowVectorIndex(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(result + 152);
  uint64_t v4 = (void *)(result + 160);
  if (v3 != (void *)(result + 160))
  {
    uint64_t v7 = result;
    uint64_t v8 = (void *)(result + 128);
    uint64_t v17 = result + 104;
    do
    {
      uint64_t v9 = v3[5];
      int v10 = *__error();
      int v11 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = v8;
        if (*(char *)(v7 + 151) < 0) {
          uint64_t v12 = (void *)*v8;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 312))(__p, v9, v17);
        uint64_t v13 = __p;
        if (v19 < 0) {
          uint64_t v13 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        int8x8_t v21 = v12;
        __int16 v22 = 2080;
        uint64_t v23 = v13;
        _os_log_impl(&dword_1BD672000, v11, OS_LOG_TYPE_DEFAULT, "[%s] shadow %s", buf, 0x16u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v10;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, a2, a3);
      unint64_t v14 = (void *)v3[1];
      if (v14)
      {
        do
        {
          BOOL v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          BOOL v15 = (void *)v3[2];
          BOOL v16 = *v15 == (void)v3;
          uint64_t v3 = v15;
        }
        while (!v16);
      }
      uint64_t v3 = v15;
    }
    while (v15 != v4);
  }
  return result;
}

void compactVectorIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, _DWORD *a6)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int v10 = _SILogForLogForCategory(0);
  os_signpost_id_t v11 = os_signpost_id_make_with_pointer(v10, 0);
  uint64_t v12 = _SILogForLogForCategory(0);
  os_signpost_id_t spid = v11;
  unint64_t v13 = v11 - 1;
  if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v14 = v12;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v14, OS_SIGNPOST_INTERVAL_BEGIN, spid, "compactVectorIndex", "Start", buf, 2u);
    }
  }
  long long v61 = *a5;
  long long v62 = a5[1];
  if (__THREAD_SLOT_KEY)
  {
    unint64_t v15 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v15)
    {
LABEL_89:
      makeThreadId();
      unint64_t v15 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_7;
    }
  }
  else
  {
    makeThreadId();
    unint64_t v15 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v15) {
      goto LABEL_89;
    }
  }
  if (v15 >= 0x801) {
    goto LABEL_89;
  }
LABEL_7:
  int v16 = 0;
  unint64_t v57 = v13;
  if (v15 && v15 <= 0x800)
  {
    uint64_t v17 = &threadData[18 * v15];
    int v16 = *(v17 - 11);
    *(v17 - 11) = 1;
  }
  int v55 = v16;
  BOOL v18 = *(void **)(a1 + 152);
  char v19 = (void *)(a1 + 160);
  if (v18 != (void *)(a1 + 160))
  {
    __int16 v20 = (void *)(a2 + 160);
    uint64_t v59 = a4;
    do
    {
      uint64_t v21 = v18[5];
      int v22 = *(_DWORD *)(v21 + 12);
      int v23 = *(_DWORD *)(v21 + 16);
      uint64_t v24 = 1;
      if (v22 != 512) {
        uint64_t v24 = 3;
      }
      if (v22 == 768) {
        uint64_t v24 = 2;
      }
      if (v22 == 256) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v24;
      }
      if (v23 == 2) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = 3;
      }
      if (v23 == 4) {
        uint64_t v26 = 0;
      }
      unint64_t v27 = (void *)*v20;
      if (!*v20) {
        goto LABEL_36;
      }
      uint64_t v28 = *(unsigned int *)(v21 + 8);
      uint64_t v29 = *(unsigned __int16 *)(v21 + 20);
      uint64_t v30 = *(unsigned __int8 *)(v21 + 22);
      unint64_t v31 = v30 | (2 * ((v25 << 50) | (v26 << 48) | (v29 << 32) | v28));
      unsigned int v32 = v20;
      do
      {
        unint64_t v33 = v27[4];
        BOOL v34 = v33 >= v31;
        if (v33 >= v31) {
          uint64_t v35 = v27;
        }
        else {
          uint64_t v35 = v27 + 1;
        }
        if (v34) {
          unsigned int v32 = v27;
        }
        unint64_t v27 = (void *)*v35;
      }
      while (*v35);
      if (v32 != v20 && v31 >= v32[4])
      {
        uint64_t v36 = v32[5];
        if (*(_DWORD *)(v36 + 8) != v28
          || *(unsigned __int16 *)(v36 + 20) != v29
          || (v23 != 2 ? (BOOL v47 = v23 == 4) : (BOOL v47 = 1),
              !v47
           || *(_DWORD *)(v36 + 12) != vector_dimension_vec_sizes_12485[v25]
           || vector_size_elem_sizes_12484[v26] != *(_DWORD *)(v36 + 16)
           || *(unsigned __int8 *)(v36 + 22) != v30))
        {
          size_t v52 = __si_assert_copy_extra_329();
          uint64_t v53 = v52;
          uint64_t v54 = "";
          if (v52) {
            uint64_t v54 = v52;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 4151, "it->second->isCompatible(propertyId, vecVersion, dim, form, purgeable)", v54);
          free(v53);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        uint64_t v37 = (std::__shared_weak_count *)v32[6];
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
LABEL_36:
        uint64_t v36 = 0;
        uint64_t v37 = 0;
      }
      int v38 = *__error();
      uint64_t v39 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = a3;
        unint64_t v41 = a6;
        uint64_t v42 = a1 + 128;
        if (*(char *)(a1 + 151) < 0) {
          uint64_t v42 = *(void *)(a1 + 128);
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v21 + 312))(v66, v21, a1 + 104);
        if (v67 >= 0) {
          std::string::size_type v43 = v66;
        }
        else {
          std::string::size_type v43 = (void **)v66[0];
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v36 + 312))(v64, v36, a2 + 104);
        unint64_t v44 = v64;
        if (v65 < 0) {
          unint64_t v44 = (void **)v64[0];
        }
        *(_DWORD *)std::string buf = 136315650;
        uint64_t v69 = v42;
        __int16 v70 = 2080;
        unint64_t v71 = v43;
        __int16 v72 = 2080;
        uint64_t v73 = v44;
        _os_log_impl(&dword_1BD672000, v39, OS_LOG_TYPE_DEFAULT, "[%s] compact %s -> %s", buf, 0x20u);
        if (v65 < 0) {
          operator delete(v64[0]);
        }
        a6 = v41;
        a3 = v40;
        if (v67 < 0) {
          operator delete(v66[0]);
        }
        char v19 = (void *)(a1 + 160);
        a4 = v59;
      }
      *__error() = v38;
      v63[0] = v61;
      v63[1] = v62;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, _DWORD *))(*(void *)v21 + 144))(v21, v36, a3, a4, v63, a6);
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        std::string::size_type v45 = (void *)v18[1];
        if (!v45)
        {
          do
          {
LABEL_56:
            uint64_t v46 = (void *)v18[2];
            BOOL v47 = *v46 == (void)v18;
            BOOL v18 = v46;
          }
          while (!v47);
          goto LABEL_12;
        }
      }
      else
      {
        std::string::size_type v45 = (void *)v18[1];
        if (!v45) {
          goto LABEL_56;
        }
      }
      do
      {
        uint64_t v46 = v45;
        std::string::size_type v45 = (void *)*v45;
      }
      while (v45);
LABEL_12:
      BOOL v18 = v46;
      __int16 v20 = (void *)(a2 + 160);
    }
    while (v46 != v19);
  }
  pthread_key_t v48 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v48 = __THREAD_SLOT_KEY;
  }
  unint64_t v49 = (unint64_t)pthread_getspecific(v48);
  if (v49 && v49 < 0x801 || (makeThreadId(), (unint64_t v49 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY)) != 0))
  {
    if (v49 <= 0x800) {
      threadData[18 * v49 - 11] = v55;
    }
  }
  if (!*a6)
  {
    IVFVectorIndex_s::flush((void *)(a2 + 8), 0);
    IVFVectorIndex_s::makeReadOnly((void *)(a2 + 8));
  }
  os_log_type_t v50 = _SILogForLogForCategory(0);
  if (v57 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string::size_type v51 = v50;
    if (os_signpost_enabled(v50))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v51, OS_SIGNPOST_INTERVAL_END, spid, "compactVectorIndex", "End", buf, 2u);
    }
  }
}

void *IVFVectorIndex_s::makeReadOnly(void *this)
{
  xpc_object_t v1 = (IVFVectorIndex_s *)this;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)this[18];
  uint64_t v3 = this + 19;
  if (v2 != this + 19)
  {
    uint64_t v4 = this + 15;
    do
    {
      uint64_t v5 = (unsigned char *)v2[5];
      int v6 = *__error();
      uint64_t v7 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = (char *)v1 + 120;
        if (*((char *)v1 + 143) < 0) {
          uint64_t v8 = (unsigned char *)*v4;
        }
        (*(void (**)(void **__return_ptr, unsigned char *, unsigned char *))(*(void *)v5 + 312))(__p, v5, (unsigned char *)v1 + 96);
        uint64_t v9 = __p;
        if (v14 < 0) {
          uint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        int v16 = v8;
        __int16 v17 = 2080;
        BOOL v18 = v9;
        _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "[%s] makeReadOnly %s", buf, 0x16u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v6;
      this = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v5 + 184))(v5);
      if (v5[22]) {
        this = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v5 + 192))(v5);
      }
      int v10 = (void *)v2[1];
      if (v10)
      {
        do
        {
          os_signpost_id_t v11 = v10;
          int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          os_signpost_id_t v11 = (void *)v2[2];
          BOOL v12 = *v11 == (void)v2;
          uint64_t v2 = v11;
        }
        while (!v12);
      }
      uint64_t v2 = v11;
    }
    while (v11 != v3);
  }
  if (!*((unsigned char *)v1 + 5))
  {
    this = (void *)IVFVectorIndex_s::appendMetaKey(v1, 0);
    *((unsigned char *)v1 + 5) = 1;
  }
  return this;
}

void subvertVectorIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  if (__THREAD_SLOT_KEY)
  {
    unint64_t v3 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    makeThreadId();
    unint64_t v3 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v3) {
      goto LABEL_8;
    }
  }
  if (v3 < 0x801)
  {
    int v4 = 0;
    goto LABEL_5;
  }
LABEL_8:
  makeThreadId();
  unint64_t v3 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
  int v4 = 0;
  if (!v3)
  {
    uint64_t v5 = a2;
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v5 = a2;
  if (v3 <= 0x800)
  {
    int v6 = &threadData[18 * v3];
    int v4 = *(v6 - 11);
    *(v6 - 11) = 1;
  }
LABEL_10:
  int v103 = v4;
  uint64_t v105 = a1;
  *(_OWORD *)uint64_t v115 = 0u;
  *(_OWORD *)float v116 = 0u;
  uint64_t v117 = 1065353216;
  uint64_t v7 = *(void **)(v5 + 152);
  unint64_t v109 = (void *)(v5 + 160);
  __int16 v110 = (IVFVectorIndex_s *)(a1 + 8);
  if (v7 != (void *)(v5 + 160))
  {
    __int16 v108 = (std::string::size_type *)(a2 + 128);
    uint64_t v104 = a2 + 104;
    unsigned int v106 = (const void **)(a1 + 104);
    while (1)
    {
      uint64_t v8 = v7[5];
      int v9 = *(_DWORD *)(v8 + 12);
      switch(v9)
      {
        case 256:
          int v10 = 0;
          break;
        case 768:
          int v10 = 2;
          break;
        case 512:
          int v10 = 1;
          break;
        default:
          int v10 = 3;
          break;
      }
      unsigned int v11 = *(_DWORD *)(v8 + 8);
      uint64_t v12 = *(unsigned __int16 *)(v8 + 20);
      int v13 = *(_DWORD *)(v8 + 16);
      if (v13 == 2) {
        int v14 = 1;
      }
      else {
        int v14 = 3;
      }
      if (v13 == 4) {
        int v15 = 0;
      }
      else {
        int v15 = v14;
      }
      unsigned int v16 = *(unsigned __int8 *)(v8 + 22);
      unint64_t v113 = 0;
      int v114 = 0;
      IVFVectorIndex_s::getVectorIndex(&v113, (uint64_t)v110, v11, v12, v10, v15, v16);
      unint64_t v17 = v113;
      if (v113)
      {
        unint64_t v18 = 0x9DDFEA08EB382D69 * (((8 * v113) + 8) ^ HIDWORD(v113));
        unint64_t v19 = 0x9DDFEA08EB382D69 * (HIDWORD(v113) ^ (v18 >> 47) ^ v18);
        unint64_t v20 = v19 ^ (v19 >> 47);
        unint64_t v21 = 0x9DDFEA08EB382D69 * v20;
        unint64_t v22 = (unint64_t)v115[1];
        if (v115[1])
        {
          uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v115[1]);
          v23.i16[0] = vaddlv_u8(v23);
          if (v23.u32[0] > 1uLL)
          {
            unint64_t v24 = 0x9DDFEA08EB382D69 * v20;
            if ((void *)v21 >= v115[1]) {
              unint64_t v24 = v21 % (unint64_t)v115[1];
            }
          }
          else
          {
            unint64_t v24 = v21 & ((unint64_t)v115[1] - 1);
          }
          unint64_t v31 = (void *)*((void *)v115[0] + v24);
          if (v31)
          {
            unsigned int v32 = (void *)*v31;
            if (v32)
            {
              if (v23.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v34 = v32[1];
                  if (v34 == v21)
                  {
                    if (v32[2] == v113) {
                      goto LABEL_146;
                    }
                  }
                  else if ((v34 & ((uint64_t)v115[1] - 1)) != v24)
                  {
                    goto LABEL_58;
                  }
                  unsigned int v32 = (void *)*v32;
                  if (!v32) {
                    goto LABEL_58;
                  }
                }
              }
              do
              {
                unint64_t v33 = v32[1];
                if (v33 == v21)
                {
                  if (v32[2] == v113) {
                    goto LABEL_146;
                  }
                }
                else
                {
                  if ((void *)v33 >= v115[1]) {
                    v33 %= (unint64_t)v115[1];
                  }
                  if (v33 != v24) {
                    break;
                  }
                }
                unsigned int v32 = (void *)*v32;
              }
              while (v32);
            }
          }
        }
        else
        {
          unint64_t v24 = 0;
        }
LABEL_58:
        uint64_t v35 = operator new(0x18uLL);
        *uint64_t v35 = 0;
        v35[1] = v21;
        v35[2] = v17;
        float v36 = (float)((unint64_t)v116[1] + 1);
        if (!v22 || (float)(*(float *)&v117 * (float)v22) < v36)
        {
          BOOL v37 = (v22 & (v22 - 1)) != 0;
          if (v22 < 3) {
            BOOL v37 = 1;
          }
          unint64_t v38 = v37 | (2 * v22);
          unint64_t v39 = vcvtps_u32_f32(v36 / *(float *)&v117);
          if (v38 <= v39) {
            size_t prime = v39;
          }
          else {
            size_t prime = v38;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
            unint64_t v22 = (unint64_t)v115[1];
          }
          if (prime > v22)
          {
LABEL_98:
            if (prime >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v53 = operator new(8 * prime);
            uint64_t v54 = v115[0];
            v115[0] = v53;
            if (v54) {
              operator delete(v54);
            }
            uint64_t v55 = 0;
            v115[1] = (void *)prime;
            do
              *((void *)v115[0] + v55++) = 0;
            while (prime != v55);
            int v56 = (void **)v116[0];
            if (!v116[0]) {
              goto LABEL_122;
            }
            size_t v57 = *((void *)v116[0] + 1);
            size_t v58 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              size_t v59 = v57 & v58;
              *((void *)v115[0] + v59) = v116;
              for (unint64_t i = *v56; *v56; unint64_t i = *v56)
              {
                size_t v61 = i[1] & v58;
                if (v61 == v59)
                {
                  int v56 = (void **)i;
                }
                else if (*((void *)v115[0] + v61))
                {
                  *int v56 = (void *)*i;
                  uint64_t v62 = 8 * v61;
                  *unint64_t i = **(void **)((char *)v115[0] + v62);
                  **(void **)((char *)v115[0] + v62) = i;
                }
                else
                {
                  *((void *)v115[0] + v61) = v56;
                  int v56 = (void **)i;
                  size_t v59 = v61;
                }
              }
              goto LABEL_122;
            }
            if (v57 >= prime) {
              v57 %= prime;
            }
            *((void *)v115[0] + v57) = v116;
            uint64_t v66 = *v56;
            if (!*v56)
            {
LABEL_122:
              unint64_t v22 = prime;
              goto LABEL_123;
            }
            while (2)
            {
              size_t v68 = v66[1];
              if (v68 >= prime) {
                v68 %= prime;
              }
              if (v68 != v57)
              {
                if (!*((void *)v115[0] + v68))
                {
                  *((void *)v115[0] + v68) = v56;
LABEL_127:
                  int v56 = (void **)v66;
                  uint64_t v66 = (void *)*v66;
                  size_t v57 = v68;
                  if (!v66) {
                    goto LABEL_122;
                  }
                  continue;
                }
                *int v56 = (void *)*v66;
                uint64_t v67 = 8 * v68;
                *uint64_t v66 = **(void **)((char *)v115[0] + v67);
                **(void **)((char *)v115[0] + v67) = v66;
                uint64_t v66 = v56;
              }
              break;
            }
            size_t v68 = v57;
            goto LABEL_127;
          }
          if (prime < v22)
          {
            unint64_t v63 = vcvtps_u32_f32((float)(unint64_t)v116[1] / *(float *)&v117);
            if (v22 < 3 || (uint8x8_t v64 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
            {
              unint64_t v63 = std::__next_prime(v63);
            }
            else
            {
              uint64_t v65 = 1 << -(char)__clz(v63 - 1);
              if (v63 >= 2) {
                unint64_t v63 = v65;
              }
            }
            if (prime <= v63) {
              size_t prime = v63;
            }
            if (prime >= v22)
            {
              unint64_t v22 = (unint64_t)v115[1];
            }
            else
            {
              if (prime) {
                goto LABEL_98;
              }
              unint64_t v80 = v115[0];
              v115[0] = 0;
              if (v80) {
                operator delete(v80);
              }
              unint64_t v22 = 0;
              v115[1] = 0;
            }
          }
LABEL_123:
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v21 >= v22) {
              unint64_t v24 = v21 % v22;
            }
            else {
              unint64_t v24 = v21;
            }
          }
          else
          {
            unint64_t v24 = (v22 - 1) & v21;
          }
        }
        uint64_t v69 = v115[0];
        __int16 v70 = (void *)*((void *)v115[0] + v24);
        if (v70)
        {
          *uint64_t v35 = *v70;
          goto LABEL_144;
        }
        *uint64_t v35 = v116[0];
        v116[0] = v35;
        v69[v24] = v116;
        if (*v35)
        {
          unint64_t v71 = *(void *)(*v35 + 8);
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v71 >= v22) {
              v71 %= v22;
            }
          }
          else
          {
            v71 &= v22 - 1;
          }
          __int16 v70 = (char *)v115[0] + 8 * v71;
LABEL_144:
          *__int16 v70 = v35;
        }
        ++v116[1];
LABEL_146:
        int v72 = *__error();
        uint64_t v73 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v74 = a2 + 128;
          if (*(char *)(a2 + 151) < 0) {
            std::string::size_type v74 = *v108;
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 312))(&__dst, v8, v104);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          (*(void (**)(std::string *__return_ptr, unint64_t, const void **))(*(void *)v17 + 312))(&__p, v17, v106);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v74;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a2 + 8;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          __int16 v119 = p_dst;
          __int16 v120 = 2080;
          __int16 v121 = p_p;
          _os_log_impl(&dword_1BD672000, v73, OS_LOG_TYPE_DEFAULT, "[%s] subvert %p %s -> %s", (uint8_t *)&buf, 0x2Au);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_166;
            }
          }
          else
          {
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_156;
            }
LABEL_166:
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
        }
LABEL_156:
        *__error() = v72;
        (*(void (**)(uint64_t, unint64_t))(*(void *)v8 + 160))(v8, v17);
        size_t v52 = v114;
        if (!v114) {
          goto LABEL_158;
        }
        goto LABEL_157;
      }
      memset(&__dst, 0, sizeof(__dst));
      int v25 = *(char *)(v105 + 127);
      if (v25 >= 0) {
        size_t v26 = *(unsigned __int8 *)(v105 + 127);
      }
      else {
        size_t v26 = *(void *)(v105 + 112);
      }
      int v27 = *(char *)(v8 + 47);
      if (v27 >= 0) {
        size_t v28 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        size_t v28 = *(void *)(v8 + 32);
      }
      unint64_t v29 = v28 + v26;
      if (v28 + v26 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v29 <= 0x16) {
        break;
      }
      uint64_t v41 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v41 = v29 | 7;
      }
      uint64_t v42 = v41 + 1;
      uint64_t v30 = (std::string *)operator new(v41 + 1);
      __dst.__r_.__value_.__l.__size_ = v28 + v26;
      __dst.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      if (v26) {
        goto LABEL_70;
      }
LABEL_74:
      unint64_t v44 = (char *)v30 + v26;
      if (v28)
      {
        if (v27 >= 0) {
          std::string::size_type v45 = (const void *)(v8 + 24);
        }
        else {
          std::string::size_type v45 = *(const void **)(v8 + 24);
        }
        memmove(v44, v45, v28);
      }
      v44[v28] = 0;
      int v46 = *__error();
      BOOL v47 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v48 = a2 + 128;
        if (*(char *)(a2 + 151) < 0) {
          std::string::size_type v48 = *v108;
        }
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 312))(&__p, v8, v104);
        unint64_t v49 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        os_log_type_t v50 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          os_log_type_t v50 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v48;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a2 + 8;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        __int16 v119 = v49;
        __int16 v120 = 2080;
        __int16 v121 = v50;
        _os_log_impl(&dword_1BD672000, v47, OS_LOG_TYPE_DEFAULT, "[%s] subvert %p %s -> %s (renamed)", (uint8_t *)&buf, 0x2Au);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      *__error() = v46;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = &__dst;
      }
      else {
        std::string::size_type v51 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 200))(v8, v51);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      size_t v52 = v114;
      if (!v114)
      {
LABEL_158:
        std::string::size_type v77 = (void *)v7[1];
        if (!v77) {
          goto LABEL_162;
        }
        goto LABEL_159;
      }
LABEL_157:
      if (atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_158;
      }
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      std::string::size_type v77 = (void *)v7[1];
      if (!v77)
      {
        do
        {
LABEL_162:
          unint64_t v78 = (void *)v7[2];
          BOOL v79 = *v78 == (void)v7;
          uint64_t v7 = v78;
        }
        while (!v79);
        goto LABEL_12;
      }
      do
      {
LABEL_159:
        unint64_t v78 = v77;
        std::string::size_type v77 = (void *)*v77;
      }
      while (v77);
LABEL_12:
      uint64_t v7 = v78;
      if (v78 == v109) {
        goto LABEL_176;
      }
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v28 + v26;
    uint64_t v30 = &__dst;
    if (!v26) {
      goto LABEL_74;
    }
LABEL_70:
    if (v25 >= 0) {
      std::string::size_type v43 = v106;
    }
    else {
      std::string::size_type v43 = *v106;
    }
    memmove(v30, v43, v26);
    goto LABEL_74;
  }
LABEL_176:
  uint64_t v81 = *(void **)(v105 + 152);
  if (v81 != (void *)(v105 + 160))
  {
    do
    {
      unint64_t v84 = v81[5];
      if (v115[1])
      {
        unint64_t v85 = 0x9DDFEA08EB382D69 * (((8 * v84) + 8) ^ HIDWORD(v84));
        unint64_t v86 = 0x9DDFEA08EB382D69 * (HIDWORD(v84) ^ (v85 >> 47) ^ v85);
        unint64_t v87 = 0x9DDFEA08EB382D69 * (v86 ^ (v86 >> 47));
        uint8x8_t v88 = (uint8x8_t)vcnt_s8((int8x8_t)v115[1]);
        v88.i16[0] = vaddlv_u8(v88);
        if (v88.u32[0] > 1uLL)
        {
          unint64_t v89 = v87;
          if ((void *)v87 >= v115[1]) {
            unint64_t v89 = v87 % (unint64_t)v115[1];
          }
        }
        else
        {
          unint64_t v89 = v87 & ((unint64_t)v115[1] - 1);
        }
        uint64_t v90 = (void *)*((void *)v115[0] + v89);
        if (v90)
        {
          float v91 = (void *)*v90;
          if (v91)
          {
            if (v88.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v93 = v91[1];
                if (v93 == v87)
                {
                  if (v91[2] == v84) {
                    goto LABEL_201;
                  }
                }
                else if ((v93 & ((uint64_t)v115[1] - 1)) != v89)
                {
                  goto LABEL_200;
                }
                float v91 = (void *)*v91;
                if (!v91) {
                  goto LABEL_200;
                }
              }
            }
            do
            {
              unint64_t v92 = v91[1];
              if (v92 == v87)
              {
                if (v91[2] == v84) {
                  goto LABEL_201;
                }
              }
              else
              {
                if ((void *)v92 >= v115[1]) {
                  v92 %= (unint64_t)v115[1];
                }
                if (v92 != v89) {
                  break;
                }
              }
              float v91 = (void *)*v91;
            }
            while (v91);
          }
        }
      }
LABEL_200:
      (*(void (**)(unint64_t))(*(void *)v84 + 168))(v84);
LABEL_201:
      int v94 = (void *)v81[1];
      if (v94)
      {
        do
        {
          float v95 = v94;
          int v94 = (void *)*v94;
        }
        while (v94);
      }
      else
      {
        do
        {
          float v95 = (void *)v81[2];
          BOOL v79 = *v95 == (void)v81;
          uint64_t v81 = v95;
        }
        while (!v79);
      }
      uint64_t v81 = v95;
    }
    while (v95 != (void *)(v105 + 160));
  }
  uint64_t v82 = (IVFVectorIndex_s *)*(unsigned int *)(a2 + 8);
  int v83 = (std::string *)(a2 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = *(void *)(a2 + 120);
  }
  IVFVectorIndex_s::metaFilename(&__dst, a2 + 80, (const void **)&buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v96 = &__dst;
  }
  else {
    BOOL v96 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (*(char *)(v105 + 127) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v105 + 104), *(void *)(v105 + 112));
  }
  else {
    std::string buf = *(std::string *)(v105 + 104);
  }
  IVFVectorIndex_s::metaFilename(&__p, v105 + 80, (const void **)&buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v98 = &__p;
  }
  else {
    BOOL v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  IVFVectorIndex_s::rename(v82, (const char *)v96, (const char *)v98, v97);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_223;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_223;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_223:
  std::string::operator=(v83, (const std::string *)(v105 + 104));
  float v99 = v116[0];
  if (v116[0])
  {
    do
    {
      float v100 = (void *)*v99;
      operator delete(v99);
      float v99 = v100;
    }
    while (v100);
  }
  float v101 = v115[0];
  v115[0] = 0;
  if (v101) {
    operator delete(v101);
  }
  if (__THREAD_SLOT_KEY)
  {
    unint64_t v102 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v102) {
      goto LABEL_238;
    }
  }
  else
  {
    makeThreadId();
    unint64_t v102 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v102) {
      goto LABEL_238;
    }
  }
  if (v102 < 0x801)
  {
LABEL_230:
    if (v102 <= 0x800) {
      threadData[18 * v102 - 11] = v103;
    }
LABEL_232:
    IVFVectorIndex_s::~IVFVectorIndex_s(v110);
    JUMPOUT(0x1C1881000);
  }
LABEL_238:
  makeThreadId();
  unint64_t v102 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
  if (!v102) {
    goto LABEL_232;
  }
  goto LABEL_230;
}

void *IVFVectorIndex_s::getVectorIndex(void *result, uint64_t a2, unsigned int a3, uint64_t a4, int a5, int a6, unsigned int a7)
{
  int v9 = *(void **)(a2 + 152);
  uint64_t v7 = (void *)(a2 + 152);
  uint64_t v8 = v9;
  if (!v9) {
    goto LABEL_12;
  }
  unint64_t v10 = a7 | (2 * (((unint64_t)(a5 & 3) << 50) | ((unint64_t)(a6 & 3) << 48) | (a4 << 32) | a3));
  unsigned int v11 = v7;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= v10;
    if (v12 >= v10) {
      int v14 = v8;
    }
    else {
      int v14 = v8 + 1;
    }
    if (v13) {
      unsigned int v11 = v8;
    }
    uint64_t v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 != v7 && v10 >= v11[4])
  {
    uint64_t v15 = v11[5];
    if (*(_DWORD *)(v15 + 8) != a3
      || *(unsigned __int16 *)(v15 + 20) != a4
      || a6 > 2
      || *(_DWORD *)(v15 + 12) != vector_dimension_vec_sizes_12485[a5]
      || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(v15 + 16)
      || *(unsigned __int8 *)(v15 + 22) != a7)
    {
      unint64_t v17 = __si_assert_copy_extra_329();
      unint64_t v18 = v17;
      unint64_t v19 = "";
      if (v17) {
        unint64_t v19 = v17;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 4143, "it->second->isCompatible(propertyId, vecVersion, dim, form, purgeable)", v19);
      free(v18);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v16 = v11[6];
    int *result = v15;
    result[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    int *result = 0;
    result[1] = 0;
  }
  return result;
}

void IVFVectorIndex_s::rename(IVFVectorIndex_s *this, const char *a2, const char *a3, const char *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v6 = (atomic_uint *)fd_create_protected((int)this, a2, 0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    if (fd_rename((uint64_t)v6, a3))
    {
      int v8 = *__error();
      int v9 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315906;
        BOOL v13 = "rename";
        __int16 v14 = 1024;
        int v15 = 3972;
        __int16 v16 = 2080;
        unint64_t v17 = a2;
        __int16 v18 = 2080;
        unint64_t v19 = a3;
        _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: Failed to rename %s to %s", (uint8_t *)&v12, 0x26u);
      }
      *__error() = v8;
    }
    fd_release(v7);
  }
  else
  {
    int v10 = *__error();
    unsigned int v11 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315650;
      BOOL v13 = "rename";
      __int16 v14 = 1024;
      int v15 = 3979;
      __int16 v16 = 2080;
      unint64_t v17 = a2;
      _os_log_error_impl(&dword_1BD672000, v11, OS_LOG_TYPE_ERROR, "%s:%d: Failed to rename %s", (uint8_t *)&v12, 0x1Cu);
    }
    *__error() = v10;
  }
}

uint64_t vectorIndexInsertForMerge(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, int a11)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    int v27 = __si_assert_copy_extra_329();
    size_t v28 = v27;
    unint64_t v29 = "";
    if (v27) {
      unint64_t v29 = v27;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndex.cpp", 244, "vectorId > 0", v29);
LABEL_30:
    free(v28);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (a1[13])
  {
    int v20 = *__error();
    unint64_t v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v25 = a1 + 128;
      if ((char)a1[151] < 0) {
        int v25 = (void *)*v25;
      }
      size_t v26 = a1 + 104;
      if ((char)a1[127] < 0) {
        size_t v26 = (void *)*v26;
      }
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v42 = "insertForMerge";
      __int16 v43 = 1024;
      *(_DWORD *)unint64_t v44 = 4428;
      *(_WORD *)&v44[4] = 2080;
      *(void *)&v44[6] = v25;
      __int16 v45 = 2080;
      int v46 = v26;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: [%s] insertForMerge readonly %s", buf, 0x26u);
    }
    *__error() = v20;
    if (a1[13])
    {
      unint64_t v33 = __si_assert_copy_extra_329();
      size_t v28 = v33;
      uint64_t v34 = "";
      if (v33) {
        uint64_t v34 = v33;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 4429, "!fReadOnly", v34);
      goto LABEL_30;
    }
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  IVFVectorIndex_s::getOrCreateVectorIndex(&v39, (uint64_t)(a1 + 8), a2, a3, a7, a8, a4);
  if (dword_1E9FC90E4 >= 5)
  {
    int v36 = *__error();
    uint64_t v30 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v31 = a1 + 128;
      if ((char)a1[151] < 0) {
        unint64_t v31 = *(const char **)v31;
      }
      uint64_t v35 = v31;
      (*(void (**)(void **__return_ptr))(*(void *)v39 + 312))(__p);
      if (v38 >= 0) {
        unsigned int v32 = __p;
      }
      else {
        unsigned int v32 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v42 = v35;
      __int16 v43 = 2080;
      *(void *)unint64_t v44 = v32;
      *(_WORD *)&v44[8] = 1024;
      *(_DWORD *)&v44[10] = a11;
      _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "[%s] insertForMerge %s partID=%u", buf, 0x1Cu);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v36;
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float, int))(*(void *)v39 + 72))(v39, a2, a3, a5, a6, a7, a8, a10, a9, a11);
  uint8x8_t v23 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return v22;
}

unint64_t vectorIndexStartMerge(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (__THREAD_SLOT_KEY)
  {
    unint64_t v4 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v4) {
      goto LABEL_55;
    }
  }
  else
  {
    makeThreadId();
    unint64_t v4 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v4)
    {
LABEL_55:
      makeThreadId();
      unint64_t v4 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      int v5 = 0;
      if (!v4) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
  }
  if (v4 >= 0x801) {
    goto LABEL_55;
  }
  int v5 = 0;
LABEL_5:
  if (v4 <= 0x800)
  {
    int v6 = &threadData[18 * v4];
    int v5 = *(v6 - 11);
    *(v6 - 11) = 1;
  }
LABEL_7:
  int v7 = *__error();
  int v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = (const char *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0) {
      int v9 = *(const char **)v9;
    }
    IVFVectorIndex_s::name((std::string *)__p, a1 + 8);
    if ((SBYTE7(v44) & 0x80u) == 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v34 = v9;
    __int16 v35 = 2080;
    *(void *)int v36 = v10;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "[%s] startMerge %s", buf, 0x16u);
    if (SBYTE7(v44) < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  uint64_t v11 = *(void *)(a1 + 208);
  if (v11 && *(_DWORD *)(v11 + 216) == -270471200)
  {
    if (*(void *)(v11 + 296))
    {
      uint64_t v30 = __si_assert_copy_extra_329();
      unint64_t v31 = v30;
      unsigned int v32 = "";
      if (v30) {
        unsigned int v32 = v30;
      }
      __message_assert(v30, "data_map_ext_storage.c", 2433, "data_map->offsets_clone.offsets_fd == 0", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    _data_map_ext_rdlock(*(void *)(a1 + 208));
    if (*(void *)(v11 + 376) < 2uLL)
    {
      int v15 = *(_DWORD *)(v11 + 488);
    }
    else
    {
      sibling_protected = *(void **)(v11 + 272);
      *(void *)(v11 + 304) = *(void *)(v11 + 280);
      if (sibling_protected)
      {
        if (*(unsigned char *)(v11 + 460)) {
          unsigned __int8 v13 = 3;
        }
        else {
          unsigned __int8 v13 = 0;
        }
        __p[0] = 0;
        asprintf((char **)__p, "%s%s", "tmp.clone.", (const char *)sibling_protected[9]);
        sibling_protected = fd_create_sibling_protected((uint64_t)sibling_protected, (const char *)__p[0], 1538, v13);
        free(__p[0]);
        uint64_t v14 = *(void *)(v11 + 272);
      }
      else
      {
        uint64_t v14 = 0;
      }
      *(void *)(v11 + 296) = sibling_protected;
      fd_copyfile(v14, (uint64_t)sibling_protected, 1);
      *(void *)(v11 + 312) = fd_mmap(*(void *)(v11 + 296));
      int v15 = *(_DWORD *)(v11 + 488) + 1;
      *(_DWORD *)(v11 + 488) = v15;
      if (a2 && *(void *)(v11 + 376) >= 2uLL)
      {
        unint64_t v16 = 1;
        do
        {
          uint64_t v17 = *(void *)(v11 + 312);
          if ((unint64_t)(v17 + 1) < 2
            || v16 >= *(void *)(v11 + 320) / 0x18uLL
            || v16 >= *(void *)(v11 + 304) / 0x18uLL)
          {
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            *(_OWORD *)std::string __p = 0u;
            long long v44 = 0u;
            int v18 = *__error();
            unint64_t v19 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v27 = *(void *)(v11 + 376);
              size_t v28 = fd_name(*(void *)(v11 + 240), (char *)__p, 0x100uLL);
              *(_DWORD *)std::string buf = 136316418;
              uint64_t v34 = "_data_map_ext_get_clone_offset_entry";
              __int16 v35 = 1024;
              *(_DWORD *)int v36 = 431;
              *(_WORD *)&_OWORD v36[4] = 2048;
              *(void *)&v36[6] = v16;
              __int16 v37 = 2048;
              uint64_t v38 = v27;
              __int16 v39 = 2048;
              uint64_t v40 = v11;
              __int16 v41 = 2080;
              uint64_t v42 = v28;
              _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p %s", buf, 0x3Au);
            }
            *__error() = v18;
          }
          else if (!*(unsigned char *)(a2 + 176))
          {
            uint64_t v20 = v17 + 24 * v16;
            unsigned int v23 = *(_DWORD *)(v20 + 8);
            uint64_t v22 = (_DWORD *)(v20 + 8);
            unsigned int v21 = v23;
            int v24 = *(_DWORD *)(a2 + 20);
            if (!v24 || !((*(_DWORD *)(a2 + 16) ^ v21) >> (-4 * v24)))
            {
              uint64_t v25 = *(void *)(a2 + 48 + 8 * ((v21 >> (28 - 4 * v24)) & 0xF));
              if (v25)
              {
                int v26 = v24 + 2;
                do
                  uint64_t v25 = *(void *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v21 >> (32 - 4 * v26++)) & 0xF));
                while ((v25 & 1) != 0);
              }
              if (v25 && (*(unsigned int (**)(uint64_t))(*(void *)v25 + 16))(v25)) {
                *uint64_t v22 = 0;
              }
            }
          }
          ++v16;
        }
        while (v16 < *(void *)(v11 + 376));
      }
    }
    _data_map_ext_unlock(v11);
  }
  else
  {
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 200) = v15;
  *(_DWORD *)(a1 + 176) = v15;
  if (__THREAD_SLOT_KEY)
  {
    unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!result) {
      goto LABEL_58;
    }
  }
  else
  {
    makeThreadId();
    unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!result)
    {
LABEL_58:
      makeThreadId();
      unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      if (!result) {
        return result;
      }
      goto LABEL_51;
    }
  }
  if (result >= 0x801) {
    goto LABEL_58;
  }
LABEL_51:
  if (result <= 0x800) {
    threadData[18 * result - 11] = v5;
  }
  return result;
}

unint64_t vectorIndexEndMerge(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (__THREAD_SLOT_KEY)
  {
    unint64_t v2 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v2) {
      goto LABEL_46;
    }
  }
  else
  {
    makeThreadId();
    unint64_t v2 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v2)
    {
LABEL_46:
      makeThreadId();
      unint64_t v2 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      int v3 = 0;
      if (!v2) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
  }
  if (v2 >= 0x801) {
    goto LABEL_46;
  }
  int v3 = 0;
LABEL_5:
  if (v2 <= 0x800)
  {
    unint64_t v4 = &threadData[18 * v2];
    int v3 = *(v4 - 11);
    *(v4 - 11) = 1;
  }
LABEL_7:
  int v5 = *__error();
  int v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = (void *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0) {
      int v7 = (void *)*v7;
    }
    IVFVectorIndex_s::name(__p, a1 + 8);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v8 = __p;
    }
    else {
      int v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v32 = 2080;
    *(void *)unint64_t v33 = v8;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "[%s] endMerge %s", buf, 0x16u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  *__error() = v5;
  uint64_t v9 = *(void *)(a1 + 208);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 216) != -270471200)
    {
LABEL_27:
      *(_DWORD *)(a1 + 200) = 0;
      goto LABEL_28;
    }
    _data_map_ext_wrlock(*(void *)(a1 + 208));
    uint64_t v10 = *(void *)(v9 + 296);
    if (!v10)
    {
LABEL_26:
      _data_map_ext_unlock(v9);
      goto LABEL_27;
    }
    uint64_t v11 = *(void *)(v9 + 272);
    uint64_t v30 = 0;
    int v12 = _fd_acquire_fd(v10, &v30);
    if (v12 != -1)
    {
      int v13 = v12;
      bzero(__p, 0x400uLL);
      uint64_t v14 = fd_name(v11, (char *)__p, 0x400uLL);
      bzero(buf, 0x400uLL);
      int v15 = fd_name(v10, buf, 0x400uLL);
      if (renameat(*(_DWORD *)(v10 + 44), v15, *(_DWORD *)(v11 + 44), v14) != -1)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
        uint64_t v16 = *(void *)(v11 + 72);
        *(void *)(v11 + 72) = *(void *)(v10 + 72);
        *(void *)(v10 + 72) = v16;
        os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
        _fd_release_fd((_DWORD *)v10, v13, 0, v30);
        fd_release((atomic_uint *)v11);
        pthread_mutex_lock(&g_fd_lock);
        uint64_t v17 = *(atomic_uint **)(v10 + 80);
        if (v17)
        {
          *(void *)(v10 + 80) = 0;
          pthread_mutex_unlock(&g_fd_lock);
          fd_release(v17);
        }
        else
        {
          pthread_mutex_unlock(&g_fd_lock);
        }
LABEL_25:
        munmap(*(void **)(v9 + 288), *(void *)(v9 + 280));
        *(_OWORD *)(v9 + 272) = *(_OWORD *)(v9 + 296);
        *(void *)(v9 + 288) = *(void *)(v9 + 312);
        *(void *)(v9 + 304) = 0;
        *(void *)(v9 + 312) = -1;
        *(void *)(v9 + 296) = 0;
        goto LABEL_26;
      }
      _fd_release_fd((_DWORD *)v10, v13, 0, v30);
      fd_release((atomic_uint *)v11);
    }
    bzero(__p, 0x400uLL);
    int v18 = *__error();
    int v19 = *__error();
    uint64_t v20 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(void *)std::string buf = 0;
      int v22 = _fd_acquire_fd(v10, buf);
      unsigned int v23 = 0;
      if (v22 != -1)
      {
        int v29 = v22;
        int v24 = fcntl(v22, 50, __p);
        if (__p[0].__r_.__value_.__s.__data_[0]) {
          BOOL v25 = v24 < 0;
        }
        else {
          BOOL v25 = 1;
        }
        int v26 = __p;
        if (v25) {
          int v26 = 0;
        }
        size_t v28 = v26;
        _fd_release_fd((_DWORD *)v10, v29, 0, *(uint64_t *)buf);
        unsigned int v23 = (const char *)v28;
      }
      uint64_t v27 = "";
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "fd_rename_over_and_release";
      __int16 v32 = 1024;
      if (v23) {
        uint64_t v27 = v23;
      }
      *(_DWORD *)unint64_t v33 = 1192;
      *(_WORD *)&v33[4] = 2080;
      *(void *)&v33[6] = v27;
      __int16 v34 = 1024;
      int v35 = v18;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: rename_over(%s) err:%d", buf, 0x22u);
    }
    *__error() = v19;
    *__error() = v18;
    goto LABEL_25;
  }
LABEL_28:
  *(_DWORD *)(a1 + 176) = 0;
  if (__THREAD_SLOT_KEY)
  {
    unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!result) {
      goto LABEL_49;
    }
  }
  else
  {
    makeThreadId();
    unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!result)
    {
LABEL_49:
      makeThreadId();
      unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      if (!result) {
        return result;
      }
      goto LABEL_31;
    }
  }
  if (result >= 0x801) {
    goto LABEL_49;
  }
LABEL_31:
  if (result <= 0x800) {
    threadData[18 * result - 11] = v3;
  }
  return result;
}

unint64_t vectorIndexCancelMerge(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (__THREAD_SLOT_KEY)
  {
    unint64_t v2 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v2) {
      goto LABEL_28;
    }
  }
  else
  {
    makeThreadId();
    unint64_t v2 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v2)
    {
LABEL_28:
      makeThreadId();
      unint64_t v2 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      int v3 = 0;
      if (!v2) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
  }
  if (v2 >= 0x801) {
    goto LABEL_28;
  }
  int v3 = 0;
LABEL_5:
  if (v2 <= 0x800)
  {
    unint64_t v4 = &threadData[18 * v2];
    int v3 = *(v4 - 11);
    *(v4 - 11) = 1;
  }
LABEL_7:
  int v5 = *__error();
  int v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = (void *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0) {
      int v7 = (void *)*v7;
    }
    IVFVectorIndex_s::name(&__p, a1 + 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    int v13 = v7;
    __int16 v14 = 2080;
    int v15 = p_p;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "[%s] cancelMerge %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  *__error() = v5;
  uint64_t v9 = *(void *)(a1 + 208);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 216) == -270471200)
    {
      _data_map_ext_wrlock(*(void *)(a1 + 208));
      if (*(void *)(v9 + 296))
      {
        munmap(*(void **)(v9 + 312), *(void *)(v9 + 304));
        _fd_unlink_with_origin(*(void *)(v9 + 296), 0);
        fd_release(*(atomic_uint **)(v9 + 296));
        *(void *)(v9 + 296) = 0;
        *(void *)(v9 + 304) = 0;
        *(void *)(v9 + 312) = -1;
      }
      _data_map_ext_unlock(v9);
    }
    *(_DWORD *)(a1 + 200) = 0;
  }
  *(_DWORD *)(a1 + 176) = 0;
  if (__THREAD_SLOT_KEY)
  {
    unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!result) {
      goto LABEL_31;
    }
  }
  else
  {
    makeThreadId();
    unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!result)
    {
LABEL_31:
      makeThreadId();
      unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      if (!result) {
        return result;
      }
      goto LABEL_24;
    }
  }
  if (result >= 0x801) {
    goto LABEL_31;
  }
LABEL_24:
  if (result <= 0x800) {
    threadData[18 * result - 11] = v3;
  }
  return result;
}

void *IVFVectorIndexUpdateSet::getOrCreateVectorIndex(void *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7)
{
  unint64_t v11 = a7 | (2
            * (((unint64_t)(a5 & 3) << 50) | ((unint64_t)(a6 & 3) << 48) | (a4 << 32) | a3));
  int v12 = *(void **)(a2 + 8);
  if (!v12) {
    goto LABEL_12;
  }
  int v13 = (void *)(a2 + 8);
  do
  {
    unint64_t v14 = v12[4];
    BOOL v15 = v14 >= v11;
    if (v14 >= v11) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = v12 + 1;
    }
    if (v15) {
      int v13 = v12;
    }
    int v12 = (void *)*v16;
  }
  while (*v16);
  if (v13 == (void *)(a2 + 8) || v11 < v13[4])
  {
LABEL_12:
    malloc_default_zone();
    IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::createVectorIndexInstance(a3, a4, a5, a6);
  }
  uint64_t v17 = v13[5];
  if (*(_DWORD *)(v17 + 8) != a3
    || *(unsigned __int16 *)(v17 + 20) != a4
    || a6 > 2
    || *(_DWORD *)(v17 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(v17 + 16)
    || *(unsigned __int8 *)(v17 + 22) != a7)
  {
    int v19 = __si_assert_copy_extra_329();
    uint64_t v20 = v19;
    unsigned int v21 = "";
    if (v19) {
      unsigned int v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3758, "it->second->isCompatible(propertyId, vecVersion, dim, form, purgeable)", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v18 = v13[6];
  int *result = v17;
  result[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::createVectorIndexInstance(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a4)
  {
    if (a4 == 1)
    {
      switch(a3)
      {
        case 2:
          operator new();
        case 1:
          operator new();
        case 0:
          operator new();
      }
    }
  }
  else
  {
    switch(a3)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  unint64_t v4 = __si_assert_copy_extra_329();
  int v5 = v4;
  int v6 = "";
  if (v4) {
    int v6 = v4;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3692, "false", v6);
  free(v5);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)v2, *(void **)(v2 + 8));
    JUMPOUT(0x1C1881000);
  }
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1815A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1815A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::replaceQuantizer(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v6 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  int v7 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v10 = *(char **)(a1 + 64);
  int v8 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v9 = (long long *)(a1 + 64);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *(_DWORD **)(a1 + 80);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  unint64_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    int v29 = __si_assert_copy_extra_329();
    uint64_t v30 = v29;
    unint64_t v31 = "";
    if (v29) {
      unint64_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 24) != v14[18])
  {
    __int16 v32 = __si_assert_copy_extra_329();
    uint64_t v30 = v32;
    unint64_t v33 = "";
    if (v32) {
      unint64_t v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    BOOL v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = v10 + 8;
      if (v10[31] < 0) {
        uint64_t v16 = (void *)*v16;
      }
      int v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      uint64_t v18 = (void *)(*a2 + 8);
      __int16 v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      __int16 v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      int v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        int v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      unsigned int v21 = __p;
      if (v45 < 0) {
        unsigned int v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      long long v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      long long v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      long long v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      unint64_t v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      int v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    unint64_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  int v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  __int16 v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  uint64_t v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  size_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::newPartitions(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  int v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    int v6 = ".tmp.partitions";
  }
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v13 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v13) = v7;
    uint64_t v9 = __dst;
    if (!v7)
    {
LABEL_16:
      *((unsigned char *)v8 + (void)v9) = 0;
      malloc_default_zone();
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v9, v6, (size_t)v8);
  goto LABEL_16;
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionStore<vi_onefixedsize_memory_allocator>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = AnyPartitionStore::AnyPartitionStore(a1, a4);
  *(void *)uint64_t v6 = &unk_1F1814178;
  *(void *)(v6 + 80) = 0;
  *(_DWORD *)(v6 + 88) = -1;
  *(void *)(v6 + 104) = 0;
  *(void *)(v6 + 112) = 0;
  *(void *)(v6 + 96) = 0;
  std::to_string(&v11, *(_DWORD *)(v6 + 76));
  size_t v7 = std::string::insert(&v11, 0, "<memory>(");
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = std::string::append(&v12, ")");
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(void *)(a1 + 136) = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
LABEL_3:
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  (*(void (**)(void))(*(void *)*a4 + 24))();
  operator new();
}

uint64_t std::__shared_ptr_pointer<PartitionStore<vi_onefixedsize_memory_allocator,512> *,std::shared_ptr<AnyPartitionStore>::__shared_ptr_default_delete<AnyPartitionStore,PartitionStore<vi_onefixedsize_memory_allocator,512>>,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void std::__shared_ptr_pointer<PartitionStore<vi_onefixedsize_memory_allocator,512> *,std::shared_ptr<AnyPartitionStore>::__shared_ptr_default_delete<AnyPartitionStore,PartitionStore<vi_onefixedsize_memory_allocator,512>>,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::storageSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 80) + 24);
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::unlink()
{
  return 1;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::subvert(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) & 1) == 0)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    uint64_t v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1624, "old->isPersistent()", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::shadow()
{
  return 0;
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 120), *(void *)(a1 + 128));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 120);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 136);
  }
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::validAddress()
{
  return 1;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::makeReadOnly(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::flush(uint64_t result)
{
  *(void *)(*(void *)(result + 80) + 40) = 0;
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::dump(void *a1, void *a2, int a3)
{
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Quantizer ", 10);
  uint64_t v6 = a1[1];
  if (!v6)
  {
    unint64_t v85 = __si_assert_copy_extra_329();
    unint64_t v86 = v85;
    unint64_t v87 = "";
    if (v85) {
      unint64_t v87 = v85;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 891, "_quantizer != nullptr", v87);
    free(v86);
    if (__valid_fs(-1)) {
      uint64_t v88 = 2989;
    }
    else {
      uint64_t v88 = 3072;
    }
    *(_DWORD *)uint64_t v88 = -559038737;
LABEL_121:
    abort();
  }
  uint64_t v9 = *(void *)(v6 + 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = v9;
  int v10 = *(char *)(v7 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v7 + 8);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" , ", 3);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors in ", 12);
  BOOL v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions:", 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  int v17 = std::locale::use_facet(v91, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(v91);
  std::ostream::put();
  uint64_t result = std::ostream::flush();
  if (a3 >= 3)
  {
    if (*((_DWORD *)a1 + 17))
    {
      if (a3 > 3)
      {
        uint64_t v19 = 0;
        int v20 = (std::locale::id *)MEMORY[0x1E4FBA258];
        unint64_t v89 = a1;
        while (1)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"partition ", 10);
          int v22 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)" (", 2);
          (*(void (**)(void *, uint64_t))(*a1 + 48))(a1, v19);
          int v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")\t<=", 4);
          (*(void (**)(void *, uint64_t))(*a1 + 32))(a1, v19);
          BOOL v24 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
          uint64_t v25 = std::locale::use_facet(v91, v20);
          ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
          std::locale::~locale(v91);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v90 = v19;
          uint64_t v26 = a1[18] + 16 * v19;
          long long v92 = 0u;
          long long v93 = 0u;
          *(_OWORD *)&v91[0].__locale_ = 0u;
          PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)v91, *(void *)v26, *(_DWORD *)(*(void *)(*(void *)v26 + 96) + 4 * *(unsigned int *)(v26 + 8)));
          v91[0].__locale_ = (std::locale::__imp *)&unk_1F1814328;
          PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next((uint64_t)v91);
          uint64_t v27 = v20;
          if (*((void *)&v93 + 1)) {
            break;
          }
LABEL_12:
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
          unsigned int v21 = std::locale::use_facet(v91, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
          std::locale::~locale(v91);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v19 = v90 + 1;
          int v20 = v27;
          a1 = v89;
          if (v90 + 1 >= (unint64_t)*((unsigned int *)v89 + 17)) {
            goto LABEL_113;
          }
        }
        while (1)
        {
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          MEMORY[0x1C1880D40](&v94, a2);
          if ((_BYTE)v94)
          {
            int v29 = (char *)a2 + *(void *)(*a2 - 24);
            uint64_t v30 = *((void *)v29 + 5);
            if ((*((_DWORD *)v29 + 2) & 0xB0) == 0x20) {
              unint64_t v31 = "";
            }
            else {
              unint64_t v31 = "  ";
            }
            int v32 = *((_DWORD *)v29 + 36);
            if (v32 == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
              unint64_t v33 = std::locale::use_facet(&__b, v27);
              int v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 32);
              std::locale::~locale(&__b);
              *((_DWORD *)v29 + 36) = v32;
              if (!v30) {
                goto LABEL_48;
              }
            }
            else if (!v30)
            {
              goto LABEL_48;
            }
            uint64_t v34 = *((void *)v29 + 3);
            BOOL v35 = v34 <= 2;
            size_t v36 = v34 - 2;
            if (v35) {
              size_t v37 = 0;
            }
            else {
              size_t v37 = v36;
            }
            if (v31 - "  " >= 1
              && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v30 + 96))(v30, "  ", v31 - "  ") != v31 - "  ")
            {
              goto LABEL_48;
            }
            if ((uint64_t)v37 >= 1)
            {
              __b.__locale_ = 0;
              size_t v97 = 0;
              int64_t v98 = 0;
              if (v37 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_121;
              }
              if (v37 >= 0x17)
              {
                uint64_t v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v37 | 7) != 0x17) {
                  uint64_t v39 = v37 | 7;
                }
                uint64_t v40 = v39 + 1;
                p_b = (std::locale::__imp *)operator new(v39 + 1);
                unint64_t v41 = v40 | 0x8000000000000000;
                uint64_t v27 = (std::locale::id *)MEMORY[0x1E4FBA258];
                size_t v97 = v37;
                int64_t v98 = v41;
                __b.__locale_ = p_b;
              }
              else
              {
                HIBYTE(v98) = v37;
                p_b = (std::locale::__imp *)&__b;
              }
              memset(p_b, v32, v37);
              *((unsigned char *)p_b + v37) = 0;
              if (v98 >= 0) {
                locale = &__b;
              }
              else {
                locale = __b.__locale_;
              }
              uint64_t v43 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v30 + 96))(v30, locale, v37);
              uint64_t v44 = v43;
              if (SHIBYTE(v98) < 0)
              {
                operator delete(__b.__locale_);
                if (v44 != v37) {
                  goto LABEL_48;
                }
              }
              else if (v43 != v37)
              {
                goto LABEL_48;
              }
            }
            uint64_t v45 = "  " - v31 + 2;
            if (v45 >= 1
              && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v30 + 96))(v30, v31, "  " - v31 + 2) != v45)
            {
LABEL_48:
              std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 5);
              goto LABEL_49;
            }
            *((void *)v29 + 3) = 0;
          }
LABEL_49:
          MEMORY[0x1C1880D50](&v94);
          long long v46 = (void *)std::ostream::operator<<();
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          MEMORY[0x1C1880D40](&v94, v46);
          if (!(_BYTE)v94) {
            goto LABEL_81;
          }
          char v47 = (char *)v46 + *(void *)(*v46 - 24);
          uint64_t v48 = *((void *)v47 + 5);
          if ((*((_DWORD *)v47 + 2) & 0xB0) == 0x20) {
            long long v49 = "";
          }
          else {
            long long v49 = "(";
          }
          int v50 = *((_DWORD *)v47 + 36);
          if (v50 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
            int v51 = std::locale::use_facet(&__b, v27);
            int v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 32);
            std::locale::~locale(&__b);
            *((_DWORD *)v47 + 36) = v50;
            if (!v48) {
              goto LABEL_79;
            }
          }
          else if (!v48)
          {
            goto LABEL_79;
          }
          uint64_t v52 = *((void *)v47 + 3);
          BOOL v35 = v52 <= 1;
          size_t v53 = v52 - 1;
          if (v35) {
            size_t v54 = 0;
          }
          else {
            size_t v54 = v53;
          }
          if (v49 - "(" >= 1
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v48 + 96))(v48, "(", v49 - "(") != v49 - "(")
          {
            goto LABEL_79;
          }
          if ((uint64_t)v54 >= 1)
          {
            __b.__locale_ = 0;
            size_t v97 = 0;
            int64_t v98 = 0;
            if (v54 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_121;
            }
            if (v54 >= 0x17)
            {
              uint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v54 | 7) != 0x17) {
                uint64_t v56 = v54 | 7;
              }
              uint64_t v57 = v56 + 1;
              int v55 = (std::locale::__imp *)operator new(v56 + 1);
              size_t v97 = v54;
              int64_t v98 = v57 | 0x8000000000000000;
              __b.__locale_ = v55;
            }
            else
            {
              HIBYTE(v98) = v54;
              int v55 = (std::locale::__imp *)&__b;
            }
            memset(v55, v50, v54);
            *((unsigned char *)v55 + v54) = 0;
            if (v98 >= 0) {
              __int16 v58 = &__b;
            }
            else {
              __int16 v58 = __b.__locale_;
            }
            uint64_t v59 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v48 + 96))(v48, v58, v54);
            uint64_t v60 = v59;
            if (SHIBYTE(v98) < 0)
            {
              operator delete(__b.__locale_);
              if (v60 != v54) {
                goto LABEL_79;
              }
            }
            else if (v59 != v54)
            {
              goto LABEL_79;
            }
          }
          uint64_t v61 = "(" - v49 + 1;
          if (v61 >= 1
            && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v48 + 96))(v48, v49, "(" - v49 + 1) != v61)
          {
LABEL_79:
            std::ios_base::clear((std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)), *(_DWORD *)((char *)v46 + *(void *)(*v46 - 24) + 32) | 5);
            goto LABEL_80;
          }
          *((void *)v47 + 3) = 0;
LABEL_80:
          uint64_t v27 = (std::locale::id *)MEMORY[0x1E4FBA258];
LABEL_81:
          MEMORY[0x1C1880D50](&v94);
          __int16 v62 = (void *)std::ostream::operator<<();
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          MEMORY[0x1C1880D40](&v94, v62);
          if (!(_BYTE)v94) {
            goto LABEL_17;
          }
          unint64_t v63 = (char *)v62 + *(void *)(*v62 - 24);
          uint64_t v64 = *((void *)v63 + 5);
          if ((*((_DWORD *)v63 + 2) & 0xB0) == 0x20) {
            int v65 = "";
          }
          else {
            int v65 = ")";
          }
          int v66 = *((_DWORD *)v63 + 36);
          if (v66 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
            int v67 = std::locale::use_facet(&__b, v27);
            int v66 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 32);
            std::locale::~locale(&__b);
            *((_DWORD *)v63 + 36) = v66;
            if (!v64) {
              goto LABEL_15;
            }
          }
          else if (!v64)
          {
            goto LABEL_15;
          }
          uint64_t v68 = *((void *)v63 + 3);
          BOOL v35 = v68 <= 1;
          size_t v69 = v68 - 1;
          if (v35) {
            size_t v70 = 0;
          }
          else {
            size_t v70 = v69;
          }
          if (v65 - ")" >= 1 {
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v64 + 96))(v64, ")", v65 - ")") != v65 - ")")
          }
          {
            goto LABEL_15;
          }
          if ((uint64_t)v70 >= 1)
          {
            __b.__locale_ = 0;
            size_t v97 = 0;
            int64_t v98 = 0;
            if (v70 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_121;
            }
            if (v70 >= 0x17)
            {
              uint64_t v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v70 | 7) != 0x17) {
                uint64_t v72 = v70 | 7;
              }
              uint64_t v73 = v72 + 1;
              unint64_t v71 = (std::locale::__imp *)operator new(v72 + 1);
              size_t v97 = v70;
              int64_t v98 = v73 | 0x8000000000000000;
              __b.__locale_ = v71;
            }
            else
            {
              HIBYTE(v98) = v70;
              unint64_t v71 = (std::locale::__imp *)&__b;
            }
            memset(v71, v66, v70);
            *((unsigned char *)v71 + v70) = 0;
            if (v98 >= 0) {
              std::string::size_type v74 = &__b;
            }
            else {
              std::string::size_type v74 = __b.__locale_;
            }
            uint64_t v75 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v64 + 96))(v64, v74, v70);
            uint64_t v76 = v75;
            if (SHIBYTE(v98) < 0)
            {
              operator delete(__b.__locale_);
              if (v76 != v70) {
                goto LABEL_15;
              }
            }
            else if (v75 != v70)
            {
              goto LABEL_15;
            }
          }
          uint64_t v77 = ")" - v65 + 1;
          if (v77 < 1
            || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v64 + 96))(v64, v65, ")" - v65 + 1) == v77)
          {
            *((void *)v63 + 3) = 0;
            goto LABEL_16;
          }
LABEL_15:
          std::ios_base::clear((std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)), *(_DWORD *)((char *)v62 + *(void *)(*v62 - 24) + 32) | 5);
LABEL_16:
          uint64_t v27 = (std::locale::id *)MEMORY[0x1E4FBA258];
LABEL_17:
          MEMORY[0x1C1880D50](&v94);
          std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
          size_t v28 = std::locale::use_facet(&__b, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
          std::locale::~locale(&__b);
          std::ostream::put();
          std::ostream::flush();
          (*((void (**)(std::locale *))v91[0].__locale_ + 3))(v91);
          if (!*((void *)&v93 + 1)) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v78 = 0;
      BOOL v79 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"partition ", 10);
        unint64_t v80 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)" (", 2);
        (*(void (**)(void *, uint64_t))(*a1 + 48))(a1, v78);
        uint64_t v81 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)")\t<=", 4);
        (*(void (**)(void *, uint64_t))(*a1 + 32))(a1, v78);
        uint64_t v82 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
        int v83 = std::locale::use_facet(v91, v79);
        ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
        std::locale::~locale(v91);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v78 = (v78 + 1);
      }
      while (v78 < *((_DWORD *)a1 + 17));
    }
LABEL_113:
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    unint64_t v84 = std::locale::use_facet(v91, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
    std::locale::~locale(v91);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &unk_1F1814358;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 20) = 0x100000001;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = (unint64_t *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  if (!a2)
  {
    uint64_t v8 = __si_assert_copy_extra_329();
    uint64_t v9 = v8;
    int v10 = "";
    if (v8) {
      int v10 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1420, "store != nullptr", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unint64_t v5 = PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a2 + 80), a3);
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v5 + 4);
  if (v6 > *(_DWORD *)(a1 + 24)) {
    unint64_t *v3 = v5;
  }
  return a1;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (uint64_t v3 = *(unsigned int **)(a1 + 32)) == 0 || (v4 = *(_DWORD *)(a1 + 24), v4 >= v3[2]))
  {
    uint64_t result = 0;
    goto LABEL_7;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  if (v5 <= 0x1FF)
  {
    *(_DWORD *)(a1 + 20) = v5 + 1;
    *(_DWORD *)(a1 + 24) = v4 + 1;
    uint64_t result = (uint64_t)&v3[2 * v5 + 3];
LABEL_7:
    *(void *)(a1 + 40) = result;
    return result;
  }
  if (*v3)
  {
    unint64_t v7 = PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(v2 + 80), *v3);
    if (*(_DWORD *)(v7 + 8)) {
      goto LABEL_13;
    }
    int v8 = *__error();
    uint64_t v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = *(int **)(a1 + 32);
      int v11 = *v10;
      int v12 = *(_DWORD *)(a1 + 16);
      int v13 = *(_DWORD *)(a1 + 20);
      int v14 = *(_DWORD *)(a1 + 24);
      LODWORD(v10) = v10[2];
      int v15 = *(_DWORD *)(v7 + 12);
      double v16 = *(float *)(v7 + 16);
      *(_DWORD *)std::string buf = 136317186;
      int v23 = "next";
      __int16 v24 = 1024;
      int v25 = 1445;
      __int16 v26 = 1024;
      int v27 = v11;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 1024;
      int v31 = v13;
      __int16 v32 = 1024;
      int v33 = v14;
      __int16 v34 = 1024;
      int v35 = (int)v10;
      __int16 v36 = 1024;
      int v37 = v15;
      __int16 v38 = 2048;
      double v39 = v16;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: blockAt(%u).count=0 centOffset=%u currentOffset=%u visited=%u count=%u vec[0]=%u(%f)", buf, 0x40u);
    }
    *__error() = v8;
    if (*(_DWORD *)(v7 + 8))
    {
LABEL_13:
      if (*(_DWORD *)(v7 + 4) == *(_DWORD *)(a1 + 16))
      {
        *(void *)(a1 + 32) = v7;
        uint64_t result = v7 + 12;
        *(void *)(a1 + 20) = 0x100000001;
        goto LABEL_7;
      }
      int v20 = __si_assert_copy_extra_329();
      uint64_t v18 = v20;
      unsigned int v21 = "";
      if (v20) {
        unsigned int v21 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1448, "block->centOffset == centOffset", v21);
    }
    else
    {
      int v17 = __si_assert_copy_extra_329();
      uint64_t v18 = v17;
      uint64_t v19 = "";
      if (v17) {
        uint64_t v19 = v17;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1447, "block->count > 0", v19);
    }
    free(v18);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 0;
}

unint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(void *a1, unsigned int a2)
{
  unint64_t result = vi_onefixedsize_memory_allocator::getPtr(a1, a2, 4108);
  if (!result)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    unsigned int v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1316, "block != 0", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

{
  unint64_t result;
  char *v3;
  char *v4;
  const char *v5;

  unint64_t result = vi_onefixedsize_memory_allocator::getPtr(a1, a2, 4108);
  if (!result)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    unsigned int v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1322, "block != 0", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::centroidOffset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionIterator::~PartitionIterator()
{
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::~PartitionEnumerator()
{
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::enumerator@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int v5 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * a2);
  unsigned int v6 = operator new(0x48uLL);
  v6[1] = 0;
  v6[2] = 0;
  *unsigned int v6 = &unk_1F1814388;
  uint64_t result = PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)(v6 + 3), a1, v5);
  *a3 = result;
  a3[1] = (uint64_t)v6;
  return result;
}

uint64_t std::__shared_ptr_emplace<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1814388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void std::__shared_ptr_emplace<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1814388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::vectorOffsetsInPartition@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 144) + 16 * a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  memset(v7, 0, sizeof(v7));
  long long v8 = 0u;
  PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)v7, *(void *)v4, *(_DWORD *)(*(void *)(*(void *)v4 + 96) + 4 * *(unsigned int *)(v4 + 8)));
  *(void *)&v7[0] = &unk_1F1814328;
  uint64_t result = PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next((uint64_t)v7);
  uint64_t v9 = a3;
  for (unint64_t i = (int *)*((void *)&v8 + 1); *((void *)&v8 + 1); unint64_t i = (int *)*((void *)&v8 + 1))
  {
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v9, *i);
    uint64_t result = (*(uint64_t (**)(_OWORD *))(*(void *)&v7[0] + 24))(v7);
  }
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartition(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t v7 = a1[18] + 16 * a2;
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)v9, *(void *)v7, *(_DWORD *)(*(void *)(*(void *)v7 + 96) + 4 * *(unsigned int *)(v7 + 8)));
  *(void *)&v9[0] = &unk_1F1814328;
  for (uint64_t result = PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next((uint64_t)v9);
        *((void *)&v10 + 1);
        uint64_t result = (*(uint64_t (**)(_OWORD *))(*(void *)&v9[0] + 24))(v9))
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v6);
  }
  return result;
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartitions(void *a1, unsigned int **a2, uint64_t a3, __n128 a4)
{
  uint64_t v4 = *a2;
  if (*a2 == a2[1])
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    int v83 = 0;
    do
    {
      uint64_t v11 = *v4;
      if ((*(unsigned int (**)(void *, uint64_t))(*a1 + 48))(a1, v11))
      {
        int v12 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v11);
        uint64_t v13 = a1[18] + 16 * v11;
        uint64_t v90 = 0;
        memset(&v89[3], 0, 48);
        memset(&v89[1], 0, 32);
        v89[0] = 0u;
        memset(v91, 0, 48);
        uint64_t v14 = PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)v91, *(void *)v13, *(_DWORD *)(*(void *)(*(void *)v13 + 96) + 4 * *(unsigned int *)(v13 + 8)));
        v91[0] = &unk_1F1814328;
        PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next(v14);
        *((void *)&v87 + 1) = 0;
        uint64_t v88 = 0;
        unint64_t v85 = &unk_1F1814328;
        *(void *)&long long v86 = 0;
        *(_OWORD *)((char *)v89 + 8) = *(_OWORD *)&v91[1];
        *(_OWORD *)((char *)&v89[1] + 8) = *(_OWORD *)&v91[3];
        *((void *)&v89[2] + 1) = v91[5];
        *(void *)&v89[0] = &unk_1F1814328;
        *(_OWORD *)((char *)&v89[3] + 8) = v86;
        *(_OWORD *)((char *)&v89[4] + 8) = v87;
        *((void *)&v89[5] + 1) = 0;
        *(void *)&v89[3] = &unk_1F1814328;
        LODWORD(v90) = v12;
        if (v7 < (unint64_t)v83)
        {
          *(void *)unint64_t v7 = &unk_1F1814358;
          long long v8 = *(_OWORD *)((char *)v89 + 8);
          uint64_t v9 = *((void *)&v89[2] + 1);
          *(_OWORD *)(v7 + 24) = *(_OWORD *)((char *)&v89[1] + 8);
          *(_OWORD *)(v7 + 8) = v8;
          *(void *)unint64_t v7 = &unk_1F1814328;
          *(void *)(v7 + 40) = v9;
          *(void *)(v7 + 48) = &unk_1F1814358;
          a4 = *(__n128 *)((char *)&v89[3] + 8);
          long long v10 = *(_OWORD *)((char *)&v89[4] + 8);
          *(void *)(v7 + 88) = *((void *)&v89[5] + 1);
          *(_OWORD *)(v7 + 72) = v10;
          *(__n128 *)(v7 + 56) = a4;
          *(void *)(v7 + 48) = &unk_1F1814328;
          *(_DWORD *)(v7 + 96) = v90;
          v7 += 104;
        }
        else
        {
          unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - v6) >> 3) + 1;
          if (v15 > 0x276276276276276) {
            abort();
          }
          if (0x9D89D89D89D89D8ALL * ((uint64_t)&v83[-v6] >> 3) > v15) {
            unint64_t v15 = 0x9D89D89D89D89D8ALL * ((uint64_t)&v83[-v6] >> 3);
          }
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v83[-v6] >> 3)) >= 0x13B13B13B13B13BLL) {
            unint64_t v16 = 0x276276276276276;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16)
          {
            if (v16 > 0x276276276276276) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int v17 = (char *)operator new(104 * v16);
          }
          else
          {
            int v17 = 0;
          }
          uint64_t v18 = &v17[8 * ((uint64_t)(v7 - v6) >> 3)];
          long long v19 = *(_OWORD *)((char *)&v89[1] + 8);
          *(_OWORD *)(v18 + 8) = *(_OWORD *)((char *)v89 + 8);
          *(_OWORD *)(v18 + 24) = v19;
          uint64_t v20 = *((void *)&v89[2] + 1);
          a4 = *(__n128 *)((char *)&v89[3] + 8);
          long long v21 = *(_OWORD *)((char *)&v89[4] + 8);
          *(_OWORD *)(v18 + 56) = *(_OWORD *)((char *)&v89[3] + 8);
          *(void *)uint64_t v18 = &unk_1F1814328;
          *(_OWORD *)(v18 + 72) = v21;
          *((void *)v18 + 11) = *((void *)&v89[5] + 1);
          *((void *)v18 + 5) = v20;
          *((void *)v18 + 6) = &unk_1F1814328;
          *((_DWORD *)v18 + 24) = v12;
          if (v7 == v6)
          {
            int v27 = &v17[8 * ((uint64_t)(v7 - v6) >> 3)];
          }
          else
          {
            uint64_t v22 = 0;
            do
            {
              int v23 = &v18[v22];
              *((void *)v23 - 13) = &unk_1F1814358;
              long long v24 = *(_OWORD *)(v7 + v22 - 80);
              uint64_t v25 = *(void *)(v7 + v22 - 64);
              *((_OWORD *)v23 - 6) = *(_OWORD *)(v7 + v22 - 96);
              *((_OWORD *)v23 - 5) = v24;
              *((void *)v23 - 13) = &unk_1F1814328;
              *((void *)v23 - 8) = v25;
              *((void *)v23 - 7) = &unk_1F1814358;
              a4 = *(__n128 *)(v7 + v22 - 48);
              long long v26 = *(_OWORD *)(v7 + v22 - 32);
              *((void *)v23 - 2) = *(void *)(v7 + v22 - 16);
              *((__n128 *)v23 - 3) = a4;
              *((_OWORD *)v23 - 2) = v26;
              *((void *)v23 - 7) = &unk_1F1814328;
              *((_DWORD *)v23 - 2) = *(_DWORD *)(v7 + v22 - 8);
              v22 -= 104;
            }
            while (v7 + v22 != v6);
            int v27 = &v18[v22];
          }
          int v83 = &v17[104 * v16];
          unint64_t v7 = (unint64_t)(v18 + 104);
          if (v6) {
            operator delete((void *)v6);
          }
          uint64_t v6 = (uint64_t)v27;
        }
      }
      ++v4;
    }
    while (v4 != a2[1]);
  }
  int64_t v28 = v7 - v6;
  if ((uint64_t)(v7 - v6) >= 105)
  {
    uint64_t v29 = v28 / 104;
    unint64_t v30 = (unint64_t)(v28 / 104 - 2) >> 1;
    unint64_t v31 = v30 + 1;
    uint64_t v32 = v6 + 104 * v30;
    do
    {
      a4 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartitions(std::vector<unsigned int>,void({block_pointer})(unsigned int,AnyPartitionStore::VectorEntry_s const&,BOOL *))::Greater &,std::__wrap_iter<std::tuple<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionIterator,PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionIterator,unsigned int> *>>(v6, v29, v32);
      v32 -= 104;
      --v31;
    }
    while (v31);
  }
  if (v7 == v6)
  {
    uint64_t v6 = v7;
    if (!v7) {
      return;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v36 = *(void *)(v6 + 40);
      uint64_t v37 = *(unsigned int *)(v6 + 96);
      char v84 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *, __n128))(a3 + 16))(a3, v37, v36, &v84, a4);
      if (v84) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      uint64_t v38 = v7 - v6;
      uint64_t v39 = (uint64_t)(v7 - v6) / 104;
      if (*(void *)(v6 + 40) == *(void *)(v6 + 88))
      {
        if (v38 >= 105)
        {
          uint64_t v43 = 0;
          uint64_t v90 = 0;
          long long v44 = *(_OWORD *)(v6 + 8);
          long long v45 = *(_OWORD *)(v6 + 24);
          *((void *)&v89[2] + 1) = *(void *)(v6 + 40);
          *(_OWORD *)((char *)v89 + 8) = v44;
          *(_OWORD *)((char *)&v89[1] + 8) = v45;
          *(void *)&v89[0] = &unk_1F1814328;
          long long v46 = *(_OWORD *)(v6 + 56);
          long long v47 = *(_OWORD *)(v6 + 72);
          *((void *)&v89[5] + 1) = *(void *)(v6 + 88);
          *(_OWORD *)((char *)&v89[3] + 8) = v46;
          *(_OWORD *)((char *)&v89[4] + 8) = v47;
          *(void *)&v89[3] = &unk_1F1814328;
          LODWORD(v90) = *(_DWORD *)(v6 + 96);
          uint64_t v48 = v6;
          do
          {
            uint64_t v53 = v48 + 104 * v43 + 104;
            uint64_t v54 = (2 * v43) | 1;
            uint64_t v55 = 2 * v43 + 2;
            if (v55 < v39)
            {
              BOOL v56 = **(_DWORD **)(v53 + 40) > **(_DWORD **)(v53 + 144);
              v53 += 104 * v56;
              if (v56) {
                uint64_t v54 = v55;
              }
            }
            long long v49 = *(_OWORD *)(v53 + 8);
            long long v50 = *(_OWORD *)(v53 + 24);
            *(void *)(v48 + 40) = *(void *)(v53 + 40);
            *(_OWORD *)(v48 + 24) = v50;
            *(_OWORD *)(v48 + 8) = v49;
            long long v51 = *(_OWORD *)(v53 + 56);
            long long v52 = *(_OWORD *)(v53 + 72);
            *(void *)(v48 + 88) = *(void *)(v53 + 88);
            *(_OWORD *)(v48 + 72) = v52;
            *(_OWORD *)(v48 + 56) = v51;
            *(_DWORD *)(v48 + 96) = *(_DWORD *)(v53 + 96);
            uint64_t v48 = v53;
            uint64_t v43 = v54;
          }
          while (v54 <= (uint64_t)((unint64_t)(v39 - 2) >> 1));
          uint64_t v57 = (long long *)(v53 + 8);
          __int16 v58 = (__n128 *)(v53 + 56);
          if (v53 == v7 - 104)
          {
            long long v33 = *(_OWORD *)((char *)v89 + 8);
            long long v34 = *(_OWORD *)((char *)&v89[1] + 8);
            *(void *)(v53 + 40) = *((void *)&v89[2] + 1);
            *uint64_t v57 = v33;
            *(_OWORD *)(v53 + 24) = v34;
            a4 = *(__n128 *)((char *)&v89[3] + 8);
            long long v35 = *(_OWORD *)((char *)&v89[4] + 8);
            *(void *)(v53 + 88) = *((void *)&v89[5] + 1);
            *__int16 v58 = a4;
            *(_OWORD *)(v53 + 72) = v35;
            *(_DWORD *)(v53 + 96) = v90;
          }
          else
          {
            long long v59 = *(_OWORD *)(v7 - 96);
            long long v60 = *(_OWORD *)(v7 - 80);
            *(void *)(v53 + 40) = *(void *)(v7 - 64);
            *uint64_t v57 = v59;
            *(_OWORD *)(v53 + 24) = v60;
            __n128 v61 = *(__n128 *)(v7 - 48);
            long long v62 = *(_OWORD *)(v7 - 32);
            *(void *)(v53 + 88) = *(void *)(v7 - 16);
            *__int16 v58 = v61;
            *(_OWORD *)(v53 + 72) = v62;
            *(_DWORD *)(v53 + 96) = *(_DWORD *)(v7 - 8);
            long long v63 = *(_OWORD *)((char *)v89 + 8);
            long long v64 = *(_OWORD *)((char *)&v89[1] + 8);
            *(void *)(v7 - 64) = *((void *)&v89[2] + 1);
            *(_OWORD *)(v7 - 96) = v63;
            *(_OWORD *)(v7 - 80) = v64;
            a4 = *(__n128 *)((char *)&v89[3] + 8);
            long long v65 = *(_OWORD *)((char *)&v89[4] + 8);
            *(void *)(v7 - 16) = *((void *)&v89[5] + 1);
            *(__n128 *)(v7 - 48) = a4;
            *(_OWORD *)(v7 - 32) = v65;
            *(_DWORD *)(v7 - 8) = v90;
            uint64_t v66 = v53 - v6 + 104;
            if (v66 >= 105)
            {
              unint64_t v67 = (v66 / 0x68uLL - 2) >> 1;
              unint64_t v68 = v6 + 104 * v67;
              if (**(_DWORD **)(v68 + 40) > **(_DWORD **)(v53 + 40))
              {
                long long v69 = *(_OWORD *)(v53 + 24);
                long long v86 = *v57;
                long long v87 = v69;
                size_t v70 = *(_DWORD **)(v53 + 40);
                __n128 v71 = *v58;
                long long v72 = *(_OWORD *)(v53 + 72);
                v91[5] = *(void *)(v53 + 88);
                *(__n128 *)&v91[1] = v71;
                *(_OWORD *)&v91[3] = v72;
                int v73 = *(_DWORD *)(v53 + 96);
                do
                {
                  uint64_t v74 = v68;
                  long long v75 = *(_OWORD *)(v68 + 8);
                  long long v76 = *(_OWORD *)(v68 + 24);
                  *(void *)(v53 + 40) = *(void *)(v68 + 40);
                  *(_OWORD *)(v53 + 24) = v76;
                  *(_OWORD *)(v53 + 8) = v75;
                  long long v77 = *(_OWORD *)(v68 + 56);
                  long long v78 = *(_OWORD *)(v68 + 72);
                  *(void *)(v53 + 88) = *(void *)(v68 + 88);
                  *(_OWORD *)(v53 + 72) = v78;
                  *(_OWORD *)(v53 + 56) = v77;
                  *(_DWORD *)(v53 + 96) = *(_DWORD *)(v68 + 96);
                  if (!v67) {
                    break;
                  }
                  unint64_t v67 = (v67 - 1) >> 1;
                  unint64_t v68 = v6 + 104 * v67;
                  uint64_t v53 = v74;
                }
                while (**(_DWORD **)(v68 + 40) > *v70);
                long long v79 = v87;
                *(_OWORD *)(v74 + 8) = v86;
                *(_OWORD *)(v74 + 24) = v79;
                *(void *)(v74 + 40) = v70;
                a4 = *(__n128 *)&v91[1];
                long long v80 = *(_OWORD *)&v91[3];
                *(_OWORD *)(v74 + 56) = *(_OWORD *)&v91[1];
                *(_OWORD *)(v74 + 72) = v80;
                *(void *)(v74 + 88) = v91[5];
                *(_DWORD *)(v74 + 96) = v73;
              }
            }
          }
        }
        v7 -= 104;
      }
      else if (v38 >= 105)
      {
        unint64_t v40 = (unint64_t)(v39 - 2) >> 1;
        unint64_t v41 = v40 + 1;
        uint64_t v42 = v6 + 104 * v40;
        do
        {
          a4 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartitions(std::vector<unsigned int>,void({block_pointer})(unsigned int,AnyPartitionStore::VectorEntry_s const&,BOOL *))::Greater &,std::__wrap_iter<std::tuple<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionIterator,PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionIterator,unsigned int> *>>(v6, (uint64_t)(v7 - v6) / 104, v42);
          v42 -= 104;
          --v41;
        }
        while (v41);
      }
      if (v7 == v6)
      {
        if (v6) {
          break;
        }
        return;
      }
    }
  }
  operator delete((void *)v6);
}

__n128 std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartitions(std::vector<unsigned int>,void({block_pointer})(unsigned int,AnyPartitionStore::VectorEntry_s const&,BOOL *))::Greater &,std::__wrap_iter<std::tuple<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionIterator,PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionIterator,unsigned int> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 >= 2)
  {
    int64_t v3 = (unint64_t)(a2 - 2) >> 1;
    if (v3 >= 0x4EC4EC4EC4EC4EC5 * ((a3 - a1) >> 3))
    {
      int64_t v4 = (0x9D89D89D89D89D8ALL * ((a3 - a1) >> 3)) | 1;
      uint64_t v5 = a1 + 104 * v4;
      if ((uint64_t)(0x9D89D89D89D89D8ALL * ((a3 - a1) >> 3) + 2) < a2)
      {
        BOOL v6 = **(_DWORD **)(v5 + 40) > **(_DWORD **)(v5 + 144);
        v5 += 104 * v6;
        if (v6) {
          int64_t v4 = 0x9D89D89D89D89D8ALL * ((a3 - a1) >> 3) + 2;
        }
      }
      if (**(_DWORD **)(v5 + 40) <= **(_DWORD **)(a3 + 40))
      {
        long long v15 = *(_OWORD *)(a3 + 8);
        long long v16 = *(_OWORD *)(a3 + 24);
        uint64_t v20 = *(void *)(a3 + 88);
        __n128 v18 = *(__n128 *)(a3 + 56);
        long long v19 = *(_OWORD *)(a3 + 72);
        int v17 = *(_DWORD **)(a3 + 40);
        int v21 = *(_DWORD *)(a3 + 96);
        do
        {
          uint64_t v7 = a3;
          a3 = v5;
          long long v8 = *(_OWORD *)(v5 + 8);
          long long v9 = *(_OWORD *)(v5 + 24);
          *(void *)(v7 + 40) = *(void *)(v5 + 40);
          *(_OWORD *)(v7 + 24) = v9;
          *(_OWORD *)(v7 + 8) = v8;
          long long v10 = *(_OWORD *)(v5 + 56);
          long long v11 = *(_OWORD *)(v5 + 72);
          *(void *)(v7 + 88) = *(void *)(v5 + 88);
          *(_OWORD *)(v7 + 72) = v11;
          *(_OWORD *)(v7 + 56) = v10;
          *(_DWORD *)(v7 + 96) = *(_DWORD *)(v5 + 96);
          if (v3 < v4) {
            break;
          }
          uint64_t v12 = (2 * v4) | 1;
          uint64_t v5 = a1 + 104 * v12;
          uint64_t v13 = 2 * v4 + 2;
          if (v13 < a2)
          {
            BOOL v6 = **(_DWORD **)(v5 + 40) > **(_DWORD **)(v5 + 144);
            v5 += 104 * v6;
            if (v6) {
              uint64_t v12 = v13;
            }
          }
          int64_t v4 = v12;
        }
        while (**(_DWORD **)(v5 + 40) <= *v17);
        *(void *)(a3 + 40) = v17;
        *(_OWORD *)(a3 + 8) = v15;
        *(_OWORD *)(a3 + 24) = v16;
        __n128 result = v18;
        *(void *)(a3 + 88) = v20;
        *(__n128 *)(a3 + 56) = v18;
        *(_OWORD *)(a3 + 72) = v19;
        *(_DWORD *)(a3 + 96) = v21;
      }
    }
  }
  return result;
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartitions(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a1[17])
  {
    uint64_t v5 = 0;
    std::string __p = 0;
    int v27 = 0;
    int64_t v28 = 0;
    goto LABEL_37;
  }
  unsigned int v4 = 0;
  uint64_t v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  do
  {
    if (v7 < v6)
    {
      *(_DWORD *)uint64_t v7 = v4;
      v7 += 4;
      goto LABEL_4;
    }
    uint64_t v8 = (v7 - v5) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      goto LABEL_42;
    }
    if ((v6 - v5) >> 1 > v9) {
      unint64_t v9 = (v6 - v5) >> 1;
    }
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      if (v10 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      long long v11 = operator new(4 * v10);
    }
    else
    {
      long long v11 = 0;
    }
    uint64_t v12 = &v11[4 * v8];
    *(_DWORD *)uint64_t v12 = v4;
    uint64_t v13 = v12 + 4;
    if (v7 != v5)
    {
      unint64_t v14 = v7 - 4 - v5;
      if (v14 >= 0xBC)
      {
        if (&v11[v7 - v5 - 4 - (v14 & 0xFFFFFFFFFFFFFFFCLL)] > &v11[v7 - v5 - 4])
        {
          long long v15 = v7;
        }
        else if (&v7[-(v14 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
        {
          long long v15 = v7;
        }
        else if ((unint64_t)(v5 - v11) >= 0x20)
        {
          uint64_t v16 = (v14 >> 2) + 1;
          long long v15 = &v7[-4 * (v16 & 0x7FFFFFFFFFFFFFF8)];
          int v17 = &v11[4 * v8 - 16];
          __n128 v18 = v7 - 16;
          uint64_t v19 = v16 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v20 = *(_OWORD *)v18;
            *(v17 - 1) = *((_OWORD *)v18 - 1);
            *int v17 = v20;
            v17 -= 2;
            v18 -= 32;
            v19 -= 8;
          }
          while (v19);
          v12 -= 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
          if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_29;
          }
        }
        else
        {
          long long v15 = v7;
        }
      }
      else
      {
        long long v15 = v7;
      }
      do
      {
        int v21 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v12 - 1) = v21;
        v12 -= 4;
      }
      while (v15 != v5);
    }
LABEL_29:
    BOOL v6 = &v11[4 * v10];
    if (v5) {
      operator delete(v5);
    }
    uint64_t v5 = v12;
    uint64_t v7 = v13;
LABEL_4:
    ++v4;
  }
  while (v4 < a1[17]);
  std::string __p = 0;
  int v27 = 0;
  int64_t v28 = 0;
  uint64_t v22 = v7 - v5;
  if (v7 != v5)
  {
    if (v22 < 0) {
LABEL_42:
    }
      abort();
    int v23 = (char *)operator new(v7 - v5);
    long long v24 = &v23[4 * (v22 >> 2)];
    std::string __p = v23;
    int64_t v28 = v24;
    memcpy(v23, v5, v7 - v5);
    int v27 = v24;
  }
  uint64_t v2 = a2;
LABEL_37:
  (*(void (**)(_DWORD *, void **, uint64_t))(*(void *)a1 + 72))(a1, &__p, v2);
  if (__p)
  {
    int v27 = __p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::append(uint64_t a1, unsigned int a2, int a3, float a4)
{
  unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * a2);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unint64_t v9 = PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), v7);
  if (*(_DWORD *)(v9 + 4) != v8) {
    goto LABEL_21;
  }
  unsigned int v10 = *(_DWORD *)(v9 + 8);
  if (v10)
  {
    if (*(float *)(v9 + 16) < a4)
    {
      *(_DWORD *)(v9 + 12) = a3;
      *(float *)(v9 + 16) = a4;
    }
    if (v10 >= 0x200)
    {
      *(_DWORD *)(v9 + 8) = v10 + 1;
      unsigned int v11 = *(_DWORD *)v9;
      if (*(_DWORD *)v9) {
        goto LABEL_17;
      }
LABEL_16:
      unsigned int v11 = PartitionStore<vi_onefixedsize_memory_allocator,512>::newBlock(a1, v8);
      *(_DWORD *)PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), v7) = v11;
LABEL_17:
      while (1)
      {
        unint64_t v9 = PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), v11);
        if (*(_DWORD *)(v9 + 4) != v8) {
          break;
        }
        unsigned int v10 = *(_DWORD *)(v9 + 8);
        if (v10 < 0x200) {
          goto LABEL_9;
        }
        *(_DWORD *)(v9 + 8) = v10 + 1;
        unsigned int v7 = v11;
        unsigned int v11 = *(_DWORD *)v9;
        if (!*(_DWORD *)v9) {
          goto LABEL_16;
        }
      }
LABEL_21:
      int v21 = __si_assert_copy_extra_329();
      uint64_t v22 = v21;
      int v23 = "";
      if (v21) {
        int v23 = v21;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1342, "block->centOffset == centOffset", v23);
      free(v22);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  else
  {
    *(float *)(v9 + 16) = a4;
    unsigned int v10 = 1;
    *(_DWORD *)(v9 + 8) = 1;
    *(_DWORD *)(v9 + 12) = a3;
  }
LABEL_9:
  *(_DWORD *)(v9 + 8) = v10 + 1;
  unint64_t v12 = v9 + 8 * v10;
  *(_DWORD *)(v12 + 12) = a3;
  *(float *)(v12 + 16) = a4;
  if (a4 == 0.0)
  {
    float v13 = 3.4028e38;
  }
  else
  {
    unsigned int v14 = *(_DWORD *)(a1 + 64);
    unsigned int v15 = v14 / 0xADC8;
    unsigned int v16 = 48271 * (v14 % 0xADC8);
    v15 *= 3399;
    BOOL v17 = v16 >= v15;
    unsigned int v18 = v16 - v15;
    if (v17) {
      int v19 = 0;
    }
    else {
      int v19 = 0x7FFFFFFF;
    }
    unsigned int v20 = v19 + v18;
    *(_DWORD *)(a1 + 64) = v20;
    float v13 = (float)-logf((float)(v20 - 1) * 4.6566e-10) / a4;
  }
  v24[0] = a3;
  *(float *)&v24[1] = v13;
  MaxSizePriorityQueue<AnyPartitionStore::CandidateEntry,std::vector<AnyPartitionStore::CandidateEntry>,AnyPartitionStore::CandidateQueue::Lesser>::push((void *)(a1 + 24), (uint64_t)v24);
  ++*(_DWORD *)(a1 + 72);
}

size_t PartitionStore<vi_onefixedsize_memory_allocator,512>::newBlock(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), 0);
  size_t OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(void *)(a1 + 80), 0x100Cu);
  unint64_t v6 = PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), 0);
  if (v4 != v6)
  {
    unint64_t v7 = v6;
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 134218240;
      unint64_t v13 = v4;
      __int16 v14 = 2048;
      unint64_t v15 = v7;
      _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "Partition Storage remapped from %p to %p", (uint8_t *)&v12, 0x16u);
    }
    *__error() = v8;
  }
  unsigned int v10 = (_DWORD *)PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), OffsetFromEnd);
  bzero(v10, 0x100CuLL);
  v10[1] = a2;
  return OffsetFromEnd;
}

size_t vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(uint64_t a1, unsigned int a2)
{
  size_t v2 = a2;
  if (*(void *)(a1 + 32) != a2)
  {
    unsigned int v11 = __si_assert_copy_extra_329();
    int v12 = v11;
    unint64_t v13 = "";
    if (v11) {
      unint64_t v13 = v11;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 1379, "inSize == allocator->baseSize", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  size_t v5 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  size_t v6 = v4 + a2;
  if (v6 > v5)
  {
    unint64_t v7 = *(void **)(a1 + 8);
    do
    {
      *(void *)(a1 + 16) = 2 * v5;
      unint64_t v7 = malloc_type_zone_realloc(*(malloc_zone_t **)a1, v7, 2 * v5, 0x400CB3AuLL);
      *(void *)(a1 + 8) = v7;
      size_t v5 = *(void *)(a1 + 16);
      unint64_t v4 = *(void *)(a1 + 24);
      size_t v6 = v4 + v2;
    }
    while (v4 + v2 > v5);
  }
  *(void *)(a1 + 24) = v6;
  size_t v8 = v4 / v2;
  unint64_t Ptr = (void *)vi_onefixedsize_memory_allocator::getPtr((void *)a1, v4 / v2, v2);
  bzero(Ptr, v2);
  return v8;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::vectorCountInPartition(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), *(_DWORD *)(*(void *)(a1 + 96) + 4 * a2))+ 8);
  BOOL v3 = v2 != 0;
  unsigned int v4 = v2 - 1;
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::centOffsetForPartition(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), *(_DWORD *)(*(void *)(a1 + 96) + 4 * a2));
  if (*(_DWORD *)(v3 + 4) != a2)
  {
    unint64_t v4 = v3;
    int v5 = *__error();
    size_t v6 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      int v8 = *(_DWORD *)(v4 + 4);
      *(_DWORD *)std::string buf = 136316162;
      unint64_t v13 = "centOffsetForPartition";
      __int16 v14 = 1024;
      int v15 = 1300;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 2048;
      unint64_t v21 = v4;
      _os_log_fault_impl(&dword_1BD672000, v6, OS_LOG_TYPE_FAULT, "%s:%d: block->centOffset = %u, partitionId = %u, block = %p", buf, 0x28u);
    }
    *__error() = v5;
    if (*(_DWORD *)(v4 + 4) != a2)
    {
      unint64_t v9 = __si_assert_copy_extra_329();
      unsigned int v10 = v9;
      unsigned int v11 = "";
      if (v9) {
        unsigned int v11 = v9;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1301, "block->centOffset == partitionID", v11);
      free(v10);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  return a2;
}

unint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::farthestVectorInPartition(uint64_t a1, unsigned int a2)
{
  return PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), *(_DWORD *)(*(void *)(a1 + 96) + 4 * a2))+ 12;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::isPersistent()
{
  return 0;
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::~PartitionStore(uint64_t a1)
{
  PartitionStore<vi_onefixedsize_memory_allocator,512>::~PartitionStore(a1);
  JUMPOUT(0x1C1881000);
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::~PartitionStore(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814178;
  int v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    unint64_t v3 = *(void **)(a1 + 96);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 120));
  unint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
LABEL_5:
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
LABEL_6:
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4)
  {
    malloc_zone_free(*(malloc_zone_t **)v4, *(void **)(v4 + 8));
    MEMORY[0x1C1881000](v4, 0x10A0C40CA010D23);
  }
  *(void *)a1 = &unk_1F1814250;
  int v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(void *)(a1 + 40) = v5;
    operator delete(v5);
  }
  size_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::newPartition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    uint64_t v39 = __si_assert_copy_extra_329();
    unint64_t v40 = v39;
    unint64_t v41 = "";
    if (v39) {
      unint64_t v41 = v39;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 891, "_quantizer != nullptr", v41);
LABEL_58:
    free(v40);
    if (__valid_fs(-1)) {
      uint64_t v49 = 2989;
    }
    else {
      uint64_t v49 = 3072;
    }
    *(_DWORD *)uint64_t v49 = -559038737;
    abort();
  }
  unsigned int v5 = *(_DWORD *)(a1 + 68);
  if (v5 > (*(unsigned int (**)(uint64_t))(*(void *)v3 + 24))(v3))
  {
    uint64_t v42 = __si_assert_copy_extra_329();
    unint64_t v40 = v42;
    uint64_t v43 = "";
    if (v42) {
      uint64_t v43 = v42;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1370, "n_partitions <= quantizer()->count()", v43);
    goto LABEL_58;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  if (v6 > *(_DWORD *)(a1 + 88) - 1)
  {
    long long v44 = __si_assert_copy_extra_329();
    long long v45 = v44;
    long long v46 = "";
    if (v44) {
      long long v46 = v44;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1371, "n_partitions <= max_partitions - 1", v46);
    free(v45);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_54;
  }
  if (v6 != a2)
  {
    long long v47 = __si_assert_copy_extra_329();
    unint64_t v40 = v47;
    uint64_t v48 = "";
    if (v47) {
      uint64_t v48 = v47;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1373, "centOffset == partID", v48);
    goto LABEL_58;
  }
  unsigned int v7 = PartitionStore<vi_onefixedsize_memory_allocator,512>::newBlock(a1, a2);
  *(_DWORD *)(PartitionStore<vi_onefixedsize_memory_allocator,512>::blockAt(*(void **)(a1 + 80), v7) + 12) = -1;
  ++*(_DWORD *)(a1 + 68);
  unint64_t v9 = *(unsigned int **)(a1 + 104);
  unint64_t v8 = *(void *)(a1 + 112);
  if ((unint64_t)v9 >= v8)
  {
    unsigned int v11 = *(unsigned int **)(a1 + 96);
    uint64_t v12 = v9 - v11;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      goto LABEL_54;
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 62) {
        goto LABEL_63;
      }
      __int16 v16 = operator new(4 * v15);
    }
    else
    {
      __int16 v16 = 0;
    }
    int v17 = (unsigned int *)&v16[4 * v12];
    __int16 v18 = &v16[4 * v15];
    *int v17 = v7;
    unsigned int v10 = v17 + 1;
    if (v9 != v11)
    {
      unint64_t v19 = (char *)v9 - (char *)v11 - 4;
      if (v19 < 0x2C) {
        goto LABEL_66;
      }
      if ((unint64_t)((char *)v11 - v16) < 0x20) {
        goto LABEL_66;
      }
      uint64_t v20 = (v19 >> 2) + 1;
      unint64_t v21 = &v16[4 * v12 - 16];
      uint64_t v22 = v9 - 4;
      uint64_t v23 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unint64_t v21 = v24;
        v21 -= 2;
        v22 -= 8;
        v23 -= 8;
      }
      while (v23);
      v17 -= v20 & 0x7FFFFFFFFFFFFFF8;
      v9 -= v20 & 0x7FFFFFFFFFFFFFF8;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_66:
        do
        {
          unsigned int v25 = *--v9;
          *--int v17 = v25;
        }
        while (v9 != v11);
      }
    }
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *unint64_t v9 = v7;
    unsigned int v10 = v9 + 1;
  }
  *(void *)(a1 + 104) = v10;
  int v27 = *(char **)(a1 + 152);
  unint64_t v26 = *(void *)(a1 + 160);
  if ((unint64_t)v27 < v26)
  {
    *(void *)int v27 = a1;
    *((_DWORD *)v27 + 2) = a2;
    int64_t v28 = v27 + 16;
    goto LABEL_43;
  }
  uint64_t v29 = *(unsigned char **)(a1 + 144);
  uint64_t v30 = (v27 - v29) >> 4;
  unint64_t v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 60) {
LABEL_54:
  }
    abort();
  uint64_t v32 = v26 - (void)v29;
  if (v32 >> 3 > v31) {
    unint64_t v31 = v32 >> 3;
  }
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v33 = v31;
  }
  if (!v33)
  {
    long long v34 = 0;
    goto LABEL_38;
  }
  if (v33 >> 60) {
LABEL_63:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  long long v34 = (char *)operator new(16 * v33);
LABEL_38:
  long long v35 = &v34[16 * v30];
  *(void *)long long v35 = a1;
  *((_DWORD *)v35 + 2) = a2;
  int64_t v28 = v35 + 16;
  if (v27 != v29)
  {
    do
    {
      uint64_t v36 = *((void *)v27 - 2);
      v27 -= 16;
      int v37 = *((_DWORD *)v27 + 2);
      *((void *)v35 - 2) = v36;
      v35 -= 16;
      *((_DWORD *)v35 + 2) = v37;
    }
    while (v27 != v29);
    int v27 = *(char **)(a1 + 144);
  }
  *(void *)(a1 + 144) = v35;
  *(void *)(a1 + 152) = v28;
  *(void *)(a1 + 160) = &v34[16 * v33];
  if (v27) {
    operator delete(v27);
  }
LABEL_43:
  *(void *)(a1 + 152) = v28;
  return a2;
}

unint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), a2, 3092);
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v6 = *(void *)(a1 + 64);
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1C1881000);
}

void *IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  *a1 = &unk_1F1815A40;
  int v2 = (std::__shared_weak_count *)a1[11];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unsigned int v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    unsigned int v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::diagnoseDump(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  unint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  unint64_t v15 = (void *)std::ostream::operator<<();
  __int16 v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 192)) {
    int v17 = "(readOnly)";
  }
  else {
    int v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  unint64_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint64_t v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    uint64_t v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    unint64_t v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    int v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    int64_t v28 = (void *)std::ostream::operator<<();
    uint64_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    uint64_t v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  long long v65 = 0;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  uint64_t v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  long long v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 80);
  uint64_t v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  uint64_t v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 24))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      uint64_t v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v52, 3092);
        uint64_t v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        uint64_t v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        BOOL v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 24));
    }
    else
    {
      unint64_t v40 = 0;
      unint64_t v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v40, 3092);
        long long v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        long long v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        long long v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, Ptr, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, Ptr + 3064, 8);
        if ((v71 & 0x80u) == 0) {
          uint64_t v49 = &v69;
        }
        else {
          uint64_t v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        long long v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 24));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  uint64_t v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    long long v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    long long v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::status(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  unsigned int v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  int v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  unint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v31);
  if (v31)
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v29);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::updateVectorStorageOffsets(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = a1 + 48;
  if (a2)
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (i >= result) {
        break;
      }
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), i, 3092);
      if (!*(unsigned char *)(v2 + 184))
      {
        unint64_t v8 = *(unsigned int *)(Ptr + 3088);
        int v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(void *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          uint64_t v10 = *(void *)(v2 + 56 + 8 * ((v8 >> ((60 - 4 * v9) & 0xFC)) & 0xF));
          if (v10)
          {
            int v11 = v9 + 2;
            do
              uint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> ((64 - 4 * v11++) & 0xFC)) & 0xF));
            while ((v10 & 1) != 0);
          }
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
          }
        }
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (v2 >= result) {
        break;
      }
      vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), v2++, 3092);
    }
  }
  return result;
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(uint64_t a1)
{
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v4)
  {
    os_unfair_lock_unlock(v2);
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(v5 + 72);
      goto LABEL_9;
    }
LABEL_13:
    unint64_t v8 = __si_assert_copy_extra_329();
    int v9 = v8;
    uint64_t v10 = "";
    if (v8) {
      uint64_t v10 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2443, "cur.partitions != nullptr", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v2);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = *(unsigned int *)(v5 + 72);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::getDataForOffset(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    int v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    uint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *uint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 3072;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::storageSize(uint64_t a1)
{
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 80) + 16) + 24);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  uint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v25 + 2), *((unsigned int *)v25 + 4), v25[5]);
        v25 += 6;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v16 + 2), *((unsigned int *)v16 + 4), v16[5]);
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          uint64_t v21 = v15;
          int v22 = *__error();
          int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            uint64_t v24 = __p;
            if (v49 < 0) {
              uint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        v16 += 6;
      }
      while (v16 != v12);
    }
  }
  unint64_t v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      uint64_t v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    uint64_t v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

void *MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(void *result, unsigned char *a2, unsigned char *a3)
{
  int *result = 0;
  result[1] = 0;
  result[2] = 0;
  int64_t v3 = a3 - a2;
  if (a3 == a2)
  {
    unint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v3 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    int v5 = result;
    uint64_t v6 = operator new(a3 - a2);
    void *v5 = v6;
    unint64_t v7 = (char *)&v6[v3 >> 3];
    v5[2] = v7;
    uint64_t result = memcpy(v6, a2, v3);
    v5[1] = v7;
  }
  if (v7 - (char *)v6 >= 25)
  {
    int64_t v8 = (v7 - (char *)v6) / 0x18uLL;
    do
    {
      uint64_t v10 = 0;
      long long v23 = *(_OWORD *)v6;
      uint64_t v24 = v6[2];
      uint64_t v11 = (float *)v6;
      do
      {
        BOOL v13 = v11;
        uint64_t v14 = v10 + 1;
        v11 += 6 * v10 + 6;
        uint64_t v15 = 2 * v10;
        uint64_t v10 = (2 * v10) | 1;
        int64_t v16 = v15 + 2;
        if (v16 < v8 && v13[6 * v14 + 5] < v11[11])
        {
          v11 += 6;
          uint64_t v10 = v16;
        }
        long long v12 = *(_OWORD *)v11;
        *((void *)v13 + 2) = *((void *)v11 + 2);
        *(_OWORD *)BOOL v13 = v12;
      }
      while (v10 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
      v7 -= 24;
      if (v11 == (float *)v7)
      {
        *((void *)v11 + 2) = v24;
        *(_OWORD *)uint64_t v11 = v23;
      }
      else
      {
        long long v17 = *(_OWORD *)v7;
        *((void *)v11 + 2) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v11 = v17;
        *(_OWORD *)unint64_t v7 = v23;
        *((void *)v7 + 2) = v24;
        uint64_t v18 = (char *)v11 - (char *)v6 + 24;
        if (v18 >= 25)
        {
          unint64_t v19 = (v18 / 0x18uLL - 2) >> 1;
          float v20 = v11[5];
          if (*((float *)&v6[3 * v19 + 2] + 1) < v20)
          {
            int v26 = *((_DWORD *)v11 + 4);
            long long v25 = *(_OWORD *)v11;
            do
            {
              uint64_t v21 = v11;
              uint64_t v11 = (float *)&v6[3 * v19];
              long long v22 = *(_OWORD *)v11;
              *((void *)v21 + 2) = *((void *)v11 + 2);
              *(_OWORD *)uint64_t v21 = v22;
              if (!v19) {
                break;
              }
              unint64_t v19 = (v19 - 1) >> 1;
            }
            while (*((float *)&v6[3 * v19 + 2] + 1) < v20);
            *(_OWORD *)uint64_t v11 = v25;
            *((_DWORD *)v11 + 4) = v26;
            v11[5] = v20;
          }
        }
      }
    }
    while (v8-- > 2);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  int v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v34 = buf;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  uint64_t v55 = 0;
  long long v54 = 0u;
  long long v53 = 0u;
  memset(v52, 0, sizeof(v52));
  *((void *)&buf + 1) = 0;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v56 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v38 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v51 = MEMORY[0x1E4FBA488] + 64;
  unint64_t v7 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8;
  *((void *)&buf + 1) = 0;
  uint64_t v9 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v9, v52);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v10 = v7[5];
  uint64_t v51 = v7[4];
  *(void *)((char *)&v52[-1] + *(void *)(v51 - 24)) = v10;
  *(void *)&long long buf = v7[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v7[6];
  uint64_t v56 = v40;
  *(void *)&long long buf = v41;
  uint64_t v51 = (uint64_t)v38;
  std::streambuf::basic_streambuf();
  uint64_t v42 = 0;
  uint64_t v36 = MEMORY[0x1E4FBA470] + 16;
  v52[0] = MEMORY[0x1E4FBA470] + 16;
  long long v53 = 0u;
  long long v54 = 0u;
  LODWORD(v55) = 24;
  long long v43 = 0;
  uint64_t v44 = 0;
  uint64_t v37 = a1;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v42, *(unsigned char **)(v37 + 8), *(unsigned char **)(v37 + 16));
  uint64_t v11 = v43;
  uint64_t v39 = v42;
  if (v42 != v43)
  {
    if (AppIntegerValue) {
      BOOL v12 = v34 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      uint64_t v24 = v42;
      do
      {
        (*(void (**)(uint64_t, void, float))(a2 + 16))(a2, *((unsigned int *)v24 + 2), v24[5]);
        v24 += 6;
      }
      while (v24 != v11);
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = ",";
      uint64_t v15 = v42;
      do
      {
        (*(void (**)(uint64_t, void, float))(a2 + 16))(a2, *((unsigned int *)v15 + 2), v15[5]);
        int64_t v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v14, 1);
        long long v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)";", 1);
        uint64_t v18 = (char *)&v52[-1] + *(void *)(v51 - 24);
        if ((v18[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v18 + 5) + 32))(__p), v49 > 1000)
          || (++v13,
              HIDWORD(v19) = -1030792151 * v13 + 85899344,
              LODWORD(v19) = HIDWORD(v19),
              (v19 >> 1) < 0x51EB851))
        {
          float v20 = v14;
          int v21 = *__error();
          long long v22 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            long long v23 = __p;
            if (v48 < 0) {
              long long v23 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t v45 = 136315138;
            long long v46 = v23;
            _os_log_impl(&dword_1BD672000, v22, OS_LOG_TYPE_DEFAULT, "%s", v45, 0xCu);
            if (SHIBYTE(v48) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v21;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v48 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v48) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v14 = v20;
        }
        v15 += 6;
      }
      while (v15 != v11);
    }
  }
  long long v25 = (char *)&v52[-1] + *(void *)(v51 - 24);
  if ((v25[32] & 5) != 0)
  {
    uint64_t v26 = v37;
    uint64_t v27 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v25 + 5) + 32))(__p);
    uint64_t v26 = v37;
    uint64_t v27 = (void *)MEMORY[0x1E4FBA408];
    if (v49 > 0)
    {
      int v28 = *__error();
      int v29 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v30 = v48 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)uint64_t v45 = 136315138;
        long long v46 = v30;
        _os_log_impl(&dword_1BD672000, v29, OS_LOG_TYPE_DEFAULT, "%s", v45, 0xCu);
        if (SHIBYTE(v48) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v28;
    }
  }
  if (v26)
  {
    uint64_t v31 = *(void **)(v26 + 8);
    if (v31)
    {
      *(void *)(v26 + 16) = v31;
      operator delete(v31);
    }
    MEMORY[0x1C1881000](v26, 0x1020C403EC25235);
  }
  if (v39) {
    operator delete(v39);
  }
  *(void *)&long long buf = *v27;
  uint64_t v32 = v27[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v27[8];
  uint64_t v51 = v32;
  v52[0] = v36;
  if (SBYTE7(v54) < 0) {
    operator delete((void *)v53);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v56);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6345708;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  int v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v33 = buf;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  uint64_t v54 = 0;
  long long v53 = 0u;
  long long v52 = 0u;
  memset(v51, 0, sizeof(v51));
  *((void *)&buf + 1) = 0;
  uint64_t v39 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v38 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v55 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v36 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v50 = MEMORY[0x1E4FBA488] + 64;
  unint64_t v7 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8;
  *((void *)&buf + 1) = 0;
  uint64_t v9 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v9, v51);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v10 = v7[5];
  uint64_t v50 = v7[4];
  *(void *)((char *)&v51[-1] + *(void *)(v50 - 24)) = v10;
  *(void *)&long long buf = v7[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v7[6];
  uint64_t v55 = v38;
  *(void *)&long long buf = v39;
  uint64_t v50 = (uint64_t)v36;
  std::streambuf::basic_streambuf();
  uint64_t v40 = 0;
  uint64_t v35 = MEMORY[0x1E4FBA470] + 16;
  v51[0] = MEMORY[0x1E4FBA470] + 16;
  long long v52 = 0u;
  long long v53 = 0u;
  LODWORD(v54) = 24;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v40, *(unsigned char **)(a1 + 8), *(unsigned char **)(a1 + 16));
  uint64_t v11 = v41;
  uint64_t v37 = v40;
  if (v40 != v41)
  {
    if (AppIntegerValue) {
      BOOL v12 = v33 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      uint64_t v24 = v40;
      do
      {
        long long v48 = *(_OWORD *)v24;
        (*(void (**)(uint64_t, long long *, float))(a2 + 16))(a2, &v48, v24[5]);
        v24 += 6;
      }
      while (v24 != v11);
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = ",";
      uint64_t v15 = v40;
      do
      {
        long long v48 = *(_OWORD *)v15;
        (*(void (**)(uint64_t, long long *, float))(a2 + 16))(a2, &v48, v15[5]);
        int64_t v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v14, 1);
        long long v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)";", 1);
        uint64_t v18 = (char *)&v51[-1] + *(void *)(v50 - 24);
        if ((v18[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v18 + 5) + 32))(__p), v47 > 1000)
          || (++v13,
              HIDWORD(v19) = -1030792151 * v13 + 85899344,
              LODWORD(v19) = HIDWORD(v19),
              (v19 >> 1) < 0x51EB851))
        {
          float v20 = v14;
          int v21 = *__error();
          long long v22 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            long long v23 = __p;
            if (v46 < 0) {
              long long v23 = (void **)__p[0];
            }
            *(_DWORD *)long long v43 = 136315138;
            uint64_t v44 = v23;
            _os_log_impl(&dword_1BD672000, v22, OS_LOG_TYPE_DEFAULT, "%s", v43, 0xCu);
            if (SHIBYTE(v46) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v21;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v46 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v14 = v20;
        }
        v15 += 6;
      }
      while (v15 != v11);
    }
  }
  long long v25 = (char *)&v51[-1] + *(void *)(v50 - 24);
  if ((v25[32] & 5) != 0)
  {
    uint64_t v26 = a1;
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v25 + 5) + 32))(__p);
    uint64_t v26 = a1;
    if (v47 > 0)
    {
      int v27 = *__error();
      int v28 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        int v29 = v46 >= 0 ? __p : (void **)__p[0];
        LODWORD(v48) = 136315138;
        *(void *)((char *)&v48 + 4) = v29;
        _os_log_impl(&dword_1BD672000, v28, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v48, 0xCu);
        if (SHIBYTE(v46) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v27;
    }
  }
  if (v26)
  {
    uint64_t v30 = *(void **)(v26 + 8);
    if (v30)
    {
      *(void *)(v26 + 16) = v30;
      operator delete(v30);
    }
    MEMORY[0x1C1881000](v26, 0x1020C403EC25235);
  }
  if (v37) {
    operator delete(v37);
  }
  *(void *)&long long buf = *MEMORY[0x1E4FBA408];
  uint64_t v31 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v50 = v31;
  v51[0] = v35;
  if (SBYTE7(v53) < 0) {
    operator delete((void *)v52);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v55);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    BOOL v12 = "";
    if (v10) {
      BOOL v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v9, a4, a7, a8, 0, a9);
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[3068], a2[3069], a2[3070], a2[3071]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v12 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 10000;
  }
  if (10 * v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10 * v11;
  }
  unsigned int v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v115 = 0;
  float v116 = &v115;
  if (v17 <= v19) {
    unsigned int v17 = v19;
  }
  int v118 = 0;
  uint64_t v117 = 0x2000000000;
  uint64_t v111 = 0;
  __int16 v112 = &v111;
  int v114 = 0;
  uint64_t v113 = 0x2000000000;
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v108);
  double Current = CFAbsoluteTimeGetCurrent();
  int v95 = v11;
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1) <= v17
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1) <= v14)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    int v94 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    unsigned int v62 = 0;
    uint64_t v63 = *(void *)(a1 + 32);
    do
    {
      if (v62 == *(_DWORD *)(v63 + 24)) {
        goto LABEL_91;
      }
      ++*((_DWORD *)v116 + 6);
      unint64_t v64 = IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v63, v62);
      unint64_t v65 = *(unsigned int *)(v64 + 3088);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v64, 1, (float *)keyExistsAndHasValidFormat, 0x300uLL);
      if (*((void *)&v108 + 1))
      {
        uint8x8_t v66 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v108 + 8));
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          unint64_t v67 = v65;
          if (*((void *)&v108 + 1) <= v65) {
            unint64_t v67 = v65 % *((void *)&v108 + 1);
          }
        }
        else
        {
          unint64_t v67 = (DWORD2(v108) - 1) & v65;
        }
        std::locale v68 = *(uint64_t **)(v108 + 8 * v67);
        if (v68)
        {
          std::locale v68 = (uint64_t *)*v68;
          if (v68)
          {
            if (v66.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v70 = v68[1];
                if (v70 == v65)
                {
                  if (*((_DWORD *)v68 + 4) == v65) {
                    goto LABEL_81;
                  }
                }
                else if ((v70 & (*((void *)&v108 + 1) - 1)) != v67)
                {
                  goto LABEL_80;
                }
                std::locale v68 = (uint64_t *)*v68;
                if (!v68) {
                  goto LABEL_81;
                }
              }
            }
            do
            {
              unint64_t v69 = v68[1];
              if (v69 == v65)
              {
                if (*((_DWORD *)v68 + 4) == v65) {
                  break;
                }
              }
              else
              {
                if (v69 >= *((void *)&v108 + 1)) {
                  v69 %= *((void *)&v108 + 1);
                }
                if (v69 != v67) {
                  goto LABEL_80;
                }
              }
              std::locale v68 = (uint64_t *)*v68;
            }
            while (v68);
          }
        }
      }
      else
      {
LABEL_80:
        std::locale v68 = 0;
      }
LABEL_81:
      float v71 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v68)
        {
          int v74 = *__error();
          long long v75 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v65;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v71;
            _os_log_impl(&dword_1BD672000, v75, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v74;
        }
        *(_OWORD *)keyExistsAndHasValidFormat = *(_OWORD *)(v64 + 3072);
        *(_DWORD *)&keyExistsAndHasValidFormat[16] = v65;
        *(float *)&keyExistsAndHasValidFormat[20] = v71;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(a4, (long long *)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v68)
        {
          int v72 = *__error();
          int v73 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v65;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v73, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v72;
        }
        ++*((_DWORD *)v112 + 6);
      }
      ++v62;
    }
    while (v63 == *(void *)(a1 + 32));
    float v91 = __si_assert_copy_extra_329();
    long long v92 = v91;
    long long v93 = "";
    if (v91) {
      long long v93 = v91;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v93);
    free(v92);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_119;
  }
  if (!AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v21 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 40;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v23 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      int v24 = v23;
    }
    else {
      int v24 = 45;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v25 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v26 = keyExistsAndHasValidFormat[0];
    int v27 = 8 * v25;
    int v28 = v24 * v24;
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v29 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v30 = keyExistsAndHasValidFormat[0];
    if (v29 <= 0x12) {
      char v31 = 18;
    }
    else {
      char v31 = v29;
    }
    int v32 = v11;
    char v33 = v31 - 3;
    unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    if (v30) {
      char v35 = v33;
    }
    else {
      char v35 = 17;
    }
    int v11 = v32;
    unsigned int v36 = v34 >> v35;
    if (v36 <= 8) {
      int v37 = 8;
    }
    else {
      int v37 = v36;
    }
    int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    if (v26) {
      int v39 = v27;
    }
    else {
      int v39 = 800;
    }
    unsigned int v40 = v39 * v38 / (v28 * v37);
    if (v22 < v40) {
      unsigned int v40 = v22;
    }
    if (v40 <= v17) {
      CFIndex AppIntegerValue = v17;
    }
    else {
      CFIndex AppIntegerValue = v40;
    }
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v46 = *(void *)(a1 + 64);
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 72);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = *(void *)(a1 + 80);
  uint64_t v47 = *(std::__shared_weak_count **)(a1 + 88);
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
  uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
  uint64_t v105 = 0;
  unsigned int v106 = 0;
  uint64_t v107 = 0;
  __int16 v119 = &v105;
  unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
  if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
  {
    int v103 = 0;
    uint64_t v104 = 0;
    unint64_t v102 = 0;
    goto LABEL_99;
  }
  do
  {
    int v52 = *v50;
    v50 += 2;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v119, v52);
  }
  while (v50 != v49);
  long long v53 = v105;
  int v103 = 0;
  uint64_t v104 = 0;
  unint64_t v102 = 0;
  int64_t v54 = v106 - (unsigned char *)v105;
  if (v106 == v105) {
    goto LABEL_99;
  }
  if (v54 < 0) {
LABEL_119:
  }
    abort();
  uint64_t v55 = (char *)operator new(v106 - (unsigned char *)v105);
  long long v56 = &v55[4 * (v54 >> 2)];
  unint64_t v102 = v55;
  uint64_t v104 = v56;
  memcpy(v55, v53, v54);
  int v103 = v56;
LABEL_99:
  v97[0] = MEMORY[0x1E4F143A8];
  v97[1] = 1174405120;
  v97[2] = ___ZNK22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v97[3] = &unk_1F1815D70;
  v97[6] = a1;
  v97[7] = a2;
  v97[4] = &v115;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v98, (uint64_t)&v108);
  float v101 = a6;
  v97[5] = &v111;
  float v100 = a4;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v102, v97);
  if (v102)
  {
    int v103 = v102;
    operator delete(v102);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  long long v87 = v99;
  int v11 = v95;
  if (v99)
  {
    do
    {
      uint64_t v88 = (void *)*v87;
      operator delete(v87);
      long long v87 = v88;
    }
    while (v88);
  }
  unint64_t v89 = v98;
  int64_t v98 = 0;
  if (v89) {
    operator delete(v89);
  }
  if (v105)
  {
    unsigned int v106 = v105;
    operator delete(v105);
  }
  if (*(void *)keyExistsAndHasValidFormat)
  {
    *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  unint64_t v90 = v51 >> 3;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  int v94 = v90;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_91:
  int v76 = *__error();
  long long v77 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    int v78 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v79 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    int v80 = *((_DWORD *)v112 + 6);
    int v81 = *((_DWORD *)v116 + 6);
    unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    CFAbsoluteTime v83 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v78;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v94;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v79;
    __int16 v121 = 1024;
    int v122 = v80;
    __int16 v123 = 1024;
    int v124 = v81;
    __int16 v125 = 2048;
    unint64_t v126 = v82;
    __int16 v127 = 2048;
    CFAbsoluteTime v128 = v83 - Current;
    _os_log_impl(&dword_1BD672000, v77, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v76;
  char v84 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      unint64_t v85 = (void *)*v84;
      operator delete(v84);
      char v84 = v85;
    }
    while (v85);
  }
  long long v86 = (void *)v108;
  *(void *)&long long v108 = 0;
  if (v86) {
    operator delete(v86);
  }
  _Block_object_dispose(&v111, 8);
  _Block_object_dispose(&v115, 8);
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(uint64_t a1)
{
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  int64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  int v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v4)
  {
    os_unfair_lock_unlock(v2);
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(v5 + 68);
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v8 = __si_assert_copy_extra_329();
    uint64_t v9 = v8;
    uint64_t v10 = "";
    if (v8) {
      uint64_t v10 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2437, "cur.partitions != nullptr", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v2);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = *(unsigned int *)(v5 + 68);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

unint64_t IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    int v4 = __si_assert_copy_extra_329();
    uint64_t v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unint64_t v2 = *(void **)(a1 + 16);
  return vi_onefixedsize_memory_allocator::getPtr(v2, a2, 3092);
}

void MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(void *a1, long long *a2)
{
  uint64_t v5 = (char *)a1[1];
  int v4 = (float *)a1[2];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - v5) >> 3);
  if (v6 >= *(unsigned int *)a1)
  {
    if (*((float *)a2 + 5) < *((float *)v5 + 5))
    {
      if ((char *)v4 - v5 >= 25)
      {
        uint64_t v10 = 0;
        long long v43 = *(_OWORD *)v5;
        uint64_t v45 = *((void *)v5 + 2);
        int v11 = (float *)a1[1];
        do
        {
          unsigned int v13 = v11;
          uint64_t v14 = v10 + 1;
          v11 += 6 * v10 + 6;
          uint64_t v15 = 2 * v10;
          uint64_t v10 = (2 * v10) | 1;
          uint64_t v16 = v15 + 2;
          if (v16 < (uint64_t)v6 && v13[6 * v14 + 5] < v11[11])
          {
            v11 += 6;
            uint64_t v10 = v16;
          }
          long long v12 = *(_OWORD *)v11;
          *((void *)v13 + 2) = *((void *)v11 + 2);
          *(_OWORD *)unsigned int v13 = v12;
        }
        while (v10 <= (uint64_t)((v6 - 2) >> 1));
        int v30 = (long long *)(v4 - 6);
        if (v11 == v4 - 6)
        {
          *((void *)v11 + 2) = v45;
          *(_OWORD *)int v11 = v43;
        }
        else
        {
          long long v31 = *v30;
          *((void *)v11 + 2) = *((void *)v4 - 1);
          *(_OWORD *)int v11 = v31;
          *int v30 = v43;
          *((void *)v4 - 1) = v45;
          uint64_t v32 = (char *)v11 - v5 + 24;
          if (v32 >= 25)
          {
            unint64_t v33 = (v32 / 0x18uLL - 2) >> 1;
            float v34 = v11[5];
            if (*(float *)&v5[24 * v33 + 20] < v34)
            {
              int v48 = *((_DWORD *)v11 + 4);
              long long v47 = *(_OWORD *)v11;
              do
              {
                char v35 = v11;
                int v11 = (float *)&v5[24 * v33];
                long long v36 = *(_OWORD *)v11;
                *((void *)v35 + 2) = *((void *)v11 + 2);
                *(_OWORD *)char v35 = v36;
                if (!v33) {
                  break;
                }
                unint64_t v33 = (v33 - 1) >> 1;
              }
              while (*(float *)&v5[24 * v33 + 20] < v34);
              *(_OWORD *)int v11 = v47;
              *((_DWORD *)v11 + 4) = v48;
              v11[5] = v34;
            }
          }
        }
        int v4 = (float *)a1[2];
      }
      long long v37 = *a2;
      *((void *)v4 - 1) = *((void *)a2 + 2);
      *(_OWORD *)(v4 - 6) = v37;
      uint64_t v38 = a1[1];
      uint64_t v39 = a1[2];
      if (v39 - v38 >= 25)
      {
        unint64_t v40 = ((v39 - v38) / 0x18uLL - 2) >> 1;
        float v26 = *(float *)(v39 - 4);
        if (*(float *)(v38 + 24 * v40 + 20) < v26)
        {
          int v27 = (float *)(v39 - 24);
          long long v44 = *(_OWORD *)(v39 - 24);
          int v46 = *(_DWORD *)(v39 - 8);
          do
          {
            int v41 = v27;
            int v27 = (float *)(v38 + 24 * v40);
            long long v42 = *(_OWORD *)v27;
            *((void *)v41 + 2) = *((void *)v27 + 2);
            *(_OWORD *)int v41 = v42;
            if (!v40) {
              break;
            }
            unint64_t v40 = (v40 - 1) >> 1;
          }
          while (*(float *)(v38 + 24 * v40 + 20) < v26);
          goto LABEL_43;
        }
      }
    }
  }
  else
  {
    unint64_t v7 = a1[3];
    if ((unint64_t)v4 >= v7)
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v5) >> 3);
      if (2 * v17 <= v6 + 1) {
        uint64_t v18 = v6 + 1;
      }
      else {
        uint64_t v18 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v20 = 24 * v19;
      unsigned int v21 = (char *)operator new(24 * v19);
      unsigned int v22 = &v21[8 * (((char *)v4 - v5) >> 3)];
      *(_OWORD *)unsigned int v22 = *a2;
      *((void *)v22 + 2) = *((void *)a2 + 2);
      uint64_t v9 = (float *)(v22 + 24);
      if (v4 != (float *)v5)
      {
        do
        {
          long long v23 = *(_OWORD *)(v4 - 6);
          *((void *)v22 - 1) = *((void *)v4 - 1);
          *(_OWORD *)(v22 - 24) = v23;
          v22 -= 24;
          v4 -= 6;
        }
        while (v4 != (float *)v5);
        int v4 = (float *)v5;
      }
      a1[1] = v22;
      a1[2] = v9;
      a1[3] = &v21[v20];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      long long v8 = *a2;
      *((void *)v4 + 2) = *((void *)a2 + 2);
      *(_OWORD *)int v4 = v8;
      uint64_t v9 = v4 + 6;
    }
    a1[2] = v9;
    uint64_t v24 = a1[1];
    if ((uint64_t)v9 - v24 >= 25)
    {
      unint64_t v25 = (((unint64_t)v9 - v24) / 0x18 - 2) >> 1;
      float v26 = *(v9 - 1);
      if (*(float *)(v24 + 24 * v25 + 20) < v26)
      {
        int v27 = v9 - 6;
        long long v44 = *(_OWORD *)(v9 - 6);
        int v46 = *((_DWORD *)v9 - 2);
        do
        {
          int v28 = v27;
          int v27 = (float *)(v24 + 24 * v25);
          long long v29 = *(_OWORD *)v27;
          *((void *)v28 + 2) = *((void *)v27 + 2);
          *(_OWORD *)int v28 = v29;
          if (!v25) {
            break;
          }
          unint64_t v25 = (v25 - 1) >> 1;
        }
        while (*(float *)(v24 + 24 * v25 + 20) < v26);
LABEL_43:
        *(_OWORD *)int v27 = v44;
        *((_DWORD *)v27 + 4) = v46;
        v27[5] = v26;
      }
    }
  }
}

void ___ZNK22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v4 + 32) + 16), *a3, 3092);
  unint64_t v6 = *(const float **)(a1 + 56);
  *(_DWORD *)long long v23 = 2139095039;
  vDSP_distancesq(v6, 1, (const float *)Ptr, 1, (float *)v23, 0x300uLL);
  float v7 = *(float *)v23;
  unint64_t v8 = *(unsigned int *)(Ptr + 3088);
  int8x8_t v9 = *(int8x8_t *)(a1 + 72);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = *(unsigned int *)(Ptr + 3088);
      if (*(void *)&v9 <= v8) {
        unint64_t v11 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v11 = (v9.i32[0] - 1) & v8;
    }
    long long v12 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v11);
    if (v12)
    {
      long long v12 = (uint64_t *)*v12;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          uint64_t v13 = *(void *)&v9 - 1;
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == v8) {
                goto LABEL_22;
              }
            }
            else if ((v15 & v13) != v11)
            {
              goto LABEL_21;
            }
            long long v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              break;
            }
          }
          else
          {
            if (v14 >= *(void *)&v9) {
              v14 %= *(void *)&v9;
            }
            if (v14 != v11) {
              goto LABEL_21;
            }
          }
          long long v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
LABEL_21:
    long long v12 = 0;
  }
LABEL_22:
  float v16 = *(float *)(a1 + 112);
  if (v16 == 0.0 || *(float *)v23 <= v16)
  {
    if (v12)
    {
      int v18 = *__error();
      unint64_t v19 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v23 = 67109376;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        _os_log_impl(&dword_1BD672000, v19, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", v23, 0x12u);
      }
      *__error() = v18;
    }
    *(_OWORD *)long long v23 = *(_OWORD *)(Ptr + 3072);
    *(_DWORD *)&v23[16] = v8;
    *(float *)&double v24 = v7;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(*(void **)(a1 + 104), (long long *)v23);
  }
  else
  {
    if (v12)
    {
      int v20 = *__error();
      unsigned int v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        double v22 = *(float *)(a1 + 112);
        *(_DWORD *)long long v23 = 67109632;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        *(_WORD *)&v23[18] = 2048;
        double v24 = v22;
        _os_log_impl(&dword_1BD672000, v21, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", v23, 0x1Cu);
      }
      *__error() = v20;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::createCandidateQueue()
{
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNNForTest(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  unint64_t v6 = __si_assert_copy_extra_329();
  float v7 = v6;
  unint64_t v8 = "";
  if (v6) {
    unint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNN(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    unint64_t v14 = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    uint64_t v15 = &unk_1E63456E0;
    uint64_t v16 = a9;
    operator new();
  }
  int8x8_t v9 = __si_assert_copy_extra_329();
  uint8x8_t v10 = v9;
  unint64_t v11 = "";
  if (v9) {
    unint64_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::restoreUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_read_vint32((uint64_t)a3);
  int v41 = result;
  if (result)
  {
    int v6 = 0;
    uint64_t v40 = a1 + 48;
    do
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      float v7 = __dst;
      bzero(__dst, 0xC00uLL);
      int v43 = 0;
      CIReadPostings(a3, a2, (uint64_t)&v45, &v43);
      unint64_t v8 = *((void *)a3 + 4);
      size_t v9 = *((void *)a3 + 5);
      if (v9 + 3072 > v8)
      {
        int v20 = (char *)*((void *)a3 + 6);
        unint64_t v21 = v8 - v9;
        if (v8 != v9)
        {
          memcpy(__dst, &v20[v9], v8 - v9);
          *((void *)a3 + 5) = v8;
          size_t v9 = v8;
        }
        uint64_t v22 = *a3;
        off_t __offseta = *((void *)a3 + 3);
        long long v23 = v20;
        while (1)
        {
          unint64_t v24 = pread(v22, v23, v9, __offseta);
          if (v24 != -1) {
            break;
          }
          uint64_t v25 = g_prot_error_callback;
          if (!g_prot_error_callback) {
            break;
          }
          float v26 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v25 + 16))(v25, v22, *v26, 4) & 1) == 0)goto LABEL_40; {
        }
          }
        if (v24 != -1)
        {
          *((void *)a3 + 4) = v24;
          *((void *)a3 + 5) = 0;
          off_t v27 = *((void *)a3 + 3) + v24;
          *((void *)a3 + 3) = v27;
          if (!v24) {
            goto LABEL_7;
          }
          float v7 = &__dst[v21];
          size_t v10 = 3072 - v21;
          if (3072 - v21 <= v24)
          {
            size_t v9 = 0;
            goto LABEL_6;
          }
          off_t v37 = v27;
          off_t __offsetb = v24;
          while (1)
          {
            int v28 = (void *)*((void *)a3 + 6);
            memcpy(v7, v28, __offsetb);
            size_t v29 = __offsetb;
            *((void *)a3 + 5) = __offsetb;
            uint64_t v30 = *a3;
            while (1)
            {
              unint64_t v31 = pread(v30, v28, v29, v37);
              if (v31 != -1) {
                break;
              }
              uint64_t v32 = g_prot_error_callback;
              if (!g_prot_error_callback) {
                break;
              }
              unint64_t v33 = __error();
              char v34 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v32 + 16))(v32, v30, *v33, 4);
              size_t v29 = __offsetb;
              if ((v34 & 1) == 0) {
                goto LABEL_40;
              }
            }
            off_t v35 = __offsetb;
            if (v31 == -1) {
              break;
            }
            *((void *)a3 + 4) = v31;
            *((void *)a3 + 5) = 0;
            off_t v36 = *((void *)a3 + 3) + v31;
            *((void *)a3 + 3) = v36;
            if (!v31) {
              goto LABEL_7;
            }
            off_t v37 = v36;
            off_t __offsetb = v31;
            size_t v9 = 0;
            v7 += v35;
            v10 -= v35;
            if (v10 <= v31) {
              goto LABEL_6;
            }
          }
        }
LABEL_40:
        a3[4] = *__error();
      }
      else
      {
        size_t v10 = 3072;
LABEL_6:
        memcpy(v7, (const void *)(*((void *)a3 + 6) + v9), v10);
        *((void *)a3 + 5) = v9 + v10;
      }
LABEL_7:
      unsigned int vint32 = store_stream_read_vint32((uint64_t)a3);
      uint64_t v12 = v45;
      uint64_t v13 = v46;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
      unint64_t v14 = *(std::__shared_weak_count **)(a1 + 120);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 136);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        uint64_t v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)v16 + 384) = v12;
        *((void *)v16 + 385) = v13;
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        unint64_t v17 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)v17 + 384) = v12;
        *((void *)v17 + 385) = v13;
      }
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      __int16 v18 = *(_WORD *)(a1 + 76);
      int v19 = *(_DWORD *)(a1 + 156);
      v47[0] = *(_DWORD *)(a1 + 160);
      v47[1] = v19;
      __int16 v48 = v18;
      uint64_t result = *(void *)(a1 + 176);
      if (result)
      {
        if (*(_DWORD *)(result + 216) == -270471200) {
          uint64_t result = data_map_ext_restore_data(result, vint32, __dst, 0xC00uLL, v47);
        }
      }
      ++v6;
    }
    while (v6 != v41);
  }
  return result;
}

_DWORD *IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, float a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = a4;
  float v73 = a5;
  if (*(unsigned char *)(a1 + 144))
  {
    int v52 = __si_assert_copy_extra_329();
    long long v53 = v52;
    int64_t v54 = "";
    if (v52) {
      int64_t v54 = v52;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v54);
    goto LABEL_102;
  }
  if (!a2)
  {
    uint64_t v55 = __si_assert_copy_extra_329();
    long long v53 = v55;
    long long v56 = "";
    if (v55) {
      long long v56 = v55;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v56);
    goto LABEL_102;
  }
  unsigned int Vector = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, (uint64_t)a3, (int *)&v74, &v73, a2);
  uint64_t v9 = v74;
  if (v74 == -1)
  {
    int v57 = __si_assert_copy_extra_329();
    long long v58 = v57;
    int v59 = "";
    if (v57) {
      int v59 = v57;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v59);
    goto LABEL_92;
  }
  if (Vector != -1)
  {
    unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), Vector, 3092);
    if (Ptr[772] == a2) {
      return Ptr;
    }
    uint64_t v72 = 0;
    unsigned int data = (const void *)data_map_get_data(*(void *)(a1 + 128), a2, &v72);
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2586;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = a2;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = data;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v12;
    if (v72 < 1)
    {
      int v19 = *__error();
      uint64_t v32 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2595;
        _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v72 != 3072)
      {
        unint64_t v67 = __si_assert_copy_extra_329();
        long long v53 = v67;
        std::locale v68 = "";
        if (v67) {
          std::locale v68 = v67;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v68);
        goto LABEL_102;
      }
      if (!data || !memcmp(data, a3, 0xC00uLL)) {
        goto LABEL_46;
      }
      int v14 = *__error();
      uint64_t v15 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2590;
        _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v14;
      int v16 = *__error();
      unint64_t v17 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v72);
        __int16 v18 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v18;
        _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v16;
      int v19 = *__error();
      int v20 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v72);
        unint64_t v21 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v21;
        _os_log_impl(&dword_1BD672000, v20, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v19;
LABEL_46:
    unint64_t v33 = (const void *)data_map_get_data(*(void *)(a1 + 128), Ptr[772], &v72);
    int v34 = *__error();
    off_t v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v49 = Ptr[772];
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2598;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = v49;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = v33;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v34;
    if (v72 < 1)
    {
      int v42 = *__error();
      uint64_t v45 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2607;
        _os_log_error_impl(&dword_1BD672000, v45, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
      }
      goto LABEL_68;
    }
    if (v72 == 3072)
    {
      size_t v36 = 3072;
      if (!v33 || !memcmp(v33, Ptr, 0xC00uLL)) {
        goto LABEL_69;
      }
      int v37 = *__error();
      uint64_t v38 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2602;
        _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v37;
      int v39 = *__error();
      uint64_t v40 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)v33, v72);
        int v41 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v41;
        _os_log_impl(&dword_1BD672000, v40, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v39;
      int v42 = *__error();
      int v43 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)Ptr, v72);
        long long v44 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v44;
        _os_log_impl(&dword_1BD672000, v43, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
LABEL_68:
      *__error() = v42;
      size_t v36 = v72;
LABEL_69:
      if (!memcmp(a3, Ptr, v36))
      {
        int v46 = *__error();
        long long v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
        {
          int v50 = Ptr[772];
          *(_DWORD *)long long __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v78 = 1024;
          int v79 = 2610;
          __int16 v80 = 1024;
          *(_DWORD *)int v81 = a2;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v50;
          _os_log_fault_impl(&dword_1BD672000, v47, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v46;
        return Ptr;
      }
      unint64_t v64 = __si_assert_copy_extra_329();
      long long v58 = v64;
      unint64_t v65 = "";
      if (v64) {
        unint64_t v65 = v64;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v65);
LABEL_92:
      free(v58);
      if (__valid_fs(-1)) {
        uint64_t v66 = 2989;
      }
      else {
        uint64_t v66 = 3072;
      }
      *(_DWORD *)uint64_t v66 = -559038737;
      abort();
    }
    unint64_t v69 = __si_assert_copy_extra_329();
    long long v53 = v69;
    uint64_t v70 = "";
    if (v69) {
      uint64_t v70 = v69;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v70);
LABEL_102:
    free(v53);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  __src = (void *)a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 72);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v24 = *(_DWORD **)(a1 + 80);
  long long v23 = *(std::__shared_weak_count **)(a1 + 88);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  uint64_t v25 = *(void *)(a1 + 32);
  size_t OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(void *)(v25 + 16), 0xC14u);
  uint64_t v27 = *(unsigned int *)(v25 + 24);
  if (OffsetFromEnd != v27)
  {
    int v28 = *__error();
    size_t v29 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      int v51 = *(_DWORD *)(v25 + 24);
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "newEntry";
      __int16 v78 = 1024;
      int v79 = 1882;
      __int16 v80 = 2048;
      *(void *)int v81 = OffsetFromEnd;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v51;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
    }
    *__error() = v28;
    uint64_t v27 = *(unsigned int *)(v25 + 24);
    if (OffsetFromEnd != v27)
    {
      unsigned int v62 = __si_assert_copy_extra_329();
      long long v53 = v62;
      uint64_t v63 = "";
      if (v62) {
        uint64_t v63 = v62;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v63);
      goto LABEL_102;
    }
  }
  *(_DWORD *)(v25 + 24) = v27 + 1;
  unint64_t v30 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v25 + 16), OffsetFromEnd, 3092);
  memcpy((void *)v30, __src, 0xC00uLL);
  *(_OWORD *)(v30 + 3072) = 0u;
  *(_DWORD *)(v30 + 3088) = a2;
  if (*(_DWORD *)(v25 + 24) == 1) {
    *(_DWORD *)(v25 + 36) = a2;
  }
  *(_DWORD *)(v25 + 40) = a2;
  (*(void (**)(_DWORD *, uint64_t, size_t, float))(*(void *)v24 + 56))(v24, v9, OffsetFromEnd, v73);
  uint64_t v31 = *(void *)(a1 + 32);
  if (v24[18] != *(_DWORD *)(v31 + 24))
  {
    int v60 = __si_assert_copy_extra_329();
    long long v53 = v60;
    double v61 = "";
    if (v60) {
      double v61 = v60;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v61);
    goto LABEL_102;
  }
  unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(v31 + 16), OffsetFromEnd, 3092);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return Ptr;
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  size_t v10 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 72);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *(_DWORD **)(a1 + 80);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 140) == -1)
    {
      int v34 = 0;
      off_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      int v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          float v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          off_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      long long v23 = __si_assert_copy_extra_329();
      unint64_t v21 = v23;
      unint64_t v24 = "";
      if (v23) {
        unint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      int v20 = __si_assert_copy_extra_329();
      unint64_t v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  int v34 = 0;
  off_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi768EERjRfj_block_invoke;
  v32[3] = &unk_1E6345600;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi768EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 140)) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    int v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      uint64_t result = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 3092);
      if (v15 != *(_DWORD *)(result + 3088)) {
        return result;
      }
      *(float *)&uint64_t v6 = *a3;
    }
    int v16 = *(const void **)(v8 + 56);
    unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 3092);
    uint64_t result = memcmp(v16, Ptr, 0xC00uLL);
    if (!result)
    {
      *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

size_t store_stream_read_bytes(unsigned int *a1, char *__dst)
{
  unint64_t v2 = __dst;
  size_t v4 = *((void *)a1 + 4);
  uint64_t v5 = *((void *)a1 + 5);
  if (v5 + 1 > v4)
  {
    size_t v6 = v4 - v5;
    if (v4 != v5)
    {
      memcpy(__dst, (const void *)(*((void *)a1 + 6) + v5), v4 - v5);
      size_t v4 = *((void *)a1 + 4);
      *((void *)a1 + 5) += v6;
    }
    unint64_t v10 = prot_pread(*a1, *((void **)a1 + 6), v4, *((void *)a1 + 3));
    if (v10 == -1)
    {
      size_t v6 = 0;
    }
    else
    {
      *((void *)a1 + 4) = v10;
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 3) += v10;
      if (!v10)
      {
        size_t v8 = 0;
        return v6 + v8;
      }
      v2 += v6;
      size_t v7 = 1 - v6;
      if (1 - v6 <= v10)
      {
        uint64_t v5 = 0;
        goto LABEL_3;
      }
      size_t __n = v10;
      while (1)
      {
        memcpy(v2, *((const void **)a1 + 6), __n);
        BOOL v11 = (void *)*((void *)a1 + 6);
        *((void *)a1 + 5) += __n;
        unint64_t v12 = prot_pread(*a1, v11, *((void *)a1 + 4), *((void *)a1 + 3));
        if (v12 == -1) {
          break;
        }
        *((void *)a1 + 4) = v12;
        *((void *)a1 + 5) = 0;
        *((void *)a1 + 3) += v12;
        if (!v12)
        {
          size_t v8 = v6;
          size_t v6 = __n;
          return v6 + v8;
        }
        uint64_t v5 = 0;
        v2 += __n;
        v7 -= __n;
        v6 += __n;
        size_t __n = v12;
        if (v7 <= v12) {
          goto LABEL_3;
        }
      }
    }
    a1[4] = *__error();
    size_t v8 = v6;
    size_t v6 = 0;
    return v6 + v8;
  }
  size_t v6 = 0;
  size_t v7 = 1;
LABEL_3:
  memcpy(v2, (const void *)(*((void *)a1 + 6) + v5), v7);
  *((void *)a1 + 5) += v7;
  size_t v8 = v6;
  size_t v6 = v7;
  return v6 + v8;
}

void *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::storeUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(*(void *)(a1 + 80) + 24));
  unsigned int v7 = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  while (v7 != *(_DWORD *)(v8 + 24))
  {
    unint64_t v9 = IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v8, v7);
    CIWritePostings((uint64_t)a3, a2, 0, (unsigned int *)(v9 + 3072), 0, 0);
    unint64_t v11 = *((void *)a3 + 4);
    uint64_t v10 = *((void *)a3 + 5);
    if (v10 + 3072 >= v11)
    {
      size_t v13 = 3072;
      unint64_t v12 = (char *)v9;
      while (1)
      {
        uint64_t v14 = v11 - v10;
        memcpy((void *)(*((void *)a3 + 6) + v10), v12, v11 - v10);
        *((void *)a3 + 5) += v14;
        if (store_stream_flush(a3, 0)) {
          break;
        }
        v12 += v14;
        v13 -= v14;
        unint64_t v11 = *((void *)a3 + 4);
        uint64_t v10 = *((void *)a3 + 5);
        if (v10 + v13 < v11) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      unint64_t v12 = (char *)v9;
      size_t v13 = 3072;
LABEL_5:
      memcpy((void *)(*((void *)a3 + 6) + v10), v12, v13);
      *((void *)a3 + 5) += v13;
    }
    uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(v9 + 3088));
    ++v7;
    if (v8 != *(void *)(a1 + 80))
    {
      int v15 = __si_assert_copy_extra_329();
      int v16 = v15;
      unsigned int v17 = "";
      if (v15) {
        unsigned int v17 = v15;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v17);
      free(v16);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::rename(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  unint64_t v12 = *(std::__shared_weak_count **)(a1 + 120);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 128);
  size_t v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 80);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 71) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 48), *(void *)(v16 + 56));
  }
  else {
    std::string buf = *(std::string *)(v16 + 48);
  }
  MEMORY[0x1C1880BF0](v16 + 48, a2);
  int v17 = *__error();
  uint64_t v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__s, v16);
    int v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)unint64_t v24 = 136315394;
    uint64_t v25 = v19;
    __int16 v26 = 2080;
    uint64_t v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status(uint64_t a1, uint64_t a2)
{
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  uint64_t v29 = 0;
  long long v28 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v26, 0, sizeof(v26));
  uint64_t v24 = 0;
  uint64_t v22 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v30 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v25 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v23 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v23 + *(void *)(v23 - 24)) = v6;
  uint64_t v24 = 0;
  std::string::size_type v7 = (std::ios_base *)((char *)&v23 + *(void *)(v23 - 24));
  std::ios_base::init(v7, v26);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v25 = v5[4];
  *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v8;
  uint64_t v23 = v5[1];
  *(uint64_t *)((char *)&v23 + *(void *)(v23 - 24)) = v5[6];
  uint64_t v30 = v3;
  uint64_t v23 = v22;
  uint64_t v25 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v26[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v28 = 0u;
  LODWORD(v29) = 24;
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v11 = a2 + 48;
  uint64_t v10 = v12;
  int v13 = *(char *)(v11 + 23);
  if (v13 >= 0) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v10;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    uint64_t v15 = *(void *)(v11 + 8);
  }
  uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, v14, v15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
  int v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)")[", 2);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
  int v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
  std::stringbuf::str();
  uint64_t v23 = *v5;
  uint64_t v20 = v5[9];
  *(uint64_t *)((char *)&v23 + *(void *)(v23 - 24)) = v5[8];
  uint64_t v25 = v20;
  *(void *)&v26[0] = v9;
  if (SBYTE7(v28) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v30);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::makePurgeable(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *__error();
  uint64_t v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    int v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::makeReadOnly(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 80);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v5);
      uint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v15 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 120);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 128);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
    (*(void (**)(uint64_t))(*(void *)v11 + 120))(v11);
    *(unsigned char *)(a1 + 192) = 1;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 144))
  {
    int v2 = *__error();
    os_log_type_t v3 = _SILogForLogForCategory(16);
    os_log_type_t v4 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v3, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1BD672000, v3, v4, "*warn* call flush on readOnly index.", v11, 2u);
    }
    *__error() = v2;
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 16) + 40) = 0;
    std::string::size_type v7 = (os_unfair_lock_s *)(a1 + 96);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(void *)(a1 + 80);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 88);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 112))(v10, a2);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

int *IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v2 = *__error();
  os_log_type_t v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, a1);
    if (v7 >= 0) {
      os_log_type_t v4 = __p;
    }
    else {
      os_log_type_t v4 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v9 = v4;
    _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "truncate VectorStore %s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = __error();
  int *result = v2;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::truncate(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    int v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(*(void *)(a1 + 80));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    int v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 128);
    char v7 = *(std::__shared_weak_count **)(a1 + 136);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::unlink(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  os_log_type_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 80);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v14 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::subvert(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_log_type_t v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v8 = (os_unfair_lock_s *)(a2 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 144));
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 120);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v8);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 176))(v7, v11);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

int *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::compact(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    _os_log_impl(&dword_1BD672000, v5, v6, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  uint64_t result = __error();
  int *result = v4;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    int v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::flush(uint64_t a1, uint64_t a2)
{
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 128);
  int v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 88);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  __int16 v19 = ___ZNK22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  int v20 = &unk_1E6345628;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    ((void (*)(void *, long long *, char *))v19)(v18, &v32, &v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  int v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void ___ZNK22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  int v1 = v0;
  int v2 = "";
  if (v0) {
    int v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2544, "0", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 140) != -1)
  {
    os_log_type_t v3 = __si_assert_copy_extra_329();
    int v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2797, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  *(_DWORD *)(a1 + 140) = result;
  return result;
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 140) == -1)
  {
    int v19 = __si_assert_copy_extra_329();
    uint64_t v20 = v19;
    uint64_t v21 = "";
    if (v19) {
      uint64_t v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2802, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  *(_DWORD *)(a1 + 140) = -1;
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  uint64_t v31 = 0;
  long long v30 = 0u;
  *(_OWORD *)long long v29 = 0u;
  uint64_t v26 = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v22 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v32 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 64;
  int v4 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v25 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v5;
  uint64_t v26 = 0;
  os_log_type_t v6 = (std::ios_base *)((char *)&v25 + *(void *)(v25 - 24));
  std::ios_base::init(v6, v28);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  uint64_t v7 = v4[5];
  uint64_t v27 = v4[4];
  *(uint64_t *)((char *)&v27 + *(void *)(v27 - 24)) = v7;
  uint64_t v25 = v4[1];
  *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v4[6];
  uint64_t v32 = v2;
  uint64_t v25 = v22;
  uint64_t v27 = v3;
  std::streambuf::basic_streambuf();
  uint64_t v8 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v28[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)long long v29 = 0u;
  long long v30 = 0u;
  LODWORD(v31) = 24;
  int v9 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  int v10 = *(std::__shared_weak_count **)(a1 + 72);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 80);
  int v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v12 + 104))(v12, &v27, 0);
  int v13 = *__error();
  uint64_t v14 = _SILogForLogForCategory(16);
  os_log_type_t v15 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v14, v15))
  {
    std::stringbuf::str();
    int v16 = v24 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 136315138;
    int v43 = v16;
    _os_log_impl(&dword_1BD672000, v14, v15, "%s", buf, 0xCu);
    if (v24 < 0) {
      operator delete(__p);
    }
  }
  *__error() = v13;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v25 = *v4;
  uint64_t v17 = v4[9];
  *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v4[8];
  uint64_t v27 = v17;
  *(void *)&v28[0] = v8;
  if (SBYTE7(v30) < 0) {
    operator delete(v29[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v32);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  int v13 = "";
  if (v11) {
    int v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::mergeUpdateSet(_DWORD *result, uint64_t a2, char *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (os_log_type_t v6 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    int v19 = __si_assert_copy_extra_329();
    uint64_t v20 = v19;
    uint64_t v21 = "";
    if (v19) {
      uint64_t v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v22 = *__error();
    uint64_t v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 16))(v6);
      int v25 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 24))(v6);
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      __dst[0] = 67109888;
      __dst[1] = v24;
      LOWORD(__dst[2]) = 1024;
      *(_DWORD *)((char *)&__dst[2] + 2) = v25;
      HIWORD(__dst[3]) = 1024;
      __dst[4] = v26;
      LOWORD(__dst[5]) = 1024;
      *(_DWORD *)((char *)&__dst[5] + 2) = v27;
      _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", (uint8_t *)__dst, 0x1Au);
    }
    uint64_t result = __error();
    int *result = v22;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = (uint64_t)(v6 + 12);
  uint64_t v12 = a4;
  while (v9 != *(_DWORD *)(v10 + 24))
  {
    unsigned int v16 = *(_DWORD *)(IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9)+ 3088);
    int v17 = (const void *)IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    memcpy(__dst, v17, sizeof(__dst));
    unint64_t v18 = IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    if (*(unsigned char *)(v18 + 3072))
    {
      if (*(_DWORD *)(v18 + 3076)) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
      uint64_t v14 = a5;
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = v12;
    }
    int v15 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v11, v16, __dst, 0xFFFFFFFF, 3.4028e38);
    uint64_t result = vi_memory_postings::push_posting(a3, v13, v15 + 768, v14);
    ++v9;
  }
  return result;
}

char *vi_memory_postings::push_posting(char *result, int a2, unsigned int *__src, uint64_t a4)
{
  int v7 = *__src & 1;
  if (__src[2])
  {
    int v8 = result;
    if (v7) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = 1;
    }
    uint64_t v10 = (atomic_uint *)(result + 12);
    unsigned int v11 = atomic_load((unsigned int *)result + 3);
    unsigned int v12 = v11 + v9;
    uint64_t v13 = *((unsigned int *)result + 2);
    if (v12 >= v13)
    {
      unsigned int v18 = 2 * v13;
      if (!v13) {
        unsigned int v18 = 0x4000;
      }
      *((_DWORD *)result + 2) = v18;
      if (my_vm_reallocate((void **)result, 12 * v13, 12 * v18, 243, *((void *)result + 2)))
      {
        int v19 = __si_assert_copy_extra_329();
        uint64_t v20 = v19;
        uint64_t v21 = "";
        if (v19) {
          uint64_t v21 = v19;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "DocPosting.h", 250, "0 == kr", v21);
        free(v20);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
    unsigned int add = atomic_fetch_add(v10, v9);
    if (v7) {
      size_t v15 = 16;
    }
    else {
      size_t v15 = 12;
    }
    uint64_t result = (char *)memcpy((void *)(*v8 + 12 * add), __src, v15);
    int v7 = 2 * add;
  }
  if (a2)
  {
    unsigned int v16 = v7 | 1;
    *((void *)__src + 1) = a4;
    int v17 = 2 * (a2 != 2);
  }
  else
  {
    __src[2] = a4;
    unsigned int v16 = v7 & 0xFFFFFFFE;
    int v17 = 1;
  }
  void *__src = v16;
  __src[1] = v17;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::mergeUpdateSet(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  unsigned int v11 = __si_assert_copy_extra_329();
  unsigned int v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::train(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    uint64_t v31 = __si_assert_copy_extra_329();
    uint64_t v32 = v31;
    long long v33 = "";
    if (v31) {
      long long v33 = v31;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v33);
    goto LABEL_54;
  }
  if (*v3 != a1)
  {
    long long v34 = __si_assert_copy_extra_329();
    uint64_t v32 = v34;
    long long v35 = "";
    if (v34) {
      long long v35 = v34;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v35);
LABEL_54:
    free(v32);
    if (__valid_fs(-1)) {
      uint64_t v36 = 2989;
    }
    else {
      uint64_t v36 = 3072;
    }
    *(_DWORD *)uint64_t v36 = -559038737;
LABEL_58:
    abort();
  }
  uint64_t v6 = a2;
  int v7 = (char *)operator new(8uLL);
  int v8 = v7;
  *(void *)int v7 = a1 + 48;
  if (v4 < 9) {
    goto LABEL_39;
  }
  int v9 = v7 + 8;
  unint64_t v10 = 1;
  unsigned int v11 = v7 + 8;
  uint64_t v37 = v6;
  do
  {
    uint64_t v13 = v3[v10];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v13 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v13 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v13 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v13 + 16))
    {
      long long v28 = __si_assert_copy_extra_329();
      long long v29 = v28;
      uint64_t v30 = "";
      if (v28) {
        uint64_t v30 = v28;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v30);
      free(v29);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v14 = v13 + 48;
    if (v9 < v11)
    {
      *(void *)int v9 = v14;
      unsigned int v12 = v9 + 8;
      goto LABEL_6;
    }
    uint64_t v15 = (v9 - v8) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_58;
    }
    if ((v11 - v8) >> 2 > v16) {
      unint64_t v16 = (v11 - v8) >> 2;
    }
    if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      __int16 v18 = operator new(8 * v17);
    }
    else
    {
      __int16 v18 = 0;
    }
    int v19 = &v18[8 * v15];
    unsigned int v11 = &v18[8 * v17];
    *(void *)int v19 = v14;
    unsigned int v12 = v19 + 8;
    if (v9 == v8)
    {
LABEL_36:
      operator delete(v8);
      goto LABEL_37;
    }
    unint64_t v20 = v9 - 8 - v8;
    if (v20 < 0x168)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v18[v9 - v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v9 - v8 - 8])
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      int v21 = v9;
      do
      {
LABEL_34:
        uint64_t v27 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v21 != v8);
      goto LABEL_35;
    }
    if ((unint64_t)(v8 - v18) < 0x20)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    uint64_t v22 = (v20 >> 3) + 1;
    int v21 = &v9[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v23 = &v18[8 * v15 - 16];
    int v24 = v9 - 16;
    uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v19 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_34;
    }
LABEL_35:
    if (v8) {
      goto LABEL_36;
    }
LABEL_37:
    int v8 = v19;
    uint64_t v6 = v37;
LABEL_6:
    ++v10;
    uint64_t v3 = *(void **)v6;
    int v9 = v12;
  }
  while (v10 < (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if (v8)
  {
LABEL_39:
    operator delete(v8);
  }
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::insertForTest(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    unsigned int v11 = v10;
    unsigned int v12 = "";
    if (v10) {
      unsigned int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1)) {
      uint64_t v13 = 2989;
    }
    else {
      uint64_t v13 = 3072;
    }
    *(_DWORD *)uint64_t v13 = -559038737;
    abort();
  }
  uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38);
  if (result[770])
  {
    int v9 = result[769] + 1;
  }
  else
  {
    result[770] = a7;
    int v9 = 1;
  }
  result[769] = v9;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::insertForMerge(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    int v8 = __si_assert_copy_extra_329();
    int v9 = v8;
    unint64_t v10 = "";
    if (v8) {
      unint64_t v10 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

char *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::insertVector(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7, uint64_t a8, char *a9)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    uint64_t v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unsigned int v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38)+ 768;
  return vi_memory_postings::push_posting(a9, a7, v11, a8);
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::bulkInsertForTest(_DWORD *result, char *a2, int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v21 = *a5++;
        unsigned int v20 = v21;
        int v23 = *a3++;
        int v22 = v23;
        uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v20, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[770])
        {
          int v19 = result[769] + 1;
        }
        else
        {
          result[770] = v22;
          int v19 = 1;
        }
        result[769] = v19;
        a2 += 3072;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v14 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v15 = *__error();
          unint64_t v16 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v25 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v15;
        }
        unsigned int v17 = a5[v10];
        int v18 = a3[v10];
        uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v17, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[770])
        {
          int v13 = result[769] + 1;
        }
        else
        {
          result[770] = v18;
          int v13 = 1;
        }
        result[769] = v13;
        a2 += 3072;
        uint64_t v10 = v14;
      }
      while (v9 != v14);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::shadow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 168))(v9, a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return 0;
    }
  }
  else if (!v7)
  {
    return 0;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return 0;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::validAddress(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    os_unfair_lock_unlock(v2);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))
      {
        a2 += 3072;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))break; {
        a2 += 3072;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    int v15 = v14;
    unint64_t v16 = "";
    if (v14) {
      unint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int Vector = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, a2, (int *)&v24, &v23, 0);
  if (Vector == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
    uint64_t v9 = *(void *)(a1 + 64);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 88);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke;
    v20[3] = &unk_1E63455D8;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke_1110;
      v15[3] = &unk_1F1815C00;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      unint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      int v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return Vector != -1;
}

int *___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(const void **)(a1 + 48);
  unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(*(void *)(a1 + 40) + 32) + 16), *(unsigned int *)a3, 3092);
  uint64_t result = (int *)memcmp(v8, Ptr, 0xC00uLL);
  if (!result)
  {
    int v11 = *__error();
    unsigned int v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v17 = a3[1];
      int v27 = 136315906;
      long long v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2760;
      __int16 v31 = 1024;
      *(_DWORD *)uint64_t v32 = a2;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v17;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&v27, 0x22u);
    }
    *__error() = v11;
    int v13 = *__error();
    uint64_t v14 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(_DWORD *)(a1 + 56);
      double v19 = *(float *)(a1 + 60);
      int v27 = 136315906;
      long long v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2761;
      __int16 v31 = 1024;
      *(_DWORD *)uint64_t v32 = v18;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v19;
      _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&v27, 0x22u);
    }
    *__error() = v13;
    int v15 = *__error();
    unint64_t v16 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      float v20 = *(float *)(a1 + 60);
      float v21 = a3[1];
      float v22 = vabds_f32(v20, v21);
      if (v20 == v21)
      {
        BOOL v23 = 1;
        BOOL v24 = 1;
      }
      else
      {
        float v25 = fabsf(v20);
        float v26 = fabsf(v21);
        BOOL v23 = v22 <= fmaxf(fminf(v26, v25) * 0.000015259, 0.000015259);
        BOOL v24 = v22 <= (float)(fmaxf(v25, v26) * 0.000015259);
      }
      int v27 = 136317186;
      long long v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2762;
      __int16 v31 = 2048;
      *(double *)uint64_t v32 = v22;
      *(_WORD *)&void v32[8] = 2048;
      *(void *)&v32[10] = 0x3810000000000000;
      __int16 v33 = 2048;
      uint64_t v34 = 0x3E80000000000000;
      __int16 v35 = 1024;
      BOOL v36 = v22 < 1.1755e-38;
      __int16 v37 = 1024;
      BOOL v38 = v22 < 0.00000011921;
      __int16 v39 = 1024;
      BOOL v40 = v23;
      __int16 v41 = 1024;
      BOOL v42 = v24;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&v27, 0x48u);
    }
    uint64_t result = __error();
    int *result = v15;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke_1110(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 40);
  unsigned int v8 = *(const void **)(a1 + 48);
  unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v9 + 32) + 16), *(unsigned int *)a3, 3092);
  if (!memcmp(v8, Ptr, 0xC00uLL))
  {
    int v11 = *__error();
    unsigned int v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v40 = a3[1];
      float __C = 4.8153e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2770;
      __int16 v100 = 1024;
      int v101 = a2;
      __int16 v102 = 2048;
      *(double *)int v103 = v40;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v11;
    int v13 = *(const float **)(a1 + 48);
    uint64_t v14 = (const float *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float __C = 3.4028e38;
    vDSP_distancesq(v13, 1, v14, 1, &__C, 0x300uLL);
    float v15 = __C;
    int v16 = *__error();
    double v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v41 = *(_DWORD *)(a1 + 88);
      float __C = 4.8153e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2772;
      __int16 v100 = 1024;
      int v101 = v41;
      __int16 v102 = 2048;
      *(double *)int v103 = v15;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v16;
    long long v93 = 0;
    int v94 = 0;
    uint64_t v95 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&v93);
    int v18 = *__error();
    double v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v42 = *(_DWORD *)v93;
      float v43 = *((float *)v93 + 1);
      int v44 = *((_DWORD *)v93 + 2);
      float v45 = *((float *)v93 + 3);
      BOOL v46 = v43 == v45 || vabds_f32(v43, v45) <= fmaxf(fminf(fabsf(v45), fabsf(v43)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2774;
      __int16 v100 = 1024;
      int v101 = v42;
      __int16 v102 = 2048;
      *(double *)int v103 = v43;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v44;
      __int16 v104 = 2048;
      double v105 = v45;
      __int16 v106 = 1024;
      LODWORD(v107) = v46;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v18;
    int v20 = *__error();
    float v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v47 = *(_DWORD *)v93;
      int v48 = *((_DWORD *)v93 + 2);
      BOOL v49 = *((float *)v93 + 1) == *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2775;
      __int16 v100 = 1024;
      int v101 = v47;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v48;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v49;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v20;
    int v22 = *__error();
    BOOL v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      int v50 = *(_DWORD *)v93;
      int v51 = *((_DWORD *)v93 + 2);
      BOOL v52 = *((float *)v93 + 1) < *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2776;
      __int16 v100 = 1024;
      int v101 = v50;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v51;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v52;
      _os_log_error_impl(&dword_1BD672000, v23, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v22;
    int v24 = *__error();
    float v25 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v53 = *(_DWORD *)v93;
      int v54 = *((_DWORD *)v93 + 2);
      BOOL v55 = *((float *)v93 + 1) > *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2777;
      __int16 v100 = 1024;
      int v101 = v53;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v54;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v55;
      _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v24;
    int v26 = *__error();
    int v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      int v56 = *(_DWORD *)v93;
      int v57 = *((_DWORD *)v93 + 2);
      float v58 = *((float *)v93 + 1);
      float v59 = *((float *)v93 + 3);
      double v60 = (float)(v58 - v59);
      float v61 = vabds_f32(v58, v59);
      if (v58 == v59)
      {
        BOOL v62 = 1;
        BOOL v63 = 1;
      }
      else
      {
        float v86 = fabsf(v58);
        float v87 = fabsf(v59);
        BOOL v62 = v61 <= fmaxf(fminf(v87, v86) * 0.000015259, 0.000015259);
        BOOL v63 = v61 <= (float)(fmaxf(v86, v87) * 0.000015259);
      }
      float __C = 4.8161e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2778;
      __int16 v100 = 1024;
      int v101 = v56;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v57;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v60;
      __int16 v104 = 2048;
      double v105 = 1.17549435e-38;
      __int16 v106 = 2048;
      uint64_t v107 = 0x3E80000000000000;
      __int16 v108 = 1024;
      BOOL v109 = v61 < 1.1755e-38;
      __int16 v110 = 1024;
      BOOL v111 = v61 < 0.00000011921;
      __int16 v112 = 1024;
      BOOL v113 = v62;
      __int16 v114 = 1024;
      BOOL v115 = v63;
      _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v26;
    float v91 = 0;
    uint64_t v92 = 0;
    std::string __p = 0;
    uint64_t v28 = *(void *)(a1 + 56);
    unint64_t v29 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v9 + 32) + 16), *(unsigned int *)a3, 3092);
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v28 + 80))(&__p, v28, v29, 2);
    int v30 = *__error();
    __int16 v31 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      int v64 = *(_DWORD *)__p;
      float v65 = *((float *)__p + 1);
      int v66 = *((_DWORD *)__p + 2);
      float v67 = *((float *)__p + 3);
      BOOL v68 = v65 == v67 || vabds_f32(v65, v67) <= fmaxf(fminf(fabsf(v67), fabsf(v65)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2781;
      __int16 v100 = 1024;
      int v101 = v64;
      __int16 v102 = 2048;
      *(double *)int v103 = v65;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v66;
      __int16 v104 = 2048;
      double v105 = v67;
      __int16 v106 = 1024;
      LODWORD(v107) = v68;
      _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v30;
    int v32 = *__error();
    __int16 v33 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      int v69 = *(_DWORD *)__p;
      int v70 = *((_DWORD *)__p + 2);
      BOOL v71 = *((float *)__p + 1) == *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2782;
      __int16 v100 = 1024;
      int v101 = v69;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v70;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v71;
      _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v32;
    int v34 = *__error();
    __int16 v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v72 = *(_DWORD *)__p;
      int v73 = *((_DWORD *)__p + 2);
      BOOL v74 = *((float *)__p + 1) < *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2783;
      __int16 v100 = 1024;
      int v101 = v72;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v73;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v74;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v34;
    int v36 = *__error();
    __int16 v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      int v75 = *(_DWORD *)__p;
      int v76 = *((_DWORD *)__p + 2);
      BOOL v77 = *((float *)__p + 1) > *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2784;
      __int16 v100 = 1024;
      int v101 = v75;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v76;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v77;
      _os_log_error_impl(&dword_1BD672000, v37, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v36;
    int v38 = *__error();
    __int16 v39 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      int v78 = *(_DWORD *)__p;
      int v79 = *((_DWORD *)__p + 2);
      float v80 = *((float *)__p + 1);
      float v81 = *((float *)__p + 3);
      float v82 = vabds_f32(v80, v81);
      BOOL v83 = (float)(v80 - v81) < 1.1755e-38;
      if (v80 == v81)
      {
        BOOL v84 = 1;
        BOOL v85 = 1;
      }
      else
      {
        float v88 = fabsf(v80);
        float v89 = fabsf(v81);
        BOOL v84 = v82 <= fmaxf(fminf(v89, v88) * 0.000015259, 0.000015259);
        BOOL v85 = v82 <= (float)(fmaxf(v88, v89) * 0.000015259);
      }
      float __C = 4.8161e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2785;
      __int16 v100 = 1024;
      int v101 = v78;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v79;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v82;
      __int16 v104 = 2048;
      double v105 = 1.17549435e-38;
      __int16 v106 = 2048;
      uint64_t v107 = 0x3E80000000000000;
      __int16 v108 = 1024;
      BOOL v109 = v83;
      __int16 v110 = 1024;
      BOOL v111 = v82 < 0.00000011921;
      __int16 v112 = 1024;
      BOOL v113 = v84;
      __int16 v114 = 1024;
      BOOL v115 = v85;
      _os_log_error_impl(&dword_1BD672000, v39, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v38;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
    if (__p)
    {
      float v91 = __p;
      operator delete(__p);
    }
    if (v93)
    {
      int v94 = v93;
      operator delete(v93);
    }
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1 + 48);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F18158E8;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F18158E8;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)v2, *(void **)(v2 + 8));
    JUMPOUT(0x1C1881000);
  }
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F18155C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F18155C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::replaceQuantizer(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v6 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v10 = *(char **)(a1 + 64);
  unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v9 = (long long *)(a1 + 64);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v12 = *(_DWORD **)(a1 + 80);
  int v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  uint64_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    unint64_t v29 = __si_assert_copy_extra_329();
    int v30 = v29;
    __int16 v31 = "";
    if (v29) {
      __int16 v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 24) != v14[18])
  {
    int v32 = __si_assert_copy_extra_329();
    int v30 = v32;
    __int16 v33 = "";
    if (v32) {
      __int16 v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    float v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = v10 + 8;
      if (v10[31] < 0) {
        int v16 = (void *)*v16;
      }
      __int16 v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      int v18 = (void *)(*a2 + 8);
      __int16 v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        int v18 = (void *)*v18;
      }
      int v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      double v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        double v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      float v21 = __p;
      if (v45 < 0) {
        float v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      BOOL v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      int v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      int v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      BOOL v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      int v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    uint64_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  int v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  float v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  int v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::newPartitions(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  int v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    int v6 = ".tmp.partitions";
  }
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unsigned int v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v13 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v13) = v7;
    uint64_t v9 = __dst;
    if (!v7)
    {
LABEL_16:
      *((unsigned char *)v8 + (void)v9) = 0;
      malloc_default_zone();
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v9, v6, (size_t)v8);
  goto LABEL_16;
}

unint64_t IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), a2, 2068);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  int v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1C1881000);
}

void *IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  *a1 = &unk_1F1815578;
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::diagnoseDump(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float v15 = (void *)std::ostream::operator<<();
  int v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 192)) {
    int v17 = "(readOnly)";
  }
  else {
    int v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  double v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    int v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    int v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    uint64_t v28 = (void *)std::ostream::operator<<();
    unint64_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    int v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  int v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 80);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  __int16 v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 24))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      int v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v52, 2068);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 24));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v40, 2068);
        int v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        BOOL v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, Ptr, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, Ptr + 2040, 8);
        if ((v71 & 0x80u) == 0) {
          BOOL v49 = &v69;
        }
        else {
          BOOL v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 24));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::status(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  int v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  double v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v31);
  if (v31)
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::updateVectorStorageOffsets(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = a1 + 48;
  if (a2)
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (i >= result) {
        break;
      }
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), i, 2068);
      if (!*(unsigned char *)(v2 + 184))
      {
        unint64_t v8 = *(unsigned int *)(Ptr + 2064);
        int v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(void *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          uint64_t v10 = *(void *)(v2 + 56 + 8 * ((v8 >> ((60 - 4 * v9) & 0xFC)) & 0xF));
          if (v10)
          {
            int v11 = v9 + 2;
            do
              uint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> ((64 - 4 * v11++) & 0xFC)) & 0xF));
            while ((v10 & 1) != 0);
          }
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
          }
        }
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (v2 >= result) {
        break;
      }
      vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), v2++, 2068);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::getDataForOffset(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    int v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    uint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *uint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 2048;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::storageSize(uint64_t a1)
{
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 80) + 16) + 24);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  uint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v25 + 2), *((unsigned int *)v25 + 4), v25[5]);
        v25 += 6;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v16 + 2), *((unsigned int *)v16 + 4), v16[5]);
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          uint64_t v21 = v15;
          int v22 = *__error();
          int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            uint64_t v24 = __p;
            if (v49 < 0) {
              uint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        v16 += 6;
      }
      while (v16 != v12);
    }
  }
  int v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      int v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    int v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6345570;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v9, a4, a7, a8, 0, a9);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[2044], a2[2045], a2[2046], a2[2047]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v12 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 10000;
  }
  if (10 * v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10 * v11;
  }
  unsigned int v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v115 = 0;
  uint64_t v116 = &v115;
  if (v17 <= v19) {
    unsigned int v17 = v19;
  }
  int v118 = 0;
  uint64_t v117 = 0x2000000000;
  uint64_t v111 = 0;
  __int16 v112 = &v111;
  int v114 = 0;
  uint64_t v113 = 0x2000000000;
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v108);
  double Current = CFAbsoluteTimeGetCurrent();
  int v95 = v11;
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1) <= v17
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1) <= v14)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    int v94 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    unsigned int v62 = 0;
    uint64_t v63 = *(void *)(a1 + 32);
    do
    {
      if (v62 == *(_DWORD *)(v63 + 24)) {
        goto LABEL_91;
      }
      ++*((_DWORD *)v116 + 6);
      unint64_t v64 = IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v63, v62);
      unint64_t v65 = *(unsigned int *)(v64 + 2064);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v64, 1, (float *)keyExistsAndHasValidFormat, 0x200uLL);
      if (*((void *)&v108 + 1))
      {
        uint8x8_t v66 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v108 + 8));
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          unint64_t v67 = v65;
          if (*((void *)&v108 + 1) <= v65) {
            unint64_t v67 = v65 % *((void *)&v108 + 1);
          }
        }
        else
        {
          unint64_t v67 = (DWORD2(v108) - 1) & v65;
        }
        std::locale v68 = *(uint64_t **)(v108 + 8 * v67);
        if (v68)
        {
          std::locale v68 = (uint64_t *)*v68;
          if (v68)
          {
            if (v66.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v70 = v68[1];
                if (v70 == v65)
                {
                  if (*((_DWORD *)v68 + 4) == v65) {
                    goto LABEL_81;
                  }
                }
                else if ((v70 & (*((void *)&v108 + 1) - 1)) != v67)
                {
                  goto LABEL_80;
                }
                std::locale v68 = (uint64_t *)*v68;
                if (!v68) {
                  goto LABEL_81;
                }
              }
            }
            do
            {
              unint64_t v69 = v68[1];
              if (v69 == v65)
              {
                if (*((_DWORD *)v68 + 4) == v65) {
                  break;
                }
              }
              else
              {
                if (v69 >= *((void *)&v108 + 1)) {
                  v69 %= *((void *)&v108 + 1);
                }
                if (v69 != v67) {
                  goto LABEL_80;
                }
              }
              std::locale v68 = (uint64_t *)*v68;
            }
            while (v68);
          }
        }
      }
      else
      {
LABEL_80:
        std::locale v68 = 0;
      }
LABEL_81:
      float v71 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v68)
        {
          int v74 = *__error();
          int v75 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v65;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v71;
            _os_log_impl(&dword_1BD672000, v75, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v74;
        }
        *(_OWORD *)keyExistsAndHasValidFormat = *(_OWORD *)(v64 + 2048);
        *(_DWORD *)&keyExistsAndHasValidFormat[16] = v65;
        *(float *)&keyExistsAndHasValidFormat[20] = v71;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(a4, (long long *)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v68)
        {
          int v72 = *__error();
          int v73 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v65;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v73, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v72;
        }
        ++*((_DWORD *)v112 + 6);
      }
      ++v62;
    }
    while (v63 == *(void *)(a1 + 32));
    float v91 = __si_assert_copy_extra_329();
    uint64_t v92 = v91;
    long long v93 = "";
    if (v91) {
      long long v93 = v91;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v93);
    free(v92);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_119;
  }
  if (!AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v21 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 40;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v23 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      int v24 = v23;
    }
    else {
      int v24 = 45;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v25 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v26 = keyExistsAndHasValidFormat[0];
    int v27 = 8 * v25;
    int v28 = v24 * v24;
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v29 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v30 = keyExistsAndHasValidFormat[0];
    if (v29 <= 0x12) {
      char v31 = 18;
    }
    else {
      char v31 = v29;
    }
    int v32 = v11;
    char v33 = v31 - 3;
    unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    if (v30) {
      char v35 = v33;
    }
    else {
      char v35 = 17;
    }
    int v11 = v32;
    unsigned int v36 = v34 >> v35;
    if (v36 <= 8) {
      int v37 = 8;
    }
    else {
      int v37 = v36;
    }
    int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    if (v26) {
      int v39 = v27;
    }
    else {
      int v39 = 800;
    }
    unsigned int v40 = v39 * v38 / (v28 * v37);
    if (v22 < v40) {
      unsigned int v40 = v22;
    }
    if (v40 <= v17) {
      CFIndex AppIntegerValue = v17;
    }
    else {
      CFIndex AppIntegerValue = v40;
    }
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v46 = *(void *)(a1 + 64);
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 72);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = *(void *)(a1 + 80);
  long long v47 = *(std::__shared_weak_count **)(a1 + 88);
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
  uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
  double v105 = 0;
  __int16 v106 = 0;
  uint64_t v107 = 0;
  __int16 v119 = &v105;
  unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
  if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
  {
    int v103 = 0;
    __int16 v104 = 0;
    __int16 v102 = 0;
    goto LABEL_99;
  }
  do
  {
    int v52 = *v50;
    v50 += 2;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v119, v52);
  }
  while (v50 != v49);
  int v53 = v105;
  int v103 = 0;
  __int16 v104 = 0;
  __int16 v102 = 0;
  int64_t v54 = v106 - (unsigned char *)v105;
  if (v106 == v105) {
    goto LABEL_99;
  }
  if (v54 < 0) {
LABEL_119:
  }
    abort();
  long long v55 = (char *)operator new(v106 - (unsigned char *)v105);
  uint64_t v56 = &v55[4 * (v54 >> 2)];
  __int16 v102 = v55;
  __int16 v104 = v56;
  memcpy(v55, v53, v54);
  int v103 = v56;
LABEL_99:
  v97[0] = MEMORY[0x1E4F143A8];
  v97[1] = 1174405120;
  v97[2] = ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v97[3] = &unk_1F18158A8;
  v97[6] = a1;
  v97[7] = a2;
  v97[4] = &v115;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v98, (uint64_t)&v108);
  float v101 = a6;
  v97[5] = &v111;
  __int16 v100 = a4;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v102, v97);
  if (v102)
  {
    int v103 = v102;
    operator delete(v102);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  float v87 = v99;
  int v11 = v95;
  if (v99)
  {
    do
    {
      float v88 = (void *)*v87;
      operator delete(v87);
      float v87 = v88;
    }
    while (v88);
  }
  float v89 = v98;
  __int16 v98 = 0;
  if (v89) {
    operator delete(v89);
  }
  if (v105)
  {
    __int16 v106 = v105;
    operator delete(v105);
  }
  if (*(void *)keyExistsAndHasValidFormat)
  {
    *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  unint64_t v90 = v51 >> 3;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  int v94 = v90;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_91:
  int v76 = *__error();
  BOOL v77 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    int v78 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v79 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    int v80 = *((_DWORD *)v112 + 6);
    int v81 = *((_DWORD *)v116 + 6);
    unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    CFAbsoluteTime v83 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v78;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v94;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v79;
    __int16 v121 = 1024;
    int v122 = v80;
    __int16 v123 = 1024;
    int v124 = v81;
    __int16 v125 = 2048;
    unint64_t v126 = v82;
    __int16 v127 = 2048;
    CFAbsoluteTime v128 = v83 - Current;
    _os_log_impl(&dword_1BD672000, v77, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v76;
  BOOL v84 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      BOOL v85 = (void *)*v84;
      operator delete(v84);
      BOOL v84 = v85;
    }
    while (v85);
  }
  float v86 = (void *)v108;
  *(void *)&long long v108 = 0;
  if (v86) {
    operator delete(v86);
  }
  _Block_object_dispose(&v111, 8);
  _Block_object_dispose(&v115, 8);
}

unint64_t IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    int v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unint64_t v2 = *(void **)(a1 + 16);
  return vi_onefixedsize_memory_allocator::getPtr(v2, a2, 2068);
}

void ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v4 + 32) + 16), *a3, 2068);
  uint64_t v6 = *(const float **)(a1 + 56);
  *(_DWORD *)int v23 = 2139095039;
  vDSP_distancesq(v6, 1, (const float *)Ptr, 1, (float *)v23, 0x200uLL);
  float v7 = *(float *)v23;
  unint64_t v8 = *(unsigned int *)(Ptr + 2064);
  int8x8_t v9 = *(int8x8_t *)(a1 + 72);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = *(unsigned int *)(Ptr + 2064);
      if (*(void *)&v9 <= v8) {
        unint64_t v11 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v11 = (v9.i32[0] - 1) & v8;
    }
    unsigned int v12 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v11);
    if (v12)
    {
      unsigned int v12 = (uint64_t *)*v12;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          uint64_t v13 = *(void *)&v9 - 1;
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == v8) {
                goto LABEL_22;
              }
            }
            else if ((v15 & v13) != v11)
            {
              goto LABEL_21;
            }
            unsigned int v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              break;
            }
          }
          else
          {
            if (v14 >= *(void *)&v9) {
              v14 %= *(void *)&v9;
            }
            if (v14 != v11) {
              goto LABEL_21;
            }
          }
          unsigned int v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
LABEL_21:
    unsigned int v12 = 0;
  }
LABEL_22:
  float v16 = *(float *)(a1 + 112);
  if (v16 == 0.0 || *(float *)v23 <= v16)
  {
    if (v12)
    {
      int v18 = *__error();
      unsigned int v19 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v23 = 67109376;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        _os_log_impl(&dword_1BD672000, v19, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", v23, 0x12u);
      }
      *__error() = v18;
    }
    *(_OWORD *)int v23 = *(_OWORD *)(Ptr + 2048);
    *(_DWORD *)&v23[16] = v8;
    *(float *)&double v24 = v7;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(*(void **)(a1 + 104), (long long *)v23);
  }
  else
  {
    if (v12)
    {
      int v20 = *__error();
      unsigned int v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        double v22 = *(float *)(a1 + 112);
        *(_DWORD *)int v23 = 67109632;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        *(_WORD *)&v23[18] = 2048;
        double v24 = v22;
        _os_log_impl(&dword_1BD672000, v21, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", v23, 0x1Cu);
      }
      *__error() = v20;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::createCandidateQueue()
{
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNNForTest(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  uint64_t v6 = __si_assert_copy_extra_329();
  float v7 = v6;
  unint64_t v8 = "";
  if (v6) {
    unint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNN(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    unint64_t v14 = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    uint64_t v15 = &unk_1E6345548;
    uint64_t v16 = a9;
    operator new();
  }
  int8x8_t v9 = __si_assert_copy_extra_329();
  uint8x8_t v10 = v9;
  unint64_t v11 = "";
  if (v9) {
    unint64_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::restoreUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_read_vint32((uint64_t)a3);
  int v41 = result;
  if (result)
  {
    int v6 = 0;
    uint64_t v40 = a1 + 48;
    do
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      float v7 = __dst;
      bzero(__dst, 0x800uLL);
      int v43 = 0;
      CIReadPostings(a3, a2, (uint64_t)&v45, &v43);
      unint64_t v8 = *((void *)a3 + 4);
      size_t v9 = *((void *)a3 + 5);
      if (v9 + 2048 > v8)
      {
        int v20 = (char *)*((void *)a3 + 6);
        unint64_t v21 = v8 - v9;
        if (v8 != v9)
        {
          memcpy(__dst, &v20[v9], v8 - v9);
          *((void *)a3 + 5) = v8;
          size_t v9 = v8;
        }
        uint64_t v22 = *a3;
        off_t __offseta = *((void *)a3 + 3);
        int v23 = v20;
        while (1)
        {
          unint64_t v24 = pread(v22, v23, v9, __offseta);
          if (v24 != -1) {
            break;
          }
          uint64_t v25 = g_prot_error_callback;
          if (!g_prot_error_callback) {
            break;
          }
          int v26 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v25 + 16))(v25, v22, *v26, 4) & 1) == 0)goto LABEL_40; {
        }
          }
        if (v24 != -1)
        {
          *((void *)a3 + 4) = v24;
          *((void *)a3 + 5) = 0;
          off_t v27 = *((void *)a3 + 3) + v24;
          *((void *)a3 + 3) = v27;
          if (!v24) {
            goto LABEL_7;
          }
          float v7 = &__dst[v21];
          size_t v10 = 2048 - v21;
          if (2048 - v21 <= v24)
          {
            size_t v9 = 0;
            goto LABEL_6;
          }
          off_t v37 = v27;
          off_t __offsetb = v24;
          while (1)
          {
            int v28 = (void *)*((void *)a3 + 6);
            memcpy(v7, v28, __offsetb);
            size_t v29 = __offsetb;
            *((void *)a3 + 5) = __offsetb;
            uint64_t v30 = *a3;
            while (1)
            {
              unint64_t v31 = pread(v30, v28, v29, v37);
              if (v31 != -1) {
                break;
              }
              uint64_t v32 = g_prot_error_callback;
              if (!g_prot_error_callback) {
                break;
              }
              char v33 = __error();
              char v34 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v32 + 16))(v32, v30, *v33, 4);
              size_t v29 = __offsetb;
              if ((v34 & 1) == 0) {
                goto LABEL_40;
              }
            }
            off_t v35 = __offsetb;
            if (v31 == -1) {
              break;
            }
            *((void *)a3 + 4) = v31;
            *((void *)a3 + 5) = 0;
            off_t v36 = *((void *)a3 + 3) + v31;
            *((void *)a3 + 3) = v36;
            if (!v31) {
              goto LABEL_7;
            }
            off_t v37 = v36;
            off_t __offsetb = v31;
            size_t v9 = 0;
            v7 += v35;
            v10 -= v35;
            if (v10 <= v31) {
              goto LABEL_6;
            }
          }
        }
LABEL_40:
        a3[4] = *__error();
      }
      else
      {
        size_t v10 = 2048;
LABEL_6:
        memcpy(v7, (const void *)(*((void *)a3 + 6) + v9), v10);
        *((void *)a3 + 5) = v9 + v10;
      }
LABEL_7:
      unsigned int vint32 = store_stream_read_vint32((uint64_t)a3);
      uint64_t v12 = v45;
      uint64_t v13 = v46;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
      unint64_t v14 = *(std::__shared_weak_count **)(a1 + 120);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 136);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        uint64_t v16 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)v16 + 256) = v12;
        *((void *)v16 + 257) = v13;
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        unsigned int v17 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)v17 + 256) = v12;
        *((void *)v17 + 257) = v13;
      }
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      __int16 v18 = *(_WORD *)(a1 + 76);
      int v19 = *(_DWORD *)(a1 + 156);
      v47[0] = *(_DWORD *)(a1 + 160);
      v47[1] = v19;
      __int16 v48 = v18;
      uint64_t result = *(void *)(a1 + 176);
      if (result)
      {
        if (*(_DWORD *)(result + 216) == -270471200) {
          uint64_t result = data_map_ext_restore_data(result, vint32, __dst, 0x800uLL, v47);
        }
      }
      ++v6;
    }
    while (v6 != v41);
  }
  return result;
}

_DWORD *IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, float a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = a4;
  float v73 = a5;
  if (*(unsigned char *)(a1 + 144))
  {
    int v52 = __si_assert_copy_extra_329();
    int v53 = v52;
    int64_t v54 = "";
    if (v52) {
      int64_t v54 = v52;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v54);
    goto LABEL_102;
  }
  if (!a2)
  {
    long long v55 = __si_assert_copy_extra_329();
    int v53 = v55;
    uint64_t v56 = "";
    if (v55) {
      uint64_t v56 = v55;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v56);
    goto LABEL_102;
  }
  unsigned int Vector = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, (uint64_t)a3, (int *)&v74, &v73, a2);
  uint64_t v9 = v74;
  if (v74 == -1)
  {
    int v57 = __si_assert_copy_extra_329();
    long long v58 = v57;
    int v59 = "";
    if (v57) {
      int v59 = v57;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v59);
    goto LABEL_92;
  }
  if (Vector != -1)
  {
    unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), Vector, 2068);
    if (Ptr[516] == a2) {
      return Ptr;
    }
    uint64_t v72 = 0;
    unsigned int data = (const void *)data_map_get_data(*(void *)(a1 + 128), a2, &v72);
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2586;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = a2;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = data;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v12;
    if (v72 < 1)
    {
      int v19 = *__error();
      uint64_t v32 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2595;
        _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v72 != 2048)
      {
        unint64_t v67 = __si_assert_copy_extra_329();
        int v53 = v67;
        std::locale v68 = "";
        if (v67) {
          std::locale v68 = v67;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v68);
        goto LABEL_102;
      }
      if (!data || !memcmp(data, a3, 0x800uLL)) {
        goto LABEL_46;
      }
      int v14 = *__error();
      uint64_t v15 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2590;
        _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v14;
      int v16 = *__error();
      unsigned int v17 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v72);
        __int16 v18 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v18;
        _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v16;
      int v19 = *__error();
      int v20 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v72);
        unint64_t v21 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v21;
        _os_log_impl(&dword_1BD672000, v20, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v19;
LABEL_46:
    char v33 = (const void *)data_map_get_data(*(void *)(a1 + 128), Ptr[516], &v72);
    int v34 = *__error();
    off_t v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v49 = Ptr[516];
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2598;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = v49;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = v33;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v34;
    if (v72 < 1)
    {
      int v42 = *__error();
      uint64_t v45 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2607;
        _os_log_error_impl(&dword_1BD672000, v45, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
      }
      goto LABEL_68;
    }
    if (v72 == 2048)
    {
      size_t v36 = 2048;
      if (!v33 || !memcmp(v33, Ptr, 0x800uLL)) {
        goto LABEL_69;
      }
      int v37 = *__error();
      int v38 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2602;
        _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v37;
      int v39 = *__error();
      uint64_t v40 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)v33, v72);
        int v41 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v41;
        _os_log_impl(&dword_1BD672000, v40, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v39;
      int v42 = *__error();
      int v43 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)Ptr, v72);
        int v44 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v44;
        _os_log_impl(&dword_1BD672000, v43, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
LABEL_68:
      *__error() = v42;
      size_t v36 = v72;
LABEL_69:
      if (!memcmp(a3, Ptr, v36))
      {
        int v46 = *__error();
        long long v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
        {
          int v50 = Ptr[516];
          *(_DWORD *)long long __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v78 = 1024;
          int v79 = 2610;
          __int16 v80 = 1024;
          *(_DWORD *)int v81 = a2;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v50;
          _os_log_fault_impl(&dword_1BD672000, v47, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v46;
        return Ptr;
      }
      unint64_t v64 = __si_assert_copy_extra_329();
      long long v58 = v64;
      unint64_t v65 = "";
      if (v64) {
        unint64_t v65 = v64;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v65);
LABEL_92:
      free(v58);
      if (__valid_fs(-1)) {
        uint64_t v66 = 2989;
      }
      else {
        uint64_t v66 = 3072;
      }
      *(_DWORD *)uint64_t v66 = -559038737;
      abort();
    }
    unint64_t v69 = __si_assert_copy_extra_329();
    int v53 = v69;
    uint64_t v70 = "";
    if (v69) {
      uint64_t v70 = v69;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v70);
LABEL_102:
    free(v53);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  __src = (void *)a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 72);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v24 = *(_DWORD **)(a1 + 80);
  int v23 = *(std::__shared_weak_count **)(a1 + 88);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  uint64_t v25 = *(void *)(a1 + 32);
  size_t OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(void *)(v25 + 16), 0x814u);
  uint64_t v27 = *(unsigned int *)(v25 + 24);
  if (OffsetFromEnd != v27)
  {
    int v28 = *__error();
    size_t v29 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      int v51 = *(_DWORD *)(v25 + 24);
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "newEntry";
      __int16 v78 = 1024;
      int v79 = 1882;
      __int16 v80 = 2048;
      *(void *)int v81 = OffsetFromEnd;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v51;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
    }
    *__error() = v28;
    uint64_t v27 = *(unsigned int *)(v25 + 24);
    if (OffsetFromEnd != v27)
    {
      unsigned int v62 = __si_assert_copy_extra_329();
      int v53 = v62;
      uint64_t v63 = "";
      if (v62) {
        uint64_t v63 = v62;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v63);
      goto LABEL_102;
    }
  }
  *(_DWORD *)(v25 + 24) = v27 + 1;
  unint64_t v30 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v25 + 16), OffsetFromEnd, 2068);
  memcpy((void *)v30, __src, 0x800uLL);
  *(_OWORD *)(v30 + 2048) = 0u;
  *(_DWORD *)(v30 + 2064) = a2;
  if (*(_DWORD *)(v25 + 24) == 1) {
    *(_DWORD *)(v25 + 36) = a2;
  }
  *(_DWORD *)(v25 + 40) = a2;
  (*(void (**)(_DWORD *, uint64_t, size_t, float))(*(void *)v24 + 56))(v24, v9, OffsetFromEnd, v73);
  uint64_t v31 = *(void *)(a1 + 32);
  if (v24[18] != *(_DWORD *)(v31 + 24))
  {
    int v60 = __si_assert_copy_extra_329();
    int v53 = v60;
    double v61 = "";
    if (v60) {
      double v61 = v60;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v61);
    goto LABEL_102;
  }
  unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(v31 + 16), OffsetFromEnd, 2068);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return Ptr;
}

uint64_t IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  size_t v10 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 72);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *(_DWORD **)(a1 + 80);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 140) == -1)
    {
      int v34 = 0;
      off_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      int v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          int v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          off_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      int v23 = __si_assert_copy_extra_329();
      unint64_t v21 = v23;
      unint64_t v24 = "";
      if (v23) {
        unint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      int v20 = __si_assert_copy_extra_329();
      unint64_t v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  int v34 = 0;
  off_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi512EERjRfj_block_invoke;
  v32[3] = &unk_1E6345468;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi512EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 140)) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    int v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      uint64_t result = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 2068);
      if (v15 != *(_DWORD *)(result + 2064)) {
        return result;
      }
      *(float *)&uint64_t v6 = *a3;
    }
    int v16 = *(const void **)(v8 + 56);
    unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 2068);
    uint64_t result = memcmp(v16, Ptr, 0x800uLL);
    if (!result)
    {
      *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

void *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::storeUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(*(void *)(a1 + 80) + 24));
  unsigned int v7 = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  while (v7 != *(_DWORD *)(v8 + 24))
  {
    unint64_t v9 = IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v8, v7);
    CIWritePostings((uint64_t)a3, a2, 0, (unsigned int *)(v9 + 2048), 0, 0);
    unint64_t v11 = *((void *)a3 + 4);
    uint64_t v10 = *((void *)a3 + 5);
    if (v10 + 2048 >= v11)
    {
      size_t v13 = 2048;
      float v12 = (char *)v9;
      while (1)
      {
        uint64_t v14 = v11 - v10;
        memcpy((void *)(*((void *)a3 + 6) + v10), v12, v11 - v10);
        *((void *)a3 + 5) += v14;
        if (store_stream_flush(a3, 0)) {
          break;
        }
        v12 += v14;
        v13 -= v14;
        unint64_t v11 = *((void *)a3 + 4);
        uint64_t v10 = *((void *)a3 + 5);
        if (v10 + v13 < v11) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      float v12 = (char *)v9;
      size_t v13 = 2048;
LABEL_5:
      memcpy((void *)(*((void *)a3 + 6) + v10), v12, v13);
      *((void *)a3 + 5) += v13;
    }
    uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(v9 + 2064));
    ++v7;
    if (v8 != *(void *)(a1 + 80))
    {
      int v15 = __si_assert_copy_extra_329();
      int v16 = v15;
      unsigned int v17 = "";
      if (v15) {
        unsigned int v17 = v15;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v17);
      free(v16);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::rename(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  float v12 = *(std::__shared_weak_count **)(a1 + 120);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 128);
  size_t v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 80);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 71) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 48), *(void *)(v16 + 56));
  }
  else {
    std::string buf = *(std::string *)(v16 + 48);
  }
  MEMORY[0x1C1880BF0](v16 + 48, a2);
  int v17 = *__error();
  uint64_t v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__s, v16);
    int v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)unint64_t v24 = 136315394;
    uint64_t v25 = v19;
    __int16 v26 = 2080;
    uint64_t v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::makePurgeable(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    size_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  size_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::makeReadOnly(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 80);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v5);
      uint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      int v15 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 120);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 128);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
    (*(void (**)(uint64_t))(*(void *)v11 + 120))(v11);
    *(unsigned char *)(a1 + 192) = 1;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::truncate(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(*(void *)(a1 + 80));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    int v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 128);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::unlink(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 80);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v14 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::subvert(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v8 = (os_unfair_lock_s *)(a2 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 144));
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 120);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v8);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 176))(v7, v11);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

int *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::compact(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    _os_log_impl(&dword_1BD672000, v5, v6, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  uint64_t result = __error();
  int *result = v4;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    int v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::flush(uint64_t a1, uint64_t a2)
{
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 128);
  int v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 88);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  __int16 v19 = ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  int v20 = &unk_1E6345490;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    ((void (*)(void *, long long *, char *))v19)(v18, &v32, &v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  int v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  int v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2544, "0", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSet(_DWORD *result, uint64_t a2, char *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (os_log_type_t v6 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    int v19 = __si_assert_copy_extra_329();
    uint64_t v20 = v19;
    uint64_t v21 = "";
    if (v19) {
      uint64_t v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v22 = *__error();
    uint64_t v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 16))(v6);
      int v25 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 24))(v6);
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      __dst[0] = 67109888;
      __dst[1] = v24;
      LOWORD(__dst[2]) = 1024;
      *(_DWORD *)((char *)&__dst[2] + 2) = v25;
      HIWORD(__dst[3]) = 1024;
      __dst[4] = v26;
      LOWORD(__dst[5]) = 1024;
      *(_DWORD *)((char *)&__dst[5] + 2) = v27;
      _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", (uint8_t *)__dst, 0x1Au);
    }
    uint64_t result = __error();
    int *result = v22;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = (uint64_t)(v6 + 12);
  uint64_t v12 = a4;
  while (v9 != *(_DWORD *)(v10 + 24))
  {
    unsigned int v16 = *(_DWORD *)(IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9)+ 2064);
    int v17 = (const void *)IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    memcpy(__dst, v17, sizeof(__dst));
    unint64_t v18 = IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    if (*(unsigned char *)(v18 + 2048))
    {
      if (*(_DWORD *)(v18 + 2052)) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
      uint64_t v14 = a5;
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = v12;
    }
    int v15 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v11, v16, __dst, 0xFFFFFFFF, 3.4028e38);
    uint64_t result = vi_memory_postings::push_posting(a3, v13, v15 + 512, v14);
    ++v9;
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSet(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  int v13 = "";
  if (v11) {
    int v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::train(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    char v31 = __si_assert_copy_extra_329();
    long long v32 = v31;
    long long v33 = "";
    if (v31) {
      long long v33 = v31;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v33);
    goto LABEL_54;
  }
  if (*v3 != a1)
  {
    int v34 = __si_assert_copy_extra_329();
    long long v32 = v34;
    off_t v35 = "";
    if (v34) {
      off_t v35 = v34;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v35);
LABEL_54:
    free(v32);
    if (__valid_fs(-1)) {
      uint64_t v36 = 2989;
    }
    else {
      uint64_t v36 = 3072;
    }
    *(_DWORD *)uint64_t v36 = -559038737;
LABEL_58:
    abort();
  }
  uint64_t v6 = a2;
  int v7 = (char *)operator new(8uLL);
  int v8 = v7;
  *(void *)int v7 = a1 + 48;
  if (v4 < 9) {
    goto LABEL_39;
  }
  int v9 = v7 + 8;
  unint64_t v10 = 1;
  uint64_t v11 = v7 + 8;
  uint64_t v37 = v6;
  do
  {
    uint64_t v13 = v3[v10];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v13 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v13 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v13 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v13 + 16))
    {
      int v28 = __si_assert_copy_extra_329();
      long long v29 = v28;
      uint64_t v30 = "";
      if (v28) {
        uint64_t v30 = v28;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v30);
      free(v29);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v14 = v13 + 48;
    if (v9 < v11)
    {
      *(void *)int v9 = v14;
      uint64_t v12 = v9 + 8;
      goto LABEL_6;
    }
    uint64_t v15 = (v9 - v8) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_58;
    }
    if ((v11 - v8) >> 2 > v16) {
      unint64_t v16 = (v11 - v8) >> 2;
    }
    if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      __int16 v18 = operator new(8 * v17);
    }
    else
    {
      __int16 v18 = 0;
    }
    int v19 = &v18[8 * v15];
    uint64_t v11 = &v18[8 * v17];
    *(void *)int v19 = v14;
    uint64_t v12 = v19 + 8;
    if (v9 == v8)
    {
LABEL_36:
      operator delete(v8);
      goto LABEL_37;
    }
    unint64_t v20 = v9 - 8 - v8;
    if (v20 < 0x168)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v18[v9 - v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v9 - v8 - 8])
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      int v21 = v9;
      do
      {
LABEL_34:
        uint64_t v27 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v21 != v8);
      goto LABEL_35;
    }
    if ((unint64_t)(v8 - v18) < 0x20)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    uint64_t v22 = (v20 >> 3) + 1;
    int v21 = &v9[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v23 = &v18[8 * v15 - 16];
    int v24 = v9 - 16;
    uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v19 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_34;
    }
LABEL_35:
    if (v8) {
      goto LABEL_36;
    }
LABEL_37:
    int v8 = v19;
    uint64_t v6 = v37;
LABEL_6:
    ++v10;
    os_log_type_t v3 = *(void **)v6;
    int v9 = v12;
  }
  while (v10 < (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if (v8)
  {
LABEL_39:
    operator delete(v8);
  }
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::insertForTest(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1)) {
      uint64_t v13 = 2989;
    }
    else {
      uint64_t v13 = 3072;
    }
    *(_DWORD *)uint64_t v13 = -559038737;
    abort();
  }
  uint64_t result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38);
  if (result[514])
  {
    int v9 = result[513] + 1;
  }
  else
  {
    result[514] = a7;
    int v9 = 1;
  }
  result[513] = v9;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::insertForMerge(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    int v8 = __si_assert_copy_extra_329();
    int v9 = v8;
    unint64_t v10 = "";
    if (v8) {
      unint64_t v10 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

char *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::insertVector(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7, uint64_t a8, char *a9)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    uint64_t v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38)+ 512;
  return vi_memory_postings::push_posting(a9, a7, v11, a8);
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::bulkInsertForTest(_DWORD *result, char *a2, int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v21 = *a5++;
        unsigned int v20 = v21;
        int v23 = *a3++;
        int v22 = v23;
        uint64_t result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v20, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[514])
        {
          int v19 = result[513] + 1;
        }
        else
        {
          result[514] = v22;
          int v19 = 1;
        }
        result[513] = v19;
        a2 += 2048;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v14 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v15 = *__error();
          unint64_t v16 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v25 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v15;
        }
        unsigned int v17 = a5[v10];
        int v18 = a3[v10];
        uint64_t result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v17, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[514])
        {
          int v13 = result[513] + 1;
        }
        else
        {
          result[514] = v18;
          int v13 = 1;
        }
        result[513] = v13;
        a2 += 2048;
        uint64_t v10 = v14;
      }
      while (v9 != v14);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::shadow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 168))(v9, a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return 0;
    }
  }
  else if (!v7)
  {
    return 0;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return 0;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::validAddress(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    os_unfair_lock_unlock(v2);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))
      {
        a2 += 2048;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))break; {
        a2 += 2048;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    int v15 = v14;
    unint64_t v16 = "";
    if (v14) {
      unint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int Vector = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, a2, (int *)&v24, &v23, 0);
  if (Vector == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
    uint64_t v9 = *(void *)(a1 + 64);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 88);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke;
    v20[3] = &unk_1E6345440;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke_955;
      v15[3] = &unk_1F1815738;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      unint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      int v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return Vector != -1;
}

int *___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(const void **)(a1 + 48);
  unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(*(void *)(a1 + 40) + 32) + 16), *(unsigned int *)a3, 2068);
  uint64_t result = (int *)memcmp(v8, Ptr, 0x800uLL);
  if (!result)
  {
    int v11 = *__error();
    unsigned int v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v17 = a3[1];
      int v27 = 136315906;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2760;
      __int16 v31 = 1024;
      *(_DWORD *)long long v32 = a2;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v17;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&v27, 0x22u);
    }
    *__error() = v11;
    int v13 = *__error();
    uint64_t v14 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(_DWORD *)(a1 + 56);
      double v19 = *(float *)(a1 + 60);
      int v27 = 136315906;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2761;
      __int16 v31 = 1024;
      *(_DWORD *)long long v32 = v18;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v19;
      _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&v27, 0x22u);
    }
    *__error() = v13;
    int v15 = *__error();
    unint64_t v16 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      float v20 = *(float *)(a1 + 60);
      float v21 = a3[1];
      float v22 = vabds_f32(v20, v21);
      if (v20 == v21)
      {
        BOOL v23 = 1;
        BOOL v24 = 1;
      }
      else
      {
        float v25 = fabsf(v20);
        float v26 = fabsf(v21);
        BOOL v23 = v22 <= fmaxf(fminf(v26, v25) * 0.000015259, 0.000015259);
        BOOL v24 = v22 <= (float)(fmaxf(v25, v26) * 0.000015259);
      }
      int v27 = 136317186;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2762;
      __int16 v31 = 2048;
      *(double *)long long v32 = v22;
      *(_WORD *)&void v32[8] = 2048;
      *(void *)&v32[10] = 0x3810000000000000;
      __int16 v33 = 2048;
      uint64_t v34 = 0x3E80000000000000;
      __int16 v35 = 1024;
      BOOL v36 = v22 < 1.1755e-38;
      __int16 v37 = 1024;
      BOOL v38 = v22 < 0.00000011921;
      __int16 v39 = 1024;
      BOOL v40 = v23;
      __int16 v41 = 1024;
      BOOL v42 = v24;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&v27, 0x48u);
    }
    uint64_t result = __error();
    int *result = v15;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke_955(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 40);
  unsigned int v8 = *(const void **)(a1 + 48);
  unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v9 + 32) + 16), *(unsigned int *)a3, 2068);
  if (!memcmp(v8, Ptr, 0x800uLL))
  {
    int v11 = *__error();
    unsigned int v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v40 = a3[1];
      float __C = 4.8153e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2770;
      __int16 v100 = 1024;
      int v101 = a2;
      __int16 v102 = 2048;
      *(double *)int v103 = v40;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v11;
    int v13 = *(const float **)(a1 + 48);
    uint64_t v14 = (const float *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float __C = 3.4028e38;
    vDSP_distancesq(v13, 1, v14, 1, &__C, 0x200uLL);
    float v15 = __C;
    int v16 = *__error();
    double v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v41 = *(_DWORD *)(a1 + 88);
      float __C = 4.8153e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2772;
      __int16 v100 = 1024;
      int v101 = v41;
      __int16 v102 = 2048;
      *(double *)int v103 = v15;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v16;
    long long v93 = 0;
    int v94 = 0;
    uint64_t v95 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&v93);
    int v18 = *__error();
    double v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v42 = *(_DWORD *)v93;
      float v43 = *((float *)v93 + 1);
      int v44 = *((_DWORD *)v93 + 2);
      float v45 = *((float *)v93 + 3);
      BOOL v46 = v43 == v45 || vabds_f32(v43, v45) <= fmaxf(fminf(fabsf(v45), fabsf(v43)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2774;
      __int16 v100 = 1024;
      int v101 = v42;
      __int16 v102 = 2048;
      *(double *)int v103 = v43;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v44;
      __int16 v104 = 2048;
      double v105 = v45;
      __int16 v106 = 1024;
      LODWORD(v107) = v46;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v18;
    int v20 = *__error();
    float v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v47 = *(_DWORD *)v93;
      int v48 = *((_DWORD *)v93 + 2);
      BOOL v49 = *((float *)v93 + 1) == *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2775;
      __int16 v100 = 1024;
      int v101 = v47;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v48;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v49;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v20;
    int v22 = *__error();
    BOOL v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      int v50 = *(_DWORD *)v93;
      int v51 = *((_DWORD *)v93 + 2);
      BOOL v52 = *((float *)v93 + 1) < *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2776;
      __int16 v100 = 1024;
      int v101 = v50;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v51;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v52;
      _os_log_error_impl(&dword_1BD672000, v23, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v22;
    int v24 = *__error();
    float v25 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v53 = *(_DWORD *)v93;
      int v54 = *((_DWORD *)v93 + 2);
      BOOL v55 = *((float *)v93 + 1) > *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2777;
      __int16 v100 = 1024;
      int v101 = v53;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v54;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v55;
      _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v24;
    int v26 = *__error();
    int v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      int v56 = *(_DWORD *)v93;
      int v57 = *((_DWORD *)v93 + 2);
      float v58 = *((float *)v93 + 1);
      float v59 = *((float *)v93 + 3);
      double v60 = (float)(v58 - v59);
      float v61 = vabds_f32(v58, v59);
      if (v58 == v59)
      {
        BOOL v62 = 1;
        BOOL v63 = 1;
      }
      else
      {
        float v86 = fabsf(v58);
        float v87 = fabsf(v59);
        BOOL v62 = v61 <= fmaxf(fminf(v87, v86) * 0.000015259, 0.000015259);
        BOOL v63 = v61 <= (float)(fmaxf(v86, v87) * 0.000015259);
      }
      float __C = 4.8161e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2778;
      __int16 v100 = 1024;
      int v101 = v56;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v57;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v60;
      __int16 v104 = 2048;
      double v105 = 1.17549435e-38;
      __int16 v106 = 2048;
      uint64_t v107 = 0x3E80000000000000;
      __int16 v108 = 1024;
      BOOL v109 = v61 < 1.1755e-38;
      __int16 v110 = 1024;
      BOOL v111 = v61 < 0.00000011921;
      __int16 v112 = 1024;
      BOOL v113 = v62;
      __int16 v114 = 1024;
      BOOL v115 = v63;
      _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v26;
    float v91 = 0;
    uint64_t v92 = 0;
    std::string __p = 0;
    uint64_t v28 = *(void *)(a1 + 56);
    unint64_t v29 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v9 + 32) + 16), *(unsigned int *)a3, 2068);
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v28 + 80))(&__p, v28, v29, 2);
    int v30 = *__error();
    __int16 v31 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      int v64 = *(_DWORD *)__p;
      float v65 = *((float *)__p + 1);
      int v66 = *((_DWORD *)__p + 2);
      float v67 = *((float *)__p + 3);
      BOOL v68 = v65 == v67 || vabds_f32(v65, v67) <= fmaxf(fminf(fabsf(v67), fabsf(v65)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2781;
      __int16 v100 = 1024;
      int v101 = v64;
      __int16 v102 = 2048;
      *(double *)int v103 = v65;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v66;
      __int16 v104 = 2048;
      double v105 = v67;
      __int16 v106 = 1024;
      LODWORD(v107) = v68;
      _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v30;
    int v32 = *__error();
    __int16 v33 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      int v69 = *(_DWORD *)__p;
      int v70 = *((_DWORD *)__p + 2);
      BOOL v71 = *((float *)__p + 1) == *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2782;
      __int16 v100 = 1024;
      int v101 = v69;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v70;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v71;
      _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v32;
    int v34 = *__error();
    __int16 v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v72 = *(_DWORD *)__p;
      int v73 = *((_DWORD *)__p + 2);
      BOOL v74 = *((float *)__p + 1) < *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2783;
      __int16 v100 = 1024;
      int v101 = v72;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v73;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v74;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v34;
    int v36 = *__error();
    __int16 v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      int v75 = *(_DWORD *)__p;
      int v76 = *((_DWORD *)__p + 2);
      BOOL v77 = *((float *)__p + 1) > *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2784;
      __int16 v100 = 1024;
      int v101 = v75;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v76;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v77;
      _os_log_error_impl(&dword_1BD672000, v37, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v36;
    int v38 = *__error();
    __int16 v39 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      int v78 = *(_DWORD *)__p;
      int v79 = *((_DWORD *)__p + 2);
      float v80 = *((float *)__p + 1);
      float v81 = *((float *)__p + 3);
      float v82 = vabds_f32(v80, v81);
      BOOL v83 = (float)(v80 - v81) < 1.1755e-38;
      if (v80 == v81)
      {
        BOOL v84 = 1;
        BOOL v85 = 1;
      }
      else
      {
        float v88 = fabsf(v80);
        float v89 = fabsf(v81);
        BOOL v84 = v82 <= fmaxf(fminf(v89, v88) * 0.000015259, 0.000015259);
        BOOL v85 = v82 <= (float)(fmaxf(v88, v89) * 0.000015259);
      }
      float __C = 4.8161e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2785;
      __int16 v100 = 1024;
      int v101 = v78;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v79;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v82;
      __int16 v104 = 2048;
      double v105 = 1.17549435e-38;
      __int16 v106 = 2048;
      uint64_t v107 = 0x3E80000000000000;
      __int16 v108 = 1024;
      BOOL v109 = v83;
      __int16 v110 = 1024;
      BOOL v111 = v82 < 0.00000011921;
      __int16 v112 = 1024;
      BOOL v113 = v84;
      __int16 v114 = 1024;
      BOOL v115 = v85;
      _os_log_error_impl(&dword_1BD672000, v39, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v38;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
    if (__p)
    {
      float v91 = __p;
      operator delete(__p);
    }
    if (v93)
    {
      int v94 = v93;
      operator delete(v93);
    }
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1 + 48);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815420;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F1815420;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)v2, *(void **)(v2 + 8));
    JUMPOUT(0x1C1881000);
  }
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1815138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1815138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::replaceQuantizer(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v6 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v10 = *(char **)(a1 + 64);
  unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v9 = (long long *)(a1 + 64);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v12 = *(_DWORD **)(a1 + 80);
  int v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  uint64_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    unint64_t v29 = __si_assert_copy_extra_329();
    int v30 = v29;
    __int16 v31 = "";
    if (v29) {
      __int16 v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 24) != v14[18])
  {
    int v32 = __si_assert_copy_extra_329();
    int v30 = v32;
    __int16 v33 = "";
    if (v32) {
      __int16 v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    float v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = v10 + 8;
      if (v10[31] < 0) {
        int v16 = (void *)*v16;
      }
      __int16 v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      int v18 = (void *)(*a2 + 8);
      __int16 v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        int v18 = (void *)*v18;
      }
      int v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      double v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        double v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      float v21 = __p;
      if (v45 < 0) {
        float v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      BOOL v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      int v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      int v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      BOOL v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      int v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    uint64_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  int v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  float v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  int v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::newPartitions(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  int v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    int v6 = ".tmp.partitions";
  }
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unsigned int v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v13 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v13) = v7;
    uint64_t v9 = __dst;
    if (!v7)
    {
LABEL_16:
      *((unsigned char *)v8 + (void)v9) = 0;
      malloc_default_zone();
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v9, v6, (size_t)v8);
  goto LABEL_16;
}

unint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), a2, 1044);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  int v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1C1881000);
}

void *IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(void *a1)
{
  *a1 = &unk_1F18150F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::diagnoseDump(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float v15 = (void *)std::ostream::operator<<();
  int v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 192)) {
    int v17 = "(readOnly)";
  }
  else {
    int v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  double v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    int v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    int v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    uint64_t v28 = (void *)std::ostream::operator<<();
    unint64_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    int v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  int v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 80);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  __int16 v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 24))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      int v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v52, 1044);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 24));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v40, 1044);
        int v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        BOOL v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, Ptr, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, Ptr + 1016, 8);
        if ((v71 & 0x80u) == 0) {
          BOOL v49 = &v69;
        }
        else {
          BOOL v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 24));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::status(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  int v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  double v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v31);
  if (v31)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::updateVectorStorageOffsets(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = a1 + 48;
  if (a2)
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (i >= result) {
        break;
      }
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), i, 1044);
      if (!*(unsigned char *)(v2 + 184))
      {
        unint64_t v8 = *(unsigned int *)(Ptr + 1040);
        int v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(void *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          uint64_t v10 = *(void *)(v2 + 56 + 8 * ((v8 >> ((60 - 4 * v9) & 0xFC)) & 0xF));
          if (v10)
          {
            int v11 = v9 + 2;
            do
              uint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> ((64 - 4 * v11++) & 0xFC)) & 0xF));
            while ((v10 & 1) != 0);
          }
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
          }
        }
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (v2 >= result) {
        break;
      }
      vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), v2++, 1044);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::getDataForOffset(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    int v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    uint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *uint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 1024;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::storageSize(uint64_t a1)
{
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 80) + 16) + 24);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  uint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v25 + 2), *((unsigned int *)v25 + 4), v25[5]);
        v25 += 6;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v16 + 2), *((unsigned int *)v16 + 4), v16[5]);
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          uint64_t v21 = v15;
          int v22 = *__error();
          int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            uint64_t v24 = __p;
            if (v49 < 0) {
              uint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        v16 += 6;
      }
      while (v16 != v12);
    }
  }
  int v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      int v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    int v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E63453D8;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v9, a4, a7, a8, 0, a9);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[1020], a2[1021], a2[1022], a2[1023]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v12 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 10000;
  }
  if (10 * v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10 * v11;
  }
  unsigned int v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v115 = 0;
  uint64_t v116 = &v115;
  if (v17 <= v19) {
    unsigned int v17 = v19;
  }
  int v118 = 0;
  uint64_t v117 = 0x2000000000;
  uint64_t v111 = 0;
  __int16 v112 = &v111;
  int v114 = 0;
  uint64_t v113 = 0x2000000000;
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v108);
  double Current = CFAbsoluteTimeGetCurrent();
  int v95 = v11;
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1) <= v17
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1) <= v14)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    int v94 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    unsigned int v62 = 0;
    uint64_t v63 = *(void *)(a1 + 32);
    do
    {
      if (v62 == *(_DWORD *)(v63 + 24)) {
        goto LABEL_91;
      }
      ++*((_DWORD *)v116 + 6);
      unint64_t v64 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v63, v62);
      unint64_t v65 = *(unsigned int *)(v64 + 1040);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v64, 1, (float *)keyExistsAndHasValidFormat, 0x100uLL);
      if (*((void *)&v108 + 1))
      {
        uint8x8_t v66 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v108 + 8));
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          unint64_t v67 = v65;
          if (*((void *)&v108 + 1) <= v65) {
            unint64_t v67 = v65 % *((void *)&v108 + 1);
          }
        }
        else
        {
          unint64_t v67 = (DWORD2(v108) - 1) & v65;
        }
        std::locale v68 = *(uint64_t **)(v108 + 8 * v67);
        if (v68)
        {
          std::locale v68 = (uint64_t *)*v68;
          if (v68)
          {
            if (v66.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v70 = v68[1];
                if (v70 == v65)
                {
                  if (*((_DWORD *)v68 + 4) == v65) {
                    goto LABEL_81;
                  }
                }
                else if ((v70 & (*((void *)&v108 + 1) - 1)) != v67)
                {
                  goto LABEL_80;
                }
                std::locale v68 = (uint64_t *)*v68;
                if (!v68) {
                  goto LABEL_81;
                }
              }
            }
            do
            {
              unint64_t v69 = v68[1];
              if (v69 == v65)
              {
                if (*((_DWORD *)v68 + 4) == v65) {
                  break;
                }
              }
              else
              {
                if (v69 >= *((void *)&v108 + 1)) {
                  v69 %= *((void *)&v108 + 1);
                }
                if (v69 != v67) {
                  goto LABEL_80;
                }
              }
              std::locale v68 = (uint64_t *)*v68;
            }
            while (v68);
          }
        }
      }
      else
      {
LABEL_80:
        std::locale v68 = 0;
      }
LABEL_81:
      float v71 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v68)
        {
          int v74 = *__error();
          int v75 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v65;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v71;
            _os_log_impl(&dword_1BD672000, v75, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v74;
        }
        *(_OWORD *)keyExistsAndHasValidFormat = *(_OWORD *)(v64 + 1024);
        *(_DWORD *)&keyExistsAndHasValidFormat[16] = v65;
        *(float *)&keyExistsAndHasValidFormat[20] = v71;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(a4, (long long *)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v68)
        {
          int v72 = *__error();
          int v73 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v65;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v73, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v72;
        }
        ++*((_DWORD *)v112 + 6);
      }
      ++v62;
    }
    while (v63 == *(void *)(a1 + 32));
    float v91 = __si_assert_copy_extra_329();
    uint64_t v92 = v91;
    long long v93 = "";
    if (v91) {
      long long v93 = v91;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v93);
    free(v92);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_119;
  }
  if (!AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v21 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = 40;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v23 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      int v24 = v23;
    }
    else {
      int v24 = 45;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v25 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v26 = keyExistsAndHasValidFormat[0];
    int v27 = 8 * v25;
    int v28 = v24 * v24;
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v29 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v30 = keyExistsAndHasValidFormat[0];
    if (v29 <= 0x12) {
      char v31 = 18;
    }
    else {
      char v31 = v29;
    }
    int v32 = v11;
    char v33 = v31 - 3;
    unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    if (v30) {
      char v35 = v33;
    }
    else {
      char v35 = 17;
    }
    int v11 = v32;
    unsigned int v36 = v34 >> v35;
    if (v36 <= 8) {
      int v37 = 8;
    }
    else {
      int v37 = v36;
    }
    int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    if (v26) {
      int v39 = v27;
    }
    else {
      int v39 = 800;
    }
    unsigned int v40 = v39 * v38 / (v28 * v37);
    if (v22 < v40) {
      unsigned int v40 = v22;
    }
    if (v40 <= v17) {
      CFIndex AppIntegerValue = v17;
    }
    else {
      CFIndex AppIntegerValue = v40;
    }
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v46 = *(void *)(a1 + 64);
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 72);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = *(void *)(a1 + 80);
  long long v47 = *(std::__shared_weak_count **)(a1 + 88);
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
  uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
  double v105 = 0;
  __int16 v106 = 0;
  uint64_t v107 = 0;
  __int16 v119 = &v105;
  unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
  if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
  {
    int v103 = 0;
    __int16 v104 = 0;
    __int16 v102 = 0;
    goto LABEL_99;
  }
  do
  {
    int v52 = *v50;
    v50 += 2;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v119, v52);
  }
  while (v50 != v49);
  int v53 = v105;
  int v103 = 0;
  __int16 v104 = 0;
  __int16 v102 = 0;
  int64_t v54 = v106 - (unsigned char *)v105;
  if (v106 == v105) {
    goto LABEL_99;
  }
  if (v54 < 0) {
LABEL_119:
  }
    abort();
  long long v55 = (char *)operator new(v106 - (unsigned char *)v105);
  uint64_t v56 = &v55[4 * (v54 >> 2)];
  __int16 v102 = v55;
  __int16 v104 = v56;
  memcpy(v55, v53, v54);
  int v103 = v56;
LABEL_99:
  v97[0] = MEMORY[0x1E4F143A8];
  v97[1] = 1174405120;
  v97[2] = ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v97[3] = &unk_1F18153E0;
  v97[6] = a1;
  v97[7] = a2;
  v97[4] = &v115;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v98, (uint64_t)&v108);
  float v101 = a6;
  v97[5] = &v111;
  __int16 v100 = a4;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v102, v97);
  if (v102)
  {
    int v103 = v102;
    operator delete(v102);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  float v87 = v99;
  int v11 = v95;
  if (v99)
  {
    do
    {
      float v88 = (void *)*v87;
      operator delete(v87);
      float v87 = v88;
    }
    while (v88);
  }
  float v89 = v98;
  __int16 v98 = 0;
  if (v89) {
    operator delete(v89);
  }
  if (v105)
  {
    __int16 v106 = v105;
    operator delete(v105);
  }
  if (*(void *)keyExistsAndHasValidFormat)
  {
    *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  unint64_t v90 = v51 >> 3;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  int v94 = v90;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_91:
  int v76 = *__error();
  BOOL v77 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    int v78 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v79 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    int v80 = *((_DWORD *)v112 + 6);
    int v81 = *((_DWORD *)v116 + 6);
    unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    CFAbsoluteTime v83 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v78;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v94;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v79;
    __int16 v121 = 1024;
    int v122 = v80;
    __int16 v123 = 1024;
    int v124 = v81;
    __int16 v125 = 2048;
    unint64_t v126 = v82;
    __int16 v127 = 2048;
    CFAbsoluteTime v128 = v83 - Current;
    _os_log_impl(&dword_1BD672000, v77, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v76;
  BOOL v84 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      BOOL v85 = (void *)*v84;
      operator delete(v84);
      BOOL v84 = v85;
    }
    while (v85);
  }
  float v86 = (void *)v108;
  *(void *)&long long v108 = 0;
  if (v86) {
    operator delete(v86);
  }
  _Block_object_dispose(&v111, 8);
  _Block_object_dispose(&v115, 8);
}

unint64_t IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    int v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unint64_t v2 = *(void **)(a1 + 16);
  return vi_onefixedsize_memory_allocator::getPtr(v2, a2, 1044);
}

void ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v4 + 32) + 16), *a3, 1044);
  uint64_t v6 = *(const float **)(a1 + 56);
  *(_DWORD *)int v23 = 2139095039;
  vDSP_distancesq(v6, 1, (const float *)Ptr, 1, (float *)v23, 0x100uLL);
  float v7 = *(float *)v23;
  unint64_t v8 = *(unsigned int *)(Ptr + 1040);
  int8x8_t v9 = *(int8x8_t *)(a1 + 72);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = *(unsigned int *)(Ptr + 1040);
      if (*(void *)&v9 <= v8) {
        unint64_t v11 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v11 = (v9.i32[0] - 1) & v8;
    }
    unsigned int v12 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v11);
    if (v12)
    {
      unsigned int v12 = (uint64_t *)*v12;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          uint64_t v13 = *(void *)&v9 - 1;
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == v8) {
                goto LABEL_22;
              }
            }
            else if ((v15 & v13) != v11)
            {
              goto LABEL_21;
            }
            unsigned int v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              break;
            }
          }
          else
          {
            if (v14 >= *(void *)&v9) {
              v14 %= *(void *)&v9;
            }
            if (v14 != v11) {
              goto LABEL_21;
            }
          }
          unsigned int v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
LABEL_21:
    unsigned int v12 = 0;
  }
LABEL_22:
  float v16 = *(float *)(a1 + 112);
  if (v16 == 0.0 || *(float *)v23 <= v16)
  {
    if (v12)
    {
      int v18 = *__error();
      unsigned int v19 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v23 = 67109376;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        _os_log_impl(&dword_1BD672000, v19, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", v23, 0x12u);
      }
      *__error() = v18;
    }
    *(_OWORD *)int v23 = *(_OWORD *)(Ptr + 1024);
    *(_DWORD *)&v23[16] = v8;
    *(float *)&double v24 = v7;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(*(void **)(a1 + 104), (long long *)v23);
  }
  else
  {
    if (v12)
    {
      int v20 = *__error();
      unsigned int v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        double v22 = *(float *)(a1 + 112);
        *(_DWORD *)int v23 = 67109632;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        *(_WORD *)&v23[18] = 2048;
        double v24 = v22;
        _os_log_impl(&dword_1BD672000, v21, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", v23, 0x1Cu);
      }
      *__error() = v20;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::createCandidateQueue()
{
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNNForTest(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  uint64_t v6 = __si_assert_copy_extra_329();
  float v7 = v6;
  unint64_t v8 = "";
  if (v6) {
    unint64_t v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNN(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    unint64_t v14 = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    uint64_t v15 = &unk_1E63453B0;
    uint64_t v16 = a9;
    operator new();
  }
  int8x8_t v9 = __si_assert_copy_extra_329();
  uint8x8_t v10 = v9;
  unint64_t v11 = "";
  if (v9) {
    unint64_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::restoreUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_read_vint32((uint64_t)a3);
  int v41 = result;
  if (result)
  {
    int v6 = 0;
    uint64_t v40 = a1 + 48;
    do
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      float v7 = __dst;
      bzero(__dst, 0x400uLL);
      int v43 = 0;
      CIReadPostings(a3, a2, (uint64_t)&v45, &v43);
      unint64_t v8 = *((void *)a3 + 4);
      size_t v9 = *((void *)a3 + 5);
      if (v9 + 1024 > v8)
      {
        int v20 = (char *)*((void *)a3 + 6);
        unint64_t v21 = v8 - v9;
        if (v8 != v9)
        {
          memcpy(__dst, &v20[v9], v8 - v9);
          *((void *)a3 + 5) = v8;
          size_t v9 = v8;
        }
        uint64_t v22 = *a3;
        off_t __offseta = *((void *)a3 + 3);
        int v23 = v20;
        while (1)
        {
          unint64_t v24 = pread(v22, v23, v9, __offseta);
          if (v24 != -1) {
            break;
          }
          uint64_t v25 = g_prot_error_callback;
          if (!g_prot_error_callback) {
            break;
          }
          int v26 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v25 + 16))(v25, v22, *v26, 4) & 1) == 0)goto LABEL_40; {
        }
          }
        if (v24 != -1)
        {
          *((void *)a3 + 4) = v24;
          *((void *)a3 + 5) = 0;
          off_t v27 = *((void *)a3 + 3) + v24;
          *((void *)a3 + 3) = v27;
          if (!v24) {
            goto LABEL_7;
          }
          float v7 = &__dst[v21];
          size_t v10 = 1024 - v21;
          if (1024 - v21 <= v24)
          {
            size_t v9 = 0;
            goto LABEL_6;
          }
          off_t v37 = v27;
          off_t __offsetb = v24;
          while (1)
          {
            int v28 = (void *)*((void *)a3 + 6);
            memcpy(v7, v28, __offsetb);
            size_t v29 = __offsetb;
            *((void *)a3 + 5) = __offsetb;
            uint64_t v30 = *a3;
            while (1)
            {
              unint64_t v31 = pread(v30, v28, v29, v37);
              if (v31 != -1) {
                break;
              }
              uint64_t v32 = g_prot_error_callback;
              if (!g_prot_error_callback) {
                break;
              }
              char v33 = __error();
              char v34 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v32 + 16))(v32, v30, *v33, 4);
              size_t v29 = __offsetb;
              if ((v34 & 1) == 0) {
                goto LABEL_40;
              }
            }
            off_t v35 = __offsetb;
            if (v31 == -1) {
              break;
            }
            *((void *)a3 + 4) = v31;
            *((void *)a3 + 5) = 0;
            off_t v36 = *((void *)a3 + 3) + v31;
            *((void *)a3 + 3) = v36;
            if (!v31) {
              goto LABEL_7;
            }
            off_t v37 = v36;
            off_t __offsetb = v31;
            size_t v9 = 0;
            v7 += v35;
            v10 -= v35;
            if (v10 <= v31) {
              goto LABEL_6;
            }
          }
        }
LABEL_40:
        a3[4] = *__error();
      }
      else
      {
        size_t v10 = 1024;
LABEL_6:
        memcpy(v7, (const void *)(*((void *)a3 + 6) + v9), v10);
        *((void *)a3 + 5) = v9 + v10;
      }
LABEL_7:
      unsigned int vint32 = store_stream_read_vint32((uint64_t)a3);
      uint64_t v12 = v45;
      uint64_t v13 = v46;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
      unint64_t v14 = *(std::__shared_weak_count **)(a1 + 120);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 136);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        uint64_t v16 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)v16 + 128) = v12;
        *((void *)v16 + 129) = v13;
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        unsigned int v17 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)v17 + 128) = v12;
        *((void *)v17 + 129) = v13;
      }
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      __int16 v18 = *(_WORD *)(a1 + 76);
      int v19 = *(_DWORD *)(a1 + 156);
      v47[0] = *(_DWORD *)(a1 + 160);
      v47[1] = v19;
      __int16 v48 = v18;
      uint64_t result = *(void *)(a1 + 176);
      if (result)
      {
        if (*(_DWORD *)(result + 216) == -270471200) {
          uint64_t result = data_map_ext_restore_data(result, vint32, __dst, 0x400uLL, v47);
        }
      }
      ++v6;
    }
    while (v6 != v41);
  }
  return result;
}

_DWORD *IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, float a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = a4;
  float v73 = a5;
  if (*(unsigned char *)(a1 + 144))
  {
    int v52 = __si_assert_copy_extra_329();
    int v53 = v52;
    int64_t v54 = "";
    if (v52) {
      int64_t v54 = v52;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v54);
    goto LABEL_102;
  }
  if (!a2)
  {
    long long v55 = __si_assert_copy_extra_329();
    int v53 = v55;
    uint64_t v56 = "";
    if (v55) {
      uint64_t v56 = v55;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v56);
    goto LABEL_102;
  }
  unsigned int Vector = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, (uint64_t)a3, (int *)&v74, &v73, a2);
  uint64_t v9 = v74;
  if (v74 == -1)
  {
    int v57 = __si_assert_copy_extra_329();
    long long v58 = v57;
    int v59 = "";
    if (v57) {
      int v59 = v57;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v59);
    goto LABEL_92;
  }
  if (Vector != -1)
  {
    unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), Vector, 1044);
    if (Ptr[260] == a2) {
      return Ptr;
    }
    uint64_t v72 = 0;
    unsigned int data = (const void *)data_map_get_data(*(void *)(a1 + 128), a2, &v72);
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2586;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = a2;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = data;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v12;
    if (v72 < 1)
    {
      int v19 = *__error();
      uint64_t v32 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2595;
        _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v72 != 1024)
      {
        unint64_t v67 = __si_assert_copy_extra_329();
        int v53 = v67;
        std::locale v68 = "";
        if (v67) {
          std::locale v68 = v67;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v68);
        goto LABEL_102;
      }
      if (!data || !memcmp(data, a3, 0x400uLL)) {
        goto LABEL_46;
      }
      int v14 = *__error();
      uint64_t v15 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2590;
        _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v14;
      int v16 = *__error();
      unsigned int v17 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v72);
        __int16 v18 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v18;
        _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v16;
      int v19 = *__error();
      int v20 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v72);
        unint64_t v21 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v21;
        _os_log_impl(&dword_1BD672000, v20, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v19;
LABEL_46:
    char v33 = (const void *)data_map_get_data(*(void *)(a1 + 128), Ptr[260], &v72);
    int v34 = *__error();
    off_t v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v49 = Ptr[260];
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2598;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = v49;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = v33;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v34;
    if (v72 < 1)
    {
      int v42 = *__error();
      uint64_t v45 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2607;
        _os_log_error_impl(&dword_1BD672000, v45, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
      }
      goto LABEL_68;
    }
    if (v72 == 1024)
    {
      size_t v36 = 1024;
      if (!v33 || !memcmp(v33, Ptr, 0x400uLL)) {
        goto LABEL_69;
      }
      int v37 = *__error();
      int v38 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2602;
        _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v37;
      int v39 = *__error();
      uint64_t v40 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)v33, v72);
        int v41 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v41;
        _os_log_impl(&dword_1BD672000, v40, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v39;
      int v42 = *__error();
      int v43 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)Ptr, v72);
        int v44 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v76 = v44;
        _os_log_impl(&dword_1BD672000, v43, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
LABEL_68:
      *__error() = v42;
      size_t v36 = v72;
LABEL_69:
      if (!memcmp(a3, Ptr, v36))
      {
        int v46 = *__error();
        long long v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
        {
          int v50 = Ptr[260];
          *(_DWORD *)long long __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v78 = 1024;
          int v79 = 2610;
          __int16 v80 = 1024;
          *(_DWORD *)int v81 = a2;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v50;
          _os_log_fault_impl(&dword_1BD672000, v47, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v46;
        return Ptr;
      }
      unint64_t v64 = __si_assert_copy_extra_329();
      long long v58 = v64;
      unint64_t v65 = "";
      if (v64) {
        unint64_t v65 = v64;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v65);
LABEL_92:
      free(v58);
      if (__valid_fs(-1)) {
        uint64_t v66 = 2989;
      }
      else {
        uint64_t v66 = 3072;
      }
      *(_DWORD *)uint64_t v66 = -559038737;
      abort();
    }
    unint64_t v69 = __si_assert_copy_extra_329();
    int v53 = v69;
    uint64_t v70 = "";
    if (v69) {
      uint64_t v70 = v69;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v70);
LABEL_102:
    free(v53);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  __src = (void *)a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 72);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v24 = *(_DWORD **)(a1 + 80);
  int v23 = *(std::__shared_weak_count **)(a1 + 88);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  uint64_t v25 = *(void *)(a1 + 32);
  size_t OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(void *)(v25 + 16), 0x414u);
  uint64_t v27 = *(unsigned int *)(v25 + 24);
  if (OffsetFromEnd != v27)
  {
    int v28 = *__error();
    size_t v29 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      int v51 = *(_DWORD *)(v25 + 24);
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "newEntry";
      __int16 v78 = 1024;
      int v79 = 1882;
      __int16 v80 = 2048;
      *(void *)int v81 = OffsetFromEnd;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v51;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
    }
    *__error() = v28;
    uint64_t v27 = *(unsigned int *)(v25 + 24);
    if (OffsetFromEnd != v27)
    {
      unsigned int v62 = __si_assert_copy_extra_329();
      int v53 = v62;
      uint64_t v63 = "";
      if (v62) {
        uint64_t v63 = v62;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v63);
      goto LABEL_102;
    }
  }
  *(_DWORD *)(v25 + 24) = v27 + 1;
  unint64_t v30 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v25 + 16), OffsetFromEnd, 1044);
  memcpy((void *)v30, __src, 0x400uLL);
  *(_OWORD *)(v30 + 1024) = 0u;
  *(_DWORD *)(v30 + 1040) = a2;
  if (*(_DWORD *)(v25 + 24) == 1) {
    *(_DWORD *)(v25 + 36) = a2;
  }
  *(_DWORD *)(v25 + 40) = a2;
  (*(void (**)(_DWORD *, uint64_t, size_t, float))(*(void *)v24 + 56))(v24, v9, OffsetFromEnd, v73);
  uint64_t v31 = *(void *)(a1 + 32);
  if (v24[18] != *(_DWORD *)(v31 + 24))
  {
    int v60 = __si_assert_copy_extra_329();
    int v53 = v60;
    double v61 = "";
    if (v60) {
      double v61 = v60;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v61);
    goto LABEL_102;
  }
  unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(v31 + 16), OffsetFromEnd, 1044);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return Ptr;
}

uint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  size_t v10 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 72);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *(_DWORD **)(a1 + 80);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 140) == -1)
    {
      int v34 = 0;
      off_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      int v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          int v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          off_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      int v23 = __si_assert_copy_extra_329();
      unint64_t v21 = v23;
      unint64_t v24 = "";
      if (v23) {
        unint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      int v20 = __si_assert_copy_extra_329();
      unint64_t v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  int v34 = 0;
  off_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi256EERjRfj_block_invoke;
  v32[3] = &unk_1E63452D0;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi256EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 140)) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    int v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      uint64_t result = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 1044);
      if (v15 != *(_DWORD *)(result + 1040)) {
        return result;
      }
      *(float *)&uint64_t v6 = *a3;
    }
    int v16 = *(const void **)(v8 + 56);
    unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 1044);
    uint64_t result = memcmp(v16, Ptr, 0x400uLL);
    if (!result)
    {
      *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

void *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::storeUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(*(void *)(a1 + 80) + 24));
  unsigned int v7 = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  while (v7 != *(_DWORD *)(v8 + 24))
  {
    unint64_t v9 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v8, v7);
    CIWritePostings((uint64_t)a3, a2, 0, (unsigned int *)(v9 + 1024), 0, 0);
    unint64_t v11 = *((void *)a3 + 4);
    uint64_t v10 = *((void *)a3 + 5);
    if (v10 + 1024 >= v11)
    {
      size_t v13 = 1024;
      float v12 = (char *)v9;
      while (1)
      {
        uint64_t v14 = v11 - v10;
        memcpy((void *)(*((void *)a3 + 6) + v10), v12, v11 - v10);
        *((void *)a3 + 5) += v14;
        if (store_stream_flush(a3, 0)) {
          break;
        }
        v12 += v14;
        v13 -= v14;
        unint64_t v11 = *((void *)a3 + 4);
        uint64_t v10 = *((void *)a3 + 5);
        if (v10 + v13 < v11) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      float v12 = (char *)v9;
      size_t v13 = 1024;
LABEL_5:
      memcpy((void *)(*((void *)a3 + 6) + v10), v12, v13);
      *((void *)a3 + 5) += v13;
    }
    uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(v9 + 1040));
    ++v7;
    if (v8 != *(void *)(a1 + 80))
    {
      int v15 = __si_assert_copy_extra_329();
      int v16 = v15;
      unsigned int v17 = "";
      if (v15) {
        unsigned int v17 = v15;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v17);
      free(v16);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::rename(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  float v12 = *(std::__shared_weak_count **)(a1 + 120);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 128);
  size_t v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 80);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 71) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 48), *(void *)(v16 + 56));
  }
  else {
    std::string buf = *(std::string *)(v16 + 48);
  }
  MEMORY[0x1C1880BF0](v16 + 48, a2);
  int v17 = *__error();
  uint64_t v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__s, v16);
    int v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)unint64_t v24 = 136315394;
    uint64_t v25 = v19;
    __int16 v26 = 2080;
    uint64_t v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::makePurgeable(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    size_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  size_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::makeReadOnly(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 80);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v5);
      uint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      int v15 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 120);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 128);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
    (*(void (**)(uint64_t))(*(void *)v11 + 120))(v11);
    *(unsigned char *)(a1 + 192) = 1;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::truncate(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(*(void *)(a1 + 80));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    int v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 128);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::unlink(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 80);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v14 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::subvert(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v8 = (os_unfair_lock_s *)(a2 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 144));
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 120);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v8);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 176))(v7, v11);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

int *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::compact(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    _os_log_impl(&dword_1BD672000, v5, v6, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  uint64_t result = __error();
  int *result = v4;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    int v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::flush(uint64_t a1, uint64_t a2)
{
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 128);
  int v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 88);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  __int16 v19 = ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  int v20 = &unk_1E63452F8;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    ((void (*)(void *, long long *, char *))v19)(v18, &v32, &v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  int v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  int v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2544, "0", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSet(_DWORD *result, uint64_t a2, char *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (os_log_type_t v6 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    int v19 = __si_assert_copy_extra_329();
    uint64_t v20 = v19;
    uint64_t v21 = "";
    if (v19) {
      uint64_t v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v22 = *__error();
    uint64_t v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 16))(v6);
      int v25 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 24))(v6);
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      __dst[0] = 67109888;
      __dst[1] = v24;
      LOWORD(__dst[2]) = 1024;
      *(_DWORD *)((char *)&__dst[2] + 2) = v25;
      HIWORD(__dst[3]) = 1024;
      __dst[4] = v26;
      LOWORD(__dst[5]) = 1024;
      *(_DWORD *)((char *)&__dst[5] + 2) = v27;
      _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", (uint8_t *)__dst, 0x1Au);
    }
    uint64_t result = __error();
    int *result = v22;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = (uint64_t)(v6 + 12);
  uint64_t v12 = a4;
  while (v9 != *(_DWORD *)(v10 + 24))
  {
    unsigned int v16 = *(_DWORD *)(IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9)+ 1040);
    int v17 = (const void *)IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    memcpy(__dst, v17, sizeof(__dst));
    unint64_t v18 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    if (*(unsigned char *)(v18 + 1024))
    {
      if (*(_DWORD *)(v18 + 1028)) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
      uint64_t v14 = a5;
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = v12;
    }
    int v15 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v11, v16, __dst, 0xFFFFFFFF, 3.4028e38);
    uint64_t result = vi_memory_postings::push_posting(a3, v13, v15 + 256, v14);
    ++v9;
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSet(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  int v13 = "";
  if (v11) {
    int v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::train(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    char v31 = __si_assert_copy_extra_329();
    long long v32 = v31;
    long long v33 = "";
    if (v31) {
      long long v33 = v31;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v33);
    goto LABEL_54;
  }
  if (*v3 != a1)
  {
    int v34 = __si_assert_copy_extra_329();
    long long v32 = v34;
    off_t v35 = "";
    if (v34) {
      off_t v35 = v34;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v35);
LABEL_54:
    free(v32);
    if (__valid_fs(-1)) {
      uint64_t v36 = 2989;
    }
    else {
      uint64_t v36 = 3072;
    }
    *(_DWORD *)uint64_t v36 = -559038737;
LABEL_58:
    abort();
  }
  uint64_t v6 = a2;
  int v7 = (char *)operator new(8uLL);
  int v8 = v7;
  *(void *)int v7 = a1 + 48;
  if (v4 < 9) {
    goto LABEL_39;
  }
  int v9 = v7 + 8;
  unint64_t v10 = 1;
  uint64_t v11 = v7 + 8;
  uint64_t v37 = v6;
  do
  {
    uint64_t v13 = v3[v10];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v13 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v13 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v13 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v13 + 16))
    {
      int v28 = __si_assert_copy_extra_329();
      long long v29 = v28;
      uint64_t v30 = "";
      if (v28) {
        uint64_t v30 = v28;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v30);
      free(v29);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v14 = v13 + 48;
    if (v9 < v11)
    {
      *(void *)int v9 = v14;
      uint64_t v12 = v9 + 8;
      goto LABEL_6;
    }
    uint64_t v15 = (v9 - v8) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_58;
    }
    if ((v11 - v8) >> 2 > v16) {
      unint64_t v16 = (v11 - v8) >> 2;
    }
    if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      __int16 v18 = operator new(8 * v17);
    }
    else
    {
      __int16 v18 = 0;
    }
    int v19 = &v18[8 * v15];
    uint64_t v11 = &v18[8 * v17];
    *(void *)int v19 = v14;
    uint64_t v12 = v19 + 8;
    if (v9 == v8)
    {
LABEL_36:
      operator delete(v8);
      goto LABEL_37;
    }
    unint64_t v20 = v9 - 8 - v8;
    if (v20 < 0x168)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v18[v9 - v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v9 - v8 - 8])
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      int v21 = v9;
      do
      {
LABEL_34:
        uint64_t v27 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v21 != v8);
      goto LABEL_35;
    }
    if ((unint64_t)(v8 - v18) < 0x20)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    uint64_t v22 = (v20 >> 3) + 1;
    int v21 = &v9[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v23 = &v18[8 * v15 - 16];
    int v24 = v9 - 16;
    uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v19 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_34;
    }
LABEL_35:
    if (v8) {
      goto LABEL_36;
    }
LABEL_37:
    int v8 = v19;
    uint64_t v6 = v37;
LABEL_6:
    ++v10;
    os_log_type_t v3 = *(void **)v6;
    int v9 = v12;
  }
  while (v10 < (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if (v8)
  {
LABEL_39:
    operator delete(v8);
  }
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::insertForTest(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1)) {
      uint64_t v13 = 2989;
    }
    else {
      uint64_t v13 = 3072;
    }
    *(_DWORD *)uint64_t v13 = -559038737;
    abort();
  }
  uint64_t result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38);
  if (result[258])
  {
    int v9 = result[257] + 1;
  }
  else
  {
    result[258] = a7;
    int v9 = 1;
  }
  result[257] = v9;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::insertForMerge(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    int v8 = __si_assert_copy_extra_329();
    int v9 = v8;
    unint64_t v10 = "";
    if (v8) {
      unint64_t v10 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

char *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::insertVector(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7, uint64_t a8, char *a9)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    uint64_t v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38)+ 256;
  return vi_memory_postings::push_posting(a9, a7, v11, a8);
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::bulkInsertForTest(_DWORD *result, char *a2, int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v21 = *a5++;
        unsigned int v20 = v21;
        int v23 = *a3++;
        int v22 = v23;
        uint64_t result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v20, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[258])
        {
          int v19 = result[257] + 1;
        }
        else
        {
          result[258] = v22;
          int v19 = 1;
        }
        result[257] = v19;
        a2 += 1024;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v14 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v15 = *__error();
          unint64_t v16 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v25 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v15;
        }
        unsigned int v17 = a5[v10];
        int v18 = a3[v10];
        uint64_t result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v17, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[258])
        {
          int v13 = result[257] + 1;
        }
        else
        {
          result[258] = v18;
          int v13 = 1;
        }
        result[257] = v13;
        a2 += 1024;
        uint64_t v10 = v14;
      }
      while (v9 != v14);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::shadow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 168))(v9, a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return 0;
    }
  }
  else if (!v7)
  {
    return 0;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return 0;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::validAddress(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    os_unfair_lock_unlock(v2);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))
      {
        a2 += 1024;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))break; {
        a2 += 1024;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    int v15 = v14;
    unint64_t v16 = "";
    if (v14) {
      unint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int Vector = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, a2, (int *)&v24, &v23, 0);
  if (Vector == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
    uint64_t v9 = *(void *)(a1 + 64);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 88);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke;
    v20[3] = &unk_1E63452A8;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke_800;
      v15[3] = &unk_1F1815270;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      unint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      int v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return Vector != -1;
}

int *___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(const void **)(a1 + 48);
  unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(*(void *)(a1 + 40) + 32) + 16), *(unsigned int *)a3, 1044);
  uint64_t result = (int *)memcmp(v8, Ptr, 0x400uLL);
  if (!result)
  {
    int v11 = *__error();
    unsigned int v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v17 = a3[1];
      int v27 = 136315906;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2760;
      __int16 v31 = 1024;
      *(_DWORD *)long long v32 = a2;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v17;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&v27, 0x22u);
    }
    *__error() = v11;
    int v13 = *__error();
    uint64_t v14 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(_DWORD *)(a1 + 56);
      double v19 = *(float *)(a1 + 60);
      int v27 = 136315906;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2761;
      __int16 v31 = 1024;
      *(_DWORD *)long long v32 = v18;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v19;
      _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&v27, 0x22u);
    }
    *__error() = v13;
    int v15 = *__error();
    unint64_t v16 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      float v20 = *(float *)(a1 + 60);
      float v21 = a3[1];
      float v22 = vabds_f32(v20, v21);
      if (v20 == v21)
      {
        BOOL v23 = 1;
        BOOL v24 = 1;
      }
      else
      {
        float v25 = fabsf(v20);
        float v26 = fabsf(v21);
        BOOL v23 = v22 <= fmaxf(fminf(v26, v25) * 0.000015259, 0.000015259);
        BOOL v24 = v22 <= (float)(fmaxf(v25, v26) * 0.000015259);
      }
      int v27 = 136317186;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2762;
      __int16 v31 = 2048;
      *(double *)long long v32 = v22;
      *(_WORD *)&void v32[8] = 2048;
      *(void *)&v32[10] = 0x3810000000000000;
      __int16 v33 = 2048;
      uint64_t v34 = 0x3E80000000000000;
      __int16 v35 = 1024;
      BOOL v36 = v22 < 1.1755e-38;
      __int16 v37 = 1024;
      BOOL v38 = v22 < 0.00000011921;
      __int16 v39 = 1024;
      BOOL v40 = v23;
      __int16 v41 = 1024;
      BOOL v42 = v24;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&v27, 0x48u);
    }
    uint64_t result = __error();
    int *result = v15;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke_800(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 40);
  unsigned int v8 = *(const void **)(a1 + 48);
  unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v9 + 32) + 16), *(unsigned int *)a3, 1044);
  if (!memcmp(v8, Ptr, 0x400uLL))
  {
    int v11 = *__error();
    unsigned int v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v40 = a3[1];
      float __C = 4.8153e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2770;
      __int16 v100 = 1024;
      int v101 = a2;
      __int16 v102 = 2048;
      *(double *)int v103 = v40;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v11;
    int v13 = *(const float **)(a1 + 48);
    uint64_t v14 = (const float *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float __C = 3.4028e38;
    vDSP_distancesq(v13, 1, v14, 1, &__C, 0x100uLL);
    float v15 = __C;
    int v16 = *__error();
    double v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v41 = *(_DWORD *)(a1 + 88);
      float __C = 4.8153e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2772;
      __int16 v100 = 1024;
      int v101 = v41;
      __int16 v102 = 2048;
      *(double *)int v103 = v15;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v16;
    long long v93 = 0;
    int v94 = 0;
    uint64_t v95 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&v93);
    int v18 = *__error();
    double v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v42 = *(_DWORD *)v93;
      float v43 = *((float *)v93 + 1);
      int v44 = *((_DWORD *)v93 + 2);
      float v45 = *((float *)v93 + 3);
      BOOL v46 = v43 == v45 || vabds_f32(v43, v45) <= fmaxf(fminf(fabsf(v45), fabsf(v43)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2774;
      __int16 v100 = 1024;
      int v101 = v42;
      __int16 v102 = 2048;
      *(double *)int v103 = v43;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v44;
      __int16 v104 = 2048;
      double v105 = v45;
      __int16 v106 = 1024;
      LODWORD(v107) = v46;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v18;
    int v20 = *__error();
    float v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v47 = *(_DWORD *)v93;
      int v48 = *((_DWORD *)v93 + 2);
      BOOL v49 = *((float *)v93 + 1) == *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2775;
      __int16 v100 = 1024;
      int v101 = v47;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v48;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v49;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v20;
    int v22 = *__error();
    BOOL v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      int v50 = *(_DWORD *)v93;
      int v51 = *((_DWORD *)v93 + 2);
      BOOL v52 = *((float *)v93 + 1) < *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2776;
      __int16 v100 = 1024;
      int v101 = v50;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v51;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v52;
      _os_log_error_impl(&dword_1BD672000, v23, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v22;
    int v24 = *__error();
    float v25 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v53 = *(_DWORD *)v93;
      int v54 = *((_DWORD *)v93 + 2);
      BOOL v55 = *((float *)v93 + 1) > *((float *)v93 + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2777;
      __int16 v100 = 1024;
      int v101 = v53;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v54;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v55;
      _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v24;
    int v26 = *__error();
    int v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      int v56 = *(_DWORD *)v93;
      int v57 = *((_DWORD *)v93 + 2);
      float v58 = *((float *)v93 + 1);
      float v59 = *((float *)v93 + 3);
      double v60 = (float)(v58 - v59);
      float v61 = vabds_f32(v58, v59);
      if (v58 == v59)
      {
        BOOL v62 = 1;
        BOOL v63 = 1;
      }
      else
      {
        float v86 = fabsf(v58);
        float v87 = fabsf(v59);
        BOOL v62 = v61 <= fmaxf(fminf(v87, v86) * 0.000015259, 0.000015259);
        BOOL v63 = v61 <= (float)(fmaxf(v86, v87) * 0.000015259);
      }
      float __C = 4.8161e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2778;
      __int16 v100 = 1024;
      int v101 = v56;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v57;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v60;
      __int16 v104 = 2048;
      double v105 = 1.17549435e-38;
      __int16 v106 = 2048;
      uint64_t v107 = 0x3E80000000000000;
      __int16 v108 = 1024;
      BOOL v109 = v61 < 1.1755e-38;
      __int16 v110 = 1024;
      BOOL v111 = v61 < 0.00000011921;
      __int16 v112 = 1024;
      BOOL v113 = v62;
      __int16 v114 = 1024;
      BOOL v115 = v63;
      _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v26;
    float v91 = 0;
    uint64_t v92 = 0;
    std::string __p = 0;
    uint64_t v28 = *(void *)(a1 + 56);
    unint64_t v29 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v9 + 32) + 16), *(unsigned int *)a3, 1044);
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v28 + 80))(&__p, v28, v29, 2);
    int v30 = *__error();
    __int16 v31 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      int v64 = *(_DWORD *)__p;
      float v65 = *((float *)__p + 1);
      int v66 = *((_DWORD *)__p + 2);
      float v67 = *((float *)__p + 3);
      BOOL v68 = v65 == v67 || vabds_f32(v65, v67) <= fmaxf(fminf(fabsf(v67), fabsf(v65)) * 0.000015259, 0.000015259);
      float __C = 4.8156e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2781;
      __int16 v100 = 1024;
      int v101 = v64;
      __int16 v102 = 2048;
      *(double *)int v103 = v65;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v66;
      __int16 v104 = 2048;
      double v105 = v67;
      __int16 v106 = 1024;
      LODWORD(v107) = v68;
      _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v30;
    int v32 = *__error();
    __int16 v33 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      int v69 = *(_DWORD *)__p;
      int v70 = *((_DWORD *)__p + 2);
      BOOL v71 = *((float *)__p + 1) == *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2782;
      __int16 v100 = 1024;
      int v101 = v69;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v70;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v71;
      _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v32;
    int v34 = *__error();
    __int16 v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v72 = *(_DWORD *)__p;
      int v73 = *((_DWORD *)__p + 2);
      BOOL v74 = *((float *)__p + 1) < *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2783;
      __int16 v100 = 1024;
      int v101 = v72;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v73;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v74;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v34;
    int v36 = *__error();
    __int16 v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      int v75 = *(_DWORD *)__p;
      int v76 = *((_DWORD *)__p + 2);
      BOOL v77 = *((float *)__p + 1) > *((float *)__p + 3);
      float __C = 4.8154e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2784;
      __int16 v100 = 1024;
      int v101 = v75;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v76;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v77;
      _os_log_error_impl(&dword_1BD672000, v37, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v36;
    int v38 = *__error();
    __int16 v39 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      int v78 = *(_DWORD *)__p;
      int v79 = *((_DWORD *)__p + 2);
      float v80 = *((float *)__p + 1);
      float v81 = *((float *)__p + 3);
      float v82 = vabds_f32(v80, v81);
      BOOL v83 = (float)(v80 - v81) < 1.1755e-38;
      if (v80 == v81)
      {
        BOOL v84 = 1;
        BOOL v85 = 1;
      }
      else
      {
        float v88 = fabsf(v80);
        float v89 = fabsf(v81);
        BOOL v84 = v82 <= fmaxf(fminf(v89, v88) * 0.000015259, 0.000015259);
        BOOL v85 = v82 <= (float)(fmaxf(v88, v89) * 0.000015259);
      }
      float __C = 4.8161e-34;
      size_t v97 = "exists_block_invoke";
      __int16 v98 = 1024;
      int v99 = 2785;
      __int16 v100 = 1024;
      int v101 = v78;
      __int16 v102 = 1024;
      *(_DWORD *)int v103 = v79;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v82;
      __int16 v104 = 2048;
      double v105 = 1.17549435e-38;
      __int16 v106 = 2048;
      uint64_t v107 = 0x3E80000000000000;
      __int16 v108 = 1024;
      BOOL v109 = v83;
      __int16 v110 = 1024;
      BOOL v111 = v82 < 0.00000011921;
      __int16 v112 = 1024;
      BOOL v113 = v84;
      __int16 v114 = 1024;
      BOOL v115 = v85;
      _os_log_error_impl(&dword_1BD672000, v39, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v38;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
    if (__p)
    {
      float v91 = __p;
      operator delete(__p);
    }
    if (v93)
    {
      int v94 = v93;
      operator delete(v93);
    }
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1 + 48);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814F98;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814F98;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsEENS_9allocatorIS6_EEE16__on_zero_sharedEv(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)v2, *(void **)(v2 + 8));
    JUMPOUT(0x1C1881000);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsEENS_9allocatorIS6_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1814C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsEENS_9allocatorIS6_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1814C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEENS6_I17AnyPartitionStoreEE(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v6 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v10 = *(char **)(a1 + 64);
  unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v9 = (long long *)(a1 + 64);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v12 = *(_DWORD **)(a1 + 80);
  int v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  uint64_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    unint64_t v29 = __si_assert_copy_extra_329();
    int v30 = v29;
    __int16 v31 = "";
    if (v29) {
      __int16 v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 24) != v14[18])
  {
    int v32 = __si_assert_copy_extra_329();
    int v30 = v32;
    __int16 v33 = "";
    if (v32) {
      __int16 v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    float v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = v10 + 8;
      if (v10[31] < 0) {
        int v16 = (void *)*v16;
      }
      __int16 v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      int v18 = (void *)(*a2 + 8);
      __int16 v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        int v18 = (void *)*v18;
      }
      int v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      double v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        double v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      float v21 = __p;
      if (v45 < 0) {
        float v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      BOOL v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      int v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      int v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      BOOL v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      int v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    uint64_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  int v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  float v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  int v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13newPartitionsENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEE(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  int v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    int v6 = ".tmp.partitions";
  }
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unsigned int v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v13 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v13) = v7;
    uint64_t v9 = __dst;
    if (!v7)
    {
LABEL_16:
      *((unsigned char *)v8 + (void)v9) = 0;
      malloc_default_zone();
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v9, v6, (size_t)v8);
  goto LABEL_16;
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE17getVectorAtOffsetEj(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), a2, 1556);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13getPartitionsEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  int v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12getQuantizerEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsED0Ev(void *a1)
{
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsED2Ev(a1);
  JUMPOUT(0x1C1881000);
}

void *_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsED2Ev(void *a1)
{
  *a1 = &unk_1F1814C10;
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12diagnoseDumpERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS5_13basic_ostreamIcS8_EEi(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float v15 = (void *)std::ostream::operator<<();
  int v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 192)) {
    int v17 = "(readOnly)";
  }
  else {
    int v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  double v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12getQuantizerEv(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    int v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    int v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    uint64_t v28 = (void *)std::ostream::operator<<();
    unint64_t v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    int v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13getPartitionsEv(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  int v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 80);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  __int16 v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 24))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      int v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v52, 1556);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 24));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v40, 1556);
        int v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        BOOL v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, Ptr, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, Ptr + 1528, 8);
        if ((v71 & 0x80u) == 0) {
          BOOL v49 = &v69;
        }
        else {
          BOOL v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 24));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6statusERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  int v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  double v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13getPartitionsEv(a1 + 48, &v31);
  if (v31)
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13getPartitionsEv(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE26updateVectorStorageOffsetsEP13__SIUINT64Set(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = a1 + 48;
  if (a2)
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (i >= result) {
        break;
      }
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), i, 1556);
      if (!*(unsigned char *)(v2 + 184))
      {
        unint64_t v8 = *(unsigned int *)(Ptr + 1552);
        int v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(void *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          uint64_t v10 = *(void *)(v2 + 56 + 8 * ((v8 >> ((60 - 4 * v9) & 0xFC)) & 0xF));
          if (v10)
          {
            int v11 = v9 + 2;
            do
              uint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> ((64 - 4 * v11++) & 0xFC)) & 0xF));
            while ((v10 & 1) != 0);
          }
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
          }
        }
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (v2 >= result) {
        break;
      }
      vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), v2++, 1556);
    }
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16getDataForOffsetEjPj(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    int v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    uint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *uint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 1536;
  }
  *a3 = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14setVectorStoreEP10data_map_s(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE11storageSizeEv(uint64_t a1)
{
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 80) + 16) + 24);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE24aNNForDebugProcessResultEPvU13block_pointerFvjjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  uint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v25 + 2), *((unsigned int *)v25 + 4), v25[5]);
        v25 += 6;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v16 + 2), *((unsigned int *)v16 + 4), v16[5]);
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          uint64_t v21 = v15;
          int v22 = *__error();
          int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            uint64_t v24 = __p;
            if (v49 < 0) {
              uint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        v16 += 6;
      }
      while (v16 != v12);
    }
  }
  int v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      int v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    int v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE23aNNForTestProcessResultEPvU13block_pointerFvjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6345240;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfbPv(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9, a4, a7, a8, 0, a9);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[1532], a2[1533], a2[1534], a2[1535]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v12 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 10000;
  }
  if (10 * v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10 * v11;
  }
  unsigned int v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v142 = 0;
  __int16 v143 = &v142;
  if (v17 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v17;
  }
  int v145 = 0;
  uint64_t v144 = 0x2000000000;
  uint64_t v138 = 0;
  __int16 v139 = &v138;
  int v141 = 0;
  uint64_t v140 = 0x2000000000;
  uint64_t v137 = 0;
  long long v135 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v135);
  double Current = CFAbsoluteTimeGetCurrent();
  int v122 = v11;
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1) <= v14)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    LODWORD(v121) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    unsigned int v62 = 0;
    uint64_t v63 = *(void *)(a1 + 32);
    do
    {
      if (v62 == *(_DWORD *)(v63 + 24)) {
        goto LABEL_98;
      }
      ++*((_DWORD *)v143 + 6);
      unint64_t v64 = _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratordeEv(v63, v62);
      unint64_t v65 = v64;
      unint64_t v66 = *(unsigned int *)(v64 + 1552);
      _Q0 = 0uLL;
      unint64_t v68 = -8;
      std::locale v69 = (float16x8_t *)a2;
      uint64_t v70 = (float16x8_t *)v64;
      do
      {
        float16x8_t v71 = *v69++;
        float16x8_t v72 = v71;
        float16x8_t v73 = *v70++;
        float16x8_t v74 = vsubq_f16(v72, v73);
        _Q0 = vmlaq_f16(_Q0, v74, v74);
        v68 += 8;
      }
      while (v68 < 0x2F8);
      if (*((void *)&v135 + 1))
      {
        uint8x8_t v75 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v135 + 8));
        v75.i16[0] = vaddlv_u8(v75);
        if (v75.u32[0] > 1uLL)
        {
          if (*((void *)&v135 + 1) <= v66) {
            unint64_t v76 = v66 % *((void *)&v135 + 1);
          }
          else {
            unint64_t v76 = *(unsigned int *)(v64 + 1552);
          }
        }
        else
        {
          unint64_t v76 = (DWORD2(v135) - 1) & v66;
        }
        BOOL v77 = *(uint64_t **)(v135 + 8 * v76);
        if (v77)
        {
          BOOL v77 = (uint64_t *)*v77;
          if (v77)
          {
            if (v75.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v79 = v77[1];
                if (v79 == v66)
                {
                  if (*((_DWORD *)v77 + 4) == v66) {
                    goto LABEL_85;
                  }
                }
                else if ((v79 & (*((void *)&v135 + 1) - 1)) != v76)
                {
                  goto LABEL_84;
                }
                BOOL v77 = (uint64_t *)*v77;
                if (!v77) {
                  goto LABEL_85;
                }
              }
            }
            do
            {
              unint64_t v78 = v77[1];
              if (v78 == v66)
              {
                if (*((_DWORD *)v77 + 4) == v66) {
                  break;
                }
              }
              else
              {
                if (v78 >= *((void *)&v135 + 1)) {
                  v78 %= *((void *)&v135 + 1);
                }
                if (v78 != v76) {
                  goto LABEL_84;
                }
              }
              BOOL v77 = (uint64_t *)*v77;
            }
            while (v77);
          }
        }
      }
      else
      {
LABEL_84:
        BOOL v77 = 0;
      }
LABEL_85:
      __asm { FCVT            S1, H0 }
      _H2 = _Q0.i16[1];
      __asm { FCVT            S2, H2 }
      float v87 = _S1 + _S2;
      LOWORD(_S2) = _Q0.i16[2];
      __asm { FCVT            S2, H2 }
      _H3 = _Q0.i16[3];
      __asm { FCVT            S3, H3 }
      float v91 = v87 + (float)(_S2 + _S3);
      LOWORD(_S2) = _Q0.i16[4];
      __asm { FCVT            S2, H2 }
      LOWORD(_S3) = _Q0.i16[5];
      __asm { FCVT            S3, H3 }
      float v94 = _S2 + _S3;
      LOWORD(_S3) = _Q0.i16[6];
      __asm { FCVT            S3, H3 }
      _H0 = _Q0.i16[7];
      __asm { FCVT            S0, H0 }
      float v98 = (float)(v91 + (float)(v94 + _S3)) + _S0;
      if (a6 == 0.0 || v98 <= a6)
      {
        if (v77)
        {
          int v100 = *__error();
          int v101 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v98;
            _os_log_impl(&dword_1BD672000, v101, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v100;
        }
        *(_OWORD *)keyExistsAndHasValidFormat = *(_OWORD *)(v65 + 1536);
        *(_DWORD *)&keyExistsAndHasValidFormat[16] = v66;
        *(float *)&keyExistsAndHasValidFormat[20] = v98;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(a4, (long long *)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v77)
        {
          int v102 = *__error();
          int v103 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v98;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v103, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v102;
        }
        ++*((_DWORD *)v139 + 6);
      }
      ++v62;
    }
    while (v63 == *(void *)(a1 + 32));
    int v118 = __si_assert_copy_extra_329();
    __int16 v119 = v118;
    __int16 v120 = "";
    if (v118) {
      __int16 v120 = v118;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v120);
    free(v119);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_126;
  }
  if (!AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v22 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = 40;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v24 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      int v25 = v24;
    }
    else {
      int v25 = 45;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v26 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v27 = keyExistsAndHasValidFormat[0];
    int v28 = 8 * v26;
    int v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v30 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12) {
      char v32 = 18;
    }
    else {
      char v32 = v30;
    }
    char v33 = v32 - 3;
    unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    if (v31) {
      char v35 = v33;
    }
    else {
      char v35 = 17;
    }
    unsigned int v36 = v34 >> v35;
    if (v36 <= 8) {
      int v37 = 8;
    }
    else {
      int v37 = v36;
    }
    int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    if (v27) {
      int v39 = v28;
    }
    else {
      int v39 = 800;
    }
    int v11 = v122;
    unsigned int v40 = v39 * v38 / (v29 * v37);
    if (v23 < v40) {
      unsigned int v40 = v23;
    }
    if (v40 <= v20) {
      CFIndex AppIntegerValue = v20;
    }
    else {
      CFIndex AppIntegerValue = v40;
    }
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v46 = *(void *)(a1 + 64);
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 72);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = *(void *)(a1 + 80);
  long long v47 = *(std::__shared_weak_count **)(a1 + 88);
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
  uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
  long long v132 = 0;
  long long v133 = 0;
  uint64_t v134 = 0;
  double v146 = &v132;
  unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
  if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
  {
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    __int16 v129 = 0;
    goto LABEL_106;
  }
  do
  {
    int v52 = *v50;
    v50 += 2;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v146, v52);
  }
  while (v50 != v49);
  int v53 = v132;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  __int16 v129 = 0;
  int64_t v54 = v133 - (unsigned char *)v132;
  if (v133 == v132) {
    goto LABEL_106;
  }
  if (v54 < 0) {
LABEL_126:
  }
    abort();
  long long v55 = (char *)operator new(v133 - (unsigned char *)v132);
  uint64_t v56 = &v55[4 * (v54 >> 2)];
  __int16 v129 = v55;
  uint64_t v131 = v56;
  memcpy(v55, v53, v54);
  uint64_t v130 = v56;
LABEL_106:
  v124[0] = MEMORY[0x1E4F143A8];
  v124[1] = 1174405120;
  v124[2] = ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v124[3] = &unk_1F1814F58;
  v124[6] = a1;
  v124[7] = a2;
  v124[4] = &v142;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v125, (uint64_t)&v135);
  float v128 = a6;
  v124[5] = &v138;
  __int16 v127 = a4;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v129, v124);
  if (v129)
  {
    uint64_t v130 = v129;
    operator delete(v129);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  BOOL v115 = v126;
  int v11 = v122;
  if (v126)
  {
    do
    {
      uint64_t v116 = (void *)*v115;
      operator delete(v115);
      BOOL v115 = v116;
    }
    while (v116);
  }
  uint64_t v117 = v125;
  __int16 v125 = 0;
  if (v117) {
    operator delete(v117);
  }
  if (v132)
  {
    long long v133 = v132;
    operator delete(v132);
  }
  if (*(void *)keyExistsAndHasValidFormat)
  {
    *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  unint64_t v121 = v51 >> 3;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_98:
  int v104 = *__error();
  double v105 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    int v106 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v107 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    int v108 = *((_DWORD *)v139 + 6);
    int v109 = *((_DWORD *)v143 + 6);
    unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    CFAbsoluteTime v111 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v106;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v121;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v107;
    __int16 v148 = 1024;
    int v149 = v108;
    __int16 v150 = 1024;
    int v151 = v109;
    __int16 v152 = 2048;
    unint64_t v153 = v110;
    __int16 v154 = 2048;
    CFAbsoluteTime v155 = v111 - Current;
    _os_log_impl(&dword_1BD672000, v105, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v104;
  __int16 v112 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      BOOL v113 = (void *)*v112;
      operator delete(v112);
      __int16 v112 = v113;
    }
    while (v113);
  }
  __int16 v114 = (void *)v135;
  *(void *)&long long v135 = 0;
  if (v114) {
    operator delete(v114);
  }
  _Block_object_dispose(&v138, 8);
  _Block_object_dispose(&v142, 8);
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratordeEv(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    int v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1910, "offset < store->endOffset()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unint64_t v2 = *(void **)(a1 + 16);
  return vi_onefixedsize_memory_allocator::getPtr(v2, a2, 1556);
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v4 + 32) + 16), *a3, 1556);
  unint64_t v6 = Ptr;
  unint64_t v7 = *(float16x8_t **)(a1 + 56);
  _Q0 = 0uLL;
  unint64_t v9 = -8;
  uint64_t v10 = (float16x8_t *)Ptr;
  do
  {
    float16x8_t v11 = *v7++;
    float16x8_t v12 = v11;
    float16x8_t v13 = *v10++;
    float16x8_t v14 = vsubq_f16(v12, v13);
    _Q0 = vmlaq_f16(_Q0, v14, v14);
    v9 += 8;
  }
  while (v9 < 0x2F8);
  __asm { FCVT            S1, H0 }
  _H2 = _Q0.i16[1];
  __asm { FCVT            S2, H2 }
  float v22 = _S1 + _S2;
  LOWORD(_S2) = _Q0.i16[2];
  __asm { FCVT            S2, H2 }
  _H3 = _Q0.i16[3];
  __asm { FCVT            S3, H3 }
  float v26 = v22 + (float)(_S2 + _S3);
  LOWORD(_S2) = _Q0.i16[4];
  __asm { FCVT            S2, H2 }
  LOWORD(_S3) = _Q0.i16[5];
  __asm { FCVT            S3, H3 }
  float v29 = _S2 + _S3;
  LOWORD(_S3) = _Q0.i16[6];
  __asm { FCVT            S3, H3 }
  _H0 = _Q0.i16[7];
  __asm { FCVT            S0, H0 }
  float v33 = (float)(v26 + (float)(v29 + _S3)) + _S0;
  unint64_t v34 = *(unsigned int *)(Ptr + 1552);
  int8x8_t v35 = *(int8x8_t *)(a1 + 72);
  if (v35)
  {
    uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.u32[0] > 1uLL)
    {
      unint64_t v37 = *(unsigned int *)(Ptr + 1552);
      if (*(void *)&v35 <= v34) {
        unint64_t v37 = v34 % *(void *)&v35;
      }
    }
    else
    {
      unint64_t v37 = (v35.i32[0] - 1) & v34;
    }
    int v38 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v37);
    if (v38)
    {
      int v38 = (uint64_t *)*v38;
      if (v38)
      {
        if (v36.u32[0] < 2uLL)
        {
          uint64_t v39 = *(void *)&v35 - 1;
          while (1)
          {
            uint64_t v41 = v38[1];
            if (v41 == v34)
            {
              if (*((_DWORD *)v38 + 4) == v34) {
                goto LABEL_24;
              }
            }
            else if ((v41 & v39) != v37)
            {
              goto LABEL_23;
            }
            int v38 = (uint64_t *)*v38;
            if (!v38) {
              goto LABEL_24;
            }
          }
        }
        do
        {
          unint64_t v40 = v38[1];
          if (v40 == v34)
          {
            if (*((_DWORD *)v38 + 4) == v34) {
              break;
            }
          }
          else
          {
            if (v40 >= *(void *)&v35) {
              v40 %= *(void *)&v35;
            }
            if (v40 != v37) {
              goto LABEL_23;
            }
          }
          int v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
    }
  }
  else
  {
LABEL_23:
    int v38 = 0;
  }
LABEL_24:
  float v42 = *(float *)(a1 + 112);
  if (v42 == 0.0 || v33 <= v42)
  {
    if (v38)
    {
      int v44 = *__error();
      uint64_t v45 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v49 = 67109376;
        *(_DWORD *)&v49[4] = v34;
        *(_WORD *)&v49[8] = 2048;
        *(double *)&v49[10] = v33;
        _os_log_impl(&dword_1BD672000, v45, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", v49, 0x12u);
      }
      *__error() = v44;
    }
    *(_OWORD *)uint64_t v49 = *(_OWORD *)(v6 + 1536);
    *(_DWORD *)&v49[16] = v34;
    *(float *)&double v50 = v33;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(*(void **)(a1 + 104), (long long *)v49);
  }
  else
  {
    if (v38)
    {
      int v46 = *__error();
      long long v47 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        double v48 = *(float *)(a1 + 112);
        *(_DWORD *)uint64_t v49 = 67109632;
        *(_DWORD *)&v49[4] = v34;
        *(_WORD *)&v49[8] = 2048;
        *(double *)&v49[10] = v33;
        *(_WORD *)&v49[18] = 2048;
        double v50 = v48;
        _os_log_impl(&dword_1BD672000, v47, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", v49, 0x1Cu);
      }
      *__error() = v46;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE20createCandidateQueueEj()
{
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE10aNNForTestEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvjfEj(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  unint64_t v6 = __si_assert_copy_extra_329();
  unint64_t v7 = v6;
  int v8 = "";
  if (v6) {
    int v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    float16x8_t v14 = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    unsigned int v15 = &unk_1E6345218;
    uint64_t v16 = a9;
    operator new();
  }
  unint64_t v9 = __si_assert_copy_extra_329();
  uint64_t v10 = v9;
  float16x8_t v11 = "";
  if (v9) {
    float16x8_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16restoreUpdateSetEP15PostingBaseInfoP14store_stream_t(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_read_vint32((uint64_t)a3);
  int v41 = result;
  if (result)
  {
    int v6 = 0;
    uint64_t v40 = a1 + 48;
    do
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      unint64_t v7 = __dst;
      bzero(__dst, 0x600uLL);
      int v43 = 0;
      CIReadPostings(a3, a2, (uint64_t)&v45, &v43);
      unint64_t v8 = *((void *)a3 + 4);
      size_t v9 = *((void *)a3 + 5);
      if (v9 + 1536 > v8)
      {
        unsigned int v20 = (char *)*((void *)a3 + 6);
        unint64_t v21 = v8 - v9;
        if (v8 != v9)
        {
          memcpy(__dst, &v20[v9], v8 - v9);
          *((void *)a3 + 5) = v8;
          size_t v9 = v8;
        }
        uint64_t v22 = *a3;
        off_t __offseta = *((void *)a3 + 3);
        unsigned int v23 = v20;
        while (1)
        {
          unint64_t v24 = pread(v22, v23, v9, __offseta);
          if (v24 != -1) {
            break;
          }
          uint64_t v25 = g_prot_error_callback;
          if (!g_prot_error_callback) {
            break;
          }
          float v26 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v25 + 16))(v25, v22, *v26, 4) & 1) == 0)goto LABEL_40; {
        }
          }
        if (v24 != -1)
        {
          *((void *)a3 + 4) = v24;
          *((void *)a3 + 5) = 0;
          off_t v27 = *((void *)a3 + 3) + v24;
          *((void *)a3 + 3) = v27;
          if (!v24) {
            goto LABEL_7;
          }
          unint64_t v7 = &__dst[v21];
          size_t v10 = 1536 - v21;
          if (1536 - v21 <= v24)
          {
            size_t v9 = 0;
            goto LABEL_6;
          }
          off_t v37 = v27;
          off_t __offsetb = v24;
          while (1)
          {
            int v28 = (void *)*((void *)a3 + 6);
            memcpy(v7, v28, __offsetb);
            size_t v29 = __offsetb;
            *((void *)a3 + 5) = __offsetb;
            uint64_t v30 = *a3;
            while (1)
            {
              unint64_t v31 = pread(v30, v28, v29, v37);
              if (v31 != -1) {
                break;
              }
              uint64_t v32 = g_prot_error_callback;
              if (!g_prot_error_callback) {
                break;
              }
              float v33 = __error();
              char v34 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v32 + 16))(v32, v30, *v33, 4);
              size_t v29 = __offsetb;
              if ((v34 & 1) == 0) {
                goto LABEL_40;
              }
            }
            off_t v35 = __offsetb;
            if (v31 == -1) {
              break;
            }
            *((void *)a3 + 4) = v31;
            *((void *)a3 + 5) = 0;
            off_t v36 = *((void *)a3 + 3) + v31;
            *((void *)a3 + 3) = v36;
            if (!v31) {
              goto LABEL_7;
            }
            off_t v37 = v36;
            off_t __offsetb = v31;
            size_t v9 = 0;
            v7 += v35;
            v10 -= v35;
            if (v10 <= v31) {
              goto LABEL_6;
            }
          }
        }
LABEL_40:
        a3[4] = *__error();
      }
      else
      {
        size_t v10 = 1536;
LABEL_6:
        memcpy(v7, (const void *)(*((void *)a3 + 6) + v9), v10);
        *((void *)a3 + 5) = v9 + v10;
      }
LABEL_7:
      unsigned int vint32 = store_stream_read_vint32((uint64_t)a3);
      uint64_t v12 = v45;
      uint64_t v13 = v46;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
      float16x8_t v14 = *(std::__shared_weak_count **)(a1 + 120);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v15 = *(std::__shared_weak_count **)(a1 + 136);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        inserted = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)inserted + 192) = v12;
        *((void *)inserted + 193) = v13;
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        unsigned int v17 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)v17 + 192) = v12;
        *((void *)v17 + 193) = v13;
      }
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      __int16 v18 = *(_WORD *)(a1 + 76);
      int v19 = *(_DWORD *)(a1 + 156);
      v47[0] = *(_DWORD *)(a1 + 160);
      v47[1] = v19;
      __int16 v48 = v18;
      uint64_t result = *(void *)(a1 + 176);
      if (result)
      {
        if (*(_DWORD *)(result + 216) == -270471200) {
          uint64_t result = data_map_ext_restore_data(result, vint32, __dst, 0x600uLL, v47);
        }
      }
      ++v6;
    }
    while (v6 != v41);
  }
  return result;
}

_DWORD *_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, float a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = a4;
  float v73 = a5;
  if (*(unsigned char *)(a1 + 144))
  {
    int v52 = __si_assert_copy_extra_329();
    int v53 = v52;
    int64_t v54 = "";
    if (v52) {
      int64_t v54 = v52;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v54);
    goto LABEL_102;
  }
  if (!a2)
  {
    long long v55 = __si_assert_copy_extra_329();
    int v53 = v55;
    uint64_t v56 = "";
    if (v55) {
      uint64_t v56 = v55;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v56);
    goto LABEL_102;
  }
  unsigned int v8 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(a1, (uint64_t)a3, (int *)&v74, &v73, a2);
  uint64_t v9 = v74;
  if (v74 == -1)
  {
    int v57 = __si_assert_copy_extra_329();
    long long v58 = v57;
    int v59 = "";
    if (v57) {
      int v59 = v57;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v59);
    goto LABEL_92;
  }
  if (v8 != -1)
  {
    unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), v8, 1556);
    if (Ptr[388] == a2) {
      return Ptr;
    }
    uint64_t v72 = 0;
    unsigned int data = (const void *)data_map_get_data(*(void *)(a1 + 128), a2, &v72);
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2586;
      __int16 v80 = 1024;
      *(_DWORD *)float v81 = a2;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = data;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v12;
    if (v72 < 1)
    {
      int v19 = *__error();
      uint64_t v32 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2595;
        _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v72 != 1536)
      {
        uint64_t v67 = __si_assert_copy_extra_329();
        int v53 = v67;
        unint64_t v68 = "";
        if (v67) {
          unint64_t v68 = v67;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v68);
        goto LABEL_102;
      }
      if (!data || !memcmp(data, a3, 0x600uLL)) {
        goto LABEL_46;
      }
      int v14 = *__error();
      unsigned int v15 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2590;
        _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v14;
      int v16 = *__error();
      unsigned int v17 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v72);
        __int16 v18 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        unint64_t v76 = v18;
        _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v16;
      int v19 = *__error();
      unsigned int v20 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v72);
        unint64_t v21 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        unint64_t v76 = v21;
        _os_log_impl(&dword_1BD672000, v20, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v19;
LABEL_46:
    float v33 = (const void *)data_map_get_data(*(void *)(a1 + 128), Ptr[388], &v72);
    int v34 = *__error();
    off_t v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v49 = Ptr[388];
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2598;
      __int16 v80 = 1024;
      *(_DWORD *)float v81 = v49;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = v33;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v34;
    if (v72 < 1)
    {
      int v42 = *__error();
      uint64_t v45 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2607;
        _os_log_error_impl(&dword_1BD672000, v45, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
      }
      goto LABEL_68;
    }
    if (v72 == 1536)
    {
      size_t v36 = 1536;
      if (!v33 || !memcmp(v33, Ptr, 0x600uLL)) {
        goto LABEL_69;
      }
      int v37 = *__error();
      int v38 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2602;
        _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v37;
      int v39 = *__error();
      uint64_t v40 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)v33, v72);
        int v41 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        unint64_t v76 = v41;
        _os_log_impl(&dword_1BD672000, v40, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v39;
      int v42 = *__error();
      int v43 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)Ptr, v72);
        int v44 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        unint64_t v76 = v44;
        _os_log_impl(&dword_1BD672000, v43, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
LABEL_68:
      *__error() = v42;
      size_t v36 = v72;
LABEL_69:
      if (!memcmp(a3, Ptr, v36))
      {
        int v46 = *__error();
        long long v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
        {
          int v50 = Ptr[388];
          *(_DWORD *)long long __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v78 = 1024;
          int v79 = 2610;
          __int16 v80 = 1024;
          *(_DWORD *)float v81 = a2;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v50;
          _os_log_fault_impl(&dword_1BD672000, v47, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v46;
        return Ptr;
      }
      unint64_t v64 = __si_assert_copy_extra_329();
      long long v58 = v64;
      unint64_t v65 = "";
      if (v64) {
        unint64_t v65 = v64;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v65);
LABEL_92:
      free(v58);
      if (__valid_fs(-1)) {
        uint64_t v66 = 2989;
      }
      else {
        uint64_t v66 = 3072;
      }
      *(_DWORD *)uint64_t v66 = -559038737;
      abort();
    }
    std::locale v69 = __si_assert_copy_extra_329();
    int v53 = v69;
    uint64_t v70 = "";
    if (v69) {
      uint64_t v70 = v69;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v70);
LABEL_102:
    free(v53);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  __src = (void *)a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 72);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v24 = *(_DWORD **)(a1 + 80);
  unsigned int v23 = *(std::__shared_weak_count **)(a1 + 88);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  uint64_t v25 = *(void *)(a1 + 32);
  size_t OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(void *)(v25 + 16), 0x614u);
  uint64_t v27 = *(unsigned int *)(v25 + 24);
  if (OffsetFromEnd != v27)
  {
    int v28 = *__error();
    size_t v29 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      int v51 = *(_DWORD *)(v25 + 24);
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "newEntry";
      __int16 v78 = 1024;
      int v79 = 1882;
      __int16 v80 = 2048;
      *(void *)float v81 = OffsetFromEnd;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v51;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
    }
    *__error() = v28;
    uint64_t v27 = *(unsigned int *)(v25 + 24);
    if (OffsetFromEnd != v27)
    {
      unsigned int v62 = __si_assert_copy_extra_329();
      int v53 = v62;
      uint64_t v63 = "";
      if (v62) {
        uint64_t v63 = v62;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v63);
      goto LABEL_102;
    }
  }
  *(_DWORD *)(v25 + 24) = v27 + 1;
  unint64_t v30 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v25 + 16), OffsetFromEnd, 1556);
  memcpy((void *)v30, __src, 0x600uLL);
  *(_OWORD *)(v30 + 1536) = 0u;
  *(_DWORD *)(v30 + 1552) = a2;
  if (*(_DWORD *)(v25 + 24) == 1) {
    *(_DWORD *)(v25 + 36) = a2;
  }
  *(_DWORD *)(v25 + 40) = a2;
  (*(void (**)(_DWORD *, uint64_t, size_t, float))(*(void *)v24 + 56))(v24, v9, OffsetFromEnd, v73);
  uint64_t v31 = *(void *)(a1 + 32);
  if (v24[18] != *(_DWORD *)(v31 + 24))
  {
    int v60 = __si_assert_copy_extra_329();
    int v53 = v60;
    double v61 = "";
    if (v60) {
      double v61 = v60;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v61);
    goto LABEL_102;
  }
  unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(v31 + 16), OffsetFromEnd, 1556);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return Ptr;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  size_t v10 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v12 = *(void *)(a1 + 64);
  float16x8_t v11 = *(std::__shared_weak_count **)(a1 + 72);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *(_DWORD **)(a1 + 80);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 140) == -1)
    {
      int v34 = 0;
      off_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      int v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          float v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          off_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      unsigned int v23 = __si_assert_copy_extra_329();
      unint64_t v21 = v23;
      unint64_t v24 = "";
      if (v23) {
        unint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      unsigned int v20 = __si_assert_copy_extra_329();
      unint64_t v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  int v34 = 0;
  off_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj_block_invoke;
  v32[3] = &unk_1E6345138;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 140)) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    int v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      uint64_t result = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 1556);
      if (v15 != *(_DWORD *)(result + 1552)) {
        return result;
      }
      *(float *)&uint64_t v6 = *a3;
    }
    int v16 = *(const void **)(v8 + 56);
    unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 1556);
    uint64_t result = memcmp(v16, Ptr, 0x600uLL);
    if (!result)
    {
      *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

void *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14storeUpdateSetEP15RelativePostingP14store_stream_t(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(*(void *)(a1 + 80) + 24));
  unsigned int v7 = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  while (v7 != *(_DWORD *)(v8 + 24))
  {
    unint64_t v9 = _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratordeEv(v8, v7);
    CIWritePostings((uint64_t)a3, a2, 0, (unsigned int *)(v9 + 1536), 0, 0);
    unint64_t v11 = *((void *)a3 + 4);
    uint64_t v10 = *((void *)a3 + 5);
    if (v10 + 1536 >= v11)
    {
      size_t v13 = 1536;
      float v12 = (char *)v9;
      while (1)
      {
        uint64_t v14 = v11 - v10;
        memcpy((void *)(*((void *)a3 + 6) + v10), v12, v11 - v10);
        *((void *)a3 + 5) += v14;
        if (store_stream_flush(a3, 0)) {
          break;
        }
        v12 += v14;
        v13 -= v14;
        unint64_t v11 = *((void *)a3 + 4);
        uint64_t v10 = *((void *)a3 + 5);
        if (v10 + v13 < v11) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      float v12 = (char *)v9;
      size_t v13 = 1536;
LABEL_5:
      memcpy((void *)(*((void *)a3 + 6) + v10), v12, v13);
      *((void *)a3 + 5) += v13;
    }
    uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(v9 + 1552));
    ++v7;
    if (v8 != *(void *)(a1 + 80))
    {
      int v15 = __si_assert_copy_extra_329();
      int v16 = v15;
      unsigned int v17 = "";
      if (v15) {
        unsigned int v17 = v15;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v17);
      free(v16);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
  }
  return result;
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6renameEPKc(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  float v12 = *(std::__shared_weak_count **)(a1 + 120);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 128);
  size_t v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 80);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 71) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 48), *(void *)(v16 + 56));
  }
  else {
    std::string buf = *(std::string *)(v16 + 48);
  }
  MEMORY[0x1C1880BF0](v16 + 48, a2);
  int v17 = *__error();
  uint64_t v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__s, v16);
    unsigned int v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)unint64_t v24 = 136315394;
    uint64_t v25 = v19;
    __int16 v26 = 2080;
    uint64_t v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE13makePurgeableEv(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    size_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  size_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12makeReadOnlyEv(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 80);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v5);
      uint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      int v15 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 120);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 128);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
    (*(void (**)(uint64_t))(*(void *)v11 + 120))(v11);
    *(unsigned char *)(a1 + 192) = 1;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8truncateEv(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(*(void *)(a1 + 80));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    int v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 128);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6unlinkEv(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 80);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v14 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE7subvertEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v8 = (os_unfair_lock_s *)(a2 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 144));
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 120);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v8);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 176))(v7, v11);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14compactForTestEP22AnyVectorIndexInstancePVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(a1 + 48, a2 + 48, a3);
}

int *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE7compactEP22AnyVectorIndexInstanceP12uint32_map_tP11TermIdStore18CICompactCallbacksPVi(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    _os_log_impl(&dword_1BD672000, v5, v6, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  uint64_t result = __error();
  int *result = v4;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    int v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE5flushEy(uint64_t a1, uint64_t a2)
{
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE4dumpEbbPViPvU13block_pointerFbjPKvybjfE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 128);
  int v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 88);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  __int16 v19 = ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  int v20 = &unk_1E6345160;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    ((void (*)(void *, long long *, char *))v19)(v18, &v32, &v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  int v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  int v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2544, "0", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE17mergeIndexForTestEP22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE21mergeUpdateSetForTestEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

_DWORD *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfojy(_DWORD *result, uint64_t a2, char *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (os_log_type_t v6 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    int v19 = __si_assert_copy_extra_329();
    uint64_t v20 = v19;
    uint64_t v21 = "";
    if (v19) {
      uint64_t v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v22 = *__error();
    uint64_t v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 16))(v6);
      int v25 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 24))(v6);
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      __dst[0] = 67109888;
      __dst[1] = v24;
      LOWORD(__dst[2]) = 1024;
      *(_DWORD *)((char *)&__dst[2] + 2) = v25;
      HIWORD(__dst[3]) = 1024;
      __dst[4] = v26;
      LOWORD(__dst[5]) = 1024;
      *(_DWORD *)((char *)&__dst[5] + 2) = v27;
      _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", (uint8_t *)__dst, 0x1Au);
    }
    uint64_t result = __error();
    int *result = v22;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = (uint64_t)(v6 + 12);
  uint64_t v12 = a4;
  while (v9 != *(_DWORD *)(v10 + 24))
  {
    unsigned int v16 = *(_DWORD *)(_ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v10, v9)+ 1552);
    int v17 = (const void *)_ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v10, v9);
    memcpy(__dst, v17, sizeof(__dst));
    unint64_t v18 = _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v10, v9);
    if (*(unsigned char *)(v18 + 1536))
    {
      if (*(_DWORD *)(v18 + 1540)) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
      uint64_t v14 = a5;
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = v12;
    }
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v11, v16, __dst, 0xFFFFFFFF, 3.4028e38);
    uint64_t result = vi_memory_postings::push_posting(a3, v13, inserted + 384, v14);
    ++v9;
  }
  return result;
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfoP17TermIdContainer_s(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  int v13 = "";
  if (v11) {
    int v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE5trainERKNSt3__16vectorIP22AnyVectorIndexInstanceNS5_9allocatorIS8_EEEE(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    char v31 = __si_assert_copy_extra_329();
    long long v32 = v31;
    long long v33 = "";
    if (v31) {
      long long v33 = v31;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v33);
    goto LABEL_54;
  }
  if (*v3 != a1)
  {
    int v34 = __si_assert_copy_extra_329();
    long long v32 = v34;
    off_t v35 = "";
    if (v34) {
      off_t v35 = v34;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v35);
LABEL_54:
    free(v32);
    if (__valid_fs(-1)) {
      uint64_t v36 = 2989;
    }
    else {
      uint64_t v36 = 3072;
    }
    *(_DWORD *)uint64_t v36 = -559038737;
LABEL_58:
    abort();
  }
  uint64_t v6 = a2;
  int v7 = (char *)operator new(8uLL);
  int v8 = v7;
  *(void *)int v7 = a1 + 48;
  if (v4 < 9) {
    goto LABEL_39;
  }
  int v9 = v7 + 8;
  unint64_t v10 = 1;
  uint64_t v11 = v7 + 8;
  uint64_t v37 = v6;
  do
  {
    uint64_t v13 = v3[v10];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v13 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v13 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v13 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v13 + 16))
    {
      int v28 = __si_assert_copy_extra_329();
      long long v29 = v28;
      uint64_t v30 = "";
      if (v28) {
        uint64_t v30 = v28;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v30);
      free(v29);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v14 = v13 + 48;
    if (v9 < v11)
    {
      *(void *)int v9 = v14;
      uint64_t v12 = v9 + 8;
      goto LABEL_6;
    }
    uint64_t v15 = (v9 - v8) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_58;
    }
    if ((v11 - v8) >> 2 > v16) {
      unint64_t v16 = (v11 - v8) >> 2;
    }
    if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      __int16 v18 = operator new(8 * v17);
    }
    else
    {
      __int16 v18 = 0;
    }
    int v19 = &v18[8 * v15];
    uint64_t v11 = &v18[8 * v17];
    *(void *)int v19 = v14;
    uint64_t v12 = v19 + 8;
    if (v9 == v8)
    {
LABEL_36:
      operator delete(v8);
      goto LABEL_37;
    }
    unint64_t v20 = v9 - 8 - v8;
    if (v20 < 0x168)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v18[v9 - v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v9 - v8 - 8])
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      int v21 = v9;
      do
      {
LABEL_34:
        uint64_t v27 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v21 != v8);
      goto LABEL_35;
    }
    if ((unint64_t)(v8 - v18) < 0x20)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    uint64_t v22 = (v20 >> 3) + 1;
    int v21 = &v9[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v23 = &v18[8 * v15 - 16];
    int v24 = v9 - 16;
    uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v19 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_34;
    }
LABEL_35:
    if (v8) {
      goto LABEL_36;
    }
LABEL_37:
    int v8 = v19;
    uint64_t v6 = v37;
LABEL_6:
    ++v10;
    os_log_type_t v3 = *(void **)v6;
    int v9 = v12;
  }
  while (v10 < (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if (v8)
  {
LABEL_39:
    operator delete(v8);
  }
}

_DWORD *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE13insertForTestEjjPKv14vec_dimensions15vec_data_formatj(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1)) {
      uint64_t v13 = 2989;
    }
    else {
      uint64_t v13 = 3072;
    }
    *(_DWORD *)uint64_t v13 = -559038737;
    abort();
  }
  uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38);
  if (result[386])
  {
    int v9 = result[385] + 1;
  }
  else
  {
    result[386] = a7;
    int v9 = 1;
  }
  result[385] = v9;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14insertForMergeEjtjPKv14vec_dimensions15vec_data_formatyjf(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    int v8 = __si_assert_copy_extra_329();
    int v9 = v8;
    unint64_t v10 = "";
    if (v8) {
      unint64_t v10 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

char *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12insertVectorEjjPKv14vec_dimensions15vec_data_format14docInvertStateyP15PostingBaseInfo(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7, uint64_t a8, char *a9)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    uint64_t v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38)+ 384;
  return vi_memory_postings::push_posting(a9, a7, v11, a8);
}

_DWORD *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE17bulkInsertForTestEPKvPKjjS8_(_DWORD *result, char *a2, int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v21 = *a5++;
        unsigned int v20 = v21;
        int v23 = *a3++;
        int v22 = v23;
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v8, v20, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[386])
        {
          int v19 = result[385] + 1;
        }
        else
        {
          result[386] = v22;
          int v19 = 1;
        }
        result[385] = v19;
        a2 += 1536;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v14 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v15 = *__error();
          unint64_t v16 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v25 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v15;
        }
        unsigned int v17 = a5[v10];
        int v18 = a3[v10];
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v8, v17, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[386])
        {
          int v13 = result[385] + 1;
        }
        else
        {
          result[386] = v18;
          int v13 = 1;
        }
        result[385] = v13;
        a2 += 1536;
        uint64_t v10 = v14;
      }
      while (v9 != v14);
    }
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6shadowEbPVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 168))(v9, a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return 0;
    }
  }
  else if (!v7)
  {
    return 0;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return 0;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12validAddressEPKv(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    os_unfair_lock_unlock(v2);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8allExistEPKvj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li768EE(v5, a2))
      {
        a2 += 1536;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li768EE(v5, a2))break; {
        a2 += 1536;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    int v15 = v14;
    unint64_t v16 = "";
    if (v14) {
      unint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li768EE(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  float v23 = 3.4028e38;
  unsigned int v24 = -1;
  int v4 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(a1, a2, (int *)&v24, &v23, 0);
  if (v4 == -1)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "exists";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2755;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v26[0]) = 2048;
      *(double *)((char *)v26 + 2) = v23;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
    uint64_t v9 = *(void *)(a1 + 64);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 88);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    v26[0] = -1;
    *(void *)&buf[16] = 0x2000000000;
    unsigned int v12 = v24;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke;
    v20[3] = &unk_1E6345110;
    v20[5] = a1;
    v20[6] = a2;
    unsigned int v21 = v24;
    float v22 = v23;
    v20[4] = buf;
    (*(void (**)(uint64_t, void, void *))(*(void *)v11 + 80))(v11, v24, v20);
    if (*(_DWORD *)(*(void *)&buf[8] + 24) == -1)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      _OWORD v15[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke_646;
      v15[3] = &unk_1F1814DB0;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v9;
      unint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v11;
      double v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v19 = v12;
      v15[4] = buf;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 64))(v11, v15);
      int v13 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    _Block_object_dispose(buf, 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 != -1;
}

int *___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(const void **)(a1 + 48);
  unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(*(void *)(a1 + 40) + 32) + 16), *(unsigned int *)a3, 1556);
  uint64_t result = (int *)memcmp(v8, Ptr, 0x600uLL);
  if (!result)
  {
    int v11 = *__error();
    unsigned int v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v17 = a3[1];
      int v27 = 136315906;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2760;
      __int16 v31 = 1024;
      *(_DWORD *)long long v32 = a2;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v17;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&v27, 0x22u);
    }
    *__error() = v11;
    int v13 = *__error();
    uint64_t v14 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(_DWORD *)(a1 + 56);
      double v19 = *(float *)(a1 + 60);
      int v27 = 136315906;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2761;
      __int16 v31 = 1024;
      *(_DWORD *)long long v32 = v18;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v19;
      _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&v27, 0x22u);
    }
    *__error() = v13;
    int v15 = *__error();
    unint64_t v16 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      float v20 = *(float *)(a1 + 60);
      float v21 = a3[1];
      float v22 = vabds_f32(v20, v21);
      if (v20 == v21)
      {
        BOOL v23 = 1;
        BOOL v24 = 1;
      }
      else
      {
        float v25 = fabsf(v20);
        float v26 = fabsf(v21);
        BOOL v23 = v22 <= fmaxf(fminf(v26, v25) * 0.000015259, 0.000015259);
        BOOL v24 = v22 <= (float)(fmaxf(v25, v26) * 0.000015259);
      }
      int v27 = 136317186;
      int v28 = "exists_block_invoke";
      __int16 v29 = 1024;
      int v30 = 2762;
      __int16 v31 = 2048;
      *(double *)long long v32 = v22;
      *(_WORD *)&void v32[8] = 2048;
      *(void *)&v32[10] = 0x3810000000000000;
      __int16 v33 = 2048;
      uint64_t v34 = 0x3E80000000000000;
      __int16 v35 = 1024;
      BOOL v36 = v22 < 1.1755e-38;
      __int16 v37 = 1024;
      BOOL v38 = v22 < 0.00000011921;
      __int16 v39 = 1024;
      BOOL v40 = v23;
      __int16 v41 = 1024;
      BOOL v42 = v24;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: |distancesq - ve.distsq|=%e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&v27, 0x48u);
    }
    uint64_t result = __error();
    int *result = v15;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
  }
  return result;
}

void ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke_646(uint64_t a1, int a2, float *a3, unsigned char *a4)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 40);
  unsigned int v8 = *(const void **)(a1 + 48);
  unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v9 + 32) + 16), *(unsigned int *)a3, 1556);
  if (!memcmp(v8, Ptr, 0x600uLL))
  {
    int v11 = *__error();
    unsigned int v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v45 = a3[1];
      *(_DWORD *)std::string buf = 136315906;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2770;
      __int16 v125 = 1024;
      int v126 = a2;
      __int16 v127 = 2048;
      *(double *)float v128 = v45;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v11;
    int v13 = *(float16x8_t **)(a1 + 48);
    uint64_t v14 = (float16x8_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88));
    float16x8_t v15 = 0uLL;
    unint64_t v16 = -8;
    do
    {
      float16x8_t v17 = *v13++;
      float16x8_t v18 = v17;
      float16x8_t v19 = *v14++;
      float16x8_t v20 = vsubq_f16(v18, v19);
      float16x8_t v15 = vmlaq_f16(v15, v20, v20);
      v16 += 8;
    }
    while (v16 < 0x2F8);
    float16x8_t v114 = v15;
    int v21 = *__error();
    float v22 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      _H3 = v114.i16[0];
      __asm { FCVT            S0, H3 }
      _H1 = v114.i16[1];
      __asm { FCVT            S1, H1 }
      float v54 = _S0 + _S1;
      LOWORD(_S1) = v114.i16[2];
      __asm { FCVT            S1, H1 }
      _H2 = v114.i16[3];
      __asm { FCVT            S2, H2 }
      float v58 = v54 + (float)(_S1 + _S2);
      LOWORD(_S1) = v114.i16[4];
      __asm { FCVT            S1, H1 }
      LOWORD(_S2) = v114.i16[5];
      __asm { FCVT            S2, H2 }
      _S1 = _S1 + _S2;
      LOWORD(_S2) = v114.i16[6];
      __asm { FCVT            S2, H2 }
      float v63 = v58 + (float)(_S1 + _S2);
      LOWORD(_S1) = v114.i16[7];
      __asm { FCVT            S1, H1 }
      int v65 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)std::string buf = 136315906;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2772;
      __int16 v125 = 1024;
      int v126 = v65;
      __int16 v127 = 2048;
      *(double *)float v128 = (float)(v63 + _S1);
      _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", buf, 0x22u);
    }
    *__error() = v21;
    int v118 = 0;
    __int16 v119 = 0;
    uint64_t v120 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 80))(&v118);
    int v23 = *__error();
    BOOL v24 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v66 = *(_DWORD *)v118;
      float v67 = *((float *)v118 + 1);
      int v68 = *((_DWORD *)v118 + 2);
      float v69 = *((float *)v118 + 3);
      BOOL v70 = v67 == v69 || vabds_f32(v67, v69) <= fmaxf(fminf(fabsf(v69), fabsf(v67)) * 0.000015259, 0.000015259);
      *(_DWORD *)std::string buf = 136316674;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2774;
      __int16 v125 = 1024;
      int v126 = v66;
      __int16 v127 = 2048;
      *(double *)float v128 = v67;
      *(_WORD *)&void v128[8] = 1024;
      *(_DWORD *)&v128[10] = v68;
      __int16 v129 = 2048;
      double v130 = v69;
      __int16 v131 = 1024;
      LODWORD(v132) = v70;
      _os_log_error_impl(&dword_1BD672000, v24, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", buf, 0x38u);
    }
    *__error() = v23;
    int v25 = *__error();
    float v26 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      int v71 = *(_DWORD *)v118;
      int v72 = *((_DWORD *)v118 + 2);
      BOOL v73 = *((float *)v118 + 1) == *((float *)v118 + 3);
      *(_DWORD *)std::string buf = 136316162;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2775;
      __int16 v125 = 1024;
      int v126 = v71;
      __int16 v127 = 1024;
      *(_DWORD *)float v128 = v72;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = v73;
      _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v25;
    int v27 = *__error();
    int v28 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      int v74 = *(_DWORD *)v118;
      int v75 = *((_DWORD *)v118 + 2);
      BOOL v76 = *((float *)v118 + 1) < *((float *)v118 + 3);
      *(_DWORD *)std::string buf = 136316162;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2776;
      __int16 v125 = 1024;
      int v126 = v74;
      __int16 v127 = 1024;
      *(_DWORD *)float v128 = v75;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = v76;
      _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v27;
    int v29 = *__error();
    int v30 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      int v77 = *(_DWORD *)v118;
      int v78 = *((_DWORD *)v118 + 2);
      BOOL v79 = *((float *)v118 + 1) > *((float *)v118 + 3);
      *(_DWORD *)std::string buf = 136316162;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2777;
      __int16 v125 = 1024;
      int v126 = v77;
      __int16 v127 = 1024;
      *(_DWORD *)float v128 = v78;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = v79;
      _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v29;
    int v31 = *__error();
    long long v32 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      int v80 = *(_DWORD *)v118;
      int v81 = *((_DWORD *)v118 + 2);
      float v82 = *((float *)v118 + 1);
      float v83 = *((float *)v118 + 3);
      double v84 = (float)(v82 - v83);
      float v85 = vabds_f32(v82, v83);
      if (v82 == v83)
      {
        BOOL v86 = 1;
        BOOL v87 = 1;
      }
      else
      {
        float v110 = fabsf(v82);
        float v111 = fabsf(v83);
        BOOL v86 = v85 <= fmaxf(fminf(v111, v110) * 0.000015259, 0.000015259);
        BOOL v87 = v85 <= (float)(fmaxf(v110, v111) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317698;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2778;
      __int16 v125 = 1024;
      int v126 = v80;
      __int16 v127 = 1024;
      *(_DWORD *)float v128 = v81;
      *(_WORD *)&v128[4] = 2048;
      *(double *)&v128[6] = v84;
      __int16 v129 = 2048;
      double v130 = 1.17549435e-38;
      __int16 v131 = 2048;
      uint64_t v132 = 0x3E80000000000000;
      __int16 v133 = 1024;
      BOOL v134 = v85 < 1.1755e-38;
      __int16 v135 = 1024;
      BOOL v136 = v85 < 0.00000011921;
      __int16 v137 = 1024;
      BOOL v138 = v86;
      __int16 v139 = 1024;
      BOOL v140 = v87;
      _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x54u);
    }
    *__error() = v31;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    std::string __p = 0;
    uint64_t v33 = *(void *)(a1 + 56);
    unint64_t v34 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v9 + 32) + 16), *(unsigned int *)a3, 1556);
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(void *)v33 + 80))(&__p, v33, v34, 2);
    int v35 = *__error();
    BOOL v36 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      int v88 = *(_DWORD *)__p;
      float v89 = *((float *)__p + 1);
      int v90 = *((_DWORD *)__p + 2);
      float v91 = *((float *)__p + 3);
      BOOL v92 = v89 == v91 || vabds_f32(v89, v91) <= fmaxf(fminf(fabsf(v91), fabsf(v89)) * 0.000015259, 0.000015259);
      *(_DWORD *)std::string buf = 136316674;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2781;
      __int16 v125 = 1024;
      int v126 = v88;
      __int16 v127 = 2048;
      *(double *)float v128 = v89;
      *(_WORD *)&void v128[8] = 1024;
      *(_DWORD *)&v128[10] = v90;
      __int16 v129 = 2048;
      double v130 = v91;
      __int16 v131 = 1024;
      LODWORD(v132) = v92;
      _os_log_error_impl(&dword_1BD672000, v36, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", buf, 0x38u);
    }
    *__error() = v35;
    int v37 = *__error();
    BOOL v38 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      int v93 = *(_DWORD *)__p;
      int v94 = *((_DWORD *)__p + 2);
      BOOL v95 = *((float *)__p + 1) == *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2782;
      __int16 v125 = 1024;
      int v126 = v93;
      __int16 v127 = 1024;
      *(_DWORD *)float v128 = v94;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = v95;
      _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v37;
    int v39 = *__error();
    BOOL v40 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      int v96 = *(_DWORD *)__p;
      int v97 = *((_DWORD *)__p + 2);
      BOOL v98 = *((float *)__p + 1) < *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2783;
      __int16 v125 = 1024;
      int v126 = v96;
      __int16 v127 = 1024;
      *(_DWORD *)float v128 = v97;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = v98;
      _os_log_error_impl(&dword_1BD672000, v40, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v39;
    int v41 = *__error();
    BOOL v42 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      int v99 = *(_DWORD *)__p;
      int v100 = *((_DWORD *)__p + 2);
      BOOL v101 = *((float *)__p + 1) > *((float *)__p + 3);
      *(_DWORD *)std::string buf = 136316162;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2784;
      __int16 v125 = 1024;
      int v126 = v99;
      __int16 v127 = 1024;
      *(_DWORD *)float v128 = v100;
      *(_WORD *)&v128[4] = 1024;
      *(_DWORD *)&v128[6] = v101;
      _os_log_error_impl(&dword_1BD672000, v42, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", buf, 0x24u);
    }
    *__error() = v41;
    int v43 = *__error();
    int v44 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      int v102 = *(_DWORD *)__p;
      int v103 = *((_DWORD *)__p + 2);
      float v104 = *((float *)__p + 1);
      float v105 = *((float *)__p + 3);
      float v106 = vabds_f32(v104, v105);
      BOOL v107 = (float)(v104 - v105) < 1.1755e-38;
      if (v104 == v105)
      {
        BOOL v108 = 1;
        BOOL v109 = 1;
      }
      else
      {
        float v112 = fabsf(v104);
        float v113 = fabsf(v105);
        BOOL v108 = v106 <= fmaxf(fminf(v113, v112) * 0.000015259, 0.000015259);
        BOOL v109 = v106 <= (float)(fmaxf(v112, v113) * 0.000015259);
      }
      *(_DWORD *)std::string buf = 136317698;
      int v122 = "exists_block_invoke";
      __int16 v123 = 1024;
      int v124 = 2785;
      __int16 v125 = 1024;
      int v126 = v102;
      __int16 v127 = 1024;
      *(_DWORD *)float v128 = v103;
      *(_WORD *)&v128[4] = 2048;
      *(double *)&v128[6] = v106;
      __int16 v129 = 2048;
      double v130 = 1.17549435e-38;
      __int16 v131 = 2048;
      uint64_t v132 = 0x3E80000000000000;
      __int16 v133 = 1024;
      BOOL v134 = v107;
      __int16 v135 = 1024;
      BOOL v136 = v106 < 0.00000011921;
      __int16 v137 = 1024;
      BOOL v138 = v108;
      __int16 v139 = 1024;
      BOOL v140 = v109;
      _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", buf, 0x54u);
    }
    *__error() = v43;
    *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
    if (__p)
    {
      uint64_t v116 = __p;
      operator delete(__p);
    }
    if (v118)
    {
      __int16 v119 = v118;
      operator delete(v118);
    }
  }
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE11nPartitionsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8nVectorsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1 + 48);
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814AB8;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsED2Ev((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x1C1881000);
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li768EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F1814AB8;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsED2Ev((void *)(a1 + 48));
  *(void *)a1 = &unk_1F1813E48;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsEENS_9allocatorIS6_EEE16__on_zero_sharedEv(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)v2, *(void **)(v2 + 8));
    JUMPOUT(0x1C1881000);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsEENS_9allocatorIS6_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1814778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C1881000);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsEENS_9allocatorIS6_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1814778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEENS6_I17AnyPartitionStoreEE(uint64_t a1, void *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v6 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v10 = *(char **)(a1 + 64);
  unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v9 = (long long *)(a1 + 64);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v12 = *(_DWORD **)(a1 + 80);
  int v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  uint64_t v14 = (_DWORD *)*a3;
  if (v13 != *(_DWORD *)(*a3 + 68))
  {
    int v29 = __si_assert_copy_extra_329();
    int v30 = v29;
    int v31 = "";
    if (v29) {
      int v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2512, "newQuantizer->count() == newPartitions->nPartitions()", v31);
LABEL_52:
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 24) != v14[18])
  {
    long long v32 = __si_assert_copy_extra_329();
    int v30 = v32;
    uint64_t v33 = "";
    if (v32) {
      uint64_t v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2513, "vectors->count() == newPartitions->nVectors()", v33);
    goto LABEL_52;
  }
  if (v10 && v12)
  {
    int v40 = *__error();
    float16x8_t v15 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v16 = v10 + 8;
      if (v10[31] < 0) {
        unint64_t v16 = (void *)*v16;
      }
      int v35 = v16;
      int v17 = (*(uint64_t (**)(char *))(*(void *)v10 + 16))(v10);
      float16x8_t v18 = (void *)(*a2 + 8);
      int v39 = v6;
      int v38 = v17;
      if (*(char *)(*a2 + 31) < 0) {
        float16x8_t v18 = (void *)*v18;
      }
      unint64_t v34 = v18;
      int v37 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
      float16x8_t v19 = v46;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 152))(v46, v12);
      if (v47 < 0) {
        float16x8_t v19 = (void **)v46[0];
      }
      int v20 = v12[18];
      int v36 = v12[17];
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 152))(__p);
      int v21 = __p;
      if (v45 < 0) {
        int v21 = (void **)__p[0];
      }
      int v22 = *(_DWORD *)(*a3 + 68);
      int v23 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)std::string buf = 136317442;
      int v49 = v35;
      __int16 v50 = 1024;
      int v51 = v38;
      __int16 v52 = 2080;
      int v53 = v34;
      __int16 v54 = 1024;
      int v55 = v37;
      __int16 v56 = 2080;
      int v57 = v19;
      __int16 v58 = 1024;
      int v59 = v20;
      __int16 v60 = 1024;
      int v61 = v36;
      __int16 v62 = 2080;
      float v63 = v21;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 1024;
      int v67 = v22;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      int v6 = v39;
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    *__error() = v40;
    uint64_t v14 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 24))(v14)) {
    BOOL v24 = v12 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (*(unsigned int (**)(_DWORD *))(*(void *)v12 + 24))(v12)) {
    (*(void (**)(void, _DWORD *))(*(void *)*a3 + 176))(*a3, v12);
  }
  uint64_t v25 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  float v26 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  int v43 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v41);
  os_unfair_lock_unlock(v7);
  int v27 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  int v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  os_unfair_lock_unlock(v6);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13newPartitionsENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEE(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  int v6 = ".partitions";
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5)) {
    int v6 = ".tmp.partitions";
  }
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unsigned int v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v13 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v13) = v7;
    uint64_t v9 = __dst;
    if (!v7)
    {
LABEL_16:
      *((unsigned char *)v8 + (void)v9) = 0;
      malloc_default_zone();
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
      operator new();
    }
  }
  memcpy(v9, v6, (size_t)v8);
  goto LABEL_16;
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE17getVectorAtOffsetEj(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), a2, 1044);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13getPartitionsEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  int v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v6)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v7;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  os_unfair_lock_unlock(v4);
  *a2 = v7;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5)
  {
LABEL_9:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12getQuantizerEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsED0Ev(void *a1)
{
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsED2Ev(a1);
  JUMPOUT(0x1C1881000);
}

void *_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsED2Ev(void *a1)
{
  *a1 = &unk_1F1814730;
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12diagnoseDumpERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS5_13basic_ostreamIcS8_EEi(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v8 = v7;
  }
  uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float16x8_t v15 = (void *)std::ostream::operator<<();
  unint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(unsigned char *)(a1 + 192)) {
    int v17 = "(readOnly)";
  }
  else {
    int v17 = "(readWrite)";
  }
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v18 = 10;
  }
  else {
    uint64_t v18 = 11;
  }
  float16x8_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  int v20 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v66 = 0;
  int v67 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12getQuantizerEv(a1 + 48, &v66);
  uint64_t v21 = v66;
  if (v66)
  {
    int v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    int v23 = *(char *)(v21 + 31);
    if (v23 >= 0) {
      uint64_t v24 = v21 + 8;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      uint64_t v25 = *(void *)(v21 + 16);
    }
    float v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    int v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    int v28 = (void *)std::ostream::operator<<();
    int v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    int v30 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v64 = 0;
  int v65 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13getPartitionsEv(a1 + 48, &v64);
  uint64_t v31 = v64;
  if (!v64) {
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v31 + 152))(&v69, v31);
  long long v32 = (v71 & 0x80u) == 0 ? &v69 : (std::locale *)v69.__locale_;
  uint64_t v33 = (v71 & 0x80u) == 0 ? v71 : v70;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  unint64_t v34 = std::locale::use_facet(&v68, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v71 < 0)
  {
    operator delete(v69.__locale_);
    if (!a4) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_32:
    if (!a4) {
      goto LABEL_65;
    }
  }
  uint64_t v62 = v31;
  uint64_t v35 = *(void *)(a1 + 80);
  int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  unsigned int v63 = a4;
  if (a4 <= 1) {
    int v37 = ",";
  }
  else {
    int v37 = ",vector";
  }
  if (a4 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v39 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v35 + 24))
  {
    if (a4 <= 1)
    {
      unint64_t v52 = 0;
      int v53 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v52, 1044);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)",", 1);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        __int16 v56 = std::locale::use_facet(&v69, v53);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v52;
      }
      while (v52 < *(unsigned int *)(v35 + 24));
    }
    else
    {
      unint64_t v40 = 0;
      long long v41 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v35 + 16), v40, 1044);
        int v44 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
        char v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        int v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v69, Ptr, 16);
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v48 = v71;
        }
        else {
          uint64_t v48 = v70;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v69, Ptr + 1016, 8);
        if ((v71 & 0x80u) == 0) {
          int v49 = &v69;
        }
        else {
          int v49 = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v50 = v71;
        }
        else {
          uint64_t v50 = v70;
        }
        int v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" }", 2);
        if ((char)v71 < 0) {
          operator delete(v69.__locale_);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
        uint64_t v42 = std::locale::use_facet(&v69, v41);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(&v69);
        std::ostream::put();
        std::ostream::flush();
        ++v40;
      }
      while (v40 < *(unsigned int *)(v35 + 24));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(void *)(*a3 - 24)));
  int v57 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v62) {
    (*(void (**)(uint64_t, void *, void))(*(void *)v62 + 104))(v62, a3, v63);
  }
LABEL_65:
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v59 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  else
  {
    __int16 v60 = v67;
    if (!v67) {
      return v58;
    }
  }
  if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v58;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6statusERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v34 = 0;
  uint64_t v28 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v40 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v35 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v6;
  uint64_t v34 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v33 + *(void *)(v33 - 24));
  std::ios_base::init(v7, v36);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v8 = v5[5];
  uint64_t v35 = v5[4];
  *(uint64_t *)((char *)&v35 + *(void *)(v35 - 24)) = v8;
  uint64_t v33 = v5[1];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[6];
  uint64_t v40 = v27;
  uint64_t v33 = v28;
  uint64_t v35 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&v36[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  LODWORD(v39) = 24;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  unint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, v11, v12);
  int v14 = *(char *)(a1 + 47);
  if (v14 >= 0) {
    uint64_t v15 = a1 + 24;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  int v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float16x8_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"v", 1);
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13getPartitionsEv(a1 + 48, &v31);
  if (v31)
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE13getPartitionsEv(a1 + 48, &v29);
    int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    uint64_t v21 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  }
  int v23 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v35, (uint64_t)",", 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v33 = *v5;
  uint64_t v25 = v5[9];
  *(uint64_t *)((char *)&v33 + *(void *)(v33 - 24)) = v5[8];
  uint64_t v35 = v25;
  *(void *)&v36[0] = v9;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v40);
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE26updateVectorStorageOffsetsEP13__SIUINT64Set(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = a1 + 48;
  if (a2)
  {
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (i >= result) {
        break;
      }
      unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), i, 1044);
      if (!*(unsigned char *)(v2 + 184))
      {
        unint64_t v8 = *(unsigned int *)(Ptr + 1040);
        int v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(void *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          uint64_t v10 = *(void *)(v2 + 56 + 8 * ((v8 >> ((60 - 4 * v9) & 0xFC)) & 0xF));
          if (v10)
          {
            int v11 = v9 + 2;
            do
              uint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> ((64 - 4 * v11++) & 0xFC)) & 0xF));
            while ((v10 & 1) != 0);
          }
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
          }
        }
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (v2 >= result) {
        break;
      }
      vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 80) + 16), v2++, 1044);
    }
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16getDataForOffsetEjPj(void *a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) <= a2)
  {
    int v8 = *__error();
    int v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v12 = 136315906;
      unint64_t v13 = "getDataForOffset";
      __int16 v14 = 1024;
      int v15 = 3579;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    uint64_t v10 = __error();
    int v7 = 0;
    uint64_t result = 0;
    *uint64_t v10 = v8;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    int v7 = 1024;
  }
  *a3 = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14setVectorStoreEP10data_map_s(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE11storageSizeEv(uint64_t a1)
{
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 80) + 16) + 24);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3) {
      return v7 + v6;
    }
  }
  else if (!v3)
  {
    return v7 + v6;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7 + v6;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE24aNNForDebugProcessResultEPvU13block_pointerFvjjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFANNLogQueryResult", @"com.apple.Spotlight", (Boolean *)&buf);
  int v35 = buf;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  *((void *)&buf + 1) = 0;
  uint64_t v42 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v41 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v57 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v39 = (void *)(MEMORY[0x1E4FBA488] + 64);
  uint64_t v52 = MEMORY[0x1E4FBA488] + 64;
  int v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  *(void *)&long long buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v9;
  *((void *)&buf + 1) = 0;
  uint64_t v10 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
  std::ios_base::init(v10, v53);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  uint64_t v11 = v8[5];
  uint64_t v52 = v8[4];
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = v11;
  *(void *)&long long buf = v8[1];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v8[6];
  uint64_t v57 = v41;
  *(void *)&long long buf = v42;
  uint64_t v52 = (uint64_t)v39;
  std::streambuf::basic_streambuf();
  long long v43 = 0;
  uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
  v53[0] = MEMORY[0x1E4FBA470] + 16;
  long long v54 = 0u;
  long long v55 = 0u;
  LODWORD(v56) = 24;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v38 = a2;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v43, *(unsigned char **)(v38 + 8), *(unsigned char **)(v38 + 16));
  int v12 = v44;
  uint64_t v40 = v43;
  if (v43 != v44)
  {
    if (AppIntegerValue) {
      BOOL v13 = v35 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v25 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v25 + 2), *((unsigned int *)v25 + 4), v25[5]);
        v25 += 6;
      }
      while (v25 != v12);
    }
    else
    {
      int v14 = 0;
      int v15 = ",";
      __int16 v16 = v43;
      do
      {
        (*(void (**)(uint64_t, void, void, float))(a3 + 16))(a3, *((unsigned int *)v16 + 2), *((unsigned int *)v16 + 4), v16[5]);
        int v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v15, 1);
        __int16 v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)";", 1);
        int v19 = (char *)&v53[-1] + *(void *)(v52 - 24);
        if ((v19[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(__p), v50 > 1000)
          || (++v14,
              HIDWORD(v20) = -1030792151 * v14 + 85899344,
              LODWORD(v20) = HIDWORD(v20),
              (v20 >> 1) < 0x51EB851))
        {
          uint64_t v21 = v15;
          int v22 = *__error();
          int v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            uint64_t v24 = __p;
            if (v49 < 0) {
              uint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long v46 = 136315138;
            long long v47 = v24;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
            if (SHIBYTE(v49) < 0) {
              operator delete(__p[0]);
            }
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v49 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v49) < 0) {
            operator delete(__p[0]);
          }
          int v15 = v21;
        }
        v16 += 6;
      }
      while (v16 != v12);
    }
  }
  float v26 = (char *)&v53[-1] + *(void *)(v52 - 24);
  if ((v26[32] & 5) != 0)
  {
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**((void **)v26 + 5) + 32))(__p);
    uint64_t v27 = v38;
    uint64_t v28 = (void *)MEMORY[0x1E4FBA408];
    if (v50 > 0)
    {
      int v29 = *__error();
      int v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v31 = v49 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v46 = 136315138;
        long long v47 = v31;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%s", v46, 0xCu);
        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
      }
      *__error() = v29;
    }
  }
  if (v27)
  {
    long long v32 = *(void **)(v27 + 8);
    if (v32)
    {
      *(void *)(v27 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1C1881000](v27, 0x1020C403EC25235);
  }
  if (v40) {
    operator delete(v40);
  }
  *(void *)&long long buf = *v28;
  uint64_t v33 = v28[9];
  *(void *)((char *)&buf + *(void *)(buf - 24)) = v28[8];
  uint64_t v52 = v33;
  v53[0] = v37;
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1880F90](&v57);
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE23aNNForTestProcessResultEPvU13block_pointerFvjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E63450A8;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfbPv(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, void *a8, float a9)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != *(_DWORD *)(a1 + 16))
  {
    uint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    int v12 = "";
    if (v10) {
      int v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v9 = a1 + 48;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9, a4, a7, a8, 0, a9);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(uint64_t a1, unsigned __int8 *a2, char a3, void *a4, CFIndex AppIntegerValue, float a6)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[1020], a2[1021], a2[1022], a2[1023]);
  if (!AppIntegerValue) {
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFNumberOfParitionsProbe", @"com.apple.Spotlight", 0);
  }
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v12 = CFPreferencesGetAppIntegerValue(@"IVFMinVectorsUseANN", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 10000;
  }
  if (10 * v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 10 * v11;
  }
  unsigned int v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
  unsigned int v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  unsigned int v17 = v15 / v16;
  unsigned int v18 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMin", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 7;
  }
  uint64_t v142 = 0;
  __int16 v143 = &v142;
  if (v17 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v17;
  }
  int v145 = 0;
  uint64_t v144 = 0x2000000000;
  uint64_t v138 = 0;
  __int16 v139 = &v138;
  int v141 = 0;
  uint64_t v140 = 0x2000000000;
  uint64_t v137 = 0;
  long long v135 = 0u;
  long long __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v135);
  double Current = CFAbsoluteTimeGetCurrent();
  int v122 = v11;
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1) <= v14)
  {
    int v57 = *__error();
    long long v58 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
      int v60 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
      double v61 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(void *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v59;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v60;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      double v61 = a6;
    }
    *__error() = v57;
    LODWORD(v121) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    unsigned int v62 = 0;
    uint64_t v63 = *(void *)(a1 + 32);
    do
    {
      if (v62 == *(_DWORD *)(v63 + 24)) {
        goto LABEL_98;
      }
      ++*((_DWORD *)v143 + 6);
      unint64_t v64 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v63, v62);
      unint64_t v65 = v64;
      unint64_t v66 = *(unsigned int *)(v64 + 1040);
      _Q0 = 0uLL;
      unint64_t v68 = -8;
      std::locale v69 = (float16x8_t *)a2;
      uint64_t v70 = (float16x8_t *)v64;
      do
      {
        float16x8_t v71 = *v69++;
        float16x8_t v72 = v71;
        float16x8_t v73 = *v70++;
        float16x8_t v74 = vsubq_f16(v72, v73);
        _Q0 = vmlaq_f16(_Q0, v74, v74);
        v68 += 8;
      }
      while (v68 < 0x1F8);
      if (*((void *)&v135 + 1))
      {
        uint8x8_t v75 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v135 + 8));
        v75.i16[0] = vaddlv_u8(v75);
        if (v75.u32[0] > 1uLL)
        {
          if (*((void *)&v135 + 1) <= v66) {
            unint64_t v76 = v66 % *((void *)&v135 + 1);
          }
          else {
            unint64_t v76 = *(unsigned int *)(v64 + 1040);
          }
        }
        else
        {
          unint64_t v76 = (DWORD2(v135) - 1) & v66;
        }
        int v77 = *(uint64_t **)(v135 + 8 * v76);
        if (v77)
        {
          int v77 = (uint64_t *)*v77;
          if (v77)
          {
            if (v75.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v79 = v77[1];
                if (v79 == v66)
                {
                  if (*((_DWORD *)v77 + 4) == v66) {
                    goto LABEL_85;
                  }
                }
                else if ((v79 & (*((void *)&v135 + 1) - 1)) != v76)
                {
                  goto LABEL_84;
                }
                int v77 = (uint64_t *)*v77;
                if (!v77) {
                  goto LABEL_85;
                }
              }
            }
            do
            {
              unint64_t v78 = v77[1];
              if (v78 == v66)
              {
                if (*((_DWORD *)v77 + 4) == v66) {
                  break;
                }
              }
              else
              {
                if (v78 >= *((void *)&v135 + 1)) {
                  v78 %= *((void *)&v135 + 1);
                }
                if (v78 != v76) {
                  goto LABEL_84;
                }
              }
              int v77 = (uint64_t *)*v77;
            }
            while (v77);
          }
        }
      }
      else
      {
LABEL_84:
        int v77 = 0;
      }
LABEL_85:
      __asm { FCVT            S1, H0 }
      _H2 = _Q0.i16[1];
      __asm { FCVT            S2, H2 }
      float v87 = _S1 + _S2;
      LOWORD(_S2) = _Q0.i16[2];
      __asm { FCVT            S2, H2 }
      _H3 = _Q0.i16[3];
      __asm { FCVT            S3, H3 }
      float v91 = v87 + (float)(_S2 + _S3);
      LOWORD(_S2) = _Q0.i16[4];
      __asm { FCVT            S2, H2 }
      LOWORD(_S3) = _Q0.i16[5];
      __asm { FCVT            S3, H3 }
      float v94 = _S2 + _S3;
      LOWORD(_S3) = _Q0.i16[6];
      __asm { FCVT            S3, H3 }
      _H0 = _Q0.i16[7];
      __asm { FCVT            S0, H0 }
      float v98 = (float)(v91 + (float)(v94 + _S3)) + _S0;
      if (a6 == 0.0 || v98 <= a6)
      {
        if (v77)
        {
          int v100 = *__error();
          BOOL v101 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v98;
            _os_log_impl(&dword_1BD672000, v101, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v100;
        }
        *(_OWORD *)keyExistsAndHasValidFormat = *(_OWORD *)(v65 + 1024);
        *(_DWORD *)&keyExistsAndHasValidFormat[16] = v66;
        *(float *)&keyExistsAndHasValidFormat[20] = v98;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(a4, (long long *)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v77)
        {
          int v102 = *__error();
          int v103 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v66;
            *(_WORD *)&Boolean keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v98;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v61;
            _os_log_impl(&dword_1BD672000, v103, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v102;
        }
        ++*((_DWORD *)v139 + 6);
      }
      ++v62;
    }
    while (v63 == *(void *)(a1 + 32));
    int v118 = __si_assert_copy_extra_329();
    __int16 v119 = v118;
    uint64_t v120 = "";
    if (v118) {
      uint64_t v120 = v118;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v120);
    free(v119);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_126;
  }
  if (!AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v22 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeMax", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = 40;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v24 = CFPreferencesGetAppIntegerValue(@"IVFPartitionSizeFactor", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      int v25 = v24;
    }
    else {
      int v25 = 45;
    }
    keyExistsAndHasValidFormat[0] = 0;
    int v26 = CFPreferencesGetAppIntegerValue(@"IVFPartitionProbeNumerator", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v27 = keyExistsAndHasValidFormat[0];
    int v28 = 8 * v26;
    int v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    unsigned int v30 = CFPreferencesGetAppIntegerValue(@"IVFpartitionProbeDecayExponent", @"com.apple.Spotlight", keyExistsAndHasValidFormat);
    int v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12) {
      char v32 = 18;
    }
    else {
      char v32 = v30;
    }
    char v33 = v32 - 3;
    unsigned int v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    if (v31) {
      char v35 = v33;
    }
    else {
      char v35 = 17;
    }
    unsigned int v36 = v34 >> v35;
    if (v36 <= 8) {
      int v37 = 8;
    }
    else {
      int v37 = v36;
    }
    int v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    if (v27) {
      int v39 = v28;
    }
    else {
      int v39 = 800;
    }
    int v11 = v122;
    unsigned int v40 = v39 * v38 / (v29 * v37);
    if (v23 < v40) {
      unsigned int v40 = v23;
    }
    if (v40 <= v20) {
      CFIndex AppIntegerValue = v20;
    }
    else {
      CFIndex AppIntegerValue = v40;
    }
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    int v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v46 = *(void *)(a1 + 64);
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 72);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = *(void *)(a1 + 80);
  long long v47 = *(std::__shared_weak_count **)(a1 + 88);
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(void *)v46 + 80))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  uint64_t v50 = *(int **)keyExistsAndHasValidFormat;
  uint64_t v49 = *(int **)&keyExistsAndHasValidFormat[8];
  uint64_t v132 = 0;
  __int16 v133 = 0;
  uint64_t v134 = 0;
  double v146 = &v132;
  unint64_t v51 = *(void *)&keyExistsAndHasValidFormat[8] - *(void *)keyExistsAndHasValidFormat;
  if (*(void *)&keyExistsAndHasValidFormat[8] == *(void *)keyExistsAndHasValidFormat)
  {
    double v130 = 0;
    __int16 v131 = 0;
    __int16 v129 = 0;
    goto LABEL_106;
  }
  do
  {
    int v52 = *v50;
    v50 += 2;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v146, v52);
  }
  while (v50 != v49);
  int v53 = v132;
  double v130 = 0;
  __int16 v131 = 0;
  __int16 v129 = 0;
  int64_t v54 = v133 - (unsigned char *)v132;
  if (v133 == v132) {
    goto LABEL_106;
  }
  if (v54 < 0) {
LABEL_126:
  }
    abort();
  long long v55 = (char *)operator new(v133 - (unsigned char *)v132);
  uint64_t v56 = &v55[4 * (v54 >> 2)];
  __int16 v129 = v55;
  __int16 v131 = v56;
  memcpy(v55, v53, v54);
  double v130 = v56;
LABEL_106:
  v124[0] = MEMORY[0x1E4F143A8];
  v124[1] = 1174405120;
  v124[2] = ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v124[3] = &unk_1F1814A78;
  v124[6] = a1;
  v124[7] = a2;
  v124[4] = &v142;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v125, (uint64_t)&v135);
  float v128 = a6;
  v124[5] = &v138;
  __int16 v127 = a4;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v48 + 72))(v48, &v129, v124);
  if (v129)
  {
    double v130 = v129;
    operator delete(v129);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  BOOL v115 = v126;
  int v11 = v122;
  if (v126)
  {
    do
    {
      uint64_t v116 = (void *)*v115;
      operator delete(v115);
      BOOL v115 = v116;
    }
    while (v116);
  }
  uint64_t v117 = v125;
  __int16 v125 = 0;
  if (v117) {
    operator delete(v117);
  }
  if (v132)
  {
    __int16 v133 = v132;
    operator delete(v132);
  }
  if (*(void *)keyExistsAndHasValidFormat)
  {
    *(void *)&Boolean keyExistsAndHasValidFormat[8] = *(void *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  unint64_t v121 = v51 >> 3;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_98:
  int v104 = *__error();
  float v105 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    int v106 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    int v107 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    int v108 = *((_DWORD *)v139 + 6);
    int v109 = *((_DWORD *)v143 + 6);
    unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    CFAbsoluteTime v111 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(void *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v106;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v121;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v107;
    __int16 v148 = 1024;
    int v149 = v108;
    __int16 v150 = 1024;
    int v151 = v109;
    __int16 v152 = 2048;
    unint64_t v153 = v110;
    __int16 v154 = 2048;
    CFAbsoluteTime v155 = v111 - Current;
    _os_log_impl(&dword_1BD672000, v105, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v104;
  float v112 = (void *)__p;
  if ((void)__p)
  {
    do
    {
      float v113 = (void *)*v112;
      operator delete(v112);
      float v112 = v113;
    }
    while (v113);
  }
  float16x8_t v114 = (void *)v135;
  *(void *)&long long v135 = 0;
  if (v114) {
    operator delete(v114);
  }
  _Block_object_dispose(&v138, 8);
  _Block_object_dispose(&v142, 8);
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unint64_t Ptr = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v4 + 32) + 16), *a3, 1044);
  unint64_t v6 = Ptr;
  unint64_t v7 = *(float16x8_t **)(a1 + 56);
  _Q0 = 0uLL;
  unint64_t v9 = -8;
  uint64_t v10 = (float16x8_t *)Ptr;
  do
  {
    float16x8_t v11 = *v7++;
    float16x8_t v12 = v11;
    float16x8_t v13 = *v10++;
    float16x8_t v14 = vsubq_f16(v12, v13);
    _Q0 = vmlaq_f16(_Q0, v14, v14);
    v9 += 8;
  }
  while (v9 < 0x1F8);
  __asm { FCVT            S1, H0 }
  _H2 = _Q0.i16[1];
  __asm { FCVT            S2, H2 }
  float v22 = _S1 + _S2;
  LOWORD(_S2) = _Q0.i16[2];
  __asm { FCVT            S2, H2 }
  _H3 = _Q0.i16[3];
  __asm { FCVT            S3, H3 }
  float v26 = v22 + (float)(_S2 + _S3);
  LOWORD(_S2) = _Q0.i16[4];
  __asm { FCVT            S2, H2 }
  LOWORD(_S3) = _Q0.i16[5];
  __asm { FCVT            S3, H3 }
  float v29 = _S2 + _S3;
  LOWORD(_S3) = _Q0.i16[6];
  __asm { FCVT            S3, H3 }
  _H0 = _Q0.i16[7];
  __asm { FCVT            S0, H0 }
  float v33 = (float)(v26 + (float)(v29 + _S3)) + _S0;
  unint64_t v34 = *(unsigned int *)(Ptr + 1040);
  int8x8_t v35 = *(int8x8_t *)(a1 + 72);
  if (v35)
  {
    uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.u32[0] > 1uLL)
    {
      unint64_t v37 = *(unsigned int *)(Ptr + 1040);
      if (*(void *)&v35 <= v34) {
        unint64_t v37 = v34 % *(void *)&v35;
      }
    }
    else
    {
      unint64_t v37 = (v35.i32[0] - 1) & v34;
    }
    int v38 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * v37);
    if (v38)
    {
      int v38 = (uint64_t *)*v38;
      if (v38)
      {
        if (v36.u32[0] < 2uLL)
        {
          uint64_t v39 = *(void *)&v35 - 1;
          while (1)
          {
            uint64_t v41 = v38[1];
            if (v41 == v34)
            {
              if (*((_DWORD *)v38 + 4) == v34) {
                goto LABEL_24;
              }
            }
            else if ((v41 & v39) != v37)
            {
              goto LABEL_23;
            }
            int v38 = (uint64_t *)*v38;
            if (!v38) {
              goto LABEL_24;
            }
          }
        }
        do
        {
          unint64_t v40 = v38[1];
          if (v40 == v34)
          {
            if (*((_DWORD *)v38 + 4) == v34) {
              break;
            }
          }
          else
          {
            if (v40 >= *(void *)&v35) {
              v40 %= *(void *)&v35;
            }
            if (v40 != v37) {
              goto LABEL_23;
            }
          }
          int v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
    }
  }
  else
  {
LABEL_23:
    int v38 = 0;
  }
LABEL_24:
  float v42 = *(float *)(a1 + 112);
  if (v42 == 0.0 || v33 <= v42)
  {
    if (v38)
    {
      int v44 = *__error();
      uint64_t v45 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v49 = 67109376;
        *(_DWORD *)&v49[4] = v34;
        *(_WORD *)&v49[8] = 2048;
        *(double *)&v49[10] = v33;
        _os_log_impl(&dword_1BD672000, v45, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", v49, 0x12u);
      }
      *__error() = v44;
    }
    *(_OWORD *)uint64_t v49 = *(_OWORD *)(v6 + 1024);
    *(_DWORD *)&v49[16] = v34;
    *(float *)&double v50 = v33;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(*(void **)(a1 + 104), (long long *)v49);
  }
  else
  {
    if (v38)
    {
      int v46 = *__error();
      long long v47 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        double v48 = *(float *)(a1 + 112);
        *(_DWORD *)uint64_t v49 = 67109632;
        *(_DWORD *)&v49[4] = v34;
        *(_WORD *)&v49[8] = 2048;
        *(double *)&v49[10] = v33;
        *(_WORD *)&v49[18] = 2048;
        double v50 = v48;
        _os_log_impl(&dword_1BD672000, v47, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", v49, 0x1Cu);
      }
      *__error() = v46;
    }
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE20createCandidateQueueEj()
{
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE10aNNForTestEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvjfEj(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    operator new();
  }
  unint64_t v6 = __si_assert_copy_extra_329();
  unint64_t v7 = v6;
  int v8 = "";
  if (v6) {
    int v8 = v6;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v8);
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 8) == a2
    && *(unsigned __int16 *)(a1 + 20) == a3
    && a6 <= 2
    && *(_DWORD *)(a1 + 12) == vector_dimension_vec_sizes_12485[a5]
    && vector_size_elem_sizes_12484[a6] == *(_DWORD *)(a1 + 16))
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    float16x8_t v14 = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
    unsigned int v15 = &unk_1E6345080;
    uint64_t v16 = a9;
    operator new();
  }
  unint64_t v9 = __si_assert_copy_extra_329();
  uint64_t v10 = v9;
  float16x8_t v11 = "";
  if (v9) {
    float16x8_t v11 = v9;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v11);
  free(v10);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16restoreUpdateSetEP15PostingBaseInfoP14store_stream_t(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_read_vint32((uint64_t)a3);
  int v41 = result;
  if (result)
  {
    int v6 = 0;
    uint64_t v40 = a1 + 48;
    do
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      unint64_t v7 = __dst;
      bzero(__dst, 0x400uLL);
      int v43 = 0;
      CIReadPostings(a3, a2, (uint64_t)&v45, &v43);
      unint64_t v8 = *((void *)a3 + 4);
      size_t v9 = *((void *)a3 + 5);
      if (v9 + 1024 > v8)
      {
        unsigned int v20 = (char *)*((void *)a3 + 6);
        unint64_t v21 = v8 - v9;
        if (v8 != v9)
        {
          memcpy(__dst, &v20[v9], v8 - v9);
          *((void *)a3 + 5) = v8;
          size_t v9 = v8;
        }
        uint64_t v22 = *a3;
        off_t __offseta = *((void *)a3 + 3);
        unsigned int v23 = v20;
        while (1)
        {
          unint64_t v24 = pread(v22, v23, v9, __offseta);
          if (v24 != -1) {
            break;
          }
          uint64_t v25 = g_prot_error_callback;
          if (!g_prot_error_callback) {
            break;
          }
          float v26 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v25 + 16))(v25, v22, *v26, 4) & 1) == 0)goto LABEL_40; {
        }
          }
        if (v24 != -1)
        {
          *((void *)a3 + 4) = v24;
          *((void *)a3 + 5) = 0;
          off_t v27 = *((void *)a3 + 3) + v24;
          *((void *)a3 + 3) = v27;
          if (!v24) {
            goto LABEL_7;
          }
          unint64_t v7 = &__dst[v21];
          size_t v10 = 1024 - v21;
          if (1024 - v21 <= v24)
          {
            size_t v9 = 0;
            goto LABEL_6;
          }
          off_t v37 = v27;
          off_t __offsetb = v24;
          while (1)
          {
            int v28 = (void *)*((void *)a3 + 6);
            memcpy(v7, v28, __offsetb);
            size_t v29 = __offsetb;
            *((void *)a3 + 5) = __offsetb;
            uint64_t v30 = *a3;
            while (1)
            {
              unint64_t v31 = pread(v30, v28, v29, v37);
              if (v31 != -1) {
                break;
              }
              uint64_t v32 = g_prot_error_callback;
              if (!g_prot_error_callback) {
                break;
              }
              float v33 = __error();
              char v34 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v32 + 16))(v32, v30, *v33, 4);
              size_t v29 = __offsetb;
              if ((v34 & 1) == 0) {
                goto LABEL_40;
              }
            }
            off_t v35 = __offsetb;
            if (v31 == -1) {
              break;
            }
            *((void *)a3 + 4) = v31;
            *((void *)a3 + 5) = 0;
            off_t v36 = *((void *)a3 + 3) + v31;
            *((void *)a3 + 3) = v36;
            if (!v31) {
              goto LABEL_7;
            }
            off_t v37 = v36;
            off_t __offsetb = v31;
            size_t v9 = 0;
            v7 += v35;
            v10 -= v35;
            if (v10 <= v31) {
              goto LABEL_6;
            }
          }
        }
LABEL_40:
        a3[4] = *__error();
      }
      else
      {
        size_t v10 = 1024;
LABEL_6:
        memcpy(v7, (const void *)(*((void *)a3 + 6) + v9), v10);
        *((void *)a3 + 5) = v9 + v10;
      }
LABEL_7:
      unsigned int vint32 = store_stream_read_vint32((uint64_t)a3);
      uint64_t v12 = v45;
      uint64_t v13 = v46;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
      float16x8_t v14 = *(std::__shared_weak_count **)(a1 + 120);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v15 = *(std::__shared_weak_count **)(a1 + 136);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        inserted = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)inserted + 128) = v12;
        *((void *)inserted + 129) = v13;
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        unsigned int v17 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v40, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((void *)v17 + 128) = v12;
        *((void *)v17 + 129) = v13;
      }
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      __int16 v18 = *(_WORD *)(a1 + 76);
      int v19 = *(_DWORD *)(a1 + 156);
      v47[0] = *(_DWORD *)(a1 + 160);
      v47[1] = v19;
      __int16 v48 = v18;
      uint64_t result = *(void *)(a1 + 176);
      if (result)
      {
        if (*(_DWORD *)(result + 216) == -270471200) {
          uint64_t result = data_map_ext_restore_data(result, vint32, __dst, 0x400uLL, v47);
        }
      }
      ++v6;
    }
    while (v6 != v41);
  }
  return result;
}

_DWORD *_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, float a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = a4;
  float v73 = a5;
  if (*(unsigned char *)(a1 + 144))
  {
    int v52 = __si_assert_copy_extra_329();
    int v53 = v52;
    int64_t v54 = "";
    if (v52) {
      int64_t v54 = v52;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2561, "!readOnly", v54);
    goto LABEL_102;
  }
  if (!a2)
  {
    long long v55 = __si_assert_copy_extra_329();
    int v53 = v55;
    uint64_t v56 = "";
    if (v55) {
      uint64_t v56 = v55;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2562, "vectorId > 0", v56);
    goto LABEL_102;
  }
  unsigned int v8 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj(a1, (uint64_t)a3, (int *)&v74, &v73, a2);
  uint64_t v9 = v74;
  if (v74 == -1)
  {
    int v57 = __si_assert_copy_extra_329();
    long long v58 = v57;
    int v59 = "";
    if (v57) {
      int v59 = v57;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2567, "partID != VECTOR_NOT_FOUND", v59);
    goto LABEL_92;
  }
  if (v8 != -1)
  {
    unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(a1 + 32) + 16), v8, 1044);
    if (Ptr[260] == a2) {
      return Ptr;
    }
    uint64_t v72 = 0;
    unsigned int data = (const void *)data_map_get_data(*(void *)(a1 + 128), a2, &v72);
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2586;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = a2;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = data;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v12;
    if (v72 < 1)
    {
      int v19 = *__error();
      uint64_t v32 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2595;
        _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v72 != 1024)
      {
        uint64_t v67 = __si_assert_copy_extra_329();
        int v53 = v67;
        unint64_t v68 = "";
        if (v67) {
          unint64_t v68 = v67;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2588, "size == D * sizeof(ELEM_TYPE)", v68);
        goto LABEL_102;
      }
      if (!data || !memcmp(data, a3, 0x400uLL)) {
        goto LABEL_46;
      }
      int v14 = *__error();
      unsigned int v15 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2590;
        _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v14;
      int v16 = *__error();
      unsigned int v17 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v72);
        __int16 v18 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        unint64_t v76 = v18;
        _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v16;
      int v19 = *__error();
      unsigned int v20 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v72);
        unint64_t v21 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        unint64_t v76 = v21;
        _os_log_impl(&dword_1BD672000, v20, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    *__error() = v19;
LABEL_46:
    float v33 = (const void *)data_map_get_data(*(void *)(a1 + 128), Ptr[260], &v72);
    int v34 = *__error();
    off_t v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v49 = Ptr[260];
      *(_DWORD *)long long __p = 136316162;
      *(void *)&__p[4] = "lookupForInsert";
      __int16 v78 = 1024;
      int v79 = 2598;
      __int16 v80 = 1024;
      *(_DWORD *)int v81 = v49;
      *(_WORD *)&v81[4] = 2048;
      *(void *)&v81[6] = v33;
      __int16 v82 = 2048;
      uint64_t v83 = v72;
      _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v34;
    if (v72 < 1)
    {
      int v42 = *__error();
      uint64_t v45 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2607;
        _os_log_error_impl(&dword_1BD672000, v45, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
      }
      goto LABEL_68;
    }
    if (v72 == 1024)
    {
      size_t v36 = 1024;
      if (!v33 || !memcmp(v33, Ptr, 0x400uLL)) {
        goto LABEL_69;
      }
      int v37 = *__error();
      int v38 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "lookupForInsert";
        __int16 v78 = 1024;
        int v79 = 2602;
        _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v37;
      int v39 = *__error();
      uint64_t v40 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)v33, v72);
        int v41 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        unint64_t v76 = v41;
        _os_log_impl(&dword_1BD672000, v40, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      *__error() = v39;
      int v42 = *__error();
      int v43 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)Ptr, v72);
        int v44 = v81[3] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        unint64_t v76 = v44;
        _os_log_impl(&dword_1BD672000, v43, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
        if ((v81[3] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
LABEL_68:
      *__error() = v42;
      size_t v36 = v72;
LABEL_69:
      if (!memcmp(a3, Ptr, v36))
      {
        int v46 = *__error();
        long long v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
        {
          int v50 = Ptr[260];
          *(_DWORD *)long long __p = 136315906;
          *(void *)&__p[4] = "lookupForInsert";
          __int16 v78 = 1024;
          int v79 = 2610;
          __int16 v80 = 1024;
          *(_DWORD *)int v81 = a2;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v50;
          _os_log_fault_impl(&dword_1BD672000, v47, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v46;
        return Ptr;
      }
      unint64_t v64 = __si_assert_copy_extra_329();
      long long v58 = v64;
      unint64_t v65 = "";
      if (v64) {
        unint64_t v65 = v64;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2609, "memcmp(vec.vec, entry->vec.vec, size) == 0", v65);
LABEL_92:
      free(v58);
      if (__valid_fs(-1)) {
        uint64_t v66 = 2989;
      }
      else {
        uint64_t v66 = 3072;
      }
      *(_DWORD *)uint64_t v66 = -559038737;
      abort();
    }
    std::locale v69 = __si_assert_copy_extra_329();
    int v53 = v69;
    uint64_t v70 = "";
    if (v69) {
      uint64_t v70 = v69;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2600, "size == D * sizeof(ELEM_TYPE)", v70);
LABEL_102:
    free(v53);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  __src = (void *)a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 72);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v24 = *(_DWORD **)(a1 + 80);
  unsigned int v23 = *(std::__shared_weak_count **)(a1 + 88);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  uint64_t v25 = *(void *)(a1 + 32);
  size_t OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(void *)(v25 + 16), 0x414u);
  uint64_t v27 = *(unsigned int *)(v25 + 24);
  if (OffsetFromEnd != v27)
  {
    int v28 = *__error();
    size_t v29 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      int v51 = *(_DWORD *)(v25 + 24);
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "newEntry";
      __int16 v78 = 1024;
      int v79 = 1882;
      __int16 v80 = 2048;
      *(void *)int v81 = OffsetFromEnd;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v51;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
    }
    *__error() = v28;
    uint64_t v27 = *(unsigned int *)(v25 + 24);
    if (OffsetFromEnd != v27)
    {
      unsigned int v62 = __si_assert_copy_extra_329();
      int v53 = v62;
      uint64_t v63 = "";
      if (v62) {
        uint64_t v63 = v62;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1885, "offset == nVectors", v63);
      goto LABEL_102;
    }
  }
  *(_DWORD *)(v25 + 24) = v27 + 1;
  unint64_t v30 = vi_onefixedsize_memory_allocator::getPtr(*(void **)(v25 + 16), OffsetFromEnd, 1044);
  memcpy((void *)v30, __src, 0x400uLL);
  *(_OWORD *)(v30 + 1024) = 0u;
  *(_DWORD *)(v30 + 1040) = a2;
  if (*(_DWORD *)(v25 + 24) == 1) {
    *(_DWORD *)(v25 + 36) = a2;
  }
  *(_DWORD *)(v25 + 40) = a2;
  (*(void (**)(_DWORD *, uint64_t, size_t, float))(*(void *)v24 + 56))(v24, v9, OffsetFromEnd, v73);
  uint64_t v31 = *(void *)(a1 + 32);
  if (v24[18] != *(_DWORD *)(v31 + 24))
  {
    int v60 = __si_assert_copy_extra_329();
    int v53 = v60;
    double v61 = "";
    if (v60) {
      double v61 = v60;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2572, "cur.partitions->nVectors() == vectors->count()", v61);
    goto LABEL_102;
  }
  unint64_t Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(v31 + 16), OffsetFromEnd, 1044);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return Ptr;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  size_t v10 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  uint64_t v12 = *(void *)(a1 + 64);
  float16x8_t v11 = *(std::__shared_weak_count **)(a1 + 72);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *(_DWORD **)(a1 + 80);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v10);
  uint64_t v15 = *a3;
  if (v15 == -1)
  {
    if (*(_DWORD *)(a1 + 140) == -1)
    {
      int v34 = 0;
      off_t v35 = 0;
      uint64_t v36 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(&v34, v12, a2, 1);
      int v16 = v34;
      if (v35 - (char *)v34 == 8)
      {
        unsigned int v17 = *v34;
        *a3 = *v34;
        *a4 = v16[1];
        if (v17 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1))
        {
          uint64_t v25 = __si_assert_copy_extra_329();
          float v26 = v25;
          if (v25) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = "";
          }
          int v28 = *a3;
          int v29 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
          int v30 = v14[19];
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2534, "partID < nPartitions()", v27, v28, v29, v30, v31);
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v34)
        {
          off_t v35 = (char *)v34;
          operator delete(v34);
        }
        uint64_t v15 = *a3;
        goto LABEL_12;
      }
      unsigned int v23 = __si_assert_copy_extra_329();
      unint64_t v21 = v23;
      unint64_t v24 = "";
      if (v23) {
        unint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2529, "topPartition.size() == 1", v24);
    }
    else
    {
      unsigned int v20 = __si_assert_copy_extra_329();
      unint64_t v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2527, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v22);
    }
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_12:
  int v34 = 0;
  off_t v35 = (char *)&v34;
  int v37 = -1;
  uint64_t v36 = 0x2000000000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj_block_invoke;
  v32[3] = &unk_1E6344FA0;
  int v33 = a5;
  v32[6] = a4;
  v32[7] = a2;
  v32[4] = &v34;
  v32[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, void *))(*(void *)v14 + 80))(v14, v15, v32);
  uint64_t v18 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v18;
}

unint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 140)) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  float v9 = **(float **)(result + 48);
  float v10 = a3[1];
  BOOL v11 = v9 == v10;
  float v12 = vabds_f32(v9, v10);
  float v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    int v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      uint64_t result = vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 1044);
      if (v15 != *(_DWORD *)(result + 1040)) {
        return result;
      }
      *(float *)&uint64_t v6 = *a3;
    }
    int v16 = *(const void **)(v8 + 56);
    unint64_t Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(void **)(*(void *)(v5 + 32) + 16), v6, 1044);
    uint64_t result = memcmp(v16, Ptr, 0x400uLL);
    if (!result)
    {
      *(float *)(*(void *)(*(void *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

void *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14storeUpdateSetEP15RelativePostingP14store_stream_t(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(*(void *)(a1 + 80) + 24));
  unsigned int v7 = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  while (v7 != *(_DWORD *)(v8 + 24))
  {
    unint64_t v9 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v8, v7);
    CIWritePostings((uint64_t)a3, a2, 0, (unsigned int *)(v9 + 1024), 0, 0);
    unint64_t v11 = *((void *)a3 + 4);
    uint64_t v10 = *((void *)a3 + 5);
    if (v10 + 1024 >= v11)
    {
      size_t v13 = 1024;
      float v12 = (char *)v9;
      while (1)
      {
        uint64_t v14 = v11 - v10;
        memcpy((void *)(*((void *)a3 + 6) + v10), v12, v11 - v10);
        *((void *)a3 + 5) += v14;
        if (store_stream_flush(a3, 0)) {
          break;
        }
        v12 += v14;
        v13 -= v14;
        unint64_t v11 = *((void *)a3 + 4);
        uint64_t v10 = *((void *)a3 + 5);
        if (v10 + v13 < v11) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      float v12 = (char *)v9;
      size_t v13 = 1024;
LABEL_5:
      memcpy((void *)(*((void *)a3 + 6) + v10), v12, v13);
      *((void *)a3 + 5) += v13;
    }
    uint64_t result = store_stream_write_vint32_2480(a3, *(_DWORD *)(v9 + 1040));
    ++v7;
    if (v8 != *(void *)(a1 + 80))
    {
      int v15 = __si_assert_copy_extra_329();
      int v16 = v15;
      unsigned int v17 = "";
      if (v15) {
        unsigned int v17 = v15;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1926, "store == other.store", v17);
      free(v16);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
  }
  return result;
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6renameEPKc(uint64_t a1, const char *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_10:
  }
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  char v23 = 11;
  strcpy(__s, ".partitions");
  memset(&__p, 0, sizeof(__p));
  int v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  std::string::append(&__p, __s, 0xBuLL);
  if (v23 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  float v12 = *(std::__shared_weak_count **)(a1 + 120);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a1 + 128);
  size_t v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 160))(v14, p_p);
  uint64_t v16 = *(void *)(a1 + 80);
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(v16 + 71) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 48), *(void *)(v16 + 56));
  }
  else {
    std::string buf = *(std::string *)(v16 + 48);
  }
  MEMORY[0x1C1880BF0](v16 + 48, a2);
  int v17 = *__error();
  uint64_t v18 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__s, v16);
    unsigned int v20 = v23 >= 0 ? __s : *(std::string::value_type **)__s;
    *(_DWORD *)unint64_t v24 = 136315394;
    uint64_t v25 = v19;
    __int16 v26 = 2080;
    uint64_t v27 = v20;
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s", v24, 0x16u);
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
  }
  *__error() = v17;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE13makePurgeableEv(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *__error();
  int v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    size_t v13 = v5;
    _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v3;
  size_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t))(*(void *)v9 + 128))(v9);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12makeReadOnlyEv(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)__p, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    uint64_t v5 = *(void *)(a1 + 80);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(v5);
    int v6 = *__error();
    std::string::size_type v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v5);
      uint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      int v15 = v8;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 120);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a1 + 128);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 136);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
    (*(void (**)(uint64_t))(*(void *)v11 + 120))(v11);
    *(unsigned char *)(a1 + 192) = 1;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE8truncateEv(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(16);
    os_log_type_t v3 = dword_1E9FC90E4 < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1E9FC90E4 < 3)))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* call truncate on readOnly index.", v9, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(*(void *)(a1 + 80));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    int v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 128);
    std::string::size_type v7 = *(std::__shared_weak_count **)(a1 + 136);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_unlock(v5);
    (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6unlinkEv(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  int v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v6 = *(void *)(a1 + 80);
  int v7 = *__error();
  uint64_t v8 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::status((uint64_t)__p, v6);
    uint64_t v9 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v14 = v9;
    _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  *__error() = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE7subvertEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v8 = (os_unfair_lock_s *)(a2 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 144));
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 120);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v8);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 176))(v7, v11);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14compactForTestEP22AnyVectorIndexInstancePVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    char v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(16);
  os_log_type_t v8 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_1BD672000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(a1 + 48, a2 + 48, a3);
}

int *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE7compactEP22AnyVectorIndexInstanceP12uint32_map_tP11TermIdStore18CICompactCallbacksPVi(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(16);
  os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)std::string buf = 67109888;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    _os_log_impl(&dword_1BD672000, v5, v6, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  uint64_t result = __error();
  int *result = v4;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    int v12 = __si_assert_copy_extra_329();
    char v13 = v12;
    uint64_t v14 = "";
    if (v12) {
      uint64_t v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE5flushEy(uint64_t a1, uint64_t a2)
{
}

void _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE4dumpEbbPViPvU13block_pointerFbjPKvybjfE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 128);
  int v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v9);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 88);
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v26, &v24, v23);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  __int16 v19 = ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  int v20 = &unk_1E6344FC8;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  long long v32 = 0u;
  long long v33 = 0u;
  char v31 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)&v29, (uint64_t)&v26);
    long long v32 = v29;
    long long v33 = v30;
    if (!(void)v30) {
      break;
    }
    ((void (*)(void *, long long *, char *))v19)(v18, &v32, &v31);
  }
  while (!v31);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v28);
  int v16 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  else
  {
    __int16 v17 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke()
{
  uint64_t v0 = __si_assert_copy_extra_329();
  int v1 = v0;
  uint64_t v2 = "";
  if (v0) {
    uint64_t v2 = v0;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2544, "0", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE17mergeIndexForTestEP22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE21mergeUpdateSetForTestEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      v16[0] = 1024;
      *(_DWORD *)&v16[1] = v8;
      v16[3] = 1024;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  int v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  uint64_t v13 = "";
  if (v11) {
    uint64_t v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

_DWORD *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfojy(_DWORD *result, uint64_t a2, char *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (os_log_type_t v6 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    int v19 = __si_assert_copy_extra_329();
    uint64_t v20 = v19;
    uint64_t v21 = "";
    if (v19) {
      uint64_t v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90E4 >= 5)
  {
    int v22 = *__error();
    uint64_t v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 16))(v6);
      int v25 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 24))(v6);
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      __dst[0] = 67109888;
      __dst[1] = v24;
      LOWORD(__dst[2]) = 1024;
      *(_DWORD *)((char *)&__dst[2] + 2) = v25;
      HIWORD(__dst[3]) = 1024;
      __dst[4] = v26;
      LOWORD(__dst[5]) = 1024;
      *(_DWORD *)((char *)&__dst[5] + 2) = v27;
      _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", (uint8_t *)__dst, 0x1Au);
    }
    uint64_t result = __error();
    int *result = v22;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = (uint64_t)(v6 + 12);
  uint64_t v12 = a4;
  while (v9 != *(_DWORD *)(v10 + 24))
  {
    unsigned int v16 = *(_DWORD *)(IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9)+ 1040);
    int v17 = (const void *)IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    memcpy(__dst, v17, sizeof(__dst));
    unint64_t v18 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    if (*(unsigned char *)(v18 + 1024))
    {
      if (*(_DWORD *)(v18 + 1028)) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
      uint64_t v14 = a5;
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = v12;
    }
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v11, v16, __dst, 0xFFFFFFFF, 3.4028e38);
    uint64_t result = vi_memory_postings::push_posting(a3, v13, inserted + 256, v14);
    ++v9;
  }
  return result;
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfoP17TermIdContainer_s(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(16);
    os_log_type_t v6 = 2 * (dword_1E9FC90E4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      *(_DWORD *)std::string buf = 67109888;
      int v15 = v7;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_1BD672000, v5, v6, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    *__error() = v4;
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  }
  uint64_t v11 = __si_assert_copy_extra_329();
  uint64_t v12 = v11;
  int v13 = "";
  if (v11) {
    int v13 = v11;
  }
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v13);
  free(v12);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE5trainERKNSt3__16vectorIP22AnyVectorIndexInstanceNS5_9allocatorIS8_EEEE(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - *(void *)a2;
  if (v2 == *(void *)a2)
  {
    char v31 = __si_assert_copy_extra_329();
    long long v32 = v31;
    long long v33 = "";
    if (v31) {
      long long v33 = v31;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3294, "vi.size() > 0", v33);
    goto LABEL_54;
  }
  if (*v3 != a1)
  {
    int v34 = __si_assert_copy_extra_329();
    long long v32 = v34;
    off_t v35 = "";
    if (v34) {
      off_t v35 = v34;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3295, "this == vi[0]", v35);
LABEL_54:
    free(v32);
    if (__valid_fs(-1)) {
      uint64_t v36 = 2989;
    }
    else {
      uint64_t v36 = 3072;
    }
    *(_DWORD *)uint64_t v36 = -559038737;
LABEL_58:
    abort();
  }
  uint64_t v6 = a2;
  int v7 = (char *)operator new(8uLL);
  int v8 = v7;
  *(void *)int v7 = a1 + 48;
  if (v4 < 9) {
    goto LABEL_39;
  }
  int v9 = v7 + 8;
  unint64_t v10 = 1;
  uint64_t v11 = v7 + 8;
  uint64_t v37 = v6;
  do
  {
    uint64_t v13 = v3[v10];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v13 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v13 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v13 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v13 + 16))
    {
      int v28 = __si_assert_copy_extra_329();
      long long v29 = v28;
      uint64_t v30 = "";
      if (v28) {
        uint64_t v30 = v28;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3199, "compatible", v30);
      free(v29);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v14 = v13 + 48;
    if (v9 < v11)
    {
      *(void *)int v9 = v14;
      uint64_t v12 = v9 + 8;
      goto LABEL_6;
    }
    uint64_t v15 = (v9 - v8) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_58;
    }
    if ((v11 - v8) >> 2 > v16) {
      unint64_t v16 = (v11 - v8) >> 2;
    }
    if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      __int16 v18 = operator new(8 * v17);
    }
    else
    {
      __int16 v18 = 0;
    }
    int v19 = &v18[8 * v15];
    uint64_t v11 = &v18[8 * v17];
    *(void *)int v19 = v14;
    uint64_t v12 = v19 + 8;
    if (v9 == v8)
    {
LABEL_36:
      operator delete(v8);
      goto LABEL_37;
    }
    unint64_t v20 = v9 - 8 - v8;
    if (v20 < 0x168)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v18[v9 - v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v9 - v8 - 8])
    {
      int v21 = v9;
      goto LABEL_34;
    }
    if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      int v21 = v9;
      do
      {
LABEL_34:
        uint64_t v27 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v21 != v8);
      goto LABEL_35;
    }
    if ((unint64_t)(v8 - v18) < 0x20)
    {
      int v21 = v9;
      goto LABEL_34;
    }
    uint64_t v22 = (v20 >> 3) + 1;
    int v21 = &v9[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v23 = &v18[8 * v15 - 16];
    int v24 = v9 - 16;
    uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v19 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_34;
    }
LABEL_35:
    if (v8) {
      goto LABEL_36;
    }
LABEL_37:
    int v8 = v19;
    uint64_t v6 = v37;
LABEL_6:
    ++v10;
    os_log_type_t v3 = *(void **)v6;
    int v9 = v12;
  }
  while (v10 < (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if (v8)
  {
LABEL_39:
    operator delete(v8);
  }
}

_DWORD *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE13insertForTestEjjPKv14vec_dimensions15vec_data_formatj(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    unint64_t v10 = __si_assert_copy_extra_329();
    uint64_t v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v12);
    free(v11);
    if (__valid_fs(-1)) {
      uint64_t v13 = 2989;
    }
    else {
      uint64_t v13 = 3072;
    }
    *(_DWORD *)uint64_t v13 = -559038737;
    abort();
  }
  uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38);
  if (result[258])
  {
    int v9 = result[257] + 1;
  }
  else
  {
    result[258] = a7;
    int v9 = 1;
  }
  result[257] = v9;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14insertForMergeEjtjPKv14vec_dimensions15vec_data_formatyjf(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_12485[a6]
    || vector_size_elem_sizes_12484[a7] != *(_DWORD *)(a1 + 16))
  {
    int v8 = __si_assert_copy_extra_329();
    int v9 = v8;
    unint64_t v10 = "";
    if (v8) {
      unint64_t v10 = v8;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

char *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12insertVectorEjjPKv14vec_dimensions15vec_data_format14docInvertStateyP15PostingBaseInfo(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7, uint64_t a8, char *a9)
{
  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_12485[a5]
    || vector_size_elem_sizes_12484[a6] != a1[4])
  {
    uint64_t v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3194, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v11 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38)+ 256;
  return vi_memory_postings::push_posting(a9, a7, v11, a8);
}

_DWORD *_ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE17bulkInsertForTestEPKvPKjjS8_(_DWORD *result, char *a2, int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = (uint64_t)(result + 12);
    uint64_t v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        unsigned int v21 = *a5++;
        unsigned int v20 = v21;
        int v23 = *a3++;
        int v22 = v23;
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v8, v20, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[258])
        {
          int v19 = result[257] + 1;
        }
        else
        {
          result[258] = v22;
          int v19 = 1;
        }
        result[257] = v19;
        a2 += 1024;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = a4 / 0xA;
      float v12 = 1.0 / (float)a4;
      do
      {
        uint64_t v14 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          int v15 = *__error();
          unint64_t v16 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v25 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v15;
        }
        unsigned int v17 = a5[v10];
        int v18 = a3[v10];
        uint64_t result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v8, v17, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[258])
        {
          int v13 = result[257] + 1;
        }
        else
        {
          result[258] = v18;
          int v13 = 1;
        }
        result[257] = v13;
        a2 += 1024;
        uint64_t v10 = v14;
      }
      while (v9 != v14);
    }
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6shadowEbPVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  int v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 168))(v9, a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7) {
      return 0;
    }
  }
  else if (!v7)
  {
    return 0;
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return 0;
}

uint64_t _ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12validAddressEPKv(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  os_log_type_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    os_unfair_lock_unlock(v2);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return 1;
}

uint64_t _ZN16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIDF16_Li512EE8allExistEPKvj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = a1 + 48;
    uint64_t v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li512EE(v5, a2))
      {
        a2 += 1024;
        if (!--v6) {
          return a3;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unsigned int v8 = a3 / 0xA;
      float v9 = 1.0 / (float)a3;
      while (1)
      {
        uint64_t v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          int v11 = *__error();
          float v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134217984;
            double v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIDF16_Li512EE(v5, a2))break; {
        a2 += 1024;
        }
        ++v7;
        if (a3 == v10) {
          return a3;
        }
      }
    }
    uint64_t v14 = __si_assert_copy_extra_329();
    int v15 = v14;
    unint64_t v16 = "";
    if (v14) {
      unint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3275, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}